quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"Actually, we can't test this because while it fixes the error, it seems there's another bug that prevents the boundary condition from being fulfilled. However, I put a fix for this second bug in #2437 .",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2441#issuecomment-1100708867:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2441#issuecomment-1100708867,1,['test'],['test']
Testability,Add Appveyor for Windows testing and Coveralls for cooler code coverage.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/52:25,test,testing,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/52,1,['test'],['testing']
Testability,Add Enzyme test for differentiating a single column model with CATKEVerticalDiffusivity,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3837:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3837,1,['test'],['test']
Testability,Add Multi GPU testing,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2526:14,test,testing,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2526,1,['test'],['testing']
Testability,Add Y-partition and XY-partition tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338,1,['test'],['tests']
Testability,Add a bathymetry test for `ShallowWaterModel`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1716:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1716,1,['test'],['test']
Testability,Add a test to check surface bc continuous functions work with ImmersedBoundary,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1928:6,test,test,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1928,1,['test'],['test']
Testability,Add a validation script and/or tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3204:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3204,1,['test'],['tests']
Testability,Add distributed test pipeline,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3326:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3326,1,['test'],['test']
Testability,Add documentation section on how to run tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1176:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1176,1,['test'],['tests']
Testability,Add possible option to test with one file,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2122:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2122,1,['test'],['test']
Testability,Add steady-state test case for the cubed sphere,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3302:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3302,1,['test'],['test']
Testability,Add test for autodifferentiating hydrostatic turbulence simulation,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3867:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3867,1,['test'],['test']
Testability,Add test for implicit free surface with immersed boundary,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2712:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2712,1,['test'],['test']
Testability,Add test of enzyme flux bc,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3643:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3643,1,['test'],['test']
Testability,Add test of tracer advection-diffusion for Enzyme,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480,1,['test'],['test']
Testability,Add testing for MultiRegionGrids with `YPartition`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3202:4,test,testing,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3202,1,['test'],['testing']
Testability,Add tests for Face-Face halo filling,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3324:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3324,1,['test'],['tests']
Testability,Add tests for biogeochemistry on lat/lon grids,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179,1,['test'],['tests']
Testability,Add tests for computations on slices,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2521:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2521,1,['test'],['tests']
Testability,Add the first order scheme to this list:. https://github.com/CliMA/Oceananigans.jl/blob/77e2d1c8b6418db7ac7b4f4d6de0e362107c0942/test/test_time_stepping.jl#L207-L212,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905752031:129,test,test,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905752031,1,['test'],['test']
Testability,"Added a new type WENO5S which allows the execution of the WENO scheme on stretched and uniform grids alike. . In practice:. if the direction is uniform (`typeof(Δc) <: Number`) the scheme defaults to the usual 5th order interpolation coefficients (""uniform setting""). otherwise if the grid is stretched:. - `WENO5S(grid = grid)` will precompute the WENO coefficients for the stretched directions (""stretched"" setting) (I have tested ""on the fly"" coefficient calculation is: it is way too expensive!); - `WENO5s()` will default to the uniform 5th order coefficients (""uniform"" setting); - No support is given for `WENO5S(grid = grid)` for curvilinear grids for the moment (defaults to uniform setting). Comments:; `WENO5()` is obsolete as all the functionalities of `WENO5()` are included in `WENO5S()`, on the other hand, I kept this type for the moment for validation and benchmark purposes. When the `WENO5S(args...)` scheme is approved we can refractor it to `WENO5(args...)` and delete `src/Advection/weno_fifth_order.jl`. The `test/validate_weno_scheme.jl` compares all these methods in terms of time and accuracy on a simple 1D tracer advection simulation. Blow outputs when the grid is fairly coarse (`Nx=20`); ```; ┌ Info: residuals for settings; │ architecture is GPU; │ the spacing is regular; │ ; │ WENO5S stretched setting : 9.677123910420889, ; │ WENO5S uniform setting : 9.677123910420574, ; └ WENO5 (only uniform) : 9.677123910420574; ┌ Info: residuals for settings; │ architecture is GPU; │ the spacing is stretched; │ ; │ WENO5S stretched setting : 6.757165351716798, ; │ WENO5S uniform setting : 15.327517291492, ; └ WENO5 (only uniform) : 15.327517291492; ┌ Info: residuals for settings; │ architecture is CPU; │ the spacing is regular; │ ; │ WENO5S stretched setting : 9.677123910420846, ; │ WENO5S uniform setting : 9.677123910420608, ; └ WENO5 (only uniform) : 9.677123910420608; ┌ Info: residuals for settings; │ architecture is CPU; │ the spacing is stretched; │ ; │ WENO5S str",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2059:426,test,tested,426,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2059,2,"['benchmark', 'test']","['benchmark', 'tested']"
Testability,"Added a test, I ll merge when tests pass",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2651#issuecomment-1190754034:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2651#issuecomment-1190754034,2,['test'],"['test', 'tests']"
Testability,Added adapt method for scalar and scalar biharmonic diffusvity + test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3401:65,test,test,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3401,1,['test'],['test']
Testability,Added an additional test to the enzyme test set for differentiating a `HydrostaticFreeSurfaceModel` with tracer advection and diffusion.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480:20,test,test,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480,2,['test'],['test']
Testability,Added implicit free surface test,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2031#issuecomment-956239478:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2031#issuecomment-956239478,1,['test'],['test']
Testability,"Added some dynamics tests for Coriolis with this last commit. It two a 0-D case for half an inertial period with a rotation about the `z` axis and `x` axis and then compares both to make sure they produce the same result (but rotated). There's one part that tests if the total velocity magnitude is approximately unchanged (magnitude=1), which relies on an implicit arbitrary tolerance which might be bad. I'd curious about your feedback on that one. > if the name is changed to include Cartesian then we can merge this and discuss further in an issue. Per the comment above I'm going to change the name to `ConstantCartesianCoriolis` and (provided the tests all pass and you're okay with my new test addition) I'll proceed to merge this into master and open an issue to further discuss the issues that emerged here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-888495033:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-888495033,8,['test'],"['test', 'tests']"
Testability,Added with tests! Should we export `MultipleForcings`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3743#issuecomment-2313625483:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3743#issuecomment-2313625483,1,['test'],['tests']
Testability,Adding norm for fields with some tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1557:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1557,1,['test'],['tests']
Testability,Adding regression test to lat-lon grid,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2032:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2032,1,['test'],['test']
Testability,"Adding the Manifest won't help for the tests because the test environment generates a new manifest every time, I learned",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3880#issuecomment-2457661193:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3880#issuecomment-2457661193,4,['test'],"['test', 'tests']"
Testability,"Addressing some of the issues on #3892, though we need tests.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3893:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3893,1,['test'],['tests']
Testability,Adds AveragedField test for 256 x 256 x 128 Field,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784,1,['test'],['test']
Testability,"Adds Value Boundary Condition (BC), improves BC function signatures, GPU BC tests",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/237:76,test,tests,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/237,1,['test'],['tests']
Testability,Adds `KernelComputedField <: AbstractField` which is computed using a user-defined `@kernel` function via `KernelAbstractions.jl`. To do:. - [x] Implementation; - [x] Testing; - [x] Example / Docs; - [x] Test complex examples on GPUs. Closes #1246,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1293:167,Test,Testing,167,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1293,2,['Test'],"['Test', 'Testing']"
Testability,Adds a test for broadcasting fields with arrays with singleton dimensions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1947:7,test,test,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1947,1,['test'],['test']
Testability,Adds benchmark for free surface solvers on lat-lon immersed boundary + triply-bounded Poisson bench/validation script,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2784:5,benchmark,benchmark,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2784,1,['benchmark'],['benchmark']
Testability,Adds documentation page for convergence tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/782:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/782,1,['test'],['tests']
Testability,Adds momentum equation test for Enzyme extension,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3822:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3822,1,['test'],['test']
Testability,Adds some tests too. Resolves #637,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/984:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/984,1,['test'],['tests']
Testability,Adds test for race condition in `compute!(::AveragedField)`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1805:5,test,test,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1805,1,['test'],['test']
Testability,Adds tests for Poisson solvers with Flat topologies,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560,1,['test'],['tests']
Testability,"Adds tests for splitting output based on time-interval, e.g., . ```Julia; ow = JLD2OutputWriter(model, (; u);; filename = ""test.jld2"",; ...; file_splitting = TimeInterval(3seconds); ); ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3523:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3523,2,['test'],"['test', 'tests']"
Testability,Advection scheme benchmarks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/934:17,benchmark,benchmarks,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/934,1,['benchmark'],['benchmarks']
Testability,After #2522 me and @dhruvbhagtani will start working on the multi-layer. The plan is to extend the `ShallowWaterModel` to allow non-flat `z` dimensions with `Nz` the number of fluid layers. It would be good if we add a regression test for the single-layer `ShallowWaterModel` to ensure we don't break things in the process.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1137948975:230,test,test,230,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1137948975,1,['test'],['test']
Testability,"After adding `MPI.Init()` back to `distributed_nonhydrostatic_model_mpi.jl`, the script seems to run (it's still running...). Here's a few idle thoughts (independent of this PR, just leaving here for future reference):. * The ""Benchmarks"" module in `/benchmarks/src` causes a few issues like:; ```julia; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ```; It'd be nice to fix that eventually. * The output is kind of annoying:. ```julia; [2022/03/13 13:17:49.875] INFO Benchmarking weak scaling nonhydrostatic model with Slab decomposition [N=(128, 128, 32), ranks=(1, 2, 1)]...; Invalid MIT-MAGIC-COOKIE-1 keyInvalid MIT-MAGIC-COOKIE-1 keyNo protocol specified; [ Info: Oceananigans will use 24 threads; [ Info: Oceananigans will use 24 threads; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590:251,benchmark,benchmarks,251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590,9,"['Benchmark', 'benchmark']","['Benchmarking', 'Benchmarks', 'benchmarks']"
Testability,"After discussion in https://github.com/CliMA/OceananigansArtifacts.jl/pull/21 from what I understood that the new `.jld2` file requires Oceananigans to be generated, I suggest we revert back to using ""https://github.com/CliMA/OceananigansArtifacts.jl/raw/main/cubed_sphere_grids/cubed_sphere_32_grid.jld2"" in . https://github.com/CliMA/Oceananigans.jl/blob/7362a2cedb7c0239e7c42922e0c0f5562851a7e0/test/data_dependencies.jl#L7. and revert back the changes that I made thinking we'd be using a new `.jld2` file for comparisons. I'm happy @siddharthabishnu to merge this PR without really a showcase that it is an improvement. But note that this cannot be the norm, we will have to be able to demonstrate what changes a PR has made in a concise and quantitative manner.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2017535819:398,test,test,398,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2017535819,1,['test'],['test']
Testability,"After going down the rabbit hole of `Documenter.jl` all I can say is that the error message we're seeing means nothing.; All it means that in the makedocs process, there was an error. It is not the makedocs that's throwing the error, but actually something much earlier that pushed an error into the docs.internal.errors field of the document object. Here's where it happens as according to the error log we can see:; https://github.com/JuliaDocs/Documenter.jl/blob/master/src/Builder.jl#L255; As seen in https://github.com/CliMA/Oceananigans.jl/blob/master/docs/make.jl#L162, the makedocs strict option is set to true which follows that:; **`strict`** -- [`makedocs`](@ref) fails the build right before rendering if it encountered; any errors with the document in the previous build phases.; Interestingly enough, the error we see can be summarized as ""error: there's an error"", but does not give any more info on what exactly the error was.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-887149801:401,log,log,401,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-887149801,1,['log'],['log']
Testability,"After the big changes yesterday I decided to run the tests to make sure everything was working. Thanks again @ali-ramadhan for helping me get that started. Now I'm finding that there are some failures and somethings that are broken. See below. Is it just me or do others get this now?. ```; Test Summary: | Pass Fail Broken Total; Oceananigans | 2987 8 5 3000; Unit tests | 1511 1 1512; Model and time stepping tests (part 1) | 99 99; Model and time stepping tests (part 2) | 214 1 215; Simulation tests | 1142 2 3 1147; Simulations | 26 26; Diagnostics | 12 12; Output writers | 409 2 411; FieldSlicer | 1 1; WindowedTimeAverage | 2 2; NetCDF [GPU] | 198 198; JLD2 [GPU] | 11 11; Checkpointer [GPU] | 166 2 168; Dependency adding [GPU] | 2 2; Time averaging of output [GPU] | 29 29; Abstract operations | 695 3 698; Regression | 14 6 20; Thermal bubble [GPU] | 5 5; Rayleigh–Bénard tracer [GPU] | 5 5; Ocean large eddy simulation [GPU] | 4 6 10; Scripts | 7 7; ERROR: LoadError: Some tests did not pass: 2987 passed, 8 failed, 0 errored, 5 broken.; in expression starting at /home/fpoulin/software/Oceananigans.jl/test/runtests.jl:77; ERROR: Package Oceananigans errored during testing; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1179:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1179,9,"['Test', 'test']","['Test', 'test', 'testing', 'tests']"
Testability,"Agreed. Useful and related comment. > I was thinking of doing some prototyping and benchmarking in a sandbox by building off the example in my PR [vchuravy/GPUifyLoops.jl#18](https://github.com/vchuravy/GPUifyLoops.jl/pull/18).; > ; > The PR contains an example that can be extended to rely on a `Grid` struct, multiple `FaceField`s and ` CellField`. So I'll prototype grids and fields that are `isbitstype` (you already helped by doing this for a grid in [#59 (comment)](https://github.com/climate-machine/Oceananigans.jl/issues/59#issuecomment-467660181)) and test to see if they work on the GPU with GPUifyLoops.jl. If they do work and performance isn't degraded then I'll rewrite the operators to use grid and field structs.; > ; > You probably know how to do this better than me, but might be good if I rewrite the operators as they's still undocumented and do some _slightly convoluted_ stuff to avoid having to store intermediate calculations.; > ; > Right now I'm focusing on system tests and benchmarks but once @christophernhill @jm-c and I get closer to implementing the variable _Δz_ grid #47 I will work on this.; >; >_Originally posted by @ali-ramadhan in https://github.com/climate-machine/Oceananigans.jl/issues/115#issuecomment-470782067_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/59#issuecomment-470297910:83,benchmark,benchmarking,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/59#issuecomment-470297910,5,"['benchmark', 'sandbox', 'test']","['benchmarking', 'benchmarks', 'sandbox', 'test', 'tests']"
Testability,"Ah CI doesn't even initialize on the CPU now... Kinda confused why tests were initially failing now since REPL suggests that CUDA.jl behavior actually hasn't changed (and also errors on `CUDA.has_cuda_gpu` like CI does now):. ```julia; shell> hostname; tartarus. julia> ENV[""CUDA_VISIBLE_DEVICES""]; ""-1"". julia> using CUDA. julia> CUDA.has_cuda(); false. julia> CUDA.has_cuda_gpu(); ERROR: CUDA error: initialization error (code 3, ERROR_NOT_INITIALIZED); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/error.jl:91; [2] macro expansion; @ ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/error.jl:101 [inlined]; [3] cuDeviceGetCount; @ ~/.julia/packages/CUDA/YpW0k/lib/utils/call.jl:26 [inlined]; [4] ndevices; @ ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/devices.jl:160 [inlined]; [5] length; @ ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/devices.jl:144 [inlined]; [6] has_cuda_gpu (repeats 2 times); @ ~/.julia/packages/CUDA/YpW0k/src/initialization.jl:136 [inlined]; [7] top-level scope; @ REPL[5]:1; [8] top-level scope; @ ~/.julia/packages/CUDA/YpW0k/src/initialization.jl:52; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942860232:67,test,tests,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942860232,1,['test'],['tests']
Testability,"Ah I see. Well from what I see everything in the [TurbulentStatistic.jl](https://github.com/CliMA/LESbrary.jl/tree/main/src/TurbulenceStatistics) module is compatible with new versions of Oceananigans (except maybe GPU usage). Since that is what you are using, you can maybe use it locally?. This is just a quick fix to try out the new Oceananigans. ; Also, to try out if the problem persists it is enough to test some simple second-order moments. ; The ones you have in your script should do the job; ```; u, v, w = model.velocities; t = model.tracers.T. U = Average(u, dims=(1, 2)) ; V = Average(v, dims=(1, 2)); T = Average(t, dims=(1, 2)); wu = Average(w * u, dims=(1, 2)); wv = Average(w * v, dims=(1, 2)); uu = Average(u * u, dims=(1, 2)); vv = Average(v * v, dims=(1, 2)); ww = Average(w * w, dims=(1, 2)); www = Average(w * w * w, dims=(1, 2)); wT = Average(w * t, dims=(1, 2)); uv = Average(u * v, dims=(1, 2)); uT = Average(u * t, dims=(1, 2)); vT = Average(v * t, dims=(1, 2)); TT = Average(t * t, dims=(1, 2)); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1266331571:409,test,test,409,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1266331571,2,['test'],['test']
Testability,Ah I think Buildkite tests did not run on this PR since we disable Buildkite on PRs from forks (to avoid random PRs executing potentially malicious code on our machines). So we usually open and merge branches from the repo itself. You should be able to do this since you're a repo collaborator.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1346#issuecomment-775428627:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1346#issuecomment-775428627,1,['test'],['tests']
Testability,Ah I think tests are failing because of #1262 so you might have to `git rebase master` or `git merge master`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741117661:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741117661,1,['test'],['tests']
Testability,Ah I think you added `sandbox/vertically_stretched_plankton.jl` back in when we meant to keep it nuked but we can worry about it after this PR is merged.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783652214:22,sandbox,sandbox,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783652214,1,['sandbox'],['sandbox']
Testability,"Ah haha right, feels like a lot more tests would have failed because of that though but it was only CPU tests groups that failed last time so maybe that line is responsible for most of the failures?. PS: Sorry for accidentally closing!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942854704:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942854704,2,['test'],['tests']
Testability,"Ah indeed we never encountered this issue since I think we always ran the benchmark scripts on Linux but this could be an issue on Windows. I think the issue is that the filenames are derived from the title of the tables, e.g. from https://github.com/CliMA/Oceananigans.jl/blob/50ec98e490ce7b30eec4c71dc779865b90eee5fe/benchmark/benchmark_incompressible_model.jl#L39. We could change all instances of `->` to `to`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1672#issuecomment-844269692:74,benchmark,benchmark,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1672#issuecomment-844269692,2,['benchmark'],['benchmark']
Testability,"Ah it's possible that `AnisotropicBiharmonicDiffusivity` isn't doing the right thing on a vertically stretched grid... Certainly it's not tested. The error you're getting with `topology = (Periodic, Bounded, Bounded)` seem related to `cell_advection_timescale` not doing the right thing on a vertically stretched grid as well... It's used to compute CFL by the `TimeStepWizard`. We should fix these soon but for now you could try running with a constant time step.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-794035595:138,test,tested,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-794035595,1,['test'],['tested']
Testability,Ah nice find. The `mapreduce` solution might work. Could move what @christophernhill and @glwagner used in the conjugate gradient solver to `Oceananigans.Fields`: https://github.com/CliMA/Oceananigans.jl/blob/3824da302d2b715c8b3328c2029613260c5c61c4/src/Solvers/preconditioned_conjugate_gradient_solver.jl#L105-L110. But yeah I think all the GPU `norm` tests failed because of CUDA scalar operations.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1562#issuecomment-817869562:353,test,tests,353,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1562#issuecomment-817869562,1,['test'],['tests']
Testability,Ah right sorry I missed that! Unfortunately yeah the error by itself isn't super helpful... Did the initial error come with any more info higher up in the log? Could also be nice to post the full log (if there's more to it).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1455#issuecomment-796869175:155,log,log,155,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1455#issuecomment-796869175,2,['log'],['log']
Testability,"Ah so I've realised this isn't the fix we needed, and I was just hiding it from myself in the profile because I replaced the function by writing it in the REPL. I made an MWE:. ```jula; using Oceananigans. grid = RectilinearGrid(GPU(), topology = (Flat, Flat, Bounded), size = (100, ), extent = (400, )). model = HydrostaticFreeSurfaceModel(; grid, velocities = PrescribedVelocityFields(), momentum_advection=nothing, buoyancy=nothing, tracers = ntuple(n->Symbol(:T, n), Val(30))); ```; <img width=""1361"" alt=""Screenshot 2024-09-26 at 12 00 29"" src=""https://github.com/user-attachments/assets/2cf2a379-88e9-428f-8156-4ddead2a02e4"">; You can see from this profile that `fill_open_boundary_regions!` takes a lot longer than `fill_halo_event!`, even though there are no velocity open boundaries. This is because it is launching a load of zero size kernels where as `fill_halo_event!` just returns nothing instead. I've fixed this now and get this from the profile instead:; <img width=""1251"" alt=""Screenshot 2024-09-26 at 12 02 11"" src=""https://github.com/user-attachments/assets/0bf91086-bc12-4a17-ba48-89b9b1c2e7ae"">. In numbers, the original version benchmarks `time_step!` at around 4.074 ms ± 581.472 μs and the new version 2.438 ms ± 501.642 μs",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3792#issuecomment-2376508207:1150,benchmark,benchmarks,1150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3792#issuecomment-2376508207,1,['benchmark'],['benchmarks']
Testability,"Ah sorry I accidently merged yesterday without addressing this point. Dellar (2011) and other literature I've read commonly use f and f̃ (`\tilde{f}`) to refer to `fz` and `fy`, although I think `fz` and `fy` is clearer and we did decide to switch to `fz` and `fy` at some point. Following the same logic, `βz` and `βy` would be both consistent and clearer. _Originally posted by @ali-ramadhan in https://github.com/CliMA/Oceananigans.jl/pull/899#discussion_r483949249_",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/918:299,log,logic,299,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/918,1,['log'],['logic']
Testability,"Ah sorry, should have read your earlier message. I was able to reproduce the error locally with. ```julia; using Oceananigans, Oceananigans.OutputWriters; grid = RegularRectilinearGrid(size=(1, 1, 1), extent=(1, 1, 1)); model = IncompressibleModel(grid=grid); NetCDFOutputWriter(model, fields(model), filepath=""test.nc"", schedule=IterationInterval(1)); ```. <details><summary>Stacktrace</summary><p>. ```; Error showing value of type NetCDFOutputWriter{NCDatasets.NCDataset{Nothing},Dict{String,Field{X,Y,Z,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},B} where B where Z where Y where X},IterationInterval,FieldSlicer{Colon,Colon,Colon},UnionAll}:; ERROR: MethodError: no method matching short_show(::FieldSlicer{Colon,Colon,Colon}); Closest candidates are:; short_show(::AveragedTimeInterval) at /home/alir/tmp/Oceananigans.jl/src/OutputWriters/windowed_time_average.jl:209; Stacktrace:; [1] show(::IOContext{REPL.Terminals.TTYTerminal}, ::NetCDFOutputWriter{NCDatasets.NCDataset{Nothing},Dict{String,Field{X,Y,Z,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},B} where B where Z where Y where X},IterationInterval,FieldSlicer{Colon,Colon,Colon},UnionAll}) at /home/alir/tmp/Oceananigans.jl/src/OutputWriters/netcdf_output_writer.jl:490; [2] show(::IOContext{REPL.Terminals.TTYTerminal}, ::MIME{Symbol(""text/plain"")}, ::NetCDFOutputWriter{NCDatasets.NCDataset{Nothing},Dict{String,Field{X,Y,Z,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},B} where B where Z ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787496825:311,test,test,311,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787496825,1,['test'],['test']
Testability,Ah thanks for trying. I'll close this PR then. We probably need to design a good test to find the bug(s).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1520#issuecomment-810371371:81,test,test,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1520#issuecomment-810371371,1,['test'],['test']
Testability,Ah the classic (which this test is designed to catch). We also need to bump KA @glwagner if you would do the honors.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2110781904:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2110781904,1,['test'],['test']
Testability,Ah true but there's probably a lot of untested stuff (its not feasible to test every possible model...),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1556#issuecomment-815963620:74,test,test,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1556#issuecomment-815963620,1,['test'],['test']
Testability,Ah we should probably add @johncmarshall54's suggested test before merging: ensure an ocean stratified along the direction of g remains at rest (up to some tolerance? not sure if it'll be machine precision zero).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-783517290:55,test,test,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-783517290,1,['test'],['test']
Testability,"Ah were you in a REPL session with a long history + Revise.jl (including before the change)? In this case, a fresh REPL might have uncovered the issue. But if that wasn't it, then I'm not too sure how the tests passed...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787508035:205,test,tests,205,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787508035,1,['test'],['tests']
Testability,Ah you're right! I forgot that `Pkg.test()` did that. I found the docs for it: https://pkgdocs.julialang.org/v1/api/#Pkg.test. I think the `-O0` flag is something Oceananigans.jl does on Buildkite though: https://github.com/CliMA/Oceananigans.jl/blob/main/.buildkite/pipeline.yml,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3747#issuecomment-2318407806:36,test,test,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3747#issuecomment-2318407806,2,['test'],['test']
Testability,"Ah! Good to know! Thanks.; Argel Ramírez Reyes. > On Jan 14, 2022, at 3:10 PM, Navid C. Constantinou ***@***.***> wrote:; > ; > ; > I don't understand what is going on with my two PRs that are not passing the tests. Should I close and create them again from the latest master?; > ; > Nope. It's not your fault. We are having issues with the CI.; > ; > —; > Reply to this email directly, view it on GitHub <https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013533717>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABVLG6KOMQMGZB2JFMSZFMTUWCUM7ANCNFSM5K45P62A>.; > Triage notifications on the go with GitHub Mobile for iOS <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>. ; > You are receiving this because you were mentioned.; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013539188:209,test,tests,209,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013539188,1,['test'],['tests']
Testability,"Ah, I see. I thought it was validated. > Perhaps you can come up with a nice validation experiment that we can use to gain confidence that it works correctly, and then add some documentation?. It's hard for me to come up with a validation experiment for that I think. Are we testing that the viscosities are calculated and added correctly? (Thus a simple analytical example might suffice or an example where we just add two constant diffusities.) Or are we testing that the interface is working?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883511439:275,test,testing,275,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883511439,4,['test'],['testing']
Testability,"Ali, good progress. Does this keep a resting fluid stratified in the; direction of gravity at rest? John. On Wed, Dec 2, 2020, 5:41 PM Ali Ramadhan <notifications@github.com> wrote:. > This PR adds experimental support for rotating/tilting the gravity vector.; >; > I'm not even sure if it works properly but I'm opening a draft PR as it; > might be ready to be experimented with? I don't think we can have a; > non-zero gravity component along a periodic direction as the fluid just; > free falls along that dimension and the model blows up.; >; > But here's a plume rising with gravity tilted at 45 degrees; >; > [image: tilted_gravity_plume]; > <https://user-images.githubusercontent.com/20099589/100940093-5ab5d600-34c5-11eb-918e-f574f284f024.gif>; >; > This is an experimental feature since it needs more rigorous testing and; > because full support for tilted gravity may require more work, e.g.; >; > 1. Should AMD use z_dot_g_b now?; > 2. Should ∂x_b return a vector or should it be split up into x_dot_∂x_b,; > etc.? The Leith closure uses ∂x_b.; > 3. We may want to clean up and refactor the implementation, taking; > some suggestions from #1151; > <https://github.com/CliMA/Oceananigans.jl/issues/1151>.; >; > cc @tomchor <https://github.com/tomchor>; >; > Resolves #1151 <https://github.com/CliMA/Oceananigans.jl/issues/1151>; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/CliMA/Oceananigans.jl/pull/1242; > Commit Summary; >; > - Make room for tuple gravity; > - Some `{x,y,z}_dot_g_b`; > - Tilted gravity plume sandbox; >; > File Changes; >; > - *A* sandbox/tilted_gravity_plume.jl; > <https://github.com/CliMA/Oceananigans.jl/pull/1242/files#diff-9f5abd06fd694cf6f0d35019ea409e07e100a801fbfcd9a2a8d3737801a341b0>; > (53); > - *M* src/Buoyancy/Buoyancy.jl; > <https://github.com/CliMA/Oceananigans.jl/pull/1242/files#diff-55d14f16043b022b6a286fd9881d334208e6b6251d122555d3ede4014ea59e55>; > (10); > - *A* src",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-737549819:819,test,testing,819,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-737549819,1,['test'],['testing']
Testability,"All CPU tests don't even run... It's been happening past few days. Same, e.g., in #1915..",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1917#issuecomment-890587470:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1917#issuecomment-890587470,1,['test'],['tests']
Testability,All of that said I'm not sure it works. Trying to figure that out. The fact that tests pass is good (at least the changes didn't break anything).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1595#issuecomment-821334387:81,test,tests,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1595#issuecomment-821334387,1,['test'],['tests']
Testability,All tests have passed so will merge!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2598#issuecomment-1146677821:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2598#issuecomment-1146677821,1,['test'],['tests']
Testability,All tests pass except the cleanup cpu. ; i’ll merge.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1119583275:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1119583275,1,['test'],['tests']
Testability,All tests pass here; I don't know what these random ❌'s are...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3511#issuecomment-1997096703:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3511#issuecomment-1997096703,1,['test'],['tests']
Testability,All tests pass here; ignore the ❌s. See:. https://buildkite.com/clima/oceananigans/builds/15280; https://buildkite.com/clima/oceananigans-distributed/builds/1765,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3528#issuecomment-2029550700:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3528#issuecomment-2029550700,1,['test'],['tests']
Testability,All the distrubuted benchmarks pass on my local machine. If the tests pass then I need to resolve conflicts with master. Is the immersed bundary branch that I merged from already merged with master?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-844160093:20,benchmark,benchmarks,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-844160093,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"All the tests seem to pass but I get two errors. The first error is on a GPU, running `test_shallow_water_diffusion_cosine` on the field `u` using the `ConservativeFormulation()`. When I run this in isolation I get the following error. Any suggestions on what to do here?. ```; [2024/02/27 10:33:43.977] INFO Testing ShallowWaterModel cosine viscous diffusion [u, ConservativeFormulation()]; [2024/02/27 10:33:43.977] WARN The ShallowWaterModel is currently unvalidated, subject to change, and should not be used for scientific research without adequate validation. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/ShallowWaterModels/shallow_water_model.jl:129; ERROR: Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/uOYfN/src/GPUArraysCore.jl:103; [3] getindex(xs::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, I::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/EZkix/src/host/indexing.jl:9; [4] getindex; @ ~/.julia/packages/OffsetArrays/0MOrf/src/OffsetArrays.jl:438 [inlined]; [5] _getindex; @ ./abstractarray.jl:1321 [inlined]; [6] getindex; @ ./abstractarray.jl:1288 [inlined]; [7] getindex; @ ~/Software/Oceananigans.jl/src/Fields/field.jl:399 [inlined]; [8] _broadcast_getindex; @ ./broadcast.jl:675 [inlined]; [9] _getindex; @ ./broadcast.jl:705 [inlined]; [10] _broadcast_getindex; @ ./broadcast.jl:681 [inlined]; [11] getindex; @ ./broadcast.jl:636 [inlined]; [12] macro expansion; @ ./broadcast.jl:1004 [inlined]; [13] macro expansion; @ ./simdloop.jl:77 [inlined]; [14] copyto!; @ ./broa",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966839141:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966839141,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"Allow linear time interpolation between different indices of the field time series triggered by a Float64 (AbstractTime not supported at the moment) index. ; ```julia; julia> fts2 = FieldTimeSeries(""testfile.jld2"", ""u"");. julia> fts2[1]; 17×16×10 Field{Face, Center, Center} on LatitudeLongitudeGrid on CPU; ├── grid: 16×16×10 LatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded} on CPU with 3×3×3 halo and with precomputed metrics; ├── boundary conditions: Nothing; └── data: 23×22×16 OffsetArray(view(::Array{Float64, 4}, :, :, :, 1), -2:20, -2:19, -2:13) with eltype Float64 with indices -2:20×-2:19×-2:13; └── max=2.0, min=2.0, mean=2.0. julia> fts2[2]; 17×16×10 Field{Face, Center, Center} on LatitudeLongitudeGrid on CPU; ├── grid: 16×16×10 LatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded} on CPU with 3×3×3 halo and with precomputed metrics; ├── boundary conditions: Nothing; └── data: 23×22×16 OffsetArray(view(::Array{Float64, 4}, :, :, :, 2), -2:20, -2:19, -2:13) with eltype Float64 with indices -2:20×-2:19×-2:13; └── max=4.0, min=4.0, mean=4.0. julia> fts2[1.35]; 17×16×10 Field{Face, Center, Center} on LatitudeLongitudeGrid on CPU; ├── grid: 16×16×10 LatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded} on CPU with 3×3×3 halo and with precomputed metrics; ├── boundary conditions: FieldBoundaryConditions; │ └── west: Nothing, east: Nothing, south: ZeroFlux, north: ZeroFlux, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux; ├── operand: BinaryOperation at (Face, Center, Center); ├── status: time=0.0; └── data: 23×22×16 OffsetArray(::Array{Float64, 3}, -2:20, -2:19, -2:13) with eltype Float64 with indices -2:20×-2:19×-2:13; └── max=2.7, min=2.7, mean=2.7. julia> fts2[1, 1, 1, 13]; 26.0. julia> fts2[1, 1, 1, 14]; 28.0. julia> fts2[1, 1, 1, 13.67]; 27.34; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3236:199,test,testfile,199,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3236,1,['test'],['testfile']
Testability,Allow testing of just a single file,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3511:6,test,testing,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3511,1,['test'],['testing']
Testability,Allow v1.3 GPU tests to fail on GitLab CI,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/467:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/467,1,['test'],['tests']
Testability,"Alright so as suggested I added a test for CFL calculation with a vertically stretched grid. Also refactored where the minΔx functinos go like @glwagner suggested, so if the tests pass I believe this should be good to go. @ali-ramadhan should I just call JuliaRegistrator to register this after it's merged?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1467#issuecomment-799660063:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1467#issuecomment-799660063,2,['test'],"['test', 'tests']"
Testability,"Also I think just doing the proposed test with a mix of LES closure and `IsotropicDiffusivity` is just fine. I think we can be reasonably confident the infrastructure works with that one test. I think we should also run the tests for different mixes of `time_discretization`. The infrastructure is supposed to work generally (so it should be valid to use `ExplicitTimeDiscretization` for both, `VerticallyImplicitTimeDiscretization` for both, or a mix). But we can collaborate on expanding the test to those cases once the basic comparison between the two simulations is in place.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-884199479:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-884199479,4,['test'],"['test', 'tests']"
Testability,"Also if we are following syntax for `Forcing` and `BoundaryConditions`, we may want to use the ordering `i, j, k, grid, clock, fields, location`, which preserves the logic: . 1. position (i, j, k, grid); 2. time (clock, iteration, time); 3. fields; 4. ""everything else""",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2690#issuecomment-1204110800:166,log,logic,166,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2690#issuecomment-1204110800,1,['log'],['logic']
Testability,"Also reported by @qwert2266 but this is my fault since GitLab CI doesn't seem to be actually running GPU tests... Using something like; ```julia; @inline FT(x, y, z, t, T, p) = - exp(z/p.ℓ) * 2p.K/p.Δz^2 * T; T_forcing = Forcing(FT, field_dependencies=:T, parameters=bc_params); forcing = (T=T_forcing,); ```. causes. ```; ERROR: LoadError: GPU compilation of kernel gpu_calculate_Gu!(Cassette.Context{nametype(CUDACtx),KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(128, 128, 128)},KernelAbstractions.NDIteration.DynamicCheck,Nothing,Nothing,KernelAbstractions.NDIteration.NDRange{3,KernelAbstractions.NDIteration.StaticSize{(8, 8, 128)},KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)},Nothing,Nothing}},Nothing,KernelAbstractions.var""##PassType#253"",Nothing,Cassette.DisableHooks}, typeof(Oceananigans.TimeSteppers.gpu_calculate_Gu!), OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}, RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, Oceananigans.Advection.CenteredSecondOrder, NonTraditionalFPlane{Float64}, Nothing, AnisotropicDiffusivity{Float64,Float64,Float64,NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}}}, NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, Nothing, NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:105,test,tests,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['test'],['tests']
Testability,Also shallow water model tests are failing with `type Nothing has no field f`: https://buildkite.com/clima/oceananigans/builds/842#ea16ffb3-252d-4d5a-b46a-a585cedd915e/38-257. I'm guessing the default for `ShallowWaterModel`s is `coriolis = nothing` but the tendency kernels use `coriolis.f`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739937856:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739937856,1,['test'],['tests']
Testability,"Also the original pasted code doesn't fail for me, so it seems we may not be able to reproduce the test on all machines... I ran the code just above and I get. ```julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9522654528754464, 1.9522654528754464, 1.9522654528754464, 1.9522654528754464]; 4-element Vector{Float64}:; 1.9522654528754464; 1.9522654528754464; 1.9522654528754464; 1.9522654528754464. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Passed; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308168425:99,test,test,99,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308168425,3,"['Test', 'test']","['Test', 'test']"
Testability,"Also to be clear, declaring something as `const`, and then inserting that variable's value into another data structure does not guarantee that the value in the second data structure is fixed. `const` attaches to a name and does not ""propagate"" into other data structures like `ContinuousBoundaryFunction.parameters`. So things like the following are valid:. ```julia; julia> mutable struct Test{T}; a :: T; end. julia> const b = 2; 2. julia> t = Test(b); Test{Int64}(2). julia> t.a = 3; 3. julia> t; Test{Int64}(3); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881686691:390,Test,Test,390,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881686691,4,['Test'],['Test']
Testability,"Also to elaborate a bit: file extensions are _always_ arbitrary. The extension is just for people reading the contents of a directory, so they know what kind of data is contained in a file. For example this is fine:. ```bash; $ echo 'println(""Hello world!"")' >> test.txt ; $ julia --project test.txt [11:28:26]; Hello world!; ```. It's just poor communication to put your julia code in files appended with `.txt`. And your text editor won't highlight it correctly 😱 . So I think we really should somehow enforce extensions to help users communicate and love each other.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1098308190:262,test,test,262,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1098308190,2,['test'],['test']
Testability,"Also update on correctness / testing: there are now tests that fluxes are correctly imposed:. https://github.com/CliMA/Oceananigans.jl/blob/22739d6a5d410317b0a6fa5cf538ba43dabe16bf/test/test_boundary_conditions_integration.jl#L226-L227. I don't believe there are any simple tests that `Value` / `Gradient` boundary conditions are imposed correctly --- even without an immersed boundary. Instead, we have relied on validation tests to check that. I think it does make sense though to have some tests in that direction... maybe something like a test that 1D couette flow is maintained (for momentum) and that a simple linear tracer gradient is maintained (for tracers). Those would go here: https://github.com/CliMA/Oceananigans.jl/blob/glw/immersed-bcs/test/test_dynamics.jl. Since we don't have that yet we should probably add in another PR. It'd be nice therefore to have a few validation experiments in hand before merging that indicate no-slip ""seems to work"". cc @raphaelouillon",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105451882:29,test,testing,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105451882,16,['test'],"['test', 'testing', 'tests']"
Testability,Also wondering why there isn't a test that catches this? Does it depend on the size of the problem?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2530#issuecomment-1261408639:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2530#issuecomment-1261408639,1,['test'],['test']
Testability,"Also, I noticed there was an error at the very beginning, copied below. ```; TEST_GROUP=shallow_water julia --project -e 'using Pkg; Pkg.test()'; Testing Oceananigans; ┌ Error: Pkg.Resolve.ResolverError(""Unsatisfiable requirements detected for package JLLWrappers [692b3bcd]:\n JLLWrappers [692b3bcd] log:\n ├─possible versions are: [1.0.0-1.0.2, 1.1.0-1.1.4, 1.2.0] or uninstalled\n ├─restricted to versions 1.1.3 by an explicit requirement, leaving only versions 1.1.3\n └─restricted by compatibility requirements with IntelOpenMP_jll [1d5cc7b8] to versions: 1.2.0 — no versions left\n └─IntelOpenMP_jll [1d5cc7b8] log:\n ├─possible versions are: 2018.0.3 or uninstalled\n └─restricted to versions 2018.0.3 by an explicit requirement, leaving only versions 2018.0.3"", nothing); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1326#issuecomment-770853975:137,test,test,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1326#issuecomment-770853975,4,"['Test', 'log', 'test']","['Testing', 'log', 'test']"
Testability,"Also, do we need a type-stable constructor for `ScalarDiffusivity`? Basically all constructors we have are not type stable so I don't see why ScalarDiffusivity should be type-stable. If we want the diffusivity to be mutable (like in the enzyme test) we can pass an array or a field to the `ScalarDiffusivity` instead of reconstructing the diffusivity type.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327810709:244,test,test,244,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327810709,1,['test'],['test']
Testability,"Also, for open boundary conditions, we probably want to have a z-star coordinate and a non-linear free surface to make sure we conserve volume (@jm-c could advise). There is one open PR for ZStar if you want to take a look and test it out (#3411), it is not stale because I am keeping it updated (and should be working), but it's still in a testing phase, and it is still not correct for immersed boundaries.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2312743274:227,test,test,227,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2312743274,2,['test'],"['test', 'testing']"
Testability,"Also, the docs are failing to build with this error:. ```; ERROR: LoadError: IOError: sendfile: no space left on device (ENOSPC); ```. Do we still have a storage problem? I believe these tests run on tartarus, not sverdrup, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1762#issuecomment-867678106:187,test,tests,187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1762#issuecomment-867678106,1,['test'],['tests']
Testability,"Also, this PR shows that tests have passed. But do the tests run the benchmarks? @ali-ramadhan is there a benchmark pipeline and how can we trigger it if so?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866291414:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866291414,4,"['benchmark', 'test']","['benchmark', 'benchmarks', 'tests']"
Testability,Also:. * Changes test_examples.jl to spew example file into the build log on error.; * Makes a minor correction to the replace strings for the `ocean_wind_mixing_ and_convection.jl` example.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/748:70,log,log,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/748,1,['log'],['log']
Testability,"Although it seems an easy fix, I'm leaning more towards to dropping support for v1.8 since we don't test there any more. Even if this bug can be alleviated, who knows whether something else is broken (or even silently broken, without even spitting out an error).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3184#issuecomment-1637026804:100,test,test,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3184#issuecomment-1637026804,1,['test'],['test']
Testability,"Although the new `test_netcdf_file_splitting` is working, I'm currently having issues in with the `test_netcdf_time_averaging`, where this test fails.; https://github.com/CliMA/Oceananigans.jl/blob/3bb62a647a55a7dadf5f37331321bf0020a78c4d/test/test_netcdf_output_writer.jl#L683; I've tested the PR & the `main` upstream branch in my computer and I have the same error:; ```; Stacktrace:; [1] macro expansion; @ ~/.julia/juliaup/julia-1.10.2+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/Test/src/Test.jl:672 [inlined]; [2] test_netcdf_time_averaging(arch::CPU); @ Main ~/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:727; [3] macro expansion; @ ~/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:889 [inlined]; [4] macro expansion; @ ~/.julia/juliaup/julia-1.10.2+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/Test/src/Test.jl:1577 [inlined]; [5] top-level scope; @ ~/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:880; NetCDF output writer [CPU]: Test Failed at /Users/jmtzmo/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:727; Expression: all(isapprox.((ds[""c2""])[:, n + 1], c̄2(averaging_times), rtol = rtol)); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3506#issuecomment-1994369830:139,test,test,139,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3506#issuecomment-1994369830,12,"['Test', 'test']","['Test', 'test', 'tested']"
Testability,"Among the packages that are loaded in `dependencies_for_runtests.jl` are `DataDeps` and `TimeDate`, which aren't part of Oceananigans dependencies. So I always have to either install those packages or comment out those lines when running tests locally. (Unless there's an easier solution that I'm not aware of!). While this isn't a huge hassle, it does make it less likely (at least for me) to test my changes locally, so I'm attempting this slight change in the loading of packages where only standard Julia packages and Oceananigans dependencies are loaded in `dependencies_for_runtests.jl` and the rest are loaded only in the scripts where they used. Hopefully this should make testing changes locally easier for everyone.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2715:238,test,tests,238,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2715,3,['test'],"['test', 'testing', 'tests']"
Testability,"An easier course of action would be to forget about performance at first and just fill halos every substep.; This will be quite inefficient but will allow us to test open boundary conditions for the hydrostatic model and validate them first. There is an implementation of a split explicit free surface solver that does not require special operators (specifically for a multi region grid) in #3596 ; https://github.com/CliMA/Oceananigans.jl/blob/a6e9a465aa9528b5b3afd49737310e710e4681b0/src/MultiRegion/multi_region_split_explicit_free_surface.jl#L130-L170. We could adapt this implementation for normal grids by implementing a keyword argument in the `SpliExplicitFreeSurface` constructor. Something like the `extended_halos` that is mentioned here; https://github.com/CliMA/Oceananigans.jl/blob/a6e9a465aa9528b5b3afd49737310e710e4681b0/src/MultiRegion/multi_region_split_explicit_free_surface.jl#L19-L28. For serial grids, `extended_halos` is not the correct argument, though, because we do not extend halos (we do that only on distributed and multi region grids), so maybe something like `use_boundary_aware_operators.` . Once the numerics have been settled we can adapt the open boundary condition implementation to the special operators.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3828#issuecomment-2399186268:161,test,test,161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3828#issuecomment-2399186268,1,['test'],['test']
Testability,And CUDA runtime wasn't found in that PR: https://buildkite.com/clima/oceananigans-distributed/builds/4038#0192c76f-d6ea-4e48-a7fd-f1b22df9f89f/189-1063. so we just need to look at the PR before that... PS @Sbozzolo we realized there was a problem with the way we ran the tests that would allow the GPU tests to pass even if they didn't run on GPU,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2455770953:272,test,tests,272,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2455770953,2,['test'],['tests']
Testability,And all tests pass! Great! Ignore my messages!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2091221383:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2091221383,1,['test'],['tests']
Testability,"And just to provide more context, the reason for doing this is so that regression test data doesn't blow up the git repo. This is especially important here because we are going to make big changes to `HydrostaticFreeSurfaceModel`...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1373#issuecomment-849929606:82,test,test,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1373#issuecomment-849929606,1,['test'],['test']
Testability,"And note that we only really need a unit test to merge this, same for many things. Correctness is a high bar and it's ok if we can't come up wtih someone right away. Sometimes we don't really have a way to do correctness and our best option is something like a regression test (eg we verified it worked at one point, so we just make sure that it keeps returning that same result). . One way to go partway towards functional test but not all the way to ""correctness"" is to simply test that a simple set up returns a different result when closure fluxes are included vs not (for example).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433794044:41,test,test,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433794044,8,['test'],['test']
Testability,And to do those tests on the GPU we need `CUDA.@allowscalar`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2091014806:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2091014806,1,['test'],['tests']
Testability,Another attitude is to merge this and start a new PR for a test...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-897173043:59,test,test,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-897173043,1,['test'],['test']
Testability,Another idea: check that the grid architecture and model architecture match to avoid issues like the test failure in #1467.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1453#issuecomment-799734876:101,test,test,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1453#issuecomment-799734876,1,['test'],['test']
Testability,"Another possibility is to write some tests using `HydrostaticFreeSurfaceModel` with `ExplicitFreeSurface`, which is entirely explicit and thus requires only halo filling via MPI (with no PencilArrays dependency)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1105468942:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1105468942,1,['test'],['tests']
Testability,Another test that reveals a problem with non-separated pressure is a simple horizontal wall in a 2D setup.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3677#issuecomment-2270149062:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3677#issuecomment-2270149062,2,['test'],['test']
Testability,Any idea why [distributed tests](https://buildkite.com/clima/oceananigans/builds/6805#646493ef-a91c-418c-b51f-4cafeced8ff1) fail?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1103448537:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1103448537,1,['test'],['tests']
Testability,Any idea why the test isn't passing?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1875#issuecomment-883025275:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1875#issuecomment-883025275,1,['test'],['test']
Testability,Any idea why this test might be failing in this PR?. ```; HeptadiagonalIterativeSolver: Test Failed at /var/lib/buildkite-agent/builds/tartarus-5/clima/oceananigans/test/test_matrix_poisson_solver.jl:104;   | Expression: all(interior(∇²ϕ_solution) .≈ interior(∇²ϕ));  ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2570#issuecomment-1135811177:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2570#issuecomment-1135811177,3,"['Test', 'test']","['Test', 'test']"
Testability,Any insight to why [shallow water tests fail on gpu](https://buildkite.com/clima/oceananigans/builds/3153#f8f52f7d-7e1d-4d88-9a0b-5b1c18b4d90b)?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1821#issuecomment-873658862:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1821#issuecomment-873658862,1,['test'],['tests']
Testability,Any suggestion as to where the tests would go?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883757223:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883757223,1,['test'],['tests']
Testability,Any test? Only if it's easy... Otherwise forget it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2651#issuecomment-1183927563:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2651#issuecomment-1183927563,1,['test'],['test']
Testability,"Anyways, I don't quite see it but that could be the issue. So we can try replacing. ```julia; # Reset the ""previous"" interval time, subtracting a sliver that presents overshoot from accumulating. ; wta.schedule.previous_interval_stop_time = model.clock.time - rem(model.clock.time, wta.schedule.interval) ; ```. with. ```julia; if model.clock.time == wta.schedule.previous_interval_stop_time + wta.schedule.interval; wta.schedule.previous_interval_stop_time = model.clock.time; else; # Reset the ""previous"" interval time, subtracting a sliver that presents overshoot from accumulating. ; wta.schedule.previous_interval_stop_time = model.clock.time - rem(model.clock.time, wta.schedule.interval); end; ```. Another possible solution is to have a different algorithm in which time-averaging is ""finalized"" when output is retrieved. Retrieval occurs here:. https://github.com/CliMA/Oceananigans.jl/blob/81db22f4a26396142e8cd5b5a4c50c75790c1d50/src/OutputWriters/windowed_time_average.jl#L197-L205. And we could set `collecting=false` and reset `wta_schedule.previous_interval_stop_time` there. The only downside is that bad things might happen if for some reason the `WindowedTimeAverage` is called in a callback (for logging or something) apart from when output is being asked for (since that would restart time averaging when not desired...). These issues do seem to motivate figuring out how to record the averaging window / iterations somehow when saving `WindowedTimeAverage` to disk.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1274#issuecomment-747093904:1215,log,logging,1215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1274#issuecomment-747093904,1,['log'],['logging']
Testability,"Apologies for not participating in this issue and for possibly being the cause of the issue via sending/receiving views... If we have to send contiguous data we could just modify the [`underlying_*_boundary` functions](https://github.com/CliMA/Oceananigans.jl/blob/master/src/Distributed/distributed_utils.jl#L83-L99) to convert the view into a contiguous array. Receiving is done straight into the halo view (a trick(?) that seems to work nicely on the CPU), so we would probably need to create a new buffer of the right size to receive into and then copy it into the halo: https://github.com/CliMA/Oceananigans.jl/blob/master/src/Distributed/halo_communication.jl#L162-L166. Also not sure if relevant but I remember @hennyg888 and @francispoulin suggesting that placing an `MPI.Barrier()` at the end of each time step helped with a certain scaling benchmark?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-887833700:850,benchmark,benchmark,850,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-887833700,1,['benchmark'],['benchmark']
Testability,"Apologies for the late reply, I got distracted and accidentally forgot to respond. I tested out the fix this morning/early afternoon and I keep getting an error along the lines of what I have below. Did I compile the branch of oceananigans incorrectly?. ```julia; wireless-10-104-201-207:BottomBoundaryLayer loganknudsen$ julia ""/Users/loganknudsen/Documents/GitHub/BottomBoundaryLayer/PSI_Base_Test.jl""; ┌ Warning: Overwriting existing ./psi_base_ocng_test.nc.; └ @ Oceananigans.OutputWriters ~/.julia/packages/Oceananigans/Feeqx/src/OutputWriters/netcdf_output_writer.jl:359; ERROR: LoadError: NetCDF error: Permission denied (NetCDF error code: 13); Stacktrace:; [1] check; @ ~/.julia/packages/NCDatasets/st9Jz/src/errorhandling.jl:25 [inlined]; [2] nc_create(path::String, cmode::UInt16); @ NCDatasets ~/.julia/packages/NCDatasets/st9Jz/src/netcdf_c.jl:255; [3] NCDatasets.NCDataset(filename::String, mode::String; format::Symbol, share::Bool, diskless::Bool, persist::Bool, memory::Nothing, attrib::Dict{Any, Any}); @ NCDatasets ~/.julia/packages/NCDatasets/st9Jz/src/dataset.jl:236; [4] NCDataset; @ ~/.julia/packages/NCDatasets/st9Jz/src/dataset.jl:177 [inlined]; [5] NetCDFOutputWriter(model::NonhydrostaticModel{Oceananigans.TimeSteppers.RungeKutta3TimeStepper{Float64, NamedTuple{(:u, :v, :w, :b), Tuple{Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{O",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747397784:85,test,tested,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747397784,3,"['log', 'test']","['loganknudsen', 'tested']"
Testability,"Apparently I don't know how to run tests locally, because they all passed here without problems. @ali-ramadhan Do you have any reference that I can check that shows how to run tests locally? In the meantime I'll do my best to fix this without local testing I guess.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766179890:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766179890,3,['test'],"['testing', 'tests']"
Testability,"Apparently it's 4~5x faster to do operations on `Field.data` instead of `Field` even thought I've inlined `getindex` and `setindex!`, not that it changes things much.; ```julia; @inline getindex(f::Field, inds...) = getindex(f.data, inds...); @inline setindex!(f::Field, v, inds...) = setindex!(f.data, v, inds...); ```; Probably just missing something simple but for now I'll use `Field.data`. Would be nice to figure this out though. ```julia; g = RegularCartesianGrid((100, 100, 100), (10, 10, 10)); f1, f2 = CellField(g), FaceFieldX(g). function δx1!(g::RegularCartesianGrid, f::CellField, δxf::FaceField); for k in 1:g.Nz, j in 1:g.Ny, i in 1:g.Nx; @inbounds δxf[i, j, k] = f[i, j, k] - f[decmod1(i, g.Nx), j, k]; end; end; ```; ```; julia> @benchmark δx1!(g, f1, f2); BenchmarkTools.Trial:; memory estimate: 0 bytes; allocs estimate: 0; --------------; minimum time: 4.542 ms (0.00% GC); median time: 5.007 ms (0.00% GC); mean time: 5.120 ms (0.00% GC); maximum time: 11.010 ms (0.00% GC); --------------; samples: 975; evals/sample: 1; ```; ```julia; function δx2!(g::RegularCartesianGrid, f::CellField, δxf::FaceField); for k in 1:g.Nz, j in 1:g.Ny, i in 1:g.Nx; @inbounds δxf.data[i, j, k] = f.data[i, j, k] - f.data[decmod1(i, g.Nx), j, k]; end; end; ```; ```; julia> @benchmark δx2!(g, f2, f1); BenchmarkTools.Trial:; memory estimate: 0 bytes; allocs estimate: 0; --------------; minimum time: 1.099 ms (0.00% GC); median time: 1.198 ms (0.00% GC); mean time: 1.253 ms (0.00% GC); maximum time: 2.679 ms (0.00% GC); --------------; samples: 3967; evals/sample: 1; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/13:747,benchmark,benchmark,747,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/13,4,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"Apparently the figures in the [Convergence tests](; https://clima.github.io/OceananigansDocumentation/latest/validation/convergence_tests/) and Stratified Couette flow sections of the documentation aren't showing. I suspect it's a broken link or something (probably very easy to fix). Sorry if you guys are aware of this already, but I couldn't find any issue about it. Cheer!",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1212:43,test,tests,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1212,1,['test'],['tests']
Testability,"Apparently the new syntax does help avoid `@allowscalar` instances, and things do compile locally for me, but the errors on buildkite are still [there](https://buildkite.com/clima/oceananigans/builds/9727#01860b25-0d9a-419e-bd01-3ec11bcb8c6b/38-603):. ```; Computations with Averaged Fields [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-13/clima/oceananigans/test/test_computed_field.jl:583; --;   | Expression: all(interior(tke_yz) .== 9 / 2); ```. Any ideas on what might be the cause of the differences between builkite and my local server? If someone could also run one of the failing tests on a GPU locally and see if they get the same errors that buildkite is throwing, that would be helpful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063:315,Test,Test,315,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063,3,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"Apparently the result when running simulations is indeed that compilation does not happen after the 5th time. So I agree that this may not be a huge issue. Although I should mention, it seems that calculation of `AveragedField` is still slower than that of `WindowedSpatialAverage`. I haven't tested this for huge grids yet but for a 128^2 grid the calculation (as per my first example in this issue) goes from around 400 μs to around 60 ms. For a 512^2 grid it goes from around 2.5 ms to 950 ms. Not sure if this is expected.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-960312040:293,test,tested,293,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-960312040,1,['test'],['tested']
Testability,Are the distributed GPU tests actually running?. I see this:. https://buildkite.com/clima/oceananigans-distributed/builds/4081#0192d4e4-191f-48e1-a943-d82377d8a125/189-1099. And then subsequently it looks like the architecture is `Distributed{CPU}`. We need a better way to specify the test architectures?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443351999:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443351999,2,['test'],"['test', 'tests']"
Testability,Are there any existing tests @simone-silvestri @jagoosw ?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1714613575:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1714613575,1,['test'],['tests']
Testability,Are there any tests for `xnodes` with stretched grids?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1503682098:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1503682098,1,['test'],['tests']
Testability,Are there any tests for distributed hydrostatic models?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1749669791:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1749669791,1,['test'],['tests']
Testability,"Are these methods covered/used by the tests, do you know?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3165#issuecomment-1619948370:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3165#issuecomment-1619948370,1,['test'],['tests']
Testability,"Are users required to use 1.8, or just the tests?. I agree it's best to stay close to the latest especially at this still chaotic stage.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1281151236:43,test,tests,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1281151236,1,['test'],['tests']
Testability,"Are we sure that `VectorInvariant` works with `Flat` horizontal dimensions? @simone-silvestri?. Still, regardless of that, I also agree w @jagoosw that locally the tests pass for me as well so I don't understand why they fail on CPU on tartarus! Mystery!. On tartarus, seems like the issue comes from. https://github.com/CliMA/Oceananigans.jl/blob/84bc3c3c5438cda2e8f188a0e1a839ae7800b994/src/Operators/spacings_and_areas_and_volumes.jl#L206. which fails when both x and y dimensions are Flat on a LatLonGrid. What's even the point of defining a column grid on lat-lon grid??",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630161708:164,test,tests,164,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630161708,1,['test'],['tests']
Testability,"Array conversions when fetching output trigger `copyto!` and then `getindex`, which is in turn disallowed. This PR fixes an issue with output on the GPU on master. I'm a bit perplexed why the `jld2_field_output` test didn't pick this up.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1025:212,test,test,212,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1025,1,['test'],['test']
Testability,"As I said, please post your slurp script and other environment options. It is impossible to debug otherwise. I have an annotated slurp script here https://github.com/CliMA/ClimateMachine.jl/wiki/Satori-Cluster which is what I used a while back for GPU scaling tests. A mossconfigured MPI can easily manifest itself as scaling this poor.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885291310:260,test,tests,260,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885291310,1,['test'],['tests']
Testability,"As a side note: I started working on a PR that adds tests to make sure we can write output from all grids, which would also help with #1429. But yeah, I don't think it'll be a quick PR since the grids all use different property names... Sounds like the variable names used in NetCDF might be an issue? I've had no problems with unicode variable names in NetCDF but I don't use IPython...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1466#issuecomment-799818546:52,test,tests,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1466#issuecomment-799818546,1,['test'],['tests']
Testability,"As discussed in https://github.com/CliMA/Oceananigans.jl/discussions/3177#discussioncomment-6448740 I see two solutions: either drop support for v1.8 or prior with a v1.9 compat entry, or add something like; ```Julia; if VERSION < v""1.8""; ...; else; ...; end; ```. Adding the compat requirement is safer since tests only run on v1.9. . On the other hand, in this case, allowing backwards compatibility might be just a few lines like above.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3184#issuecomment-1636223845:310,test,tests,310,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3184#issuecomment-1636223845,1,['test'],['tests']
Testability,As far as I can tell the current issue with the distributed tests is that they have a different `fill_halo_regions!` and so currently don't fill the open halos.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2154666303:60,test,tests,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2154666303,1,['test'],['tests']
Testability,"As far as I can tell the main purpose of `CLIMAParameters` is to provide a central / global place to specify common parameters found in different model components. For example, `HydrostaticFreeSurfaceModel` has a `gravitational_acceleration` for both `buoyancy` and `free_surface`. On the other hand, it turns out that it's sometimes convenient for these to be different for testing and experimentation, which may impose additional requirements on `CLIMAParameters` that were not part of the original design. One possible solution might be to build a global `CLIMAParameters` instance in `Oceananigans` that's referenced in model constructors for default parameter values (but we can still let users change parameters when instantiating various model components if they want). A possible goal of CLIMAParameters is to _restrict_ the user interface so that users ""can't mess up""; eg users can't accidentally set `gravitational_acceleration` in `free_surface` and erroneously expect that this also changes `gravitational_acceleration` for buoyancy. Food for thought...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1427#issuecomment-791482111:375,test,testing,375,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1427#issuecomment-791482111,1,['test'],['testing']
Testability,"As for issues with other topologies, we could possibly use the ""forced flow, fixed-slip"" convergence test with 2D slices oriented in various directions to uncover issues:. https://github.com/CliMA/Oceananigans.jl/blob/master/validation/convergence_tests/src/ForcedFlowFixedSlip.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-878312638:101,test,test,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-878312638,1,['test'],['test']
Testability,"As for the `with_halo`, I am testing things out in REPL. Below you see that I have `with_halo` defined already but when I try the line you suggested it says that the function must be explicitly exported to be extended. Sorry that my function defining chops are not skilled enough to figure this out. ```; julia> methods(with_halo); # 2 methods for generic function ""with_halo"":; [1] with_halo(new_halo, old_grid::RegularRectilinearGrid) in Oceananigans.Grids at /home/fpoulin/software/Oceananigans.jl/src/Grids/regular_rectilinear_grid.jl:218; [2] with_halo(new_halo, old_grid::VerticallyStretchedRectilinearGrid) in Oceananigans.Grids at /home/fpoulin/software/Oceananigans.jl/src/Grids/vertically_stretched_rectilinear_grid.jl:242. julia> with_halo(halo, ibg::ImmersedBoundaryGrid) = ImmersedBoundaryGrid(with_halo(halo, ibg.grid), ibg.immersed_boundary); ERROR: error in method definition: function Grids.with_halo must be explicitly imported to be extended; Stacktrace:; [1] top-level scope; @ none:0; [2] top-level scope; @ REPL[40]:1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-844329017:29,test,testing,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-844329017,1,['test'],['testing']
Testability,"As of right now, as far as I can tell, `GeneralFPlane` is working and `NonTraditionalFPlane` got dumped. I'd like to get some feedback before I start changing the docs if that's okay. The interface I implemented is a bit simpler than `NonTraditionalFPlane` but I think that's okay. I'd like some feedback there if possible. Arguments now are:. - `coriolis_frequency` (instead of simply `f`). Defaults to `2Ω`; - `rotation_axis` (defaults to `ZDirection`); - `latitude` for convenience (which overwrites `rotation_axis`). I'm a bit unsure if I should keep this one. Maybe we should keep it simple since anyone can figure out `f` based on latitude easily. Questions:. - Should we keep the original `FPlane`? I think we could scrap it and only keep this one (which would then be renamed `FPlane`); - I didn't see any tests that `FPlane` or any other Coriolis implementation is dynamically correct. Should we implement a test to see if our rotation implementations are actually doing what they're supposed to?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887056354:814,test,tests,814,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887056354,4,['test'],"['test', 'tests']"
Testability,"As per the example below, this PR seems to resolve https://github.com/CliMA/Oceananigans.jl/issues/3593. ```julia; using Oceananigans. grid_base = RectilinearGrid(topology = (Bounded, Periodic, Bounded), size = (16, 20, 4), extent = (800, 1000, 100),); ; @inline east_wall(x, y, z) = x > 400; grid = ImmersedBoundaryGrid(grid_base, GridFittedBoundary(east_wall)). model = NonhydrostaticModel(grid = grid, timestepper = :RungeKutta3, buoyancy = BuoyancyTracer(), tracers = :b,). N² = 6e-6; b∞(x, y, z) = N² * z; set!(model, b=b∞); ; simulation = Simulation(model, Δt=25, stop_time=1e4,). using Statistics: std; using Printf; progress_message(sim) = @printf(""Iteration: %04d, time: %s, iteration×Δt: %s, std(pNHS) = %.2e\n"",; iteration(sim), sim.model.clock.time, iteration(sim) * sim.Δt, std(model.pressures.pNHS)); add_callback!(simulation, progress_message, IterationInterval(1)). run!(simulation); ```. printing, at the last few time-steps:. ```; Iteration: 0397, time: 9925.0, iteration×Δt: 9925.0, std(pNHS) = 5.99e-03; Iteration: 0398, time: 9950.0, iteration×Δt: 9950.0, std(pNHS) = 5.99e-03; Iteration: 0399, time: 9975.0, iteration×Δt: 9975.0, std(pNHS) = 5.99e-03; [ Info: Simulation is stopping after running for 11.645 seconds.; [ Info: Simulation time 2.778 hours equals or exceeds stop time 2.778 hours.; Iteration: 0400, time: 10000.0, iteration×Δt: 10000.0, std(pNHS) = 5.99e-03; ```. I haven't been able to test it yet with more complex simulations though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3617#issuecomment-2156199193:1423,test,test,1423,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3617#issuecomment-2156199193,1,['test'],['test']
Testability,"As soon as tests pass I'll merge and then we can continue in #3384, how does that sound @BrodiePearson?. You should have rights to push commits there now! I sent you an invite for project collaborator.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3392#issuecomment-1813228038:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3392#issuecomment-1813228038,1,['test'],['tests']
Testability,"As the diff shows, this PR reconstructs buoyancy at the location it's needed. For example, `x_dot_g_b` must reconstruct the buoyancy perturbation, which is located at tracer locations `ccc`, at the location `fcc`. . Similarly, `z_dot_g_b` should be reconstructed at `ccf` (the location of vertical velocity). Note that we _also_ do this reconstructed when computing the hydrostatic pressure integral, therefore:. $$ p_h = \int^0_z \bar b^z \text{ } dz $$. where $\overline{()}^z$ indicates a reconstruction in $z$. Previously, we were assuming within the hydrsotatic pressure integral that `z_dot_g_b` returned at `ccc`. The first commit on this PR changed the reconstruction for `z_dot_g_b` so it returns at `ccf`. However, making this change also requires ""undoing"" the reconstruction in the hyrostatic pressure integral, which previously assumed that `z_dot_g_b` returned at `ccc`. With both changes, the regression tests should pass _and_ tilted gravity should be fixed. Hope that clears things up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518051721:919,test,tests,919,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518051721,2,['test'],['tests']
Testability,"As well as more general decompositions, and greatly expand the docstring. Much help was provided by @jipolanco on this journey. Note right now we depend on `PencilFFTs#master` but hopefully that'll change with https://github.com/jipolanco/PencilFFTs.jl/pull/47. This required a bit of thinking and logic about pencil decompositions. What I learned is hopefully well-summarized in the docstring:. ```; """"""; DistributedFFTBasedPoissonSolver(global_grid, local_grid). Return a FFT-based solver for the Poisson equation,. ∇²x = b. for `MultiArch`itectures. Supported configurations; ========================. We support two ""modes"":. 1. Two-dimensional decompositions in (x, y) for problems with either; `Nz > Rx` or `Nz > Ry` (therefore, three-dimensional). 2. One-dimensional decompositions in either x or y for problems that are; either two-dimensional, or have limited dimensionality in z. Above, `Nz = size(global_grid, 3)` and `Rx, Ry, Rz = architecture(local_grid).ranks`. Other configurations that are decomposed in (x, y) but have too few Nz,; or any configuration decomposed in z, are not supported. Algorithm for two-dimensional decompositions; ============================================. When decomposition in two-dimensions for a three-dimensional problem,; there are three forward transforms, three backward transforms,; and 4 transpositions requiring MPI communication. In the following schematic, the first; dimension is always the local dimension. The following algorithm requires that `Nz > Rx`,; where `Nz` is the number of vertical cells and `Rx` is the number of ranks in x.; For `Nz < Rx` but `Nz > Ry`, a similar algorithm applies with x and y swapped:. 1. `first(storage)` is initialized with layout (z, x, y).; 2. Transform along z.; 3 Transpose + communicate to storage[2] in layout (x, z, y),; which is distributed into `(Rx, Ry)` processes in (z, y).; 4. Transform along x.; 5 Transpose + communicate to last(storage) in layout (y, x, z),; which is distributed into `(Rx, Ry)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2536:298,log,logic,298,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2536,1,['log'],['logic']
Testability,Assert that the topology is Flat in the vertical and also have a test that `Periodic` or `Bounded` in the vertical creates an error.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662:0,Assert,Assert,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662,2,"['Assert', 'test']","['Assert', 'test']"
Testability,"Assuming the tests pass, are there still tests to be done or is this ready to merge/use?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1125165195:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1125165195,2,['test'],['tests']
Testability,"At high enough ~~vertical~~ vertical + horizontal resolution, it seems that the `zonally_averaged_baroclinic_adjustment.jl` validation test blows up with `IsopycnalSkewSymmetricDiffusivity`; specifically:. ```julia; gerdes_koberle_willebrand_tapering = FluxTapering(1e-2); gent_mcwilliams_diffusivity = IsopycnalSkewSymmetricDiffusivity(κ_skew = 1000,; κ_symmetric = 900,; slope_limiter = gerdes_koberle_willebrand_tapering); ```. For example, with 50m vertical resolution (Nz=20, Lz=1000m, 20km horizontal resolution) we find. https://user-images.githubusercontent.com/15271942/164360760-ef03fc9d-e07a-4b50-9e80-bd79997cfa1d.mp4. while at 25m resolution (same extent, horizontal resolution, time-step) we find. https://user-images.githubusercontent.com/15271942/164360772-e39a08e4-eb5e-48e4-bfc4-cde1e241ec0f.mp4",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2453:135,test,test,135,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2453,1,['test'],['test']
Testability,"At least some of the tests are failing with the error. ```; [2021/05/17 14:55:47.365] INFO Testing distributed FFT-based Poisson solver...; --; &nbsp; | Error During Test at AssertionError: ShallowWaterModel requires `topology(grid, 3) === Flat`. Use `topology = (Periodic, Periodic, Flat)` when constructing `grid`.; ```. In other words, the tests are hitting the assertion that this PR adds. The tests should be fixed to use grids with a `Flat` vertical topology.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842646162:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842646162,7,"['Assert', 'Test', 'assert', 'test']","['AssertionError', 'Test', 'Testing', 'assertion', 'tests']"
Testability,At some point we should implement the following tests suggested by @edoddridge in https://github.com/climate-machine/Oceananigans.jl/issues/81. - [ ] 2D QG turbulence: explore energy and enstrophy cascades; - [ ] lee wave generation and breaking (will require large-scale flow field and bathymetry),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/159:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/159,1,['test'],['tests']
Testability,At some point we should implement the following tests suggested by @edoddridge in https://github.com/climate-machine/Oceananigans.jl/issues/81. - [ ] Munk gyre; - [ ] Stommel gyre,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/158:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/158,1,['test'],['tests']
Testability,At some point we should implement the following tests suggested by @edoddridge in https://github.com/climate-machine/Oceananigans.jl/issues/81. - [ ] Spin down of a flow-field under the influence of friction; - [ ] Thermal wind balance: specify a density structure and compare model velocity fields with analytical solution; - [ ] Rayleigh–Bénard convection (I think analytic solutions exist at low Rayleigh number?); - [ ] Onset of baroclinic instability: compare growth rates with analytical predictions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/157:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/157,1,['test'],['tests']
Testability,At some point we'd need to revisit the benchmarks. (https://clima.github.io/OceananigansDocumentation/stable/appendix/benchmarks/). We might wanna discuss what to include there and how we could perhaps automate the procedure? It doesn't need to be completely automated but perhaps we should have a workflow that we could run every now and again that produces a set of figures that are stored in OceananigansArtifacts.jl or somewhere so the docs update automatically?. (Feel free to convert this to a Discussion if it's more appropriate.),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3166:39,benchmark,benchmarks,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3166,2,['benchmark'],['benchmarks']
Testability,"At the moment . `ΔF[i-1] = C[i] - C[i-1]` where `C` and `F` are the center and face coordinate, respectively. On the other hand, the derivative on the face `[i]` is calculated with `(c[i] - c[i-1]) / ΔF[i]` (where `c` is the value of the derived variable at the centers). therefore, it has to be that `ΔF[i] = C[i] - C[i-1]`. Because of how we test, this bug was miraculously eluding all testing",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2150:344,test,test,344,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2150,2,['test'],"['test', 'testing']"
Testability,At the moment it is just a place holder but just created issue #1716 that will create a test for non-trival bathymetry. Thanks @navidcy for asking about this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-849589680:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-849589680,1,['test'],['test']
Testability,At the moment only `XPartition` is tested:. https://github.com/CliMA/Oceananigans.jl/blob/2447ea7c15d552fb6a50d3fd347d6534af0018c7/test/test_multi_region_unit.jl#L14-L15,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3202:35,test,tested,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3202,2,['test'],"['test', 'tested']"
Testability,At the moment only `show(::VerticallyStretchedRectilinearGrid)` is tested on both CPU and GPU. Should we test all of the grids on both architectures? Why not?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-839484348:67,test,tested,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-839484348,2,['test'],"['test', 'tested']"
Testability,"At the moment we hardcode the locations where output files in docs builds are so we can delete them before deploying the docs. See:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/docs/make.jl#L165-L169. We should find a way to automatically search for output files recursively in the `docs` directory and delete them before deploying the docs. I've asked in Julia slack how to do this and some ideas include:. ```Julia; julia> function recursive_find(dir, pattern); mapreduce(vcat, walkdir(dir)) do (root, dirs, files); joinpath.(root, filter(contains(pattern), files)); end; end; recursive_find (generic function with 1 method). julia> recursive_find(DEPOT_PATH[end], r""\.jl$""); 988-element Vector{String}:; ""/opt/julia/julia-1.9.0/share/julia/julia-config.jl""; ""/opt/julia/julia-1.9.0/share/julia/base/Base.jl""; ""/opt/julia/julia-1.9.0/share/julia/base/Enums.jl""; ""/opt/julia/julia-1.9.0/share/julia/base/abstractarray.jl""; ⋮; ""/opt/julia/julia-1.9.0/share/julia/test/testhelpers/llvmpasses.jl""; ""/opt/julia/julia-1.9.0/share/julia/test/testhelpers/withlocales.jl""; ""/opt/julia/julia-1.9.0/share/julia/test/unicode/utf8.jl""; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3112:1006,test,test,1006,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3112,5,['test'],"['test', 'testhelpers']"
Testability,"At the moment, supposedly we can change. https://github.com/CliMA/Oceananigans.jl/blob/3bb62a647a55a7dadf5f37331321bf0020a78c4d/test/dependencies_for_runtests.jl#L82. to. ```julia; test_file = ""test_some_new_feature.jl""; ```. and then. https://github.com/CliMA/Oceananigans.jl/blob/3bb62a647a55a7dadf5f37331321bf0020a78c4d/test/runtests.jl#L6-L10. will run that test file. But then, the `runtest.jl` *will continue* running the whole test suite!. We'd like to stop after testing the `test_file`, right?. cc @josuemtzmo",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507:128,test,test,128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507,5,['test'],"['test', 'testing']"
Testability,"At the moment, the fill halo regions follow a particular ordering where. Flux, Value, Gradient > Periodic; Periodic > Halo Communication. where > indicates the priority of execution.; We also fill the two sides of one direction together. ; This execution order cannot be respected in case:; ```julia; bc.west isa Periodic; bc.east isa Periodic; bc.south isa Flux; bc.north isa DistributedCommunication; ```. The possible solutions are two:; - eliminate the order requirements between Flux, Value, Gradient and Periodic by including corners in all local `fill_halo_regions!` (at the moment only `Periodic` fills the corners); - do not fill two sides together. probably the first solution is better because it leads to simpler code both in terms of actual implementation and in terms of logic of execution",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3342:785,log,logic,785,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3342,1,['log'],['logic']
Testability,Attempt and making tests on https://github.com/CliMA/Oceananigans.jl/pull/2865 pass,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2898:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2898,1,['test'],['tests']
Testability,"Average reduction with conditional expressions, e.g., like. https://github.com/CliMA/Oceananigans.jl/blob/748feab10a55fa65a46455620203252a6fc0646e/test/test_field_reductions.jl#L107. induce scalar operations on the GPU. I guess it's not a surprise. I just had to add, e.g,. ```Julia; @compute Txyz = CUDA.@allowscalar Field(Average(T, condition=T.>3)); ```. Only mentioning this here in case it might something in the source code that could be affecting code performance.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221170568:147,test,test,147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221170568,1,['test'],['test']
Testability,"Awesome! Thanks, for the help @ali-ramadhan! Still not sure why the tests passed here though...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787507792:68,test,tests,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787507792,1,['test'],['tests']
Testability,"Awesome. It looks like it'd require a bit of serious concentration / squinting. But hopefully the existing 5th order WENO implementation:. https://github.com/CliMA/Oceananigans.jl/blob/master/src/Advection/weno_fifth_order.jl. is helpful. To use this we need to resolve #1015 (simple fix, but requires a bit of logic in the constructor for `IncompressibleModel` similar to what's done for viscosities and diffusivities) so that we can use different schemes for different fields.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1173#issuecomment-726735243:311,log,logic,311,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1173#issuecomment-726735243,1,['log'],['logic']
Testability,"B1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `66.66% <0.00%> (-33.34%)` | :arrow_down: |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `76.54% <0.00%> (-5.28%)` | :arrow_down: |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `65.07% <0.00%> (-0.55%)` | :arrow_down: |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `95.23% <0.00%> (-0.12%)` | :arrow_down: |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [docs/bibliography.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-ZG9jcy9iaWJsaW9ncmFwaHkuamw=) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | ... and [44 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881?src=pr&el=footer). Last update [810a3a1...9128ab2](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/881#issuecomment-682318992:2629,benchmark,benchmark,2629,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/881#issuecomment-682318992,2,['benchmark'],['benchmark']
Testability,Barotropic turbulence validation tests on RegularLatitudeLongitudeGrid,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1626:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1626,1,['test'],['tests']
Testability,"Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},B} where B where Z where Y where X}; filename::String, iteration_interval::Int64, time_interval::Nothing, global_attributes::Dict{Any,Any}, output_attributes::Dict{Any,Any}, dimensions::Dict{Any,Any}, clobber::Bool, compression::Int64, with_halos::Bool, verbose::Bool, xC::UnitRange{Int64}, xF::UnitRange{Int64}, yC::UnitRange{Int64}, yF::UnitRange{Int64}, zC::UnitRange{Int64}, zF::UnitRange{Int64}) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/OutputWriters/netcdf_output_writer.jl:176; [5] run_thermal_bubble_netcdf_tests(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:29; [6] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:526 [inlined]; [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [8] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:525 [inlined]; [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [10] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:521; [11] include(::String) at ./client.jl:439; [12] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:94; [13] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [14] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:76; [15] include(::String) at ./client.jl:439; [16] top-level scope at none:6; [17] eval(::Module, ::Any) at ./boot.jl:331; [18] exec_options(::Base.JLOptions) at ./client.jl:264; [19] _start() at ./client.jl:484; ; i: 0001, t: 1.000 s, Δt: 1.100 s, wmax = 2.7e-04 ms⁻¹, wall time: 18.164 s; progress: 0.0 %, i: 0001, t: 1.000 s, Δt: 1.100 s, wall time: 11.110 s; N² = ((Rᵈ ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:102158,test,test,102158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,"Base.show` very slow since showing a `FieldTimeSeries` prints its min, mean, and max. So it's harder to work with `FieldTimeSeries` interactively. Seems fine when not on a `ImmersedBoundaryGrid`. I'm guessing it's slower because it's masking out the immersed values but I don't know if we expect it to be ~2000x slower than without an immersed boundary. It's those memory allocations... A quick quality-of-life fix could be to not call `data_summary` when showing a `FieldTimeSeries`. ## MWE. ```julia; using Oceananigans. arch = CPU(). L = 1; H = 1. underlying_grid = LatitudeLongitudeGrid(; arch;; topology = (Bounded, Bounded, Bounded),; size = (512, 512, 64),; latitude = (-L/2, L/2),; longitude = (-L/2, L/2),; z = (-H, 0),; halo = (4, 4, 4); ). h = L/2; w = L/5 ; mount(x, y) = h * exp(-x^2 / 2w^2) * exp(-y^2 / 2w^2); bottom(x, y) = -H + mount(x, y). grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bottom)). model = HydrostaticFreeSurfaceModel(; grid). simulation = Simulation(model, Δt=1, stop_iteration=1). simulation.output_writers[:fields] =; JLD2OutputWriter(; model,; model.velocities;; filename = ""test.jld2"",; schedule = IterationInterval(1),; overwrite_existing = true; ). run!(simulation). u = FieldTimeSeries(""test.jld2"", ""u""); u2 = u[2]; ```. Reduction over the `FieldTimeSeries`:. ```julia; julia> @time minimum(u2); 20.954897 seconds (118.72 M allocations: 130.792 GiB, 25.74% gc time); 0.0; ```. Reduction over the underlying data:. ```julia; julia> @time minimum(u2.data); 0.011304 seconds (3 allocations: 1.562 KiB); 0.0; ```. or almost 2000x faster. ## Environment. Oceananigans.jl `main` branch with. ```; Julia Version 1.10.5; Commit 6f3fdf7b362 (2024-08-27 14:19 UTC); Build Info:; Official https://julialang.org/ release; Platform Info:; OS: Linux (x86_64-linux-gnu); CPU: 48 × AMD Ryzen Threadripper 7960X 24-Cores; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-15.0.7 (ORCJIT, znver3); Threads: 1 default, 0 interactive, 1 GC (on 48 virtual cores); ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3750:1163,test,test,1163,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3750,2,['test'],['test']
Testability,"Because the server was out of space and all tests were failing because of that, but Greg fixed this earlier today",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1761#issuecomment-867242605:44,test,tests,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1761#issuecomment-867242605,1,['test'],['tests']
Testability,"Begs the question of whether this code was tested? When users pass a tuple to `forcings`, we wrap it inside `MultipleForcings`. Thus we need this method to unwrap the tuple when adding advective forcings to the total velocity field. @jagoosw @simone-silvestri . Should we add a test?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259:43,test,tested,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259,2,['test'],"['test', 'tested']"
Testability,Benchmark abstract operations,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/870:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/870,1,['Benchmark'],['Benchmark']
Testability,Benchmark script for immersed boundaries,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1699:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1699,1,['Benchmark'],['Benchmark']
Testability,Benchmark script that also calculates CPU->GPU speedup.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/116:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/116,1,['Benchmark'],['Benchmark']
Testability,Benchmark scripts should report CPU and GPU being used,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/466:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/466,1,['Benchmark'],['Benchmark']
Testability,Benchmark tests: Just do small sizes on GPU models,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/733:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/733,2,"['Benchmark', 'test']","['Benchmark', 'tests']"
Testability,Benchmarking forcing functions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/370:0,Benchmark,Benchmarking,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/370,1,['Benchmark'],['Benchmarking']
Testability,Benchmarking fully loaded simulations,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1089:0,Benchmark,Benchmarking,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1089,1,['Benchmark'],['Benchmarking']
Testability,Benchmarking scripts for immersed boundaries and immersed boundary conditions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2452:0,Benchmark,Benchmarking,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2452,1,['Benchmark'],['Benchmarking']
Testability,Benchmarking turbulence closures,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/289:0,Benchmark,Benchmarking,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/289,1,['Benchmark'],['Benchmarking']
Testability,"Benchmarks are more or less unchanged, so I'm merging.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2063#issuecomment-983876168:0,Benchmark,Benchmarks,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2063#issuecomment-983876168,1,['Benchmark'],['Benchmarks']
Testability,Benchmarks in Docs & README,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3166:0,Benchmark,Benchmarks,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3166,1,['Benchmark'],['Benchmarks']
Testability,"Benchmarks. ### on main. ```Julia; julia> using Oceananigans, BenchmarkTools. julia> @btime grid = ConformalCubedSphereGrid(GPU(), panel_size=(64, 64, 2), z=(-1, 0), radius=1, horizontal_direction_halo=4, z_halo=2); 36.500 s (52406500 allocations: 1.60 GiB); ```. #### this PR; ```Julia; julia> using Oceananigans, BenchmarkTools. julia> @btime grid = ConformalCubedSphereGrid(GPU(), panel_size=(64, 64, 2), z=(-1, 0), radius=1, horizontal_direction_halo=4, z_halo=2);; 2.940 s (30626062 allocations: 1.11 GiB); ```. This is reasonable since each panel is constructed now ~3x faster (see https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2094075562) and there are 6 panels on the sphere.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2159564782:0,Benchmark,Benchmarks,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2159564782,3,['Benchmark'],"['BenchmarkTools', 'Benchmarks']"
Testability,Better validation for `LatitudeLongitudeGrid` + add test for `sum(Azᶜᶜᵃ) ≈ 4πr²`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3240:52,test,test,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3240,1,['test'],['test']
Testability,"BiasedThirdOrder │ 18.859 ms │ 19.041 ms │ 19.338 ms │ 22.157 ms │ 2.10 MiB │ 16584 │ 10 │; │ GPU │ WENO5 │ 22.645 ms │ 28.377 ms │ 27.818 ms │ 28.571 ms │ 2.26 MiB │ 27075 │ 10 │; └───────────────┴────────────────────────┴───────────┴───────────┴───────────┴───────────┴──────────┴────────┴─────────┘; ```; to test the new WENO methods on a stretched grid modify the code in benchmark_advection_schemes.jl as seen below. ```; function benchmark_advection_scheme(Arch, Scheme); grid = RectilinearGrid(size=(192, 192, 192), x = (0, 1), y = (0, 1), z = collect(0:192), architecture = Arch()). if Scheme == :Uniform; scheme = WENO5(); elseif Scheme == :Stretched; scheme = WENO5(grid = grid); elseif Scheme == :StretchedSmoothness; scheme = WENO5(grid = grid, stretched_smoothness = true); elseif Scheme == :ZFormulation; scheme = WENO5(zweno = true); end; model = NonhydrostaticModel(architecture=Arch(), grid=grid, advection=scheme). time_step!(model, 1) # warmup. trial = @benchmark begin; @sync_gpu time_step!($model, 1); end samples=10. return trial; end. Schemes = (:Uniform, :Stretched, :StretchedSmoothness, :ZFormulation); ```; This PR, with a ""stretched"" vertical direction ; ```; ┌───────────────┬─────────────────────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Schemes │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────────────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Stretched │ 7.122 s │ 7.122 s │ 7.122 s │ 7.122 s │ 949.91 KiB │ 1716 │ 1 │; │ CPU │ StretchedSmoothness │ 11.042 s │ 11.042 s │ 11.042 s │ 11.042 s │ 956.47 KiB │ 1716 │ 1 │; │ CPU │ Uniform │ 6.373 s │ 6.373 s │ 6.373 s │ 6.373 s │ 945.38 KiB │ 1706 │ 1 │; │ CPU │ ZFormulation │ 7.725 s │ 7.725 s │ 7.725 s │ 7.725 s │ 945.38 KiB │ 1706 │ 1 │; │ GPU │ Stretched │ 25.646 ms │ 25.920 ms │ 26.501 ms │ 32.101 ms │ 2.15 MiB │ 30442 │ 10 │; │ GPU │ StretchedSmoothness │ ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-974843738:3954,benchmark,benchmark,3954,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-974843738,1,['benchmark'],['benchmark']
Testability,"Billy mentioned it in some other comments but while we do splat args for some of the function calls, the function definitions use Varargs instead. This should avoid the catastrophic slowdown we saw with splatting earlier, but I agree that it should be tested. Do you have any good CPU performance tests set up @glwagner ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2150096206:252,test,tested,252,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2150096206,2,['test'],"['tested', 'tests']"
Testability,"Bonus, also the `mask_immersed_field` was missing. I don't expect it will be ever used (why using an immersed boundary grid in a single column?), however I have added a test for it. We can remove it if not needed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3756#issuecomment-2326732799:169,test,test,169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3756#issuecomment-2326732799,1,['test'],['test']
Testability,"Both `IncompressibleModel` and `ShallowWaterModel` use the more general `model_forcing` now, but I had to refactor `regularize_forcing` a bit as it needs the `model_field_names` when constructing `Relaxation` forcings and `ContinuousForcing`s with field dependencies. Tests passed on Tartarus but might be good if @glwagner had a quick look to make sure it's okay.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1291#issuecomment-756838133:268,Test,Tests,268,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1291#issuecomment-756838133,1,['Test'],['Tests']
Testability,"BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}}},SpatialWindowAverage{Field{Face,Center,Center,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularCartesianGrid{Float64,Periodic,Periodic,Periodic,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},FieldSlicer{Colon,UnitRange{Int64},Colon},Tuple{Int64}}}}; filepath::String, schedule::TimeInterval, array_type::Type{T} where T, field_slicer::FieldSlicer{Colon,Colon,Colon}, global_attributes::Dict{Any,Any}, output_attributes::Dict{Any,Any}, dimensions::Dict{Any,Any}, mode::String, compression::Int64, verbose::Bool) at /home/tomas/repos/Oceananigans.jl/src/OutputWriters/netcdf_output_writer.jl:340; [4] top-level scope at /home/tomas/repos/Oceananigans.jl/sandbox/windowed_spatially_averaged.jl:111; [5] include(::String) at ./client.jl:457; [6] top-level scope at REPL[1]:1; in expression starting at /home/tomas/repos/Oceananigans.jl/sandbox/windowed_spatially_averaged.jl:111; ```; </details>. I've tried expanding the struct to include a grid parameter (based off of how `AveragedField` is programmed` and then defining `compute!` but I haven't been able to make it work. Any tips?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1392#issuecomment-783533170:16548,sandbox,sandbox,16548,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1392#issuecomment-783533170,2,['sandbox'],['sandbox']
Testability,Brings back ShallowWater regression test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2937:36,test,test,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2937,1,['test'],['test']
Testability,"Btw, many of the tests might be ok to use `buoyancy=BuoyancyTracer()` or even `buoyancy=nothing` with `tracer=:c`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1989#issuecomment-922527594:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1989#issuecomment-922527594,1,['test'],['tests']
Testability,Bugfix and tests for RegularCartesianGrid,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/4:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/4,1,['test'],['tests']
Testability,Build and test but do not deploy docs on Buildkite,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1018:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1018,1,['test'],['test']
Testability,"Builds off @vchuravy's work in #261. Preliminary design of user API for concrete models. Probably most of the time the user will have to specify boundary conditions prior to building the model. We'll have to come up with good syntax for that. What we have is ok, but can be improved. The checkpointing tests currently fail, I think because they attempt to change the types of the some of the model fields.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/263:302,test,tests,302,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/263,1,['test'],['tests']
Testability,Bump patch release?; Perhaps a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069647760:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069647760,1,['test'],['test']
Testability,"Bumped the version. I think it might take me a little while to get my head around the testing system, but I've left this editable by maintainers in case anyone else wants to quickly code up a test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896867127:86,test,testing,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896867127,2,['test'],"['test', 'testing']"
Testability,"But I realized that a second way to implement this immersed flux is to re-use the conditional flux functions, but reverse the logic. Not sure what is best yet.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100160950:126,log,logic,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100160950,1,['log'],['logic']
Testability,But it might be set in the tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2702#issuecomment-1282678457:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2702#issuecomment-1282678457,1,['test'],['tests']
Testability,But now I removed that and I replaced it with two tests with 2D lat-lon grids (one that has Flat lon and one that has Flat lat). But there is an issue still!. @simone-silvestri these grids _now_ are not SingleColumnGrids ... Can the MatrixImplicitSolver work with 2D lat-depth or lon-depth slices?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630594751:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630594751,1,['test'],['tests']
Testability,But since all tests run on a computer at MIT the time it takes also depends on how many tests are running (eg how many prs were just open) and other random factors.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877432402:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877432402,2,['test'],['tests']
Testability,But this PR doesn't require users to use 1.10 right? It's just about running the tests on 1.10. I think it will be nice to get rid of the crazy warnings on 1.10.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1944546930:81,test,tests,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1944546930,1,['test'],['tests']
Testability,"But you did create a test! . ![image](https://user-images.githubusercontent.com/15271942/130984674-6d2e83da-b89e-4aff-9976-852227954ae3.png). It ran too:. https://buildkite.com/clima/oceananigans/builds/3769#6acfa109-0499-43fb-af7d-a7ec3172e1d4/40-331. This doesn't test correctness of course --- that's what the convergence test does. So now we have a unit test that ensures the code _runs_ (executed every PR), and a convergence test that ensures the code is _correct_ (executed optionally when we need to revalidate). I'm happy, merge away!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-906479795:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-906479795,5,['test'],['test']
Testability,CI testing for GPU code.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/53:3,test,testing,3,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/53,1,['test'],['testing']
Testability,CPU solver tests passed so I'm pretty hopeful...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1865#issuecomment-881954693:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1865#issuecomment-881954693,1,['test'],['tests']
Testability,CPU status in README banner does not print results of tests on master,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/712:54,test,tests,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/712,1,['test'],['tests']
Testability,"CPU, when the grid size exceeded 2048 x 2048, only one sample could be benchmarked. Trying to get more samples benchmarked by increasing the sampling time limit resulted in out of memory exceptions.; ```; Oceananigans v0.58.1; Julia Version 1.6.0; Commit f9720dc2eb (2021-03-24 12:55 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; EBVERSIONJULIA = 1.6.0; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0/easybuild/avx2-Core-julia-1.6.0-easybuild-devel; JULIA_LOAD_PATH = :; GPU: Tesla V100-SXM2-32GB. Shallow water model benchmarks; ┌───────────────┬─────────────┬──────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼──────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.041 ms │ 2.154 ms │ 2.246 ms │ 3.207 ms │ 1.36 MiB │ 2253 │ 10 │; │ CPU │ Float64 │ 64 │ 3.224 ms │ 3.367 ms │ 3.408 ms │ 4.031 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 128 │ 7.495 ms │ 7.620 ms │ 7.661 ms │ 8.193 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 256 │ 23.927 ms │ 24.030 ms │ 24.651 ms │ 28.232 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 512 │ 91.065 ms │ 93.878 ms │ 93.733 ms │ 97.092 ms │ 1.36 MiB │ 2315 │ 10 │; │ CPU │ Float64 │ 1024 │ 388.387 ms │ 389.332 ms │ 390.035 ms │ 392.166 ms │ 1.36 MiB │ 2315 │ 10 │; │ CPU │ Float64 │ 2048 │ 1.584 s │ 1.584 s │ 1.584 s │ 1.585 s │ 1.36 MiB │ 2315 │ 4 │; │ CPU │ Float64 │ 4096 │ 6.337 s │ 6.337 s │ 6.337 s │ 6.337 s │ 1.36 MiB │ 2315 │ 1 │; │ CPU │ Float64 │ 8192 │ 25.696 s │ 25.696 s │ 25.696 s │ 25.696 s │ 1.36 MiB │ 2313",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722:1366,benchmark,benchmarks,1366,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722,1,['benchmark'],['benchmarks']
Testability,"CUDA v2.4.0 is out but we're blocked by OffsetArrays.jl now, which might remove the Adapt.jl dependency (https://github.com/JuliaArrays/OffsetArrays.jl/issues/174) so might not be worth waiting for all dependencies to support Adapt v3.0.0. If tests pass with CUDA v2.4.0 I say we merge this PR and close #1287.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1296#issuecomment-756802372:243,test,tests,243,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1296#issuecomment-756802372,1,['test'],['tests']
Testability,"Call them system tests, model verification tests, or end-to-end tests, that's what this PR is about. Currently a work in progress as I hit a roadblock with checkpointing so **the tests will fail**. See #141. BUT, for testing we can just set `model.forcings = nothing` and manually reconstruct the forcings as we know them. Tests implemented so far:; 1. Checkpointing integration test: Run two coarse rising thermal bubble simulations and make sure that when restarting from a checkpoint, the restarted simulation matches the non-restarted simulation numerically.; 2. NetCDF output integration test: Run a coarse thermal bubble simulation and save the output to NetCDF at the 10th time step. Then read back the output and test that it matches the model's state.; 3. Thermal bubble golden master test: Run the coarse thermal bubble simulation for 10 time steps and check that the model output matches a golden master output.; 4. Deep convection golden master test. @jm-c @christophernhill: do post any ideas for tests that should be implemented in this PR.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/140:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/140,12,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,Can I merge after the tests pass? And should I bump the version number?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1573678082:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1573678082,1,['test'],['tests']
Testability,Can I merge now tests have passed?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484158671:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484158671,1,['test'],['tests']
Testability,Can I merge now the tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516146111:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516146111,1,['test'],['tests']
Testability,"Can confirm that tests get stuck when I manually run `] test` on Tartarus. It first gets stuck at. ```; [2021/04/09 09:02:15.825] INFO Testing budgets with Flux boundary conditions [GPU]...; [2021/04/09 09:02:15.825] INFO Testing budgets with Flux boundary conditions [GPU, (Periodic, Bounded, Bounded), u, north]...; ```. so presumably whatever is causing it to hang is a commonly used function/bit of code...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816695114:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816695114,4,"['Test', 'test']","['Testing', 'test', 'tests']"
Testability,"Can confirm that the docstring now works:. ```julia; help?> KernelFunctionOperation; search: KernelFunctionOperation. KernelFunctionOperation{LX, LY, LZ}(kernel_function, grid; architecture=nothing,; computed_dependencies=(), parameters=nothing). Constructs a KernelFunctionOperation at location (LX, LY, LZ) on grid an with an optional iterable of computed_dependencies and arbitrary parameters. With isnothing(parameters) (the default), kernel_function is called with. kernel_function(i, j, k, grid, computed_dependencies...). Otherwise kernel_function is called with. kernel_function(i, j, k, grid, computed_dependencies..., parameters). Examples; ≡≡≡≡≡≡≡≡≡≡. Construct a kernel function operation that returns random numbers:. random_kernel_function(i, j, k, grid) = rand() # use CUDA.rand on the GPU; ; kernel_op = KernelFunctionOperation{Center, Center, Center}(random_kernel_function, grid; architecture=CPU()). Construct a kernel function operation using the vertical vorticity operator valid on curvilinear and cubed sphere grids:. using Oceananigans.Operators: ζ₃ᶠᶠᵃ # called with signature ζ₃ᶠᶠᵃ(i, j, k, grid, u, v); ; grid = model.grid; u, v, w = model.velocities; ; ζ_op = KernelFunctionOperation{Face, Face, Center}(ζ₃ᶠᶠᵃ, grid, computed_dependencies=(u, v)); ```. Also caught a couple of typos in the docstrng. We should be good to go when the tests pass",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1939#issuecomment-901399057:1360,test,tests,1360,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1939#issuecomment-901399057,1,['test'],['tests']
Testability,Can we add a test that uses `OrthogonalSphericalShellGrids`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3744#issuecomment-2314136686:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3744#issuecomment-2314136686,1,['test'],['test']
Testability,"Can we just compare 1) the topology and 2) all of the nodes? I think that would be sufficient to determine equality. I'm worried if we don't explicitly check the topology that we might run into some edge cases where the nodes / spacings are the same but the topologies are different (these would possibly be pathological with 0 halo in a periodic / flat direction, but still good to explicitly check I think...). When comparing numeric equality for nodes, we should add `@allowscalar` as needed there. I think we should add a test that equality works as expected, as well. We should also add a test for checkpointing on stretched grids. I think its ok if we don't support a numeric equality for other grids --- we can build them up one at a time. They are specific to each grid. The main downside here is that we need to refactor our grid implementation to have a single `RectilinearGrid` (there's no reason to have different rectilinear grid types, since we can dispatch on the case that certain directions have constant spacing easily). So this code will go away when we make that change. But I think it's a useful incremental improvement for now while we still have two rectilinear grids, so I'm fine to have it go in once it's cleaned up. Because of this:. ```julia; julia> using CUDA. julia> a = rand(2); 2-element Vector{Float64}:; 0.8207604162394306; 0.3815099688071648. julia> b = CuArray(a); 2-element CuArray{Float64, 1}:; 0.8207604162394306; 0.3815099688071648. julia> CUDA.@allowscalar a == b; true; ```. I think that this will work if the checkpointed grid is deserialized onto the CPU, even though `model.grid` is on the GPU. I think this is what we want, so that's fortunate the above works.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945919406:526,test,test,526,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945919406,2,['test'],['test']
Testability,Can we just make the existing tests bigger or do you think we need the MWE specifically?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868848915:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868848915,1,['test'],['tests']
Testability,Can you add a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3695#issuecomment-2278417104:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3695#issuecomment-2278417104,1,['test'],['test']
Testability,"Can you benchmark compared to the (wrong, but ideal) version `dot(parent(a), parent(b))`. Ideally our implementation reaches that. That should work on GPU too.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2725#issuecomment-1238522691:8,benchmark,benchmark,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2725#issuecomment-1238522691,1,['benchmark'],['benchmark']
Testability,Can you run the function (produce a bug with code rather than merely by reading it)? Is there a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2309541203:96,test,test,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2309541203,1,['test'],['test']
Testability,"Can you tell us a bit more about your system?. What is `versioninfo(verbose=true)` and `] status -m`?. Was there anything more printed above the message that precompilation; failed?. One thing you might want to try is using Julia 1.10, instead of 1.9, but; right now I don't have information to pinpoint what is causing the; segmentation fault. On Wed, Jul 17, 2024, 12:23 Logan Knudsen ***@***.***> wrote:. > Update: I have been able to reduce the error to be a procompiling error in; > oceananigans.jl:; >; > ERROR: LoadError: Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to ""/glade/u/home/knudsenl/.julia/compiled/v1.9/Oceananigans/jl_AMNEzH"".; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::IO, internal_stdout::IO, keep_loaded_modules::Bool); > @ Base ./loading.jl:2300; > [3] compilecache; > @ ./loading.jl:2167 [inlined]; > [4] _require(pkg::Base.PkgId, env::String); > @ Base ./loading.jl:1805; > [5] _require_prelocked(uuidkey::Base.PkgId, env::String); > @ Base ./loading.jl:1660; > [6] macro expansion; > @ ./loading.jl:1648 [inlined]; > [7] macro expansion; > @ ./lock.jl:267 [inlined]; > [8] require(into::Module, mod::Symbol); > @ Base ./loading.jl:1611; > in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:1; >; > I have been trying to make sure that everything is up to date, and I am; > running on Julia version 1.9.2. My code is just; >; > using Oceananingans; >; > as I have been trying to get the library to loas properly. Does anyone; > have any experience with this error or does it make things any clearer?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233710372>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AABDO2XAIMUIHCDCBIJA4NLZM2K75AVCNFSM6AAAAABK643UJWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDEMZTG4YTAMZXGI",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233731098:373,Log,Logan,373,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233731098,1,['Log'],['Logan']
Testability,"Certianly. All I changed is added in the bit with `advection=WENO5()`. . ```; function benchmark_incompressible_model(Arch, FT, N); grid = RegularRectilinearGrid(FT, size=(N, N, N), extent=(1, 1, 1)); model = IncompressibleModel(architecture=Arch(), float_type=FT, advection=WENO5(), grid=grid). time_step!(model, 1) # warmup. trial = @benchmark begin; @sync_gpu time_step!($model, 1); end samples=10. return trial; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869744904:336,benchmark,benchmark,336,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869744904,1,['benchmark'],['benchmark']
Testability,Change log level for doctesting with warnings,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3707:7,log,log,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3707,1,['log'],['log']
Testability,Change log level for doctesting with warnings take #2,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3711:7,log,log,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3711,1,['log'],['log']
Testability,Changed `->` to `to` in the benchmark scripts,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1678:28,benchmark,benchmark,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1678,1,['benchmark'],['benchmark']
Testability,Changes in PR #2740 made the global simulation crash. These changes will be reverted for the moment. They will be reintroduced after more testing,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2778:138,test,testing,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2778,1,['test'],['testing']
Testability,Check out the test for file splitting with `JLD2OutputWriter`:. https://github.com/CliMA/Oceananigans.jl/blob/2cd91ab4f42e528981422171d6ab2f323a1ce044/test/test_jld2_output_writer.jl#L42. We'll want a practically identical test for a `max_filesize` feature with `NetCDFOutputWriter`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1464334034:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1464334034,3,['test'],['test']
Testability,Checking to see if making scalar diffusivity mutable broke CI tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3407:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3407,1,['test'],['tests']
Testability,"Checkpointing, NetCDF, and golden master tests",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/140:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/140,1,['test'],['tests']
Testability,"Cherry picked some commits from PR #381 to fix the example test. One thing that's going to be annoying about testing example scripts is that they evaluate in global scope when including them, so it's going to be easy to get variable name conflicts... Not sure how to get around this as we agreed not to use functions for examples.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/424:59,test,test,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/424,2,['test'],"['test', 'testing']"
Testability,Clean up benchmark scripts,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/380:9,benchmark,benchmark,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/380,1,['benchmark'],['benchmark']
Testability,Clean up convergence test scripts and plots,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/881:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/881,1,['test'],['test']
Testability,Cleaning up tests for efficiency,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1990:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1990,1,['test'],['tests']
Testability,"Cleans up the file organization, test, import statements, and some formatting irregularities. Resolves #1521 .",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1525:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1525,1,['test'],['test']
Testability,Cleanup in the implicit free surface tests + add `matrix_implicit_free_surface_solver_tests`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2181:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2181,1,['test'],['tests']
Testability,"CliMA/Oceananigans.jl/blob/fjp/multithreaded-benchmarks/benchmark/weak_scaling_shallow_water_model_serial.jl; Besides the benchmark scripts themselves, everything else was up to date with the latest version of master. Here are the results:; ```; Oceananigans v0.58.8; Julia Version 1.6.1; Commit 6aaedecc44 (2021-04-23 05:59 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Platinum 8260 CPU @ 2.40GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; EBVERSIONJULIA = 1.6.1; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.1; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.1/easybuild/avx2-Core-julia-1.6.1-easybuild-devel; JULIA_LOAD_PATH = :. Shallow water model weak scaling with multithreading benchmark; ┌───────────────┬─────────┬─────────┬─────────┬─────────┬─────────┬───────────┬─────────┬─────────┐; │ size │ threads │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼───────────┼─────────┼─────────┤; │ (8192, 512) │ 1 │ 1.453 s │ 1.454 s │ 1.454 s │ 1.456 s │ 1.37 MiB │ 2318 │ 4 │; │ (8192, 1024) │ 2 │ 2.909 s │ 2.933 s │ 2.933 s │ 2.956 s │ 21.52 MiB │ 1303192 │ 2 │; │ (8192, 2048) │ 4 │ 2.096 s │ 2.115 s │ 2.125 s │ 2.165 s │ 16.38 MiB │ 942343 │ 3 │; │ (8192, 4096) │ 8 │ 2.178 s │ 2.198 s │ 2.218 s │ 2.280 s │ 17.82 MiB │ 987092 │ 3 │; │ (8192, 8192) │ 16 │ 2.201 s │ 2.218 s │ 2.216 s │ 2.230 s │ 18.33 MiB │ 922426 │ 3 │; │ (8192, 16384) │ 32 │ 2.598 s │ 2.615 s │ 2.615 s │ 2.632 s │ 24.29 MiB │ 1116849 │ 2 │; └───────────────┴─────────┴─────────┴─────────┴─────────┴─────────┴───────────┴─────────┴─────────┘. Shallow water model weak multithreading scaling speedup; ┌───────────────┬─────────┬──────────┬────────────┬─────────┬─────────┐; │ size │ threads │ slowdown │ efficiency │ memory │ allocs │; ├───────────────┼───────",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861:1145,benchmark,benchmark,1145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861,1,['benchmark'],['benchmark']
Testability,CliMA/Oceananigans.jl/commit/d80be8cf1db4f97515346ae3140b7cbf3f2ddab4?el=desc) will **decrease** coverage by `2.41%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #979 +/- ##; ==========================================; - Coverage 72.54% 70.13% -2.42% ; ==========================================; Files 210 148 -62 ; Lines 6076 3154 -2922 ; ==========================================; - Hits 4408 2212 -2196 ; + Misses 1668 942 -726 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [benchmark/benchmark\_forcing\_functions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mb3JjaW5nX2Z1bmN0aW9ucy5qbA==) | | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | | |; | [test/test\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NvbHZlcnMuamw=) | | |; | [...nceTests/OneDimensionalCosineAdvectionDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxDb3NpbmVBZHZlY3Rpb25EaWZmdXNpb24uamw=) | | |; | [test/test\_grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2dyaWRzLmps) | | |; | [...ergence\_tests/ConvergenceTests/ConvergenceTests.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/979#issuecomment-699227574:1203,benchmark,benchmark,1203,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/979#issuecomment-699227574,2,['benchmark'],['benchmark']
Testability,"Closes #1878. I ran the most relevant tests locally and they all passed for me (didn't have time/resources to run all), but I'd appreciate some thorough reviews in this case since ""diffusivities"" is a word that happens a lot in the repo so it's easy to miss something when making such a change.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1884:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1884,1,['test'],['tests']
Testability,Closes #2931 . We could add a test...,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2933:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933,1,['test'],['test']
Testability,"Closes #3226 . It'd make sense to test this, let's see first if it does the trick.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3228:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3228,1,['test'],['test']
Testability,"Closes https://github.com/CliMA/Oceananigans.jl/issues/1392. CC: @glwagner @ali-ramadhan . Sorry that the issue I create went so long! I was doing a bunch of wrong things but in the end it was pretty straightforward. At this point all I have is a working example of `WindowedSpatialAverage` in the sandbox and I'm creating this PR for two reasons:. - Getting feedback on possible edge cases, and maybe figuring out how the `NetCDFOutput` can infer the dimensions correctly; - Figuring out where to include this; - This isn't necessarily attached to an `OutputWriter`, so it feels odd to add it there; - Everywhere else in Oceananigans also feels inappropriate ; - Maybe add it to Oceanostics?; . Anyway, feedback is appreciated. . Also, big thanks to @ali-ramadhan for helping me out with this one.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397:298,sandbox,sandbox,298,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397,1,['sandbox'],['sandbox']
Testability,"Closes https://github.com/CliMA/Oceananigans.jl/issues/3051. Following up on #3394, this PR tries to do the first two tasks, fix the tendencies in the shallow water model and bring back the regression tests.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3486:201,test,tests,201,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3486,1,['test'],['tests']
Testability,Cnh/full cube implicit solver test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1593:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1593,1,['test'],['test']
Testability,"Co-authored-by: Francis J. Poulin <fpoulin@uwaterloo.ca>. I've added back the threaded benchmark written by @francispoulin in an older branch. I also added plots to it.; There is actually already a threaded benchmark script:; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_multithreading.jl; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_multithreading_single.jl; They differ in that the one I'm adding is essentially weak scaling shallow water model, while the one that's already there is strong scaling nonhydrostatic model.; If everyone thinks that it's appropriate, then I'll likely change the name of the extant benchmarking scripts to more accurately reflect their content. ; I would likely also do some more minor changes such as changing the default grid size down from 512^3, adding in plots, and configuring the output tables a bit more.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881:87,benchmark,benchmark,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881,5,['benchmark'],"['benchmark', 'benchmarking']"
Testability,Codecov and Coveralls coverage statistics do not account for GPU tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/138:65,test,tests,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/138,1,['test'],['tests']
Testability,Collaboration with @francispoulin. Todo:. - [x] Add time-stepping test with `advection=nothing` in `IncompressibleModel`; - [x] Add time-stepping test with `advection=nothing` in `ShallowWaterModel`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1270:66,test,test,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1270,2,['test'],['test']
Testability,"Commented out the first plot of the buoyancy and was able to get past this. However, there's a correctness bug it seems.. It works fine with the CPU backend. I'll test it out on an Nvidia GPU tomorrow morning. ```; [ Info: Running the simulation...; [ Info: Initializing simulation...; [00.00%] i: 0, t: 0 seconds, wall time: 20.432 seconds, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 20 minutes; [ Info: ... simulation initialization complete (23.694 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (12.989 seconds).; [ Info: time = NaN, iteration = 100: NaN found in field u. Stopping simulation.; [00NaN%] i: 100, t: NaN days, wall time: 27.465 seconds, max(u): ( NaN, 0.000e+00, 0.000e+00) m/s, next Δt: NaN days; [ Info: Simulation completed in 41.653 seconds; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1947397850:163,test,test,163,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1947397850,1,['test'],['test']
Testability,Comments or docstrings for cubed sphere test functions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3242:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3242,1,['test'],['test']
Testability,"CompatHelper: add new compat entry for BenchmarkTools at version 1, (keep existing compat)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2517:39,Benchmark,BenchmarkTools,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2517,2,['Benchmark'],['BenchmarkTools']
Testability,"Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler/utils.jl:183 [inlined]; [3] calling_conv_fixup(builder::LLVM.IRBuilder, val::LLVM.AddrSpaceCastInst, tape::LLVM.PointerType); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler/utils.jl:183; [4] enzyme_custom_common_rev(forward::Bool, B::LLVM.IRBuilder, orig::LLVM.CallInst, gutils::Enzyme.Compiler.GradientUtils, normalR::Ptr{Nothing}, shadowR::Ptr{Nothing}, tape::LLVM.ExtractValueInst); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:4610; [5] enzyme_custom_rev(B::LLVM.IRBuilder, orig::LLVM.CallInst, gutils::Enzyme.Compiler.GradientUtils, tape::LLVM.ExtractValueInst); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:4770; [6] (::Enzyme.Compiler.var""#201#202"")(B::Ptr{LLVM.API.LLVMOpaqueBuilder}, OrigCI::Ptr{LLVM.API.LLVMOpaqueValue}, gutils::Ptr{Nothing}, tape::Ptr{LLVM.API.LLVMOpaqueValue}); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:6657; [7] EnzymeCreatePrimalAndGradient(logic::Enzyme.Logic, todiff::LLVM.Function, retType::Enzyme.API.CDIFFE_TYPE, constant_args::Vector{…}, TA::Enzyme.TypeAnalysis, returnValue::Bool, dretUsed::Bool, mode::Enzyme.API.CDerivativeMode, width::Int64, additionalArg::Ptr{…}, forceAnonymousTape::Bool, typeInfo::Enzyme.FnTypeInfo, uncacheable_args::Vector{…}, augmented::Ptr{…}, atomicAdd::Bool); @ Enzyme.API ~/Projects/Enzymantics/Enzyme.jl/src/api.jl:141; [8] enzyme!(job::GPUCompiler.CompilerJob{…}, mod::LLVM.Module, primalf::LLVM.Function, TT::Type, mode::Enzyme.API.CDerivativeMode, width::Int64, parallel::Bool, actualRetType::Type, wrap::Bool, modifiedBetween::Tuple{…}, returnPrimal::Bool, jlrules::Vector{…}, expectedTapeType::Type, loweredArgs::Set{…}, boxedArgs::Set{…}); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:7715; [9] codegen(output::Symbol, job::GPUCompiler.CompilerJob{…}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, toplevel::Bool, strip::Bool, validate::Bool, only_en",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1791250259:1395,log,logic,1395,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1791250259,1,['log'],['logic']
Testability,Complete implementation of `HydrostaticFreeSurfaceModel` regression test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2036:68,test,test,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2036,1,['test'],['test']
Testability,"Configuration is done with keyword arguments (see below). In particular, the exename keyword; can be used to specify the path to the julia binary on the remote machine(s). machines is a vector of ""machine specifications"" which are given as strings of the form [user@]host[:port] [bind_addr[:port]]. user defaults to; current user and port to the standard SSH port. If [bind_addr[:port]] is specified, other workers will connect to this worker at the specified; bind_addr and port. It is possible to launch multiple processes on a remote host by using a tuple in the machines vector or the form (machine_spec, count), where; count is the number of workers to be launched on the specified host. Passing :auto as the worker count will launch as many workers as the number; of CPU threads on the remote host. Examples:. addprocs([; ""remote1"", # one worker on 'remote1' logging in with the current username; ""user@remote2"", # one worker on 'remote2' logging in with the 'user' username; ""user@remote3:2222"", # specifying SSH port to '2222' for 'remote3'; (""user@remote4"", 4), # launch 4 workers on 'remote4'; (""user@remote5"", :auto), # launch as many workers as CPU threads on 'remote5'; ]). Keyword arguments:. • tunnel: if true then SSH tunneling will be used to connect to the worker from the master process. Default is false. • multiplex: if true then SSH multiplexing is used for SSH tunneling. Default is false. • ssh: the name or path of the SSH client executable used to start the workers. Default is ""ssh"". • sshflags: specifies additional ssh options, e.g. sshflags=`-i /home/foo/bar.pem`. • max_parallel: specifies the maximum number of workers connected to in parallel at a host. Defaults to 10. • shell: specifies the type of shell to which ssh connects on the workers.; • shell=:posix: a POSIX-compatible Unix/Linux shell (sh, ksh, bash, dash, zsh, etc.). The default.; • shell=:csh: a Unix C shell (csh, tcsh).; • shell=:wincmd: Microsoft Windows cmd.exe. • dir: specifies the working direct",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1579765636:2335,log,logging,2335,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1579765636,2,['log'],['logging']
Testability,Continuous CPU + GPU benchmarks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/67:21,benchmark,benchmarks,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/67,1,['benchmark'],['benchmarks']
Testability,Convergence test and validation experiment Buildkite pipeline,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1223:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1223,1,['test'],['test']
Testability,Convergence test for advection schemes in shallow water,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1648:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1648,1,['test'],['test']
Testability,Convergence tests pipeline takes several hours to finish,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1420:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1420,1,['test'],['tests']
Testability,"Converted `benchmark_static_ocean.jl` to do a strong scaling test on a 256³ simulation when `Threads.nthreads() > 1`. Results are pretty sweet for multithreading that we basically got for free from KernelAbstractions.jl. Not sure what kind of speedups to expect for multithreading though. Maybe @leios, @christophernhill, or @vchuravy have a better idea. Some results on number of threads and wall clock time per time step:. # Tartarus. ```zsh; #!/bin/zsh; for threads in 1 4 8 16 24 32 40; ~/julia-1.5.0/bin/julia --project -t $threads benchmark_static_ocean.jl; ```. ```; Julia 1.5.0 + Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz. 1 thread: 3.78 s; 4 threads: 1.35 s (2.8x); 8 threads: 839 ms (4.5x); 16 threads: 585 ms (6.5x); 24 threads: 551 ms (6.9x); 32 threads: 539 ms (7.0x); 40 threads: 483 ms (10.6x); 48 threads: 479 ms (10.7x); ```. # Satori. ```bash; #!/bin/bash; for threads in 1 4 8 16 32 64 128 160; do JULIA_NUM_THREADS=$threads julia --project benchmark_static_ocean.jl; done; ```. ```; Julia 1.4.1 + IBM Power System AC922 (8335-GTH). 1 thread: 5.13 s; 4 threads: 2.44 s (2.1x); 8 threads: 1.35 s (3.8x); 16 threads: 796 ms (6.4x); 32 threads: 637 ms (8.0x); 64 threads: 503 ms (10.2x); 128 threads: 501 ms (10.2x); 160 threads: 511 ms (10.0x); ```. A beautiful scene from Satori:. ![image](https://user-images.githubusercontent.com/20099589/91370150-96ad1100-e7db-11ea-9bf2-12e40de5ff93.png)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/869:61,test,test,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/869,1,['test'],['test']
Testability,Cool! Two other possible bugs I found:. https://github.com/CliMA/Oceananigans.jl/blob/1522ae47996a4df9092a27e0d32bfffc1bf53fad/test/test_enzyme.jl#L331. I think should be `dedν[1][1]` instead. And. https://github.com/CliMA/Oceananigans.jl/blob/1522ae47996a4df9092a27e0d32bfffc1bf53fad/test/test_enzyme.jl#L261-L264. produces an out of bounds error with the z axis. I replaced `3` with `end`. Happy to push those changes.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438727494:127,test,test,127,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438727494,2,['test'],['test']
Testability,"Copy pasting from @glwagner's fork. Adaptive time stepping with a `TimeStepWizard` that computes time steps for you. I just need to modify `time_step!` with a flag like `first_step_Euler=true` to take forward Euler steps at first iteration and when changing the time step, but with the ability to turn it off for tests where we actually don't want to do this. . I'll add some more docstrings and a couple of tests. cc @sandreza . Resolves #189",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/297:313,test,tests,313,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/297,2,['test'],['tests']
Testability,Correct logic for `AveragedTimeInterval`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3720:8,log,logic,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3720,1,['log'],['logic']
Testability,Correct logic in `AveragedTimeInterval`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3719:8,log,logic,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3719,1,['log'],['logic']
Testability,Could also change some of the examples and some tests to use flat dimensions now. Resolves #1023 ; Resolves #1026,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1024:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1024,1,['test'],['tests']
Testability,Could be good to put together a benchmarking script for `ContinuousForcing` and `Relaxation` so that we can test ideas.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875598604:32,benchmark,benchmarking,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875598604,2,"['benchmark', 'test']","['benchmarking', 'test']"
Testability,Could be worth contacting the authors of that draft to figure out whether they tested statistics or not. I'm also not sure if the paper has been published. More info definitely welcome.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1705#issuecomment-876058816:79,test,tested,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1705#issuecomment-876058816,1,['test'],['tested']
Testability,"Could lead to confusion, e.g. in #579. Thanks for helping locate this issue @masonrogers14. Easy PR but might involve refactoring some tests?. https://github.com/climate-machine/Oceananigans.jl/blob/588890004e69cfc7db10472b12a9840b8a9ad7b6/src/boundary_conditions.jl#L339",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/582:135,test,tests,135,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/582,1,['test'],['tests']
Testability,"Couple thoughts from a discussion with @ali-ramadhan today:. To get `DiskTimeSeries` working with `JLD2OutputWriter`, we'll need to 1) serialize the grid (mostly for convenience...) and 2) serialize ""meta"" for fields by adding lines like. ```julia; file[""serialized/grid""] = model.grid. for (i, out) in enumerate(outputs); field_name = keys(outputs)[i]; out isa AbstractField && (file[""timeseries/$field_name/meta/location""] = location(out)); end; ```. to the `JLD2OutputWriter` constructor. We need a bit of extra work for `ReducedField`... though on second though it might be easier to build this logic into `DiskTimeSeries`. Some logic for serializing boundary conditions might be nice too (sometimes, but not always possible). This, plus changing the default `FieldSlicer` to `nothing`, are the primary changes that's needed for `JLD2OutputWriter`, I think. For `NetCDFOutputWriter`, the field location needs to be saved as a string in the field's attributes. I think we have what we need to reconstruct the grid otherwise. @ali-ramadhan can comment. I think we also want to make the default `field_slicer` to `nothing` so that the framework is friendly. The broadcasting infrastructure being developed on #1596 will make analysis with Oceananigans fields even nicer (since we can bypass `ComputedField` and launch kernels / make computations immediately via julia's broadcasting syntax).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1493#issuecomment-821749204:599,log,logic,599,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1493#issuecomment-821749204,2,['log'],['logic']
Testability,Create a wiki with information / notes on how to setup buildkite for local testing?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1046:75,test,testing,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1046,1,['test'],['testing']
Testability,Created a PR in https://github.com/CliMA/Oceananigans.jl/pull/3576 to see if tests pass (i.e. if `NetCDFWriter` still works with that trivial change).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2091129562:77,test,tests,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2091129562,1,['test'],['tests']
Testability,"CuArray{Float64,3},CuArray{Float64,3},CuArray{Float64,3}}},CuArray{Complex{Float64},3},NamedTuple{(:FFTxy!, :FFTz!, :IFFTxy!, :IFFTz!),Tuple{CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CuArray{Complex{Float64},3},CuArray{Complex{Float64},3}}}},Nothing}, ::Int64; euler::Bool) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/TimeSteppers/adams_bashforth.jl:50; [29] time_step_with_parameterized_forcing(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:40; [30] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:137 [inlined]; [31] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [32] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:135 [inlined]; [33] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [34] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:124; ; NetCDF [GPU]: Error During Test at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:524; Got exception outside of a @test; MethodError: no method matching device(::CuContext); Closest candidates are:; device() at /home/ancellin/.julia/packages/CUDA/d6WNR/src/state.jl:225; Stacktrace:; [1] |>(::CuContext, ::typeof(CUDA.device)) at ./operators.jl:823; [2] versioninfo_with_gpu() at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/Utils/versioninfo.jl:9; [3] write_grid_and_attributes(::IncompressibleModel{Oceananigans.TimeSteppers.AdamsBashforthTimeStepper{Float64,NamedTuple{(:u, :v, :w, :T, :S)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:76543,Test,Test,76543,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,2,['Test'],['Test']
Testability,CubedSphere grid construction + tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2871:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2871,1,['test'],['tests']
Testability,"Currently I think Travis and GitLab upload them but since GPU tests are moving to Buildkite, coverage artifacts should be uploaded from there.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1052:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1052,1,['test'],['tests']
Testability,"Currently a work in progress, but it has one validation experiment (Rossby-Haurwitz) and one ""for fun"" dynamics test (Bickley Jet)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1570:112,test,test,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1570,1,['test'],['test']
Testability,"Currently only four closures are being tested. ```; Testing that time stepping works [CPU(), Float32, ConstantIsotropicDiffusivity]...; Testing that time stepping works [CPU(), Float32, ConstantAnisotropicDiffusivity]...; Testing that time stepping works [CPU(), Float32, SmagorinskyLilly]...; Testing that time stepping works [CPU(), Float32, VerstappenAnisotropicMinimumDissipation]...; Testing that time stepping works [CPU(), Float64, ConstantIsotropicDiffusivity]...; Testing that time stepping works [CPU(), Float64, ConstantAnisotropicDiffusivity]...; Testing that time stepping works [CPU(), Float64, SmagorinskyLilly]...; Testing that time stepping works [CPU(), Float64, VerstappenAnisotropicMinimumDissipation]...; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/539:39,test,tested,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/539,9,"['Test', 'test']","['Testing', 'tested']"
Testability,"Currently the SplitExplicit is a bit problematic. I showcase the issue below. ```Julia; using Oceananigans, Logging, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: update_state!; using Oceananigans.MultiRegion; using Oceananigans.MultiRegion: reconstruct_global_field. Logging.disable_logging(Logging.Warn). function diffusion_cosine_test(grid; P = XPartition, regions, closure, field_name); model = HydrostaticFreeSurfaceModel(grid = MultiRegionGrid(grid, partition = P(regions)),; closure = closure,; tracers = :c,; coriolis = nothing, buoyancy=nothing). initial_condition(x, y, z) = cos(2x). f = fields(model)[field_name]. @apply_regionally set!(f, initial_condition). update_state!(model). Δt = 1e-6 * grid.Lz^2 / closure.κ. for _ = 1:10; time_step!(model, Δt); end. return f; end. Nx = Ny = 8. grid = RectilinearGrid(size = (Nx, Ny, 1), halo = (3, 3, 3),; topology = (Bounded, Bounded, Bounded),; x = (0, 1), y = (0, 1), z = (0, 1)). closure = ScalarDiffusivity(ν = 1, κ = 1). field_names = [:u, :v, :c]. for field_name in field_names; println(""Testing for $(string(field_name)):""). fs = diffusion_cosine_test(grid; closure, regions = 1, field_name); fs = Array(interior(fs)). f = diffusion_cosine_test(grid; closure, regions = 2, field_name); f = Array(interior(reconstruct_global_field(f))). println("" Comparing diffusion of $(string(field_name)) on single and multi-region grid:""); @show all(f .≈ fs); end; ```. gives. ```julia; Testing for u:; Comparing diffusion of u on single and multi-region grid:; all(f .≈ fs) = false; Testing for v:; Comparing diffusion of v on single and multi-region grid:; all(f .≈ fs) = false; Testing for c:; Comparing diffusion of c on single and multi-region grid:; all(f .≈ fs) = true; ```. Thus, the test seems to be OK for diffusing tracer but **not** for u or v!. cc @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3514#issuecomment-1999418977:108,Log,Logging,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3514#issuecomment-1999418977,9,"['Log', 'Test', 'test']","['Logging', 'Test', 'Testing', 'test']"
Testability,"Currently the example tests are ""broken"", i.e. not run because having PyPlot as a dependency caused the Travis CI pipeline to frequently fail for different reasons. I still really like matplotlib and PyPlot but after playing around with Plots.jl I think it'll be worth switching over. As it doesn't get installed through conda it should be more stable on Travis. Would be really cool if Documenter.jl works with Plots.jl [animations](http://docs.juliaplots.org/latest/animations/). I'll give it a try.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/536:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/536,1,['test'],['tests']
Testability,"Cut cells use piecewise linear representations of bathymetry (as opposed to full or partial cells which use piecewise constant ones). Here’s a tentative work plan for implementing cut cells:. 1. Develop the following test cases: . (a) Tracer advection with no momentum on a seamount ([Adcroft](https://journals.ametsoc.org/view/journals/mwre/125/9/1520-0493_1997_125_2293_rotbsc_2.0.co_2.xml) or [Schär](https://journals.ametsoc.org/view/journals/mwre/130/10/1520-0493_2002_130_2459_antfvc_2.0.co_2.xml) configuration); ; (b) Internal wave or overflow with momentum;; ; Run these test cases for full and partial cells. As suggested by @jm-c, compare a simulation using low vertical resolution (~10 vertical layers) and partial cells with one using high vertical resolution (~500 vertical layers) and full cells at the same horizontal resolution (to verify the effectiveness of partial cells). To ensure that a stratified ocean remains at rest, implement the technique in [Lin](https://rmets.onlinelibrary.wiley.com/doi/abs/10.1002/qj.49712354214?casa_token=4s6PejUyFLMAAAAA:RtWYxrnbDlgN8ZzMepSndBPomZX_nlXMFUWhU5nCMDE6qeyN2fWb5fb2QxQFUPYTCqZVjzG2jtpGPFs) for partial cells. . 2. Implement two-dimensional cut cells in the y-z plane:. (a) Implement `CutCellBottom` in ImmersedBoundary module similar to PartialCellBottom;; (b) Implement a special compute_w_from_continuity for `CutCellBottom`. ; https://github.com/CliMA/Oceananigans.jl/blob/8e6b5cd540b7a710955edf9846959966efbb6ea0/src/Models/HydrostaticFreeSurfaceModels/compute_w_from_continuity.jl#L15-L16. (c) Implement the ""algorithm"" for partial cells to compute the hydrostatic pressure for `CutCellBottom`.; https://github.com/CliMA/Oceananigans.jl/blob/8e6b5cd540b7a710955edf9846959966efbb6ea0/src/Models/NonhydrostaticModels/update_hydrostatic_pressure.jl#L24. 3. Extend the cut cell implementation to 3D and consider improving the pressure gradient calculation. . # References. [Advection on Cut-Cell Grids for an Idealized Mountain of Cons",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3123:217,test,test,217,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123,2,['test'],['test']
Testability,Cut down the examples. Moved stuff into a sandbox.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/230:42,sandbox,sandbox,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/230,1,['sandbox'],['sandbox']
Testability,"Damn, it looks like the tests on the GPU are not working because CUDA is not loaded properly. ; I am trying to address this in #3880. A segmentation fault probably means the MPI is not CUDA-aware. Typically, the MPI that is shipped with MPI_jll is not cuda-aware. A good way to check is; ```julia; julia> using MPI. julia> MPI.has_cuda(); true; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443869989:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443869989,1,['test'],['tests']
Testability,"Dear Oceananigans team,. We are trying to use Oceananigans to create reference LES solutions for multiple canonical flows. We use a cubical domain and random perturbations to trigger the flow. During our validation tests, we noticed that we could not reproduce the results, i.e., running the same .jl script (same initial flow conditions) leads to different averaged solutions (see attached picture). We ran more than 16 simulations and never obtained the same solution. We tried to set the seed of the random perturbations constant, but this did not solve the problem. Do you observe this problem, and could you help us run reproducible simulations so other users can obtain the same solutions? We attached the .jl file we are using to define the simulations. Best regards,; Filipe Pereira; Luke van Roekel ; Amrapalli Garanaik; Brodie Pearson . ![tec_ww_time_c1](https://user-images.githubusercontent.com/80914369/193599386-11eccb58-2a3f-4a1c-83d6-cde2ea429d00.png). [c16_128_128m(1).jl.zip](https://github.com/CliMA/Oceananigans.jl/files/9698212/c16_128_128m.1.jl.zip)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766:215,test,tests,215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766,1,['test'],['tests']
Testability,Deep convection example and golden master test should switch to BCs.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/220:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/220,1,['test'],['test']
Testability,Delete some benchmarks that were done on archaic Oceananigans v0.34.0,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2803:12,benchmark,benchmarks,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2803,1,['benchmark'],['benchmarks']
Testability,Depends on functionality in #744 . Needs:. - [x] tests; - [x] possibly more examples in docstrings. Hopefully `Relaxation` will be helpful.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/745:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/745,1,['test'],['tests']
Testability,"Deps.jl. This might be especially good if we want more/larger regression tests. And it wouldn't increase the repo size every time you have to change the regression data. We could maybe the store on engaging? Ideally it should be hosted somewhere with near 100% uptime as we're already maintaining Buildkite which fails sometimes, so we should try to reduce the number of possible failure points in our CI pipeline. ---. Copy pasted some analysis below:. I think regression files currently take up ~17.1 MiB of space in the git repo while a fresh clone of the repo is ~43 MiB (images and convergence plots probably take up several MiB). Here's a listing of all files in git history over 300 KiB (command from https://stackoverflow.com/a/42544963):; ```; 018186272590 328KiB test/data_rayleigh_benard_regression_000001100.jld; 19db949aaae8 328KiB test/data_rayleigh_benard_regression_000001000.jld; 424080660c53 328KiB test/data_rayleigh_benard_regression_000001000.jld; a7e1d690d6b5 328KiB test/data_rayleigh_benard_regression_000001100.jld; 72744372e5c4 361KiB test/regression_tests/data/thermal_bubble_regression.nc; 4ce9699176ee 363KiB test/deep_convection_regression_10.nc; c15f95e2bf3a 364KiB test/regression_tests/data/thermal_bubble_regression.nc; 6f28044e3b56 366KiB docs/src/verification/convergence_plots/gaussian_advection_diffusion_error_convergence.png; 194fdf47099b 392KiB docs/src/verification/convergence_plots/gaussian_advection_diffusion_error_convergence.png; 2f9d5e8650d7 420KiB docs/src/verification/convergence_plots/cosine_advection_diffusion_error_convergence.png; db8f742e7c95 446KiB docs/src/verification/convergence_plots/cosine_advection_diffusion_error_convergence.png; 0de880b2b97b 468KiB docs/src/verification/plots_stratified_couette_flow_stratified_couette_flow_velocity_temperature_slices.png; d277a4e5393b 650KiB test/regression_tests/data/data_rayleigh_benard_regression.jld2; b125bc6f8e9d 709KiB test/regression_tests/data/ocean_large_eddy_simulation_VerstappenAni",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1086:1291,test,test,1291,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1086,1,['test'],['test']
Testability,"Did a quick small strong scaling benchmark on Tartarus (256^3) up to 16 cores but results don't look super great? ~9.5x speedup on 16 cores. Better than multi-threading though. Maybe I'm not benchmarking properly though. Could also be missing some MPI barriers. Should probably learn how to profile MPI code. ```; Incompressible model strong scaling benchmark; ┌─────────────────┬───────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │; ├─────────────────┼───────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ (256, 256, 256) │ 1 │ 3.641 s │ 3.686 s │ 3.686 s │ 3.730 s │ 355.28 KiB │ 2336 │; │ (256, 256, 256) │ 2 │ 1.917 s │ 1.918 s │ 1.921 s │ 1.928 s │ 346.00 KiB │ 2782 │; │ (256, 256, 256) │ 4 │ 1.249 s │ 1.283 s │ 1.279 s │ 1.300 s │ 348.47 KiB │ 2822 │; │ (256, 256, 256) │ 8 │ 652.029 ms │ 714.833 ms │ 704.940 ms │ 738.885 ms │ 353.84 KiB │ 2902 │; │ (256, 256, 256) │ 16 │ 377.153 ms │ 388.435 ms │ 394.780 ms │ 415.562 ms │ 366.16 KiB │ 3062 │; └─────────────────┴───────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; ```. ```; Incompressible model strong scaling speedup; ┌─────────────────┬───────┬─────────┬──────────┬─────────┐; │ size │ ranks │ speedup │ memory │ allocs │; ├─────────────────┼───────┼─────────┼──────────┼─────────┤; │ (256, 256, 256) │ 1 │ 1.0 │ 1.0 │ 1.0 │; │ (256, 256, 256) │ 2 │ 1.92195 │ 0.973876 │ 1.19092 │; │ (256, 256, 256) │ 4 │ 2.87312 │ 0.980825 │ 1.20805 │; │ (256, 256, 256) │ 8 │ 5.15614 │ 0.995954 │ 1.24229 │; │ (256, 256, 256) │ 16 │ 9.48879 │ 1.03061 │ 1.31079 │; └─────────────────┴───────┴─────────┴──────────┴─────────┘; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-794954624:33,benchmark,benchmark,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-794954624,3,['benchmark'],"['benchmark', 'benchmarking']"
Testability,Did some refactoring and CPU and GPU hydrostatic regression tests pass locally so I think this PR is ready for review!. @simone-silvestri Requesting a review from you on your own PR again lol but I won't approve unless you do.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3268#issuecomment-2400089856:60,test,tests,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3268#issuecomment-2400089856,1,['test'],['tests']
Testability,Did we add a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2710#issuecomment-1225160871:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2710#issuecomment-1225160871,1,['test'],['test']
Testability,Did we break the distributed tests?; https://buildkite.com/clima/oceananigans-distributed/builds/4176#0192e4ca-db93-47a2-a550-47e8a36b6bc2/232-1228,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3890#issuecomment-2451012645:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3890#issuecomment-2451012645,1,['test'],['tests']
Testability,"Did you test it? :). I think providing a string as a closure doesn't even make it to the new error message you added so you get a MethodError from `with_tracers`!. ```Julia; julia> using Oceananigans, Test; Precompiling Oceananigans; 1 dependency successfully precompiled in 11 seconds. 129 already precompiled. julia> grid = RectilinearGrid(CPU(), size=(2, 2, 2), extent=(1, 2, 3)); 2×2×2 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 2×2×2 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.5; ├── Periodic y ∈ [0.0, 2.0) regularly spaced with Δy=1.0; └── Bounded z ∈ [-3.0, 0.0] regularly spaced with Δz=1.5. julia> closure = ""not a closure""; ""not a closure"". julia> NonhydrostaticModel(; grid, closure); ERROR: MethodError: no method matching with_tracers(::Tuple{}, ::String). Closest candidates are:; with_tracers(::Any, ::Nothing, Any...; kwargs...); @ Oceananigans ~/Research/OC11.jl/src/Utils/with_tracers.jl:44; with_tracers(::Any, ::Oceananigans.TurbulenceClosures.TwoDimensionalLeith{FT}) where FT; @ Oceananigans ~/Research/OC11.jl/src/TurbulenceClosures/turbulence_closure_implementations/leith_enstrophy_diffusivity.jl:61; with_tracers(::Any, ::ScalarBiharmonicDiffusivity{F, N}) where {F, N}; @ Oceananigans ~/Research/OC11.jl/src/TurbulenceClosures/turbulence_closure_implementations/scalar_biharmonic_diffusivity.jl:85; ... Stacktrace:; [1] NonhydrostaticModel(; grid::RectilinearGrid{…}, clock::Clock{…}, advection::Centered{…}, buoyancy::Nothing, coriolis::Nothing, stokes_drift::Nothing, forcing::@NamedTuple{}, closure::String, boundary_conditions::@NamedTuple{}, tracers::Tuple{}, timestepper::Symbol, background_fields::@NamedTuple{}, particles::Nothing, biogeochemistry::Nothing, velocities::Nothing, hydrostatic_pressure_anomaly::Oceananigans.Models.NonhydrostaticModels.DefaultHydrostaticPressureAnomaly, nonhydrostatic_pressure::Field{…}, diffusivity_fields::Nothing, pressure_solver::Nothing, immersed_boundary::Nothing, auxiliary_fields::@Na",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325306269:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325306269,2,"['Test', 'test']","['Test', 'test']"
Testability,Did you test on a GPU?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477962673:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477962673,1,['test'],['test']
Testability,Did you test on sverdrup?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1442103670:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1442103670,1,['test'],['test']
Testability,Distributed tests actually fail with errors :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3814#issuecomment-2394903510:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3814#issuecomment-2394903510,1,['test'],['tests']
Testability,Distributed tests fail on cpu. Something related to CUDA? Any ideas? @simone-silvestri?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3310#issuecomment-1763173952:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3310#issuecomment-1763173952,1,['test'],['tests']
Testability,Distributed tests keep failing due to segfaults and MPI communication errors... Is there a trick to get them to work or should I just merge this PR as the non-distributed tests all pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3769#issuecomment-2383655329:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3769#issuecomment-2383655329,2,['test'],['tests']
Testability,Do these test pass locally?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1542722510:9,test,test,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1542722510,1,['test'],['test']
Testability,Do we allow scalar indexing in all our tests?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3039:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3039,1,['test'],['tests']
Testability,Do we have good ideas for a test that will catch the error observed in #3670 ? Also I think it will be important to precisely pinpoint the problem and describe it in the top post.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2295323633:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2295323633,1,['test'],['test']
Testability,Do we know why these 4 tests fail? From looking at the first one it seems gpu related but I'm no expert.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1270#issuecomment-746364115:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1270#issuecomment-746364115,1,['test'],['tests']
Testability,Docker file for easy installation and CI testing,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/151:41,test,testing,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/151,1,['test'],['testing']
Testability,"Docs are previewing here: https://clima.github.io/OceananigansDocumentation/previews/PR3080/. I checked all the examples with `NonhdyrostaticModel` and they all look the same as they do on the `stable` branch. Furthermore, the few tests failures that we have are all something like. ```; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_jld2_output_writer.jl:131; --;   | Expression: wu == zero(FT);   | Evaluated: -3.009265538105056e-35 == 0.0; ```. i.e. very small approximation errors that aren't indicative of any significant errors in the model. In other words, I think this is working well! I vote we simplify the model and get rid of the hydrostatic separation. @glwagner as you mentioned, this isn't a trivial change. If you wanna move forward with it, feel free to push to this PR or close this one and open another. I can also help if you want, just lmk what I should focus on. PS: Just like we did in https://github.com/CliMA/Oceananigans.jl/pull/1910 we might need/want to replace the `stratified_fluid_remains_at_rest_with_tilted_gravity_buoyancy_tracer()` test for something simpler.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718:231,test,tests,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718,7,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,Docs built successfully with https://github.com/CliMA/Oceananigans.jl/pull/2990/commits/f2e22b8a65b1a5c6a1e01b95ff867d87eaf81609! Nice. Next commit (https://github.com/CliMA/Oceananigans.jl/pull/2990/commits/8572c242dde8dbe61c181b0b6cf72e92a4b9fca5) reintruduces the tilted bbl example and was also successfully tested locally.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478586287:312,test,tested,312,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478586287,1,['test'],['tested']
Testability,"Docs:; ```; ERROR: could not load library ""/storage7/buildkite-agent/julia-1.5.4/lib/julia/sys.so""; --; &nbsp; | /storage7/buildkite-agent/julia-1.5.4/lib/julia/sys.so: ELF load command past end of file; &nbsp; | ERROR: LoadError: Failed to precompile PlotUtils [995b91a9-d308-5afd-9ec6-746e21dbc043] to /storage7/buildkite-agent/.julia-2556/compiled/v1.5/PlotUtils/YveHG_R3lk8.ji.; &nbsp; | Stacktrace:; &nbsp; | [1] top-level scope at none:2; &nbsp; | [2] eval at ./boot.jl:347 [inlined]; &nbsp; | in expression starting at /storage7/buildkite-agent/.julia-2556/packages/Plots/SjqWU/src/Plots.jl:20; &nbsp; | ERROR: LoadError: Failed to precompile Plots [91a5bcdd-55d7-5caf-9e0b-520d859cae80] to /storage7/buildkite-agent/.julia-2556/compiled/v1.5/Plots/ld3vC_R3lk8.ji.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-1/clima/oceananigans/docs/make.jl:6; &nbsp; | 🚨 Error: The command exited with status 1. ```. CPU test; ```; [8] test() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:72; --; &nbsp; | [9] top-level scope at none:1; &nbsp; | Union{},Union{},Tuple{},NamedTuple{(test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; ERROR: failed process: Process(`/storage7/buildkite-agent/.julia-2556/artifacts/2fcd463fb9498f362be9d1c4ef70a63c920b0e96/bin/mpiexec -np 4 /storage7/buildkite-agent/julia-1.5.4/bin/julia -O0 --color=yes -e 'using Pkg; Pkg.test()'`, ProcessExited(1)) [1]; &nbsp; | &nbsp;; &nbsp; | Stacktrace:; &nbsp; | [1] pipeline_error at ./process.jl:525 [inlined]; &nbsp; | [2] run(::Cmd; wait::Bool) at ./process.jl:440; &nbsp; | [3] run(::Cmd) at process.jl:438; &nbsp; | [4] (::var""#1#2"")(::Cmd) at none:4; &nbsp; | [5] (::MPI.var""#8#9""{var""#1#2""})(::String) at /storage7/buildkite-agent/.julia-2556/packages/MPI/b7MVG/src/environment.jl:25; &nbsp; | [6] (::MPICH_jll.var""#8#9""{MPI.var""#8#9""{var""#1#2""}})() at /storage7/buildkite-agent/.julia-2556/packages/MPICH_jll/ekpo2/src/wrappers/x86_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842643141:1387,test,test,1387,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842643141,2,['test'],['test']
Testability,Document and test numerical convergence validation,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/777:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/777,1,['test'],['test']
Testability,"Documentations test passed, seems like it was #1930 that was breaking it. All I did was edit the markdown file `benchmarks.md`. What could've broken it? @glwagner",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1950#issuecomment-902850612:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1950#issuecomment-902850612,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"Does anyone know how I can add Codecov coverage in our [buildkite pipeline](https://github.com/CliMA/Oceananigans.jl/blob/ncc/adds-codecov/.buildkite/pipeline.yml)?. From what I read at [`JuliaGPU/buildkite/README`](https://github.com/JuliaGPU/buildkite/blob/main/README.md) here, I get that I have to add:. ```Julia; plugins:; - JuliaCI/julia#v1:; version: ""1""; - JuliaCI/julia-test#v1: ~; - JuliaCI/julia-coverage#v1:; codecov: true; ```. in *every* step in our buildkite pipeline. Is this correct?. cc @maleadt, @vchuravy",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063309592:379,test,test,379,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063309592,1,['test'],['test']
Testability,Does it change with different solvers? I'll do some testing today to try to snoop out the issue,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482707191:52,test,testing,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482707191,1,['test'],['testing']
Testability,"Does it make sense to aim for 100% code coverage (by some metric)? Maybe not until v1.0.0 as it would increase the testing burden and tests need to be maintained. 100% line coverage shouldn't be too hard to achieve. 100% [MC/DC coverage](https://en.wikipedia.org/wiki/Modified_condition/decision_coverage) would be much harder, and I'm not sure whether it would benefit a package like Oceananigans.jl. Presumably 100% physics coverage is what we want. Although not sure how to quantify % here.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1100:115,test,testing,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1100,2,['test'],"['testing', 'tests']"
Testability,"Does it make sense to try to reconstruct vorticity in the same way? Ie have we tried reconstructing the circulation `Γᶠᶠᶜ`, which is related to vorticity through. https://github.com/CliMA/Oceananigans.jl/blob/98bcdde7ae679583ea88474ec0909469abccfc90/src/Operators/vorticity_operators.jl#L9. and then computing vorticity by dividing by `Azᶠᶜᶜ` and `Azᶜᶠᶜ`?. It makes a lot of sense to me that `δx(Δy * u) + δy(Δx * v)` is smoother than `δx(Δy * u) + δy(Δx * v) / Azᶜᶜᶜ` when the grid is strongly stretched. Maybe we should come up with test cases that have even more extreme stretching? It will be very very nice to have good properties on stretched grids for the cubed sphere.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529053452:535,test,test,535,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529053452,1,['test'],['test']
Testability,"Does it need to be maintained in any way other than keeping that page up and making sure that it renders fine? If that's all it needs, then I'd say it's worth keeping. Or are you suggesting that we keep re-running these tests with every minor Oceananigans release or something?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872331397:220,test,tests,220,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872331397,1,['test'],['tests']
Testability,"Doesn't your script use `ComputedField` and `KernelComputedField`?. What if we set up a test with two tracers, and then define a `ComputedField` that's a function of the two. It'd be nice to have tests for time-averaging of `ComputedField` and `KernelComputedField` anyways.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817990912:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817990912,2,['test'],"['test', 'tests']"
Testability,Don't apologize! I just wanted to merge it to #3503 in the hope I can merge that as soon as test pass (if they pass)...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3512#issuecomment-1999132237:92,test,test,92,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3512#issuecomment-1999132237,1,['test'],['test']
Testability,Don't do time-stepping tests on Travis,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1071:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1071,1,['test'],['tests']
Testability,Don't need JLD or HDF5 since PR #329 removed the last use of a JLD output writer. This should speed up CI testing by quite a bit.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/340:106,test,testing,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/340,1,['test'],['testing']
Testability,"Don't the regression tests output text indicating how many grid points are different, and what the maximum differences are?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559613874:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559613874,1,['test'],['tests']
Testability,"Done! There is a test for the time stepping wizard that loops over archs, but not topologies. I can certainly test those as well but didn't think that was necessary. Happy to fix it if there is any concern. If there aren't then I'm happy to close this issue and then focus on the accuracy of the solution, and comparing the results with the linear stability results that I posed yesterday.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-765443511:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-765443511,2,['test'],['test']
Testability,Drop direct dependency to GPUArrays and BenchmarkTools,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2518:40,Benchmark,BenchmarkTools,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2518,1,['Benchmark'],['BenchmarkTools']
Testability,"E.g., in addition of this:; https://github.com/CliMA/Oceananigans.jl/blob/057e25cea75a0da5e2e0f2328d39205ebaf2b0dc/test/test_time_stepping.jl#L25-L40; we also have tests using, e.g., `closure = (AnisotropicDiffusivity(FT), Closure(FT))` and also some tests using, e.g., `HydrostaticFreeSurfaceModel`?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2047:115,test,test,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2047,3,['test'],"['test', 'tests']"
Testability,"EDIT: This has nothing to do with Oceananigans.jl per se. Better pursued on LambertW.jl. I agree with https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1904990127 . This part of the stack trace suggests that it is the `@warn` that is causing the problem. It should be possible to remove that somehow. Better would be to remove the `@warn` entirely and instead return the result along with info on the convergence. And maybe convenience interface for people who want to ignore it. That's a more robust interface for other reasons as well. I don't know anything about running on GPUs. Does `@warn` cause failure if it is anywhere in the package being compiled? or anywhere in the function being called? Or does execution have to hit the `@warn` so that io is attempted at run time?. EDIT: I missed this above:; >> Do you get a warning during CPU execution ?. > Nope. Everything seems to run pretty smoothly:. So it seems that execution does not have to hit the `@warn` for the reported failure. Also the stack trace indicates that the error happens when the macro is expanded. EDIT: so the following comment may be relevant, but perhaps not. It would be nice if there were a way to redirect io or send it to dev null or otherwise disable everywhere when running on a GPU. ```; Reason: unsupported call to an unknown function (call to jl_f__call_latest); Stacktrace:; [1] #invokelatest#2; @ ./essentials.jl:816; [2] invokelatest; @ ./essentials.jl:813; [3] macro expansion; @ ./logging.jl:381; [4] lambertw_root_finding; @ /glade/work/tomasc/.julia/packages/LambertW/tom9a/src/LambertW.jl:188; [5] lambertw_branch_zero; @ /glade/work/tomasc/.julia/packages/LambertW/tom9a/src/LambertW.jl:117; [6] _lambertw; @ /glade/work/tomasc/.julia/packages/LambertW/tom9a/src/LambertW.jl:93; [7] lambertw (repeats 2 times); @ /glade/work/tomasc/.julia/packages/LambertW/tom9a/src/LambertW.jl:73; [8] W; @ /glade/derecho/scratch/tomasc/twake4/headland_simulations/mwe.jl:9; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1910836945:1491,log,logging,1491,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1910836945,1,['log'],['logging']
Testability,Each Appveyor build takes 30-50 minutes to run (and they run sequentially) so Appveyor takes forever to finish testing. Compare with ~10 minutes per build on Travis and JuliaGPU's CI on GitLab. It also builds CUDA packages unsuccessfully so maybe defining a CPU testing env and using it on Travis and Appveyor can help? See https://github.com/ali-ramadhan/Oceananigans.jl/issues/79. Problem might go away on its own but otherwise this might help: https://www.appveyor.com/docs/build-cache/,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/89:111,test,testing,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/89,2,['test'],['testing']
Testability,Either way we need both `east_bounded` _and_ `solid_interface` so the question is just how we shuffle logic between the two. We can consider changing `solid_interface`. If we change its behavior I would recommend calling it `fluid_solid_interface`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2263#issuecomment-1047180676:102,log,logic,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2263#issuecomment-1047180676,1,['log'],['logic']
Testability,Eliminate dichotomy between GPU and CPU tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/242:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/242,1,['test'],['tests']
Testability,"Encourage, document, test using `Field` for boundary conditions rather than `Array`",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3298:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3298,1,['test'],['test']
Testability,"Ended up being a simple issue where; ```julia; set!(u::Field{A1}, f::Function) where {A1 <: OffsetArray{T, D, <:CuArray} where {T, D}}; ```; assumed `u_cpu` was always a `CellField`. Tests should pass now. Let me know if this makes sense but I also moved your `set_velocity_tracer_fields` test to `test_models.jl` as it constructs a model, but we don't know if `model()` actually works until we test it in `test_models.jl`. So now we test `set!` after `model()` has been tested.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519507996:289,test,test,289,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519507996,4,['test'],"['test', 'tested']"
Testability,Enzyme tests pass now: https://buildkite.com/clima/oceananigans/builds/14478#018dc549-6a59-40cd-a6f1-5e4d2cb7ced4. 🎉,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1953617261:7,test,tests,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1953617261,1,['test'],['tests']
Testability,"Enzyme tests seems to be failing with:. ```; Enzyme + Oceananigans Initialization Broadcast Kernel: Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-9/clima/oceananigans/test/test_enzyme.jl:134; Got exception outside of a @test; StackOverflowError:; Stacktrace:; [1] getproperty; @ ./Base.jl:32 [inlined]; [2] unwrap_unionall; @ ./essentials.jl:379 [inlined]; [3] fieldnames; @ ./reflection.jl:169 [inlined]; [4] augmented_julia_fieldnames_26436wrap; @ ./reflection.jl:0; [5] macro expansion; @ ~/.julia-16536/packages/Enzyme/aEyGD/src/compiler.jl:6673 [inlined]; [6] enzyme_call; @ ~/.julia-16536/packages/Enzyme/aEyGD/src/compiler.jl:6273 [inlined]; [7] AugmentedForwardThunk; @ ~/.julia-16536/packages/Enzyme/aEyGD/src/compiler.jl:6161 [inlined]; [8] runtime_generic_augfwd(activity::Type{Val{(false, false)}}, width::Val{1}, ModifiedBetween::Val{(true, true)}, RT::Val{@NamedTuple{1, 2, 3}}, f::typeof(fieldnames), df::Nothing, primal_1::Type{FieldBoundaryConditions}, shadow_1_1::Nothing); @ Enzyme.Compiler ~/.julia-16536/packages/Enzyme/aEyGD/src/rules/jitrules.jl:313; --- the last 6 lines are repeated 7889 more times ---; [47343] boundary_conditions; @ /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-9/clima/oceananigans/src/Fields/field.jl:357 [inlined]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2254226935:7,test,tests,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2254226935,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,EnzymeCore v0.6.5; [460bff9d] ExceptionUnwrapping v0.1.10; [e2ba6199] ExprTools v0.1.10; [c87230d0] FFMPEG v0.4.1; [7a1cc6ca] FFTW v1.8.0; [5789e2e9] FileIO v1.16.2; [53c48c17] FixedPointNumbers v0.8.4; [1fa38f19] Format v1.3.6; [0c68f7d7] GPUArrays v10.0.2; [46192b85] GPUArraysCore v0.1.6; ⌅ [61eb1bfa] GPUCompiler v0.25.0; [28b8d3ca] GR v0.73.3; [c27321d9] Glob v1.3.1; [42e2da0e] Grisu v1.0.2; [cd3eb016] HTTP v1.10.3; [615f187c] IfElse v0.1.1; [40713840] IncompleteLU v0.2.1; [842dd82b] InlineStrings v1.4.0; [41ab1584] InvertedIndices v1.3.0; [92d709cd] IrrationalConstants v0.2.2; [42fd0dbc] IterativeSolvers v0.9.4; [82899510] IteratorInterfaceExtensions v1.0.0; [033835bb] JLD2 v0.4.46; [1019f520] JLFzf v0.1.7; [692b3bcd] JLLWrappers v1.5.0; [682c06a0] JSON v0.21.4; [0f8b85d8] JSON3 v1.14.0; [63c18a36] KernelAbstractions v0.9.18; [929cbde3] LLVM v6.6.0; [8b046642] LLVMLoopInfo v1.0.0; [8ac3fa9e] LRUCache v1.6.1; [b964fa9f] LaTeXStrings v1.3.1; [23fbe1c1] Latexify v0.16.2; [2ab3a3ac] LogExpFunctions v0.3.27; [e6f89c97] LoggingExtras v1.0.3; [da04e1cc] MPI v0.20.19; [3da0fdf6] MPIPreferences v0.1.10; [1914dd2f] MacroTools v0.5.13; [739be429] MbedTLS v1.1.9; [442fdcdd] Measures v0.3.2; [e1d29d7a] Missings v1.1.0; [78c3b35d] Mocking v0.7.7; [85f8d34a] NCDatasets v0.14.3; [5da4648a] NVTX v0.3.4; [77ba4419] NaNMath v1.0.2; [d8793406] ObjectFile v0.4.1; [9e8cae18] Oceananigans v0.90.11 `~/Research/OC11.jl`; [6fe1bfb0] OffsetArrays v1.13.0; [4d8831e6] OpenSSL v1.4.2; [bac558e1] OrderedCollections v1.6.3; [65ce6f38] PackageExtensionCompat v1.0.2; [69de0a69] Parsers v2.8.1; [0e08944d] PencilArrays v0.19.3; [4a48f351] PencilFFTs v0.15.1; [b98c9c47] Pipe v1.3.0; [eebad327] PkgVersion v0.3.3; [ccf2f8ad] PlotThemes v3.1.0; [995b91a9] PlotUtils v1.4.1; [91a5bcdd] Plots v1.40.2; [2dfb63ee] PooledArrays v1.4.3; ⌃ [aea7be01] PrecompileTools v1.2.0; [21216c6a] Preferences v1.4.3; [08abe8d2] PrettyTables v2.3.1; [49802e3a] ProgressBars v1.5.1; [94ee1d12] Quaternions v0.7.6; [74087812] R,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3511:4161,Log,LogExpFunctions,4161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3511,1,['Log'],['LogExpFunctions']
Testability,Error from benchmark/test distributed nonhydrostatic model scripts,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347:11,benchmark,benchmark,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Even a quick benchmark at the end of the test suite would be nice to uncover issues like #675 and #397 and keep the benchmark scripts up to date.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/684:13,benchmark,benchmark,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/684,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Everything looks good on the CPU but the GPU unit tests segfault when testing field setting (tried debugging but can't figure out why). All the other GPU tests pass although CI seems much slower for GPU tests (~3x slower?). Could be related to segfault in https://github.com/CliMA/ClimateMachine.jl/pull/2146 ? @charleskawczynski @jakebolewski were you able to figure out why it was segfaulting?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-809380865:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-809380865,4,['test'],"['testing', 'tests']"
Testability,"Everything useful that I have is probably in the draft PR #2275 and the associated branch! They aren't forcing functions, but we hard coded in some drag functions for the flux in the IB case that could be used, and the sandbox has the boundary condition versions of those same functions as a test. It wouldn't take much to turn them into divergences!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1099515153:219,sandbox,sandbox,219,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1099515153,2,"['sandbox', 'test']","['sandbox', 'test']"
Testability,Example or test: advection of a square or Gaussian,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/481:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/481,1,['test'],['test']
Testability,"Examples build again and don't NaN out so this was indeed the issue. I'll merge. Shallow water tests are failing because NaN checker, by default, checks for NaNs in `model.velocities.u` which `ShallowWaterModel` doesn't have. Default should probably be `fields(model)[1]`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1255#issuecomment-739537874:95,test,tests,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1255#issuecomment-739537874,1,['test'],['tests']
Testability,"Examples: more, better, tested",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/425:24,test,tested,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/425,1,['test'],['tested']
Testability,"Extended the type WENO5 to allow the execution of the WENO scheme on stretched and uniform grids alike. . In practice:. - `WENO5()` will default to the uniform 5th order coefficients (""uniform"" setting) in all directions with a JS-WENO formulation; - `WENO5(grid = grid)` will default to uniform interpolation coefficient if the direction is uniform (`typeof(Δc) <: Number`) and will precompute the ENO coefficients for reconstruction in the stretched directions (""stretched"" setting) (I have tested ""on the fly"" coefficient calculation for stretched directions and it is way too expensive! therefore, useless to keep as a possibility); - `WENO5(grid = grid, stretched_smoothness=true)` will compute coefficients for the smoothness indicators `β₀, β₁` and `β₂` to account for stretched grid; - `WENO5(zweno = true)` will implement a Z-WENO formulation for the weno weight calculation; - No support is given for `WENO5S(grid = grid)` for curvilinear grids for the moment (defaults to uniform setting). Comments:; Despite the fact that all methods have the same execution speed, `stretched_smoothness` requires more memory (and slightly more computation time) and is not much impactful. As such, most of the time it is better to use just the `WENO5(grid = grid)` keyword argument as it does not decrease accuracy but decreases memory utilization (and speed up slightly). (I haven't tried all types of grids, so maybe it is good to check before performing a large simulation on a weird stretched grid); On the other hand, a Z-WENO formulation is always beneficial (also in case of a uniform mesh) with no major decrease in performance. The same can be said for the stretched `WENO5(grid=grid)` formulation in case of stretched grids. `validation/advection/validate_weno_scheme.jl` compares all these methods in terms of time and accuracy on a simple 1D and 2D tracer advection simulations. Below some animations showing the performance of the three methods for a ""center coarsened"" grid type (`grid_str2`",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060:493,test,tested,493,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060,1,['test'],['tested']
Testability,"FFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CuArray{Complex{Float64},3},CuArray{Complex{Float64},3}}}},Nothing}, ::Int64; euler::Bool) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/TimeSteppers/adams_bashforth.jl:50; [29] time_step_with_parameterized_forcing(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:40; [30] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:137 [inlined]; [31] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [32] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:135 [inlined]; [33] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [34] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:124; ; NetCDF [GPU]: Error During Test at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:524; Got exception outside of a @test; MethodError: no method matching device(::CuContext); Closest candidates are:; device() at /home/ancellin/.julia/packages/CUDA/d6WNR/src/state.jl:225; Stacktrace:; [1] |>(::CuContext, ::typeof(CUDA.device)) at ./operators.jl:823; [2] versioninfo_with_gpu() at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/Utils/versioninfo.jl:9; [3] write_grid_and_attributes(::IncompressibleModel{Oceananigans.TimeSteppers.AdamsBashforthTimeStepper{Float64,NamedTuple{(:u, :v, :w, :T, :S),Tuple{Field{Face,Cell,Cell,OffsetArray{Float64,3,CuArray{Float64,3}},RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.Bo",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:76944,Test,Test,76944,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['Test'],['Test']
Testability,"FTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CuArray{Complex{Float64},3},CuArray{Complex{Float64},3}}}},Nothing}, ::Int64; euler::Bool) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/TimeSteppers/adams_bashforth.jl:50; [29] time_step_with_forcing_functions(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:21; [30] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:136 [inlined]; [31] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [32] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:135 [inlined]; [33] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [34] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:124; ; Forcing function time stepping [GPU]: Error During Test at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:137; Test threw exception; Expression: time_step_with_parameterized_forcing(arch); LLVM error: Cannot cast between two non-generic address spaces; Stacktrace:; [1] handle_error(::Cstring) at /home/ancellin/.julia/packages/LLVM/KITdB/src/core/context.jl:103; [2] macro expansion at /home/ancellin/.julia/packages/LLVM/KITdB/src/util.jl:114 [inlined]; [3] LLVMTargetMachineEmitToMemoryBuffer(::Ptr{LLVM.API.LLVMOpaqueTargetMachine}, ::Ptr{LLVM.API.LLVMOpaqueModule}, ::LLVM.API.LLVMCodeGenFileType, ::Base.RefValue{Cstring}, ::Base.RefValue{Ptr{LLVM.API.LLVMOpaqueMemoryBuffer}}) at /home/ancellin/.julia/packages/LLVM/KITdB/lib/libLLVM_h.jl:3512; [4] emit(::LLVM.TargetMachine, ::LLVM.Module, ::LLVM.API.LLVMCodeGenFileType) at /home/ancellin/.julia/packages/LLVM/KITdB/src/targetmachine.jl:42; [5] mcgen at /home/ancellin/.julia/packages/GPUCompiler/4e9CU/src/mcgen.jl:73 [inlined]; [6] macro expansion",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:38076,Test,Test,38076,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['Test'],['Test']
Testability,"FYI @francispoulin I fixed issues with syntax and the constructor, and found that now the Poisson solver tests legitimately fail for `VerticallyStretchedRectilinearGrid`. So the `FourierTridiagonalPoissonSolver` currently does not work with `Flat` dimensions. I think this is a low-priority issue so it may make sense to write a warning / error in the constructor for `FourierTridiagonalPoissonSolver` constructor and then remove the tests for it. However, I wanted to give you the chance to look into what changes might need to be made to get the FFT + tridiagonal solve working if x or y are `Flat` if you wanted to.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-820559470:105,test,tests,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-820559470,2,['test'],['tests']
Testability,"FYI the tests are failing only because somehow tests are getting a kill signal or the servers are being lost:. ![image](https://github.com/user-attachments/assets/d2bf8b55-72ba-4242-9b17-6bf8fb77d1c5). Maybe something's up with he servers? As far as I can tell, all tests are passing and this PR is ready for review.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2451696806:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2451696806,3,['test'],['tests']
Testability,"FYI, the GPU Enzyme tests probably fail, because GPU reverse-mode rules are not added to KA (forward mode, however exists).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3347#issuecomment-1765226078:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3347#issuecomment-1765226078,1,['test'],['tests']
Testability,"Few TODO:. 1. Add a minimal test (probably only need one or two to start, we can build the tests up gradually if this gets adopted); 2. Brainstorm how to use this with output writers (eg `JLD2OutputWriter(model, outputs; fuse_computations=true)`) or something like that. @simone-silvestri curious what you think",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3234#issuecomment-1694023822:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3234#issuecomment-1694023822,2,['test'],"['test', 'tests']"
Testability,"Field{Face,Center,Center,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Periodic,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},FieldSlicer{Colon,UnitRange{Int64},Colon},Int64},Array{Float64,2},FieldSlicer{Colon,Colon,Colon}}, ::String, ::Type{T} where T, ::Int64, ::Tuple{}, ::Dict{Any,Any}) at /home/tomas/repos2/Oceananigans.jl/sandbox/windowed_spatial_avg.jl:62; [3] NetCDFOutputWriter(::IncompressibleModel{Oceananigans.TimeSteppers.RungeKutta3TimeStepper{Float64,NamedTuple{(:u, :v, :w, :b),Tuple{Field{Face,Center,Center,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Periodic,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},Field{Center,Face,Center,OffsetArrays.OffsetArray{Float64",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-784288449:2635,sandbox,sandbox,2635,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-784288449,1,['sandbox'],['sandbox']
Testability,"Figures in ""Convergence test"" section of the docs are missing",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1212:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1212,1,['test'],['test']
Testability,"Finally all tests pass 🎉 Thanks @navidcy and @vchuravy for all your help!. @glwagner Let me know when it would be a good time to merge this PR and tag a new release. Ran the incompressible model benchmarks and in general it seems that with Julia 1.6 Oceananigans allocates more memory and is a bit slower on the CPU but a bit faster on the GPU. # Quick benchmark. ## Julia 1.6. ```; Oceananigans v0.57.2; Julia Version 1.6.1; Commit 6aaedecc44 (2021-04-23 05:59 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); GPU: TITAN V; ```. ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 4.996 ms │ 5.047 ms │ 5.113 ms │ 5.770 ms │ 1.77 MiB │ 2301 │ 10 │; │ CPU │ Float64 │ 64 │ 34.951 ms │ 35.967 ms │ 36.414 ms │ 41.417 ms │ 1.77 MiB │ 2301 │ 10 │; │ CPU │ Float64 │ 128 │ 301.074 ms │ 301.964 ms │ 302.498 ms │ 307.989 ms │ 1.77 MiB │ 2301 │ 10 │; │ CPU │ Float64 │ 256 │ 2.894 s │ 2.895 s │ 2.895 s │ 2.896 s │ 1.77 MiB │ 2301 │ 2 │; │ GPU │ Float64 │ 32 │ 2.859 ms │ 2.923 ms │ 3.025 ms │ 3.987 ms │ 2.80 MiB │ 6914 │ 10 │; │ GPU │ Float64 │ 64 │ 2.912 ms │ 3.101 ms │ 3.308 ms │ 5.368 ms │ 2.78 MiB │ 6993 │ 10 │; │ GPU │ Float64 │ 128 │ 4.894 ms │ 5.019 ms │ 5.360 ms │ 8.565 ms │ 2.80 MiB │ 8667 │ 10 │; │ GPU │ Float64 │ 256 │ 33.569 ms │ 36.266 ms │ 36.029 ms │ 36.883 ms │ 3.24 MiB │ 37307 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴──────────┴────────┴─────────┘; ```. ## Julia 1.5. ```; Oceananigans v0.57.2; Julia Version 1.5.2; Commit 539f3ce943 (2020-09-23 23",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-843636118:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-843636118,4,"['benchmark', 'test']","['benchmark', 'benchmarks', 'tests']"
Testability,Finally found the correct settings after discussing with @ali-ramadhan ; Added test for `Nx != Ny` I'll merge when tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2079#issuecomment-978075603:79,test,test,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2079#issuecomment-978075603,2,['test'],"['test', 'tests']"
Testability,Finally got the tests passing! It was something having to do with GPUCompiler.jl. This is ready to merge/review.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1418060389:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1418060389,1,['test'],['tests']
Testability,"Finally, here is an animation with `Bounded` in the `x` direction. The good news is that it's numerically stable. However, I have been plotting the pertubations and the fields look very different because the solid walls force the total velocity in `x` to go to zero. https://user-images.githubusercontent.com/8239041/114077635-04dbab00-9876-11eb-91d2-0e2981cfd883.mp4. @glwagner : how easy/difficult will it be to test the Poisson solvers for `Flat`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-816041541:414,test,test,414,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-816041541,1,['test'],['test']
Testability,"Finally, this works. It would need approval to get the tests back online.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3880#issuecomment-2459499172:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3880#issuecomment-2459499172,1,['test'],['tests']
Testability,"First, I think it would be great to have multi-order `WENO` advection, if it's not too difficult. Second, you can see an older version of the plot [here](https://github.com/CliMA/Oceananigans.jl/pull/1648). Since then we've added first order upwinding. I haven't tried running this for a while and hope it works but I guess I should try it and find out. I should point out that this script uses `ShallowWaterModel`. It is easy enough to change it for another of the two models, but I did see some odd behaviour. For `ShallowWaterModel` we have that the error goes down to 1e-14, basically machine precision and the slopes are what we should expect. When I tried this for `NonhydrostaticModel`, I found that the error didn't get any better than 1e-11 or so. I looked into this but never figured out why. The major difference between the two models is that `ShallowWater` does no thave a pressure solve, so I suspect that might be part of the problem. In the end I decided that the latter was probably the best way to test pure advection. But in retrospect, if we used `PrescribedVelocity`, then the pressure solve would not be a factor, and things should work out nicely.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-969007656:1016,test,test,1016,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-969007656,1,['test'],['test']
Testability,Fix and test `RoquetIdealizedNonlinearEquationOfState`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/574:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/574,1,['test'],['test']
Testability,Fix diagnostics test problem size,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/379:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/379,1,['test'],['test']
Testability,Fix example test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/424:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/424,1,['test'],['test']
Testability,Fix field `norm` tests for `p=Inf`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1559:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1559,1,['test'],['tests']
Testability,Fix matrix solver test take 2,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2572:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2572,1,['test'],['test']
Testability,Fix performance benchmarks dead link in README,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/822:16,benchmark,benchmarks,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/822,1,['benchmark'],['benchmarks']
Testability,Fix shallow water model time step benchmark,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1511:34,benchmark,benchmark,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1511,1,['benchmark'],['benchmark']
Testability,Fix test for implicit free surface with `ImmersedBoundary` and indexed `ReducedField`s,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2723:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2723,1,['test'],['test']
Testability,Fix triply periodic pressure solver and add/cleanup some tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/834:57,test,tests,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/834,1,['test'],['tests']
Testability,Fixes CATKE-in-a-tuple implementation and adds tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2225:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2225,1,['test'],['tests']
Testability,Fixes `FreeSurface` constructor for `SingleColumnGrid` and adds a test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2196:66,test,test,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2196,1,['test'],['test']
Testability,Fixes and tests `Field(u::Field; indices)` and `Field(u::AbstractOperation; indices)`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2392:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2392,1,['test'],['tests']
Testability,Fixes implicit free surface solver comparison test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131:46,test,test,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131,1,['test'],['test']
Testability,Fixes tests with AveragedField and BuoyancyField,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1020:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1020,1,['test'],['tests']
Testability,Fixing tendencies in shallow water model and bringing back regression tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3486:70,test,tests,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3486,1,['test'],['tests']
Testability,Flat VerticallyStretchedRectilinearGrid plus new hydrostatic and flat internal wave tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1865:84,test,tests,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1865,1,['test'],['tests']
Testability,"Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},Int64,typeof(identity),typeof(identity),typeof(identity),RegularRectilinearGrid{Float64,Periodic,Periodic,Periodic,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},FieldSlicer{Colon,UnitRange{Int64},Colon},Tuple{Int64,Int64}}}}; filepath::String, schedule::AveragedTimeInterval, array_type::Type{T} where T, field_slicer::FieldSlicer{Colon,Colon,Colon}, global_attributes::Dict{Any,Any}, output_attributes::Dict{Any,Any}, dimensions::Dict{Any,Any}, mode::String, compression::Int64, verbose::Bool) at /home/tomas/repos2/Oceananigans.jl/src/OutputWriters/netcdf_output_writer.jl:340; [4] top-level scope at /home/tomas/repos2/Oceananigans.jl/sandbox/windowed_spatial_avg.jl:88; [5] include(::String) at ./client.jl:457; [6] top-level scope at REPL[1]:1; ```. I'm not really sure how to fix this one...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-784246056:14990,sandbox,sandbox,14990,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-784246056,1,['sandbox'],['sandbox']
Testability,"Float64},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CuArray{Complex{Float64},3},CuArray{Complex{Float64},3}}}},Nothing}, ::Int64; euler::Bool) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/TimeSteppers/adams_bashforth.jl:50; [29] time_step_with_parameterized_forcing(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:40; [30] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:137 [inlined]; [31] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [32] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:135 [inlined]; [33] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [34] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:124; ; NetCDF [GPU]: Error During Test at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:524; Got exception outside of a @test; MethodError: no method matching device(::CuContext); Closest candidates are:; device() at /home/ancellin/.julia/packages/CUDA/d6WNR/src/state.jl:225; Stacktrace:; [1] |>(::CuContext, ::typeof(CUDA.device)) at ./operators.jl:823; [2] versioninfo_with_gpu() at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/Utils/versioninfo.jl:9; [3] write_grid_and_attributes(::IncompressibleModel{Oceananigans.TimeSteppers.AdamsBashforthTimeStepper{Float64,NamedTuple{(:u, :v, :w, :T, :S),Tuple{Field{Face,Cell,Cell,OffsetArray{Float64,3,CuArray{Float64,3}},RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryCondi",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:76888,test,test,76888,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,Follow up from https://github.com/CliMA/Oceananigans.jl/pull/3173. `update_biogeochemical_state!` was being tested but only failing on a grid type that previously wasn't being tested so added tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179:108,test,tested,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179,3,['test'],"['tested', 'tests']"
Testability,"Following https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2445532635 this PR now just changes how grid coordinate ranges are constructed. Curious to see if any tests fail. But locally it fixed CATKE + `Float32`. @glwagner I ended up doing this if it looks okay:. ```julia; κu★ = min(κu, κu_max); FT = eltype(grid); return κu★::FT; ```. I assume there's a small cost associated with the type annotation `::FT`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445542668:178,test,tests,178,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445542668,1,['test'],['tests']
Testability,Following the discussion on testing infrastructure from a long time ago (PR #139) it would be good to convert any verification tests that result from #346 into an actual end-to-end test of the model. Not sure how the comparison with MITgcm would be implemented but maybe the others are good enough. `test/verification/` might be a good directory for them?. They can be run separately (separate pipeline) so they don't have to run quickly and can take a while so they can be comprehensive.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/347:28,test,testing,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/347,4,['test'],"['test', 'testing', 'tests']"
Testability,Following the reversal of the k index (PR #462) we need to regenerate all regression test data to correspond to the new convention. This PR does that. Had to update some of the tests as the output data format has changed (e.g. now has halos) and was originally generated a long time ago. I also increased code reuse among the regression tests for summarizing the result of each regression test. This PR is part of #471,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/526:85,test,test,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/526,4,['test'],"['test', 'tests']"
Testability,"Following up on @glwagner 's suggestion in #1532, here is a slight modification to `VerticallyStretchedGrid`, which is consistent with what I'm proposing in that other PR. I actually made a few changes here than I needed to, but these changes are cosmetic and have no impact on functionality. . There are two significant differences. . 1. Like the other grids, we now specify `x,y,z` when defining the grid. We can also add `extent` if people wanted, but it's not in place now.; 2. What is called `zF_generator` in `master`, is now passed as a separate argument. I also changed the name to `z_stetch` since this is what @tomchor used in his example and stretch seems more appropriate than generator. Again, this is easily changed. The grid tests all pass and not sure why other tests seem to fail. What do people think about this difference?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1544:740,test,tests,740,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1544,2,['test'],['tests']
Testability,"Following what seems to be the convention, e.g. `test/test_grids.jl` should probably just be called `test/grids.jl`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/871:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/871,2,['test'],['test']
Testability,For MPI I ran it on up to 128 Intel(R) Xeon(R) CPU E5-2683 v4 @ 2.10GHz CPUs with efficiencies at around 80%. I think I have some results for MPI weak and strong scaling benchmarks posted here at the bottom #1722.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880842022:170,benchmark,benchmarks,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880842022,1,['benchmark'],['benchmarks']
Testability,"For complicated models and examples, user-defined forcing functions can impose significant penalties on simulation performance. In addition to that, models with extensive and complicated diagnostics (especially those involving time-averaging) can further slow down time-to-science. It thus might be useful to provide some utilities that make benchmarking forcing functions, boundary condition functions, and diagnostics a bit easier. For forcing functions, I think a utility that benchmarks time-stepping for two models that are identical except for forcing might be useful. Something along the lines of. ```julia; function benchmark_user_forcing(model); ; # Build a ""forcingless_model"" that's identical to model, but with no forcing functions; model_property_names = propertynames(model); forcingless_model_properties = Dict{Any, Any}(name => getproperty(model, name) for name in model_property_names); forcingless_model_properties[:forcing] = NamedTuple{}() # default; ModelConstructor = typeof(model).name.wrapper # or whatever this needs to be; forcingless_model = ModelConstructor(Tuple(forcingless_model_properties[name] for name in model_property_names)...). @info ""Benchmarking model with user forcing...""; @btime time_step!(model, 1). @info ""Benchmarking model without user forcing...""; @btime time_step!(forcingless_model, 1). return nothing; end; ```. might work for forcing functions. For boundary conditions, we have to build default boundary conditions manually and use the model's outer constructor (to avoid excess memory allocation), which is slightly more annoying, but should be supported by at least the nonhydrostatic and hydrostatic model constructors. For output I think we want to benchmark `fetch_output`:. https://github.com/CliMA/Oceananigans.jl/blob/051e03ecfcb0c00e0c6ed4dd2808148e700d0342/src/OutputWriters/fetch_output.jl#L17-L18. Worth noting that fetching is actually already timed by `JLD2OutputWriter` with `verbose=true`:. https://github.com/CliMA/Oceananigans.jl/b",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1918:342,benchmark,benchmarking,342,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1918,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"For example for the tripolar grid it looks like this. ```julia; 2160×1080×60 OrthogonalSphericalShellGrid{Float64, Periodic, RightConnected, Bounded} on GPU with 7×7×7 halo and with precomputed metrics; ├── centered at (λ, φ) = (75.0, 1.8005); ├── longitude: Periodic extent 360.167 degrees variably spaced with min(Δλ)=0.000208433, max(Δλ)=0.175625; ├── latitude: RightConnected extent 170.157 degrees variably spaced with min(Δφ)=0.000312453, max(Δφ)=0.157553; └── z: Bounded z ∈ [-6000.0, 0.0] variably spaced with min(Δz)=5.24961, max(Δz)=438.409; ```. This claims that whatever grid I've constructed is ""RightConnected"" in latitude. This doesn't really make sense to me... but let's set that aside (it's a separate issue with the tripolar grid). The bigger issue is that the y-topology is NOT the ""latitude topology"" --- on an orthogonal spherical shell grid, ""y"" and ""latitude"" are different (that's the whole point, when they do coincide we are on a LatitudeLongitudeGrid). We should design a good show method for this grid type. My impression is that the show method was copied from LatitudeLongitudeGrid. But we need to work a bit harder for OrthogonalSphericalShellGrid because it is more general. I think we should give information both about the coordinate system (lat, lon, z), and in addition to that and separately, give information about the logical arrangement of the grid (x, y, z), including the topology. The former is important for understanding the geography of the grid and the latter is important for understanding the discretization, and the two are distinct from one another. So the show method for this grid is going to be more involved than the others. I don't think we need to indicate whether the x, y directions are ""variably spaced"". That is useful for rectilinear and lat-lon grids, but not for general grids. . cc @navidcy @simone-silvestri",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3808:1358,log,logical,1358,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3808,1,['log'],['logical']
Testability,"For example:. ```julia; using Oceananigans; grid = RectilinearGrid(size=(3, 3, 3), extent=(1, 1, 1)); model = NonhydrostaticModel(; grid); simulation = Simulation(model; Δt=1.0, stop_iteration=3); simulation.output_writers[:jld2] =; JLD2OutputWriter(model, model.velocities, schedule=IterationInterval(1), indices=(:, 2, :), prefix=""test"", force=true); run!(simulation); wt = FieldTimeSeries(""test.jld2"", ""w""); # colon very important; ```. then. ```julia; julia> maximum(wt); ERROR: BoundsError: attempt to access 3×1×4×4 OffsetArray(::Array{Float64, 4}, 1:3, 2:2, 1:4, 1:4) with eltype Float64 with indices 1:3×2:2×1:4×1:4 at index [1, 1, 1, 1]; ```. well!. This affects `@show wt` since this attempts to compute statistics for a ""data summary"":. ```julia; julia> wt; Error showing value of type FieldTimeSeries{Center, Center, Face, InMemory, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, OffsetArrays.OffsetArray{Float64, 4, Array{Float64, 4}}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Vector{Float64}}:; ERROR: BoundsError: attempt to access 3×1×4×4 OffsetArray(::Arr",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2424:333,test,test,333,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2424,2,['test'],['test']
Testability,For example:; https://buildkite.com/clima/oceananigans/builds/17468#0191fc2c-b421-4cf7-80b5-0429336b1d7f; https://buildkite.com/clima/oceananigans/builds/17473#0191fd88-d8b9-48d5-9c7f-18efc6747ea7; I believe this is because we are launching the docs from many different branches on a relatively small GPU. I think it would be best to move this test on the caltech cluster. Since the caltech cluster works with a slurm scheduler this error would never happen (I can open a PR to fix this),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3779:344,test,test,344,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3779,1,['test'],['test']
Testability,"For now the 10 tests affected by this are skipped with `@test_skip` and will show up as ""Broken"". Maybe we just have to define `convert` for Fields with OffsetArrays?. ```; Testing checkpointing...; WARNING: Forcing functions will not be serialized!; [Checkpointer] Serializing model to disk: ./test_model_checkpoint_0.jld; [Checkpointer] Reconstructing FFT plans...; WARNING: Forcing functions will not be serialized!; [Checkpointer] Serializing model to disk: ./test_model_checkpoint_5.jld; [Checkpointer] Reconstructing FFT plans...; Deserializing model from disk: test_model_checkpoint_5.jld; ┌ Warning: type Oceananigans.FaceFieldX{OffsetArrays.OffsetArray{Core.Float64,3,Core.Array{Core.Float64,3}},Oceananigans.RegularCartesianGrid{Core.Float64,Base.StepRangeLen{Core.Float64,Base.TwicePrecision{Core.Float64},Base.TwicePrecision{Core.Float64}}}} not present in workspace; reconstructing; └ @ JLD ~/.julia/packages/JLD/1BoSz/src/jld_types.jl:703; ┌ Warning: type OffsetArrays.OffsetArray{Core.Float64,3,Core.Array{Core.Float64,3}} not present in workspace; reconstructing; └ @ JLD ~/.julia/packages/JLD/1BoSz/src/jld_types.jl:703; Checkpointing: Error During Test at /home/alir/Oceananigans.jl/test/runtests.jl:293; Got exception outside of a @test; MethodError: Cannot `convert` an object of type getfield(JLD, Symbol(""##Oceananigans.FaceFieldX{OffsetArrays.OffsetArray{Core.Float64,3,Core.Array{Core.Float64,3}},Oceananigans.RegularCartesianGrid{Core.Float64,Base.StepRangeLen{Core.Float64,Base.TwicePrecision{Core.Float64},Base.TwicePrecision{Core.Float64}}}}#384"")) to an object of type FaceFieldX; Closest candidates are:; convert(::Type{T}, !Matched::T) where T at essentials.jl:154; Stacktrace:; [1] jlconvert(::Type{VelocityFields}, ::JLD.JldFile, ::Ptr{UInt8}) at /home/alir/.julia/packages/JLD/1BoSz/src/jld_types.jl:434; [2] read_scalar(::JLD.JldDataset, ::HDF5.HDF5Datatype, ::Type) at /home/alir/.julia/packages/JLD/1BoSz/src/JLD.jl:398; [3] read(::JLD.JldDataset) at /home/alir/.j",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/177:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/177,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"For now this PR just adds a function `convective_adjustment!(model, Δt, K)` that performs a convective adjustment step on a model. . I believe this results in an operator splitting method for treating vertically implicit diffusion using backward Euler. ## TODO. If this seems like an appropriate method for implementing vertically implicit diffusion, I'd suggest the following steps for turning this PR into something that can be merged:; 1. Define a new closure; ```julia; 	struct ConvectiveAdjustment{K, ∂}; 	 κ :: K; 	∂b∂z :: ∂; 		...; 	end; ```; 2. Maybe `ConvectiveAdjustment` should act on a `BuoyancyField`?; 3. Refactor `convective_adjustment!` to use the `BatchedTridiagonalSolver`.; 4. Add a free convection test to test that using `ConvectiveAdjustment` on a linearly stratified column model results in a mixed layer with ∂b/∂z ≈ 0 (could also test for the mixed layer depth). `ConvectiveAdjustment` could then be used as part of a tuple of turbulence closures, e.g. ```julia; closure = (IsotropicDiffusivity(κ=1e-4), ConvectiveAdjustment(κv=10)); ```. ## Future plans?. Vertically implicit diffusion with the `BatchedTridiagonalSolver` could then be abstracted to support other parameterizations such as `OceanTurb.KPP` and `OceanTurb.TKEMassFlux`. I think @glwagner envisioned a more general way of time-stepping implicit terms in general, i.e. adding IMEX time-steppers I think?. ## Note on user interface. Right now the user must manually call `convective_adjustment!` inside the `simulation.progress` callback so it's very awkward to use, but it should be usable if we need it. Ideally `convective_adjustment!` would be called at the end of each time step, perhaps by `time_step!` or by a simulation callback. The second approach would require resolving #1138.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1342:718,test,test,718,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1342,3,['test'],['test']
Testability,"For reference, with the same sized grid but regularly spaced the same benchmark gives this:; ```bash; BenchmarkTools.Trial: 10000 samples with 916 evaluations.; Range (min … max): 116.721 ns … 6.288 μs ┊ GC (min … max): 0.00% … 0.00%; Time (median): 123.181 ns ┊ GC (median): 0.00%; Time (mean ± σ): 131.844 ns ± 171.767 ns ┊ GC (mean ± σ): 2.51% ± 2.39%. █ ; ▄▃▃▃▃▃█▅▄▅▇▇▄▃▃▃▃▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▁▁▂▂▂▁▂▂▂▂ ▂; 117 ns Histogram: frequency by time 165 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365912859:70,benchmark,benchmark,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365912859,2,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"For small scale testing we could use JuliaGPUs buildkite. On Wed, Sep 4, 2024 at 12:32 PM Simone Silvestri ***@***.***>; wrote:. > Right, I think the problem is the availability of AMD GPUs to run tests.; > If we find one, I can revamp this.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328512985>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AABDO2XVCEUJNTZHWDD36KDZU3OVLAVCNFSM6AAAAABDHAZB6GVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGMRYGUYTEOJYGU>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328706255:16,test,testing,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328706255,2,['test'],"['testing', 'tests']"
Testability,"For some reason when I tested the code after merging https://github.com/CliMA/Oceananigans.jl/pull/2028 it didn't really work on my main code for GPUs. . It worked for a MWE when I tested it [here](https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-952089949) but I guess I must have done something wrong? In any case, I apologize!. I also expanded the test to test grids on GPUs (which would have caught this error) so I think this'll help. Given that we _just_ released a new version, I didn't bump this to 0.63.4 here. But let me know if I should do that. CC: @navidcy",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2030:23,test,tested,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2030,4,['test'],"['test', 'tested']"
Testability,For sure because there are no regression tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1498244806:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1498244806,1,['test'],['tests']
Testability,For sure. The trick about the global environment is just Julia knowledge. But it is relevant to efficient workflows for testing so we can indeed put it there. Personally I don't test just one file unless I am debugging major refactors but perhaps others do it differently...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000034395:120,test,testing,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000034395,2,['test'],"['test', 'testing']"
Testability,"For the GPU case, again for 128x128 (still rather coarse and results will depend on resolution I suspect). ```; scheme ratio; ====== ===; C2 1.2; U3 1.5; C4 2.4; U5 1.5; W5 7.0. ```. In general the scalings tend to be better on GPUs vs CPUs (on this coarse grid). It does seem that `WENO5` does much worst, relatively speaking. . Benchmarks that I did with @ali-ramadhan found that on GPUs vs CPUs, shallow water model could be faster by a factor of `170`, which was for `U5`. With `WENO5` it was double that. I guess the moral of the story is that `WENO5` is very different and sometimes much better and sometimes much worst. I should say that the difference from the first run to the second sometimes differed by a factor of `10`!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1564#issuecomment-816776677:330,Benchmark,Benchmarks,330,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1564#issuecomment-816776677,1,['Benchmark'],['Benchmarks']
Testability,Found out int PR #336 that we can explicitly time-step w which will be nice as it'll work for simulations without a rigid lid. All tests passed when I made the change so should be a quick change.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/338:131,test,tests,131,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/338,1,['test'],['tests']
Testability,Free convection test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/123:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/123,1,['test'],['test']
Testability,"From a MWE similar to the one in #3899 (adding some more reduced directions):; ```julia; using Oceananigans; using GLMakie. grid = RectilinearGrid(size = (10, 10, 10), extent = (10, 10, 10)); bottom(x, y) = - rand() * 5 # Between -5 and 0; grid = ImmersedBoundaryGrid(grid, GridFittedBottom(bottom)). f1 = Field{Center, Center, Nothing}(grid); f2 = Field{Center, Nothing, Center}(grid); f3 = Field{Nothing, Center, Center}(grid); set!(f1, (x, y) -> rand()); set!(f2, (x, y) -> rand()); set!(f3, (x, y) -> rand()). fig = Figure(); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[1, 2]); ax3 = Axis(fig[1, 3]); heatmap!(ax1, f1); heatmap!(ax2, f2); heatmap!(ax3, f3); ```; <img width=""1174"" alt=""Screenshot 2024-11-05 at 12 26 38 PM"" src=""https://github.com/user-attachments/assets/fc22559f-2615-4e3e-b687-52f40ac5cd4e"">. Should we add some tests?. closes #3899",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3900:829,test,tests,829,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3900,1,['test'],['tests']
Testability,"From call with @glwagner: We should properly test that the pressure projection step produces an incompressible flow field (without computing w from continuity). Right now the `incompressible_in_time` test found in `test_time_stepping.jl` tests for incompressibility after `time_step!` is done and w has been recomputed from w. Interestingly, the sum accumulated in time while the sum of the absolute values does not:. ```; [04/03/2020 13:57:51] Velocity divergence after 1 time steps [CPU, Float64]: min=-6.037244272213971e-19, max=-6.037244272213971e-19, sum=-1.9275293505266353e-22, abs_sum=1.284399769586337e-16 --- Info /home/travis/build/climate-machine/Oceananigans.jl/test/test_time_stepping.jl:106; [04/03/2020 13:57:52] Velocity divergence after 10 time steps [CPU, Float64]: min=-7.735240399597831e-19, max=-7.735240399597831e-19, sum=1.666113807244092e-21, abs_sum=1.5625275138570133e-16 --- Info /home/travis/build/climate-machine/Oceananigans.jl/test/test_time_stepping.jl:106; [04/03/2020 13:58:06] Velocity divergence after 100 time steps [CPU, Float64]: min=-6.005395833397209e-19, max=-6.005395833397209e-19, sum=8.58925289833789e-20, abs_sum=2.661629631159426e-16 --- Info /home/travis/build/climate-machine/Oceananigans.jl/test/test_time_stepping.jl:106; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/673:45,test,test,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/673,6,['test'],"['test', 'tests']"
Testability,"From https://github.com/CliMA/Oceananigans.jl/blob/glw/computed-field-diffusivities/test/test_turbulence_closures.jl, it would be nice to have this feature in the main branch. In particular, it would allow for users to implement their own turbulence closures or mimic the effect of no flux boundary conditions on an immersed boundary",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1327:84,test,test,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1327,1,['test'],['test']
Testability,"From looking at the old Travis build log: https://travis-ci.com/github/CliMA/Oceananigans.jl/jobs/281310734. Looks like there's a pressure solver for vertically stretched grids that passes tests. And the regression tests were run on vertically stretched grids with constant grid spacings but they all fail since things blow up, e.g. ```; Testing vertically stretched grid with constant spacing [CPU] --- [29/01/2020 05:18:34] Info /home/travis/build/climate-machine/Oceananigans.jl/test/regression_tests/test_regression.jl:50; Δu: min=-3.8942e+65, max=3.88975e+65, mean=5.8421e+45, absmean=7.84018e+62, std=1.04702e+64; --- [29/01/2020 05:18:49] Info /home/travis/build/climate-machine/Oceananigans.jl/test/regression_tests/test_regression.jl:11; Δv: min=-3.8942e+65, max=3.88975e+65, mean=-7.77899e+46, absmean=7.84018e+62, std=1.04702e+64; --- [29/01/2020 05:18:49] Info /home/travis/build/climate-machine/Oceananigans.jl/test/regression_tests/test_regression.jl:11; Δw: min=-7.38289e+65, max=1.69765e+65, mean=4.87564e+46, absmean=7.48473e+62, std=1.3285e+64; --- [29/01/2020 05:18:49] Info /home/travis/build/climate-machine/Oceananigans.jl/test/regression_tests/test_regression.jl:11; ΔT: min=-4.52731e+63, max=1.7358e+64, mean=-1.98187e+45, absmean=2.06322e+61, std=3.64177e+62; --- [29/01/2020 05:18:49] Info /home/travis/build/climate-machine/Oceananigans.jl/test/regression_tests/test_regression.jl:11; ΔS: min=-1.60869e+64, max=6.16781e+64, mean=2.97753e+44, absmean=7.33104e+61, std=1.29403e+63; ```. Seems like a good place to start.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1332#issuecomment-771942522:37,log,log,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1332#issuecomment-771942522,9,"['Test', 'log', 'test']","['Testing', 'log', 'test', 'tests']"
Testability,From the [log](https://buildkite.com/clima/oceananigans/builds/3685#e88e73f9-20e6-43c6-8c05-64c492318d38) I see that the DOCUMENTER_KEY is OK! But I think the first commit doesn't generate the preview (this was already the case previously when things were working). I pushed again something nothing really to see what happens!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1940#issuecomment-901439660:10,log,log,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1940#issuecomment-901439660,1,['log'],['log']
Testability,From the test log; ```; WARNING: using CUDAdrv.device in module TimeSteppers conflicts with an existing identifier.; ```. Was also responsible for test failures on PR #559. Another reason to prefer `import` over `using`.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/563:9,test,test,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/563,3,"['log', 'test']","['log', 'test']"
Testability,Further increase tolerance in implicit free surface solver tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1689:59,test,tests,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1689,1,['test'],['tests']
Testability,Further system testing and checking for float precision issues.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/168:15,test,testing,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/168,1,['test'],['testing']
Testability,Future work on the particles module is also to write some tests for immersed boundary particle tracking,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2684#issuecomment-1198677572:58,test,tests,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2684#issuecomment-1198677572,1,['test'],['tests']
Testability,"Fw_func#85"",NamedTuple{(:τ,),Tuple{Int64}}},typeof(Oceananigans.Forcing.zeroforcing),typeof(Oceananigans.Forcing.zeroforcing)}},CenteredSecondOrder,PressureSolver{Oceananigans.Solvers.HorizontallyPeriodic,GPU,NamedTuple{(:kx², :ky², :kz²),Tuple{CuArray{Float64,3},CuArray{Float64,3},CuArray{Float64,3}}},CuArray{Complex{Float64},3},NamedTuple{(:FFTxy!, :FFTz!, :IFFTxy!, :IFFTz!),Tuple{CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CuArray{Complex{Float64},3},CuArray{Complex{Float64},3}}}},Nothing}, ::Int64; euler::Bool) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/TimeSteppers/adams_bashforth.jl:50; [29] time_step_with_parameterized_forcing(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:40; [30] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:137 [inlined]; [31] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [32] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:135 [inlined]; [33] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [34] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:124; ; NetCDF [GPU]: Error During Test at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:524; Got exception outside of a @test; MethodError: no method matching device(::CuContext); Closest candidates are:; device() at /home/ancellin/.julia/packages/CUDA/d6WNR/src/state.jl:225; Stacktrace:; [1] |>(::CuContext, ::typeof(CUDA.device)) at ./operators.jl:823; [2] ver",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:76312,test,test,76312,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,GPU CI is actually running tests on the CPU,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1794:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1794,1,['test'],['tests']
Testability,GPU Poisson solver tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/200:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/200,1,['test'],['tests']
Testability,GPU simulations tests fail?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1992:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1992,1,['test'],['tests']
Testability,GPU tests are failing because of an issue with CUDA drivers on sverdrup but hopefully these will be resolved by tomorrow morning.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-854172866:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-854172866,1,['test'],['tests']
Testability,"GPU tests fail as expected!. ```. [2021/04/08 16:37:27.123] INFO Testing (Flat, Bounded, Bounded) topology on square grids [GPU]...; --;   | Divergence-free solution [GPU]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-8/clima/oceananigans/test/test_poisson_solvers.jl:233;   | Expression: divergence_free_poisson_solution(arch, grid);   | Stacktrace:;   | [1] top-level scope at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-8/clima/oceananigans/test/test_poisson_solvers.jl:233;   | [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119;   | [3] top-level scope at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-8/clima/oceananigans/test/test_poisson_solvers.jl:213;   | [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119;   | [5] top-level scope at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-8/clima/oceananigans/test/test_poisson_solvers.jl:184. ```. Now to try a fix...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-816242909:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-816242909,11,"['Test', 'test']","['Test', 'Testing', 'test', 'tests']"
Testability,GPU tests take way too long,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2139:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2139,1,['test'],['tests']
Testability,GPU timestep tests are taking too long,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2325:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2325,1,['test'],['tests']
Testability,"GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:29; [6] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:526 [inlined]; [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [8] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:525 [inlined]; [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [10] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:521; [11] include(::String) at ./client.jl:439; [12] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:94; [13] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [14] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:76; [15] include(::String) at ./client.jl:439; [16] top-level scope at none:6; [17] eval(::Module, ::Any) at ./boot.jl:331; [18] exec_options(::Base.JLOptions) at ./client.jl:264; [19] _start() at ./client.jl:484; ; i: 0001, t: 1.000 s, Δt: 1.100 s, wmax = 2.7e-04 ms⁻¹, wall time: 18.164 s; progress: 0.0 %, i: 0001, t: 1.000 s, Δt: 1.100 s, wall time: 11.110 s; N² = ((Rᵈ * f) / Lz) ^ 2 = 0.0004; α = sqrt(N²) / (f * σᵇ) = 0.02314814814814815; i: 0010, t: 3.667 min, Δt: 22.000 s, umax = (2.4e-01, 2.3e-01, 1.9e-05) ms⁻¹, wall time: 12.877 s; Simulating stratified plane Couette flow. N : 16, 16, 8; L : 12.6, 6.28, 2; Re : 4250.000; Ri : 0.010; Pr : 0.700; ν : 0.000235; κ : 0.000336; U_wall : 1.000; Θ_wall : 0.010. [1000.00%] i: 1, t: 1.00e-04, umax: (1.59e+00, 3.11e-01, 3.85e-01), CFL: 2.03e-04, νκmax: (9.98e-02, 9.97e-02), νκCFL: (1.60e-04, 1.60e-04), next Δt: 1.00e-04, wall time: 82.994 ms; Running static ocean benchmark: 16× 16× 16 [CPU, Float32]...; Running s",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:102763,test,test,102763,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,"GPUs.; 23 closures = [IsotropicDiffusivity, AnisotropicDiffusivity, SmagorinskyLilly,; 24 	 VerstappenAnisotropicMinimumDissipation]; 25 ; 26 #####; 27 ##### Run benchmarks; 28 #####; 29 ; 30 for arch in archs, FT in float_types, N in Ns, Closure in closures; 31 	grid = RegularCartesianGrid(FT, size=N, extent=(1, 1, 1)); 32 model = IncompressibleModel(architecture=arch, float_type=FT, grid=grid, closure=Closure(FT)); 33 ; 34 time_step!(model, 1) # precompile; 35 ; 36 bn = benchmark_name(N, string(Closure), arch, FT); 37 @printf(""Running benchmark: %s...\n"", bn); 38 for i in 1:Nt; 39 @timeit timer bn time_step!(model, 1); 40 end; 41 end; 42 ; 43 #####; 44 ##### Print benchmark results; 45 #####; 46 ; 47 println(); 48 println(oceananigans_versioninfo()); 49 println(versioninfo_with_gpu()); 50 print_timer(timer, title=""Turbulence closure benchmarks"", sortby=:name); 51 println(); 52 ; 53 end # module; Turbulence closures benchmark: Test Failed at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:45; Expression: run_script(replace_strings, ""turbulence_closures"", benchmark_filepath(""turbulence_closures"")); Stacktrace:; [1] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:45; [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [3] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:38; [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [5] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:13; [6] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [7] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:10; Running benchmark: 16× 16× 16 0 active + 0 passive [CPU, Float64]...; Running benchmark: 16× 1",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:113170,test,test,113170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,Generalizes budget tests for Flux boundary conditions to every topology and boundary,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1486:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1486,1,['test'],['tests']
Testability,"Generally looks fine. Some nice clean up!. It seems you're gravitating towards having fewer files which I think is a bad idea. Having more modular files helps a lot with both readability and organization, especially for someone who's looking through the code for the first time. It also becomes harder to find stuff with longer files. For example, It's not logically clear to me that forcings and field sets should be in `models.jl`. And if I'm looking through the file for the first time, I might find it hard to comprehend all the different functionalities provided in the file. Unrelated to this PR but working on the checkpointer in `output_writers.jl` the file has become a long list of functions, some of which are shared between multiple output writers so I think it makes more sense to split it into a set of shared functions and a file for each output writer.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/325#issuecomment-517483988:357,log,logically,357,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/325#issuecomment-517483988,1,['log'],['logically']
Testability,Glad you could figure it out. Did you want me to test if this change removes the error?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3790#issuecomment-2374825497:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3790#issuecomment-2374825497,1,['test'],['test']
Testability,"Global ocean benchmarks (from [prototype_omip_simulation.jl](https://github.com/CliMA/ClimaOcean.jl/blob/dfafbae5cc92b9546183ea56c472418e175b7a0b/prototype_omip_simulation/prototype_omip_simulation.jl)) using ; ```julia; tracer_advection = TracerAdvection(WENO(; order = 7), WENO(; order =7), Centered()); momentum_advection = WENOVectorInvariant(); ```; # On Main; <img width=""762"" alt=""Screenshot 2024-07-24 at 10 31 27 AM"" src=""https://github.com/user-attachments/assets/5fe5d90c-9c8b-4b8d-ba8d-af85650ebc6c"">. # On this branch; <img width=""790"" alt=""Screenshot 2024-07-24 at 10 29 15 AM"" src=""https://github.com/user-attachments/assets/143d3bba-1c6d-4684-84d9-63d7dbe27501"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2248001769:13,benchmark,benchmarks,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2248001769,1,['benchmark'],['benchmarks']
Testability,Go ahead @francispoulin! I ll fix the merge conflicts and set up the shallow water bickley regression test,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1141167762:102,test,test,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1141167762,1,['test'],['test']
Testability,"Go for it! If you want to discuss an idea before writing code, let's discuss here. Here's my thoughts:. 1. We can add a color to an important `show` method like one / all of the models, or `Simulation`; 2. We can add a nice utility for logging progress that uses `Term.jl`, that users can configure and then add to `simulation.callbacks` (we could also consider making it default)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1077663914:236,log,logging,236,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1077663914,1,['log'],['logging']
Testability,"Good catch! I think we should test that, but indeed a slimmer version of that test is preferred.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2647#issuecomment-1181924885:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2647#issuecomment-1181924885,2,['test'],['test']
Testability,"Good idea! Does this mean tagging v0.94.0 (and one stop closer to v0.100) as it's a change to the public interface?. > Remove `OceananigansLogger`: rarely used. I use it in almost every script I write haha, but that's because I wrote it to my liking. There's a strong argument to be made that a logger configuration does not belong in Oceananigans.jl. I feel it's similar to Oceananigans' decision to not provide a default progress callback seeing as each user will probably want a different one. > Remove `StateChecker`: not used as far as I know. Yeah I think I used that to debug cubed sphere stuff. Could easily be defined in a validation script though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3872#issuecomment-2439726627:295,log,logger,295,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3872#issuecomment-2439726627,1,['log'],['logger']
Testability,Good idea!. @navidcy did you manually cancel the tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499729815:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499729815,1,['test'],['tests']
Testability,"Good idea, let's change the phrase but keep this issue open so that I remember to tackle the performance benchmarks",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3758#issuecomment-2327680150:105,benchmark,benchmarks,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3758#issuecomment-2327680150,1,['benchmark'],['benchmarks']
Testability,Good logging should be a high priority item. Python's logging is great... Some options:; * [Base logging](https://docs.julialang.org/en/v1/stdlib/Logging/index.html); * [Memento.jl](https://github.com/invenia/Memento.jl); * [MicroLogging.jl](https://github.com/c42f/MicroLogging.jl),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71:5,log,logging,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71,4,"['Log', 'log']","['Logging', 'logging']"
Testability,"Good news: shallow water tests pass!. Bad news: the halo tests now has 12 fails, of 600 in total. . ```; <div class=""JobLogOutputComponent"" style=""box-sizing: border-box; background: rgb(23, 23, 23); border-radius: 3px; min-height: 85px; color: white; font-size: 12px; padding: 0px 0px 15px; width: 1108px; font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Helvetica, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;""><div class=""JobLogOutputComponent__Body"" style=""box-sizing: border-box; font-family: SFMono-Regular, Monaco, Menlo, Consolas, &quot;Liberation Mono&quot;, Courier, monospace;"">; Oceananigans \| 818 12 830; --; &nbsp; | Distributed MPI Oceananigans \| 816 12 828; &nbsp; | Multi architectures rank connectivity \| 28 28; &nbsp; | Local grids for distributed models \| 24 24; &nbsp; | Injection of halo communication BCs \| 168 168; &nbsp; | Halo communication \| 588 12 600; &nbsp; | Time stepping IncompressibleModel \| 4 4; &nbsp; | Time stepping ShallowWaterModel \| 4 4; &nbsp; | Distributed FFT-based Poisson solver \| 2 2; &nbsp; | ERROR: ERROR: ERROR: ERROR: LoadError: LoadError: LoadError: LoadError: Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,3,['test'],['tests']
Testability,Good point! Yes. OK. Test is being written!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046437228:21,Test,Test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046437228,1,['Test'],['Test']
Testability,Good thing to test as it exposed a typo. Resolves #539,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/549:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/549,1,['test'],['test']
Testability,Good! I wonder if we can add a test here too to wrap this up.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1239590711:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1239590711,1,['test'],['test']
Testability,"Got the regression tests error (tests pass locally), it was from the change to the order of halo filling with open boundaries separated from normal boundaries which I have now corrected",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2152786764:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2152786764,2,['test'],['tests']
Testability,"Great job! Though I have not looked at the code, I have two comments:. 1. I am surprised that the choice of `regularization` affects the convergence rate. I will think about it more.; 2. The rate of convergence depends on the distribution of eigenvalues of the preconditioned linear operator. I have a piece code of that outputs the preconditioned linear operator as a dense `Matrix`, which can be useful for testing the convergence rate and new algorithms without invoking `Oceananigans`. It can be helpful for testing why `FlatExtrapolationOpenBoundaryCondition` results in a much slower convergence. Besides, I have found that grids with better symmetry have faster convergence because the resulting Laplacian operators have more repeated eigenvalues. In theory, the number of iterations required for the CG method to get the exact solution is the number of unique eigenvalues. ```Julia; using LinearAlgebra; using Oceananigans; using Oceananigans.Models.NonhydrostaticModels: ImmersedPoissonSolver; using Oceananigans.ImmersedBoundaries: active_cells_map, immersed_cell, mask_immersed_field!; using Oceananigans.Solvers: solve!; using Statistics: norm, mean. using Oceananigans.Solvers: precondition!. ENV[""JULIA_DEBUG""] = ""Solvers"". # ---------------------------------------------------------------------- #; # Define Parameters. # Numerical Technic; const arch = CPU(). # Grid; const Nx = 10; const Ny = 10; const Nz = 10; const Lx = 1.0; const Ly = 1.0; const Lz = 1.0. const Δz = Lz / 2 # elevation difference at the top. # ---------------------------------------------------------------------- #; # Define Utils. # Height at Top; @inline function z_top(y::R) where {R<:Real}; # return Lz - Δz * sin(π/2 * y/Ly) - Δz * 0.2; return Lz - Δz; end. # ---------------------------------------------------------------------- #; # Define the Simulation. # Grid; ib_grid = begin; underlying_grid = RectilinearGrid(; arch,; size = (Nx, Ny, Nz),; x = (-Lx / 2, Lx / 2),; y = (0.0, Ly),; z = (0.0, Lz),; t",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3848#issuecomment-2420373611:409,test,testing,409,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3848#issuecomment-2420373611,2,['test'],['testing']
Testability,Great to hear the tests are working!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1480991004:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1480991004,1,['test'],['tests']
Testability,Great! I'll merge when tests pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2439#issuecomment-1100211147:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2439#issuecomment-1100211147,1,['test'],['tests']
Testability,"Great! Now we just need a test in CI to make sure it doesn't break in the future, and we can merge this PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2087#issuecomment-986785546:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2087#issuecomment-986785546,1,['test'],['test']
Testability,Great! When all tests pass you can merge.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3523#issuecomment-2024689536:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3523#issuecomment-2024689536,1,['test'],['tests']
Testability,"Great, I also think option 4 is the best. I prefer the kwarg formulation, but I don't feel strongly about it. The issue atm is that I think I won't have time to finish this PR by myself for a few days (I couldn't figure out why some tests aren't passing, so it'll probably take me a fair amount of time to have everything done). So if this needs to be ready for AGU OSM I'd need some help getting the tests to pass (it might actually be better to start over in another PR).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050033459:233,test,tests,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050033459,2,['test'],['tests']
Testability,"Greg's main issue seemed to be that we didn't use discrete form for the BC function, which was fixed. So if we can get tests to pass it's probably good to merge.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3643#issuecomment-2377594509:119,test,tests,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3643#issuecomment-2377594509,1,['test'],['tests']
Testability,"HB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `64.28% <100.00%> (+5.31%)` | :arrow_up: |; | [...ion/convergence\_tests/ConvergenceTests/analysis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvYW5hbHlzaXMuamw=) | | |; | [test/test\_verification.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ZlcmlmaWNhdGlvbi5qbA==) | | |; | [...nvergence\_tests/ConvergenceTests/file\_wrangling.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvZmlsZV93cmFuZ2xpbmcuamw=) | | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [...\_tests/ConvergenceTests/TwoDimensionalDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvVHdvRGltZW5zaW9uYWxEaWZmdXNpb24uamw=) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | ... and [53 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657830968:2388,test,test,2388,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657830968,2,['test'],['test']
Testability,Had some research deadline and couldn't come back to this problem. I will test with your suggestion and let you know.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1084029838:74,test,test,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1084029838,1,['test'],['test']
Testability,"Had some time to burn while waiting for stuff to train so I benchmarked some abstract operations:. Some outliers in there like `α * β - γ * δ / ζ` and `(u^2 + v^2 + w^2) / 2` so there should be some useful info. Tried to run on GPU but it wouldn't compile `α + β` even though it worked for me in the REPL :shrug: Worth trying again after #860. ```; Oceananigans v0.34.1 (DEVELOPMENT BRANCH); Julia Version 1.5.0; Commit 96786e22cc (2020-08-01 23:44 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-9.0.1 (ORCJIT, skylake); ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────; Abstract operations benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 7.66s / 69.8% 6.85GiB / 89.5% ; Section ncalls time %tot avg alloc %tot avg; ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────; 32× 32× 32 [01] -α [CPU] 10 526μs 0.01% 52.6μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [02] √ζ [CPU] 10 987μs 0.02% 98.7μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [03] sin(β) [CPU] 10 6.97ms 0.13% 697μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [04] cos(γ) [CPU] 10 8.24ms 0.15% 824μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [05] exp(δ) [CPU] 10 7.06ms 0.13% 706μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [06] tanh(ζ) [CPU] 10 13.9ms 0.26% 1.39ms 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [07] α + β [CPU] 10 737μs 0.01% 73.7μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [08] α + β - γ [CPU] 10 191ms 3.58% 19.1ms 370MiB 5.90% 37.0MiB; 32× 32× 32 [09] α * β * γ * δ [CPU] 10 857μs 0.02% 85.7μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [10] α * β - γ * δ / ζ [CPU] 10 299ms 5.59% 29.9ms 340MiB 5.42% 34.0MiB; 32× 32× 32 [11] u^2 + v^2 [CPU] 10 1.30ms 0.02% 130μs 29.2KiB 0.00% 2.92KiB; ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/870:60,benchmark,benchmarked,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/870,2,['benchmark'],"['benchmarked', 'benchmarks']"
Testability,Had they not passed!? I'm on my phone and thought if it let me merge they must have passed!. It's only the single column hydrostatic free surface models that this effects and I guess no one had used OceanBioMe with them before I tried earlier. I also think unless a test (e.g. in OceanBioME) was specifically looking for something like light attenuation to have been calculated it wouldn't be noticed just give weird results.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3173#issuecomment-1624206162:266,test,test,266,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3173#issuecomment-1624206162,1,['test'],['test']
Testability,"Haha it did take a while but with a satisfying ending!. And thanks for the suggestion! I didn't realize that `4.1.1` and `^4.1.1` would be the same here. But since it's okay with you, I'll merge to avoid waiting on another round of tests to pass :upside_down_face:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2448306882:232,test,tests,232,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2448306882,1,['test'],['tests']
Testability,Haine & Marshall (1998) channel validation test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/771:43,test,test,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/771,1,['test'],['test']
Testability,Happy to approve this if there's unanimous consent. I guess we should tag v0.50.0 with this PR and get the pain of breaking changes out of the way?. Out of paranoia I'm also running the convergence tests for this PR manually: https://buildkite.com/clima/oceananigans-validation-experiments/builds/128,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783458149:198,test,tests,198,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783458149,1,['test'],['tests']
Testability,Happy to open a PR to fix `MultipleForcings` on the GPU and add some docs and tests if it's something we want to keep in the code.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2312690174:78,test,tests,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2312690174,1,['test'],['tests']
Testability,Happy to say that thanks to help from @ali-ramadhan all test pass. . I guess now all we need is for someone to approve it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843689562:56,test,test,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843689562,1,['test'],['test']
Testability,Have you tried building the docs locally to see how the new `benchmarks.md` looks?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1952#issuecomment-902908856:61,benchmark,benchmarks,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1952#issuecomment-902908856,1,['benchmark'],['benchmarks']
Testability,"Having these functions in the operator module is what makes more sense to me. My logic for this opinion is that these functions are much more similar in structure and objective to the other operators rather than any function of the grid module which typically only require the grid itself as an input.; However, I am ok also to switch them in the grids module because I recognize that a rotation happens relative to a particular grid.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3718#issuecomment-2309048398:81,log,logic,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3718#issuecomment-2309048398,1,['log'],['logic']
Testability,"Heck yea it'd be great to test this and make it work for any number of forcings. Also I think it makes sense if `u= MultipleForcings(f1, f2)` is valid",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2313545088:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2313545088,1,['test'],['test']
Testability,"Heh I think if you can produce a convergence plot then its worthy to be included in the code! Someone might want 6th order advection... > The bad news is that I don't know why we are not getting the correct values in Oceananigans, even though I am using the exact same tests. That sounds like you've isolated a bug...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-747710521:269,test,tests,269,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-747710521,1,['test'],['tests']
Testability,"Heh, well the `stratified_fluid_remains_at_rest_with_tilted_gravity_temperature_tracer` test fails. The log suggests that the problem is confined to a few grid points, since the mean is correct:. ```; [2021/07/29 16:10:56.038] INFO Simulation is stopping. Model time 1 hour has hit or exceeded simulation stop time 1 hour.; --;   | [2021/07/29 16:10:57.288] INFO ∂T∂z * g̃[2] = 0.0001065658790393914, mean(∂y_T) = 0.0001065658790360618, Δ = 3.32959842423014e-15 at t = 1 hour with θ=1°;   | [2021/07/29 16:10:57.288] INFO ∂T∂z * g̃[3] = 0.006105155121314884, mean(∂z_T) = 0.006105155121314366, Δ = 5.178149575790769e-16 at t = 1 hour with θ=1°;   | Tilted gravity: Test Failed at /var/lib/buildkite-agent/builds/tartarus-5/clima/oceananigans/test/test_dynamics.jl:290;   | Expression: all(∂T∂z * g̃[2] .≈ interior(∂y_T)); ```. https://github.com/CliMA/Oceananigans.jl/blob/9ecddac3fe2666e05f21e51b81ec2c403094e5ea/test/test_dynamics.jl#L241. I am skeptical about the value of this test. In general, discretizations _do not necessarily_ represent the balance states of the continuous systems they approximate. Thus in general this test should fail! It will succeed of course in the case that the discrete system shares a balanced state with the continuous state. I think this is flawed as a _test_ because, while certainly formulating discrete systems that share balanced states with their continuous systems is _desirable_, I'm not sure it's something we want to guarantee via CI. We should be allowed to violate this prescription if the discrete system has other _more important_ desirable properties. It could be a nice validation test though. In this particular case, the nonhydrostatic useful is most often used for simulations of _vigorous_ turbulence in which weak flows induced by a violation of hydrostatic balance are likely irrelevant.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890017453:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890017453,8,"['Test', 'log', 'test']","['Test', 'log', 'test']"
Testability,"Hello everyone, I have tested ```VerticallyStretchedRectilinearGrid( )``` and found a hard time in setting up the time step for a stable solution. ; I will going to post the whole issue but before that I just want to know weather is there any adaptive time stepping method like we did have ```TimeStepWizard``` . I have searched and failed may be I might have missed it that's why I first ask this question.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1741:23,test,tested,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1741,1,['test'],['tested']
Testability,"Hello, . I've tested it in `Oceananigans v0.91.8` with:. ```; julia> versioninfo(); Julia Version 1.10.4; Commit 48d4fd48430 (2024-06-04 10:41 UTC); Build Info:; Official https://julialang.org/ release; Platform Info:; OS: Linux (x86_64-linux-gnu); CPU: 64 × Intel(R) Xeon(R) Gold 6130 CPU @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-15.0.7 (ORCJIT, skylake-avx512); Threads: 1 default, 0 interactive, 1 GC (on 64 virtual cores); Environment:; JULIA_CUDA_MEMORY_POOL = none. julia> Oceananigans.CUDA.versioninfo(); CUDA runtime 12.1, artifact installation; CUDA driver 12.1; NVIDIA driver 530.30.2. CUDA libraries:; - CUBLAS: 12.1.3; - CURAND: 10.3.2; - CUFFT: 11.0.2; - CUSOLVER: 11.4.5; - CUSPARSE: 12.1.0; - CUPTI: 2023.1.1 (API 18.0.0); - NVML: 12.0.0+530.30.2. Julia packages:; - CUDA: 5.4.3; - CUDA_Driver_jll: 0.9.2+0; - CUDA_Runtime_jll: 0.14.1+0. Toolchain:; - Julia: 1.10.4; - LLVM: 15.0.7. Environment:; - JULIA_CUDA_MEMORY_POOL: none. Preferences:; - CUDA_Runtime_jll.version: 12.1. 1 device:; 0: Tesla V100-PCIE-32GB (sm_70, 30.884 GiB / 32.000 GiB available); ```; and the issue seems solved. ; I agree with @ali-ramadhan, it seems that this issue was fixed at some point, although I haven't managed to pinpoint the version, I think I had the issue when I was using `CUDA v5.1.2`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-2298503471:14,test,tested,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-2298503471,1,['test'],['tested']
Testability,"Hello, ; Do you want to simulate a channel flow or a turbulent boundary layer? Because at the moment, you are just specifying the drag at the bottom (which I guess is a model for the no-slip boundary condition), while a channel requires no-slip at both the top and the bottom. Also, in case you want to simulate a turbulent boundary layer, take care that it is not a periodic case but spatially developing in the streamwise direction, so if you are looking for the self-similar solution (the log-law), you need to rescale somewhere at the beginning or the end of the domain. ; This is not a problem with a fully developed channel flow that is statistically homogeneous in the streamwise direction. Given that you probably need to specify the drag at the top and bottom (unless drag is only for roughness), also `cᴰᵇ` is wrong. This is because the closest grid center to the bottom is the first element in the `znodes` array, not the last:; ```julia; const z₁ = -1*znodes(Center,grid)[1] # Closest grid center to the bottom; ```; Let me know if that works",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1648148527:492,log,log-law,492,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1648148527,1,['log'],['log-law']
Testability,"Hello, @amontoison. Nice work. Do you see a performance improvement when switching to this package?; There should be some benchmarks in the `benchmark` folder that we can test (probably we need to update that folder a bit, let me know if you have problems with it)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2353126955:122,benchmark,benchmarks,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2353126955,3,"['benchmark', 'test']","['benchmark', 'benchmarks', 'test']"
Testability,"Hello, I am getting this error while trying to add Oceananigans on the NASA Pleiade cluster. Any ideas? Thanks a lot ! Lia. (@v1.6) pkg> update Oceananigans; Updating registry at `~/.julia/registries/General`; Installed HDF5_jll ─── v1.10.5+7; Installed ColorTypes ─ v0.11.0; Installed HTTP ─────── v0.9.8; Installed HDF5 ─────── v0.13.7; Installed URIs ─────── v1.3.0; Downloaded artifact: HDF5; No Changes to `~/.julia/environments/v1.6/Project.toml`; Updating `~/.julia/environments/v1.6/Manifest.toml`; [3da002f7] ↑ ColorTypes v0.10.12 ⇒ v0.11.0; [f67ccb44] ↑ HDF5 v0.13.6 ⇒ v0.13.7; [cd3eb016] ↑ HTTP v0.8.19 ⇒ v0.9.8; [5c2747f8] + URIs v1.3.0; [0234f1f7] ↓ HDF5_jll v1.12.0+1 ⇒ v1.10.5+7; Building HDF5 → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/0b812e7872e2199a5a04944f486b4048944f1ed8/build.log`; Precompiling project...; ✗ Oceananigans; 15 dependencies successfully precompiled in 101 seconds (143 already precompiled); 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1635:819,log,log,819,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1635,1,['log'],['log']
Testability,"Hello, I am having some technical trouble installing and using Oceananigans. I am new to Julia and would like to try to set up Oceananigans on a Macbook. But it is running into issues. . (1) - installation process says some things are missing:; Building MPI → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/d56a80d8cf8b9dc3050116346b3d83432b1912c0/build.log`; Precompiling project...; ✗ MPI; ✗ PencilArrays; ✗ PencilFFTs; ✗ Oceananigans; 89 dependencies successfully precompiled in 41 seconds; 4 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages. (2) - using Oceananigans is looking for MPI, but to my knowledge if I want to run on my computer, it shouldn't need MPI, like MITgcm using serial instead of parallel. But I don't know where to change the setting? This is what happens when I call using Oceananigans:. julia> using Oceananigans; [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; ERROR: LoadError: MPI.jl not properly configured, please run `Pkg.build(""MPI"")`.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:33; [2] top-level scope; @ ~/.julia/packages/MPI/08SPr/src/MPI.jl:38; [3] include; @ ./Base.jl:418 [inlined]; [4] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::String); @ Base ./loading.jl:1318; [5] top-level scope; @ none:1; [6] eval; @ ./boot.jl:373 [inlined]; [7] eval(x::Expr); @ Base.MainInclude ./client.jl:453; [8] top-level scope; @ none:1; in expression starting at /Users/sean/.julia/packages/MPI/08SPr/src/MPI.jl:1. caused by: LoadError: InitError: could not load library ""/Users/sean/.julia/artifacts/48a9a608db31268626d8b8d4d1272c3e7ccbf7d5/lib/libmpifort.12.dylib""; dlopen(/Users/sean/.julia/artifacts/48a9a608db31268626d8b8d4d1272c3e7ccbf7d5/lib/libmpifort.12.dylib, 0x0001): Library not loaded: @rpath/libquadm",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2480:368,log,log,368,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2480,1,['log'],['log']
Testability,"Hello, I'm interested in this feature. I've managed to implement the same feature @glwagner suggested of `max_filesize` within the `NetCDFOutputWriter`, in addition to its test. I'm currently doing the testing of the changes, and if it works, I will submit a PR. Currently the code is in my fork of Oceananigans (https://github.com/josuemtzmo/Oceananigans.jl/tree/netcdf_split)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1994081895:172,test,test,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1994081895,2,['test'],"['test', 'testing']"
Testability,"Hello,. I've been working with @johnryantaylor, and we've been using Lagrangian Particles but have come across an issue. To preface, the issue be my miss understanding of how to use tracked fields but I can't find an obvious solution. Essentially the problem seems to be that to define an tracked field for a tracer you have to already have the model defined, but to do that you have to have the particles defined. A work around for this was to make the model, then define the particles, then redefine the model. This would run and not error, but would result in the tracked field property of the particles not actually being updated. Running it yet again appears to fix it and make it; work. In order to fix this I've modified the `update_particle_properties!` function to explicitly use the models tracer fields when it is a tracer field being tracked. I've also updated the tests which seem to run. If you run the tests on the previous version of the code then the property t does not get updated (but will run with this set up). I hope this is the best place for me to make this pull request since you're updating particle tracking anyway!. Jago",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2662:877,test,tests,877,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2662,2,['test'],['tests']
Testability,"Hello,; My [fork](https://github.com/matinraayai/Oceananigans.jl) of Oceananigans.jl is in the process of adding AMDGPU support for the code base. I've added a new architecture called ROCMGPU, and changed the name of the GPU architecture to CUDAGPU. ; Some of the operations are ported, and the tests are updated to use ROCMGPU as well. @christophernhill and I are in the process of running each test suite to see what other operations need to be tweaked for AMDGPU.; 1. I would like to push this work on a branch on the main codebase, called amdgpu for it to get more attention.; 2. Any help on getting the tests working would be much appreciated.; Thanks",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2493:295,test,tests,295,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2493,3,['test'],"['test', 'tests']"
Testability,"Hello,; This branch contains my group's efforts to make Oceananigans.jl work with AMDGPU.jl as well as preliminary ports of PencilFFTs.jl for distributed FFTs on both CUDA and AMD GPUs. It uses a fork of AMDGPU.jl with ROCSparse support. It was working fine until today, when I rebased my fork to master. Now the distributed tests doesn't work on my end. The tests don't work on the master branch either. The rest of the tests should work fine. I need help from the developers to review this code and discuss any CUDA-specific features still remaining, as well as testing the distributed CUDA/ROCM support for FFTs. Thanks. Closes #1546",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2949:325,test,tests,325,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949,4,['test'],"['testing', 'tests']"
Testability,"Here I've removed the over-specification that `DiscreteForcing` must have a `Function` in the second parameter so that an object can be put there instead, and a method on that object be the forcing function (don't think I'm describing this very well). This is useful if you want to pass information to a forcing by defining a struct like:; ```julia; struct StructForcing{D}; data :: D; end. (forcing::StructForcing)(i, j, k, grid, clock, model_fields) = forcing.data[i, j, k]; ```. Then this would fail with this error:; <details>; <summary>; MethodError: objects of type DiscreteForcing{Nothing, StructForcing{Array{Float64, 3}}} are not callable; </summary>; Struct method forcing [CPU]: Error During Test at /Users/jago/Documents/Projects/Oceananigans.jl/test/test_forcings.jl:204; Test threw exception; Expression: struct_method_forcing(arch); MethodError: objects of type DiscreteForcing{Nothing, StructForcing{Array{Float64, 3}}} are not callable; Stacktrace:; [1] u_velocity_tendency; @ ~/Documents/Projects/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:71 [inlined]; [2] cpu_calculate_Gu!; @ ~/.julia/packages/KernelAbstractions/cWlFz/src/macros.jl:276 [inlined]; [3] cpu_calculate_Gu!(__ctx__::KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{3}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}}, Gu::Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3237:703,Test,Test,703,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3237,3,"['Test', 'test']","['Test', 'test']"
Testability,"Here are some plots for the incompressible model's benchmarks. Note that I also added a benchmark for Nx=256 however, anything larger (e.g. Nx=512) resulted in an out of memory error even when ran by itself. times; ![incompressible_times](https://user-images.githubusercontent.com/45054739/120524817-77b06080-c3a5-11eb-999b-48a936947268.png). speedups going from cpu to gpu; ![incompressible_speedup](https://user-images.githubusercontent.com/45054739/120527123-f7d7c580-c3a7-11eb-90b5-05d451f10663.png); ; Also, a small change done to the shallow water graph above. The y-axis label has been changed to ""Time (ms)"" for more clarity.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-853237538:51,benchmark,benchmarks,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-853237538,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Here are some profiling results that were done on Satori with nvprof. This is a GPU profile of the nonhydrostatic model.; ```; ==104758== NVPROF is profiling process 104758, command: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project benchmarkable_incompressible_model.jl. Oceananigans v0.60.0; Julia Version 1.6.2; Commit 1b93d53fc4 (2021-07-14 15:36 UTC); Platform Info:; OS: Linux (powerpc64le-unknown-linux-gnu); CPU: unknown; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, pwr9); GPU: Tesla V100-SXM2-32GB. CUDA toolkit 10.2.89, local installation; CUDA driver 10.2.0; NVIDIA driver 440.64.0. Libraries: ; - CUBLAS: 10.2.2; - CURAND: 10.1.2; - CUFFT: 10.1.2; - CUSOLVER: 10.3.0; - CUSPARSE: 10.3.1; - CUPTI: 12.0.0; - NVML: 10.0.0+440.64.0; - CUDNN: missing; - CUTENSOR: missing. Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5; - Device capability support: sm_30, sm_32, sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 31.432 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 31.738 GiB / 31.749 GiB available); nothing. [2021/07/30 10:27:44.108] INFO Setting up benchmark: (GPU, Float64, 128)...; [2021/07/30 10:28:25.970] INFO warming up; [2021/07/30 10:29:55.456] WARN Calling CUDA.@profile only informs an external profiler to start.; The user is responsible for launching Julia under a CUDA profiler. It is recommended to use Nsight Systems, which supports interactive profiling:; $ nsys launch julia -@-> /home/henryguo/.julia/packages/CUDA/lwSps/lib/cudadrv/profile.jl:71; [2021/07/30 10:29:58.016] INFO done profiling (GPU, Float64, 128); ==104758== Profiling application: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project benchmarkable_incompressible_model.jl; ==104758== Profiling result:; Type Time(%) Time Calls Avg Min Max Name; GPU activities: 12.29% 502.36u",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912:223,test,test,223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912,1,['test'],['test']
Testability,"Here are some results for weak and strong scaling of distributed shallow water model on one node with 32 cores. The efficiency for both goes down to 80% on 32 cores. This is comparable to what @ali-ramadhan found a while back, but not sure if that made it on an issue or a PR. I'm now trying to go to 64 cores on 2 nodes, and hope to have some results to show soon, after I figure out some weird behavour. ```; Shallow water model weak scaling benchmark; ┌──────────────┬─────────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├──────────────┼─────────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ (4096, 256) │ (1, 1) │ 357.509 ms │ 357.738 ms │ 357.932 ms │ 359.397 ms │ 1.60 MiB │ 2774 │ 10 │; │ (4096, 512) │ (1, 2) │ 371.114 ms │ 371.639 ms │ 372.070 ms │ 381.467 ms │ 1.49 MiB │ 3116 │ 20 │; │ (4096, 1024) │ (1, 4) │ 371.134 ms │ 372.336 ms │ 372.644 ms │ 379.017 ms │ 1.49 MiB │ 3116 │ 40 │; │ (4096, 2048) │ (1, 8) │ 376.120 ms │ 376.283 ms │ 378.017 ms │ 409.322 ms │ 1.49 MiB │ 3116 │ 80 │; │ (4096, 4096) │ (1, 16) │ 388.076 ms │ 394.677 ms │ 396.207 ms │ 426.799 ms │ 1.49 MiB │ 3116 │ 160 │; │ (4096, 8192) │ (1, 32) │ 428.043 ms │ 444.197 ms │ 445.236 ms │ 479.791 ms │ 1.49 MiB │ 3116 │ 320 │; └──────────────┴─────────┴────────────┴────────────┴────────────┴────────────┴──────────┴────────┴─────────┘; [2021/06/08 11:49:56.194] INFO Writing Shallow_water_model_weak_scaling_benchmark.html...; Shallow water model weak scaling speedup; ┌──────────────┬─────────┬──────────┬────────────┬──────────┬─────────┐; │ size │ ranks │ slowdown │ efficiency │ memory │ allocs │; ├──────────────┼─────────┼──────────┼────────────┼──────────┼─────────┤; │ (4096, 256) │ (1, 1) │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ (4096, 512) │ (1, 2) │ 1.03886 │ 0.962595 │ 0.930602 │ 1.12329 │; │ (4096, 1024) │ (1, 4) │ 1.04081 │ 0.960794 │ 0.930602 │ 1.12329 │; │ ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-857089098:444,benchmark,benchmark,444,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-857089098,1,['benchmark'],['benchmark']
Testability,"Here is the MWE related to this issue:; ```julia; # this is a MWE for reproducing AveragedTimeInterval errors; using Oceananigans; using Printf; using Plots. function test_simulation(stop_time, Δt, δt, overwrite); grid = RectilinearGrid(size=(2), z = (-1,1), topology=(Oceananigans.Flat, Oceananigans.Flat, Oceananigans.Bounded)); uᵢ(z) = 0; T=2; u_forcing(z, t) = 10*sin(2*pi/T*t). model = NonhydrostaticModel(; grid, ; forcing = (u = u_forcing,),; timestepper = :RungeKutta3). ; set!(model, u=uᵢ). simulation = Simulation(model; Δt, stop_time); u = model.velocities.u. simulation.output_writers[:timeavg] = NetCDFOutputWriter(model, (u=u,),; filename = ""timeavg.nc"",; schedule = AveragedTimeInterval(1δt, window=δt, stride = 1),; # schedule = TimeInterval(δt),; overwrite_existing = overwrite); ; checkpointer = Checkpointer(model,; schedule = TimeInterval(stop_time),; prefix = ""test"",; cleanup = true). simulation.output_writers[:checkpointer] = checkpointer. function progress_message(sim) ; wta = sim.output_writers[:timeavg].outputs[""u""]; wd = wta.window_start_time; ws = wta.window_start_iteration; pc = wta.previous_collection_time; fo = wta.fetch_operand; res = sum(wta.result); mct = model.clock.time; interval = wta.schedule.interval; window = wta.schedule.window; timestep = model.clock.last_stage_Δt; # pis = wta.schedule.previous_interval_stop_time; cll = wta.schedule.collecting; nat = next_actuation_time(wta.schedule); fat = wta.schedule.first_actuation_time; actuation = wta.schedule.actuations; @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim), "", model clock time:"", mct,; "", window: "", window, "", u-avg: "", res, "", window_start_time: "", wd, "", window_start_iteration: "", ws, "", previous_collection_time:"", pc, "", fetch_operand: "", fo, "", interval: "", interval, "", collecting: "", cll,; "", next_actuation_time: "", nat, "", first_actuation_time: "", fat, "", actuation: "", actuation, "", timestep: "", timestep). # @info string(""Iter: "", iteration(sim), "", time: "", pre",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2295024645:882,test,test,882,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2295024645,1,['test'],['test']
Testability,"Here's a new 1D validation case that tests a ""buoyant particle"" model using a dynamic slip velocity that depends on buoyancy. The particle concentration field migrates to it's neural buoyancy (here in the center of the domain), until the particle concentration reaches a steady-state in a competition between diffusion and buoyant slippage. https://user-images.githubusercontent.com/15271942/161167309-bfedffdb-6f2b-4552-8f49-1ec23ce7b4ed.mp4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1085241172:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1085241172,1,['test'],['tests']
Testability,"Here's a script with a visualization. ```julia; using Oceananigans; using Oceananigans.Units; using GLMakie. grid = RectilinearGrid(topology=(Periodic, Flat, Bounded), size=(64, 32), x=(0, 200), z=(0, 100)). model = NonhydrostaticModel(; grid,; timestepper = :RungeKutta3,; advection = UpwindBiasedFifthOrder(),; buoyancy = BuoyancyTracer(),; tracers = :b). noise(x, y, z) = 1e-6 * (rand() - 1/2); constant_stratification(x, y, z) = 1e-5 * z; set!(model, u=noise, b=constant_stratification). simulation = Simulation(model, Δt=10.0, stop_iteration=1000); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(10)). u, v, w = model.velocities; e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). fig = Figure(resolution=(1800, 900)). axw = Axis(fig[2, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[2, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[2, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[3, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). slider = Slider(fig[1, 1:2], range=1:Nt, startvalue=1); n = slider.value. wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976:869,test,test,869,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976,1,['test'],['test']
Testability,"Here's a simple hydrostatic model benchmark. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```julia; 10.220 s (85845109 allocations: 37.94 GiB) # this PR; 6.284 s (66184308 allocations: 16.31 GiB) # this PR with KA downgraded to 0.7.2; ```. So we are close but not there yet. What about solvers ... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085:34,benchmark,benchmark,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085,3,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"Here's a test script:; ```julia; using Oceananigans; using Oceananigans.Units; using StructArrays; using Printf; using Random; using Statistics. Random.seed!(123). grid = RectilinearGrid(CPU(), Float64,; size = (2, 2, 2),; halo = (5, 5, 5),; x = (0, 1),; y = (0, 1),; z = (-1, 0),; topology = (Periodic, Bounded, Bounded)). #%%; struct SimpleParticle{X}; x :: X; y :: X; z :: X; end. x_particle = collect(0:0.25:1.5); y_particle = collect(0:0.25:1.5); z_particle = collect(fill(-0.5, length(x_particle))). particles = StructArray{SimpleParticle}((x_particle, y_particle, z_particle)). lagrangian_particles = LagrangianParticles(particles). #%%; model = NonhydrostaticModel(; ; grid = grid,; timestepper = :RungeKutta3,; advection = WENO(order=9),; particles = lagrangian_particles; ). u, v, w = model.velocities. simulation = Simulation(model, Δt=0.1seconds, stop_iteration=2). wall_clock = [time_ns()]. function print_progress(sim); @printf(""i: %d, t: %s, wall time: %s, max(u): (%6.3e, %6.3e, %6.3e) m/s, next Δt: %s\n"",; sim.model.clock.iteration,; prettytime(sim.model.clock.time),; prettytime(1e-9 * (time_ns() - wall_clock[1])),; maximum(abs, sim.model.velocities.u),; maximum(abs, sim.model.velocities.v),; maximum(abs, sim.model.velocities.w),; prettytime(sim.Δt)); @info ""x(particle): $(round.(lagrangian_particles.properties.x, digits=2)), y(particle): $(round.(lagrangian_particles.properties.y, digits=2)), z(particle): $(round.(lagrangian_particles.properties.z, digits=2))\n"". wall_clock[1] = time_ns(). return nothing; end. simulation.callbacks[:print_progress] = Callback(print_progress, IterationInterval(1)). run!(simulation); ```; In the test script, the domain is initialized to be `Periodic, Bounded, Bounded`, so particles should be shifted if $x \geq 1$, bounced if $y > 1$, $z<-1$. Here's the output of the script:; ```; [ Info: Initializing simulation...; i: 0, t: 0 seconds, wall time: 5.450 seconds, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 100 ms; [ Info: x(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3416#issuecomment-1875732332:9,test,test,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3416#issuecomment-1875732332,1,['test'],['test']
Testability,"Here's an illustration:. ```julia; using Oceananigans. Nx, Ny, Nz = 100, 100, 100; latitude = longitude = z = (0, 1); underlying_grid = LatitudeLongitudeGrid(size=(Nx, Ny, Nz); latitude, longitude, z); grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom((λ, φ) -> 0.5)). ci = CenterField(grid); ciw = view(ci, 1:Nx, 1:Ny, 1:Nz). cu = CenterField(underlying_grid); cuw = view(cu, 1:Nx, 1:Ny, 1:Nz). for n = 1:10; @time minimum(ci); @time minimum(ciw); @time minimum(cu); @time minimum(cuw); end; ```. Note there is such a concept as ""stubborn compilation"" so we sometimes have to invoke functions a few times to get them to compile... Now I get:. ```julia; julia> @time minimum(ci); 0.000888 seconds (331 allocations: 33.148 KiB); 0.0. julia> @time minimum(ciw); 1.611260 seconds (7.27 M allocations: 7.968 GiB, 37.23% gc time); 0.0. julia> @time minimum(cu); 0.001069 seconds (387 allocations: 21.586 KiB); 0.0. julia> @time minimum(cuw); 0.001060 seconds (686 allocations: 33.258 KiB); 0.0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3750#issuecomment-2377521775:543,stub,stubborn,543,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3750#issuecomment-2377521775,1,['stub'],['stubborn']
Testability,"Here's another code snipped that I have been using to test this:. ```julia; using Oceananigans; using Oceananigans.Utils: with_tracers; using Random; using Enzyme. Random.seed!(123); arch = CPU(); Nx = Ny = 32; x = y = (0, 2π); z = (0, 1); g = 4^2; c = sqrt(g). grid = RectilinearGrid(arch, size=(Nx, Ny, 1); x, y, z, topology=(Periodic, Periodic, Bounded)); closure = ScalarDiffusivity(ν=1e-2); momentum_advection = Centered(order=2); free_surface = ExplicitFreeSurface(gravitational_acceleration=g); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection, free_surface, closure). ϵ(x, y, z) = 2randn() - 1; set!(model, u=ϵ, v=ϵ). u_init = deepcopy(model.velocities.u); v_init = deepcopy(model.velocities.v). Δx = minimum_xspacing(grid); Δt = 0.01 * Δx / c; for n = 1:10; time_step!(model, Δt; euler=true); end. u_truth = deepcopy(model.velocities.u); v_truth = deepcopy(model.velocities.v). function set_viscosity!(model, viscosity); new_closure = ScalarDiffusivity(ν=viscosity); names = (); new_closure = with_tracers(names, new_closure); model.closure = new_closure; return nothing; end. function viscous_hydrostatic_turbulence(ν, model, u_init, v_init, Δt, u_truth, v_truth); # Initialize the model; model.clock.iteration = 0; model.clock.time = 0; #model.clock.last_Δt = Inf; set_viscosity!(model, ν); #set!(model, u=u_init, v=v_init, η=0); set!(model, u=u_init, v=v_init); fill!(parent(model.free_surface.η), 0). # Step it forward; for n = 1:10; time_step!(model, Δt; euler=true); end. # Compute the sum square error; u, v, w = model.velocities; Nx, Ny, Nz = size(model.grid); err = 0.0; for j = 1:Ny, i = 1:Nx; err += @inbounds (u[i, j, 1] - u_truth[i, j, 1])^2 +; (v[i, j, 1] - v_truth[i, j, 1])^2; end. return err::Float64; end. # Use a manual finite difference to compute a gradient; Δν = 1e-6; ν1 = 1.1e-2; ν2 = ν1 + Δν; e1 = viscous_hydrostatic_turbulence(ν1, model, u_init, v_init, Δt, u_truth, v_truth); e2 = viscous_hydrostatic_turbulence(ν2, model, u_init, v_init, Δt, u_truth",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438720198:54,test,test,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438720198,1,['test'],['test']
Testability,"Here's some benchmarks against the current implementation. Contrary to what I just claimed, there is some speed up for `Bounded` domains, especially with 2D problems (where avoiding halos is advantageous) -- but nothing too significant. Note these are with `WENO5` advection, which should pessimize `Periodic` models as there are larger halos to fill. I came to the prior conclusions by running the two-dimensional turbulence example. I'll try to make sure the ""speed up"" is generic and also benchmark GPU and the hydrostatic model. # `main`. ## Modest 3D model (128x128x128). ```; Topologies benchmarks; ┌───────────────┬─────────────────┬────────────────────────────────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────────┼────────────────────────────────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ (128, 128, 128) │ (Periodic, Bounded, Periodic) │ 900.894 ms │ 901.887 ms │ 902.516 ms │ 905.129 ms │ 703.45 KiB │ 1081 │ 6 │; │ CPU │ (128, 128, 128) │ (Bounded, Periodic, Bounded) │ 895.527 ms │ 911.386 ms │ 910.441 ms │ 921.211 ms │ 772.19 KiB │ 1131 │ 6 │; │ CPU │ (128, 128, 128) │ (Periodic, Bounded, Bounded) │ 900.389 ms │ 904.161 ms │ 906.879 ms │ 916.145 ms │ 771.44 KiB │ 1115 │ 6 │; │ CPU │ (128, 128, 128) │ (Bounded, Bounded, Bounded) │ 903.676 ms │ 910.638 ms │ 910.295 ms │ 914.968 ms │ 837.97 KiB │ 1154 │ 6 │; │ CPU │ (128, 128, 128) │ (Periodic, Periodic, Bounded) │ 886.053 ms │ 892.564 ms │ 894.281 ms │ 904.917 ms │ 703.45 KiB │ 1081 │ 6 │; │ CPU │ (128, 128, 128) │ (Bounded, Periodic, Periodic) │ 910.500 ms │ 924.085 ms │ 923.571 ms │ 931.683 ms │ 703.45 KiB │ 1081 │ 6 │; │ CPU │ (128, 128, 128) │ (Periodic, Periodic, Periodic) │ 914.391 ms │ 916.636 ms │ 916.407 ms │ 917.164 ms │ 575.12 KiB │ 1010 │ 6 │; │ CPU │ (128, 128, 128) │ (Bounded, Bounded, Periodic",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1115745728:12,benchmark,benchmarks,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1115745728,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Here's some ideas:. ```julia; grid = RectilinearGrid(size=(4, 5, 6), extent=(1, 1, 1)); a = CenterField(grid); b = CenterField(grid, indices = (2, :, :)); @test indices(a * b) == (2:2, :, :). # repeat for y and z slices?. c = CenterField(grid); d = XFaceField(grid, indices=(2:3, :, :)); @test indices(c * d) == (3:3, :, :) # right?. # repeat for y and z...; ```. Those, plus maybe some tests for `UnaryOperation`, etc, cover the non-trivial cases I can think of.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1262822892:156,test,test,156,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1262822892,3,['test'],"['test', 'tests']"
Testability,"Here's some results for reference (flat bottom no slip), ""no slip"", ""free slip"", and ""bottom drag"" for fractional heights h=0.1 and h=0.2:. # h = 0.1; https://user-images.githubusercontent.com/15271942/164373427-e614311e-7ff0-492c-a0de-6156eadd24ae.mp4. # h = 0.2; https://user-images.githubusercontent.com/15271942/164373538-08dcc7ff-820c-4492-9a75-a4a406d2c416.mp4. Energy always decreases (rapidly). Momentum is more squirrely, but fortunately we do find that specifying drag / no-slip seems to extract more momentum than otherwise (eg than with free slip boundary conditions). The amount of momentum lost with a free-slip boundary condition and hills of size `h=0.2` is roughly equivalent to the flat bottom case with no-slip. There's also transient periods with `h=0.2` where the case with no-slip boundary conditions has more momentum than free-slip. I'm going to run a few more cases at higher resolution. We should also have a more quantitative validation test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104703550:964,test,test,964,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104703550,1,['test'],['test']
Testability,"Here's something: https://github.com/CliMA/Oceananigans.jl/pull/1770. I'm trying to run the benchmarks but they take a while, so that's in progress.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868845455:92,benchmark,benchmarks,92,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868845455,1,['benchmark'],['benchmarks']
Testability,"Here's the code used for the profiling.; ```; push!(LOAD_PATH, joinpath(@__DIR__, "".."")). #using BenchmarkTools; using CUDA; using Oceananigans; using Benchmarks. # Benchmark parameters. Arch = GPU; FT = Float64; N = 128. print_system_info(). # Define benchmarks. @info ""Setting up benchmark: ($Arch, $FT, $N)..."". grid = RegularRectilinearGrid(FT, size=(N, N, N), extent=(1, 1, 1)); model = NonhydrostaticModel(architecture=Arch(), grid=grid). @info ""warming up"". time_step!(model, 1). CUDA.@profile time_step!(model, 10000). @info ""done profiling ($Arch, $FT, $N)""; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890071837:97,Benchmark,BenchmarkTools,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890071837,5,"['Benchmark', 'benchmark']","['Benchmark', 'BenchmarkTools', 'Benchmarks', 'benchmark', 'benchmarks']"
Testability,"Here's what I posted earlier:. > Correct: time-averaging a TKE ComputedField; Wrong: time-averaging a TKE KernelComputedField; Wrong: time-averaging a dissipation ComputedField; Wrong: time-averaging a dissipation KernelComputedField. From this list I might infer that the two ingredients are 1) `KernelComputedField` OR 2) gradients. Gradients / interpolation ping boundary conditions, which are tricky so there's good reason to test that. Maybe two tests: one for `ComputedField` with interpolation or derivatives, and another with `KernelComputedField` (that's maybe a bit simpler)?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817992499:430,test,test,430,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817992499,4,['test'],"['test', 'tests']"
Testability,"Here's what we currently do:; https://github.com/CliMA/Oceananigans.jl/blob/b6dd1fa9b1d740f7d8cb4be116a24cbba0042f86/src/Fields/field.jl#L500. Here's a test script:. ```Julia; using Oceananigans; using BenchmarkTools; using LinearAlgebra. Nx, Ny, Nz = 128, 128, 16. grid = RectilinearGrid(size=(Nx, Ny, Nz), x=(-4, 4), y=(-4, 4), z=(-4, 0), topology=(Bounded, Bounded, Bounded)). a = CenterField(grid); b = CenterField(grid). ε(x, y, z) = randn(). set!(a, ε); set!(b, ε). true_dot(a, b) = sum(interior(a) .* interior(b)). dot_current(a::Field, b::Field) = mapreduce((x, y) -> x * y, +, interior(a), interior(b)). function dot_faster(a, b); s = zero(eltype(a.grid)). @inbounds @simd for I ∈ CartesianIndices(a); s += a[I] * b[I]; end. return s; end; ```. I get. ```julia. julia> isapprox(dot_current(a, b), true_dot(a, b)); true. julia> isapprox(dot_faster(a, b), true_dot(a, b)); true. julia> @btime true_dot($a, $b);; 149.667 μs (29 allocations: 2.00 MiB). julia> @btime dot_current($a, $b);; 1.289 ms (34 allocations: 2.00 MiB). julia> @btime dot_faster($a, $b);; 74.041 μs (0 allocations: 0 bytes); ```. So we can get a ~15x speedup with zero allocations. With only this change, running a `HydrostaticFreeSurfaceModel` simulation with a PGC free surface solver gave a ~20% speedup on the CPU.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2725:152,test,test,152,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2725,2,"['Benchmark', 'test']","['BenchmarkTools', 'test']"
Testability,"Here:. ```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). coriolises = [FPlane(f=1.0) FPlane(f=1.0); FPlane(f=1.0) FPlane(f=1.1)]. model_kwargs = (; tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.01, stop_iteration=100). models = [HydrostaticFreeSurfaceModel(; grid, coriolis=coriolises[i, j], model_kwargs...) for i=1:2, j=1:2]. set_ic!(model) = set!(model, u=sqrt(2), v=sqrt(2)). for model in models; set_ic!(model); simulation = Simulation(model; simulation_kwargs...); run!(simulation); end . ensemble_size = ColumnEnsembleSize(Nz=2, ensemble=(2, 2), Hz=1); ensemble_grid = RectilinearGrid(size=ensemble_size, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1); ensemble_model = HydrostaticFreeSurfaceModel(; grid=ensemble_grid, coriolis=coriolises, model_kwargs...); set_ic!(ensemble_model); ensemble_simulation = Simulation(ensemble_model; simulation_kwargs...); run!(ensemble_simulation). for i = 1:2, j = 1:2 ; @test parent(ensemble_model.velocities.u)[i, j, :] == parent(models[i, j].velocities.u)[1, 1, :]; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308131024:37,Test,Test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308131024,2,"['Test', 'test']","['Test', 'test']"
Testability,"Hey thanks for doing all this! Things look a lot neater. Just have a few comments/thoughts that I'll pepper throughout but should be good to merge!. > A `Model` constructor is now provided in which all important information can be input via keyword arguments. This is great for understanding what the model does, I agree. Would still be nice to keep the ""legacy constructor"" around for when you just want to create a simple `Model` for playing around with or for testing. And it makes for very nice and simple example code. > I also reduced the computational burden of a few of the tests, and changed to factor of 2 resolutions since this makes sense for FFTs (though relatively unimportant for testing, I think should encourage users to use powers of 2 and make a habit of using them ourselves). I would argue against this. While we should try to use powers of 2 for performance, I think that overly restricts the model resolutions we can be running at. There are a LOT of choices between e.g. `512x512x128` and `1024x1024x128`. It might be that the largest model that fits in memory isn't nice powers of 2. Users may have various reasons for running resolutions that aren't powers of 2. Either way, we should always be testing a wide range of grid sizes (and weird grid sizes like `109x77x13`) because the code should work for all of them. If computational cost becomes an issue we should look into paying for extra CI resources rather than reduce testing. > A few more notes:. Might be good to create some new issues based on those just to keep track of what needs to be done. > The examples are outdated. We should probably reduce the number of examples until the code becomes more stable, and commit to maintaining the few that remain. This is something I'm actively working on in a different branch. I'll make sure they work with the changes in this pull request. > Lots of work to do!. For sure!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/97#issuecomment-468525078:463,test,testing,463,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/97#issuecomment-468525078,5,['test'],"['testing', 'tests']"
Testability,"Hey! I just tried out the vertically stretched grid and I'm finding a few issues:. 1. The `OutputWriter` is complaining that there is no field `zC`; 2. It didn't work with the `FT=Float64` argument, so I am using the following. ```; grid = VerticallyStretchedRectilinearGrid(; architecture = GPU(),; size = (Nx,Ny,Nz), x=(0, Lx), y=(0, Ly), zF=zF,; halo = (3, 3, 3),; topology = (Periodic, Bounded, Bounded)); ```. 3. It asks me to use: `halo = (3, 3, 3)` and not `halo = (1, 1, 1)` . 4. For testing purposes, I tried using a linear grid with `zF = collect(-160:2.5:0)`. I ran for 1 short timestep and it produces NaN's in the `u` field. However, using the same linear grid with `RegularRectilinearGrid(size=(Nx, Ny, Nz), extent=(Δx*Nx, Δy*Ny, Δz*Nz), topology = (Periodic, Bounded, Bounded))` works fine. Any ideas?. Many thanks!",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1429:492,test,testing,492,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1429,1,['test'],['testing']
Testability,"Hi @c42f thank you for chiming in! Will definitely ping you as we work on logging. I think we probably should have tackled logging much earlier. We still use `@printf` and vanilla `@info` for logging, which has been quite counter-productive haha. Definitely hoping we can reach a useful logger that can; * help developers by providing info and debug messages. Also nice in test logs.; * help users understand what the model is doing and provide a better and more responsive user experience by logging what the model is doing. This is where `@setup` and `@diagnostic` logging messages might be really nice. Although `@setup` and `@diagnostic` might be bad names as they don't imply logging? Not sure of the best solution but maybe your kwarg suggestion would help here, e.g. `@info source=""diagnostic"" msg`?. @arcavaliere seems to be developing a pretty general-purpose `ModelLogger` which hopefully we can adapt for all these uses! @arcavaliere I'm more than happy to help if you need anything. MicroLogging.jl looks pretty neat! I like that it puts the log level, file name, and line number on the right as putting them on the left causes messages not to align and makes logs harder to read. TensorBoardLogger looks pretty cool! Would be awesome to have something like that one day, but I guess you'd have to use something like ncusrses...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-542677876:74,log,logging,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-542677876,11,"['log', 'test']","['log', 'logger', 'logging', 'logs', 'test']"
Testability,"Hi @navidcy - you have great timing - it looks like the most recent release of the julia-vscode extension fixed the issue - I have tested it on a basic Oceananigans script and the debugger seems to be working now. the core issue here was with JuliaInterpreter.jl which was fixed and updated in the julia-vscode extension, which then fixed the issue. thank you so much for your help and patience!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1697433147:131,test,tested,131,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1697433147,1,['test'],['tested']
Testability,"Hi @navidcy, thanks for checking in!. I have been using `RegularRectilinearGrid ` for now and have not tried going back to `VerticallyStretchedRectilinearGrid` with the latest version of Oceananigans. If it's useful, I'm happy to test this out, but I might not be actively using the stretched grid for the time being.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1574#issuecomment-882726654:230,test,test,230,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1574#issuecomment-882726654,1,['test'],['test']
Testability,"Hi @simone-silvestri ; Thank for the suggestion.; I see the change in `flat_advective_fluxes`. I will do some test to see if I can reproduce my previous result. ; However, I think it is quite weird to keep other terms without the advection. Why don't we turn off whole u momentum calculation? Also, I think several examples still treat `flat` as a flat periodic boundary (e.g., Tilted BBL). . @glwagner I update the grid layout in the main text.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2742#issuecomment-1252620822:110,test,test,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2742#issuecomment-1252620822,1,['test'],['test']
Testability,Hi @syou83syou83. Can you please add to the post a logfile of the error you are getting?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2395#issuecomment-1083533441:51,log,logfile,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2395#issuecomment-1083533441,1,['log'],['logfile']
Testability,"Hi All,. I rerun the simulations using the newest version of the code, . julia>; [17:03]fspereira@ch-fe1[/lustre/scratch5/fspereira/OCEANANIGANS/test/case5]# julia; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> import Pkg. julia> Pkg.status(""Oceananigans""); Status `~/.julia/environments/v1.6/Project.toml`; [9e8cae18] Oceananigans v0.77.5. and a script based on the one available on oceananigans webpage (I only changed the grid size, constant, and set the random seed. I also tried without these changes):. [https://github.com/CliMA/Oceananigans.jl/blob/main/examples/ocean_wind_mixing_and_convection.jl](https://urldefense.com/v3/__https://github.com/CliMA/Oceananigans.jl/blob/main/examples/ocean_wind_mixing_and_convection.jl__;!!Bt8fGhp8LhKGRg!Hq-26fs0ZjyKWL5dfg0ho6lLfmeo_jfgVK18dHbvsUBFODEetRH9g_Jail-Z6ZLUs4OLQeSzVSKFWq6Ve2_bO315jP8wE0frJVA$). Unfortunately, the new code/script led to the same reproducibility problem. I ran 4 simulations using the same script (attached) and obtained 4 different average ww profiles. . ![tec_ww_time_c1](https://user-images.githubusercontent.com/80914369/193948250-57bde9a3-ab27-4224-a443-341599e2107e.png). [c16_128_128m.jl.zip](https://github.com/CliMA/Oceananigans.jl/files/9711438/c16_128_128m.jl.zip). Any ideas or suggestions?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1267712816:145,test,test,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1267712816,1,['test'],['test']
Testability,"Hi Oceananigans,. Thank you very much for making your code open!; @olmozavala and I are currently testing out to see if we can run realistic simulations of the Gulf of Mexico but the documentation (https://clima.github.io/OceananigansDocumentation/stable/appendix/library/#Oceananigans.Grids.LatitudeLongitudeGrid) seems to only have examples with a flat bottom. Could you advise how one would prescribe a realistic ocean bathymetry?. Thank you.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3389:98,test,testing,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3389,1,['test'],['testing']
Testability,Hi all! . Thank you for the helpful advice and sorry for my delayed response! I am using shared gpu resources on my school's HPC and have not been able to access any resources to test anything out yet so I will update here once I can get some testing done on my side. Thank you again for the help!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1509#issuecomment-812702328:179,test,test,179,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1509#issuecomment-812702328,2,['test'],"['test', 'testing']"
Testability,"Hi all! I've been testing the Lagrangian particles method (ideally on GPUs, but I'm including the error messages for CPU compilation for simplicity) and am running into two issues: (1) tracking dynamical fields, and using (2) Lagrangian particles with immersed boundary active. Would love to hear what is working/isn't available w.r.t. this method or if I'm making a mistake somewhere ... or any other suggestions!. (1) (solved, see comment below) Tracking dynamical fields I'm testing here is the LagrangianParticles for temperature/salinity (version below testing for CPUs). I tested Lagrangian particle tracking for saving x,y,z locations first, which works. However, once I add in T as a tracked field:. ```Julia. #++++ Lagrangian particles. n_particles = 1000;. x₀ = 50*ones(n_particles); . y₀ = (rand(n_particles).-0.5)*params.Ly;. z₀ = params.Lz*rand(n_particles); . T=3*ones(n_particles); # the initialization shouldn't matter?. struct CustomParticle; x::Float64 # x-coordinate; y::Float64 # y-coordinate; z::Float64 # z-coordinate; T::Float64 # Temperature; end. particles = StructArray{CustomParticle}((x₀, y₀, z₀, T));. # Define tracked fields as a NamedTuple; tracked_fields = (T=particles.T,). # Initialize LagrangianParticles with the StructArray and tracked fields; lagrangian_particles = LagrangianParticles(particles; tracked_fields=tracked_fields). #include in the model setup; model = NonhydrostaticModel(grid = grid, ; particles=lagrangian_particles,; advection = WENO(grid=grid, order=5),; timestepper = :QuasiAdamsBashforth2, ; tracers = (:T, :S),; buoyancy = Buoyancy(model=SeawaterBuoyancy(equation_of_state=LinearEquationOfState(thermal_expansion = 3.87e-5,; haline_contraction = 7.86e-4)), gravity_unit_vector=(-sind(θ),0,-cosd(θ))),; coriolis = FPlane(0e-4),; closure = closure,; forcing = forcing,; boundary_conditions = boundary_conditions,; ). ```. I get the following error:. ```Julia. LoadError: MethodError: _fractional_indices(::Tuple{Float64, Float64, Float64}, ::Re",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3609:18,test,testing,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3609,4,['test'],"['tested', 'testing']"
Testability,"Hi all, I recently switched from using v0.30.0 to using the latest version of the master branch, and I am now unable to add the CuArrays package, as it seems to clash with some of the packages used by Oceananigans. Has anyone else experienced this? I was able to reproduce this issue on two computers. When reverting back to v0.30.0, I have no such problem and can add CuArrays without packages clashing. Thanks for letting me know if you get the same issue!. Full error message suggest that Adapt, GPUArrays, CUDA and NNlib are clashing with CuArrays but I am a beginner at Julia so not sure I interpret the error correctly. I tried removing Oceananigans and all dependencies, installing CuArrays first and then adding Oceananigans, but I get the same problem doing things in that order. ```; ERROR: Unsatisfiable requirements detected for package CuArrays [3a865a2d]:; CuArrays [3a865a2d] log:; ├─possible versions are: [0.2.1, 0.3.0, 0.4.0, 0.5.0, 0.6.0-0.6.2, 0.7.0-0.7.3, 0.8.0-0.8.1, 0.9.0-0.9.1, 1.0.0-1.0.2, 1.1.0, 1.2.0-1.2.1, 1.3.0, 1.4.0-1.4.7, 1.5.0, 1.6.0, 1.7.0-1.7.3, 2.0.0-2.0.1, 2.1.0, 2.2.0-2.2.2] or uninstalled; ├─restricted to versions * by an explicit requirement, leaving only versions [0.2.1, 0.3.0, 0.4.0, 0.5.0, 0.6.0-0.6.2, 0.7.0-0.7.3, 0.8.0-0.8.1, 0.9.0-0.9.1, 1.0.0-1.0.2, 1.1.0, 1.2.0-1.2.1, 1.3.0, 1.4.0-1.4.7, 1.5.0, 1.6.0, 1.7.0-1.7.3, 2.0.0-2.0.1, 2.1.0, 2.2.0-2.2.2]; ├─restricted by compatibility requirements with Adapt [79e6a3ab] to versions: [0.2.1, 0.3.0] or uninstalled, leaving only versions: [0.2.1, 0.3.0]; │ └─Adapt [79e6a3ab] log:; │ ├─possible versions are: [0.3.0-0.3.1, 0.4.0-0.4.2, 1.0.0-1.0.1, 1.1.0, 2.0.0-2.0.2] or uninstalled; │ └─restricted to versions 2 by Oceananigans [9e8cae18], leaving only versions 2.0.0-2.0.2; │ └─Oceananigans [9e8cae18] log:; │ ├─possible versions are: 0.30.0 or uninstalled; │ └─Oceananigans [9e8cae18] is fixed to version 0.30.0; ├─restricted by compatibility requirements with GPUArrays [0c68f7d7] to versions: 0.2.1",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/796:891,log,log,891,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/796,1,['log'],['log']
Testability,"Hi all,. I think there's been a mistake in the open boundary filling that's only becoming a problem now that we're trying to fill non-zero value. https://github.com/CliMA/Oceananigans.jl/blob/3ea2545331d9910d8b467dd8eb31074fb426af5b/src/BoundaryConditions/fill_halo_regions_open.jl#L86-L91. The open fill has always set point at index `1` on the right hand side and `grid.N+1` on the right hand side, but `1` is part of the prognostic domain and halo points we need are just for computing gradients at the face point, which should be at `0`. I came across this because I've only been testing open boundaries on the right side, but was checking it worked in the other directions and realised it always failed when I just switched the direction and sides for a simple case. Am I missing something here?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810:584,test,testing,584,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810,1,['test'],['testing']
Testability,"Hi all,. Thanks, @glwagner for creating the [PR](https://github.com/CliMA/Oceananigans.jl/pull/3660) for solving the issue of `TimeInterval`. After merging it, I noticed a potential problem related to `AveragedTimeInterval`. Specifically, when resuming from a checkpoint, discontinuity seems to occur. For instance, in the figure below, the tidally averaged velocity is saved for each tidal period. The first run covers days 0-20, and the second run covers days 20-40. A noticeable discontinuity appears at the checkpoint transition from the first run.; <img width=""301"" alt=""image"" src=""https://github.com/user-attachments/assets/ffe04dc8-d829-49a7-8052-0b5a58c2b9a3"">. Here is a MWE for this issue:; ```julia; # this is a MWE for reproducing errors from using AveragedTimeInterval; using Oceananigans; using Printf; using Plots. """""" Set up a simple simulation to test picking up from a checkpoint. """""". function test_simulation(stop_time, Δt, δt, overwrite); grid = RectilinearGrid(size=(2), z = (-1,1), topology=(Oceananigans.Flat, Oceananigans.Flat, Oceananigans.Bounded)); uᵢ(z) = 0; T=2; u_forcing(z, t) = 10*sin(2*pi/T*t). model = NonhydrostaticModel(; grid, ; forcing = (u = u_forcing,),; timestepper = :RungeKutta3). ; set!(model, u=uᵢ). simulation = Simulation(model; Δt, stop_time); u = model.velocities.u. progress_message(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress_message, TimeInterval(δt)). simulation.output_writers[:timeavg] = NetCDFOutputWriter(model, (u=u,),; filename = ""timeavg.nc"",; schedule = AveragedTimeInterval(δt, window=δt),; # schedule = TimeInterval(δt),; overwrite_existing = overwrite); ; checkpointer = Checkpointer(model,; schedule = TimeInterval(stop_time),; prefix = ""test"",; cleanup = true). simulation.output_writers[:checkpointer] = checkpointer. return simulation; end. run(`sh -c ""rm test_iteration*.jld2""`). Δt = .01 # timestep (s); T1 = 5 # first simulation stop time (s); ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670:865,test,test,865,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670,1,['test'],['test']
Testability,"Hi all,; I have met some strange things in a simple channel flow case, the velocity profile is larger than the log-low profile, and the momentum flux of the second and third points are obviously lower than bottom boundary condition (or other point near the bottom boundary). The code is written below, what causes this difference?; ![u_profile (2)](https://github.com/CliMA/Oceananigans.jl/assets/117068415/14e2c865-ec3b-4065-a13a-213a99257d31); ![uw_flux (1)](https://github.com/CliMA/Oceananigans.jl/assets/117068415/1cd16836-6f59-465b-8d02-0577052b52ba). ```julia; const H=15 #/m; grid = RectilinearGrid(GPU(),size=(64,64,64), extent=(π*H, π*H, H)); const u★=0.01 #friction velocity; Fx(x,y,z,t)=u★^2/H #forcing. const z₀ = H*1e-4 # m (roughness length); const κ = 0.4 # von Karman constant; const z₁ = -1*znodes(Center,grid)[grid.Nz] # Closest grid center to the bottom; const cᴰᵇ = (κ / log(z₁ / z₀))^2 # Drag coefficient. @inline drag_u(x, y, t, u, v, p) = - p.cᴰᵇ * √(u^2 + v^2) * (u); @inline drag_v(x, y, t, u, v, p) = - p.cᴰᵇ * √(u^2 + v^2) * (v). drag_bc_u = FluxBoundaryCondition(drag_u, field_dependencies=(:u, :v), parameters=(; cᴰᵇ)); drag_bc_v = FluxBoundaryCondition(drag_v, field_dependencies=(:u, :v), parameters=(; cᴰᵇ)). u_bcs = FieldBoundaryConditions(top=FluxBoundaryCondition(0.0),bottom = drag_bc_u); v_bcs = FieldBoundaryConditions(bottom = drag_bc_v). model = NonhydrostaticModel(; grid, coriolis,; advection = WENO(),; timestepper = :RungeKutta3,; tracers =(:T,:S),; buoyancy = SeawaterBuoyancy(),; closure = AnisotropicMinimumDissipation(),; boundary_conditions = (u=u_bcs,v=v_bcs,T=T_bcs,S=S_bcs),; forcing=(u=Fx,)); ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195:111,log,log-low,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195,2,['log'],"['log', 'log-low']"
Testability,"Hi,; I encounter an error when running `pkg> test Oceananigans` despite being able to run example simulation internal_wave.jl on both CPU and GPU. The description of CUDA error code 201 is also attached below. ```; ERROR: LoadError: CUDA error (code 201, CUDA_ERROR_INVALID_CONTEXT); Stacktrace:; [1] throw_api_error(::CUDAdrv.cudaError_enum) at /home/raphael/.julia/packages/CUDAdrv/Uc14X/src/error.jl:105; [2] macro expansion at /home/raphael/.julia/packages/CUDAdrv/Uc14X/src/error.jl:112 [inlined]; [3] cuCtxGetDevice(::Base.RefValue{Int32}) at /home/raphael/.julia/packages/CUDAapi/XuSHC/src/call.jl:93; [4] device at /home/raphael/.julia/packages/CUDAdrv/Uc14X/src/context.jl:142 [inlined]; [5] device! at /home/raphael/.julia/packages/CUDAnative/ierw8/src/init.jl:198 [inlined]; [6] device!(::CUDAdrv.CuDevice) at /home/raphael/.julia/packages/CUDAnative/ierw8/src/init.jl:188; [7] top-level scope at /home/raphael/.julia/packages/Oceananigans/1xP6n/test/runtests.jl:74; [8] include(::String) at ./client.jl:439; [9] top-level scope at none:6; in expression starting at /home/raphael/.julia/packages/Oceananigans/1xP6n/test/runtests.jl:61; ERROR: Package Oceananigans errored during testing; ```. Has anyone encountered this issue? I am on master 0.30.0. Thanks for your help!; ![Screenshot_2020-07-02 CUDA Driver API CUDA Toolkit Documentation](https://user-images.githubusercontent.com/31293515/86409162-4f484f80-bc86-11ea-8736-bad7a9da5345.png)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/788:45,test,test,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/788,4,['test'],"['test', 'testing']"
Testability,"Hi,; I have been working with a shallow water model simulation that consists simply of a stochastic height field as the initial condition. It's been working well on a 2pi by 2pi domain without using the Units module. . However, once I tried to scale this same simulation to a 2000km by 2000km domain, I encountered some issues. Specifically, it seems the simulation becomes static. The output I'm viewing is just the height field animation. I also apologize if the initial condition code is confusing and added an image of the initial height function. I scaled the initial height function to match the domain so that should not be a source of bugs, theoretically. I've been testing and trying to fix this issue but am not sure what to do. . Thanks for any help or advice!. **Code:**; ```; using Oceananigans; using Oceananigans.Models: ShallowWaterModel; using Oceananigans.Units. #Parameters; Nx, Ny = 128, 128; Lx = 1000kilometer; Ly = 1000kilometer. grid = RectilinearGrid(size = (Nx, Ny),; x=(-Lx, Lx), y=(-Lx, Ly),; topology = (Periodic, Periodic, Flat)). model = ShallowWaterModel(; grid=grid,; gravitational_acceleration=9.81,; coriolis=FPlane(f=1),; ). #SMOOTH RANDOM FUNCTION; using Random; Random.seed!(17). n = 16; m = 16; len = n * m * 4. global alea; alea = rand(-1:1, (n, m, 4)). function rand_smth(x::Float64, y::Float64); X = x / 1000000; Y = y / 1000000; val = 0; for i in 1:n; for j in 1:m; ar = alea[i,j,1]; br = alea[i,j,2]; cr = alea[i,j,3]; dr = alea[i,j,4]; val += ar * cos(i * x) * cos(j * y); val += br * cos(i * x) * sin(j * y); val += cr * sin(i * x) * cos(j * y); val += dr * sin(i * x) * sin(j * y); end; end; return val; end; #End of smooth random function. H = 1kilometer # unperturbed layer depth. h₀(x, y, t) = H + rand_smth(x,y). set!(model, h=h₀). uh, vh, h = model.solution. simulation = Simulation(model, Δt=0.002, stop_iteration=10000). using Oceananigans.OutputWriters: JLD2OutputWriter, IterationInterval. simulation.output_writers[:fields] =; JLD2OutputWriter(",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2671:674,test,testing,674,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2671,1,['test'],['testing']
Testability,"High-order advection schemes invoke wide stencils that can produce unintended non-zero fluxes across solid immersed boundaries. This PR elides advective fluxes across immersed boundaries for `GridFittedImmersedBoundary` to address that. In addition, we should probably introduce boundary-conditional interpolation so that we limit to second-order advection close to immersed boundaries. I'll drop that into this PR too and add a test for high-order advection with immersed boundaries.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1719:429,test,test,429,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1719,1,['test'],['test']
Testability,"Higher resolution... ## h = 0.1; https://user-images.githubusercontent.com/15271942/164504233-495feaa3-47b9-46f7-8c31-b26c2ec1301c.mp4. ## h = 0.2; https://user-images.githubusercontent.com/15271942/164504265-94bd02b7-a78f-4bac-92ee-47ce3150f092.mp4. the `h = 0.2` are weird. Possibly the viscosity is not high enough so at that topographic height the solution is dominated by form drag / topographic interaction. I'm running another suite at lower Re to test that. Overall it looks like things are working, but cases with strong topographic interaction may require a new pressure solver if the momentum budget is important.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105427369:455,test,test,455,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105427369,1,['test'],['test']
Testability,Hijacking @christophernhill's branch and work!. @jm-c set up the same velocity halo exchange from https://github.com/CliMA/Oceananigans.jl/blob/7cc147bbf831fe4de66584d812e56debcfa6e43f/test/test_cubed_sphere_halo_exchange.jl#L378-L382 in MITgcm from which we were able to figure out where the Oceananigans cubed sphere halo exchange was going wrong. There were a several discrepancies (all at halo corners or adjacent to the halo corners). ```; u face 1: 2 discrepancies; v face 1: 3 discrepancies; u face 2: 2 discrepancies; v face 2: 3 discrepancies; u face 3: 1 discrepancies; v face 3: 2 discrepancies; u face 4: 1 discrepancies; v face 4: 3 discrepancies; u face 5: 0 discrepancies; v face 5: 2 discrepancies; u face 6: 0 discrepancies; v face 6: 2 discrepancies; u: 6 discrepancies; v: 15 discrepancies; ```. Not totally sure why our halo exchange algorithm isn't filling these correctly so for now we fix each one after filling all the velocity halos. Now that our halo exchange exactly matches MITgcm's we might want to add some extra tests to make sure we're testing each of these points. Some existing tests need to be cleaned up too. After this fix the Rossby-Haurwitz validation seems pretty happy (it used to exhibit numerical artifacts at some corners then blow up after a few days). https://user-images.githubusercontent.com/20099589/118747990-0317e680-b829-11eb-94c3-40002f928e52.mp4. The eddying aquaplanet validation from PR #1602 doesn't look as happy so it might still have setup issues (and maybe also plotting issues since vorticity is at the corners).,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1669:185,test,test,185,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1669,4,['test'],"['test', 'testing', 'tests']"
Testability,"Hm, I see... you might be trying to run the one found inside the `validation` directory, right?. I suggest you start of by trying to run the scripts in the `examples` directory. They are continuously tested and should run with the latest version. We'll figure out though the issues and fix the problems for the scripts that live in the `validation` directory (if you are specifically interested on one of those).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-807697594:200,test,tested,200,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-807697594,1,['test'],['tested']
Testability,Hm... I also noticed they were defined here:; https://github.com/CliMA/Oceananigans.jl/blob/a3faff771f3dec60be12cc7fab8ebabeffc1657e/test/test_time_stepping.jl#L202; so I thought the code I removed was redundant. But perhaps some tests were using that... I'll look into it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2016#issuecomment-946342621:133,test,test,133,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2016#issuecomment-946342621,2,['test'],"['test', 'tests']"
Testability,Hm... You didn't rush to merge. Tests on master look OK: https://buildkite.com/clima/oceananigans/builds/1587. Also the example seems to be in its latest and greatest version :); https://github.com/CliMA/Oceananigans.jl/blob/27b1324dca660ce8cb7f5e205dd7400bdd23cb3d/examples/Bickley_jet_shallow_water.jl#L83-L86. Also the `dev` version of the docs includes the example: https://clima.github.io/OceananigansDocumentation/dev/generated/Bickley_jet_shallow_water/; (without the `\begin{align}...`) You may need to refresh the browser to see it? Or make sure you select `dev` version from the dev; I think the default version of the docs you see is the latest stable tagged release. The buildkite icon status I think is confused...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798958905:32,Test,Tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798958905,1,['Test'],['Tests']
Testability,Hmm yes and this also must not be tested!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3681#issuecomment-2269869101:34,test,tested,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3681#issuecomment-2269869101,1,['test'],['tested']
Testability,"Hmm, I can't reproduce the same results exactly. All I did before was honestly open a Julia session and just paste the examples you guys posted one by one. Here's [a pastebin](https://pastebin.com/gC5k5n7X) with my whole session testing the commands I got in the previous post. (The comments of course don't reflect the outcome anymore.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-746683879:229,test,testing,229,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-746683879,1,['test'],['testing']
Testability,"Hmm, I don't think we have tested that we can _re-index_ a `WindowedField`. That's what we're trying to do here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1116295969:27,test,tested,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1116295969,1,['test'],['tested']
Testability,"Hmm, I looked at one of the errors and saw the following:. ```. Immersed boundaries with hydrostatic free surface models: Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-5/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl:4;   | Got exception outside of a @test;   | The grid halo (1, 1, 1) must be larger than either (1, 1, 1) or (3, 3, 3);  ; ```. Can't say I know what's going wrong though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2108#issuecomment-989074195:135,Test,Test,135,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2108#issuecomment-989074195,3,"['Test', 'test']","['Test', 'test']"
Testability,"Hmm, check your environment again, or try restarting julia, because I don't think you should get that error (the tests pass for example, suggesting that things run without erroring)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2386780100:113,test,tests,113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2386780100,1,['test'],['tests']
Testability,"Hmm, interesting. The test uses. ```julia; window = 6Δt ; stride = 2 ; ```. I wonder if we should try fractional windows like you use. Maybe there's a bug associated with the 1.999. I'll set up something quickly.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-818004533:22,test,test,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-818004533,1,['test'],['test']
Testability,"Hmm, it could make sense to make benchmarking results more prominent. Please feel free to update the benchmarks. More generally I think we need a streamlined way of updating the benchmarks so that we can recreate them easily for (for example) every minor release.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880829840:33,benchmark,benchmarking,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880829840,3,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"Hmm, the benchmark uses old syntax, though I do think we should benchmark immersed boundary stuff. I'm going to close this because it's outdated, but I'll open an issue about writing comprehensive and useful benchmarks for `ImmersedBoundaryGrid`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1699#issuecomment-1104645049:9,benchmark,benchmark,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1699#issuecomment-1104645049,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Hmm, we could set up a test that uses momentum. I'm not sure the physics of the model matter here, this more seems to be an issue with how time-averaging works (thus a forced tracer is hopefully sufficient --- but we may need to try to average diagnostics / computed fields?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817983202:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817983202,1,['test'],['test']
Testability,"Hmm, well I guess we should add that combination to. https://github.com/CliMA/Oceananigans.jl/blob/main/benchmark/benchmark_hydrostatic_model.jl. and re-run the benchmarks.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172668651:104,benchmark,benchmark,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172668651,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Hmm, well it looks like we do compute arguments:. https://github.com/CliMA/Oceananigans.jl/blob/abd447980898bcbfe099d71258d4e52f3cf090f9/src/AbstractOperations/kernel_function_operation.jl#L75. But if the arguments are themselves wrapped inside a `NamedTuple` --- or any other object --- then they won't be computed. In other words `compute!(perturbation_velocities)` does not compute the elements of `perturbation_velocities`. We could add a method `compute!(tup::Tuple) = Tuple(compute!(t) for t in tup)` and also for `NamedTuple`. But I'm not sure this is the best API. Maybe it's better to require that arguments that need to be computed should be included directly as arguments. Seems like its up for debate. PS it does seem to test this correctly then we need to further evaluate . ```julia; f_perturbation = Field(f_perturbation_op); compute!(f_perturbation); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3455#issuecomment-1927373508:733,test,test,733,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3455#issuecomment-1927373508,1,['test'],['test']
Testability,"Hmm. I believe that scalar operations are (or were) _specifically_ allowed globally in our `runtests.jl`, overriding any default. Thus `@disallowscalar` was used to disallow scalar operations for certain testing code without disallowing them globally for all subsequent tests. I don't think it matters whether or not scalar iteration is allowed by default since we are manually controlling that setting. Furthermore, I don't think removing `@disallowscalar` would cause tests to fail; rather, it means that those tests _will_ pass even if they have scalar operations (where previously they would not have passed or would have thrown an error). Instead of using `@disallowscalar` we can flip the global state; eg we can replace. ```julia; @disallowscalar statement; ```. with. ```julia; CUDA.allowscalar(false); statement; CUDA.allowscalar(true); ```. Perhaps this is what we want?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863612256:204,test,testing,204,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863612256,4,['test'],"['testing', 'tests']"
Testability,Hmm... I'm going to test whether JLD2 works with 1.6...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1547#issuecomment-814257048:20,test,test,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1547#issuecomment-814257048,1,['test'],['test']
Testability,Hmm... there's a function in `CUDA.jl` called `partial_mapreduce_grid` that might contain logic that depends on the size of the kernel (not sure): https://github.com/JuliaGPU/CUDA.jl/blob/92f1001861641cb173af49454b05c91728cbfc3d/src/mapreduce.jl#L91,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1684#issuecomment-845597699:90,log,logic,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1684#issuecomment-845597699,1,['log'],['logic']
Testability,Hmmm a lot of failures due to CUDA scalar `getindex` operations even though we explicitly set `CUDA.allowscalar(true)` in `runtests.jl`... We could take this opportunity to get rid of all scalar operations in the tests and just use `CUDA.@allowscalar` where it's needed. Maybe new CUDA scalar operations are hurting performance and that's why GPU CI has slowed down?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-816964002:213,test,tests,213,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-816964002,1,['test'],['tests']
Testability,"Hmmm, I don't know if many log levels will be that helpful. I guess for debug messages we'll want to have the file name and line number, but for user-facing info messages maybe we should remove the file name and line number and instead a custom log level like `DIAGNOSTIC` or `MODEL_SETUP` will be useful. I think one place that logging can hugely improve user experience is in setting up large models, especially on the GPU, where you could be waiting for several minutes while all of Julia, CUDA, and Oceananigans compiles, model is being set up, memory is allocated, etc. We know it takes time but most users will think that something is wrong if Julia is silent for 5 minutes. In this context info messages can be useful and reassure the user that Oceananigans is working properly. It's well known that progress indicators improve user experience, e.g.: https://www.nngroup.com/articles/progress-indicators/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-546952192:27,log,log,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-546952192,3,['log'],"['log', 'logging']"
Testability,"Hmmm, I think it was created with the first PR that introduces the test and then left untouched. What if we regenerate the data in main. Will it work on previous versions?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439353217:67,test,test,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439353217,1,['test'],['test']
Testability,"Hmmm, a GPU Enzyme test is consistently failing and distributed tests are segfaulting. Lemme re-run the builds and hope things magically change haha :crossed_fingers:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3902#issuecomment-2459940162:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3902#issuecomment-2459940162,2,['test'],"['test', 'tests']"
Testability,"Hmmm, looks like it's failing the verification experiment tests but passes everything else... ```; 336 Stratified Couette flow verification [CPU]: Error During Test at /builds/JuliaGPU/Oceananigans-jl/test/test_verification.jl:25; 337 Test threw exception; 338 Expression: run_stratified_couette_flow_verification(arch); 339 UndefVarError: simulate_stratified_couette_flow not defined; 340 Stacktrace:; 341 [1] run_stratified_couette_flow_verification(::CPU) at /builds/JuliaGPU/Oceananigans-jl/test/test_verification.jl:14; 342 [2] top-level scope at /builds/JuliaGPU/Oceananigans-jl/test/test_verification.jl:25; 343 [3] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Test/src/Test.jl:1083; 344 [4] top-level scope at /builds/JuliaGPU/Oceananigans-jl/test/test_verification.jl:24; 345 [5] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Test/src/Test.jl:1083; 346 [6] top-level scope at /builds/JuliaGPU/Oceananigans-jl/test/test_verification.jl:20; ```. Will look into it. Should be a simple fix.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/559#issuecomment-563230624:58,test,tests,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/559#issuecomment-563230624,6,['test'],"['test', 'tests']"
Testability,"Hmmm, maybe more of a question for @glwagner but can you nest `ComputedField`s (is it tested?)? I think I always passed an abstract operation to a `ComputedField`. So I might try. ```julia; u_tot = u + U; b_tot = b + B. Ro_abs = ComputedField(-∂y(u_tot) / f0); Ri_abs = ComputedField(∂z(b_tot) / (∂z(u_tot)^2)); dbdz_abs = ComputedField(∂z(b_tot)); dudz_abs = ComputedField(∂z(u_tot)); Ri_abs2 = ComputedField(∂z(b_tot) / ∂z(u_tot)^2); ```. Otherwise might help to describe how `compute!(Ri_abs)` and `compute!(Ri_abs2)` are different from `Ri_cons`, e.g. is it completely wrong, factor of 2, only wrong at the boundary, etc.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1323#issuecomment-768625302:86,test,tested,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1323#issuecomment-768625302,1,['test'],['tested']
Testability,"Hmmm, not sure what the issue could be but dissipation field does look well-behaved. I agree that the time average isn't what I would expect based on the movie of the dissipation snapshots. Maybe the best way to approach this is to design a simple test that uses `KernelComputedField` + `TimeAveragedInterval`?. I'll have a look at the code to see if there's anything that stands out.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809585691:248,test,test,248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809585691,2,['test'],['test']
Testability,"Hmmm, should we be using [`CUDA.has_cuda_gpu`](https://cuda.juliagpu.org/dev/api/essentials/#CUDA.has_cuda_gpu) instead of [`CUDA.has_cuda`](https://cuda.juliagpu.org/dev/api/essentials/#CUDA.has_cuda)?. Since Tartarus actually has GPUs (we just hide them via an environment variable in CI, e.g. https://github.com/CliMA/Oceananigans.jl/blob/main/.buildkite/pipeline.yml#L77) I can see `CUDA.has_cuda_gpu` returning false (which we want) while `CUDA.has_cuda` would return true (not what we want). This might fix the unit tests (`test_field.jl`) but there are other failures that might not be related to this. Confusingly I see no recent changes in CUDA.jl that would lead to a difference in behavior for `has_cuda` (see changes for `src/initialization.jl`) but there were a lot of changes between v3.3.6 and v3.5.0 that I wouldn't understand: https://github.com/JuliaGPU/CUDA.jl/compare/v3.3.6...v3.5.0",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942845682:522,test,tests,522,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942845682,1,['test'],['tests']
Testability,"Hmmm, the `@test ds isa FieldDataset` test is passing but all the other tests are failing with ``UndefVarError: `ds` not defined`` even though they come right after and within the scope of the same `@testset`... Reproduces locally too. Will see if I can fix it locally. EDIT: Never mind, was a typo. This is why we write tests and actually read the stack trace...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3754#issuecomment-2338824132:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3754#issuecomment-2338824132,5,['test'],"['test', 'tests', 'testset']"
Testability,"Hmmm, yeah one issue is that we don't actually test `show` methods. Perhaps it would be good to add a bunch of `show` tests which would also increase code coverage. _Originally posted by @ali-ramadhan in https://github.com/climate-machine/Oceananigans.jl/issues/700#issuecomment-599480673_",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/705:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/705,2,['test'],"['test', 'tests']"
Testability,"Hmnm, I thought there existed a Poisson solver that worked for each topology. Maybe I'm wrong?. I looked at your code and see you want to use `(Periodic, Flat, Bounded)`. I also checked in `test_poisson_solver.jl` and see this does test that particular topology but the test is for instantiating. . Is it possible that the model can instantiate but not solve the poisson problem for this topology? If yes then do we want a stronger test?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-877905755:232,test,test,232,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-877905755,3,['test'],['test']
Testability,"Honestly, my thought is that that test should catch the error already. I; can't immediately think of anything else required.; I might implement that test manually on my end and see if the results are; correct. Like I said, there's a possibility that I'm just using; AveragedTimeInterval wrong... On Mon, Apr 12, 2021 at 10:13 AM Gregory L. Wagner ***@***.***>; wrote:. > We have a test that satisfies those requirements I believe:; >; >; > https://github.com/CliMA/Oceananigans.jl/blob/39ee546803b05fdf1fdaec2880fede5b5aaebe10/test/test_netcdf_output_writer.jl#L476-L570; >; > In particular it uses a tracer solution that decays exponentially in time; > at a rate that is different at every grid point.; >; > What are the additional ingredients in your script that lead to a bug?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817981813>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADEX5KVVXNDWA7HVZ4HYBTTTIMS4HANCNFSM4Z7XXUAQ>; > .; >. -- ; Tomás L. Chor; Postdoctoral researcher; Atmospheric and Oceanic Science department; University of Maryland; https://tomchor.github.io/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817984388:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817984388,4,['test'],['test']
Testability,How about a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1426238455:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1426238455,1,['test'],['test']
Testability,How about a test? If it's not trivial then don't worry.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896350743:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896350743,1,['test'],['test']
Testability,"How about few tests? E.g., some similar to what is discussed in #2189. Would that be useful you reckon?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1022625228:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1022625228,1,['test'],['tests']
Testability,"How about something like this. ```julia; archs = (CPU(),) # just to make this code run. timesteppers = (:QuasiAdamsBashforth2, :RungeKutta3); y_topologies = (Periodic(), Flat()); vertical_grids = (uniform=(-1,1), stretched=[-1, -0.5, 0.0, 0.4, 0.7, 1]). lagrangian_particle_test_grid(arch, ::Periodic, z) = RectilinearGrid(arch; topology=(Periodic, Periodic, Bounded), size=(5, 5, 5), x=(-1, 1), y=(-1, 1), z); lagrangian_particle_test_grid(arch, ::Flat, z) = RectilinearGrid(arch; topology=(Periodic, Flat, Bounded), size=(5, 5), x=(-1, 1), z). for arch in archs, timestepper in timesteppers, y_topo in y_topologies, (z_grid_type, z) in pairs(vertical_grids); @info "" Testing Lagrangian particle tracking [$(typeof(arch)), $timestepper] with y $(typeof(y_topo)) on vertically $z_grid_type grid ...""; grid = lagrangian_particle_test_grid(arch, y_topo, z); # run_simple_particle_tracking_tests(arch, grid, timestepper); @show grid; end; ```. which would give us these 8 (per architecture) test cases. ```julia; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Periodic on vertically uniform grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Periodic on vertically stretched grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Flat on vertically uniform grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232:669,Test,Testing,669,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232,2,"['Test', 'test']","['Testing', 'test']"
Testability,How about the tests that fail? Wanna work together to get them done?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528889163:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528889163,1,['test'],['tests']
Testability,"How about we work on a minimal test / example? If you can list the essential ingrdients, I can write up a test and submit a PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817964604:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817964604,2,['test'],['test']
Testability,How did the tracer advection test pass then?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3280#issuecomment-1744976086:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3280#issuecomment-1744976086,1,['test'],['test']
Testability,"How will we test code for Metal GPU? Is there anything available through github actions, or will we have to hook something up via buildkite?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3288#issuecomment-1732647490:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3288#issuecomment-1732647490,1,['test'],['test']
Testability,"However, we don't support reducing across the 4th dimension (yet). I think we should merge this now since it resolves #2424, but we should also raise an issue to add a test or two. Closes #2424",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2425:168,test,test,168,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2425,1,['test'],['test']
Testability,"Huh, I wasn't aware of that work! I'm amazed at how much is in there. Some of the air-sea stuff is overlapping with work we've done at ClimaOcean. I had assumed that we would want to implement bulk formula in the context of ClimaOcean's `OceanSeaIceModel`. But that package is taking a different approach, so maybe we should consider that. How should we proceed? I do think it's best to work on a single tool rather than copy or replicate efforts in many places. As for wall stress models for rough boundaries, given what I see in that package I feel it makes sense to design some generalizable infrastructure in Oceananigans for implementing / testing different wall models. What I've written above is merely one choice I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3807#issuecomment-2386230966:645,test,testing,645,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3807#issuecomment-2386230966,1,['test'],['testing']
Testability,"Huh, so its the difference between. https://user-images.githubusercontent.com/15271942/165942956-f73c2f7c-88dd-4c1a-9775-c209a2007894.mp4. where the hydrostatic pressure is treated _explicitly_ (via RK3 in this example) by integrating buoyancy, and. https://user-images.githubusercontent.com/15271942/165942854-8061b8fe-a254-4ed0-8f66-d6283415fd8a.mp4. where pressure is treated implicitly with an elliptic solve and fractional step (at every RK3 stage...). I tested reducing the time-step and don't see any convergence with time-step. Reducing the time-step and running 5 times as long produces. https://user-images.githubusercontent.com/15271942/165946791-6cb90b71-f361-42d9-82db-b16baaf6c3db.mp4. On `main` the same does:. https://user-images.githubusercontent.com/15271942/165952404-00e93a46-65a2-4b9b-a617-43a424f455b1.mp4. Note also these results depend on resolution (which I'm not showing). So it seems both are wrong but one is more so and it's O(1) in time. I also tested WENO5 advection (no difference) and high resolution (seems to make a difference).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1114810950:460,test,tested,460,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1114810950,2,['test'],['tested']
Testability,"Hummmm no, I don't. `cpudata` should be tested on the GPU. Where is that function used anyways?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-941344608:40,test,tested,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-941344608,1,['test'],['tested']
Testability,Hydrostatic model explicit vs. implicit free surface benchmarks + some small fixes,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1604:53,benchmark,benchmarks,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1604,1,['benchmark'],['benchmarks']
Testability,HydrostaticFreeSurfaceModel regression test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1373:39,test,test,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1373,1,['test'],['test']
Testability,I 'll merge when the last test passes,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1146244837:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1146244837,1,['test'],['test']
Testability,"I added a `ParticleAdvectionForcing` that behaves similarly to `dynamics(particles, model, Δt)` which allows user to specify any velocities it wishes to add to the model by passing in `NonHydrostaticModel(..., advective_forcing = ParticleAdvectiveForcing(u=some_u, v=some_v, w=some_w))` . The arguments are functions that take `(particles, model, Δt)` as inputs. . When I am trying to test my code I ran into a problem:; ```; ERROR: UndefVarError: `flattened_node` not defined; ```. https://github.com/CliMA/Oceananigans.jl/blob/a73e845a7a7bce8e22e9453670c1c20b67dbfc3a/src/Models/LagrangianParticleTracking/lagrangian_particle_advection.jl#L92. @simone-silvestri I see that you added this and I couldn't find anywhere in the code where `flattened_node` is defined. What is it supposed to be?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1837241191:385,test,test,385,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1837241191,1,['test'],['test']
Testability,"I added a script for looking at coarse, 3D baroclinic adjustment with GM starting with either a gradient in `y` or in `x`: https://github.com/CliMA/Oceananigans.jl/blob/0d04d4014c9ecc06deb158c42a2b3e3cd7699b31/validation/mesoscale_turbulence/coarse_baroclinic_adjustment.jl. It was tricky to get this to work in the first place; it seems we need diffusion to stabilize GM right now. I settled on adding biharmonic diffusivity with a time scale of 10 days. The script computes a mean in the direction perpendicular to the initial gradient. When the gradient is initially in `y`:. https://user-images.githubusercontent.com/15271942/164878441-a0660d6e-3241-4ec4-a473-cf0c65c70fa6.mp4. When the gradient is in `x`:. https://user-images.githubusercontent.com/15271942/164878658-18604606-9374-4008-894e-29ee7e49782a.mp4. From this it seems that the diffusivity is at least doing the right thing (but the stencil may still be non-optimal). We also need to test on a lat-lon grid.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107363713:949,test,test,949,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107363713,1,['test'],['test']
Testability,"I added a test for `WindowedSpatialAverage` but I the docs keep failing and I don't know why. I'd appreciate some help. Btw, when I test locally everything passes, but the github tests fail somewhere that I can't figure out.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787118994:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787118994,3,['test'],"['test', 'tests']"
Testability,"I added a test that fails due to #3829. I should also test the non-FFT case and test that the proper pre-conditioner was initialized. So the test could be better but it does fail as it should. What we need is a `using Oceananigans.ImmersedBoundaries` but the solvers module is defined well before the immersed boundaries module. So for a solver to depend on the immersed boundaries module, and really just the `ImmersedBoundaryGrid` type then the immersed boundaries module needs to be included first. Based on these comments maybe it's desirable to change the order of inclusion? But maybe it'll take some work. So otherwise we probably need to define another abstract type in `src/Oceananigans.jl` but this solution isn't ideal. https://github.com/CliMA/Oceananigans.jl/blob/13bf409616af8c155b72d8869b7b8f97ae0e844b/src/Oceananigans.jl#L214-L228. Resolves #3829",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3830:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3830,4,['test'],['test']
Testability,I added a test to #2397 but it doesn't catch this bug: https://github.com/CliMA/Oceananigans.jl/blob/5c35f5dcf1ca109938a66913b05cdbc2f1616509/test/test_lagrangian_particle_tracking.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2395#issuecomment-1084515653:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2395#issuecomment-1084515653,2,['test'],['test']
Testability,I added a test; feel free to modify at your liking!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1987940006:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1987940006,1,['test'],['test']
Testability,I added the flat lat/lon grid test because it has its own functions [here](https://github.com/CliMA/Oceananigans.jl/blob/main/src/Models/HydrostaticFreeSurfaceModels/single_column_model_mode.jl) which failed when I was testing something. But if this isn't tested elsewhere we might as well remove it? I also don't really see why it would exist since a lat/lon grid with flat dimensions is the same as a rectilinear grid.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630559577:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630559577,3,['test'],"['test', 'tested', 'testing']"
Testability,"I admit that I'm not quite satisfied with these:. https://github.com/CliMA/Oceananigans.jl/blob/b9c902660826454e43585cb49d9b358aec32b9f0/test/test_multi_region_cubed_sphere.jl#L9-L65. tests, mostly because looking at the code I can't understand what's happening -- they are not human-readable. I'll try to fix them. Perhaps @siddharthabishnu could you add docstring with some explanation?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653573292:137,test,test,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653573292,2,['test'],"['test', 'tests']"
Testability,"I agree that I would expect it to saturate at higher than 16 if there were 48 cores, but clearly I'm wrong. Getting another benchmark would be a good idea. I'm happy to consider the numba + parallel idea since that would be good to test the architecture. This [mini-course](https://github.com/omlins/parallel-gpu-workshop-JuliaCon21) did give some threaded examples to solve the diffusion equation in 3D. I wonder if we might want to ask Ludovic if they have done any scalings for multi-threading?. I'm happy to discuss this with @hennyg888 on Monday and see what we come up with. Others are happy to join the discussion if they like.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-886074548:124,benchmark,benchmark,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-886074548,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"I agree with your arguments. However, if I understood correctly, my only; concern (as a user) is that if you set them to zero by default,; setting `closure=IsotropicDiffusivity()` in a model will create a; simulation that will have no diffusivities and most likely will crash. From; a user perspective that's not the expected behavior I think, right?. On Wed, Dec 16, 2020, 18:17 Gregory L. Wagner <notifications@github.com>; wrote:. > IsotropicDiffusivity currently uses a viscosity and thermal diffusivity; > appropriate for water at 20 degrees Celsius and 35 psu:; >; >; > https://github.com/CliMA/Oceananigans.jl/blob/81db22f4a26396142e8cd5b5a4c50c75790c1d50/src/TurbulenceClosures/turbulence_closure_implementations/isotropic_diffusivity.jl#L11-L28; >; > When I put this in I originally thought it was positive because it; > provided a reference. It's also cute because its ""oceanic"".; >; > But as time has gone on I now fear its actually surprising and also not; > very useful, since it's not actually a common to use Oceananigans for; > direct numerical simulations of miniscule boxes with molecular transport; > coefficients. Instead, IsotropicDiffusivity is useful for 1) idealized; > problems and education and 2) as a simple turbulence closure when setting; > up a simulation / testing ideas, possibly prior to implementing a more; > complicated closure. This ""ocean-realistic"" default is inconvenient for; > either case.; >; > So, I propose changing the default for both the viscosity and diffusivity; > to 0.; >; > cc @tomchor <https://github.com/tomchor> @xiaozhour; > <https://github.com/xiaozhour>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/issues/1278>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADEX5KU2HG7BRG62RUDLKJTSVFS5JANCNFSM4U64DLDA>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1278#issuecomment-747170506:1289,test,testing,1289,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1278#issuecomment-747170506,2,['test'],['testing']
Testability,"I agree, let's just disable this test for now so we can merge outstanding PRs and rewrite the test",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430155087:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430155087,2,['test'],['test']
Testability,"I already tested it for some complex calculations (TKE, Ri, Ro and Ertel PV) and the results are correct!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1293#issuecomment-759837562:10,test,tested,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1293#issuecomment-759837562,1,['test'],['tested']
Testability,I also got confused by . https://github.com/CliMA/Oceananigans.jl/blob/4f1fe0fa7edd9489ba20875be64b69daa0a77b95/test/test_dynamics.jl#L32-L37. until I realized that `z_viscosity` here is used only to determine a stable but non-trivial time step.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2291#issuecomment-1055425366:112,test,test,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2291#issuecomment-1055425366,1,['test'],['test']
Testability,I also noticed we're not testing `closure = nothing` in `test_turbulence_closures.jl` (although there's some implicit testing since that is the default option). So I'd also like to add `nothing` to the list of tested closures https://github.com/CliMA/Oceananigans.jl/blob/6cbe8cf339b58170c51846160d832a431e42715c/test/dependencies_for_runtests.jl#L57-L64,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865:25,test,testing,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865,4,['test'],"['test', 'tested', 'testing']"
Testability,I also ran the tests on a server and all the tests passed on both CPUs and GPUs.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1968103207:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1968103207,2,['test'],['tests']
Testability,"I also reported this on https://github.com/CliMA/Oceananigans.jl/issues/3056, so maybe we should close this to avoid multiple issues of the same problem. I don't have a PR specifically trying to fix that, but it is possible that https://github.com/CliMA/Oceananigans.jl/pull/3606 fixes, or least ameliorates, the issue. @mncrowe can you test your simulation on that branch and check if you see the same behavior?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3614#issuecomment-2150439493:337,test,test,337,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3614#issuecomment-2150439493,1,['test'],['test']
Testability,"I am a little perplexed, because it seemed that tests on the PR passed (except for documentation, which is mysteriously broken right now due to a dependency that's getting updated during `dev ..` in the docs build). ![image](https://user-images.githubusercontent.com/15271942/114247433-ed6df200-9949-11eb-8649-f270ee7e12c7.png). ![image](https://user-images.githubusercontent.com/15271942/114247449-f5c62d00-9949-11eb-96af-02532bde76ef.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817010193:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817010193,1,['test'],['tests']
Testability,I am also surprised that these tests are passing in julia 1.6 without complaining of scalar operations,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1277736598:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1277736598,1,['test'],['tests']
Testability,"I am closing the issue because the solution is to give always `Float64` as suggested by @simone-silvestri . ```julia; @inline tank(x, y) = ifelse(radius(x, y) < L, -H, Float64(0.0)); ```. I tested and this is working now.; Had some issues in the boundaries, but I might discuss that in another issue/discussion.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1089373051:190,test,tested,190,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1089373051,1,['test'],['tested']
Testability,I am currently running a 0.083-degree global ocean simulation on Tesla V100 GPUs. I am benchmarking a bit to understand where we can target optimization to improve the performance and I thought I would leave the benchmarks here to document them for later use. (we do not have to merge this PR),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2760:87,benchmark,benchmarking,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2760,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,I am fine with having that as a test. Do you want to add it and merge?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3235#issuecomment-1709330310:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3235#issuecomment-1709330310,1,['test'],['test']
Testability,"I am getting the following error from benchmark/distributed_nonhydrostatic_model.jl where I have set threaded = false and decomposition = Slab(). I get a very similar error from the distributed nonhydrostatic script when I run the tests script, but the distributed shallow water model runs fine. In case it matters, I'm running mpich/3.0.4 (a bit old) on a linux system running Ubuntu. ```; Oceananigans v0.71.5; Julia Version 1.6.5; Commit 9058264a69 (2021-12-19 12:30 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) CPU E5645 @ 2.40GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, westmere); [2022/03/13 19:01:45.515] INFO Benchmarking weak scaling nonhydrostatic model with Slab decomposition [N=(128, 128, 16), ranks=(1, 1, 1)]...; [2022/03/13 19:02:09.310] INFO Setting up distributed nonhydrostatic model with N=(128, 128, 16) grid points and ranks=(1, 1, 1) on rank 0...; [2022/03/13 19:02:52.561] INFO Warming up distributed nonhydrostatic model on rank 0...; [2022/03/13 19:04:45.955] INFO Benchmarking distributed nonhydrostatic model on rank 0...; [2022/03/13 19:04:50.814] INFO Done benchmarking on rank 0. Median time: 72.806 ms; [2022/03/13 19:04:57.400] INFO Benchmarking weak scaling nonhydrostatic model with Slab decomposition [N=(128, 128, 32), ranks=(1, 2, 1)]...; [2022/03/13 19:05:21.386] INFO Setting up distributed nonhydrostatic model with N=(128, 128, 32) grid points and ranks=(1, 2, 1) on rank 1...; [2022/03/13 19:05:21.430] INFO Setting up distributed nonhydrostatic model with N=(128, 128, 32) grid points and ranks=(1, 2, 1) on rank 0...; [2022/03/13 19:06:04.003] INFO Warming up distributed nonhydrostatic model on rank 1...; [2022/03/13 19:06:04.004] INFO Warming up distributed nonhydrostatic model on rank 0...; ERROR: ERROR: LoadError: LoadError: DimensionMismatch(DimensionMismatch(""arrays could not be broadcast to a common size; got a dimension with lengths 128 and 64""); Stacktrace:; [1] ""arrays could not be b",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347:38,benchmark,benchmark,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347,3,"['Benchmark', 'benchmark', 'test']","['Benchmarking', 'benchmark', 'tests']"
Testability,"I am happy to review this but a question first. I thought the regression tests were passing, as of a week or so again. I presume something happened so that they don't run anymore? Could you point me to where the problem is so I can better follow the conversation?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1496743311:73,test,tests,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1496743311,1,['test'],['tests']
Testability,"I am happy to say that when I tried our MWE on this branch I also had no errors. . Even better, I tried it on the benchmark example and found that it did the `Float32` case with `GPU` on a grid of `32` cubed did work. . However, I see that some tests fail?. Also, @glwagner , care to share what you did here as it seems to work but I am very much puzzled as to why it works.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1790#issuecomment-871043993:114,benchmark,benchmark,114,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1790#issuecomment-871043993,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"I am in favor of creating a new PR for a test, since it ideally would encompass an incompressibility test for both the hydrostatic and nonhydrostatic models",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-897176439:41,test,test,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-897176439,2,['test'],['test']
Testability,"I am not sure about the `nrm2` error, (in here https://buildkite.com/clima/oceananigans/builds/10815#01872595-ab18-49c3-9f40-682de39fcdea) when I try locally; ```julia; (Oceananigans) pkg> test; ```; I cannot reproduce the error. Neither on Tartarus nor on Sverdrup (which is our GPU testing host)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1486064424:189,test,test,189,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1486064424,2,['test'],"['test', 'testing']"
Testability,"I am not sure if this helps, but this might shed some light.; This is the same MWE with the progress function set as:; ```julia; function progress_message(sim) ; wta = sim.output_writers[:timeavg2].outputs[1]; wd = wta.window_start_time; ws = wta.window_start_iteration; pc = wta.previous_collection_time; fo = wta.fetch_operand; res = sum(wta.result); ; interval = wta.schedule.interval; pis = wta.schedule.previous_interval_stop_time; cll = wta.schedule.collecting; @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim), "" , u-avg: "", res, "", window_start_time: "", wd, "", window_start_iteration: "", ws, "", previous_collection_time: "", pc, "", fetch_operand: "", fo, "", interval: "", interval, "", previous_interval_stop_time: "", pis, "", collecting: "", cll); end; ```. ```julia; julia> include(""test.jl""); [ Info: Initializing simulation...; [ Info: Iter: 0, time: 0 seconds , u-avg: 0.0, window_start_time: 0.0, window_start_iteration: 0, previous_collection_time: 0.0, fetch_operand: true, interval: 0.03, previous_interval_stop_time: 0.0, collecting: true; [ Info: ... simulation initialization complete (257.729 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (1.212 seconds).; [ Info: Iter: 1, time: 10 ms , u-avg: 0.0031413629825035438, window_start_time: 0.0, window_start_iteration: 0, previous_collection_time: 0.01, fetch_operand: true, interval: 0.03, previous_interval_stop_time: 0.0, collecting: true; [ Info: Iter: 2, time: 20 ms , u-avg: 0.007851828677677537, window_start_time: 0.0, window_start_iteration: 0, previous_collection_time: 0.02, fetch_operand: true, interval: 0.03, previous_interval_stop_time: 0.0, collecting: true; [ Info: Iter: 3, time: 30 ms , u-avg: 0.014652384734839867, window_start_time: 0.0, window_start_iteration: 0, previous_collection_time: 0.03, fetch_operand: true, interval: 0.03, previous_interval_stop_time: 0.03, collecting: false; [ Info: Iter: 4, time: 40 ms , u-avg: 0.0, window_start_time: 0.04, window",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264057759:805,test,test,805,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264057759,1,['test'],['test']
Testability,"I am not sure, this test was always running pretty fast (it is always running on the CPU). Maybe tartarus' CPU is being abused at the moment",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1308147894:20,test,test,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1308147894,1,['test'],['test']
Testability,"I am open to trying whatever simple example you suggest @christophernhill , but I'm not sure what you mean by stream benchmark. Sorry.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-886218106:117,benchmark,benchmark,117,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-886218106,2,['benchmark'],['benchmark']
Testability,"I am running `julia 1.8.2` with `Oceananigans v0.79.4`, which I am running from my repo that I cloned. I find that the same test fails on a `CPU` for either formulations. When I focus on one test case I see that the differences are almost everywhere, `256/16512`. Note that I am running the test case from REPL. Please see below for the details. I found that the data files that we are comparing with are from June 1 2022. I wanted to try and reproduce them by going into `shallow_water_bickley_jet_regression.jl` and changed `regenerate_data` from `false` to `true`. This ran but it didn't save the data. Where can I find the file that generated the `truth` data?. I made some figures to see whether there is a visual difference between the two and the answer is yes. I am including `vtruth.png`, `vnew.png` and `vdiff.png`, One observation is the amplitude of the `truth` is significantly larger and noisier. I wonder whether the noise that was added before was of larger amplitude than what we have here?. ![vdiff](https://user-images.githubusercontent.com/8239041/221380109-96ff99c1-d6cf-4ce5-9b40-52c38eaaca11.png); ![vtruth](https://user-images.githubusercontent.com/8239041/221380111-3ee2224e-3ba3-4169-90e2-3f03cd00e78b.png); ![vnew](https://user-images.githubusercontent.com/8239041/221380112-8a34bccf-4485-406b-92e6-74f6a13f479e.png). ```; julia> include(""test_shallow_water_regression.jl""); [2023/02/25 15:42:20.222] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.223] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.355] INFO Running shallow water regression tests...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initializ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:124,test,test,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446,3,['test'],['test']
Testability,"I am running the tests and see that `WENO5` did pass the test, so I guess it's fine. This is consistent with when I tried to run things in REPL and the one step worked. I'll look at the benchmark example again and see why things seem to fail in that script.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869811340:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869811340,3,"['benchmark', 'test']","['benchmark', 'test', 'tests']"
Testability,"I am sharing the first set of results that look at the strong scaling of the distributed `ShallowWaterModel`. I should say that I'm doing this on my desktop while zoom is running, so it would certainly be redone elsewhere. But the results are copied below. ```; Shallow water model strong scaling benchmark; ┌──────────────┬───────┬─────────┬─────────┬─────────┬─────────┬────────────┬────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │; ├──────────────┼───────┼─────────┼─────────┼─────────┼─────────┼────────────┼────────┤; │ (4096, 4096) │ 1 │ 8.738 s │ 8.738 s │ 8.738 s │ 8.738 s │ 392.52 KiB │ 2763 │; │ (4096, 4096) │ 2 │ 7.677 s │ 7.677 s │ 7.677 s │ 7.677 s │ 372.27 KiB │ 3195 │; │ (4096, 4096) │ 4 │ 5.063 s │ 5.063 s │ 5.063 s │ 5.063 s │ 372.41 KiB │ 3204 │; │ (4096, 4096) │ 8 │ 2.369 s │ 2.460 s │ 2.439 s │ 2.488 s │ 372.41 KiB │ 3204 │; │ (4096, 4096) │ 16 │ 1.356 s │ 1.381 s │ 1.389 s │ 1.438 s │ 371.72 KiB │ 3160 │; └──────────────┴───────┴─────────┴─────────┴─────────┴─────────┴────────────┴────────┘; [2021/03/12 17:32:56.309] INFO Writing Shallow_water_model_strong_scaling_benchmark.html...; Shallow water model strong scaling speedup; ┌──────────────┬───────┬─────────┬──────────┬─────────┐; │ size │ ranks │ speedup │ memory │ allocs │; ├──────────────┼───────┼─────────┼──────────┼─────────┤; │ (4096, 4096) │ 1 │ 1.0 │ 1.0 │ 1.0 │; │ (4096, 4096) │ 2 │ 1.13814 │ 0.94841 │ 1.15635 │; │ (4096, 4096) │ 4 │ 1.72589 │ 0.948768 │ 1.15961 │; │ (4096, 4096) │ 8 │ 3.55262 │ 0.948768 │ 1.15961 │; │ (4096, 4096) │ 16 │ 6.32625 │ 0.947016 │ 1.14368 │; └──────────────┴───────┴─────────┴──────────┴─────────┘. ```. Using the means the efficients would be. ```; np effiiciency; == ========; 2 0.56; 4 0.43; 8 0.45; 16 0.39. ```. I suspect on a different day, or different computer, we will get better numbers. We will see.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-797794664:297,benchmark,benchmark,297,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-797794664,1,['benchmark'],['benchmark']
Testability,"I am thinking about it actually, for the moment I am dealing with bug fixing and improving stability and accuracy (which should be basically finished), when I have everything tested and verified I ll proceed with the refactor",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1155362210:175,test,tested,175,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1155362210,1,['test'],['tested']
Testability,I am trying to run a case with GPU architecture on my school's HPC but I keep running into this same error (see gpu_error.log). This is my first time using the GPUs on the HPC so I am not sure if this is a user error or a software error. The error comes up during model instantiation.; [gpu_error.log](https://github.com/CliMA/Oceananigans.jl/files/5867606/gpu_error.log). Let me know if there is anything else you may need. The run script is also attached as a .txt. ; [model_gpu_waves.txt](https://github.com/CliMA/Oceananigans.jl/files/5867635/model_gpu_waves.txt),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1317:122,log,log,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1317,3,['log'],['log']
Testability,"I am using the master branch for nutrient tracers with a 3rd DST advection scheme. I found that the halo points don't have the same values as the boundaries in a periodic domain. Below is the configuration I use and a slice of u velocity. Not sure it's a bug or you intended to do so... Also, the fancy logger disappeared after I updated to 0.36.0. ```julia; grid = RegularCartesianGrid(size=(32, 2, 32), extent=(2*32, 2*2, 2*32), halo = (2, 2, 2)). RegularCartesianGrid{Float64, Periodic, Periodic, Bounded}; domain: x ∈ [0.0, 66.0], y ∈ [0.0, 6.0], z ∈ [-64.0, 2.0]; topology: (Periodic, Periodic, Bounded); resolution (Nx, Ny, Nz): (32, 2, 32); halo size (Hx, Hy, Hz): (2, 2, 2); grid spacing (Δx, Δy, Δz): (2.0, 2.0, 2.0); ```; ```julia; T_bcs = TracerBoundaryConditions(Ogrid, top = BoundaryCondition(Flux, Qᵀ), ; bottom = BoundaryCondition(Gradient, ∂T∂z)). model = IncompressibleModel(; architecture = CPU(),; grid = grid,; coriolis = FPlane(f=f),; buoyancy = SeawaterBuoyancy(equation_of_state=LinearEquationOfState(α=α, β=β)),; closure = AnisotropicMinimumDissipation(),; boundary_conditions = (T=T_bcs,); ); ```; ```julia; model.velocities.u.data.parent[:,:,3]; 36×6 Array{Float64,2}:; -0.0085938 -0.00844015 -0.0085938 -0.00844015 -0.0085938 -0.00844015; -0.010009 -0.0104645 -0.010009 -0.0104645 -0.010009 -0.0104645; -0.00859588 -0.00912747 -0.00829848 -0.00823567 -0.00859588 -0.00912747; -0.00742535 -0.00655195 -0.00594664 -0.00595502 -0.00742535 -0.00655195; -0.00536066 -0.0038463 -0.00437428 -0.00422142 -0.00536066 -0.0038463; -0.00241687 -0.00325761 -0.00216266 -0.00211736 -0.00241687 -0.00325761; 0.00258328 0.00188971 0.00159199 0.00141804 0.00258328 0.00188971; 0.00289388 0.00378436 0.00257106 0.00259916 0.00289388 0.00378436; 0.00363445 0.00407903 0.00342151 0.00360496 0.00363445 0.00407903; 0.00575018 0.00480254 0.00481157 0.00447708 0.00575018 0.00480254; 0.00667745 0.00577658 0.00495125 0.00499728 0.00667745 0.00577658; 0.00464067 0.00487611 0.00543163 0.00506227 0.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/949:303,log,logger,303,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/949,1,['log'],['logger']
Testability,I approve but @glwagner I'd like your approval before I merge.; Let's see if all tests pass first ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-839516049:81,test,tests,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-839516049,1,['test'],['tests']
Testability,I approve the idea. But only merge when tests are sorted out. ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2378#issuecomment-1075617026:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2378#issuecomment-1075617026,1,['test'],['tests']
Testability,"I attempted to reproduce the issue using the 1D diffusion example in the same environment, but I was unable to do so. After picking up the checkpoint, the output saving interval looked normal (not saving every iteration). The simple example is demonstrated as follows: [here](https://github.com/liuchihl/internal-tide-mixing/blob/3D-realtopo-delta-glw-background-flux-div/oneD_diffusion_checkpoint_test.jl). . Our initial guess is that it might be related to #3056. However, after conducting some tests, such as avoiding setting intervals to transcendental numbers, the output saving interval after picking up the checkpoint is still 1 iteration for a while (which is not the desired behavior). I noticed that when I use `IterationInterval` instead of `TimeInterval`, the problem is resolved.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3657#issuecomment-2244122542:497,test,tests,497,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3657#issuecomment-2244122542,2,['test'],['tests']
Testability,I believe I have fixed `spacings_and_areas_and_volumes.jl` to allow this example to work. `Flat` should also work for `RegularRectilinearGrid` and `VerticallyStretchedRectilinearGrid`. I haven't touched curvilinear grids but we should be able; to fix those in a similar way. Or we can do something else. I guess we will see how the tests do and go from there.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1510#issuecomment-808929216:332,test,tests,332,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1510#issuecomment-808929216,1,['test'],['tests']
Testability,"I believe Oceananigans currently has the option to have curvilinear coordinates in the horizontal and a regular grid in the vertical. This has been used to solve the `HydrostaticFreeSurfaceModel` in spherical coordinates. Using what is currently available, it seems like one could adapt this to create a `HydrostaticFreeSurfaceModel` and maybe `IncompressibleModel` that allows for topography that varies in one-dimension. We could use a curvlinear grid in the `x-z` plane that is build on terrain following coordinates over smooth topography and then use a regular grid for the `y` direction. . I think this model would be interesting in it's own right but if nothing else it could be used for comparison with immersed boundary methods that include topography, which I presume is an idea people have? Immersed boundary could be more powerful in that it would allow for two-dimensional topography. **Questions**: . - If I define a `terrain-following` grid then what new code will need to adapted to do the above? ; - Would this be as easy to do for the nonhydrostatic model as for the hydrostatic one?; - If we define a `boundary-following` shallow water model to deal with smooth coastlines, could we modify the `ShallowWaterModel` to evolve in this geometry? This is actually purely horizontal so maybe it would be easier?. I have not done anything towards these goals and simply testing the waters (pun intended) as to how easy/difficult and interesting, and people think of this. @glwagner ?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1549:1382,test,testing,1382,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1549,1,['test'],['testing']
Testability,"I believe setting up a simple test is a quick way to determine whether there is a problem with your script and also improves Oceananigans.jl, making progress towards solving this problem, if there is one.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817979922:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817979922,2,['test'],['test']
Testability,"I believe the changes in this PR are resulting in a significant slowdown (I only tested small CPU models, but the slowdown was around 50%), so I'm going to experiment a bit. I'll put some benchmarks in as well. The goal is speed _up_ not slowdown...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1115727698:81,test,tested,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1115727698,2,"['benchmark', 'test']","['benchmarks', 'tested']"
Testability,I believe the simulations would just NaN immediately. Do we have a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2301#issuecomment-1305878063:67,test,test,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2301#issuecomment-1305878063,1,['test'],['test']
Testability,"I can approve this but I am concerned about the benchmarking being contained in another package. What's the reason for this? For example, we already have a `benchmark` directory in the code, which not only has some custom source code in `benchmark/src` but many benchmarking scripts. It seems that rather than address the issue with this code (which has a lot of stale stuff) we are trying to skirt / avoid the problem by creating another repo. Ultimately though this just leads to lower quality code across the board since its not clear whether we are supposed to continue to maintain `benchmark` or move to `NESAPOceananigans`. Eventually _somebody_ will have to address this, right? Who will do that?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2246632050:48,benchmark,benchmarking,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2246632050,10,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"I can confirm that I tried this on a server and after freshly installing the data it worked fine. I should say that I didn't run the tests exactly but ran this code below. Note the comment was just to make it easier for me to parse the output. ```; using Test; include(""dependencies_for_runtests.jl""); include(""data_dependencies.jl""). include(""regression_tests/shallow_water_bickley_jet_regression.jl""). @testset ""Shallow Water Regression"" begin; @info ""Running shallow water regression tests..."". for arch in (CPU(), GPU()); for formulation in (VectorInvariantFormulation(), ConservativeFormulation()); print("" FJP: arch and formulation = "", arch, formulation, ""\n""); @testset ""Shallow Water Bickley jet simulation [$(typeof(arch)), $(typeof(formulation))]"" begin; @info "" Testing shallow water Bickley jet simulation regression [$(typeof(arch)), $(typeof(formulation))]""; run_shallow_water_regression(arch, formulation; regenerate_data = false); end; end; end; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998:133,test,tests,133,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998,6,"['Test', 'test']","['Test', 'Testing', 'tests', 'testset']"
Testability,"I can confirm that it does fail on gpus by having tried to on my desktop. It seems to fail at this line [here](https://github.com/CliMA/Oceananigans.jl/blob/0aa8e32ef2c821330100980902c2c6469c13b719/test/test_shallow_water_models.jl#L171) . When I ran it in REPL I found the following error. I'm not sure exactly what this PR does as I haven't had a chance to look into it yet but this is the intial output that I got in the error. ```; Time-stepping ShallowWaterModels [GPU(), WENO5]: Error During Test at REPL[37]:4; Test threw exception; Expression: time_stepping_shallow_water_model_works(arch, topos[1], nothing, advection); InvalidIRError: compiling kernel gpu_calculate_Guh!(Cassette.Context{nametype(CUDACtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}}, Nothing, KernelAbstractions.var""##PassType#257"", Nothing, Cassette.DisableHooks}, typeof(Oceananigans.Models.ShallowWaterModels.gpu_calculate_Guh!), OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, RegularRectilinearGrid{Float64, Periodic, Periodic, Flat, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64, WENO5, Nothing, Nothing, Nothing, NamedTuple{(:uh, :vh, :h), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, Nothing, NamedTuple{(:uh, :vh, :h), Tuple{typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing)}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int6",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1821#issuecomment-873666591:198,test,test,198,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1821#issuecomment-873666591,3,"['Test', 'test']","['Test', 'test']"
Testability,"I can confirm that when I updated this branch with what is currently on master, the shallow water tests do pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-809440414:98,test,tests,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-809440414,1,['test'],['tests']
Testability,"I can help with a few things:. 1. Moving the existing implementation of `set!` to `Models/IncompressibleModels`.; 2. Writing a new version of `set!` that works with `ShallowWaterModel`.; 3. Implementing a few simple tests that ensure `ShallowWaterModel` can be instantiated. @francispoulin let me know if you'd like to me to work on those three things. For 2. I need some clarification: `IncompressibleModel` has a tuple of fields called `model.velocities`, which always has fields `velocities.u, velocities.v, velocities.w`. For `ShallowWaterModel` I believe the three essential prognostic variables are `uh`, `vh`, and `h`. Then there can be additional tracers in `sw_model.tracers`. How do you want to organize the essential prognostic variables? I think you can come up with any name you want, or you can split them into multiple places...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1188#issuecomment-729925232:216,test,tests,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1188#issuecomment-729925232,1,['test'],['tests']
Testability,"I can help you out today if you want, if you change to the formulation we decided I can try to fix the tests. Just let me know when it is ready to fix the bugs",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050048470:103,test,tests,103,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050048470,1,['test'],['tests']
Testability,"I can imagine others benefiting from the Poisson solvers and wanting to use those without necessarily using Oceananigans, so I think this could work well. . I do have a question though. We have a lot of tests in Oceananigans now and that is a concern. If we had the solvers in a different package, what would be the savings? I guess we wouldn't have the solvers part of the test as that would be separate? From what I understand that's a small portion of all the tests, but I could be wrong. @ali-ramadhan 's point is well taken, that it would need a champion to get this started.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1553#issuecomment-815005247:203,test,tests,203,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1553#issuecomment-815005247,3,['test'],"['test', 'tests']"
Testability,I can't re-run the tests but if someone with access can I think this PR should be done?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1511478135:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1511478135,1,['test'],['tests']
Testability,"I can't see the modifications to `geostrophic_adjustement.jl` that were made on this PR --- have these changes been pushed?. I don't think `Flat` will work in the vertical for `HydrostaticFreeSurfaceModel`. We have to inspect the way vertical velocities are calculated but I believe it will fail. Perhaps we need a more general algorithm, or we can write code to deal with that special case. I don't think its important (aside from testing) since if one wants to run a shallow water model they might be better off using `ShallowWaterModel`...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-809880779:432,test,testing,432,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-809880779,1,['test'],['testing']
Testability,I can't see where/if callbacks are tested to add tests for these?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1271600560:35,test,tested,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1271600560,2,['test'],"['tested', 'tests']"
Testability,"I cannot get the checkpointing test running in PR #140 as JLD is not able to serialize the model to disk with forcing functions. We can go back to forcing arrays but we I think that's a bad idea as we should avoid increasing GPU memory usage. I believe that [JLD2.jl](https://github.com/JuliaIO/JLD2.jl) might be able to serialize functions to disk but it's not actively maintained anymore and their README says ""If your tolerance for data loss is low, JLD may be a better choice at this time."". If we can fix this and figure out how to serialize functions to disk, then we may also be able to serialize the FFTW and CuFFT plans to disk (although we might still want to reconstruct them as in case the model is restored on a different computer with a different architecture). Stacktrace:; ```julia; Deserializing model from disk: test_model_checkpoint_5.jld; error parsing type string Oceananigans.Forcing{Oceananigans.#zero_func,Oceananigans.#zero_func,Oceananigans.#zero_func,Oceananigans.#zero_func,Oceananigans.#zero_func}; Checkpointing: Error During Test at D:\Home\Git\Oceananigans.jl\test\runtests.jl:246; Got exception outside of a @test; syntax: incomplete: premature end of input; Stacktrace:; [1] eval at .\boot.jl:328 [inlined]; [2] eval at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\JLD.jl:3 [inlined]; [3] _julia_type(::String) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\JLD.jl:983; [4] julia_type(::String) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\JLD.jl:30; [5] jldatatype(::JLD.JldFile, ::HDF5.HDF5Datatype) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\jld_types.jl:701; [6] read(::JLD.JldDataset) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\JLD.jl:370; [7] read_ref(::JLD.JldFile, ::HDF5.HDF5ReferenceObj) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\JLD.jl:502; [8] jlconvert(::Type{Model}, ::JLD.JldFile, ::Ptr{UInt8}) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\jld_types.jl:387; [9] read_scalar(::JLD.JldDataset, ::HDF5.HDF5Datatype, ::Type) at C:\Users\Ali\.julia",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/141:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/141,1,['test'],['test']
Testability,"I cannot reproduce the error on Tartarus. if I remove. https://github.com/CliMA/Oceananigans.jl/blob/1db753ebeee2691205b7c0e6a03bba1ef9db4554/src/Models/LagrangianParticleTracking/LagrangianParticleTracking.jl#L131. `include(""test/test_lagrangian_particle_tracking.jl"")` passes. Can you try removing that line and we look at the buildkite error? Maybe it has resolved itself",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514719890:226,test,test,226,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514719890,1,['test'],['test']
Testability,"I changed `oscillating_flow.jl` to oscillate in two directions at once. It then oscillates first in the xy direction, then the xz direction, therefore testing all directions in the process. This is the animation it produces for the xy direction:. https://github.com/user-attachments/assets/82ca2b3f-c641-4f3d-95d2-2a1f3ce19eff. and this is the animation for the xz direction:. https://github.com/user-attachments/assets/b7fbd8d2-8662-4e30-b879-decabc138163. @jagoosw, I'm curious to hear your take on the artifacts that appear at the edges of the right `x` boundary. If I plot `v` and `w` those artifacts are also there (also on the ""right"" side), so I think this a general ""issue"" with the algorithm, rather than something wrong with the `x` direction specifically. Do you have any idea of what this is?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3854#issuecomment-2435113186:151,test,testing,151,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3854#issuecomment-2435113186,1,['test'],['testing']
Testability,I changed a setting. I don't know how to test it though other than registering a new version... But what if it doesn't work?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3355#issuecomment-1789028157:41,test,test,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3355#issuecomment-1789028157,1,['test'],['test']
Testability,"I checked and `interpolate(field, x, y, z)` isn't used anywhere in the source code but in a few validation experiment. It basically does the same thing, but extracts the fields location and grid. I've tried changing it to just be a wrapper for `interpolate(field, LX, LY, LZ, grid, x, y, z)` like:; ```julia; @inline interpolate(field::AbstractField{LX, LY, LZ, G, T, N}, x, y, z) where {LX, LY, LZ, G, T, N} = interpolate(field, LX(), LY(), LZ(), G, x, y, z); ```; but this fails as a dynamic funciton invocation. I also tried changing it to:; ```; @inline function interpolate(field, x, y, z); LX, LY, LZ = location(field); grid = field.grid; return interpolate(field, LX(), LY(), LZ(), grid, x, y, z); end; ```. but this errors with `Reason: unsupported call to an unknown function (call to jl_f_getfield)`, so I'm not sure its going to be straight forward or worthwhile trying to make the high level version work on GPU. Also, if we want to test interpolation, it always fails on GPU because of scalar indexing if called directly, but if wrapped in a kernel function is fine:; ```julia; @kernel function test!(field, grid, res, x, y, z); n = @index(Global); LX, LY, LZ = location(field); @inbounds res[n] = interpolate(field, Center(), Center(), Center(), grid, x[n], y[n], z[n]); end; ```; (If I put `grid = field.grid ` in the kernel function it also fails like above).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689:945,test,test,945,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689,2,['test'],['test']
Testability,"I continued refactoring and fixing tests now that `*spacings` use `KernelFunctionOperation`s to return `Field`s. All grid tests should pass now. And `*spacings` works on immersed grids fulfilling the original intent of this PR. Do we want an `include_halos` option or should the spacings be computed in the halos by default? I'm actually not sure how to make `KernelFunctionOperation` compute things in the halos. Will look into it. I'm also bumping v0.94.0 since this is a breaking change to the public interface. If people are happy with these changes, I can work on adding some more tests and docstrings.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-2459913221:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-2459913221,3,['test'],['tests']
Testability,"I copied one of the errors below. I remember seeing this error before but I'm not sure how it was resolved. Restarting the tests?. ```; Precompiling project...;   | ✓ Oceananigans;   | 1 dependency successfully precompiled in 87 seconds (200 already precompiled);   | Testing Running tests...;   | ERROR: LoadError: LoadError: SystemError: opening file ""/data5/glwagner/.julia-7803/compiled/v1.6/Oceananigans/hU93i_V4y9F.ji"": No such file or directory;   | Stacktrace:; ...; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1157668343:123,test,tests,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1157668343,3,"['Test', 'test']","['Testing', 'tests']"
Testability,"I could not get the Poisson pressure solver to work on the GPU. Most of it works but CUDA does not have a DCT function so I had to perform the DCT/IDCT in terms of the FFT/IFFT. The DCT/IDCT functions work in isolation (regression tested with `FFTW.r2r!`, see link to Jupyter notebook below) but not in the Poisson solver. More specifically, the IDCT fails when applied to the third dimension (after or before the IFFT is applied to dimensions 1 and 2). For now I got around this by copying the right hand side to the CPU, doing the transform on the CPU, and copying the geopotential back to the GPU. This operation is so much slower than the time stepping that it takes up like 98%+ of wall clock time. It might also be introducing further numerical errors. Link to current Poisson GPU solver:; https://github.com/ali-ramadhan/Oceananigans.jl/blob/93aa0038b3126470f263475d648bceb9562bbe91/src/spectral_solvers.jl#L421. Messy Jupyter notebook: [Testing DCT/IDCT on the GPU](https://github.com/ali-ramadhan/random-jupyter-notebooks/blob/master/Oceananigans.jl/DCT%2BIDCT%20from%20DFT%2BIDFT.ipynb). Messy Jupyter notebook: [Testing GPU Poisson solver](https://github.com/ali-ramadhan/random-jupyter-notebooks/blob/master/Oceananigans.jl/GPU/Testing%20GPU%20Poisson%20solver.ipynb)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/56:231,test,tested,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/56,4,"['Test', 'test']","['Testing', 'tested']"
Testability,I created a clean branch from the latest version of master that passed the documentation buildkite test. Looking at my old updated `benchmarks.md` through a markdown viewer/editor and I saw that a table that's written in HTML might be causing trouble so I replaced it with a code block quote table.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1952:99,test,test,99,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1952,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"I decided to program the different advection schemes in Julia, without using Oceananigans. I can share the code if anyone is interested but it's nothing fancy, and needs some cleaning up. I found that the 5th order upwinding stencil, as used in Oceananigans, should have fifth order convergence. See the results below. So the good news is the stencil formula is correct. The bad news is that I don't know why we are not getting the correct values in Oceananigans, even though I am using the exact same tests. I admit that I don't understand the symmetric interpolant stuff that is done, which is perhaps why I can't see the error. Also, doing 6th order would be easy enough to do if there was interest. ```; For UpwindingFirstOrder: Rate of convergence = -0.9661593569685473 expected = 1. For CenterSecondOrder: Rate of convergence = -1.9640228832659088 expected = 1. For UpwindingThirdOrder: Rate of convergence = -2.9708218645270197 expected = 3. For CenterFourthOrder: Rate of convergence = -3.7210792193087565 expected = 4. For UpwindingFifthOrder: Rate of convergence = -4.847601153924809 expected = 5. For CenterSixthOrder: Rate of convergence = -5.784776184328756 expected = 6. ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-747576282:502,test,tests,502,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-747576282,1,['test'],['tests']
Testability,"I did a few tests with some criteria for timestep-skipping with a couple of my own simulations in addition to the MWE included here. In summary:. 1. Criterion `sim.Δt / 1e10`: successfully gets rids of the problem in both the MWE and in my simulations; 2. Criterion `10 * eps(sim.Δt) * sim.Δt`: doesn't get rid of the problem in any simulation; 3. `100 * eps(sim.Δt) * sim.Δt`: fixes the problem in the MWE but not in my simulations, although it does decrease its frequency of occurrence a good amount.; 4. `1000 * eps(sim.Δt) * sim.Δt`: fixes everything in all simulations I've tried. So only options 1 and 4 fully fix the problem (at least in the simulations I've tried so far). For me both those options rely on pretty arbitrary numbers though, so I'm not very happy with neither. From the point of view seeing the timestep-skipping as an approximation ($u^{n+1} \approx u^n$), then maybe criterion 1 makes more sense, although I'm not sure how it'd behave for Float32 simulations. I see three possible ways to go about it right now:. 1. Do what this PR is doing, and manually set the criterion to either option 1 or 4 above. If it turns out that some simulations still have issues, we revisit.; 2. We add `min_Δt` as a property of `NonhydrostaticModel` (or maybe `Simulation`?). I think the minimum `Δt` for which time skipping will be necessary will vary significantly between simulations, so this solution deals with that by leaving the decision up to the user if they are interested in the pressure output.; 3. We try something that actually prevents these round-off errors instead of dealing with them. @glwagner suggested an `Integer`-based model clock, but there might be other options.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3606#issuecomment-2134109698:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3606#issuecomment-2134109698,1,['test'],['tests']
Testability,"I didn't _actually_ test that, but I also didn't merge #2502 😄",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1116712744:20,test,test,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1116712744,1,['test'],['test']
Testability,"I didn't have the same problem! I think that means the issue could arise from some downstream package in your Manifest.toml in your global 1.5 environment (which is not present in mine, for some reason). What is the output of. ```julia; julia> pkg""st --manifest""; ```. ?. Mine is. ```julia; julia> pkg""st --manifest""; Status `~/.julia/environments/v1.5/Manifest.toml`; [621f4979] AbstractFFTs v1.0.1; [79e6a3ab] Adapt v2.4.0; [4fba245c] ArrayInterface v2.14.17; [56f22d72] Artifacts v1.3.0; [ab4f0b2a] BFloat16s v0.1.0; [6e4b80f9] BenchmarkTools v0.7.0; [6e34b625] Bzip2_jll v1.0.6+5; [fa961155] CEnum v0.4.1; [179af706] CFTime v0.1.1; [052768ef] CUDA v2.3.0; [83423d85] Cairo_jll v1.16.0+6; [7057c7e9] Cassette v0.3.4; [d360d2e6] ChainRulesCore v0.9.29; [944b1d66] CodecZlib v0.7.0; [35d6a980] ColorSchemes v3.10.2; [3da002f7] ColorTypes v0.10.9; [5ae59095] Colors v0.12.6; [34da2185] Compat v3.25.0; [e66e0078] CompilerSupportLibraries_jll v0.3.4+0; [d38c429a] Contour v0.5.7; [a8cc5b0e] Crayons v4.0.4; [7445602f] CubedSphere v0.1.0; [9a962f9c] DataAPI v1.6.0; [864edb3b] DataStructures v0.18.9; [e2d170a0] DataValueInterfaces v1.0.0; [b552c78f] DiffRules v1.0.2; [ffbed154] DocStringExtensions v0.8.3; [5ae413db] EarCut_jll v2.1.5+1; [b305315f] Elliptic v1.0.1; [2e619515] Expat_jll v2.2.7+6; [e2ba6199] ExprTools v0.1.3; [c87230d0] FFMPEG v0.4.0; [b22a6f82] FFMPEG_jll v4.3.1+4; [7a1cc6ca] FFTW v1.3.2; [f5851436] FFTW_jll v3.3.9+7; [53c48c17] FixedPointNumbers v0.8.4; [a3f928ae] Fontconfig_jll v2.13.1+14; [59287772] Formatting v0.4.2; [d7e528f0] FreeType2_jll v2.10.1+5; [559328eb] FriBidi_jll v1.0.5+6; [0656b61e] GLFW_jll v3.3.2+1; [0c68f7d7] GPUArrays v6.2.0; [61eb1bfa] GPUCompiler v0.8.3; [28b8d3ca] GR v0.53.0; [d2c73de3] GR_jll v0.53.0+0; [5c1252a2] GeometryBasics v0.3.9; [78b55507] Gettext_jll v0.20.1+7; [7746bdde] Glib_jll v2.59.0+4; [c27321d9] Glob v1.3.0; [42e2da0e] Grisu v1.0.0; [0234f1f7] HDF5_jll v1.12.0+1; [cd3eb016] HTTP v0.8.19; [83e8ac13] IniFile v0.5.0; [1d5cc7b8] Intel",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-824043189:531,Benchmark,BenchmarkTools,531,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-824043189,1,['Benchmark'],['BenchmarkTools']
Testability,"I do hope that I found something useful but at the moment I am a bit confued as to what's going wrong. I'm going to copy the errors below so others can see this more easily. The error in the docs complains about `PlotUtils` failing to precompile. That doesn't seem related to shallow water so I am confused. The CPU test seems to be with `MPI`, but I didn't know we had any `MPI` tests that used shallow water that were being run. Docs:; ```; ERROR: could not load library ""/storage7/buildkite-agent/julia-1.5.4/lib/julia/sys.so""; --; &nbsp; | /storage7/buildkite-agent/julia-1.5.4/lib/julia/sys.so: ELF load command past end of file; &nbsp; | ERROR: LoadError: Failed to precompile PlotUtils [995b91a9-d308-5afd-9ec6-746e21dbc043] to /storage7/buildkite-agent/.julia-2556/compiled/v1.5/PlotUtils/YveHG_R3lk8.ji.; &nbsp; | Stacktrace:; &nbsp; | [1] top-level scope at none:2; &nbsp; | [2] eval at ./boot.jl:347 [inlined]; &nbsp; | in expression starting at /storage7/buildkite-agent/.julia-2556/packages/Plots/SjqWU/src/Plots.jl:20; &nbsp; | ERROR: LoadError: Failed to precompile Plots [91a5bcdd-55d7-5caf-9e0b-520d859cae80] to /storage7/buildkite-agent/.julia-2556/compiled/v1.5/Plots/ld3vC_R3lk8.ji.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-1/clima/oceananigans/docs/make.jl:6; &nbsp; | 🚨 Error: The command exited with status 1. ```. CPU test; ```; [8] test() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:72; --; &nbsp; | [9] top-level scope at none:1; &nbsp; | Union{},Union{},Tuple{},NamedTuple{(test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; ERROR: failed process: Process(`/storage7/buildkite-agent/.julia-2556/artifacts/2fcd463fb9498f362be9d1c4ef70a63c920b0e96/bin/mpiexec -np 4 /storage7/buildkite-agent/julia-1.5.4/bin/julia -O0 --color=yes -e 'using Pkg; Pkg.test()'`, ProcessExited(1)) [1]; &nbsp; | &nbsp;; &nbsp; | Stacktrace:; &nbsp; | [1] pipeline_error at ./process.jl:525 [inlined]",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842643141:316,test,test,316,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842643141,2,['test'],"['test', 'tests']"
Testability,"I do love tests but I think it might make sense to simplify / reduce the lines added for testing compared to what's in the PR now. Typically we find that maintaining tests is a significant fraction of developer time so it's best to make them as minimal and simple as possible. Awesome PR, thank you!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3329#issuecomment-1758036970:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3329#issuecomment-1758036970,6,['test'],"['testing', 'tests']"
Testability,"I don't believe there is a strong need for this example as it is. Considering that #1430 is using two-dimensional turbulence a as a test case, and that might become an example, this PR seems a bit redundant. That is why I will close this but happy to return to it if there is interest. There was mention of introducing beta and looking at the development of zonal jets. This is easy enough to do and could be fun, but not sure if this warrents an example.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1365#issuecomment-799461263:132,test,test,132,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1365#issuecomment-799461263,1,['test'],['test']
Testability,"I don't follow everything here but it looks like the simulation is being performed on a login node in the above screenshot. @Sumanshekhar17, your cluster may have a policy in place to stop (""kill"") jobs that run on a login node. To sort out script vs cluster issues I suggest running the script on a local machine (for example, your laptop) first. If it runs to completion, and also starts and runs on the cluster with `architecture=GPU()`, then we know the problem is due to cluster policy or some other cluster-specific setting, rather than a problem with your script or Oceananigans.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1289#issuecomment-756149003:88,log,login,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1289#issuecomment-756149003,2,['log'],['login']
Testability,I don't know how [5c8a763](https://github.com/CliMA/Oceananigans.jl/pull/2307/commits/5c8a763868bfcd244b84ad07122d11647f4f6994) almost passed (everything except for docs) but then a minor tweak on a doctest in [4e75ed3](https://github.com/CliMA/Oceananigans.jl/pull/2307/commits/4e75ed3f3222e25d51d24a4c74018e41cbe5d0ba) made a bunch of tests fail...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1119601938:337,test,tests,337,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1119601938,1,['test'],['tests']
Testability,"I don't know if this helps to make the issue clearer, but I just re-ran the code for just ; ```; using Oceananigans ; ```; and it executed without error. I ran it again to see if it was just a fluke and I got the following error:; ```. The following have been reloaded with a version change:; 1) cuda/12.2.1 => cuda/11.8.0. [59837] signal (11.1): Segmentation fault; in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:1; Allocations: 605144 (Pool: 604223; Big: 921); GC: 1; /var/spool/pbs/mom_priv/jobs/1741845.casper-pbs.SC: line 31: 59837 Segmentation fault (core dumped) julia --project testcode.jl /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/; ```; Could it be an issue with the computer loading Oceananigans.jl with a bunch of extra functions?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2237133645:445,test,testcode,445,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2237133645,4,['test'],['testcode']
Testability,"I don't know this fits here, but I was thinking about a way to have a separate repository for examples from community that doesn't affect the test running time of the main repo. . The repo could generate a wiki-like page with the examples. We could give a code template for the simulations. For instance, all simulations must inform and check the version of Oceananigans and it's dependencies. Or maybe containing a yml equivalent for Julia project. What do you guys think? . I know this can get messy.. but it could be a nice way to avoid people reinventing the wheel while making their own simulations. With enough time, almost any experiment will have some others similar.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2309#issuecomment-1062498801:142,test,test,142,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2309#issuecomment-1062498801,1,['test'],['test']
Testability,"I don't know. Increasing grid points to 4, there's still a problem with 6 threads. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl [19:56:49]; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (79.416 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.660 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9557581998545617, 1.9557581998545617, 1.956214574857873, 1.9553566305291932, 1.9553371609848056, 1.9553371609848056]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9557581998545617 == 1.956214574857873; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. and also with 4. But with 3,. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=3 julia --project race_condition_test.jl [19:58:49]; [ Info: Oceananigans will use 3 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (98.396 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.548 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9543734841879783, 1.9543734841879783, 1.9543734841879783, 1.9560232965664703, 1.9567081251492398, 1.9567081251492398]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839:722,Test,Test,722,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839,4,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,"I don't pretend to understand the 3 different options but `Test.@inferred` seems to work nicely, and it's the one that I understand best. Maybe this is something worth starting with unless someone has reasons to think ether of the two other options are better?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1885#issuecomment-884941870:59,Test,Test,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1885#issuecomment-884941870,1,['Test'],['Test']
Testability,I don't really know why the tests failed,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1400542572:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1400542572,1,['test'],['tests']
Testability,I don't think I have access to Sverdrup. Could I get access? I wanted to try to run the test there to see what's happening...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544978864:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544978864,1,['test'],['test']
Testability,I don't think so but I'm not 100% sure. We should test that the warning isn't generated --- it really shouldn't be (`window=interval` is the default after all...),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1274#issuecomment-873328230:50,test,test,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1274#issuecomment-873328230,1,['test'],['test']
Testability,"I don't think the docs build --- the last commit I sent had architecture = GPU(), doh!. The tests hadn't finished running when the PR was merged:. ![image](https://user-images.githubusercontent.com/15271942/126313951-4e78d5b9-cce8-4a90-b784-692491d3d4e1.png). So we didn't catch it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1874#issuecomment-883304986:92,test,tests,92,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1874#issuecomment-883304986,1,['test'],['tests']
Testability,"I don't think there's a chicken and egg problem. Testing new features requires some initiative and also experience with / understanding of the relevant science applications. I think the ""egg"" is the validation test itself. A groomed, pedagogical docs example is the ""chicken"" that emerges from that egg. I also think that validation is not just about ensuring quantative accuracy, but about working out the user interface. We want the docs implementations to reflect relatively mature user interfaces, since the docs examples are relatively influential pieces of code. I believe immersed boundaries are still experimental, not least in light of #3142. What are the quantitative validation tests that use immersed boundaries? The only one that I know if is the one I worked on, which shows that a stratified ocean remains at rest:. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/resting_stratified_bumpy_ocean.jl. We haven't documented those results well, though. The internal tide case could be adapted to validate immersed boundaries with the hydrostatic model, leveraging the vast literature on that subject. I don't think the example involves a comparison with theory or other published numerical results though. It wouldn't be that much work to turn that case into a validation test. As for `NonhydrostaticModel`, by all accounts it seems that it should be experimental until we have a validated pressure solver. It could be interesting to see if we can validate the nonhydrostatic model for certain LES cases, somehow. Otherwise, we do know that pressure solver is in general incorrect (either impenetrability across immersed boundaries is not satisfied, or the velocity field is divergent close to the immersed boundary).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3148#issuecomment-1601130874:49,Test,Testing,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3148#issuecomment-1601130874,4,"['Test', 'test']","['Testing', 'test', 'tests']"
Testability,I don't think we can test right now since we ran out of buildkite minutes. We have to wait until April 10.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499780575:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499780575,1,['test'],['test']
Testability,"I don't think we can update packages right now, see #1561 . Which test is failing? Do we need to revert the PR? I thought only the documentation was failing but maybe I screwed up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817008059:66,test,test,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817008059,1,['test'],['test']
Testability,"I don't think we have regression tests yet but not sure, @simone-silvestri would know",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1426533974:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1426533974,1,['test'],['tests']
Testability,"I don't think we should merge this, because it seems to dramatically increase the time it takes to run tests without catching the bug in #1780.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870928403:103,test,tests,103,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870928403,1,['test'],['tests']
Testability,I don't think we use PencilArray for CuArray either in the source code or tests. My question is: does bumping PencilArrays and PencilFFTs mean that we can extend the distributed FFT algorithm (currently only implemented on CPU) to GPUs?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613498127:74,test,tests,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613498127,1,['test'],['tests']
Testability,I don't thinks so. I'll try to benchmark it,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2252#issuecomment-1044425297:31,benchmark,benchmark,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2252#issuecomment-1044425297,1,['benchmark'],['benchmark']
Testability,I don't understand what is going on with my two PRs that are not passing the tests. Should I close and create them again from the latest master?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013509466:77,test,tests,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013509466,1,['test'],['tests']
Testability,"I don't understand why this is failing (it also fails locally). It is only:; https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L126; that fails for Float32 on the grid points, and the error is ~4.6f-6 vs eps which is ~3.8f-6. It is also weird that this fails on regular grids where I haven't changed anything. Also, the maximum error for each interpolation is:; ```; u -> 1.9073486e-6; v -> 4.7683716e-6; w -> 3.8146973e-6; c -> 3.8146973e-6; ```; with $\epsilon_{max} =$ 3.8146973f-6 and I don't know why they wouldn't all be the same?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492068738:164,test,test,164,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492068738,1,['test'],['test']
Testability,I don’t really know what was that file. Was it just testing?. tests pass so I guess I will approve. But I’m a bit oblivious here...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1390#issuecomment-782458593:52,test,testing,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1390#issuecomment-782458593,2,['test'],"['testing', 'tests']"
Testability,I don’t think we should fix the untested features in this PR. We need to merge this ASAP so we can open a new PR with tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1751827723:118,test,tests,118,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1751827723,1,['test'],['tests']
Testability,I don’t understand why tests fail. Most probably is not because of editing docstring. Will look at this after New Years.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1002265918:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1002265918,1,['test'],['tests']
Testability,"I expect 3 of these 4 tests to fail:. ```julia; grid = RegularRectilinearGrid(size=(2, 2, 2), extent=(1, 1, 1)). c = CenterField(CPU(), grid); random_column = reshape(rand(2), 1, 1, 2). c .= random_column # broadcast to every horizontal column in c. @test c[1, 1, 2:3] .== random_column; @test c[2, 1, 2:3] .== random_column; @test c[1, 2, 2:3] .== random_column; @test c[2, 2, 2:3] .== random_column; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1947#issuecomment-902688072:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1947#issuecomment-902688072,5,['test'],"['test', 'tests']"
Testability,I find that the code for boundary conditions for particles cannot deal with unusually large velocity \(when $u\Delta t$ has the order of the domain size\). Fixing the related code \(Yixiao-Zhang/Oceananigans.jl@95f68a1\) enables running the script that I posted previously in this page. Do we need an additional test for such cases?. One remaining question is why the log shows that the error occurs from the pressure solver. Can we do anything to improve the accuracy of error messages?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3320#issuecomment-1753799918:312,test,test,312,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3320#issuecomment-1753799918,2,"['log', 'test']","['log', 'test']"
Testability,"I fixed the tests and also started testing that `BackgroundField`s get written correctly. @glwagner If you're okay with it, I'm gonna merge this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1974919655:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1974919655,2,['test'],"['testing', 'tests']"
Testability,"I get the same problem, and it looks like the boundary condition is added correctly:. ```julia; julia> model.velocities.u; 1×1×32 Field{Face, Center, Center} on ImmersedBoundaryGrid on CPU; ├── grid: 1×1×32 ImmersedBoundaryGrid{Float64, Flat, Flat, Bounded} on CPU with 0×0×3 halo; ├── boundary conditions: FieldBoundaryConditions; │ └── west: Nothing, east: Nothing, south: Nothing, north: Nothing, bottom: ZeroFlux, top: Value, immersed: ImmersedBoundaryCondition; └── data: 1×1×38 OffsetArray(::Array{Float64, 3}, 1:1, 1:1, -2:35) with eltype Float64 with indices 1:1×1:1×-2:35; └── max=-0.0857023, min=-0.972122, mean=-0.393485; ```. I think `FluxBoundaryCondition` is tested here:. https://github.com/CliMA/Oceananigans.jl/blob/f7acd8d0bd30dbe1ccb72854b6ea0ccab1eae0b5/test/test_boundary_conditions_integration.jl#L231-L241. (though only for `NonhydrostaticModel`)... Might make sense to build up those boundary condition integration tests for `HydrostaticFreeSurfaceModel` and also for `ValueBoundaryCondition` and `GradientBoundaryCondition`. @simone-silvestri is this broken because we are now using ""boundary-aware"" derivatives?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3208#issuecomment-1660104317:673,test,tested,673,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3208#issuecomment-1660104317,3,['test'],"['test', 'tested', 'tests']"
Testability,"I guess both would be good. But specifically I meant that it'd be good for someone to run the same scripts I ran and see if they can reproduce the behavior. Who knows, maybe it's something wrong in my setup. (Although I have tried in both my laptop and on the Casper cluster.). I do think it's weird that an error (apparently) this serious isn't being caught by the tests, so it's very possible that I'm making a silly mistake somewhere... having someone investigate this as well would alleviate this concern a bit.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-814125461:366,test,tests,366,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-814125461,1,['test'],['tests']
Testability,"I guess here is a problem with `heuristic_workgroup`. ```; Time stepping NonhydrostaticModel: Time stepping NonhydrostaticModel: Error During Test at Time stepping NonhydrostaticModel: Time stepping NonhydrostaticModel: Error During Test at Error During TestError During Test at at /var/lib/buildkite-agent/builds/tartarus-2/clima/oceananigans/test/test_distributed_models.jl:481;   | Got exception outside of a @test;   | MethodError: no method matching heuristic_workgroup(::MultiCPU{RegularRectilinearGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Oceananigans.Distributed.RankConnectivity{Nothing, Nothing, Int64, Int64, Nothing, Nothing}, MPI.Comm}, ::Int64, ::Int64, ::Int64);   | Closest candidates are:;   | heuristic_workgroup(::GPU, ::Any, ::Any, ::Any) at /var/lib/buildkite-agent/builds/tartarus-2/clima/oceananigans/src/Utils/kernel_launching.jl:12;   | heuristic_workgroup(::CPU, ::Any, ::Any, ::Any) at /var/lib/buildkite-agent/builds/tartarus-2/clima/oceananigans/src/Utils/kernel_launching.jl:26;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-889077963:142,Test,Test,142,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-889077963,6,"['Test', 'test']","['Test', 'TestError', 'test']"
Testability,"I guess this is not something I was thinking of but John pointed out that it's crucial that the Fourier-spectral solver returns a nonhydrostatic pressure that when used to update the velocity field, produces a velocity field that is non-divergent at every grid point. Otherwise mass is being unphysically accumulated and tracer quantities will also be accumulated due to nonzero Q(∇·**u**) terms in the flux divergence operators ∇·(**u**Q) = Q(∇·**u**) + **u**·∇Q, leading to divergences and blowups. Right now the wavenumbers are computed as; ```; kx = 2π/Lx # DFT; ky = 2π/Ly # DFT; kz = 1π/Ly # DCT; ```; which should lead to a solver whose solutions converge spectrally. While it may solve for the pressure at the center of the cells very accurately, if ∇·**u** is non-zero this will be a big problem. This will require some testing on my part to see which solver best satisfies ∇·**u**. If we can satisfy it to machine precision, that would be amazing. If not, hopefully it can satisfy it better than the conjugate-gradient method and then we can use the continuity equation to enforce ∇·**u**=0. An alternative (not sure if this would work) is to discretize the derivative operators using a second-order centered-difference scheme (which I believe I've done for the 1D solver, and previous 3D solver) which explicitly places the discretization points on the center of the cells. Then the wavenumbers are; ```; kˣ² = (4 / Δx²) * sin(πl / Nˣ)² # DFT; kʸ² = (4 / Δy²) * sin(πm / Nʸ)² # DFT; kᶻ² = (2 / Δz²) * (cos(πn / Nᶻ) - 1) # DCT; ```; and of course you expect second-order convergence. But if it better satisfies ∇·**u**=0 then it might be the way to go. You can also derive wavenumbers for fourth-order discretization. EDIT: Fixed second-order wavenumbers.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/8:829,test,testing,829,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/8,1,['test'],['testing']
Testability,I guess this isn't tested because otherwise it would throw an error?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2634#issuecomment-1171937765:19,test,tested,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2634#issuecomment-1171937765,1,['test'],['tested']
Testability,"I guess we agreed to make this change a while back after reading [Oreskes et al. (1994)](https://doi.org/10.1126/science.263.5147.641). On verification vs. validation:. > In contrast to the term verification, the term validation does not necessarily denote an establishment of truth (although truth is not precluded). Rather, it denotes the establishment of legitimacy, typically given in terms of contracts, arguments, and methods. We have some convergence tests which should fall under _validation experiments_ as well. Oreskes et al. (1994) comment on the fact that comparison of analytical vs. numerical solutions for Earth science models is an exercise in validation as e.g. users of Oceananigans.jl intend to model the real ocean (no analytical solutions) and not necessarily the Boussinesq equations.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1108:458,test,tests,458,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1108,1,['test'],['tests']
Testability,I guess we need a list of closures to test somewhere --- where should it go?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2016#issuecomment-945829712:38,test,test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2016#issuecomment-945829712,1,['test'],['test']
Testability,"I guess when we made it so auxiliary fields can be field dependencies for forcings we a) only tested on nonhydrostatic models, and b) didn't implement for functional boundary conditions. I also have no idea how this didn't cause OceanBioME models I've run on HydrostaticFreeSurface models to error.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3323#issuecomment-1755897292:94,test,tested,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3323#issuecomment-1755897292,1,['test'],['tested']
Testability,I guess you need to use `Inf` instead of `∞` which isn't an actual `Float64` in Julia. We accidently merged a failing test from PR #1557 into the main branch: https://buildkite.com/clima/oceananigans/builds/1935#32b55ec6-724f-4c5d-951f-bf6735923583,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1559:118,test,test,118,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1559,1,['test'],['test']
Testability,"I have added some tests, and everything is passing, including some tests for distributed immersed boundary grids that compare `active_cells_map = true` solutions with `active_cells_map = false` solutions in the serial version so I am quite confident the implementation works.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3690#issuecomment-2356982852:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3690#issuecomment-2356982852,2,['test'],['tests']
Testability,"I have included `closure` in `ShallowWaterModel` and I believe that is working correctly. However, when I try running `examples/test_advection_shallow_water.jl` I find that I get `NaN` after the first time step. . I know that the operator `∇_κ_∇c` does work with `Flat` as I have changed the one-dimensinal-diffusion-example and that does not have a problem. I guess I need to figure out what is not compatable with this operator and shallow water. If anyone has any idea what's wrong please let me know. All tests pass and I could merge but I think I will wait to get this sorted out before I merge. Might be good to add in a test afterwards to make sure that `ShallowWaterModel` can diffuse tracers without a problem.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1510#issuecomment-808801571:509,test,tests,509,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1510#issuecomment-808801571,2,['test'],"['test', 'tests']"
Testability,"I have incurred a problem with our `ScalarDiffusivity`, which is exposed in enzyme tests. . The `N` parameter of `ScalarDiffusivity` and `ScalarBiharmonicDiffusivity`, which tells us how large the halo size has to be, was in the wrong position. I tried to fix this problem by switching a couple of parameters around (I need to add a unit test for that before this PR is merged), but this exposed a problem with the constructor that is not type-stable. We can pass any `required_halo_size,` and the resulting type will differ (which is quite fine code-wise but not for auto diff). I have changed the constructor to accept `Val(halo_size_required)` instead of an integer, and this fixes the tests, but I am not completely convinced with this solution (Why would we need to pass `Val(Int)` instead of an integer?). What would the options be here? Completely change where we store the buffer size (quite annoying because it is nice to abstract it away in the parameters of the type)? Is there a way to stabilize the constructor type without doing this hacky change to the UI?. I should probably open an issue so we can discuss this topic. We should not merge this PR until this is solved.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327763947:83,test,tests,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327763947,3,['test'],"['test', 'tests']"
Testability,"I have modified the [simple 1D diffusion example](https://clima.github.io/OceananigansDocumentation/v0.90.13/literated/one_dimensional_diffusion/) to test how to correct the boundary conditions by using the gradient boundary condition, the script can be found [here](https://github.com/liuchihl/Simple-tests/blob/85f34ec2443a6ff9860f5adfbc68ff39995f00bb/1Ddiffusion_testBCflux.jl). . In the experiment, I have specified both the initial temperature (perturbation) and a constant background temperature < T > gradient, so that the total temperature T_total = < T > + T.; ; The movie below shows T_total and presents two simple experiments with an existing initial temperature. In the blue case, the default no-flux boundary condition is applied (i.e., no gradient in the wall-normal direction), but the gradient at the boundaries is nonzero because the boundary condition does not account for the background temperature. In contrast, the red case includes a boundary condition that forces the gradient of T_total to be 0. ; With this corrected boundary condition (red curve), the flux at the boundaries is 0, which is physical. However, it remains unclear how to incorporate these corrected fluxes for more complicated configurations. https://github.com/CliMA/Oceananigans.jl/assets/68127124/69e64cf9-6248-4274-9b6d-5f763827e768. The movie below shows two additional cases without an initial temperature, indicating that the background temperature, < T > defines the entire field. ; The constant blue line throughout the simulation implies that the background scalar does not diffuse either within the domain or at the boundaries. However, in the red case, despite the absence of diffusion affecting the background temperature, the nonzero flux at the boundaries causes the curve to become smoothed. ; If diffusion does not affect the background field, would it still make sense if the stratification is not a constant, such as in a Kelvin-Helmholtz instability configuration, e.g., < b > = tanh(z)?. h",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3568:150,test,test,150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3568,2,['test'],"['test', 'tests']"
Testability,I have never tried benchmarking this. maybe the gain in performance is negligible. I guess it will depend on the number of particles and the size of the grid.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3356#issuecomment-1775560431:19,benchmark,benchmarking,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3356#issuecomment-1775560431,1,['benchmark'],['benchmarking']
Testability,"I have written a script, with much help from @ali-ramadhan and @glwagner , that computes the rates of convergence for the one dimensinal constant advection case using two approaches: the 1st to 6th order schemes that I mentioned before, and the 2nd to 5th order schemes that are in Oceananigans. The results are shown below. ![convergence_rates_all](https://user-images.githubusercontent.com/8239041/102648898-511fa580-4136-11eb-99c9-a02b85465c96.png). ![convergence_rates_Oceananigans](https://user-images.githubusercontent.com/8239041/102648908-5381ff80-4136-11eb-8feb-de736ec30438.png). **Good news:** Oceananigams produces the correct slopes within error for all the cases. **Next problem:** Figure out why we didn't get the right slope in the other calculation from before and fix whatever the bug might be. You can find the code [here](https://github.com/CliMA/Oceananigans.jl/blob/fjp/update-convergence-tests/validation/new_framework/rates_of_convergence.jl)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-748252029:911,test,tests,911,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-748252029,1,['test'],['tests']
Testability,I haven't done any profiling --- just simple benchmarks. (Short example coming soon),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481266449:45,benchmark,benchmarks,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481266449,2,['benchmark'],['benchmarks']
Testability,"I haven't had the the time to investigate this for now, but `min_Δz()` (and supposedly the x and y version as well) complains about scalar indexing on the GPU when using irregular z spacing:. ```; ERROR: Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore /glade/work/tomasc/.julia/packages/GPUArraysCore/HaQcr/src/GPUArraysCore.jl:103; [3] getindex; @ /glade/work/tomasc/.julia/packages/GPUArrays/7TiO1/src/host/indexing.jl:9 [inlined]; [4] getindex; @ /glade/work/tomasc/.julia/packages/OffsetArrays/TcCEq/src/OffsetArrays.jl:436 [inlined]; [5] getindex; @ ./subarray.jl:315 [inlined]; [6] mapreduce_impl(f::typeof(identity), op::typeof(min), A::SubArray{Float64, 1, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, Tuple{UnitRange{Int64}}, true}, first::Int64, last::Int64); @ Base ./reduce.jl:638; [7] _mapreduce(f::typeof(identity), op::typeof(min), #unused#::IndexLinear, A::SubArray{Float64, 1, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, Tuple{UnitRange{Int64}}, true}); @ Base ./reduce.jl:442; [8] _mapreduce_dim; @ ./reducedim.jl:365 [inlined]; [9] #mapreduce#765; @ ./reducedim.jl:357 [inlined]; [10] mapreduce; @ ./reducedim.jl:357 [inlined]; [11] #_minimum#787; @ ./reducedim.jl:999 [inlined]; [12] _minimum; @ ./reducedim.jl:999 [inlined]; [13] #_minimum#786; @ ./reducedim.jl:998 [inlined]; [14] _minimum; @ ./reducedim.jl:998 [inlined]; [15] #minimum#784; @ ./reducedim.jl:994 [inlined]; [16] minimum; @ ./reducedim.jl:994 [inlined]; [17] min_Δz(grid::Recti",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3040:675,assert,assertscalar,675,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040,1,['assert'],['assertscalar']
Testability,I haven't looked at performance / GPU compilation in detail. I do think there is a type inference issue somewhere in this PR now because the flow over hills experiment is 7-8x slower on my laptop even without any immersed boundary condition. This likely indicates a problem with type inference in the flux divergence function (might also prevent GPU compilation). So we'll have to solve that and also add tests for CPU + GPU...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100751806:405,test,tests,405,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100751806,1,['test'],['tests']
Testability,"I implemented a simple new validation test that runs a two-dimensional barotropic turbulence problem with `ExplicitFreeSurface`: https://github.com/CliMA/Oceananigans.jl/blob/ss/multi_region/validation/multi_region/multi_region_turbulence.jl. Here's some miscellaneous notes:. * `WENO5(vector_invariant=VelocityStencil())` is faster than `WENO5()`. Note that when we write ""WENO5(vector_invariant=stencil)"" we mean that we are using the vector invariant formulation of momentum with a WENO reconstruction for vorticity, using either ""velocity"" or ""vorticity"" in the WENO smoothness metric. The ""WENO, Vector Invariant"" scheme is probably faster because it has fewer WENO interpolations (just one per momentum component rather than 2).; * `WENO5(vector_invariant=VelocityStencil())` blows up with `MultiRegionGrid`. Some timings:. | Resolution | Grid | Advection scheme | Wall time for 1000 time steps |; | ------------- | ------------- | -- | -- |; | 128^2 | `RegularRectilinearGrid` | `WENO5()` | 3.9 s |; | 128^2 | `MultiRegionGrid` | `WENO5()` | 7.4 s |; | 128^2 | `RegularRectilinearGrid` | `WENO5(vector_invariant=VelocityStencil())` | 2.8 s |; | 256^2 | `RegularRectilinearGrid` | `WENO5()` | 14.3 s |; | 256^2 | `MultiRegionGrid ` | `WENO5()` | 18.9 s |; | 256^2 | `RegularRectilinearGrid` | `WENO5(vector_invariant=VelocityStencil())` | 10.3 s |; | 512^2 | `RegularRectilinearGrid` | `WENO5()` | 56.3 s |; | 512^2 | `MultiRegionGrid ` | `WENO5()` | 62.3 s |; | 512^2 | `RegularRectilinearGrid` | `WENO5(vector_invariant=VelocityStencil())` | 40.3 s |. I propose that we. 1) Close the gap between multi-region and single-region performance?; 2) Understand why WENO vector invariant blows up on a multi region grid.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1107942730:38,test,test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1107942730,2,['test'],['test']
Testability,"I implemented the clamping from #3787 and it seems to have fixed the issue:. # GridFittedBottom. https://github.com/user-attachments/assets/1c6e4be4-ae80-42b3-9489-fe8edfb24d34. # PartialCellBottom. https://github.com/user-attachments/assets/91aa2bce-fd9e-4d74-b261-668b36cf786c. I'm not sure I really understand why it would make a difference. I'm wondering @simone-silvestri are you sure that your test was using this code?. Either way I see no reason not to merge this. Perhaps we will continue to find improvements for PartialCellBottom but I think this is ready to be used in an example. Note that in the internal tide case the partial cells have the interesting effect of weakening the vertical velocity. That could make sense if the topography is somehow ""less effectively steep"" than in the full cell case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2373911278:400,test,test,400,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2373911278,1,['test'],['test']
Testability,"I installed Julia and set up Oceananigans on my laptop and when I try running `test_shallow_water_mode.jl` I get an error. I suspect this is because of my laptop more than the PR but any ideas what's going on here? . ```[2021/01/07 11:52:45.500] INFO Testing time-stepping ShallowWaterModels [CPU(), (Periodic, Periodic, Bounded)]...; Time-stepping ShallowWaterModels [CPU(), (Periodic, Periodic, Bounded)]: Error During Test at /home/fpoulin/software/Oceananigans.jl/test/test_shallow_water_models.jl:82; Test threw exception; Expression: time_stepping_shallow_water_model_works(arch, topo, nothing); TaskFailedException:; BoundsError; Stacktrace:; [1] getindex at ./number.jl:83 [inlined]; [2] advective_tracer_flux_x at /home/fpoulin/software/Oceananigans.jl/src/Advection/upwind_biased_advective_fluxes.jl:105 [inlined]; [3] h_solution_tendency at /home/fpoulin/software/Oceananigans.jl/src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl:71 [inlined]; [4] cpu_calculate_Gh! at /home/fpoulin/.julia/packages/KernelAbstractions/jAutM/src/macros.jl:230 [inlined]; [5] __thread_run(::Int64, ::Int64, ::Int64, ::KernelAbstractions.Kernel{KernelAbstractions.CPU,KernelAbstractions.NDIterat```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-756242376:251,Test,Testing,251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-756242376,4,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability,"I just copied it from the bc which require a minus sign because of our sign convention (forcing do not). (remove the minus in lines 104 and 105) That might also help with the western boundary currents....; > . Yes, I agree that the ACC is going in the wrong direction, which suggests there is a sign error. When I look in `solution_and_tracer_tendencies.jl`, I see a `+` in front of forcings, so that looks right. Maybe there is a problem with how the wind stress is specified? . Is it easy to plot the wind stress? I imagine that would clarify what's going on. > It is also true that there is no density/salinity structure here... And the hydrostatic model is initialized with stratified ocean (maybe you want to play with the initial condition of `h`?). Also bathymetry is absent (which nucleates the eddies in the southern ocean during spinup).; > . I think starting off with `h` as constant, is a good choice. Certainly bathymetry would have an impact, but it should give us western boundary currents in the big oceans. > We should probably discuss how to implement bathymetry correctly, because I am not completely sure that what is done here is correct. On the other hand, I can also provide a spectrally ""smoothed"" bathymetry which might help with stability. @francispoulin let me know if that could be a good idea; > . I agree that it is important to do the bathymetry correctly. Smoothing it certainly would help. My first thought was to try it with the topography with 1/10 or 1/100 the magntiude, to see if that would run with the same time step. However, maybe we should confirm that the wind stress is correct?. > To color the continents in black you can set to `NaN` all the vorticity points identically equal to zero and then `heatmap(vorticity, nan_color=:black)`. I tried the following but with no difference Did you mean something else?. ```heatmap!(ax, x, y, ζ′, colormap=:balance, colorrange=(-2e-5, 2e-5), nan_color=:black)```. Also, I noticed the tests pass. That's nice to see!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1128050024:2473,test,tests,2473,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1128050024,1,['test'],['tests']
Testability,"I just edited an old benchmarkable incompressible model script to only have the model setup and time stepping. I did not profile from the start, and only profiled the time_step! function line.; I feel like the profiles are more dependent on which system have which profiler, so it might make sense to just add a few simple scripts in `benchmark` that just consist of model setup and timestep and those can be called profiliables/benchmarkables.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890004382:21,benchmark,benchmarkable,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890004382,6,['benchmark'],"['benchmark', 'benchmarkable', 'benchmarkables']"
Testability,I just finished a strong scaling multithreaded benchmark with the nonhydrostatic model with grid size being 256 cubed.; I'll venture a wild guess and say that the weak scaling shallow water model's efficiency change is not monotonic due to smaller grid sizes not saturating the CPUs. Not sure if that's still a possible explanation when the grid size scales proportional to number of threads in weak scaling. Here are the strong scaling nonhydrostatic results. I'm currently working on converting the script to do weak scaling to see if a small grid size with too many threads is what's causing very low efficiencies towards the end.; <html>; <body>; <!--StartFragment-->. size | threads | slowdown | efficiency | memory | allocs; -- | -- | -- | -- | -- | --; 256 | 1 | 1.0 | 1.0 | 1.0 | 1.0; 256 | 2 | 0.992966 | 0.503542 | 4.14014 | 152.109; 256 | 4 | 0.501089 | 0.498913 | 2.17724 | 50.2532; 256 | 8 | 0.324366 | 0.385367 | 1.94899 | 29.191; 256 | 16 | 0.244788 | 0.255323 | 2.12262 | 18.2106; 256 | 32 | 0.263339 | 0.118668 | 2.87624 | 16.3167. <!--EndFragment-->; </body>; </html>,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-890008703:47,benchmark,benchmark,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-890008703,1,['benchmark'],['benchmark']
Testability,"I just pushed the branch _exactly_ the way I just tested them here (i.e. with a bunch of things in `docs/make.jl` commented out). The docs were successfully built for me in about 30 min, so it'd be a red flag if it takes much longer than that to build it on buildkite.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478525922:50,test,tested,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478525922,1,['test'],['tested']
Testability,"I just tested `DiscreteForcing` and I have almost the same slowdown (I completed 0.20% of the simulation, compared to 0.15% using `ContinuousForcing`). Here's what I used:. ```julia; Z(k) = @inbounds -grid.Lz + grid.Δz*(k-1/2); bottom_mask(k) = @inbounds exp(-(Z(k)+80)^2 / ((2*8)^2)). sponge_u_disc(i, j, k, grid, clock, model_fields) = @inbounds - rate * bottom_mask(k) * (model_fields.u[i, j, k] -0); sponge_v_disc(i, j, k, grid, clock, model_fields) = @inbounds - rate * bottom_mask(k) * (model_fields.v[i, j, k] -0); sponge_w_disc(i, j, k, grid, clock, model_fields) = @inbounds - rate * bottom_mask(k) * (model_fields.w[i, j, k] -0). forc_u = Forcing(sponge_u_disc, discrete_form=true); forc_v = Forcing(sponge_v_disc, discrete_form=true); forc_w = Forcing(sponge_w_disc, discrete_form=true). forcing = (u=forc_u, v=forc_v, w=forc_w); ```. I may have made rookie errors here as well since this is my first time using `DiscreteForcing`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875667870:7,test,tested,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875667870,1,['test'],['tested']
Testability,"I just tested this with Julia v1.10 and Oceananigans v0.90.11 and the problem seems to have gone away. A simulation that had taken 18 minutes to initialize now takes about 20 seconds! I think we can close this issue now, but I'm still not sure what the underlying issue was, so something to keep in mind as @glwagner says above.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-2009053457:7,test,tested,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-2009053457,1,['test'],['tested']
Testability,"I keep getting bit by this, so I think its time to make the change. We'll see if there are any tests that assume the default.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3860:95,test,tests,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3860,1,['test'],['tests']
Testability,"I know `MultipleForcings` is not exported and not tested so it's experimental. It seems like a useful feature so I tried using it but I ran into an error. Seems to be related to forcing function call arguments (or maybe incorrect regularization?) but I haven't been able to figure out the exact cause. Minimal working example:. ```julia; using Oceananigans. using Oceananigans.Forcings: MultipleForcings. grid = LatitudeLongitudeGrid(size=(10, 10, 10), longitude=(0, 1), latitude=(0, 1), z=(-1, 0)). weird_forcing(λ, φ, z, t) = λ * φ + z; wonky_forcing(λ, φ, z, t) = z / (λ - φ). forcing1 = Forcing(weird_forcing); forcing2 = Forcing(wonky_forcing). forcing = (; u=MultipleForcings((forcing1, forcing2))). model = HydrostaticFreeSurfaceModel(; grid, forcing); ```. produces this error:. ```; ERROR: MethodError: no method matching field_arguments(::Int64, ::Int64, ::Int64, ::LatitudeLongitudeGrid{…}, ::@NamedTuple{…}, ::Nothing, ::Nothing). Closest candidates are:; field_arguments(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Tuple{T, T, T} where T); @ Oceananigans ~/.julia/packages/Oceananigans/Hkk5J/src/Utils/user_function_arguments.jl:8; field_arguments(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Tuple{T, T} where T); @ Oceananigans ~/.julia/packages/Oceananigans/Hkk5J/src/Utils/user_function_arguments.jl:4; field_arguments(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Tuple{Any}); @ Oceananigans ~/.julia/packages/Oceananigans/Hkk5J/src/Utils/user_function_arguments.jl:1; ... Stacktrace:; [1] user_function_arguments; @ ~/.julia/packages/Oceananigans/Hkk5J/src/Utils/user_function_arguments.jl:21 [inlined]; [2] ContinuousForcing; @ ~/.julia/packages/Oceananigans/Hkk5J/src/Forcings/continuous_forcing.jl:137 [inlined]; [3] MultipleForcings; @ ~/.julia/packages/Oceananigans/Hkk5J/src/Forcings/multiple_forcings.jl:32 [inlined]; [4] hydrostatic_free_surface_u_velocity_tendency; @ ~/.julia/packages/Oceananigans/Hkk5J/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_tenden",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3736:50,test,tested,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3736,1,['test'],['tested']
Testability,I like @glwagner 's suggestions. . One question: if we remove examples can they still reside in tests of somewhere else where people can dig them up if they want to see them or will they disappear?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2326#issuecomment-1062848647:96,test,tests,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2326#issuecomment-1062848647,1,['test'],['tests']
Testability,"I ll go ahead and merge this, in the end this PR calculates the tapering factor as the minimum of the tapering at `fcc`, `cfc` and `ccf`. Haven't really tested for stability but I guess @sandreza will run 1 degree simulations which will give us an answer. If this method is less stable we can always revert to calculating the tapering _inside_ the tensor although that gives us a flux which is not formally adiabatic",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2664#issuecomment-1191619763:153,test,tested,153,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2664#issuecomment-1191619763,1,['test'],['tested']
Testability,"I ll take a look. weird, the test that fails passes on my computer, I ll try on tartarus",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2175#issuecomment-1020261606:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2175#issuecomment-1020261606,1,['test'],['test']
Testability,"I looked at one of the errors and saw the message below. I think this means we need to restart the tests. ```; ERROR: LoadError: LoadError: SystemError: opening file ""/data5/glwagner/.julia-8057/compiled/v1.6/Oceananigans/hU93i_xHskz.ji"": No such file or directory;  ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2645#issuecomment-1178207246:99,test,tests,99,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2645#issuecomment-1178207246,1,['test'],['tests']
Testability,"I looked at one of the failed tests in shallow water model and it seems to be at these lines below. ```; @testset ""Must be Flat in the vertical"" begin; grid = RectilinearGrid(size=(1, 1, 1), extent=(1, 1, 1), topology=(Periodic,Periodic,Bounded)); @test_throws AssertionError ShallowWaterModel(grid=grid, gravitational_acceleration=1) ; ```; I tried it locally and the test passes, so I'm a bit confused as to the problem.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144196914:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144196914,4,"['Assert', 'test']","['AssertionError', 'test', 'tests', 'testset']"
Testability,I looked at the error and see this but don't pretend to know why this has happened. ``` ; Checkpointer [GPU]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_checkpointer.jl:19;   | Expression: all(test_model.timestepper.G⁻.w.data .≈ true_model.timestepper.G⁻.w.data);  ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-921755394:110,Test,Test,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-921755394,2,"['Test', 'test']","['Test', 'test']"
Testability,"I looked through the package and it seems like things are already in CuArrays then. https://github.com/climate-machine/Oceananigans.jl/blob/master/src/time_steppers.jl#L42-L78. this should quite readily port over to using DifferentialEquations.jl. It looks like you're using an IMEXEuler scheme? I think there would be some pretty good performance gains, and it would be interesting to start being able to use this entire package as a benchmark.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/391:435,benchmark,benchmark,435,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/391,1,['benchmark'],['benchmark']
Testability,"I made a simple script for testing, and it takes 3 minutes to run on my PC \(on either CPU or GPU\). This is a 2D simulation initialized with a lateral buoyancy gradient. The top is tilted. The figure shows the comparison between the default solver and the `HeptadiagonalIterativeSolver`. The default FFT solver produces pixelated patterns near the top boundary and deep zonal jets in the ocean interior. Besides, I tired the `HeptadiagonalIterativeSolver` with the FFT-based solver as a preconditioner. It did not crash for this script and produced almost the same as the `HeptadiagonalIterativeSolver` with no preconditioner. ![u](https://github.com/CliMA/Oceananigans.jl/assets/49335616/104a8b9b-4b09-4d36-a24d-64625320e0ba). ```Julia; using Printf; using Oceananigans; using Oceananigans.Models.NonhydrostaticModels: ImmersedPoissonSolver. # ---------------------------------------------------------------------- #; # Define Parameters. # Numerical Technic; const arch = CPU(); const time_stepper = :RungeKutta3; const advection = WENO(). # Grid; const Nx = 1; const Ny = 200; const Nz = 50; const Lx = 100.0e3; const Ly = 200.0e3; const Lz = 50.0e3. const Δz = Lz / 2 # elevation difference at the top. # Time Stepping; const Δt = 1800.0. # Physical Parameters; const diffusivity = 1.0e-4; const Pr = 1.0; const f₀ = 1.0e-4; const Δb = 1.0e-6 # buoyancy difference at the top. # Output; const output_interval = 1; const deflatelevel = 4. # ---------------------------------------------------------------------- #; # Define Utils. # Height at Top; @inline function z_top(y::R) where {R<:Real}; return Lz - (Δz / Ly) * y; end. # Viscosity; const viscosity = Pr * diffusivity. # Initial Fields; @inline function b_initial(x::R, y::R, z::R) where {R<:Real}; ϵ = 100 * eps(R); return (Δb / Ly) * y + randn() * ϵ; end. # ---------------------------------------------------------------------- #; # Define the Simulation. # Grid; ib_grid = begin; underlying_grid = RectilinearGrid(; arch,; size = (Nx, Ny",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3552#issuecomment-2070993577:27,test,testing,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3552#issuecomment-2070993577,2,['test'],['testing']
Testability,I made an attempt in #2701 to put the `allowscalar` in the places that the tests required them and remove the general allowscalar statement that @simone-silvestri points out above. But I couldn't finish the attempt... I was getting so many tests failing and I admit I got worn out in the end and stopped that effort......,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-1492734079:75,test,tests,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-1492734079,2,['test'],['tests']
Testability,"I mean the new user interface for `ImmersedBoundaryCondtion`. Previously, I tried to do a simulation with heating distributed on an irregular bottom, and I found that I had to use `ImmersedBoundaryCondition(top = the_bottom_heating)` instead of `ImmersedBoundaryCondition(bottom = the_bottom_heating)` after some testing. I felt this strange and reported this behavior to Simone. Then he opened this issue, because it affects his simulations as well. I am sorry for confusing you, since you did not know Simone and I had some discussion on issue before.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3141#issuecomment-1583286782:313,test,testing,313,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3141#issuecomment-1583286782,1,['test'],['testing']
Testability,I meant generating it on main and testing it on 0.76.5 or 0.76.8. I guess it will not make a difference though,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439363214:34,test,testing,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439363214,1,['test'],['testing']
Testability,I merged main but cancelled the CI to avoid clutter. We should restart the CI when there is no other PR running CI tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2147#issuecomment-1013760179:115,test,tests,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2147#issuecomment-1013760179,1,['test'],['tests']
Testability,"I might have been a bit too quick to merge as it seems that some tests are failing on master, and I presume as a result, is why we are not getting the new example in the docs. . @navidcy do you happen to know what's gone wrong? . I see that `align` is still in the example so I wonder if we got confuses in our updates and don't have the latest and greatest version?. ```; # ```math; # \begin{align}; # \overline{\eta}(y) & = - Δη \tanh(y) ,; # \overline{u}(y) & = U \sech^2(y) .; # \end{align}; # ```; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798925559:65,test,tests,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798925559,1,['test'],['tests']
Testability,I missed the previous comments. This can occur if SpecialFunctions is available in the global environment. You need to delete the global environment and then test.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1707#issuecomment-849301841:158,test,test,158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1707#issuecomment-849301841,1,['test'],['test']
Testability,I noticed that in a couple of tests in `test_grids.jl` the code was written in way that leads to some not-so-clear statements such as:. https://github.com/CliMA/Oceananigans.jl/blob/182e75c80645af0d6a7105ed2d8d4fcbceb7bccc/test/test_grids.jl#L381. The above seems wrong at first but it's actually correct since `Δzᵃᵃᶜ()` is defined the same way as `grid.Δzᵃᵃᶠ`. This PR changes that to make the notation clearer (i.e. `grid.Δzᵃᵃᶠ[2:Nz] == Δzᵃᵃᶠ.(2:Nz)`) and condenses 3 separate test functions for stretched grids (needing three separate grid instantiations) into one function (with the same tests). EDIT:. This also implements a suggestion by @glwagner in https://github.com/CliMA/Oceananigans.jl/pull/2865 that couldn't be implemented then. I'll open another PR in the near future to further condense some other tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2917:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2917,5,['test'],"['test', 'tests']"
Testability,"I noticed that our git repo has ballooned in size some time in the past week. Someone, possibly me, committed a 52 MiB `ocean_wind_mixing_and_convection.jld2` file, possibly generated by running the example? But `docs/src/generated` is in `.gitignore` so not sure how it made it in. Either way, I think we should scrub it because the repo size has increased by an order of magnitude... ---. Here's a list of files over 500 KiB:; ```; d277a4e5393b 650KiB test/regression_tests/data/data_rayleigh_benard_regression.jld2; b125bc6f8e9d 709KiB test/regression_tests/data/ocean_large_eddy_simulation_VerstappenAnisotropicMinimumDissipation_10000.jld2; f5c1a7736324 709KiB test/regression_tests/data/ocean_large_eddy_simulation_VerstappenAnisotropicMinimumDissipation_10010.jld2; 0b493fa7dd14 709KiB test/regression_tests/data/ocean_large_eddy_simulation_SmagorinskyLilly_10000.jld2; ad020f12370b 709KiB test/regression_tests/data/ocean_large_eddy_simulation_SmagorinskyLilly_10010.jld2; 0ee7298c84ad 731KiB test/thermal_bubble_golden_master_model_checkpoint_10.jld; eeeca1f2b394 2.4MiB test/deep_convection_golden_master_model_checkpoint_10.jld; 4eb0499aa289 52MiB dev/generated/ocean_wind_mixing_and_convection.jld2; 5b613ce426d5 52MiB v0.14.1/generated/ocean_wind_mixing_and_convection.jld2; 7fddefca8cc0 52MiB dev/generated/ocean_wind_mixing_and_convection.jld2; b5c2ca7312e5 52MiB dev/generated/ocean_wind_mixing_and_convection.jld2; d1ee57ba2365 52MiB dev/generated/ocean_wind_mixing_and_convection.jld2; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/509:454,test,test,454,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/509,7,['test'],['test']
Testability,"I noticed there was a problem with the halos so I hard coded it to be `(3,3)`, which is appropriate for the default advection scheme. Now the example seems to yield `NaNs`, which is another mystery. Maybe the halos are not set correctly?. ```; Time stepping ShallowWaterModel: Time stepping ShallowWaterModel: Error During Test at Error During Test at Time stepping ShallowWaterModel: /storage7/buildkite-agent/builds/tartarus-mit-edu-11/clima/oceananigans/test/test_distributed_models.jl:496; --; &nbsp; | Got exception outside of a @test; &nbsp; | Time stepping ShallowWaterModel: time = 1.9999999999999998, iteration = 2: NaN found in field uh. Aborting simulation.; &nbsp; | Stacktrace:; &nbsp; | [1] error(::String) at ./error.jl:33; &nbsp; | [2] error_if_nan_in_field at /storage7/buildkite-agent/builds/tartarus-mit-edu-11/clima/oceananigans/src/Diagnostics/nan_checker.jl:22 [inlined]; &nbsp; | [3] run_diagnostic!(::NaNChecker{IterationInterval,NamedTuple{(:uh,),Tuple{Field{Face,Center,Center,CPU,OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Flat,OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Float64,NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{HaloCommunication,Oceananigans.Distributed.HaloCommunicationRanks{Int64,Int64}},BoundaryCondition{HaloCommunication,Oceananigans.Distributed.HaloCommunicationRanks{Int64,Int64}}},CoordinateBoundaryConditions{Nothing,Nothing}}}}}}}, ::ShallowWaterModel{RegularRectilinearGrid{Float64,Periodic,Periodic,Flat,OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},MultiCPU{RegularRectilinearGrid{Float64,Periodic,Periodic,Flat,OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843222534:323,Test,Test,323,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843222534,4,"['Test', 'test']","['Test', 'test']"
Testability,I noticed this deprecated warning... https://github.com/CliMA/Oceananigans.jl/blob/d9e2c31e20e78f1b1dcb4d9bd01a959c51bcb60e/test/test_boundary_conditions_integration.jl#L139-L140,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2091:124,test,test,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2091,1,['test'],['test']
Testability,I only saw the problem in Single Column models. In #2786 I added tests for Slice XY models + Ensembles of those and was not seeing this same issue there.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308122540:65,test,tests,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308122540,1,['test'],['tests']
Testability,"I prefer to have passing tests before a merge to master, even in cases where we ""think"" it's fine.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1844#issuecomment-877447072:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1844#issuecomment-877447072,1,['test'],['tests']
Testability,"I presume the time step wizard would use this new function? If yes, then maybe we could add a test that uses the wizard for one time step.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866089434:94,test,test,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866089434,1,['test'],['test']
Testability,"I propose that we adopt a policy that all tests contributed to `Oceananigans` must run on both the CPU and the GPU, because currently the GPU functionality is equal or more important than the CPU functionality. To resolve this issue and implement this policy moving forward, we need to adapt existing tests so that all tests run on the GPU.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/242:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/242,3,['test'],['tests']
Testability,"I propose we merge this and add a convergence test later, since the convergence test work will take time to complete and we are reasonably sure this PR is correct.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1806#issuecomment-872654930:46,test,test,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1806#issuecomment-872654930,2,['test'],['test']
Testability,I pushed this commit as part of PR #727 but I think GitHub servers were experiencing issues so it seems it somehow didn't make it into master. GPU tests passed so should be an easy merge.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/733:147,test,tests,147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/733,1,['test'],['tests']
Testability,"I put a ton of effort into making it so that we could include one file and run the tests. So if its broken or wasn't a complete solution hopefully we can fix it, or make it work more generally. It's more annoying to have to include the filename as a global variable. I don't like that workflow as much. When we can include a file, we can rapidly iterate because we don't have to wait for things to recompile.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1997573228:83,test,tests,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1997573228,1,['test'],['tests']
Testability,I put together some utilities for testing multithreading versus Base.threads for a simple kernel:. https://github.com/glwagner/multithreaded-stencils. I've used a new repo because it might be worthwhile to test threaded computations in other programming languages.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-885981005:34,test,testing,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-885981005,4,['test'],"['test', 'testing']"
Testability,"I ran a few tests using the [Bickley Jet](https://github.com/CliMA/Oceananigans.jl/blob/glw-vw/grid-fitted-incompressible-model/validation/immersed_boundaries/immersed_bickley_jet.jl) with an immersed top wall from the validation script. . ### Surface Normal Velocity; We can easily look at the surface normal velocity of the immersed wall (which should be zero) with increased resolution and see that it is converging nicely, as this method should be exact except for the pressure correction, which will scale. ![Bickley_normal](https://user-images.githubusercontent.com/67593861/122986244-2e807a80-d36d-11eb-924a-074ca0ad127c.png). ### Tracer Conservation; We can also look at tracer conservation. The initial concentration is sinusoidal, so the area integrated concentration is zero over the domain initially. I've plotted both the IBM and non-IBM (lighter colors) results to see the differences. This one is on a log plot. You can see that leakage is happening in the IBM versions. It's hard to say how bad the leakage is here, and it'll probably be better to consider an initial constant concentration rather than sinusoidal to see how much leakage is occurring due to the immersed solid. ![volint_Concentration_log](https://user-images.githubusercontent.com/67593861/122986580-a058c400-d36d-11eb-9a7c-e3e8d2a7367e.png). It might be easier to see what is going on in the IBM cases without the log scaling:. ![volint_Concentration](https://user-images.githubusercontent.com/67593861/122989251-984e5380-d370-11eb-88cc-ccf4444fb331.png). ### Integrated Boundary Stress; Finally, I looked at the integrated boundary stress along the top wall. The error between the nonIBM and IBM versions at these same grid sizes are below. Unfortunately this is not getting better with increased resolution. This could be due to base state changes causing the stress to change and not necessarily something wrong with the method. It might take better refinement than 256 x 256 to really see a trend here. ![Bickley_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866285588:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866285588,2,"['log', 'test']","['log', 'tests']"
Testability,"I ran the advection scheme benchmarks and comparing with some older Julia 1.5 results it definitely is slower on the GPU. WENO5 used to only be ~3x slower than CenteredSecondOrder, but now it's 26x slower. All other advection schemes are just as fast as they used to be. Not slow enough to be CUDA scalar operations so maybe the GPU compiler changed in some way that kernels calling/using WENO5 are compiling into suboptimal machine code?. @maleadt might have some ideas/suggestions but maybe we just have to profile and find the new bottleneck?. ---. ```; Advection schemes relative performance (GPU); ┌───────────────┬────────────────────────┬──────────┬─────────┬─────────┐; │ Architectures │ Schemes │ slowdown │ memory │ allocs │; ├───────────────┼────────────────────────┼──────────┼─────────┼─────────┤; │ GPU │ CenteredFourthOrder │ 1.38356 │ 1.05911 │ 1.60067 │; │ GPU │ CenteredSecondOrder │ 1.0 │ 1.0 │ 1.0 │; │ GPU │ UpwindBiasedFifthOrder │ 1.53145 │ 1.0868 │ 1.88203 │; │ GPU │ UpwindBiasedThirdOrder │ 1.30611 │ 1.04135 │ 1.42012 │; │ GPU │ WENO5 │ 26.1429 │ 4.68526 │ 38.4468 │; └───────────────┴────────────────────────┴──────────┴─────────┴─────────┘; ```. Compare with: https://github.com/CliMA/Oceananigans.jl/pull/1169#issuecomment-725471594",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868093699:27,benchmark,benchmarks,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868093699,1,['benchmark'],['benchmarks']
Testability,"I ran the benchmark again with triply periodic but it's still much slower so the issue might be deeper than the logic in `topologically_conditional_interpolation.jl`. ```; Advection schemes relative performance (GPU); ┌───────────────┬────────────────────────┬──────────┬─────────┬─────────┐; │ Architectures │ Schemes │ slowdown │ memory │ allocs │; ├───────────────┼────────────────────────┼──────────┼─────────┼─────────┤; │ GPU │ CenteredFourthOrder │ 1.50326 │ 1.06836 │ 1.69674 │; │ GPU │ CenteredSecondOrder │ 1.0 │ 1.0 │ 1.0 │; │ GPU │ UpwindBiasedFifthOrder │ 1.69787 │ 1.09472 │ 1.96539 │; │ GPU │ UpwindBiasedThirdOrder │ 1.39899 │ 1.05598 │ 1.57057 │; │ GPU │ WENO5 │ 33.2728 │ 5.21273 │ 43.9286 │; └───────────────┴────────────────────────┴──────────┴─────────┴─────────┘; ```. ```diff; diff --git a/benchmark/benchmark_advection_schemes.jl b/benchmark/benchmark_advection_schemes.jl; index 81b083e1..e6ba8cd6 100644; --- a/benchmark/benchmark_advection_schemes.jl; +++ b/benchmark/benchmark_advection_schemes.jl; @@ -7,7 +7,8 @@ using Benchmarks; # Benchmark function. function benchmark_advection_scheme(Arch, Scheme); - grid = RegularRectilinearGrid(size=(192, 192, 192), extent=(1, 1, 1)); + topo = (Periodic, Periodic, Periodic); + grid = RegularRectilinearGrid(topology=topo, size=(192, 192, 192), extent=(1, 1, 1)); model = IncompressibleModel(architecture=Arch(), grid=grid, advection=Scheme()); ; time_step!(model, 1) # warmup; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868122855:10,benchmark,benchmark,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868122855,8,"['Benchmark', 'benchmark', 'log']","['Benchmark', 'Benchmarks', 'benchmark', 'logic']"
Testability,"I ran. ```julia; using Oceananigans; using NCDatasets. Nx = Ny = Nz = 16; grid = RectilinearGrid(size=(Nx, Ny, Nz), extent=(1, 1, 1)). tracer_names = Tuple(Symbol(:τ, n) for n = 1:6); model = NonhydrostaticModel(; grid, tracers=tracer_names). uᵢ(x, y, z) = randn(); cᵢ(x, y, z) = sin(2π * z / grid.Lz); kw = NamedTuple(c => cᵢ for c in tracer_names); set!(model; u=uᵢ, v=uᵢ, w=uᵢ, kw...). simulation = Simulation(model, Δt=0.1/Nx, stop_iteration=100). u, v, w = model.velocities; fluxes = NamedTuple(Symbol(""wτ$n"") => Field(w*c) for (n, c) in enumerate(model.tracers)); averaged_fluxes = NamedTuple(Symbol(""avg_wτ$n"") => Average(flux, dims=2) for (n, flux) in enumerate(fluxes)). jld2_filename = ""test.jld2""; nc_filename = ""test.nc""; kwargs = (schedule = IterationInterval(1),; verbose = true,; indices = (:, 1, :),; overwrite_existing = true). simulation.output_writers[:jld2] = JLD2OutputWriter(model, merge(fluxes, averaged_fluxes);; filename = jld2_filename,; kwargs...). simulation.output_writers[:nc] = NetCDFOutputWriter(model, merge(fluxes, averaged_fluxes);; filename = nc_filename,; kwargs...). run!(simulation). ds = Dataset(nc_filename). Ntracers = length(tracer_names); flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(filename, ""wτ$n"") for n = 1:Ntracers); average_flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(filename, ""avg_wτ$n"") for n = 1:Ntracers). flux_1_nc = ds[""wτ1""]; avg_flux_1_nc = ds[""avg_wτ1""]; flux_1 = flux_timeseries[""wτ1""]; avg_flux_1 = average_flux_timeseries[""wτ1""]. for n = 2:Ntracers; flux_n = flux_timeseries[""wτ$n""]; avg_flux_n = average_flux_timeseries[""wτ$n""]. @show ""Fluxes for tracer $n:""; @show all(flux_1[:, 1, :, :] .≈ flux_n[:, 1, :, :]); @show all(avg_flux_1[:, 1, :, :] .≈ avg_flux_n[:, 1, :, :]); @show all(flux_1_nc .≈ ds[""wτ$n""]); @show all(avg_flux_1_nc .≈ ds[""avg_wτ$n""]); end. close(ds); ```. and all the fluxes and averaged fluxes are identical for both JLD2 and NetCDF output writers.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436113039:697,test,test,697,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436113039,2,['test'],['test']
Testability,I re-ran the benchmarks and included the matrix solver with no preconditioner. Recording the results here for posterity:. ```; Hydrostatic model benchmarks; ┌───────────────┬─────────────────┬───────────────────────────────────────────────┬───────────┬───────────┬───────────┬────────────┬────────────┬─────────┬─────────┐; │ architectures │ grid_types │ free_surface_types │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────────┼───────────────────────────────────────────────┼───────────┼───────────┼───────────┼────────────┼────────────┼─────────┼─────────┤; │ CPU │ RectilinearGrid │ PCGImplicitFreeSurfaceNoPreconditioner │ 61.099 ms │ 70.657 ms │ 91.448 ms │ 161.977 ms │ 24.25 MiB │ 29768 │ 10 │; │ GPU │ RectilinearGrid │ PCGImplicitFreeSurfaceNoPreconditioner │ 17.595 ms │ 23.320 ms │ 22.090 ms │ 26.288 ms │ 4.26 MiB │ 43632 │ 10 │; │ CPU │ RectilinearGrid │ PCGImplicitFreeSurface │ 12.473 ms │ 14.323 ms │ 14.833 ms │ 19.016 ms │ 5.50 MiB │ 9866 │ 10 │; │ GPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceNoPreconditioner │ 9.471 ms │ 9.647 ms │ 9.777 ms │ 10.601 ms │ 2.08 MiB │ 18243 │ 10 │; │ CPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceOrd2 │ 29.854 ms │ 38.381 ms │ 43.885 ms │ 69.085 ms │ 5.34 MiB │ 8469 │ 10 │; │ CPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceSparsePreconditioner │ 33.183 ms │ 42.544 ms │ 41.127 ms │ 46.910 ms │ 5.34 MiB │ 8491 │ 10 │; │ GPU │ RectilinearGrid │ PCGImplicitFreeSurface │ 4.380 ms │ 4.709 ms │ 4.824 ms │ 6.626 ms │ 1.89 MiB │ 10256 │ 10 │; │ CPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceNoPreconditioner │ 29.694 ms │ 33.940 ms │ 35.731 ms │ 48.457 ms │ 5.34 MiB │ 8490 │ 10 │; │ GPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceOrd2 │ 5.987 s │ 5.987 s │ 5.987 s │ 5.987 s │ 462.46 MiB │ 8636458 │ 1 │; │ GPU │ RectilinearGrid │ MatrixImplicitFreeSurfaceSparsePreconditioner │ 6.611 ms │ 7.311 ms │ 7.608 ms │ 9.821 ms │ 1.84 MiB │ 12582 │ 10 │; └───────────────┴─────────────────┴──────────────,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2412#issuecomment-1108986503:13,benchmark,benchmarks,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2412#issuecomment-1108986503,2,['benchmark'],['benchmarks']
Testability,"I recently ran some benchmarks on threading for Oceananigans based on scripts added by @francispoulin in an older branch.; https://github.com/CliMA/Oceananigans.jl/blob/fjp/multithreaded-benchmarks/benchmark/weak_scaling_shallow_water_model_threaded.jl; https://github.com/CliMA/Oceananigans.jl/blob/fjp/multithreaded-benchmarks/benchmark/weak_scaling_shallow_water_model_serial.jl; Besides the benchmark scripts themselves, everything else was up to date with the latest version of master. Here are the results:; ```; Oceananigans v0.58.8; Julia Version 1.6.1; Commit 6aaedecc44 (2021-04-23 05:59 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Platinum 8260 CPU @ 2.40GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; EBVERSIONJULIA = 1.6.1; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.1; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.1/easybuild/avx2-Core-julia-1.6.1-easybuild-devel; JULIA_LOAD_PATH = :. Shallow water model weak scaling with multithreading benchmark; ┌───────────────┬─────────┬─────────┬─────────┬─────────┬─────────┬───────────┬─────────┬─────────┐; │ size │ threads │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼───────────┼─────────┼─────────┤; │ (8192, 512) │ 1 │ 1.453 s │ 1.454 s │ 1.454 s │ 1.456 s │ 1.37 MiB │ 2318 │ 4 │; │ (8192, 1024) │ 2 │ 2.909 s │ 2.933 s │ 2.933 s │ 2.956 s │ 21.52 MiB │ 1303192 │ 2 │; │ (8192, 2048) │ 4 │ 2.096 s │ 2.115 s │ 2.125 s │ 2.165 s │ 16.38 MiB │ 942343 │ 3 │; │ (8192, 4096) │ 8 │ 2.178 s │ 2.198 s │ 2.218 s │ 2.280 s │ 17.82 MiB │ 987092 │ 3 │; │ (8192, 8192) │ 16 │ 2.201 s │ 2.218 s │ 2.216 s │ 2.230 s │ 18.33 MiB │ 922426 │ 3 │; │ (8192, 16384) │ 32 │ 2.598 s │ 2.615 s │ 2.615 s │ 2.632 s │ 24.29 MiB │ 1116849 │ 2 │; └───────────────┴─────────┴─────────┴───────",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861:20,benchmark,benchmarks,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861,6,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"I recently ran the weak scaling shallow water model benchmark with the MultiGPU architecture on Satori, thanks to @christophernhill.; Here are the results:; <html>; <body>; <!--StartFragment-->. size | ranks | min | median | mean | max | memory | allocs | samples; -- | -- | -- | -- | -- | -- | -- | -- | --; (4096, 256) | (1, 1) | 2.765 ms | 2.786 ms | 2.849 ms | 3.374 ms | 2.03 MiB | 5535 | 10; (4096, 512) | (1, 2) | 6.932 ms | 7.081 ms | 8.037 ms | 26.174 ms | 2.03 MiB | 5859 | 20; (4096, 1024) | (1, 4) | 12.592 ms | 14.603 ms | 16.417 ms | 31.468 ms | 2.03 MiB | 5859 | 40. <!--EndFragment-->; </body>; </html>. <html>; <body>; <!--StartFragment-->. size | ranks | slowdown | efficiency | memory | allocs; -- | -- | -- | -- | -- | --; (4096, 256) | (1, 1) | 1.0 | 1.0 | 1.0 | 1.0; (4096, 512) | (1, 2) | 2.54127 | 0.393505 | 1.00271 | 1.05854; (4096, 1024) | (1, 4) | 5.24053 | 0.19082 | 1.00271 | 1.05854. <!--EndFragment-->; </body>; </html>. The results are not good but at least we can benchmark multi-GPU performance now.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882:52,benchmark,benchmark,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882,2,['benchmark'],['benchmark']
Testability,"I remember discussing a strategy for working on the _design_ of open boundary conditions, and for that I advocated for finding a simple scheme to implement and focusing on the overall design. The purpose of that is to allow us to think clearly and logically about the software design without getting tangled up in numerics. Once we have a good design (I'm not sure that we do unfortunately...) then the door is open to work on numerics, hopefully without being hindered too much (the point of a good design). Then we can make rapid progress. But this sort of strategy to focus on ""one thing at a time"" is not a comment about whether we should put numerics in the source code or not. It's a strategy for software development, not a comment about package organization.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2391355404:248,log,logically,248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2391355404,2,['log'],['logically']
Testability,"I removed the `.julia` file on my computer with a GPU and then it passed all 4 regression tests: `CPU/GPU` and `VectorInvariant/Conservative`. Maybe this needs to be done on the other servers to get the test to pass?. I will point out that for the `VectorInvariantFormulation` the absmean and std are identical to four or more decimals for GPU and CPU. However, for the `ConservativeFormulation`, the values for `v` and `h` are as good but the `u` value for absmean and std off by about 100. Maybe this is a concern, even though the tests pass?. ```; julia> include(""test/test_shallow_water_regression.jl""); [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:23.118] INFO Running shallow water regression tests...; FJP: arch and formulation = CPU()VectorInvariantFormulation(); [2023/02/27 18:57:23.119] INFO Testing shallow water Bickley jet simulation regression [CPU, VectorInvariantFormulation]; [2023/02/27 18:57:23.124] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:223; [2023/02/27 18:57:23.525] INFO Initializing simulation...; [2023/02/27 18:57:23.526] INFO ... simulation initialization complete (1.081 ms); [2023/02/27 18:57:23.526] INFO Executing initial time step...; [2023/02/27 18:57:24.661] INFO ... initial time step complete (1.135 seconds).; [2023/02/27 18:57:46.538] INFO Simulation is stopping after running for 21.864 seconds.; [2023/02/27 18:57:46.538] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:57:46.680] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:90,test,tests,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226,5,['test'],"['test', 'tests']"
Testability,I restarted the Buildkite build since the cpu distributed tests failed due to some random ELF error then the build finished and cleaned up the Julia depot so it was too late to restart the cpu distributed tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-843499929:58,test,tests,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-843499929,2,['test'],['tests']
Testability,"I run this:. ```Julia; using Oceananigans. grid = RectilinearGrid(size=(16, 16, 16), extent = (500, 500, 120)). n_tracers = 6; tracer_symbols = [ Symbol(:τ, i) for i in 1:n_tracers ]; model = NonhydrostaticModel(; grid, tracers = (tracer_symbols...,)); @info model. uᵢ(x, y, z) = 1e-2 * randn(); set!(model, w=uᵢ). tracer_IC_odd(x, y, z) = sin(2π * z / grid.Lz); for i in 1:n_tracers; @info ""Setting tracer $i""; expression = Meta.parse(""set!(model, τ$i=tracer_IC_odd)""); eval(expression); end. simulation = Simulation(model, Δt=30, stop_iteration=4). u, v, w = model.velocities. wτ = NamedTuple(Symbol(:w, key) => Field(w*τ) for (key, τ) in pairs(model.tracers)). outputs_full = (; wτ...). outputs_yavg = NamedTuple( Symbol(key, :_yavg)=>Average(val, dims=(2,)) for (key, val) in zip(keys(outputs_full), outputs_full)). outputs_xz1 = merge(outputs_full, outputs_yavg); simulation.output_writers[:xz1_writer] = NetCDFOutputWriter(model, outputs_xz1;; filename = ""test.nc"",; schedule = TimeInterval(simulation.stop_time),; verbose=true,; indices = (:, 1, :),; overwrite_existing = true,; ); run!(simulation); ```. and got; ```Julia; [ Info: Initializing simulation...; [ Info: Writing to NetCDF: ./test.nc...; [ Info: Computing NetCDF outputs for time index 1: [""wτ3"", ""wτ2_yavg"", ""wτ6_yavg"", ""wτ1"", ""wτ5_yavg"", ""wτ6"", ""wτ2"", ""wτ5"", ""wτ4"", ""wτ1_yavg"", ""wτ4_yavg"", ""wτ3_yavg""]...; [ Info: Computing wτ3 done: time=439.823 ms; [ Info: Computing wτ2_yavg done: time=3.404 seconds; [ Info: Computing wτ6_yavg done: time=3.018 seconds; [ Info: Computing wτ1 done: time=225.326 ms; [ Info: Computing wτ5_yavg done: time=2.950 seconds; [ Info: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; [ Info: Writing done: time=17.732 s",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:962,test,test,962,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387,1,['test'],['test']
Testability,"I see some stuff like `N2` in the [plankton example](https://clima.github.io/OceananigansDocumentation/stable/generated/convecting_plankton/#Boundary-conditions), which is a fixed problem parameter used in the BC but isn't a `const`. I haven't tried to test if making this a constant speeds up things, but I guess I should, no? Should I make a PR to make those alterations?. P.S.: I'm not super clear on which cases defining things as a const helps or not. I just know that the general rule is use something as a `const` if it really isn't gonna change in the problem. That general rule comes from the julia docs.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881673256:253,test,test,253,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881673256,2,['test'],['test']
Testability,"I see that in the Benchmarks there are 5 sets of results. Do we want to only do these or would we like to include other results? . There are a lot of benchmark examples we could include, but I agree it's probably better to focus on the most interesting ones.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845144714:18,Benchmark,Benchmarks,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845144714,2,"['Benchmark', 'benchmark']","['Benchmarks', 'benchmark']"
Testability,I see there is a failed test but from looking at the error it seems to be due to exceeding a disk quota. I will proceed to merge as this code is not actually used in any of the tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866919955:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866919955,2,['test'],"['test', 'tests']"
Testability,"I see what you mean that `h ∇ ⋅ (ν ∇u)` also satisfies some nice properties. I haven't seen that before but why not? Seems like a viable option. Maybe add that to the list of possible viscosity for shallow water?. It would be fun to test what difference these terms have on a simple problem. Just need to think about the problem, and of course get the code working.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2403#issuecomment-1090416474:233,test,test,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2403#issuecomment-1090416474,2,['test'],['test']
Testability,"I seem to have a problem with the GPU cubed sphere tests; ```; ERROR: Out-of-bounds array access.; ERROR: a exception was thrown during kernel execution.;   | Run Julia on debug level 2 for device stack traces.; ```; When running the tests on tartarus, both normally and with debug level 2, I cannot reproduce the error",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1115031875:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1115031875,2,['test'],['tests']
Testability,"I started down that road, but had to install some packages to get the script to run and haven't returned to it yet! I'm confused at how running the exact same code that you ran will uncover an issue. Isn't it more likely that there is a bug in the script, than some issue with computers / software versions?. An efficient path forward might be to write a test that fails due to this error? Then submit a PR that adds the failing test, and we can collaborate on getting the test to pass. We'd have to do this anyways; and writing a test is a good way to come up with a minimal example that we could use to isolate the issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817957659:355,test,test,355,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817957659,4,['test'],['test']
Testability,I still think it might be a good idea to implement `VectorInvariant` in `ShallowWaterModel` first because then (1) we have a (hopefully positive) addition to the code (2) we have an exact solution to quantitatively and efficiently test the scheme on,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1062904021:231,test,test,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1062904021,1,['test'],['test']
Testability,"I suggest putting back the complete testing suite and seeing if reducing documentation build time from 1.45 to 1hr decreases overall test time and how much. If it does not give a substantial decrease in test time, I would not bother not to overload Tartarus (already a 1.75 speedup with 4 cores is probably not worth so much)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1592133562:36,test,testing,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1592133562,3,['test'],"['test', 'testing']"
Testability,"I suggest starting a thread on `LambertW.jl` and ask whether the code is GPU compatible. It will probably be more straightforward to test this first using `CUDA.jl` or `KernelAbstractions.jl` and then, if that works, get it working in Oceananigans.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1904981295:133,test,test,133,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1904981295,1,['test'],['test']
Testability,I suggest we convert the plankton example to use a vertically stretched grid. Then we can delete the `sandbox` directory from the repo. Also in the https://clima.github.io/OceananigansDocumentation/dev/model_setup/grids/ we should point the user to this example in the discussion (that doesn't exist yet?) about vertically stretched grid.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1394:102,sandbox,sandbox,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1394,1,['sandbox'],['sandbox']
Testability,"I suspect in this particular case the failures might be related to https://github.com/CliMA/Oceananigans.jl/issues/1179 . I agree it's irrelevant to this PR so I'll go ahead and merge. Looking at the build log it looks like it's a small number of grid points that are outside the required tolerance. ```; [2021/02/22 10:57:39.093] INFO Testing oceanic large eddy simulation regression [GPU, SmagorinskyLilly, regular grid]; [2021/02/22 10:58:14.536] INFO Δu: min=-5.666049e-10, max=+3.671358e-10, mean=-2.983144e-20, absmean=+2.668769e-12, std=+2.226909e-11 (4069/4096 matching grid points); [2021/02/22 10:58:14.552] INFO Δv: min=-5.253857e-10, max=+3.415200e-10, mean=+3.250489e-20, absmean=+2.216612e-12, std=+1.693819e-11 (4087/4096 matching grid points); [2021/02/22 10:58:14.553] INFO Δw: min=-8.810720e-10, max=+3.828218e-10, mean=+1.396074e-21, absmean=+1.776769e-12, std=+1.811893e-11 (4030/4096 matching grid points); [2021/02/22 10:58:14.554] INFO ΔT: min=-3.171365e-10, max=+1.584819e-09, mean=+1.486753e-12, absmean=+2.286620e-12, std=+4.048190e-11 (4096/4096 matching grid points); [2021/02/22 10:58:14.555] INFO ΔS: min=-5.826450e-13, max=+5.613288e-13, mean=-6.418477e-17, absmean=+2.742598e-15, std=+1.726765e-14 (4096/4096 matching grid points); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1395#issuecomment-783500631:206,log,log,206,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1395#issuecomment-783500631,2,"['Test', 'log']","['Testing', 'log']"
Testability,"I suspect that the docstring for the `BatchedTridiagonalSolver`,. https://github.com/CliMA/Oceananigans.jl/blob/60c2278aafc536f0cd6b086ccd606bc6755e6e5e/src/Solvers/batched_tridiagonal_solver.jl#L17-L23. is incorrect. The docstring suggests that `c` (the upper diagonal) is indexed from `k=2` to `k=Nz`; however it is actually indexed from `k=1` to `k=Nz-1`:. https://github.com/CliMA/Oceananigans.jl/blob/60c2278aafc536f0cd6b086ccd606bc6755e6e5e/src/Solvers/batched_tridiagonal_solver.jl#L82-L84. In the above code the `c` index is downshifted by 1, so that, if I am interpreting the algorithm correctly, the docstring should read:. ```; b(i, j, 1)ϕ(i, j, 1) + c(i, j, 1)ϕ(i, j, 2) = f(i, j, 1), k = 1; a(i, j, k-1)ϕ(i, j, k-1) + b(i, j, k)ϕ(i, j, k) + c(i, j, k)ϕ(i, j, k+1) = f(i, j, k), k = 2, ..., N-1; a(i, j, N-1)ϕ(i, j, N-1) + b(i, j, N)ϕ(i, j, N) = f(i, j, N), k = N; ```. This is also consistent with the tests, which use arrays of length `Nz-1` for both `a` and `c`. If `c` were indexed in the way implied by the docstring, the `c` array would either have to be length `Nz` or have a `k` index that's offset by 1. The indexing convention that's _implemented_ (rather than the one implied by the docstring) matches constructor interface for the matrix type `Tridiagonal`, which is convenient for testing against solutions produced by julia's built-in `\` operator. However, it means that function inputs need to shift indices by 1 compared to what most would consider ""intuitive"" (that the index of the coefficient `c` matches the index of the solution element `ϕ` that it multiplies).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1643:915,test,tests,915,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1643,2,['test'],"['testing', 'tests']"
Testability,"I tested it and can confirm if the line with `@warn` is commented out, the code runs without erroring.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1910861106:2,test,tested,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1910861106,1,['test'],['tested']
Testability,"I tested the simulation without picking up a checkpoint (running only the first simulation from 0-6s), but the error still unexpectedly persists. It seems the issue might be related to a bug in `AveragedTimeInterval` and maybe not necessarily just related to the checkpoint. (Hence I change the name of this issue.); <img width=""589"" alt=""image"" src=""https://github.com/user-attachments/assets/c8ef448a-93c0-4e62-9bb8-dd098d5d65df"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2259395775:2,test,tested,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2259395775,1,['test'],['tested']
Testability,I tested this with the simple case from discussion #2720 and with the Bickley Jet example adding a CFL calculation to a status message. It looks like CFL is calculated correctly and the `TimeStepWizard` is functioning properly now.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1239578989:2,test,tested,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1239578989,2,['test'],['tested']
Testability,I think GPU simulation and GPU regression test failures might have been intermittent (perhaps due to #1179?) so I restarted the build just in case.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1578#issuecomment-819500253:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1578#issuecomment-819500253,1,['test'],['test']
Testability,"I think GPU tests randomly crapped out (not important for this PR) but docs are still building so as long as the PR docs preview looks good, then this should be good to merge!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1543#issuecomment-819536777:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1543#issuecomment-819536777,1,['test'],['tests']
Testability,I think I caught two small bugs that were disallowing y-partitioning. If the tests pass now we should be ready to merge,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1762308124:77,test,tests,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1762308124,1,['test'],['tests']
Testability,"I think I get the idea, but I still can't imagine what could be wrong with the vertically stretched grids themselves. They seems pretty straightforward. Could you clarify what specific metrics you're talking about that are different?. > We might be able to convert the internal wave setup dynamics test to a vertically bounded domain and put it on a stretched grid to test these issues. This seems like a good idea.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-881913151:298,test,test,298,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-881913151,2,['test'],['test']
Testability,"I think any of those projects would be super welcome. A 1-layer shallow water model would be nice and simple, and @ali-ramadhan could use it for his MPI parallelization work since it has no pressure solver. A hydrostatic Boussinesq model would be super useful too of course. I think we should talk. We are working on a similar model using discontinuous Galerkin numerics over at [ClimateMachine.jl](https://github.com/CliMA/ClimateMachine.jl) and these projects would have overlapping goals. Nevertheless I would personally find it extremely useful to be able to run `Oceananigans.IncompressibleModel`s with a `HydrostaticPressureSolver` and `ExplicitFreeSurface` since I could use it to benchmark / compare with the DG functionality that I'm working on for `ClimateMachine`, and the relative advantages of high-order finite volume methods compared with DG may still be in question, at least for structured grids (meaning that an Oceananigans development effort is not a waste of time). Perhaps a zoom conversation on that topic is in order. I agree with the framework / level-of-difficulty that you've laid out for student projects!. As for deciding FourierFlows vs Oceananigans, that's up to you for sure and depends basically on whether you are okay staying with doubly-periodic systems (what FourierFlows currently supports) or whether you want to do problems with boundaries (what Oceananigans promises). FourierFlows is a nice tool for idealized problems and theoretical work (and you can run pretty large problems these days since it has GPU support); Oceananigans is evolving more towards a tool for ocean modeling that is capable of doing idealized problems, but flexible enough to use for large eddy simulation and realistic non-hydrostatic modeling, in bounded domains and hopefully irregular domains as well, eventually, using immersed boundaries. Switching between the two would be a dream... ! I'm afraid this is too futuristic for Oceananigans. It may be possible to build FV functional",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724302226:688,benchmark,benchmark,688,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724302226,1,['benchmark'],['benchmark']
Testability,I think changing https://github.com/CliMA/Oceananigans.jl/blob/ec5b515ee50aa5554df31dfbb1498e2335b05603/docs/src/model_setup/boundary_conditions.md?plain=1#L94-L95. to. ```julia; ├── south: OpenBoundaryCondition{Nothing}: Nothing; ├── north: OpenBoundaryCondition{Nothing}: Nothing; ```; is the only fix needed for the tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2025541452:319,test,tests,319,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2025541452,1,['test'],['tests']
Testability,"I think code-wise, this is pretty much ready (save some occasional polishing like [here](https://github.com/CliMA/Oceananigans.jl/pull/3080#discussion_r1192737129)). `pHY` and `pNHS` are no more, and both both hydrostatic and nonhydrostaic models, the pressure is simply `model.pressure`. The only tests that are failing and some regression tests, whose data will have to be re-done, and a scalar-index issue on GPUs. I think the only major change that's left is the documentation. @glwagner, in the past you preferred to make big changes to the docs yourself. Do you wanna remove the pressure separation part from the docs and push it here?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1550241035:298,test,tests,298,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1550241035,4,['test'],['tests']
Testability,"I think for idealized stuff the hydrostatic model is fairly well tested, but if one wants to do complex domains, problems requiring mixing parameterizations, etc, then our capability is still a little green I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2464#issuecomment-1107528576:65,test,tested,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2464#issuecomment-1107528576,1,['test'],['tested']
Testability,I think here `return` and `return nothing` would have the same effect (probably also just avoiding the whole `return` statement but that will print the variable to screen if used in the REPL). . ```; julia> function test!(a); a[1] +=1; return; end; test! (generic function with 1 method). julia> function test_two!(a); a[1] +=1; return nothing; end; test_two! (generic function with 1 method). julia> a = [1]; 1-element Vector{Int64}:; 1. julia> test!(a). julia> a; 1-element Vector{Int64}:; 2. julia> test_two!(a). julia> a; 1-element Vector{Int64}:; 3. julia> function test_three!(a); a[1] +=1; end; test_three! (generic function with 1 method). julia> test_three!(a); 4. julia> a; 1-element Vector{Int64}:; 4; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2135#issuecomment-1005242652:216,test,test,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2135#issuecomment-1005242652,3,['test'],['test']
Testability,I think if the tests pass we are ready to merge,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1259660901:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1259660901,1,['test'],['tests']
Testability,"I think in that case let's wait until this code is implemented, then we'll be able to test that whatever fix we devise is working",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389544013:86,test,test,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389544013,1,['test'],['test']
Testability,"I think it looks pretty good! Thanks @josuemtzmo for the work on `NetCDFOutputWriter`. In a future PR, we can add a test to ensure that `file_splitting = TimeInterval(T)` works. Also I'm trying to brainstorm a better word to use than ""actuated"" for talking about scheduling. But I think once the tests pass we should merge this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2016537205:116,test,test,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2016537205,2,['test'],"['test', 'tests']"
Testability,"I think it might have been with the regression tests in #2035, I am not sure how we solved it",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1115097251:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1115097251,1,['test'],['tests']
Testability,I think it will for slices (I'd have to go digging but I recall mysterious benchmarks showing 10x slowdown for yz models). Probably worth doing the benchmarks before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1333146083:75,benchmark,benchmarks,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1333146083,2,['benchmark'],['benchmarks']
Testability,"I think it's good to go. The only thing that doesn't quite make sense to me is why. ```julia; fill_size = fill_halo_size(field, regular_fill_function, indices, boundary_conditions, loc, grid); ```. depends on `regular_fill_function`, since. ```julia; fill_function, regular_fill_function = get_open_halo_filling_functions(loc) ; ```. and `loc` is an argument to both functions. It doesn't seem that from a purely logical point of view we need `regular_fill_function` at all here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3792#issuecomment-2379279293:413,log,logical,413,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3792#issuecomment-2379279293,1,['log'],['logical']
Testability,"I think it's more intuitive if `gravitational_direction` is a unit vector where `|g|=1`, no?. > I guess we thought this PR was missing a test? I'm happy to merge it as long as the 45 degree slanted rising thermal bubble looks good and we can worry about adding a more rigorous test in a future PR?. I ran the bubble case and it looked okay to me. I don't know if that's already good enough for merging this PR. I'd recomment merging once we get the more general tilt for buoyancy (if you agree that that's important.). My idea was to start a more rigorous test using a tilted BBL example from the literature this weekend. I was thinking this could eventually become a docs example to show. - Tilted gravity; - Monin-Obukhov similarity wall model; - Maybe stretched grid if it's done by then?; - NetCDF outputs (I think none of the current examples use NetCDF). I ended up not doing it because the papers I went through used both buoyancy as a tracer (not implement yet in this PR; hence my comment here) and tilt the domain in the `x` direction, so I'd need an `x` component of coriolis (hence my issue https://github.com/CliMA/Oceananigans.jl/issues/1372). I know these things are easy to circumvent with the available tools (i.e. using temperature to get the proper buoyancy and rotating the domain so that the tilt is in `y`, not `x`), but I thought it was best to make a thorough test once as these tools were in place already.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-783490746:137,test,test,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-783490746,8,['test'],['test']
Testability,"I think it's ok, the hydrostatic model tests are not the bottleneck",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2181#issuecomment-1021681357:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2181#issuecomment-1021681357,1,['test'],['tests']
Testability,"I think it's probable that `DiscreteForcing` doesn't have the same performance issues. @ali-ramadhan put together a benchmark script for forcing functions a while ago I thought, but it might have disappeared (because it wasn't informative?) That might've been before we had `ContinuousForcing` though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875640465:116,benchmark,benchmark,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875640465,1,['benchmark'],['benchmark']
Testability,I think it’s done but I haven’t payed attention to what was happening here. I was excited to see the tests pass tho :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516179441:101,test,tests,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516179441,1,['test'],['tests']
Testability,"I think more validation is great. Integrated cases are split into three categories:. 1. Tests (eg the stuff in `test_dynamics.jl` for NonhydrostaticModel). These run during CI.; 2. `validation/`. These are scientific validation cases that often require scientific interpretation or are expensive. These are similar to ""Tests"" but may lack a quantitative metric of success.; 3. `examples/`. These are intended to showcase the API and library usage to users. They should not be used as tests, because they are very expensive to run (via Documenter) and to maintain (for one because they have a high standard for code quality). I suggest adding bona fide Tests and validation, rather than examples, if we are interested in determining the correctness of the code.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1866#issuecomment-886708305:88,Test,Tests,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1866#issuecomment-886708305,4,"['Test', 'test']","['Tests', 'tests']"
Testability,I think moving forward we should always try to remove as many `@allowscalar` from our tests as possible. We have far too many as is. We should always lean towards solving the underlying problem and eliminating scalar operations.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1239599513:86,test,tests,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1239599513,1,['test'],['tests']
Testability,I think now only some output writer test errors are only pending. Will try to sort them out today.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-825983782:36,test,test,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-825983782,1,['test'],['test']
Testability,"I think our race condition test is passing after this without the need for a custom `mean!`, so I think this is good to go. It's probably important because there could be other bugs associated with bad interactions between operations on the CUDA default stream and broadcasting...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1803#issuecomment-873180797:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1803#issuecomment-873180797,1,['test'],['test']
Testability,"I think pressure gradient errors would still creep in to such a problem, but maybe using this technique with pressure gradients ""turned off"" (one way or another, perhaps using `ShallowWaterModel`) can produce a viable validation test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172731603:229,test,test,229,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172731603,1,['test'],['test']
Testability,"I think replacing `""docs/*.jld2""` with `""docs/**/*.jld2""` misses the stuff that previously would have been caught:. ```julia;    ~/repos/Oceananigans.jl    tc/nhpressure2 *2 !7 ?1  julia --project=docs/  ✔  9s   base  ; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.8.5 (2023-01-08); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> using Glob. julia> A = glob(""src/*.jl""); 6-element Vector{String}:; ""src/Architectures.jl""; ""src/Biogeochemistry.jl""; ""src/Logger.jl""; ""src/Oceananigans.jl""; ""src/StokesDrift.jl""; ""src/Units.jl"". julia> B = glob(""src/**/*.jl"");. julia> A[1] in B; false. julia> collect( a in B for a in A ); 6-element Vector{Bool}:; 0; 0; 0; 0; 0; 0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3109#issuecomment-1553617356:638,Log,Logger,638,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3109#issuecomment-1553617356,1,['Log'],['Logger']
Testability,I think so. The only thing we'd have to add is a little bit of logic when constructing the grid.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2060805794:63,log,logic,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2060805794,1,['log'],['logic']
Testability,"I think something that we haven't fully grasped in the past (and I am largely to blame) is how to properly display information to users in the REPL and log files (eg by extending existing methods so the interface for displaying `Oceanangians` types is the same as other julia types). There are a few functions available:. * `show`; * `print` (seems similar to `show`, except used where fancy formatting such as colors, etc may not be appropriate or available); * `summary`. We also want even more minimal representations than those produced by `summary`, like `string(typeof(obj).name.wrapper)`. There may also be a julia function for this, but I didn't find one after a cursory search. We have (unfortunately) introduced what appears to be a needless alternative to `summary` in the source code; we call this `short_show`. So we already have sizeable technical debt... I think it's helpful to follow convention as much as possible, especially if this package is used by other packages (eg it will be embedded in a climate model at some point in the future, which will be a separate package...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986795360:152,log,log,152,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986795360,1,['log'],['log']
Testability,"I think that many of the functions and types at the top level, such as . https://github.com/CliMA/Oceananigans.jl/blob/bcc34f07b3f949ea6fb34c7814f4b856d24924c2/src/Oceananigans.jl#L171-L188. indicate that code is included out of order, or that the notion of ""dependency"" (ie which parts of the code define an interface, vs which parts of the code implement an interface) is not well-established. In other words, we don't know what parts of the code are lower-level than other parts of the code. Therefore I think we should strive to reduce or eliminate those definitions if possible. This disorganization presents two problems. First it means that the code is harder to reason about, because its not logical (ie constructed ad-hoc rather than following clear rules). The more serious practical problem is that it will prevent us from splitting up the repo (ie separating core finite volume utilities such as grids, fields etc, from the physics / models, from simulations). It's possible that we will need to port out the ""simulations"" utilities fairly soon to facilitate coupled simulations (this would be required to avoid circular dependencies in the coupling software). The cause is mostly historical; the code was developed from the ground-up as-needed rather than following some preconceived design. We now understand that ""simulations"" should be incorporated before models; simulations should really _define_ the interface that a model needs to provide (mostly the function `time_step!`, but also a few auxiliary functions like `prognostic_fields`, `initialize!`, etc). I'm opening this issue because I think this concern should be written down somewhere so developers are aware and can strive to avoid worsening (ideally new development should work towards eliminating ""bad"" top-level definitions rather than adding new ones).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3048:700,log,logical,700,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3048,1,['log'],['logical']
Testability,"I think that the problem is that we are passing an integer and not an array. I think the fix should be something like this, as then we are passing something of the right type. Unfortunately, when I try trying the `solver` test group locally, a bunch of other stuff fails. I'm a little hesitant to push the changes as I fear it might make things worst. ```; @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 8, 8, collect(0:zF)); @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 16, 8, collect(0:zF)); @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 8, 16, collect(0:zF)); @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 8, 11, collect(0:zF)); @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 5, 8, collect(0:zF)); @test vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 7, 13, collect(0:zF)); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819677294:222,test,test,222,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819677294,7,['test'],['test']
Testability,I think that was the test I added to make sure that this new error worked right,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325135039:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325135039,1,['test'],['test']
Testability,"I think that's a fine strategy. We can add a kwarg to `NonhydrostaticModel` called `hydrostatic_pressure_anomaly`. We can set it to `CenterField(grid)` to preserve existing behavior, or set it to `nothing` to avoid the separation. And we should probably make `nothing` default so that triply periodic problems can be done out of the box. Then we don't have to re-do the regression tests either because we preserve existing behavior... I think that's also a less invasive change than this PR because we don't have to change `pressures` to `pressure` everywhere, hmm. Since you've done most of the legwork I think you have prerogative to open a new PR if you like (and I can help once you do).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088540295:381,test,tests,381,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088540295,1,['test'],['tests']
Testability,I think the DateTime clock is tricky. Tricky to set the Δt... There is no test for this btw.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452984065:74,test,test,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452984065,1,['test'],['test']
Testability,I think the WENO positivity preserving scheme we have is not actually positivity preserving because preserves 1D positivity. To have positivity preserving we need a 2D scheme (or at least to do proper tests/improvement on the scheme we have).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481957629:201,test,tests,201,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481957629,1,['test'],['tests']
Testability,"I think the `weno_interpolants.jl` file is the culprit, @tomchor and I saw the loss of performance specifically when using the WENO scheme. I'll test the other advection schemes in the meantime to make sure that it is indeed only a problem of WENO advection.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1177983798:145,test,test,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1177983798,1,['test'],['test']
Testability,"I think the algorithm for saving register usage could be easier to understand if it is written abstractly (ie within a loop that goes to WENO order `N` rather than written manually. . The main advantage of using metaprogramming is that it will be easier to maintain if this code needs to change in the future (ie even for the trivial reason that julia syntax changes). Rather than having to inspect and change 7 functions we can change one. It'll also main we can probably get away with fewer regression tests. Otherwise, to prevent the code from returning wrong results when/if it needs to be updated in the future, we need to test every WENO order... These seem like pretty significant advantages, but I understand that everyone is busy.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3518#issuecomment-2013055888:504,test,tests,504,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3518#issuecomment-2013055888,2,['test'],"['test', 'tests']"
Testability,"I think the best way is to go to the REPL and write. ```julia; julia> include(""one_test_file.jl""); ```. We've designed all the test files to work that way.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1995005504:127,test,test,127,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1995005504,1,['test'],['test']
Testability,I think the current behavior is useful for testing purposes. It seems to me this would be beneficial only in a very small handful of cases. I vote we keep the current behavior.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2192#issuecomment-1022684710:43,test,testing,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2192#issuecomment-1022684710,1,['test'],['testing']
Testability,"I think the definition of ""cell volumes"" needs to be dispatched on for models of dimension < 3:. https://github.com/CliMA/Oceananigans.jl/blob/6b2cea36d5782f5a73402b97f4d7476de9237c93/src/Operators/areas_and_volumes.jl#L49-L50. Since `Flat` dimensions have zero grid spacing, cell volumes in models with `Flat` dimensions are spuriously calculated to be `0`, which leads to dividing by `0` in advection operators, eg. https://github.com/CliMA/Oceananigans.jl/blob/6b2cea36d5782f5a73402b97f4d7476de9237c93/src/Advection/tracer_advection_operators.jl#L15-L19. I found this while testing the `internal_wave.jl` example for #1014 . We should have a test that models with `Flat` dimensions don't NaN. In fact, I think most or all of the dynamics tests could be converted to use `Flat`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1023:577,test,testing,577,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1023,3,['test'],"['test', 'testing', 'tests']"
Testability,I think the disadvantage of using artifacts is that we are a bit more exposed to bugs and I think that's the cause of at least some of our pain here. The advantage is that it's less work to maintain our local CUDA software and our test environment might be more realistic / relevant since users typically use artifacts (I think).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872395555:231,test,test,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872395555,1,['test'],['test']
Testability,"I think the main reason to use total height is that it generalizes to a ""stacked"" shallow water model (where there are N layers rather than just 1). But perhaps the choice depends on whether shallow water model is valuable mostly as a stand-alone model for physics problems or whether it's intent is more as a testbed for develping numerical methods, etc (with perhaps the eventual possibility of generalizing to N layers).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1115156776:310,test,testbed,310,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1115156776,1,['test'],['testbed']
Testability,I think the new diffusion/cosine tests? Can't think of something else...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2324#issuecomment-1062526156:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2324#issuecomment-1062526156,1,['test'],['tests']
Testability,"I think the test is failing becaue `f` is returning a `Float64`, so when the grid is `Float32` `eps(maximum(f))` is wrong. Is there a way to set the type returned by `f`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1488595081:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1488595081,1,['test'],['test']
Testability,"I think there are probably a few other things to fix here, because we can't ""restore"" a grid with a GPU architecture. Fixing this fully really requires finishing #1998 first, and overhauling the checkpointing infrastructure to match so that the checkpointer is ""architecture aware"". We should also add tests for checkpointing with other grid types.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2018#issuecomment-945826936:302,test,tests,302,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2018#issuecomment-945826936,1,['test'],['tests']
Testability,"I think these lines should be using `ξnode`, `ηnode`, and `rnode`:. https://github.com/CliMA/Oceananigans.jl/blob/7cbf013cb6bed2bd7cef0f4d8e5f04c078e50ee0/src/Models/LagrangianParticleTracking/lagrangian_particle_advection.jl#L136-L142. I'll open a PR with a fix tomorrow. Should probably also add a test for particle advection on a lat-lon grid. ---. Some debug printing inside `advect_particle` with 1 particle:. ```; [ Info: Iteration 1...; [ Info: X=(1.0, -1.5, -10.0), I=(47, 109, 53); [ Info: (before) X⁺=(1.0, -1.5, -10.0); (iᴿ, jᴿ, kᴿ) = (101, 201, 61); (xᴸ, yᴸ, zᴸ) = (87813.63270401207, -217942.05622333512, -100.0); (xᴿ, yᴿ, zᴿ) = (136722.49142523398, -124538.3178419058, 0.0); (x⁺, y⁺, z⁺) = (175626.26540802413, -249075.1356838116, -10.0); [ Info: (after) X⁺=(175626.26540802413, -249075.1356838116, -10.0); [ Info: Iteration 2...; [ Info: X=(175626.26540802413, -249075.1356838116, -10.0), I=(39914880, -59303137, 53); ERROR: LoadError: BoundsError: attempt to access 109×208×68 OffsetArray(::Array{Float64, 3}, -3:105, -3:204, -3:64) with eltype Float64 with indices -3:105×-3:204×-3:64 at index [39914881, -59303136, 54]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852#issuecomment-2428098528:300,test,test,300,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852#issuecomment-2428098528,1,['test'],['test']
Testability,"I think this PR Is becoming too big. I’m thinking to wrap it up here with the ConformalCubedSphere grid plus tracer halo filling, add tests and then open another one to continue on cubed sphere tasks. What do you reckon @glwagner ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1483785790:134,test,tests,134,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1483785790,1,['test'],['tests']
Testability,"I think this PR is finally ready to be merged, provided that tests pass. To make sure that `VerticalDirection` is working, I ran the equation of state benchmarks and they seem to match the benchmarks performed in https://github.com/CliMA/Oceananigans.jl/pull/1169#issuecomment-725471594. If anything, benchmarks seem a bit better (probably different machine) and `RoquetEquationOfState` is surprisingly faster on the CPU (but might be a fluke). ```; Equation of state benchmarks; ┌───────────────┬───────────────────────┬───────────┬───────────┬───────────┬───────────┬─────────────┬────────┐; │ Architectures │ EquationsOfState │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼───────────────────────┼───────────┼───────────┼───────────┼───────────┼─────────────┼────────┤; │ CPU │ LinearEquationOfState │ 2.037 s │ 2.040 s │ 2.039 s │ 2.041 s │ 372.66 KiB │ 2090 │; │ CPU │ RoquetEquationOfState │ 1.759 s │ 1.761 s │ 1.761 s │ 1.763 s │ 373.77 KiB │ 2090 │; │ CPU │ TEOS10EquationOfState │ 2.270 s │ 2.401 s │ 2.378 s │ 2.464 s │ 372.53 KiB │ 2090 │; │ GPU │ LinearEquationOfState │ 10.058 ms │ 13.161 ms │ 12.856 ms │ 13.215 ms │ 1022.19 KiB │ 7154 │; │ GPU │ RoquetEquationOfState │ 10.688 ms │ 13.236 ms │ 12.991 ms │ 13.322 ms │ 1.00 MiB │ 7054 │; │ GPU │ TEOS10EquationOfState │ 10.204 ms │ 13.463 ms │ 13.145 ms │ 13.504 ms │ 1017.58 KiB │ 7154 │; └───────────────┴───────────────────────┴───────────┴───────────┴───────────┴───────────┴─────────────┴────────┘; ```. ```; Equation of state CPU -> GPU speedup; ┌───────────────────────┬─────────┬─────────┬─────────┐; │ EquationsOfState │ speedup │ memory │ allocs │; ├───────────────────────┼─────────┼─────────┼─────────┤; │ LinearEquationOfState │ 154.965 │ 2.74298 │ 3.42297 │; │ RoquetEquationOfState │ 133.062 │ 2.74052 │ 3.37512 │; │ TEOS10EquationOfState │ 178.317 │ 2.73152 │ 3.42297 │; └───────────────────────┴─────────┴─────────┴─────────┘; ```. ```; Equation of state relative performance (CPU); ┌───────────────┬",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-800720099:61,test,tests,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-800720099,5,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"I think this is a a big step forward and happy to share my two cents worth. I agree that we should keep `gravitational_acceleration` the same as before. We will need to have a bunch of `g'`. Since we have a free surface, we assume that we have air above, then `g'` of the top layer is really just `g`. That's why I would suggest having n reduced gravities for n layers. We will need n interfaces and we could also store the n heights. Sometimes it's convenient to have one or the other. For efficiency we only need one, but for convenience we might want to have both. What are people's preferences?. The more layers we have, the thinner each layer tends to be. This means that it's more likely that layer depths can vanish. If this ever happens, then a numerical instability can happen. I remember discussing with @simone-silvestri using the positive preserving property of WENO to deal with this but I also remember that a preliminary test showed that it wasn't actually ensure to be positive. Sadly, I didn't follow up. Any idea if that was fixed?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717:936,test,test,936,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717,1,['test'],['test']
Testability,"I think this is a good change. It might be nice to change some of the names of the functions as well, because I'm having a hard time understand the logic of them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3690#issuecomment-2274177349:148,log,logic,148,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3690#issuecomment-2274177349,1,['log'],['logic']
Testability,I think this should be an issue since resolving it requires changing the repo. Agree that using a buildkite workflow is a good idea. It might also make sense to use a cluster resource rather than tartarus so it's easier to be sure that the benchmarks are clean.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3166#issuecomment-1622058411:240,benchmark,benchmarks,240,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3166#issuecomment-1622058411,1,['benchmark'],['benchmarks']
Testability,"I think to preserve the work in this PR, we should add a `Float32` test which will fail if a spurious promotion undermines performance",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445215733:67,test,test,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445215733,1,['test'],['test']
Testability,I think we are also hitting this problem https://github.com/JuliaParallel/MPI.jl/issues/715; because it looks like the MPIPreferences are correctly loaded at the ; ```julia; julia -O0 --project -e 'using Pkg; Pkg.instantiate()`; ```; but then it loads a completely different MPI in the ; ```julia; julia -O0 --project -e 'using Pkg; Pkg.test()`; ```; step,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2459444337:337,test,test,337,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2459444337,1,['test'],['test']
Testability,"I think we can close this. We would probably need to add some tests, though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3704#issuecomment-2396752511:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3704#issuecomment-2396752511,1,['test'],['tests']
Testability,"I think we could probably move it into `src/OutputWriters/windowed_spatial_average.jl` since we already have `windowed_time_average.jl` there. Probably just missing a couple of tests (one for a `WindowedSpatialAverage` of a field, and another for `ComputedField might be good?).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-783693538:177,test,tests,177,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-783693538,1,['test'],['tests']
Testability,I think we decided we would merge this in its current form and add tests for different topologies and Helmholtz equations in a future PR. In future PR(s) we should also refactor the interface to be more consistent with the other solvers and to use CuArrays in the solver itself. I think we don't intend to use the `PreconditionedConjugateGradientSolver` with `IncompressibleModel` so I removed it from the constructor. I presume a PCG solver will be created in the hydrostatic model constructor. Although a good regression test would be to run an `IncompressibleModel` with a PCG pressure solver and make sure it matches the regression data.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1360#issuecomment-781637359:67,test,tests,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1360#issuecomment-781637359,2,['test'],"['test', 'tests']"
Testability,I think we should add a test.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905751368:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905751368,1,['test'],['test']
Testability,I think we should also add a test for the case that `window` and time-interval of output are identical.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1802:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1802,1,['test'],['test']
Testability,I think we should also add a test that would catch this error.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2564#issuecomment-1131233965:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2564#issuecomment-1131233965,1,['test'],['test']
Testability,I think we should close this PR since the tests are failing. We can easily reproduce this script in the future if we need to.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1914#issuecomment-983923996:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1914#issuecomment-983923996,1,['test'],['tests']
Testability,"I think we should delete the regression test and put a warning in the model constructor ""The ShallowWaterModel has not been validated"". It's a shame we've put so much time into the regression test as it is. I think the model likely has a few bugs to be ironed out. I'm also not convinced that we have all the numerical methods (ie vanishing layers, positive preserving advection) that would be needed to advertise the model as ""production-ready""). One could argue that the regression test is misleading in that it gives the false impression that the model is in a state that shouldn't change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100,3,['test'],['test']
Testability,"I think we should merge this now, since Oceananigans is barely useable at the moment, and then pick up getting the Enzyme tests passing in @jlk9's PR (which also needs to involve performance benchmarking to ensure we maintain performance)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1948811417:122,test,tests,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1948811417,2,"['benchmark', 'test']","['benchmarking', 'tests']"
Testability,I think we should test the difference between using pmap or not on the other PR,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3139#issuecomment-1583213980:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3139#issuecomment-1583213980,1,['test'],['test']
Testability,I think we should test this independently of an example. Examples change but it'd be nice to make sure this functionality still works. I'll add something simple and then we can iterate.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3815#issuecomment-2389128694:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3815#issuecomment-2389128694,2,['test'],['test']
Testability,"I think we will need to do some more testing to make sure this won't break our near global hydrostatic setups, which are unfortunately in a tenuous position because they rely on some untested features (and we don't have regression tests for some important cases). @simone-silvestri what do you think? We may want to wait for a few more PRs (perhaps containing some of those tests) to go in first.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1280176328:37,test,testing,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1280176328,3,['test'],"['testing', 'tests']"
Testability,I think we will use logic such that `i-1` is not immersed / solid. Only `i-2` is solid. (It'd be better to use `k` here because I think we are talking about the vertical index.),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1042499178:20,log,logic,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1042499178,1,['log'],['logic']
Testability,"I think what we want in terms of API is the ability to specify boundary conditions on the surface of an immersed boundary. One design would be to introduce a type called `ImmersedBoundary` that collects information about the location of the boundary and the boundary conditions for each field prescribed on it. This could be relatively simple to implement in the code, though it doesn't exactly conform to our current code design in which boundary conditions are embedded in `Field` objects. Another possibility that may better conform to our current boundary conditions / field design would be to embed `boundaries` in `grid` objects. With this design, `ImmersedBoundary` collects only information about its geometry and parameters related to its numerical implementation (eg regularization functions, interpolation methods, etc). We can then infer from `grid` the information needed to define boundary conditions for fields in both (`x` ,`y`, `z`), as well as on any `ImmersedBoundary`s. Grid constructors would then be something like. ```julia; grid = RegularCartesianGrid(; immersed_boundaries = ImmersedBoundary(geometry = # a function of (x, y, z, t); transfer_function = # parameters ; ); topology = # etc; ); ```; ; As for verification, I think we should use a quantitative test that verifies that boundary conditions are satisfied on the immersed boundary. Reproducing the Reynolds number correction to the drag coefficient on a sphere might be a good one, though it could be challenging because we'd have to use sponge layers to replicate an open boundary. We could also reproduce driven-cavity results in a triply periodic domain using rectangular immersed boundaries.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/693#issuecomment-597087759:1282,test,test,1282,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/693#issuecomment-597087759,1,['test'],['test']
Testability,"I think what you likely want to do is to put. ```julia; push!(LOAD_PATH, joinpath(@__DIR__, "".."")); ```. at the top of every script in `benchmarks/`, mirroring what we do with the docs. Using `dev ..` will also work, but as you've noted is a bit inconvenient. Also it leads to annoying issues like the present one where `Oceananigans` is included in the `Project.toml` (this will prevent others from running benchmarks on their ""local"" Oceananigans code). I also recommend using `git diff file_name.jl` before doing `git add` so that you can ensure the code you're adding is intentional.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866246979:136,benchmark,benchmarks,136,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866246979,2,['benchmark'],['benchmarks']
Testability,"I think you instantiate a model to do many things; one of them is time-stepping, but another may be analysis. Another is testing. Even now we can't actually solve poisson's equation without a `Model` easily, which seems like an unnecessary restriction of our non-modularity. I don't think we should make this problem worse. I think it makes sense `model` is a field of `Simulation`. Its simple to envision `Simulation` parameters that are identical, with a different underlying `model` (eg, changing the number of passive tracers)`. The way I envision a logical course for the development of complex software in general is that we start with the fundamental building blocks and make them as easy to use in their low-level form as possible. When we've decided we can proceed no farther, we add another layer of abstraction that fuses these underlying building blocks into a higher-order coherent object. And so on. I think its a better design strategy to add *layers* of abstraction, rather than *embedding* abstraction within already complex objects. The latter strategy would lead to unmanageable complexity.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/447#issuecomment-542267410:121,test,testing,121,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/447#issuecomment-542267410,2,"['log', 'test']","['logical', 'testing']"
Testability,"I think you mean something like. ```; @test c[1, 1, 1:2] == random_column[1, 1, :]; @test c[2, 1, 1:2] == random_column[1, 1, :]; @test c[1, 2, 1:2] == random_column[1, 1, :]; @test c[2, 2, 1:2] == random_column[1, 1, :]; ```; These all pass for me.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1947#issuecomment-902694311:39,test,test,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1947#issuecomment-902694311,4,['test'],['test']
Testability,"I think you need to load cuda before you _build_ Oceananigans. You might need to do this from the login node, eg something like. ```; module load cuda; julia --project -e 'using Pkg; Pkg.build(""Oceananigans"")'; ```. Is that right @ali-ramadhan ?. The issue is that the functions `plan_forward_transforms` for `CuArray`s are not being loaded:. https://github.com/CliMA/Oceananigans.jl/blob/52bfeb09e3562f639deb32b8807f32a88e3a1cfa/src/Solvers/plan_transforms.jl#L30-L33. Note that your script is a julia file, so you should append it with `.jl` so that it's named `model_gpu_waves.jl`. As a side comment, you should take care when initializing a model with zero Eulerian-mean flow --- despite that this is common in the literature, it is unlikely to be a physically relevant initial condition (because it rarely occurs in nature, and because it will excite large inertial oscillations in your simulation). Some perspective on this issue is provided by [observations reported by Jerry Smith (2006)](https://journals.ametsoc.org/view/journals/phoc/36/7/jpo2910.1.xml?tab_body=abstract-display) and [a preprint that I'm first author on](https://glwagner.github.io/assets/pdf/near-inertial-waves-turbulence-growth-swell-preprint.pdf).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1317#issuecomment-767021509:98,log,login,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1317#issuecomment-767021509,1,['log'],['login']
Testability,I think you should add a simple test so this doesn't regress again,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3388#issuecomment-1809340514:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3388#issuecomment-1809340514,2,['test'],['test']
Testability,"I thought I had fixed this previously but it looks like not. So I've added a test that `isnothing(model.free_surface)` when `grid isa SingleColumnGrid`. For the sake of a verbose explanation:. When `grid isa SingleColumnGrid`, the constructor-helper `FreeSurface` should return `nothing` rather than some other free surface object, like `ExplicitFreeSurface`, etc. THEN, when `isnothing(model.free_surface)`, the handy function `fields(model)` should _omit_ the free surface displacement `η` from the `NamedTuple` of model fields. A bug crept into the code because we didn't have a test during #2121 when some of the function signatures changed (because we don't need `arch` _and_ `grid` if `arch` is stored in `grid`). cc @navidcy ; cc @adelinehillier",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2196:77,test,test,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2196,2,['test'],['test']
Testability,"I took a stab at it, and it seems to work (see below). If this is what you guys had in mind then I can add some tests and docstrings. I wasn't too sure where to place these `*spacings` functions. They can't go into the `Grids` or `Operators` modules since we need `KernelFunctionOperation`. So I added them to the `AbstractOperations/grid_metrics.jl`. I think these clash with the existing definitions in `Grids/nodes_and_spacings.jl` so I commented out the old ones. Do we want to deprecate/get rid of them? I guess it'll be a breaking change (for the greater good of course!). ---. ```julia; using Oceananigans; using Oceananigans.ImmersedBoundaries: PartialCellBottom. underlying_grid = RectilinearGrid(size=(4, 5, 6), extent=(1, 1, 1)); bottom(x, y) = -1 + (x + y) / 2; grid = ImmersedBoundaryGrid(underlying_grid, PartialCellBottom(bottom)); model = NonhydrostaticModel(; grid). zspacings(model.velocities.u) |> interior; ```. ```; 4×5×6 view(::Array{Float64, 3}, 4:7, 4:8, 4:9) with eltype Float64:; [:, :, 1] =; 0.0541667 0.166667 0.166667 0.166667 0.166667; 0.0541667 0.166667 0.166667 0.166667 0.166667; 0.166667 0.166667 0.166667 0.166667 0.166667; 0.166667 0.166667 0.166667 0.166667 0.166667. [:, :, 2] =; 0.166667 0.120833 0.166667 0.166667 0.166667; 0.0958333 0.120833 0.166667 0.166667 0.166667; 0.0958333 0.166667 0.166667 0.166667 0.166667; 0.166667 0.166667 0.166667 0.166667 0.166667. [:, :, 3] =; 0.166667 0.166667 0.166667 0.0875 0.166667; 0.166667 0.1625 0.0625 0.0875 0.166667; 0.1375 0.0375 0.0625 0.166667 0.166667; 0.1375 0.0375 0.166667 0.166667 0.166667. [:, :, 4] =; 0.166667 0.0791667 0.166667 0.166667 0.154167; 0.166667 0.166667 0.166667 0.129167 0.154167; 0.166667 0.166667 0.104167 0.129167 0.166667; 0.166667 0.0791667 0.104167 0.166667 0.166667. [:, :, 5] =; 0.166667 0.166667 0.145833 0.0458333 0.166667; 0.166667 0.166667 0.166667 0.166667 0.166667; 0.166667 0.166667 0.166667 0.166667 0.0708333; 0.166667 0.166667 0.145833 0.0458333 0.0708333. [:, :, 6] =; 0.166",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-2451107164:112,test,tests,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-2451107164,1,['test'],['tests']
Testability,I took out the turbulence closures from the `time_stepping_2` in #2140. I also split the solvers tests in two parts.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009465165:97,test,tests,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009465165,1,['test'],['tests']
Testability,"I took the shallow water Bickley jet example and made two modifications. I added `using CUDA` and changed the architecture to `GPU` and tried running it on my desktop. The GPU is nothing fancy but there is something and I thought that it should, based on previous tests. Unfortunately, `run!(simulation)` yields an error that you can find below. I also tried this on a server and found a similar error. Two questions.; 1. Could someone else try this in a GPU to see if they get an error?; 2. Anyone have a clue as to what id going wrong in this error?. ```; $ julia --project shallow_water_Bickley_jet.jl ; ERROR: LoadError: InvalidIRError: compiling kernel gpu__compute!(Cassette.Context{nametype(CUDACtx),KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(128, 129, 1)},KernelAbstractions.NDIteration.DynamicCheck,Nothing,Nothing,KernelAbstractions.NDIteration.NDRange{3,KernelAbstractions.NDIteration.StaticSize{(8, 9, 1)},KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)},Nothing,Nothing}},Nothing,KernelAbstractions.var""##PassType#253"",Nothing,Cassette.DisableHooks}, typeof(Oceananigans.Fields.gpu__compute!), OffsetArrays.OffsetArray{Float64,3,CuDeviceArray{Float64,3,1}}, Oceananigans.AbstractOperations.BinaryOperation{Face,Face,Center,typeof(-),OffsetArrays.OffsetArray{Float64,3,CuDeviceArray{Float64,3,1}},Oceananigans.Fields.FunctionField{Face,Face,Center,Nothing,Nothing,typeof(ω̄),RegularRectilinearGrid{Float64,Periodic,Bounded,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}},typeof(identity),typeof(identity),typeof(identity),RegularRectilinearGrid{Float64,Periodic,Bounded,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}}) resulted in invalid LLVM IR; Reason: unsupported dynamic function invocation (call to overdub); Stacktrace:; [1] - at /home/fpoulin/software/Oceananigans.jl/src/AbstractOpe",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1477:264,test,tests,264,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1477,1,['test'],['tests']
Testability,"I tried it on a different computer where I installed datadeps brand new and the tests ran on the CPU. I guess I am catching up to the problem. Unfortunately, my laptop doesn't have a GPU so I need to run it elsewhere to reproduce the problem. Will work on that today.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446678465:80,test,tests,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446678465,1,['test'],['tests']
Testability,"I tried running some of the regression tests locally and they also fail, I can't see why this would cause different results given that the tests don't have background velocity fields?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1485576383:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1485576383,2,['test'],['tests']
Testability,"I tried running the `ShallowWaterModel` example on a `GPU` and it failed because of how we compute the norm, see the error message below. @glwagner , I remember we talked about this but, sadly, I don't know if we had a solution. What would you recommend?. ```; ERROR: LoadError: Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:33; [2] assertscalar(op::String); @ GPUArrays ~/.julia/packages/GPUArrays/8dzSJ/src/host/indexing.jl:53; [3] getindex(::CUDA.CuArray{Float64, 3}, ::Int64, ::Int64, ::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/8dzSJ/src/host/indexing.jl:86; [4] getindex; @ ./subarray.jl:276 [inlined]; [5] _getindex; @ ./abstractarray.jl:1214 [inlined]; [6] getindex; @ ./abstractarray.jl:1170 [inlined]; [7] iterate; @ ./abstractarray.jl:1096 [inlined]; [8] iterate; @ ./abstractarray.jl:1094 [inlined]; [9] generic_normInf(x::SubArray{Float64, 3, CUDA.CuArray{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}); @ LinearAlgebra /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/generic.jl:465; [10] normInf; @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/generic.jl:556 [inlined]; [11] generic_norm2(x::SubArray{Float64, 3, CUDA.CuArray{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}); @ LinearAlgebra /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/generic.jl:497; [12] norm2; @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/generic.jl:558 ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-882647783:750,assert,assertscalar,750,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-882647783,1,['assert'],['assertscalar']
Testability,"I tried to follow the terminology in the regression test and sorry it was confusing. I used `truth` to refer to the data that is read from a file, done [here.](https://github.com/CliMA/Oceananigans.jl/blob/3676a718be1160f3ea70c3cce5dd21c5f06f144a/test/regression_tests/shallow_water_bickley_jet_regression.jl#L82) . I agree that only `v` fails but that means that `v` has larger differences compared to `u` and `h`. They all have differences. . I compared the initial data that we used in this regression test with the initial data read from the regression test. I saw that we had the 0th and 20th step saved. If there are differences at the beginning, then they are not solving exactly the same problem. In both we have that v is set to 0 and u and h are set to the Bickley jet with a random perturbation on `u`. The randomness will not be the same (unless we use a seed, which we don't, but we could) however the amplitude of the perturbations are different. This suggests to me that the initial conditions are not the same, and maybe the soruce of why the regression test fails. This is why I would like to know how the initial data was generated, using what script. I do suggest we regenerate it as that might solve a lot of the problems we are having with the regression tests. Do you want me to generate a script that load the inital data and compare it? You can see the results above. The fact that h has differences of `1e-7` is due to single precison, which means they are the same. However, u is different with errors much larger then `1e-7`, so the initial data is different. Unless there is something that I'm missing here?. I saw that the data files were dated June 1st 2022. For me it is stored at the following location. `/home/fpoulin/.julia/datadeps/regression_test_data/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883:52,test,test,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883,6,['test'],"['test', 'tests']"
Testability,"I tried to run `benchmark_incompressible_model.jl` with advection=WENO5() and the error shown below occurred as it was benchmarking the first GPU case with grid size being 32 x 32 x 32. I'm running all benchmark cases with Float64. Many other error messages of a similar format were also outputted, but this one was the earliest one I can retrieve. My Oceananigans.jl was up to date with the latest merge #1790.; I also tried running it without specifying an advection and it ran fine. @francispoulin is experiencing the same problem. ```; Reason: unsupported use of an undefined name (use of 'pow'); Stacktrace:; [1] overdub; @ C:\Users\henry\.julia\packages\KernelAbstractions\X5hOr\src\backends\cuda.jl:264; [2] right_biased_αz₁(::Int64, ::Int64, ::Int64, ::OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}); @ C:\Users\henry\.julia\packages\Oceananigans\t50Gi\src\Advection\weno_fifth_order.jl:113; [3] overdub; @ C:\Users\henry\.julia\packages\Oceananigans\t50Gi\src\Advection\weno_fifth_order.jl:113; [4] overdub; @ C:\Users\henry\.julia\packages\Oceananigans\t50Gi\src\Advection\weno_fifth_order.jl:187; [5] right_biased_interpolate_zᵃᵃᶠ(::Int64, ::Int64, ::Int64, ::RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::WENO5, ::OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}); @ C:\Users\henry\.julia\packages\Oceananigans\t50Gi\src\Advection\weno_fifth_order.jl:228; [6] overdub; @ C:\Users\henry\.julia\packages\Oceananigans\t50Gi\src\Advection\weno_fifth_order.jl:228; [7] _right_biased_interpolate_zᵃᵃᶠ(::Int64, ::Int64, ::Int64, ::RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::WENO5, ::OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}); @ C:\Users\henry\.julia\pack",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1771#issuecomment-871687335:119,benchmark,benchmarking,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1771#issuecomment-871687335,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"I tried to run both the shallow water and incompressible benchmarks and ran into problems when they tried to output the CPU to GPU speedup table html file. ; The problem seems to be cause by the html file being named ""[model name]_CPU_->_GPU_speedup.html"" and "">"" not being allowed to be a part of filenames. It was fixed by changing the output filename to ""[model name]_CPU_to_GPU_speedup.html"".; This issue occurred while running on Windows10, but I think it would likely be a problem elsewhere too where "">"" is a reserved character for file and directory names.; @francispoulin",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1672:57,benchmark,benchmarks,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1672,1,['benchmark'],['benchmarks']
Testability,"I tried to update Oceananigans version in ClimaOceanBiogeochemistry as:; ```; Oceananigans v0.92.0 `https://github.com/CliMA/Oceananigans.jl#glw/tuples-with-catke`; ```; Then I ran CATKE together with horizontal closure:; ```; catke = CATKEVerticalDiffusivity(); horizontal_closure = HorizontalScalarDiffusivity(ν=1e3); model = HydrostaticFreeSurfaceModel(; grid,; closure = (catke, horizontal_closure),; ...); ```; It still returns an error message:; `ERROR: type Tuple has no field κe`. Is it indicating the problem is still unresolved, or am I testing in an incorrect way?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2386577814:547,test,testing,547,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2386577814,1,['test'],['testing']
Testability,I updated the regression tests for shallow water and added them to this branch. I tested it on my laptop and the a cluster and all tested passed on both the CPU and GPU. Does anyone else want to try out the regression tests to see if they work for them? . I am happy to do testing but I can't test it for me as everything seems to be working. Help on this would be greatly apprecited.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1970044516:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1970044516,6,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,I wanted to add tests but the current test functionality is difficult to adjust to work for 2D arrays. . https://github.com/CliMA/Oceananigans.jl/blob/39e9b6f3e5c5f43845f21f8e10fdd629ced448fc/test/test_multi_region_cubed_sphere.jl#L9-L62. I'd like to rewrite those to use the connectivity property of the `ConformalCubedSphereGrid` rather than a series of if statements. Also address ##3242. But I wasn't planning to do this on this PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3256#issuecomment-1712759761:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3256#issuecomment-1712759761,3,['test'],"['test', 'tests']"
Testability,I was able to reproduce the hanging by running the test manually in the REPL. It gets stuck somewhere in `run!(simulation)` but couldn't get a useful stacktrace out. It does not hang in v0.54.0. I tried downgrading and pinning KernelAbstractions.jl and CUDA.jl back down to the version used in the v0.54.0 Manifest.toml but it still got stuck... Could be some other package. > Should we stop updating docs/Manifest.toml? Is that possible?. Couldn't find anything in the Pkg.jl docs that would help but maybe we should switch the order of the `instantiate` and `develop` calls here? https://github.com/CliMA/Oceananigans.jl/blob/e02790202614916bd918a039216a73c61ff7048a/.buildkite/pipeline.yml#L326,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816731027:51,test,test,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816731027,1,['test'],['test']
Testability,"I was getting two errors but when I added `CUDA.allowscalar(true)` into `test_shallow_water_models.jl` the tests all passed on a CPU and GPU on my laptop. Note that in `dependencies_for_runtests.jl` this line [here](https://github.com/CliMA/Oceananigans.jl/blob/f2511962ca15f3aaf87d2571e3551e59dc05c694/test/dependencies_for_runtests.jl#L78) only found a GPU on my computer. When I changed it temporarily to test both CPU and GPU and all 80 tests passed. I remember last year in #3050 @navidcy found that it ran on some computers but not others. I presume that is still a concern. But lots has changed since then, for example we are no longer using julia 1.8. @navidcy, might you be able to try the shallow water tests on the same computer you found the failers in last year to see if the problem persists?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1967097404:107,test,tests,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1967097404,5,['test'],"['test', 'tests']"
Testability,"I was going quickly through some tests for a PR and found more than one instance of something like this:. https://github.com/CliMA/Oceananigans.jl/blob/93c497a5f78a9a422d8f597dbd5406ccc0c09ceb/test/test_output_writers.jl#L181-L213. Where, unless I'm missing something we run a couple of unnecessary loops. In this case I believe we're creating 4 models, when we could be creating only two. Since the tests are taking a considerable amount of time to run (I think something around 2 hours on the CI servers) I think it'd be a good idea for us to tackle these as time permits. Not necessarily all at once, which would take a huge amount of effort, but maybe one PR here and there when we catch these things. (Although I'm also not opposed to re-organizing all the tests if it'll significantly improve performance.)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1990:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1990,4,['test'],"['test', 'tests']"
Testability,"I was looking at the errors on `cpu-solver_tests` and found the message below, followed by a bunch of other errors on the lines below. Does someone know why this is failing? I can take a look at it but thought I'd check to see whether this is understood or not. ```; Vertically stretched Poisson solver [FACR, CPU, (Flat, Bounded, Bounded)]: Error During Test at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/test/test_poisson_solvers.jl:272;   | Test threw exception;   | Expression: vertically_stretched_poisson_solver_correct_answer(Float64, arch, topo, 8, 8, 1:8);   | ArgumentError: length(size) must be 2.;   | Stacktrace:;   | [1] validate_tupled_argument(::Tuple{Int64,Int64,Int64}, ::Type{T} where T, ::String, ::Int64; greater_than::Int64) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/input_validation.jl:24;   | [2] validate_tupled_argument(::Tuple{Int64,Int64,Int64}, ::Type{T} where T, ::String, ::Int64) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/input_validation.jl:24;   | [3] validate_size(::Type{T} where T, ::Type{T} where T, ::Type{T} where T, ::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/input_validation.jl:48;   | [4] VerticallyStretchedRectilinearGrid(::Type{T} where T; architecture::CPU, size::Tuple{Int64,Int64,Int64}, x::Tuple{Int64,Int64}, y::Tuple{Int64,Int64}, zF::UnitRange{Int64}, halo::Tuple{Int64,Int64,Int64}, topology::Tuple{DataType,DataType,DataType}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/src/Grids/vertically_stretched_rectilinear_grid.jl:50;   | [5] vertically_stretched_poisson_solver_correct_answer(::Type{T} where T, ::CPU, ::Tuple{DataType,DataType,DataType}, ::Int64, ::Int64, ::UnitRange{Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-7/clima/oceananigans/test/test_poisson_solvers.jl:140;   | [6] top-level scope at /storage7/buil",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819603114:355,Test,Test,355,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819603114,3,"['Test', 'test']","['Test', 'test']"
Testability,"I was referring to tests in the CI suite, not tests that somebody run somewhere once with one version of the code... (the latter is GREAT, not to diminish the effort @liuchihl!! test like those help us understand what was wrong and how to fix it... but they will get forgotten and not necessarily be repeated every time we update the code .... and if a new bug comes along we might not be able to catch it quickly if there is nothing in the CI suite)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287371326:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287371326,3,['test'],"['test', 'tests']"
Testability,"I was thinking of doing some prototyping and benchmarking in a sandbox by building off the example in my PR https://github.com/vchuravy/GPUifyLoops.jl/pull/18. The PR contains an example that can be extended to rely on a `Grid` struct, multiple `FaceField`s and ` CellField`. So I'll prototype grids and fields that are `isbitstype` (you already helped by doing this for a grid in https://github.com/climate-machine/Oceananigans.jl/issues/59#issuecomment-467660181) and test to see if they work on the GPU with GPUifyLoops.jl. If they do work and performance isn't degraded then I'll rewrite the operators to use grid and field structs. You probably know how to do this better than me, but might be good if I rewrite the operators as they's still undocumented and do some _slightly convoluted_ stuff to avoid having to store intermediate calculations. Right now I'm focusing on system tests and benchmarks but once @christophernhill @jm-c and I get closer to implementing the variable _Δz_ grid #47 I will work on this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/115#issuecomment-470782067:45,benchmark,benchmarking,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/115#issuecomment-470782067,5,"['benchmark', 'sandbox', 'test']","['benchmarking', 'benchmarks', 'sandbox', 'test', 'tests']"
Testability,"I was thinking we could change `viscosity()` and `diffusivity()` to account for the different (vertical, horizontal and 3D) formulations (with tests for it, ofc). In that way `viscosity()` would return, for example, `[v, v, 0]` for a horizontal formulation, `[0, 0, v]` for a vertical formulation, and a `Number` v for a 3D formulation. I think this would be desirable from the user's perspective and it would make diagnostics easier when non-3D formulations are used. Based on @glwagner's comments I was also going to remove the extra definition of `calc_κccc()` for Smagorinsky that's currently in this PR. However, I noticed this breaks some internal functions. Before I go ahead and fix those, I wanted to check if this changed is desirable from the developers' perspective. @glwagner @simone-silvestri what do you guys think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1265545180:143,test,tests,143,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1265545180,1,['test'],['tests']
Testability,I was thinking we'd find out via the tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3340#issuecomment-1763142776:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3340#issuecomment-1763142776,1,['test'],['tests']
Testability,"I was trying to understand the dims pattern in the branching in `plan_transforms`, and ended up re-writing it a bit to understand it. Not sure if this is a preferable form, but I thought I'd open a PR in case. I need to double-check the logic, but maybe someone can confirm.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1435:237,log,logic,237,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1435,1,['log'],['logic']
Testability,I will actually close this PR and write a section in the benchmarks documentation,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2760#issuecomment-1263709825:57,benchmark,benchmarks,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2760#issuecomment-1263709825,1,['benchmark'],['benchmarks']
Testability,I will fix these tests later today (Sydney time..)!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3329#issuecomment-1756586591:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3329#issuecomment-1756586591,1,['test'],['tests']
Testability,"I will merge this PR but created an issue, #1448 , to modify `test_dynamics.jl` to include tests for `ShallowWaterModel`. Alternatively, we could have `test_shallow_water_dynamics.jl`. The latter does have a nice ring to it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1441#issuecomment-794278463:91,test,tests,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1441#issuecomment-794278463,1,['test'],['tests']
Testability,I will test it!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2436#issuecomment-1099245871:7,test,test,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2436#issuecomment-1099245871,1,['test'],['test']
Testability,I will try to test on GPU now,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482929337:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482929337,1,['test'],['test']
Testability,I wonder about CPU execution though... because the `MatrixSolver` with `ILU` was not tested and that in my experience seemed always to be the fastest method,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172575160:85,test,tested,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172575160,1,['test'],['tested']
Testability,"I wonder if it considers `benchmarks.md` as part of the docs, which is not too crazy a thought. If so, then anyline in your file that is not consistent with markdown standard could cause a problem?. I would suggest trying viewing your file using a markdown program and see if it complains about any particular lines. Or, are there any lines that don't appear?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1950#issuecomment-902863446:26,benchmark,benchmarks,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1950#issuecomment-902863446,1,['benchmark'],['benchmarks']
Testability,"I wonder if this would be better proposed as a custom dynamics option like with particles? . I'm just concerned that you could implement some dynamics in this way that are a core part of the model dynamics rather than a simulation of that model. For example, if you had a computationally intensive source/sink term, instead of recalculating for the tracer it's going to and from you could add a custom dynamic that calculates it once, takes from one and adds to the other (this is how PISCES implements a lot of the growth to prevent repetitive calculation of the same values, I don't know if this would be faster in this setting without testing but just as an example).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1279050785:638,test,testing,638,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1279050785,1,['test'],['testing']
Testability,"I wonder if we are not instantiating the test environment correctly. We do instantiate here:. https://github.com/CliMA/Oceananigans.jl/blob/abb66e32d333562dd9aaeb7dd2ed8fac5e781368/.buildkite/pipeline.yml#L20. but the segmentation fault is coming from `Pkg`:. ```; Stacktrace:; --;   | [1] pipeline_error;   | @ ./process.jl:565 [inlined];   | [2] read(cmd::Cmd);   | @ Base ./process.jl:449;   | [3] collect_artifacts(pkg_root::String; platform::Base.BinaryPlatforms.Platform);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:720;   | [4] collect_artifacts;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:706 [inlined];   | [5] download_artifacts(env::Pkg.Types.EnvCache; platform::Base.BinaryPlatforms.Platform, julia_version::VersionNumber, verbose::Bool, io::Base.DevNull);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:752;   | [6] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}, level::Pkg.Types.UpgradeLevel; skip_writing_project::Bool, preserve::Nothing);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1542;   | [7] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; level::Pkg.Types.UpgradeLevel, mode::Pkg.Types.PackageMode, preserve::Nothing, update_registry::Bool, skip_writing_project::Bool, kwargs::@Kwargs{io::Base.DevNull});   | @ Pkg.API /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:351;   | [8] up;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:326 [inlined];   | [9] up;   | @ /net/ocean/home/data44/data5/gl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136:41,test,test,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136,1,['test'],['test']
Testability,"I would add a minimal test given this feature could change, and hopefully make sure the test doesn't increase CI cost much.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2213#issuecomment-1028185427:22,test,test,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2213#issuecomment-1028185427,2,['test'],['test']
Testability,"I would keep the benchmarks simple and avoid a near-global ocean setup. The setups have to be maintained so its best if they are simple and easy to update when syntax changes. Also just for the purpose of setting up the pipeline, you probably only need one or two setups. Then we can incrementally build them up after we have observed that the pipeline is useful for at least a few days (if launching nightly). Hopefully the benchmarks will be efficient enough to run nightly.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3492#issuecomment-1973858990:17,benchmark,benchmarks,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3492#issuecomment-1973858990,4,['benchmark'],['benchmarks']
Testability,"I would like to start working on this. Note that in terms of maintenance burden, the docs already depend extensively on plotting. So I'm not sure a plotting extension will increase CI significantly. On the contrary we can start with a minimalist approach that simply uses the examples to test the functionality in the extension. I'd like to discuss design before starting. I think the basic functionality we need is to support automatically plotting of 2D fields. Basically we want to be able to write `heatmap!(ax, c)` and have it work automatically, eg if `c` is two-dimensional, then the non-trivial dimensions are automatically detected and appropriate node values inserted. I think this should work even if the dimensions are not `Flat`, so basically we just want to take a look at `size(c)`. We can also support `lines!` and `scatter!` and `scatterlines!` for 1D fields. Is there a streamlined way to do this for all situations, or do we need to add support for each method like `heatmap!`, `contour!`, `contourf!`, etc, individually?. A second question is how to support inspection of 3D fields. I think this is pretty hard. @Sbozzolo has some experience with this so he might have some valuable input.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3178#issuecomment-2271718591:288,test,test,288,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3178#issuecomment-2271718591,2,['test'],['test']
Testability,I would promote splitting up the tests rather than splitting loops if possible!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021711104:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021711104,1,['test'],['tests']
Testability,"I would suggest sticking with PAR rather than light.  PAR is very common in biogeochemistry and it is made up of specific bands of light and hence “light” and PAR aren’t exactly equivalent.  Calling it “light” could cause confusion if someone calculates PAR from the incoming solar radiation (light).; On Nov 18, 2022 at 3:07 PM +0000, Jago Strong-Wright ***@***.***>, wrote:; > @jagoosw commented on this pull request.; > In test/test_biogeochemistry.jl:; > > + wait(device(model.architecture), par_calculation); >; > +end; >; > +; >; > +biogeochemistry_parameters = (; >; > + growth_rate = 1/day,; >; > + light_limit = 3.5,; >; > + mortality_rate = 0.1/day,; >; > +; >; > + water_light_attenuation_coefficient = 0.12,; >; > + phytoplankton_light_attenuation_coefficient = 0.06,; >; > + phytoplankton_light_attenuation_exponent = 0.6,; >; > + surface_PAR = t -> 100*max(0.0, sin(t*π/(12hours))); >; > +); >; > +; >; > +biogeochemistry = SomethingBiogeochemistry(tracers = :P,; >; > + auxiliary_fields = :PAR,; >; > Makses sense, after I started I realised it was a bigger challenge than I thought it would be!; > I'll try and make these changes later.; > PAR stands for photosynthetically available radiation, perhaps it would be more clear to call it light here.; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513:426,test,test,426,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513,2,['test'],['test']
Testability,"I wrote a simple test that I believe represents a similar case, in which the fields of the type in question are pointers. On my machine there does not seem to be any performance difference. ```julia; using Random, BenchmarkTools, Printf ; ; struct Dummy ; a::Array{Float64,2} ; b::Array{Float64,2} ; c::Array{Float64,2} ; end ; ; mutable struct MutableDummy ; a::Array{Float64,2} ; b::Array{Float64,2} ; c::Array{Float64,2} ; end ; ; Dummy(n) = Dummy(rand(n, n), rand(n, n), rand(n, n)) ; MutableDummy(n) = MutableDummy(rand(n, n), rand(n, n), rand(n, n)) ; ; function crunch_dummy(d, nloops) ; for i = 1:nloops ; @. d.a = d.b * d.c ; end ; nothing ; end ; ; nloops = 1000 ; n = 1024 ; d = Dummy(n) ; mutable_d = MutableDummy(n) ; ; # Compile ; crunch_dummy(d, 1) ; crunch_dummy(mutable_d, 1) ; ; @printf ""Dummy crunching numbers: "" ; @btime crunch_dummy(d, nloops) ; ; @printf ""Mutable dummy crunching numbers: "" ; @btime crunch_dummy(mutable_d, nloops) ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/42#issuecomment-462544959:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/42#issuecomment-462544959,1,['test'],['test']
Testability,"I'd be in favor of always emitting a warning for `ImmersedBoundaryCondition` that it's experimental (no published papers, few validation tests)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1613499377:137,test,tests,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1613499377,1,['test'],['tests']
Testability,"I'd like to also two 2D examples. 1. rising thermal bubble and; 2. lid-driven cavity. as super simple examples. Their set up shouldn't take more than 10 lines excluding comments. > Dramatically simplify internal wave example. +1! Always good to simplify scripts as much as possible. Would also be nice to include it in the example tests (PR #418) if it can use something like `makeplot = false`. > Free decay of two dimensional turbulence (use x,y plane). Only issue with 2D xy-plane simulations is I think things are weird with `Nz=1` so I had to use `Nz=2` (see Taylor-Green vortex test in `test_dynamics.jl`). 1D and 2D models haven't been a priority unfortunately so this sort of stuff has cropped up. I think 2D xz and yz simulations are fine with `Ny=1` and `Nx=1` respectively. > Stratified Couette flow example. I can simplify the simulation script from PR #381 down to a 2D example. This one would be good. > I think we should split deepening mixed layer into a few examples. Sound like a good idea!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/332#issuecomment-533084378:331,test,tests,331,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/332#issuecomment-533084378,2,['test'],"['test', 'tests']"
Testability,I'd like to define a custom logger for the logging the progress of models (ModelLogger). It's based on `Logging.SimpleLogger` and currently attempts to format `@info` calls as:; `[dd/mm/yyyy HH:MM:SS] module source_file:line_number: message`. Once that is in place I'd like to define some custom LogStates and have ModelLogger handle those as well. Chiefly `@diagnostic`. . I wired up one of the examples to use ModelLogger rather than printf.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478:28,log,logger,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478,4,"['Log', 'log']","['LogStates', 'Logging', 'logger', 'logging']"
Testability,I'd like to help and hopefully clean up or simplify the tests along the way.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1120209140:56,test,tests,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1120209140,2,['test'],['tests']
Testability,I'll add a test.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2186#issuecomment-1021897957:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2186#issuecomment-1021897957,1,['test'],['test']
Testability,I'll close this PR and let you know when I've managed to test this. Thanks!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3262#issuecomment-1719179326:57,test,test,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3262#issuecomment-1719179326,1,['test'],['test']
Testability,I'll fix the unit tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1480634435:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1480634435,1,['test'],['tests']
Testability,I'll let @ali-ramadhan explain exactly what's the best way to have the `.png` for the convergence tests in without burdening the git history.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873279370:98,test,tests,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873279370,1,['test'],['tests']
Testability,I'll merge this now since benchmarking / major changes are planned anyways...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1454775895:26,benchmark,benchmarking,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1454775895,1,['benchmark'],['benchmarking']
Testability,I'll merge when tests pass!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2488#issuecomment-1112084764:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2488#issuecomment-1112084764,1,['test'],['tests']
Testability,I'll merge when tests pass! This is needed for https://github.com/CliMA/OceanTurbulenceParameterEstimation.jl/pull/165,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2220#issuecomment-1029737813:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2220#issuecomment-1029737813,1,['test'],['tests']
Testability,"I'll open a PR to add a test that covers this. ---. MWE:. ```julia; using Oceananigans; using Oceananigans.Solvers: ConjugateGradientPoissonSolver. grid = RectilinearGrid(; CPU(),; Float64,; topology = (Bounded, Bounded, Bounded),; size = (16, 16, 16),; x = (0, 1),; y = (0, 1),; z = (-1, 0); ). ConjugateGradientPoissonSolver(grid); ```. Error:. ```; ERROR: UndefVarError: `ImmersedBoundaryGrid` not defined; Stacktrace:; [1] ConjugateGradientPoissonSolver(grid::RectilinearGrid{…}; preconditioner::Oceananigans.Solvers.DefaultPreconditioner, reltol::Float64, abstol::Float64, kw::@Kwargs{}); @ Oceananigans.Solvers ~/atdepth/Oceananigans.jl/src/Solvers/conjugate_gradient_poisson_solver.jl:54; [2] ConjugateGradientPoissonSolver(grid::RectilinearGrid{Float64, Bounded, Bounded, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{…}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{…}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{…}}, CPU}); @ Oceananigans.Solvers ~/atdepth/Oceananigans.jl/src/Solvers/conjugate_gradient_poisson_solver.jl:47; [3] top-level scope; @ REPL[6]:1; Some type information was truncated. Use `show(err)` to see complete types.; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3829:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3829,1,['test'],['test']
Testability,I'll open a test PR from master and see if I can get a test to fail!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868903376:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868903376,2,['test'],['test']
Testability,I'll proceed with nuking as soon as tests pass. But I do advocate for the need of a simple example on the sphere to appear in the docs soon... :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1691#issuecomment-847373536:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1691#issuecomment-847373536,2,['test'],['tests']
Testability,I'll set up a simple test in which both tracers and velocity fields oscillate and see if we can reproduce the bug.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-818006716:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-818006716,2,['test'],['test']
Testability,I'll take a look at the tests and see if we need to change anything before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127177867:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127177867,1,['test'],['tests']
Testability,I'll try to figure out what's going on with the distributed tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3581#issuecomment-2096296153:60,test,tests,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3581#issuecomment-2096296153,1,['test'],['tests']
Testability,"I'll wait till it's ready to review in detail, but my main high-level comment is that we need to ensure that, at the end of a time-step, both the prognostic state (horizontal velocities and tracers) and auxiliary state (pressure, vertical velocity, eddy diffusivities) are all consistent and available for output at the current model time. If we intertwine communication with the computation of the auxiliary state and tendencies, then we should _define_ the tendencies as part of the auxiliary state. This will change the semantics and logic of the time stepping loop. But I think it at least as rational as our previous organization of events. The main change is that tendencies will now be computed one ""extra"" time in a simulation (at the very last time-step, the tendencies are not needed if no further time-steps will be taken). In the vast majority of cases this extra cost is negligible because simulations run for hundreds or hundreds of thousands of time-steps. There is the slightly possibility of pessimizing the edge case of a simulation that takes one time step, which may be useful for parameter estimation. For that purpose we may want to avoid computing the ""extra"" tendency. I'm thinking though that we should save that additional optimization until we need it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616:537,log,logic,537,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616,1,['log'],['logic']
Testability,"I'll work on a new test that catches this bug, then we can try to fix it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2065#issuecomment-974374336:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2065#issuecomment-974374336,1,['test'],['test']
Testability,"I'm a bit stumped. The error is. ```; Test threw exception; --;   | Expression: advective_and_multiple_forcing(arch);   | TaskFailedException;   |  ;   | nested task error: BoundsError; ```. But I can't reproduce this locally. I can fathom a `BoundsError` when we use a high-order advection scheme and our halos aren't big enough. Right now we check the ""model advection scheme"" and the grid halos to catch this issue, but we don't check the forcings. However, the test uses `halo = (3, 3, 3)` right now:. https://github.com/CliMA/Oceananigans.jl/blob/791bb83e4c49386cc31292bf391762f1cd96bdee/test/test_forcings.jl#L115. On the other hand, if I time step a model for which I _know_ the halos are too small (locally), I don't get an error (even though I'd like to). So maybe there _is_ something fishy...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1092135179:38,Test,Test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1092135179,3,"['Test', 'test']","['Test', 'test']"
Testability,I'm amazed that the ultra-simple case of forcing with array values is still not properly supported. This PR adds that support. It needs a test.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3498:138,test,test,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3498,1,['test'],['test']
Testability,"I'm amazed though - do we not have a test for building HydrostaticFreeSurfaceModel in this simplest case? It seems we need quite a few more tests for the TripolarGrid. We need to test various combination of model inputs and make sure that all of the ones we intent to support are working (free surfaces, advection schemes, coriolis, closures, etc).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3806#issuecomment-2397268979:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3806#issuecomment-2397268979,6,['test'],"['test', 'tests']"
Testability,I'm closing this; @loganpknudsen please re-open if you still think there is an issue.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1989008367:19,log,loganpknudsen,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1989008367,1,['log'],['loganpknudsen']
Testability,I'm debating whether we should bump minor release. In principle there shouldn't be any breaking change. But we stopped testing on v1.8 and start testing on v1.9...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024:119,test,testing,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024,2,['test'],['testing']
Testability,"I'm following the documentation so either we have a bug or the documentation needs to be clearer on how to use `JLD2OutputWriter` with named tuples. ```julia; using Oceananigans, Oceananigans.OutputWriters; grid = RegularCartesianGrid(size=(16, 16, 16), length=(1, 1, 1)); model = Model(grid=grid); outputs = (u=model->model.velocities.u, T=model->model.tracers.T); model.output_writers[:jld2] = JLD2OutputWriter(model, outputs; frequency=1, prefix=""test"", verbose=true); time_step!(model; Δt=1, Nt=1); ```; produces; ```; [ Info: Calculating JLD2 output (:u, :T)...; ERROR: MethodError: Cannot `convert` an object of type Field{Oceananigans.Cell,Oceananigans.Cell,Oceananigans.Cell,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularCartesianGrid{Float64,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}} to an object of type Field{Oceananigans.Face,Oceananigans.Cell,Oceananigans.Cell,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularCartesianGrid{Float64,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}} ; Closest candidates are:; convert(::Type{T}, ::T) where T at essentials.jl:168; Stacktrace:; [1] setindex!(::Dict{Symbol,Field{Oceananigans.Face,Oceananigans.Cell,Oceananigans.Cell,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularCartesianGrid{Float64,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}}, ::Field{Oceananigans.Cell,Oceananigans.Cell,Oceananigans.Cell,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularCartesianGrid{Float64,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, ::Symbol) at ./dict.jl:380; [2] Dict{Symbol,Field{Oceananigans.Face,Oceananigans.Cell,Oceananigans.Cell,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularCartesianGrid{Float64,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}}(::Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Symbol,Symbol},Tu",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/562:450,test,test,450,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/562,1,['test'],['test']
Testability,I'm game to try. Should we modify the baroclinic adjustment problem or is there another benchmark you have in mind?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1948120596:88,benchmark,benchmark,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1948120596,1,['benchmark'],['benchmark']
Testability,"I'm getting an error while running the following example on a GPU, it runs correctly on CPU though. It has a problem with the immersed boundary conditions, but the same BC on the normal boundary doesn't throw the error.; ```; using CUDA; using Oceananigans. arch = has_cuda_gpu() ? GPU() : CPU(); topo = [Flat, Periodic, Bounded] ; underlying_grid = RectilinearGrid(arch, size = (1,1), ; extent = (1, 1),; topology = topo). @inline slope(x, y) = -2.0*y; immersed_grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(slope)). z₀ = 1e-2 # Charnock roughness; κ = 0.4 # Von Karman constant; @inline Cᴰ(Δz) = (κ / log(Δz / 2z₀))^2; const dz = 0.1. @inline bottom_drag_v(x, y, t, v, w, Cᴰ) = - Cᴰ * v * sqrt(v^2 + w^2); @inline bottom_drag_v(x, y, z, t, v, w, Cᴰ) = - Cᴰ * v * sqrt(v^2 + w^2); v_drag_bc = FluxBoundaryCondition(bottom_drag_v, field_dependencies=(:v, :w), parameters=Cᴰ(dz)); v_bcs = FieldBoundaryConditions(bottom=v_drag_bc, immersed=v_drag_bc). boundary_conditions = (; v = v_bcs,). model = NonhydrostaticModel(grid = immersed_grid, ; boundary_conditions = boundary_conditions). simulation = Simulation(model, Δt = 0.1, stop_time = 1.0); run!(simulation); ```; Error, truncated stack trace for length:. ```; GPU compilation of kernel gpu_calculate_Gv!(Cassette.Context{nametype(CUDACtx), Nothing, Nothing, KernelAbstractions.var""##PassType#257"", Nothing, Cassette.DisableHooks}, typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gv!), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, ImmersedBoundaryGrid{Float64, Flat, Periodic, Bounded, RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRange",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:619,log,log,619,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['log'],['log']
Testability,I'm going to start with some simple analytical solution tests (perhaps heat/salinity diffusion) until #73 is resolved. Then can begin on the 'designed forcing' CI tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-467629836:56,test,tests,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-467629836,2,['test'],['tests']
Testability,I'm gonna stick to `FPlane` for now because we don't have a regression test for `BetaPlane`. Once we get the regression tests in I'll submit a new PR for `BetaPlane`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1371#issuecomment-780769320:71,test,test,71,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1371#issuecomment-780769320,2,['test'],"['test', 'tests']"
Testability,"I'm happy to do this. However, I need to know what to do, exactly. What code should I put in the verification folder, and what is the format? A few more questions:. - Where do we write documentation for the verification experiments? ; - Are we continuously testing verification experiments to ensure they run with new versions of the code, or should verification experiments be tagged to a particular version of the code?. I think all these questions should themselves be answered in the documentation, also. Otherwise it is not clear how to contribute new verification experiments.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-562111833:257,test,testing,257,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-562111833,1,['test'],['testing']
Testability,"I'm happy to help moving this stuff to an extension. I think it'll be easier to build the extension from the outset, since the diff in this PR makes it obvious exactly what needs to go into the extension. The other question we have to answer is how to test the AMD functionality.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937260414:252,test,test,252,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937260414,1,['test'],['test']
Testability,I'm happy with this PR. I think we should merge when tests pass. How about others?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1595621060:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1595621060,1,['test'],['tests']
Testability,"I'm not 100% sure but I think doing reductions over non-contiguous data might be subject to variable timings that depend on how the data is organized in memory. In an ideal world, we would benchmark these things regularly...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-960354233:189,benchmark,benchmark,189,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-960354233,1,['benchmark'],['benchmark']
Testability,I'm not against a proliferation of advection schemes. We should probably not merge new advection schemes without a convergence test though?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1320#issuecomment-768400642:127,test,test,127,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1320#issuecomment-768400642,1,['test'],['test']
Testability,I'm not sure how this works for distributed tests but I don't think anything needs to change there,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250049060:44,test,tests,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250049060,1,['test'],['tests']
Testability,I'm not sure if I'm benchmarking correctly on the GPU. I used `@benchmark CUDA.@sync function_to_bench()`. Running the `doubly_bounded_poisson.jl` script with `N = 64` on tartarus gave me:. ### On CPU. ![solvers_benchmark_CPU](https://user-images.githubusercontent.com/7112768/189507791-e658161f-6826-4755-aa53-39d4caf93701.png). ### On GPU. ![solvers_benchmark_GPU](https://user-images.githubusercontent.com/7112768/189507968-bb71dacc-06b6-498e-8b8d-a29017fc88f3.png),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1242840455:20,benchmark,benchmarking,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1242840455,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,I'm not sure if we've tested but I've assumed there is a performance benefit to the simpler version for regularly spaced grids rather than using the binary search. It would probably be sensible to change the differentiation between the methods to just `fractional_index` though.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3356#issuecomment-1775532157:22,test,tested,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3356#issuecomment-1775532157,2,['test'],['tested']
Testability,"I'm not sure this will run smoothly on Julia v1.6. E.g., on v1.6:. ```Julia; (Oceananigans) pkg> instantiate; ERROR: AssertionError: sourcepath !== nothing; Stacktrace:; [1] is_package_downloaded(ctx::Pkg.Types.Context, pkg::Pkg.Types.PackageSpec); @ Pkg.Operations ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1789; [2] #13; @ ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:131 [inlined]; [3] _all; @ ./reduce.jl:923 [inlined]; [4] #all#698; @ ./reducedim.jl:886 [inlined]; [5] all; @ ./reducedim.jl:886 [inlined]; [6] is_instantiated(ctx::Pkg.Types.Context); @ Pkg.Operations ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:131; [7] instantiate(ctx::Pkg.Types.Context; manifest::Nothing, update_registry::Bool, verbose::Bool, platform::Base.BinaryPlatforms.Platform, allow_build::Bool, allow_autoprecomp::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Pkg.API ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:1358; [8] instantiate; @ ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:1325 [inlined]; [9] #instantiate#252; @ ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:1321 [inlined]; [10] instantiate(); @ Pkg.API ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:1321; [11] do_cmd!(command::Pkg.REPLMode.Command, repl::REPL.LineEditREPL); @ Pkg.REPLMode ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:405; [12] do_cmd(repl::REPL.LineEditREPL, input::String; do_rethrow::Bool); @ Pkg.REPLMode ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:386; [13] do_cmd; @ ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:377 [inlined]; [14] (::Pkg.REPLMode.var""#24#27""{REPL.LineEditREPL, REPL.LineEdit.Prompt})(s::REPL.LineEdit.MIState, buf::IOBuffer, ok::Bool); @ Pkg.REPLMode ~/julia/usr/share/julia/stdlib/v1.6/Pkg/src/REPLMode/REPLMode.jl:550; [15] #invokelatest#2; @ ./essentials.jl:708 [inlined]; [16] invokelatest; @ ./essentials.jl:706 [inlined]; [17] run_interf",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2090#issuecomment-984239840:117,Assert,AssertionError,117,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2090#issuecomment-984239840,1,['Assert'],['AssertionError']
Testability,I'm not sure whats causing these tests to fail now?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481354840:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481354840,1,['test'],['tests']
Testability,I'm not sure whether that is a correct assumption or not. Some of them were designed to be used on the GPU:. https://github.com/CliMA/Oceananigans.jl/blob/6e39d3fcc098c69ac207cc21be759cf6bd3ec604/examples/ocean_wind_mixing_and_convection.jl#L157-L158. But I don't think anyone has ever tried to run the Kelvin-Helmholtz example on the GPU before (for example). Many of the others have been run on the GPU. But I think to really ensure this is the case in the long run we'll have to use CI. We actually used to do something like this (including altering selected lines in the test scripts to make them more amenable to CI) so someone could dredge up that testing code to use with our GPU CI to solve this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881456119:575,test,test,575,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881456119,2,['test'],"['test', 'testing']"
Testability,I'm not sure why this fails as the test runs fine locally,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1629476318:35,test,test,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1629476318,1,['test'],['test']
Testability,"I'm not sure. I guess whatever reproduces #1767. It seems that it only occurs sometimes so maybe we just need to make an existing test larger and run it multiple times, like 10 times?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868881166:130,test,test,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868881166,1,['test'],['test']
Testability,"I'm not sure. I'm not very familiar with the testing part of Oceananigans, so I'm not sure what would be a good test for this. Just testing that `min_Δz` works seems too specific, on the other hand, creating a whole simulation with a stretched grid and running it with an LES and adaptive time-stepping just to test that seems wasteful. I'm happy to just merge this for now and create a test for this in the future. Thoughts?. CC @glwagner @ali-ramadhan",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866087165:45,test,testing,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866087165,5,['test'],"['test', 'testing']"
Testability,I'm ok with removing `Function` here by the way. I don't think we need a test for it --- those tests are in Julia Base (ie we don't need to test that callable objects are possible). Why is `<:Function` there anyways?. The only thing I can think of is that users have to subtype `<:Function` for this to work and maybe that makes code more legible. But it's a restriction of `StructForcing` also has to subtype something else. So I would actually be in favor of removing the `<:Forcing` restriction. Note there are many places in the code we allow this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3237#issuecomment-1695671775:73,test,test,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3237#issuecomment-1695671775,3,['test'],"['test', 'tests']"
Testability,"I'm pretty sure fresh installs don't necessarily reproduce the Manifest. I think unless you pin something, Pkg will try to get the latest set of packages that are still compatible. In fact, I don't think it's even recommended to add a Manifest with the github repo (at least not according to github: https://github.com/github/gitignore/blob/b0012e4930d0a8c350254a3caeedf7441ea286a3/Julia.gitignore#L20-L24). This is an example of a fresh Oceananigans install I just made. Notice it installed CUDA v3.4.2:. ```julia; (@v1.6) pkg> activate .; Activating new environment at `~/Dropbox/tests/fresh/Project.toml`. (fresh) pkg> add Oceananigans; Updating registry at `~/.julia/registries/General`; Resolving package versions...; Installed ChainRulesCore ─ v1.7.2; Installed Tables ───────── v1.6.0; Installed Parsers ──────── v2.0.5; Installed StaticArrays ─── v1.2.13; Updating `~/Dropbox/tests/fresh/Project.toml`; [9e8cae18] + Oceananigans v0.63.1; Updating `~/Dropbox/tests/fresh/Manifest.toml`; [621f4979] + AbstractFFTs v1.0.1; [79e6a3ab] + Adapt v3.3.1; [4fba245c] + ArrayInterface v3.1.33; [ab4f0b2a] + BFloat16s v0.1.0; [fa961155] + CEnum v0.4.1; [179af706] + CFTime v0.1.1; [052768ef] + CUDA v3.4.2; [72cfdca4] + CUDAKernels v0.3.0; [7057c7e9] + Cassette v0.3.9; [d360d2e6] + ChainRulesCore v1.7.2; [34da2185] + Compat v3.39.0; [a8cc5b0e] + Crayons v4.0.4; [7445602f] + CubedSphere v0.1.0; [9a962f9c] + DataAPI v1.9.0; [864edb3b] + DataStructures v0.18.10; [e2d170a0] + DataValueInterfaces v1.0.0; [b552c78f] + DiffRules v1.3.1; [ffbed154] + DocStringExtensions v0.8.5; [b305315f] + Elliptic v1.0.1; [e2ba6199] + ExprTools v0.1.6; [7a1cc6ca] + FFTW v1.4.5; [5789e2e9] + FileIO v1.11.1; [0c68f7d7] + GPUArrays v8.1.1; [61eb1bfa] + GPUCompiler v0.12.9; [c27321d9] + Glob v1.3.0; [615f187c] + IfElse v0.1.0; [92d709cd] + IrrationalConstants v0.1.0; [82899510] + IteratorInterfaceExtensions v1.0.0; [033835bb] + JLD2 v0.4.14; [692b3bcd] + JLLWrappers v1.3.0; [0f8b85d8] + JSON3 v1.9.1; [63c18a36] + Ke",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1996#issuecomment-933978237:582,test,tests,582,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1996#issuecomment-933978237,3,['test'],['tests']
Testability,I'm quite confused that this test from `test_seawater.jl` fails:. https://buildkite.com/clima/oceananigans/builds/15457#018eec75-847a-4323-b8e9-9f104d750297/37-1020. On tartarus everything passes...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2061846982:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2061846982,1,['test'],['test']
Testability,"I'm seeing some significant slow down with the boundary condition. ```julia; # Monin-Obukhov drag coefficient; z₀ = 1e-4 # Charnock roughness; κ = 0.4 # Von Karman constant; Cᴰ(Δz) = (κ / log(Δz / 2z₀))^2. @inline bottom_drag_u(x, y, t, u, w, Cᴰ) = - Cᴰ * u * sqrt(u^2 + w^2); @inline bottom_drag_w(x, y, t, u, w, Cᴰ) = - Cᴰ * w * sqrt(u^2 + w^2); @inline bottom_drag_u(x, y, z, t, u, w, Cᴰ) = - Cᴰ * u * sqrt(u^2 + w^2); @inline bottom_drag_w(x, y, z, t, u, w, Cᴰ) = - Cᴰ * w * sqrt(u^2 + w^2). Δz = 1 / Nz; Δx = 2π / Nz; u_drag_bc = FluxBoundaryCondition(bottom_drag_u, field_dependencies=(:u, :w), parameters=Cᴰ(Δz)); w_drag_bc = FluxBoundaryCondition(bottom_drag_w, field_dependencies=(:u, :w), parameters=Cᴰ(Δx)); u_bcs = FieldBoundaryConditions(bottom=u_drag_bc, immersed=u_drag_bc); w_bcs = FieldBoundaryConditions(immersed=w_drag_bc); ```. This is the basic way to implement a quadratic drag from the interface in this PR. In this case what happens under the hood is that we create 4 `ContinuousBoundaryFunction` for the relevant faces of boundary-adjacent cells (the other 2 faces are normal to the given velocity component, so receive a no-penetration boundary condition). So there could be a type instability compiling all of those (which have been notoriously fickle to compile in the past). We clearly need to hard code quadratic drag though, because for stretched grids and partial cells (and other types of immersed boundaries in the future) we have to do precompute the logarithm of the grid metrics (to use in a Monin-Obukhov-type model) in each direction independently, as well as the logarithm of the roughness. It's too much for this PR though, so I think we should just document how to specify no-slip on immersed boundaries (which appears to be performant), and add a few tests. Then in a future PR we can add a `QuadraticDrag` utility (I have a prototype for this object; others are welcome to collaborate on implementing the necessary functions to support it).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104673081:188,log,log,188,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104673081,8,"['log', 'test']","['log', 'logarithm', 'tests']"
Testability,"I'm sorry, I misinterpreted the results @ali-ramadhan posted. I thought that `CenteredSecondOrder` was 1.0x slower with julia 1.6 than with 1.5 (and that small slowdowns were observed for the other schemes, which is why I recommended testing the biharmonic scheme.) Now I understand that these results are all for julia 1.6; we are comparing the results with previously obtained benchmarks (not posted) for julia 1.5. Looking at @tomchor and @ali-ramadhan's results then it looks like simulations with WENO5 are running approximately 6-8 times slower on julia 1.6 than it was on julia 1.5, while other advection schemes (and closures) are unchanged --- correct?. Is the _CPU_ performance of WENO5 roughly equivalent between julia 1.5 and julia 1.6?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868677634:234,test,testing,234,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868677634,2,"['benchmark', 'test']","['benchmarks', 'testing']"
Testability,"I'm sort of glad to see @glwagner is verifying the issues we first discussed last year. My 2 cents: . - Small errors in the BC eventually propagating to the whole simulation is unavoidable; this is a well mixed flow. Checking on integrated quantities, such as maintaining conserved properties or matching the expected global dissipation rate, is a more achievable and important goal. ; - Using a test case with some stronger pressure gradients along the boundary would be good as well since this induces much of the error. The circle @wenegrat suggests is the classic, but you might be able to find a more subtle case which is more relevant to your application. Perhaps turbulent flow in a wavy-wall channel? Linking the amplitude of the waves to the change in turbulent statistics seems pretty well aligned with your application (though I could be wrong).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-855362669:396,test,test,396,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-855362669,1,['test'],['test']
Testability,I'm struggling to fix this test failing and am not sure why its not passing the combined velocities correctly,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1576845262:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1576845262,1,['test'],['test']
Testability,I'm testing this.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1567:4,test,testing,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1567,1,['test'],['testing']
Testability,"I'm thinking about updating `benchmarks.md` with the new benchmark result tables and graphs. Should I do it now or wait until the docs get refactored?; It's only a single file in the appendix section, but I'm not too sure how me opening a PR on it now to update it will affect the grander refactoring plan.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880741401:29,benchmark,benchmarks,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880741401,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"I'm thinking of an integration test that tests the whole pipeline: use of a 3-tuple when constructing a model, test that time-stepping works without an error, and test that the output is correct. It's probably easier to compare two models than to compare one model to an analytical solution. Comparison to an analytical solution is tricky, usually we have to invoke an arbitrary tolerance.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883638590:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883638590,4,['test'],"['test', 'tests']"
Testability,"I'm trying to integrate a scalar in time (the scalar itself being a volume-integrated `Field`). Pretty much what's being done here: https://github.com/tomchor/Oceanostics.jl/blob/main/test/test_budgets.jl. I can probably come up with a way to do it without auxiliary fields. I just assumed `auxiliary_fields` could also be scalars since fields is written as ""fields"" in the docs, rather than ""`Fields`"". (Although I'm not sure what you mean by a ""parameter"").",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696:184,test,test,184,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696,1,['test'],['test']
Testability,"I'm trying to set up a small test where a zonal velocity forced by open boundary conditions goes around an immersed sea mount, using the new immersed pressure solver. Unfortunately I get immediate NaNs on iteration 1. Maybe there's a bug somewhere? I know I'm using a bunch of _experimental_ features together so perhaps this is not surprising. My setup could also be bad though. Curious if anyone has any insights on what's going wrong here. Does the pressure solver need to be modified to account for non-zero velocities at the boundaries? I guess the FFT pressure solver assumes either periodic or no-penetration at the boundaries, but then shouldn't the conjugate gradient solver converge on the correct pressure with enough iterations? Or maybe not if the pre-conditioner is very wrong?. ""MWE"" setup:. ```julia; using Printf; using Oceananigans; using Oceananigans.Solvers: ConjugateGradientPoissonSolver, fft_poisson_solver. L = 100; H = 100. underlying_grid = RectilinearGrid(; CPU(),; Float64,; topology = (Bounded, Bounded, Bounded),; size = (16, 16, 16),; x = (0, L),; y = (0, L),; z = (-H, 0); ). h = H/2; w = L/5; mount(x, y) = h * exp(-x^2 / 2w^2) * exp(-y^2 / 2w^2); bottom(x, y) = -H + mount(x, y). grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bottom)). @inline u_inflow(y, z, t) = 0.01. u_bcs = FieldBoundaryConditions(; west = OpenBoundaryCondition(u_inflow),; east = OpenBoundaryCondition(u_inflow); ). boundary_conditions = (; u=u_bcs). model = NonhydrostaticModel(;; grid,; boundary_conditions,; timestepper = :RungeKutta3,; pressure_solver = ConjugateGradientPoissonSolver(; grid;; preconditioner = fft_poisson_solver(grid.underlying_grid); ); ). simulation = Simulation(model; Δt=0.1, stop_time=60). progress(sim) = @printf(; ""iteration: %d, time: %.4f, U_max=(%.2e, %.2e, %.2e)\n"",; iteration(simulation),; time(simulation),; maximum(abs, model.velocities.u),; maximum(abs, model.velocities.v),; maximum(abs, model.velocities.w); ). simulation.callbacks[:progre",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831,1,['test'],['test']
Testability,"I'm trying to set up back Codecov for Oceananigans.jl, e.g., we'll be able to see which parts of the code are covered by the tests and which bits are not. Something like https://app.codecov.io/gh/CliMA/OceanLearning.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063298738:125,test,tests,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063298738,1,['test'],['tests']
Testability,"I'm trying to write a test. But, while on **`main`** branch:. ```julia; julia> using Oceananigans. julia> model = HydrostaticFreeSurfaceModel(grid=RectilinearGrid(size=(1, 1, 1), extent=(1, 2, 3)),; buoyancy = BuoyancyTracer(),; tracers = (:b, :e)); HydrostaticFreeSurfaceModel{CPU, Float64}(time = 0 seconds, iteration = 0); ├── grid: 1×1×1 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 1×1×1 halo; ├── tracers: (:b, :e); ├── closure: Nothing; ├── buoyancy: Buoyancy{BuoyancyTracer, Oceananigans.Grids.ZDirection}; ├── free surface: ExplicitFreeSurface with gravitational acceleration 9.80665 m s⁻²; └── coriolis: Nothing. julia> model.timestepper.Gⁿ.η[1, 1, 1]; 0.0. julia> model.timestepper.G⁻.η[1, 1, 1]; 0.0. julia> model.timestepper.G⁻.η[1, 1, 1] = NaN; NaN. julia> time_step!(model, 1; euler=true). julia> model.timestepper.G⁻.η[1, 1, 1]; 0.0. julia> model.timestepper.Gⁿ.η[1, 1, 1]; 0.0; ```. Why NaNs don't persist?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046388403:22,test,test,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046388403,1,['test'],['test']
Testability,I'm wondering whether the errors in the `gpu simulation tests` group are related to Tullio.jl. Seems like only `Tullio#master` mentions/uses `CUDAKernels`... https://github.com/mcabbott/Tullio.jl/commit/d3c4fde63c37ebae31b6d13413531a3a9241d59c,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-822144443:56,test,tests,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-822144443,1,['test'],['tests']
Testability,I'm working on it continuously... :); As soon as all tests pass we can discuss. We are almost there @tomchor I feel... only something Tullio-related was not passing the previous time. Now I updated Tullio and trying again. Hold on to your chair!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-825942070:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-825942070,1,['test'],['tests']
Testability,"I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test. I haven't tried the test on GPU either so suspect it may fail.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1487701044:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1487701044,3,['test'],['test']
Testability,I've added an experimental docstring on \Delta z. Still needs tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1607#issuecomment-826009341:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1607#issuecomment-826009341,1,['test'],['tests']
Testability,"I've already made sure the forcing function doesn't reference anything outside the function (reduces clarity unfortunately) and pasted the benchmarks using the script from PR #370 at the bottom. Did not try changing the function signature to `FT(grid, u, v, w, T, S, i, j, k)` as that would make implementing #25 more difficult. Also, I was kind of lazy. Adding `@inbounds` seems to help a lot. Went from being 2.1x slower to being 1.3x slower. Still a significant slowdown considering that these forcing functions aren't as computationally demanding as the rest of the right-hand-side calculation. But good enough for me right now. It can be a very powerful feature (essentially replacing the MITgcm RBCS package, for one example) so would be good to get maximum performance out of the forcing functions. But it will probably always depend on exactly how you write them. So might make sense to have guidelines on writing ""performant forcing functions"" in the documentation. ---; Attempt 1:; ```julia; @inline function Fu(grid, U, Φ, i, j, k); if k == 1; return -2*0.1/grid.Δz^2 * (U.u[i, j, 1] - 0); elseif k == grid.Nz; return -2*0.1/grid.Δz^2 * (U.u[i, j, grid.Nz] - 0); else; return 0; end; end. @inline FT(grid, U, Φ, i, j, k) = ifelse(k == 1, -1e-4 * (Φ.T[i, j, 1] - 0), 0); ```; ```; ──────────────────────────────────────────────────────────────────────────────────────────────────; Forcing function benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 59.9s / 0.41% 7.38GiB / 0.36% . Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────────────────; 128×128×128 with forcing (GPU, Float64) 10 166ms 68.2% 16.6ms 13.8MiB 51.2% 1.38MiB; 128×128×128 no forcing (GPU, Float64) 10 77.4ms 31.8% 7.74ms 13.1MiB 48.8% 1.31MiB; ──────────────────────────────────────────────────────────────────────────────────────────────────; ```; ---; Attempt 2:; ```julia. @inline function Fu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/365#issuecomment-525326208:139,benchmark,benchmarks,139,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/365#issuecomment-525326208,1,['benchmark'],['benchmarks']
Testability,"I've also offered to help configure testing on our systems, if someone wants to provide what is needed to integrate with slurm.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328783023:36,test,testing,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328783023,1,['test'],['testing']
Testability,"I've been facing some trouble in https://github.com/CliMA/Oceananigans.jl/pull/2842/ for cubed sphere grids and I think that's why. Locally this change makes the tests there pass. Admittedly I know very little about cubed spheres, so input is appreciated.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2875:162,test,tests,162,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2875,1,['test'],['tests']
Testability,"I've been looking at a coastal upwelling model with an analytical solution ([Estrade *et al.*, 2008](https://elischolar.library.yale.edu/journal_of_marine_research/207/)'s Equation 15, plotted below) that could be a good candidate for an immersed boundary validation test. It is an extension of Ekman's classical 1D solution to a simple 2D planar slope ($x-z$) geometry:. ![EMVR08_analytical](https://github.com/CliMA/Oceananigans.jl/assets/4955404/5a8775df-3887-4503-af87-0bbca795e6f7). Estrade *et al.* test this with a 2D ROMS implementation (their Figure 10) that I've tried to replicate in Oceananigans:. ![compare_EMVR08-analytical-numerical](https://github.com/CliMA/Oceananigans.jl/assets/4955404/c17b41e9-cb0c-463a-9bae-d418ab30e007). The discrepancy is mostly in the BBL, so I'm wondering if cut cells (#3146) would improve it. But I'm also not sure if I'm prescribing bottom friction correctly at the immersed boundary (see code below run in Oceananigans v0.91.0). Any thoughts?. ```julia; using Oceananigans; using Oceananigans.Units; using Printf. Lx = 200kilometers; dx = 100meters #200meters#500meters; hmin = 4meters; slope = 1e-3. D = 50meters; f = 3.8145e-05 # At ~15N. dz = 2meters #4meters. Ti = 2π/f; Av = f*(D/π)^2/2; @info @sprintf(""Ti: %.1f h"", Ti/3600); @info @sprintf(""Av: %1.3e m2/s for D = %d m"", Av, D) # Av = 4.831e-3 m2/s, D = 50 m, lat = 15N in Estrade et al. (2008). te = 4Ti #10Ti; outdt = Ti/10; fout = ""upwelling2Dhomog.nc"". logdt = outdt#Ti/100; maxcfl = 0.7. H = hmin + slope*Lx; Nx = Int(ceil(Lx/dx)); Nz = Int(ceil(H/dz)). underlying_grid = RectilinearGrid(CPU(),; size=(Nx, Nz), halo=(3, 3),; x = (-Lx, 0),; z = (-H, 0),; topology=(Bounded, Flat, Bounded)). h(x) = hmin + slope*x; grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(h)). τx₀ = 0 # [Pa]; τy₀ = -0.1 # [Pa]; ρ₀ = 1025 # [kg/m3]; r = 5e-3. Twind = Ti/2 # Wind ramp-up timescale. τx₀ = τx₀/ρ₀; τy₀ = τy₀/ρ₀. # Boundary conditions (wind stress and bottom friction).; @inline wind_stress_u",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2132214906:267,test,test,267,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2132214906,2,['test'],['test']
Testability,"I've been thinking about open boundaries more and have some things I want to test, but they're more questions about the numerics and I don't think this is the place for it. . From the last examples I sent + other experiments I've done with it I think matching schemes are justified because even in the nested case we don't want the boundary value to modify the outflow to modify the internal solution as in the cylinder example. For example, in a nested case, this would prevent higher resolution eddies from exiting the domain without un-physically modifying the upstream solution. To resolve this PR I could tidy up a simple matching scheme where we compute the mean outflow on the boundary and do a 1D advection for the boundary point, or relax to the external state if there is inflow. I think this shows how to use all parts of the new infrastructure, and is a satisfactory boundary condition for some cases. Would this be okay?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2032715863:77,test,test,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2032715863,2,['test'],['test']
Testability,"I've been trying to run [this code](https://github.com/CliMA/Oceananigans.jl/blob/00c98a72943cfaaa3b034770561b7ed6a408de40/benchmark/distributed_nonhydrostatic_model_mpi.jl), and I get an error depending on the number of points and ranks I choose in each direction. For example I noticed that when `Nx*Rx == Ny*Ry == Nz*Rz` the code runs successfully. But if that condition isn't satisfied (for example if I set `Nx=Ny=Nz=8`, `Rx=Rz=1` and `Ry=2`) I get an error like this:. ```; ERROR: ERROR: LoadError: LoadError: DimensionMismatch(DimensionMismatch(""arrays could not be broadcast to a common size; got a dimension wi""arrays could not be broadcast to a common size; got a dimension with lengths 8 andth lengths 8 and 4"") 4""); Stacktrace:; [1] ; Stacktrace:; [1] _bcs1_bcs1; @ ./; @ ./broadcast.jl:broadcast.jl:501 [inlined]; 501 [inlined]; [2] [2] _bcs(_bcs(shape::shape::Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, newshape::Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, newshape::Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}); @ Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}); @ Base.Broadcast ./broadcast.jl:Base.Broadcast ./broadcast.jl:495; [3]495; [3] broadcast_shape; @ broadcast_shape; @ ././broadcast.jl:broadcast.jl:489489 [inlined]; [inlined]; [4] [4] combine_axes combine_axes; @ ; @ ././broadcast.jl:broadcast.jl:484 [inlined]484 [inlined]. [5] [5] _axes_axes; @ ./; @ ./broadcast.jl:209broadcast.jl:209 [inlined]; [6] [inlined]; [6] axes; @ axes; @ ././broadcast.jl:207broadcast.jl:207 [inlined]; [inlined]; [7] [7] _unwrap_pa(bc::_unwrap_pa(bc::Base.Broadcast.Broadcasted{PencilArrays.PencilArrayStyle{3}, Nothing, typeof(/), Tuple{Base.Broadcast.Broadcasted{PencilArrays.PencilArrayStyle{3}, Nothing, typeof(-), Tuple{PencilArrays.PencilArrayBroadcastable{ComplexF64, 3, PencilArrays.PencilArray{ComplexF64, 3, Base.ReshapedArray{ComplexF64, 3, SubArray{ComplexF64, 1, Vector{ComplexF64}, Tuple{Base.OneTo{Int6",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2445:123,benchmark,benchmark,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2445,1,['benchmark'],['benchmark']
Testability,"I've figured out how to do the 3D pressure solve on a stretched grid following Chris' notes so I think we have all the pieces we need to implement vertically stretched grids, we just have to put it all together. I'm thinking about how to go about fully incorporating a vertically stretched grid, true finite volume operators, and the new FFT+tridiagonal Poisson solvers needed to solve for the pressure on a stretched grid. Seems like a good idea to split it up into steps with one pull request per step:; 1. Reverse the `k` index. Currently PR #462.; 2. Revise the `RegularCartesianGrid` struct so we're happy with it. Currently PR #464.; 3. Add finite volume operators as a separate piece of code. Technically they won't be tested in this PR and could have mistakes. Currently PR #283; 4. Nuke the old operators and start using the same set of finite volume operators for both `Oceananigans.Operators` and `closure_operators.jl`. This will test that the finite volume operators reduce down to the operators that currently work, but doesn't test them on a stretched grid.; 5. Implement a `VerticallyStretchedCartesianGrid`. Might have to iterate bit to figure out what we need, e.g. I think we'll want `ΔzC` to include the distance between the first cell center and the halo cell center, etc.; 6. Implement CPU and GPU pressure solvers for vertically stretched grids with tests. There will be two: one for horizontally periodic domains and another for channel models. I've figured most of this stuff out in Jupyter notebooks.; 7. Ensure that models with vertically stretched grids pass basic tests: e.g. incompressibility, tracer conservation, etc. This will test the finite volume operators.; 8. Run a model with a `VerticallyStretchedCartesianGrid` but with uniform grid spacing and make sure it produces the same numbers as a model with `RegularCartesianGrid`. This is a sanity check.; 9. Run additional tests for vertically stretched grids: e.g. vertical diffusion, internal wave, etc. This will ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/471:726,test,tested,726,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/471,1,['test'],['tested']
Testability,"I've gotten the transforms taken care of, but now the baroclinic_adjustment example fails with ; ```; $ julia --project=. baroclinic_adjustment.jl ; ERROR: LoadError: Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/uOYfN/src/GPUArraysCore.jl:103; [3] getindex; @ ~/.julia/packages/GPUArrays/dAUOE/src/host/indexing.jl:48 [inlined]; [4] scalar_getindex(::ROCArray{Float64, 3, AMDGPU.Runtime.Mem.HIPBuffer}, ::Int64, ::Vararg{Int64}); @ GPUArrays ~/.julia/packages/GPUArrays/dAUOE/src/host/indexing.jl:34; [5] _getindex; @ ~/.julia/packages/GPUArrays/dAUOE/src/host/indexing.jl:17 [inlined]; [6] getindex; @ ~/.julia/packages/GPUArrays/dAUOE/src/host/indexing.jl:15 [inlined]; [7] getindex; @ ./subarray.jl:288 [inlined]; [8] macro expansion; @ ./multidimensional.jl:917 [inlined]; [9] macro expansion; @ ./cartesian.jl:64 [inlined]; [10] macro expansion; @ ./multidimensional.jl:912 [inlined]; [11] _unsafe_getindex!; @ ./multidimensional.jl:925 [inlined]; [12] _unsafe_getindex(::IndexCartesian, ::SubArray{Float64, 3, ROCArray{Float64, 3, AMDGPU.Runtime.Mem.HIPBuffer}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}, ::Int64, ::Base.Slice{Base.OneTo{Int64}}, ::Base.Slice{Base.OneTo{Int64}}); @ Base ./multidimensional.jl:903; [13] _getindex; @ ./multidimensional.jl:889 [inlined]; [14] getindex(::SubArray{Float64, 3, ROCArray{Float64, 3, AMDGPU.Runtime.Mem.HIPBuffer}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}, ::Int64, ::Function, ::Function); @ Base ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1947171608:638,assert,assertscalar,638,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1947171608,1,['assert'],['assertscalar']
Testability,"I've had a go at fixing #2928 which doesn't seem to be as hard as I thought it would be using @glwagner's idea for `SumOfFields. So far I've only done the nonhydrostatic model kernels but it wasn't much work and looks like its worked. Using the same code as https://github.com/CliMA/Oceananigans.jl/issues/2928#issuecomment-1433398895 I now get:. https://user-images.githubusercontent.com/26657828/227528544-2f786e88-4243-40b6-850e-1992b1e2d8d9.mp4. Which I believe is what we were expecting. I wasn't sure where to put the `SumOfFields` struct so currently have it in the `Fields.jl` file. These changes also negate the need for `biogeochemistry_rhs` since we don't need the advection to be with the biogeochemical tendencies (I think we origionally did this so we didn't need to change all of the kernels, but not we have todo that anyway), it does prevent us from using different advection schemes for the `biogeochemical_drift_velocity`. To do:. - [x] Hydrostatic free surface kernels; - [x] Shallow water kernels; - [x] Tests; - [x] Benchmark; - [x] Fix particle advection",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027:1025,Test,Tests,1025,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027,2,"['Benchmark', 'Test']","['Benchmark', 'Tests']"
Testability,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:1759,test,test,1759,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242,2,['test'],['test']
Testability,"I've had a go at moving it to the `Simulation` and very happy to try different things until we find whatever is best. I've added a property to callbacks called substep which is by default false but if true then the callback is passed to `time_step!(model, \Delta t; callbacks)`, I made this an optional argument in case it is called elsewhere (like in some of the tests). . The callbacks then get passed on to `calculate_tendencies!` and are called after the other tendency calculations.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1286807555:364,test,tests,364,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1286807555,1,['test'],['tests']
Testability,"I've had a play implementing an NPD model in this framework now and think that the other way to define the source functions is preferential:; https://github.com/CliMA/Oceananigans.jl/blob/45971e4b113182958aac43357e2a4633510617db/test/test_biogeochemistry.jl#L33-L37. We could even go one step further and define a model like this:; ```julia; struct NPD; Kₙ :: Float64; m :: Float64; nitrif :: Float64; end. validate_biogeochemistry(::NPD, tracernames) = all([T ∈ tracernames for T in [:N, :P, :D]]). @inline function (model::NPD)(i, j, k, grid, ::Val{:N}, clock, fields); P = @inbounds fields.P[i, j, k]; N = @inbounds fields.N[i, j, k]; D = @inbounds fields.D[i, j, k]. return model.nitrif*D - P*N/(N+model.Kₙ) ; end. @inline function (model::NPD)(i, j, k, grid, ::Val{:P}, clock, fields); P = @inbounds fields.P[i, j, k]; N = @inbounds fields.N[i, j, k]; return P*N/(N+model.Kₙ) - model.m*P; end. @inline function (model::NPD)(i, j, k, grid, ::Val{:D}, clock, fields); P = @inbounds fields.P[i, j, k]; D = @inbounds fields.D[i, j, k]. return model.m*P - model.nitrif*D; end. @inline (model::NPD)(args...) = 0.0; ```; This negates the need to define a `get_biogeochemial_forcing` function, but you do have to define the zero function (last line) and I'm not sure how clear and usable this API is to most users?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1304900744:229,test,test,229,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1304900744,2,['test'],['test']
Testability,"I've noticed a few weeks ago that my scripts were much slower after the Julia 1.6 upgrade (which is preventing me from upgrading). I thought it was due to my Julia 1.6 installation but after some tests I now think it's an Oceananigans issue, specifically with the WENO5 scheme. I ran the MWE below in both Julia 1.5 (with Oceananigans version 0.57.1) and Julia 1.6 (tried several Oceananigans versions but specifically for this example I'm using Oceananigans version 0.58.5) using GPUs and the speed difference is pretty huge. The interesting part is that this difference only happens if I use WENO5 with a GPU. If I use the 2nd order centered scheme there is no significant difference in time (I haven't tried other schemes) and if I run the script on CPUs the time difference also appears to be small. Here's the script:. ```julia; using Oceananigans; using Oceananigans.Units; using CUDA: has_cuda; Nx, Ny, Nz = 128, 1600, 64. if has_cuda(); arch = GPU(); else; arch = CPU(); Nx = Int(Nx/4); Ny = Int(Ny/4); Nz = Int(Nz/4); end . topology = (Periodic, Bounded, Bounded); grid = RegularRectilinearGrid(size=(Nx, Ny, Nz),; x=(0, 200),; y=(0, 2000),; z=(-100, 0),; topology=topology); println(""\n"", grid, ""\n""). model = IncompressibleModel(architecture = arch,; grid = grid,; advection = WENO5(),; timestepper = :RungeKutta3,; tracers=nothing,; buoyancy=nothing,; closure=nothing,; ); println(""\n"", model, ""\n""). start_time = 1e-9*time_ns(); using Oceanostics: SingleLineProgressMessenger; simulation = Simulation(model, Δt=10seconds,; stop_time=10hours,; wall_time_limit=23.5hours,; iteration_interval=5,; progress=SingleLineProgressMessenger(LES=false, initial_wall_time_seconds=start_time),; stop_iteration=Inf,). println(""\n"", simulation,""\n"",); @info ""---> Starting run!\n""; run!(simulation, pickup=false); ```. The output for Julia 1.5:. ```julia; [ Info: ---> Starting run!; [ Info: [000.14%] i: 5, time: 50.000 seconds, Δt: 10 seconds, wall time: 1.447 minutes, adv CFL: 0.00e+00, diff CFL: 0.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764:196,test,tests,196,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764,1,['test'],['tests']
Testability,"I've noticed that Oceananigans is _much_ slower when using forcing functions. As an example, I set-up a simulation without any forcing functions and I noticed that in the first minute (wall time) of the running simulation I complete 3.5% of the whole simulation period. However, if I include forcing functions as; ```julia; bot_mask = GaussianMask{:z}(center=minimum(znodes(Face, grid)), width=grid.Lz/10); mom_sponge = Relaxation(rate=1/10, mask=bot_mask, target=0); forcing = (u=mom_sponge, v=mom_sponge, w=mom_sponge); ```; then in the first (wall time) minute of running I complete only 0.15% of the simulation. Basically around 20 times slower!. I of course expected a slowdown after including forcing functions, but not by this much. Is this normal behavior?. So far I ran my tests only on CPUs, but I've observed similar behaviors on GPUs.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827:782,test,tests,782,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827,1,['test'],['tests']
Testability,"I've ran several different simulations with this branch and a majority (but curiously not all of them) failed with the following error:. `ERROR: LoadError: CUDA error: an illegal memory access was encountered (code 700, ERROR_ILLEGAL_ADDRESS)`. An older version of this branch doesn't show this error and instead runs fine for all simulations. I couldn't figure out what happened yet (or why some runs failed but others didn't) so I couldn't create a MWE yet, but I thought I'd report this in case someone can understand this better than me. Here's a [more complete error log](https://pastebin.com/dCbBAgKp) (although it's only about 5% of the full log since the last few lines repeat many many times).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1179751296:572,log,log,572,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1179751296,2,['log'],['log']
Testability,"I've retried the tests a couple of times but I keep getting errors like this:. ```; Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to ""/data5/glwagner/.julia-16001/compiled/v1.10/Oceananigans/jl_Bzx0zi"".; ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-16001/packages/CUDA_Runtime_jll/dOYZJ/.pkg/platform_augmentation.jl"": No such file or directory; ```. Is something wrong with the servers at the moment?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3623#issuecomment-2179086381:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3623#issuecomment-2179086381,1,['test'],['tests']
Testability,"I've spent some time trying to diagnose the GPU issue and it's quite strange, when I copy the test line by line into a REPL it doesn't cause the memory issue and runs fine. After doing that (so everything has been compiled etc.) I then ran the test and the memory usage is fine until the last test, then crashes again. I will investigate more...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1247169843:94,test,test,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1247169843,3,['test'],['test']
Testability,"ILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/IterativeSolvers/rhYBz/src/cg.jl:140; [9] cg!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}; abstol::Float64, reltol::Float64, maxiter::Int64, log::Bool, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, verbose::Bool, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ IterativeSolvers ~/.julia-10861/packages/IterativeSolvers/rhYBz/src/cg.jl:224; ```. But in particular the nrm2 error we are having trouble reproducing locally.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:2242,log,log,2242,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526,1,['log'],['log']
Testability,"IZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; JULIA_NUM_THREADS = 24; JULIA_EDITOR = vim; GPU: NVIDIA TITAN V. CUDA toolkit 11.4, artifact installation; NVIDIA driver 470.86.0, for CUDA 11.4; CUDA driver 11.4. Libraries:; - CUBLAS: 11.5.4; - CURAND: 10.2.5; - CUFFT: 10.5.1; - CUSOLVER: 11.2.0; - CUSPARSE: 11.6.0; - CUPTI: 14.0.0; - NVML: 11.0.0+470.86; - CUDNN: 8.20.2 (for CUDA 11.4.0); - CUTENSOR: 1.3.0 (for CUDA 11.2.0). Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80. 1 device:; 0: NVIDIA TITAN V (sm_70, 11.484 GiB / 11.784 GiB available); nothing; ```. ## `main`. ```; Nonhydrostatic model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ CPU │ Float32 │ 32 │ 7.865 ms │ 8.157 ms │ 8.384 ms │ 9.923 ms │ 2.50 MiB │ 7004 │ 10 │; │ CPU │ Float32 │ 64 │ 13.237 ms │ 13.739 ms │ 14.162 ms │ 16.642 ms │ 3.20 MiB │ 12619 │ 10 │; │ CPU │ Float32 │ 128 │ 49.644 ms │ 53.133 ms │ 52.873 ms │ 56.953 ms │ 3.51 MiB │ 16344 │ 10 │; │ CPU │ Float32 │ 256 │ 338.545 ms │ 353.497 ms │ 353.048 ms │ 370.172 ms │ 3.81 MiB │ 35156 │ 10 │; │ CPU │ Float64 │ 32 │ 9.683 ms │ 10.028 ms │ 10.324 ms │ 12.479 ms │ 3.25 MiB │ 7003 │ 10 │; │ CPU │ Float64 │ 64 │ 14.979 ms │ 16.581 ms │ 17.035 ms │ 22.013 ms │ 4.07 MiB │ 12652 │ 10 │; │ CPU │ Float64 │ 128 │ 67.659 ms │ 68.736 ms │ 70.121 ms │ 84.622 ms │ 4.50 MiB │ 20205 │ 10 │; │ CPU │ Float64 │ 256 │ 513.071 ms │ 520.511 ms │ 520.758 ms │ 531.669 ms │ 5.70 MiB │ 85616 │ 10 │; │ GPU │ Float32 │ 32 │ 2.276 ms │ 2.324 ms │ 2.420 m",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2063#issuecomment-983874974:1013,benchmark,benchmarks,1013,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2063#issuecomment-983874974,1,['benchmark'],['benchmarks']
Testability,Ideally all the tests we run on the CPU should be replicated with GPU models. This will mean more work for the JuliaGPU GitLab CI pipeline.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/78:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/78,1,['test'],['tests']
Testability,"If I want to test out multi-region nonhydrostatic simulations on a GPU cluster with immersed boundaries, is my best bet to start from [validation/multi_region/multi_region_les.jl](https://github.com/CliMA/Oceananigans.jl/blob/ss/multi-region-nonhydrostatic/validation/multi_region/multi_region_les.jl) in this PR and just add something like ; ```julia; grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBottom(bump)); mrg_with_bump = MultiRegionGrid(grid_with_bump, partition=XPartition(2), devices=(0, 1)); ```; from the hydrostatic multi-region internal tide validation to include immersed boundaries?. Like @mmr0, this is pretty much what I've been waiting for to go all in on Oceananigans 💯",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961,1,['test'],['test']
Testability,"If all the tests pass then this PR is ready for its final review. Notes:. - I implemented the 3-input-modes functionality that @glwagner suggested and added tests to make sure it's working properly; - @francispoulin and I independently came up with the name `ConstantCoriolis` so I went with that name for now (as opposed to the a-bit-more-obscure `ConstantCartesianCoriolis`). Let me know if anyone objects and it should be easy to change it to something else.; - Changed the docs accordingly in model_setup/coriolis and physics/coriolis (also fixed a couple of typos), but let me know if there's somewhere else in the docs where this should be changed",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887917497:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887917497,2,['test'],['tests']
Testability,If anyone is interested in setting up an example or test for advection: you set up a 2D model with a square or Gaussian initial condition for temperature and a constant background velocity that advects the square around the domain. We can use it to test our numerical methods and any advection schemes we implement in the future. It would be something like this: https://www.youtube.com/watch?v=NkSVHpZV-xU,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/481:52,test,test,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/481,2,['test'],['test']
Testability,If it was related to the rewrite of the terms then shouldn't been affecting CPU regression test as well?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427118830:91,test,test,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427118830,1,['test'],['test']
Testability,"If people are okay with it, I'll merge as soon as tests pass and register a new patch version, since this is a bugfix.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2218143592:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2218143592,1,['test'],['tests']
Testability,"If someone can show me how to run a distributed test locally, that would really help in debugging this PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843443965:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843443965,1,['test'],['test']
Testability,If tests pass I'll merge this so it can be used with the hydrostatic model. Also don't want it to go stale again with operators being changed. I'll open a subsequent PR that makes the vertically stretched grid work on the GPU.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1348#issuecomment-782308591:3,test,tests,3,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1348#issuecomment-782308591,1,['test'],['tests']
Testability,If tests pass then I suggest we merge and leave further work for future PR (perhaps after OSM?),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2151#issuecomment-1013762427:3,test,tests,3,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2151#issuecomment-1013762427,1,['test'],['tests']
Testability,"If the slow down is the same for `DiscreteForcing` then the problem may really just be evaluating `exp`, sadly... You could try `@inline bottom_mask(k) = 1` to test...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875672252:160,test,test,160,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875672252,1,['test'],['test']
Testability,"If the solutions are the same, you can try removing the `fill_halo` to benchmark the implementation",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1108512590:71,benchmark,benchmark,71,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1108512590,1,['benchmark'],['benchmark']
Testability,"If the tests pass, I think this is ready to merge. Took the liberty to bump minor version since this is a breaking API change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2416#issuecomment-1095717685:7,test,tests,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2416#issuecomment-1095717685,1,['test'],['tests']
Testability,"If there's no objection, I propose merging this PR now and working on converting it to test `ImplicitFreeSurface` in a future PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1433#issuecomment-799817584:87,test,test,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1433#issuecomment-799817584,1,['test'],['test']
Testability,If this seem to be doing the job @tomchor and if others are happy I can write up few tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-950481812:85,test,tests,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-950481812,1,['test'],['tests']
Testability,"If we only fill one point into the halo regions, then we can keep the current advection scheme logic where we limit to second order advection on the boundary. Alternatively though, it seems that we could fill more points and then do ordinary advection. In that case though, we may need a new topology for open boundaries. Not sure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1965108951:95,log,logic,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1965108951,1,['log'],['logic']
Testability,"If you download data on the login node it should work, because DataDeps doesn't need to download if the file is present",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-928250982:28,log,login,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-928250982,1,['log'],['login']
Testability,"If you expected this to work, please open a thread on; │ https://discourse.julialang.org/c/domain/gpu; └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Pkg/src/Operations.jl:1075; ┌ Error: Error building `CuArrays`: ; │ Dependent package CUDAdrv.jl has not been built successfully; └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Pkg/src/Operations.jl:1075; ┌ Error: Error building `CUDAdrv`: ; └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Pkg/src/Operations.jl:1075; ┌ Error: Error building `CUDAdrv`: ; └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Pkg/src/Operations.jl:1075; Building SpecialFunctions → `~/.julia/packages/SpecialFunctions/fvheQ/deps/build.log`; Building LLVM ────────────→ `~/.julia/packages/LLVM/tg8MX/deps/build.log`; Building CUDAnative ──────→ `~/.julia/packages/CUDAnative/B210M/deps/build.log`; Dependent package CUDAdrv.jl has not been built successfully.; This is not a fatal error, but GPU functionality will be unavailable.; If you expected this to work, please open a thread on; https://discourse.julialang.org/c/domain/gpu; ┌ Error: Error building `CUDAnative`: ; └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Pkg/src/Operations.jl:1075; ┌ Error: Error building `CuArrays`: ; └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Pkg/src/Operations.jl:1075; ERROR: LoadError: LoadError: UndefVarError: CUBLAS not defined; Stacktrace:; [1] top-level scope at none:0 (repeats 2 times); [2] include at ./boot.jl:326 [inlined]; [3] include_relative(::Module, ::String) at ./loading.jl:1038; [4] include at ./sysimg.jl:29 [inlined]; [5] include(::String) at /home/travis/.julia/packages/CuArrays/qZCAt/src/CuArrays.jl:3; [6] top-level scope at none:0; [7] include at ./boot.jl:326 [inlined]; [8] include_relative(::Module, ::S",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/178:1738,log,log,1738,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/178,1,['log'],['log']
Testability,"If you regenerate the regression test data in serial, it's still a valid test of the distributed code. I think you can do that here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765286118:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765286118,2,['test'],['test']
Testability,"If you want to adopt this PR, that would be great. I would leave the boundary conditions outside the operator for the moment, then we can look at the influence of those in performance in another PR. To test the performance we should push PR #3596 that implements split explicit with fill halos at every substep. Using that implementation for split-explicit will make boundary conditions for barotropic variables quite trivial to implement, but probably extremely slow. However, we can use it as a benchmark",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3268#issuecomment-2353152298:202,test,test,202,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3268#issuecomment-2353152298,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"If you want to test that flux boundary conditions work correctly, you can test that budgets are correct like we do for IncompressibleModel in `test_dynamics.jl`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1441#issuecomment-794125642:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1441#issuecomment-794125642,2,['test'],['test']
Testability,Implement a test that simply inspects the halos for correctness.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3021:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3021,1,['test'],['test']
Testability,"Improved and simplified BinaryOperation with ""stubborn"" location inference",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1599:46,stub,stubborn,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1599,2,['stub'],['stubborn']
Testability,Improving tracer budget tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/942:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/942,1,['test'],['tests']
Testability,"In PR #590 I added a small/quick strong scaling test and @francispoulin calculated the scaling efficiency which wasn't super great:. ```; np efficiency; == ==========; 2 0.96; 4 0.71; 8 0.62; 16 0.56; ```. I guess to improve performance we should do some MPI profiling to find bottlenecks. Could also benchmark the distributed pressure solve and the halo filling separately to see how they scale as well. Might also make sense to benchmark scaling with `ShallowWaterModel` to see if it's an `IncompressibleModel` issue. Might need a pretty large domain to see good scaling with a 2D shallow water model?. @tomchor pointed out that the benchmark could be flawed. We should make sure everything is compiled. Could also try different sizes and a weak scaling benchmark in case the 1D/slab decomposition isn't helping. Maybe trying on a different machine too. Not sure if there's a ""proper"" setup for doing these scaling benchmarks. Bad scaling efficiency might also be a sign of missing barriers/waits?. @vchuravy We might ask for your help!",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1451:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1451,6,"['benchmark', 'test']","['benchmark', 'benchmarks', 'test']"
Testability,"In PR #715 (commit https://github.com/climate-machine/Oceananigans.jl/pull/715/commits/df22124af635970f9f46e9706c6b8694fcc921da) I skipped the kinetic energy multiary test as it was giving some weird CUDA error:. ```; Multiary computations [Float64, GPU]: Error During Test at /builds/JuliaGPU/Oceananigans-jl/test/test_abstract_operations.jl:399; Test threw exception; Expression: compute_kinetic_energy(model); CUDA error: device kernel image is invalid (code 200, ERROR_INVALID_IMAGE); ```. We should revisit this issue when we can. It's weird because the test used to work... Build log for more information: https://gitlab.com/JuliaGPU/Oceananigans-jl/-/jobs/510398403",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/732:167,test,test,167,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/732,6,"['Test', 'log', 'test']","['Test', 'log', 'test']"
Testability,"In `test_dynamics.jl` we test budgets for tracers and momentum variables:. https://github.com/CliMA/Oceananigans.jl/blob/0807552c94b87ec009564bf228ab85517e31dde0/test/test_dynamics.jl#L25-L41. However, the test is imperfect because 1) it does not test velocity components in non-periodic directions and 2) it uses a too-loose tolerance. ~~We can improve this test by tapering the initial condition for the field in question to zero for velocity fields in bounded directions.~~. EDIT: a little thought goes a long way: in `Bounded` directions, momentum is not conserved in general unless pressure at the boundaries is zero. Perhaps we should be happy just to test momentum conservation in periodic directions. This is still an important test that ensures the no flux condition is correctly implemented. Also, we can make the tolerance more strict. Finally, once this test works well, we can get rid of the `tracer_conserved_in_channel` test in `test_time_stepping.jl`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/942:25,test,test,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/942,9,['test'],['test']
Testability,"In `test_dynamics.jl`, an experiment is set up with inhomogeneous boundary conditions on temperature:. https://github.com/CliMA/Oceananigans.jl/blob/f83fce8c9b7f7fde41247be700d544720537dd35/test/test_dynamics.jl#L310-L312. while using `closure = nothing`:. https://github.com/CliMA/Oceananigans.jl/blob/f83fce8c9b7f7fde41247be700d544720537dd35/test/test_dynamics.jl#L314-L321. This is at best misleading --- with `closure = nothing`, boundary conditions are not enforced. It may also be innocuous though, because there is no diffusive flux _anywhere_ -- not only across boundaries. It may in fact make sense to throw a warning when using `closure = nothing` with non-default boundary conditions (""Boundary conditions are not enforced when `isnothing(closure)`"").",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1630:190,test,test,190,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1630,2,['test'],['test']
Testability,"In addition, this PR solves #213: boundary conditions in `z` can now be set by writing. ```julia; model.boundary_conditions.T.z.top = top_bc; model.boundary_conditions.T.z.bottom = bottom_bc; ```. for any field `T`. In a future PR: physics tests that verify the boundary bc is correct.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/237:240,test,tests,240,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/237,1,['test'],['tests']
Testability,"In case people don't know, @hennyg888 ran all the benchmark scrips and I beileve he has posted the results here. Thank you Henry!. I think the scripts have evolved in that some of the outputs are formatted different than what currently appears. I'm not sure if people want to change everything to the current benchmark scripts that we have?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877468836:50,benchmark,benchmark,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877468836,2,['benchmark'],['benchmark']
Testability,"In general, it can. The regression test is on a rectilinear grid",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2926#issuecomment-1431761715:35,test,test,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2926#issuecomment-1431761715,1,['test'],['test']
Testability,"In my last PR (#2335) I introduced tupled halo filling. . This PR required inferring the length of a Tuple of different element types on the GPU (which is not necessarily easy).; I found a hack to do it, but I was working in julia 1.7. Today, running a simulation with several different functional boundary conditions (in `discrete_form`) with julia 1.6, I found out that the compiler does not like my solution and does not infer the Tuple length (spitting out an `Invalid LLVM` error). This error is not there in julia-1.7. Unfortunately, I already merged my PR because I stupidly did not think to test all possible BC with julia-1.6. Now, to revert to a non-tupled halo filling which works across julia distribution it's a one-liner (in `field_tuples.jl`); ```; @inline fill_halo_regions_field_tuple!(full_fields, grid, args...; kwargs...) = ; fill_halo_regions!(extract_field_data.(full_fields), extract_field_bcs.(full_fields), grid, args...; kwargs...); ```; to; ```; @inline fill_halo_regions_field_tuple!(full_fields, grid, args...; kwargs...) = ; for field in full_fields; fill_halo_regions!(field, args...; kwargs...); end; end; ```. What should we do? We could change this line and leave the infrastructure intact for when we update to julia-1.7 (then we would't have tupled halo filling till then) or find a completely different solution (which will require a lot of restructuring); Probably we also need more tests for boundary conditions with different BC on different sides. I see that the tests that run on julia-1.6 do not return an error though. Do other people encounter the same error?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2358:599,test,test,599,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2358,3,['test'],"['test', 'tests']"
Testability,"In my last commit, I changed how boundary conditions are internally initialised as before we were passing the name of the classification so that we could catch functions and turn them into `Discrete/ContinuousBoundaryFunction`s, but this was causing a problem when I wanted the classification to also have properties (i.e. the matching scheme in this case). . Instead, I've changed it so we pass an instance of the classification (so e.g. we can pass `Open(SomeMatchingScheme())`) and this seems to work fine still. . The boundary conditions setup tests now pass locally and I will wait to see how the rest of the tests do, but is there any problem with this change otherwise @glwagner? This is also not an API change as it only affects how boundary conditions are initialised internally.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2125261069:548,test,tests,548,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2125261069,2,['test'],['tests']
Testability,"In order to build confidence and move forward with this PR, here's a comparison between the same simulations on `main` and on this branch. I'm using a channel set-up (`Bounded, Periodic, Bounded` topology ) to simulate a front with Smagorinsky closure, using only a surface buoyancy flux as forcing. . Here's how it looks on the main branch:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/47b7ffe1-5e59-4459-977d-db9ce2ee3644. The artifacts at the bottom are due to the fact that I'm using a stretched grid that gets pretty coarse as you move away from the surface. And here is the same simulation, but run on this branch:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/2fd8c124-4dd6-42c6-bef9-5c16bd55dd4e. which looks pretty much the same. In addition, every averaged quantity that I've tested looks almost exactly the same between both branches. Here's $w'b'$ as an example:. ![image](https://github.com/CliMA/Oceananigans.jl/assets/13205162/152676d6-b099-4323-88a6-b065c4abcc5f). Also I should mention that I've been using this branch for a few weeks, and so far I haven't noticed anything different from the main or suspicious in any way. @glwagner with this comparison (and the many others I've run for my own research), plus the regression tests being off just by approximately `eps()`, plus all the examples in docs looking the same, I personally feel pretty confident that this branch is working as intended. Please let me know if there's any other tests that need to be done before we move forward here!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1586355708:811,test,tested,811,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1586355708,3,['test'],"['tested', 'tests']"
Testability,In response to #3040 I make sure that some of the grid tests also happen on GPU.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054,1,['test'],['tests']
Testability,"In shallow water models we don't usually talk about buoyancy but you could I suppose. Since density is what appears in the momentum equation, that's what's typically used. I believe Greg was saying buoyancy since that's the variable we typically use in the other models, but I could be wrong. Yes, you can have outcroppings at the surface. This can even happen in a one layer case. Imagine starting out with a one layer reduced gravity shallow water model that is in the shape of an inverted U. When perturbed, the interface will move and then you have to deal with height going to 0 and also becoming positive. . There are positive preserving schemes for WENO that we can code up and test with our current model to better understand how it works before moving to multiple layers. Again, very happy to talk about this too.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1115559159:685,test,test,685,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1115559159,1,['test'],['test']
Testability,"In terms of the validation experimens, from what I understand, they are created when someone does something new and the script is a proof by example, or sorts. Since they are never run in tests they do become stale, and a bunch no longer run, as has been pointed out. The same can be said for benchmarks. . Examples are great because they are continually tested and therefore updated as needed. There are a bunch, but still, I don't think as much is covered in the examples as we see in validation. It would be nice for people to see whats in validation, but if they don't work then that causes other problems. I don't claim there is a simple solution but I'm glad we're talking about it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872510039:188,test,tests,188,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872510039,6,"['benchmark', 'test']","['benchmarks', 'tested', 'tests']"
Testability,"In the example below, the model crashes reporting a GPU illegal memory access error. The CFL number is intentionally set to a large value, under which the model will encounter numerical instability. I expect this model should abort itself when NANs appear instead of crashing due to a memory illegal access error. Besides, this only happens when I use Lagrangian particles. If not, the model will terminate by itself as I expect. I have also verified that the model does not crash when the CFL number is small. ``` Julia; using Oceananigans. const Lx = 1.0; const Nx = 50; const Δx = Lx / Nx; const max_velocity = 1.0; const cfl = 10.0; const Δt = cfl * Δx / max_velocity. function initial_u(x::R, y::R, z::R) where {R<:Real}; return (max_velocity / Lx) * y; end. grid = RectilinearGrid(; GPU(),; size = (Nx, Nx, Nx),; x = (0.0, Lx),; y = (0.0, Lx),; z = (0.0, Lx),; topology = (Periodic, Bounded, Bounded); ). arch_array = Oceananigans.Architectures.array_type(GPU()){Float64}; n_particles = 1000. xs = convert(arch_array, zeros((n_particles, ))); ys = convert(arch_array, LinRange(0.0, Lx, n_particles)); zs = convert(arch_array, zeros((n_particles, ))). particles = LagrangianParticles(x = xs, y = ys, z = zs). model = NonhydrostaticModel(;; grid,; particles = particles,; ). set!(model, u = initial_u). simulation = Simulation(model; Δt = Δt, stop_iteration = 200). run!(simulation); ```. The [output.log](https://github.com/CliMA/Oceananigans.jl/files/12835930/output.log) is uploaded as a file. Test environment:; - Julia version: v1.9.3; - Oceananigans: v0.89.0; - Tested on Ubuntu 20.04.6 LTS with CUDA 12.0 and MIT Satori with CUDA 11.4. This example tries to reproduce some of my simulations for convection. In these simulation, I used strong heating, and therefore I expect some of them to crash. However, I did not expect that they would trigger GPU illegal memory access errors. This issue is probably related to #3267.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3320:1405,log,log,1405,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3320,4,"['Test', 'log']","['Test', 'Tested', 'log']"
Testability,"In the latest commit I added in the shallow water strong and weak and GPU scaling results. I also added in the nonhydrostatic CPU vs GPU results.; I feel like that certain graphs, such as the time graphs for the CPU vs GPU benchmarks may be unnecessary and can be removed, if anyone feels the same way then I'll go ahead and do it.; Other benchmarks yet to be added include the nonhydrostatic strong scaling results and the multithreading results. I am not sure if we think that the multithreading results are good enough to show yet. I personally think that there's room for improvement but current efficiencies are good enough to show already. Shown below are the current multithreading scaling efficiencies:; ```; Shallow water model weak multithreading scaling speedup; ┌───────────────┬─────────┬──────────┬────────────┬─────────┬─────────┐; │ size │ threads │ slowdown │ efficiency │ memory │ allocs │; ├───────────────┼─────────┼──────────┼────────────┼─────────┼─────────┤; │ (8192, 512) │ 1 │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ (8192, 1024) │ 2 │ 2.04972 │ 0.487872 │ 13.2156 │ 464.601 │; │ (8192, 2048) │ 4 │ 1.63302 │ 0.612363 │ 9.95278 │ 327.951 │; │ (8192, 4096) │ 8 │ 1.62507 │ 0.615359 │ 11.9706 │ 384.754 │; │ (8192, 8192) │ 16 │ 1.74747 │ 0.572257 │ 12.755 │ 372.71 │; │ (8192, 16384) │ 32 │ 2.10486 │ 0.47509 │ 16.846 │ 446.101 │; └───────────────┴─────────┴──────────┴────────────┴─────────┴─────────┘. Nonhydrostatic Strong Scaling Multithreading speedup; ┌──────┬─────────┬──────────┬────────────┬─────────┬─────────┐; │ size │ threads │ slowdown │ efficiency │ memory │ allocs │; ├──────┼─────────┼──────────┼────────────┼─────────┼─────────┤; │ 256 │ 1 │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ 256 │ 2 │ 0.992966 │ 0.503542 │ 4.14014 │ 152.109 │; │ 256 │ 4 │ 0.501089 │ 0.498913 │ 2.17724 │ 50.2532 │; │ 256 │ 8 │ 0.324366 │ 0.385367 │ 1.94899 │ 29.191 │; │ 256 │ 16 │ 0.244788 │ 0.255323 │ 2.12262 │ 18.2106 │; │ 256 │ 32 │ 0.263339 │ 0.118668 │ 2.87624 │ 16.3167 │; └──────┴─────────┴──────────┴─",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1930#issuecomment-900770693:223,benchmark,benchmarks,223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1930#issuecomment-900770693,2,['benchmark'],['benchmarks']
Testability,"In the spirit of getting closer to continuous delivery (see https://www.oxinabox.net/2019/09/28/Continuous-Delivery-For-Julia-Packages.html#what-if-i-dont-want-to-release-right-now--dev-versions) we should probably tag and release v0.43.0 soon since PRs #1070, #1057, and #1061 + couple of bug fix PRs would be useful to have. Release notes:. * Fixes a bug in `TwoDimensionalLeith` (PR #1073, issue #1034). Previously tests were being skipped due to extreme slowness. Now we run tests on GPU (but not CPU, where the closure is much slower to compile). * Rewrites the interface for ""scheduling"" output and diagnostics (PR #1070). Previously output and diagnostics were usually scheduled by specifying either `time_interval` or `iteration_interval` kwargs in the constrcutor for the object in question. Now, the relevant kwarg is called `schedule` and takes a callable `AbstractSchedule` object (or any user-defined function `func` that returns `true` or `false` depending on the single argument `func(model)`). This design is more flexible and extensible, and also simplifies underlying code. Four schedules are provided:. - `TimeInterval(interval)`; - `IterationInterval(interval)`; - `WallTimeInterval(interval)`; - `AveragedTimeInterval(interval; window=interval, stride=1)` (for time-averaging output). Breaking changes:. * Output writers and diagnostics no longer have the keyword arguments `time_interval` or `iteration_interval`. The most commonly-used features that are affected are `JLD2OutputWriter`, `NetCDFOutputWriter`, and `Checkpointer`. `JLD2OutputWriter` and `NetCDFOutputWriter` no longer have the kwargs `time_averaging_window` and `time_averaging_stride`. The specific syntax changes are:. * `time_interval=T` becomes `schedule=TimeInterval(T)`; * `iteration_interval=I` becomes `schedule=IterationInterval(I)`; * `time_interval=T, time_averaging_window=W` becomes `schedule=AveragedTimeInterval(T, window=W)`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1077:418,test,tests,418,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1077,2,['test'],['tests']
Testability,"In this PR I'm exploring the possibility of adding methods for `diffusive_flux_x`, and `viscous_flux_ux` (along with other directions) for tuples. This is needed when reconstructing tracer variance and kinetic energy dissipation rates for tuples in a conservative formulation and, specifically, it's used in Oceanostics for that end (see https://github.com/tomchor/Oceanostics.jl/pull/112). At the moment these are [defined in Oceanostics](https://github.com/tomchor/Oceanostics.jl/blob/1264b4d61e00ab2fb2fd648d489e5fcd329a135c/src/FlowDiagnostics.jl#L347-L355), but as @glwagner mentioned [here](https://github.com/tomchor/Oceanostics.jl/pull/112#issuecomment-1479761310), this isn't ideal since in the future the behavior of the relevant functions may change in Oceananigans and subsequently this calculation will break in Oceanostics. The downside of defining these methods here is that it adds to the testing infrastructure, but I think the way I currently implemented the tests it doesn't contribute too negatively to this. I'm also proposing removing the fallback method here: https://github.com/CliMA/Oceananigans.jl/blob/200f0622278fcfa583da0119e9696048b334146f/src/TurbulenceClosures/abstract_scalar_diffusivity_closure.jl#L154-L169. The reason is that I think these general fallback methods cause for hassle than they solve for less experienced Oceananigans developers (myself very much included) by silently returning something physically reasonable (zero in this case) for virtually any combination of arguments, which can be misleading in a debugging process. But I'm curious to get other people's opinion on this.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3057:905,test,testing,905,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3057,2,['test'],"['testing', 'tests']"
Testability,"In this case if we see convergence with decreasing time-step (spatial resolution isn't relevant for these dynamics, which are at the grid scale and therefore not physical) then I suppose that would be an indication the issue is due to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could div",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:494,test,test,494,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423,2,['test'],['test']
Testability,Include all convergence test plots in documentation,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/879:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/879,1,['test'],['test']
Testability,Include benchmarks of the shallow water model on CPUs vs GPUs.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1508:8,benchmark,benchmarks,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1508,1,['benchmark'],['benchmarks']
Testability,Include vector rotation in other test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3881:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3881,1,['test'],['test']
Testability,Incompressibility and pressure projection step test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/673:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/673,1,['test'],['test']
Testability,Incompressibility test.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/226:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/226,1,['test'],['test']
Testability,Incorporate performance benchmarks into tests and CI,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/684:24,benchmark,benchmarks,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/684,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,Increase tolerance for tracer conservation test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/400:43,test,test,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/400,1,['test'],['test']
Testability,Increase tolerance in implicit free surface solver tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1686:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1686,1,['test'],['tests']
Testability,Increase tolerance on `FieldTimeSeries` reduction tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1688:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1688,1,['test'],['tests']
Testability,Indeed those are some great speedups! Doesn't even look like the GPU is saturated yet. > Do you think we need to get `MultiGPU` working or try and merge what we have with `MultiCPU` plus some tests? I'm tempted to merge sooner rather than later since already this is a big addition. It does seem to work :P But maybe it just needs some profiling to understand where the bottlenecks are. I guess we need to get some CUDA-aware MPI on Buildkite to test `MultiGPU` so maybe we don't have to explicitly test it just yet in this PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799598593:192,test,tests,192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799598593,3,['test'],"['test', 'tests']"
Testability,"Info(12480, ""./src/BoundaryConditions/apply_no_penetration_bcs.jl.32885.mem"", 20); CoverageTools.MallocInfo(12480, ""./src/BoundaryConditions/apply_no_penetration_bcs.jl.32885.mem"", 38); CoverageTools.MallocInfo(12800, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 45) ; CoverageTools.MallocInfo(12800, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 49) ; CoverageTools.MallocInfo(16640, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 52) ; CoverageTools.MallocInfo(16640, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 53) ; CoverageTools.MallocInfo(16640, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 56) ; CoverageTools.MallocInfo(16640, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 57) ; CoverageTools.MallocInfo(44000, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 26) ; CoverageTools.MallocInfo(44000, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 27) ; CoverageTools.MallocInfo(44000, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 28) ; CoverageTools.MallocInfo(44000, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 29) ; CoverageTools.MallocInfo(44000, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 30) ; CoverageTools.MallocInfo(46400, ""./src/BoundaryConditions/apply_flux_bcs.jl.32885.mem"", 17) ; CoverageTools.MallocInfo(46400, ""./src/BoundaryConditions/apply_flux_bcs.jl.32885.mem"", 30) ; CoverageTools.MallocInfo(56320, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 20) ; CoverageTools.MallocInfo(95040, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 25) ; CoverageTools.MallocInfo(235751, ""./benchmark/benchmark_static_ocean.jl.32885.mem"", 55) ; CoverageTools.MallocInfo(249600, ""./src/BoundaryConditions/fill_halo_regions.jl.32885.mem"", 70) ; CoverageTools.MallocInfo(739712, ""./benchmark/benchmark_utils.jl.32885.mem"", 20) ; CoverageTools.MallocInfo(1686022, ""./benchmark/benchmark_static_ocean.jl.32885.mem"", 50) ; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/685:3839,benchmark,benchmark,3839,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/685,3,['benchmark'],['benchmark']
Testability,Initializing environment on Buildkite can be a testing bottleneck,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1056:47,test,testing,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1056,1,['test'],['testing']
Testability,Inspired by @Lichriszz and their problem in [#1362](https://github.com/CliMA/Oceananigans.jl/discussions/1362#discussioncomment-374286) I started to make an example of two dimensional turbulence using the shallow water model. At the moment the results are not necessarily worth looking at but I wonder if people could look at the code [here](https://github.com/CliMA/Oceananigans.jl/blob/fjp/two-dimensional-turbulence-shallow-water-example/examples/two_dimensional_turbulence_shallow_water.jl) and say whether the set up is what we want?. A few issues that I have come cross are the following:. - [x] Use the time stepping wizard for numerical stability; - [x] Reduce the number of import statements; - [ ] Plot the vorticity and the divergence fields; - [x] Pick the parameters to get nice results. What is a good a reference for a planar geometry?; - [ ] Should test on GPU; - [ ] Should test with higher resolution. One possible paper is [Polvani et al (1994)](https://aip.scitation.org/doi/pdf/10.1063/1.166002),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1365:865,test,test,865,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1365,2,['test'],['test']
Testability,"Inspired by the recent activity in #1770, @hennyg888 and I both tried running `benchmark_incompressible_model.jl` with advection set to `WENO5` to learn what the speed up is for this advection scheme from CPUS to GPUS. In the first resolution, `N=32`, it runs on a `CPU` without any problem. However, when it starts to run on a `GPU` there is an error, which is copied below. . When I copy the lines directly into `REPL` to define the grid, model and do one time step, I don't get an error. Any ideas what might be going wrong in this benchmarking example?. ```; [2021/06/28 09:40:32.366] INFO Benchmarking 1/16: (CPU, Float32, 32)...; [2021/06/28 09:40:38.930] WARN Inflating model grid halo size to (3, 3, 3) and recreating grid. The model grid will be different from the input grid. To avoid this warning, pass halo=(3, 3, 3) when constructing the grid. -@-> /home/fpoulin/software/New_Oceananigans/Oceananigans.jl/src/Grids/automatic_halo_sizing.jl:41; [2021/06/28 09:42:28.384] INFO Benchmarking 2/16: (GPU, Float32, 32)...; [2021/06/28 09:42:32.299] WARN Inflating model grid halo size to (3, 3, 3) and recreating grid. The model grid will be different from the input grid. To avoid this warning, pass halo=(3, 3, 3) when constructing the grid. -@-> /home/fpoulin/software/New_Oceananigans/Oceananigans.jl/src/Grids/automatic_halo_sizing.jl:41; ERROR: LoadError: InvalidIRError: compiling kernel gpu_calculate_Gw!(Cassette.Context{nametype(CUDACtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(32, 32, 32)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(2, 2, 32)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}}, Nothing, KernelAbstractions.var""##PassType#257"", Nothing, Cassette.DisableHooks}, typeof(Oceananigans.Models.IncompressibleModels.gpu_calculate_Gw!), OffsetArrays.OffsetArray{Float32, 3, CuDeviceArray{Float32, 3, 1}}",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780:535,benchmark,benchmarking,535,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780,2,"['Benchmark', 'benchmark']","['Benchmarking', 'benchmarking']"
Testability,"Instructions to adapt the code to `MultiRegion` from a Slack conversation with @simone-silvestri:. If you want to adapt your script to multiregion you have to:; - define a multiregion grid with: `grid = MultiRegionGrid(grid, partition = XPartition(n_gpus_you_want_to_use), devices = n_gpus_you_want_to_use)` . The multiregion grid supersedes the immersed boundary grid, i.e. if you are using an immersed boundary grid then `grid = MultiRegionGrid(ibg; kwargs...)` , not the other way around.; - if you are using any array for forcing or boundary condition, you have to adapt it to the multiregion paradigm as follows: `using Oceananigans.MultiRegion: multi_region_object_from_array; my_adapted_array = multi_region_object_from_array(my_array, grid)`. MultiRegion works only on single node multi GPU, so all the GPUs should be accessible from a single process in the node. You can check the number of GPUs available by logging in a node and typing nvidia-smi , if you want to split your grid on specific devices (let’s say GPU 0 and 3), you can pass `devices = (0, 3)` to the `MultiRegionGrid` constructor. There is another thing that you have to take care of: the pressure solve is performed on one GPU only so both the storage and source term (a field of complex values of the size of the full grid) reside on 1 GPU only (usually the one corresponding to the last region). This means that if your grid is 100M points, 2.98 GB will have to be reserved for the solver’s auxiliary fields; ```julia; julia> sizeof(complex(zeros(Int(100e6)))) / 1024 / 1024 / 1024 * 2; 2.9802322387695312; ```; So make sure you have that space available. (When I have time I ll try to find a solution to run truly parallel pressure solvers, for both nonhydrostatic and hydrostatic models). In terms of outputs, we make use of `reconstruct_global_field` , a function used to reconstruct a global field from a `MultiRegionField` on the CPU. It is used by the output writers to spit out the full field. It is a slow procedure",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1301096875:918,log,logging,918,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1301096875,1,['log'],['logging']
Testability,"Int64}, yF::UnitRange{Int64}, zC::UnitRange{Int64}, zF::UnitRange{Int64}) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/OutputWriters/netcdf_output_writer.jl:176; [5] run_thermal_bubble_netcdf_tests(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:29; [6] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:526 [inlined]; [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [8] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:525 [inlined]; [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [10] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:521; [11] include(::String) at ./client.jl:439; [12] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:94; [13] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [14] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:76; [15] include(::String) at ./client.jl:439; [16] top-level scope at none:6; [17] eval(::Module, ::Any) at ./boot.jl:331; [18] exec_options(::Base.JLOptions) at ./client.jl:264; [19] _start() at ./client.jl:484; ; i: 0001, t: 1.000 s, Δt: 1.100 s, wmax = 2.7e-04 ms⁻¹, wall time: 18.164 s; progress: 0.0 %, i: 0001, t: 1.000 s, Δt: 1.100 s, wall time: 11.110 s; N² = ((Rᵈ * f) / Lz) ^ 2 = 0.0004; α = sqrt(N²) / (f * σᵇ) = 0.02314814814814815; i: 0010, t: 3.667 min, Δt: 22.000 s, umax = (2.4e-01, 2.3e-01, 1.9e-05) ms⁻¹, wall time: 12.877 s; Simulating stratified plane Couette flow. N : 16, 16, 8; L : 12.6, 6.28, 2; Re : 4250.000; Ri : 0.010; Pr : 0.700; ν : 0.000235; κ : 0.000336; U_wall : 1.000; Θ_wall : 0.010. [1000.00%] i: 1, t: 1.00e-04, umax: (1.59",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:102551,test,test,102551,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,"Interesting, thanks for those details! That's odd that there are changes in memory allocation associated with building diagnostics. I don't think there's been changes to `Field` between 0.77.5 and 0.78.0. @navidcy might be able to say more. I think 0.78.0 only upgraded the tests to julia 1.8?. I'm also curious why the diagnostics consume so much memory. Are you producing a lot of 3D time averages (which can't be constructed in post-processing?) We've attempted to design the code so that reductions can be performed with minimal memory allocation. 3D diagnostics can simply be calculated from snapshots of the model state, so there's no need to allocate memory (assuming that static memory greatly exceeds GPU memory, this would be preferred). Are we missing a feature to help reduce memory requirements of diagnostics perhaps?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299561134:274,test,tests,274,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299561134,2,['test'],['tests']
Testability,Interesting. I noticed that there were some unnecessary test dependencies and removed those. That seems to have helped.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2362562042:56,test,test,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2362562042,1,['test'],['test']
Testability,Interesting. No I didn't use the test env. I run in the repl...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409842:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409842,1,['test'],['test']
Testability,"Interestingly now an exception is thrown instead of an `ERROR_ILLEGAL_ADDRESS` error, which is better as the error crashes CUDA and requires a Julia restart. It still returns the `model` and I can time step it, but the exception is thrown each time step. ```julia; ERROR: a type error was thrown during kernel execution on thread (225, 1, 1) in block (10, 1, 1).; Stacktrace:; [1] κuᶜᶜᶠ at /home/alir/atdepth/Oceananigans.jl/src/TurbulenceClosures/turbulence_closure_implementations/TKEBasedVerticalDiffusivities/catke_vertical_diffusivity.jl:285; [2] macro expansion at /home/alir/atdepth/Oceananigans.jl/src/TurbulenceClosures/turbulence_closure_implementations/TKEBasedVerticalDiffusivities/catke_vertical_diffusivity.jl:264; [3] gpu_compute_CATKE_diffusivities! at /home/alir/.julia/packages/KernelAbstractions/491pi/src/macros.jl:95; [4] gpu_compute_CATKE_diffusivities! at ./none:0. ┌ Error: Exception while generating log record in module Oceananigans.TurbulenceClosures.TKEBasedVerticalDiffusivities at /home/alir/atdepth/Oceananigans.jl/src/TurbulenceClosures/turbulence_closure_implementations/TKEBasedVerticalDiffusivities/catke_vertical_diffusivity.jl:230; │ exception =; │ KernelException: exception thrown during kernel execution on device NVIDIA GeForce RTX 4090; │ Stacktrace:; │ [1] check_exceptions(); │ @ CUDA ~/.julia/packages/CUDA/2kjXI/src/compiler/exceptions.jl:39; │ [2] synchronize(stream::CUDA.CuStream; blocking::Bool, spin::Bool); │ @ CUDA ~/.julia/packages/CUDA/2kjXI/lib/cudadrv/synchronization.jl:207; │ [3] synchronize (repeats 2 times); │ @ ~/.julia/packages/CUDA/2kjXI/lib/cudadrv/synchronization.jl:194 [inlined]; │ [4] (::CUDA.var""#1125#1126""{Float64, CUDA.CuArray{Float64, 1, CUDA.DeviceMemory}, Int64, Vector{Float64}, Int64, Int64})(); │ @ CUDA ~/.julia/packages/CUDA/2kjXI/src/array.jl:535; │ [5] #context!#990; │ @ ~/.julia/packages/CUDA/2kjXI/lib/cudadrv/state.jl:168 [inlined]; │ [6] context!; │ @ ~/.julia/packages/CUDA/2kjXI/lib/cudadrv/state.jl:163 [inlin",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2441915837:925,log,log,925,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2441915837,1,['log'],['log']
Testability,Interestingly this breaks the distributed tests!; https://buildkite.com/clima/oceananigans-distributed/builds/1218#018da64e-30be-4ecb-9b10-32cdb3daa89c,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3467#issuecomment-1943250342:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3467#issuecomment-1943250342,1,['test'],['tests']
Testability,"Interestingly, all the tests still pass when we explicitly time-step w instead of recompute it from continuity. So still not clear whether we need to do the recomputation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-518876660:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-518876660,1,['test'],['tests']
Testability,Introduce `Flat` to shallow water benchmarks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1735:34,benchmark,benchmarks,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1735,1,['benchmark'],['benchmarks']
Testability,Is . https://github.com/CliMA/Oceananigans.jl/blob/c5b030908793d9b49faba6648980abb1932638fc/src/TurbulenceClosures/discrete_diffusion_function.jl#L102. correct?. If it should be `DiscreteBoundaryFunction` then we need to import it. Or should this be `DiscreteDiffusionFunction`? The latter makes the test pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1868223245:300,test,test,300,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1868223245,1,['test'],['test']
Testability,Is `nothing` missing from here? Or something else?. https://github.com/CliMA/Oceananigans.jl/blob/4f80c386930a5b703f753bafd4af76419dbbcac9/test/test_matrix_poisson_solver.jl#L70. cc @simone-silvestri,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2135:139,test,test,139,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2135,1,['test'],['test']
Testability,Is anyone able to restart the tests to see if that fixes the problem?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1410489678:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1410489678,1,['test'],['tests']
Testability,"Is it okay for me to go through the tests and update them? For example:; https://buildkite.com/clima/oceananigans/builds/15867#018fe2f6-efde-43c3-affa-cb2231a0fb37/39-712. asserts that the open boundary point should be set to zero after a `fill_halo_regions!` but we now expect that it is not touched, so should stay at the value set by the broadcast. Alternatively, we could add a flag to `fill_halo_regions!` to fill boundary normal velocities when it is called manually? i.e. `fill_halo_regions!(field, args...; include_boundary_normal_velocities = false)` and then call `fill_boundary_normal_velocities!` if it is set to true?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2147328364:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2147328364,2,"['assert', 'test']","['asserts', 'tests']"
Testability,"Is it so hard to update the validation scripts too? Hopefully that should be easy and it doesn't really matter what you do first. We use the validation scripts to test the user interface. You'll be changing them no matter what, in either case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915263357:163,test,test,163,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915263357,1,['test'],['test']
Testability,"Is that result for `u` obviously incorrect? It looks ok from the plot but maybe I'm not inferring enough detail from the setup. A quantitative test might be better (we can certainly try that). The averaging window is ""behind"" the output time, so you have to be careful about how you interpret the output.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817993350:143,test,test,143,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817993350,1,['test'],['test']
Testability,Is the `SmagorinskyLilly` tested? If so I'm happy to approve this PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1539369815:26,test,tested,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1539369815,1,['test'],['tested']
Testability,Is the fourth-order advection tested?; https://github.com/CliMA/Oceananigans.jl/blob/master/src/Advection/centered_fourth_order.jl. I tried using it in an example I'm drafting and code blew up. With the same time-step but the default advection scheme everything seemed fine... That doesn't necessarily mean that there is a problem but I was a bit alarmed I must say..,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/925:30,test,tested,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/925,1,['test'],['tested']
Testability,Is the new feature tested? If so I'm very happy to approve... I couldn't see that from the File changes but if you can point me to it it'd be nice thanks!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287091544:19,test,tested,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287091544,1,['test'],['tested']
Testability,Is there a reason that `test_matrix_poisson_solver.jl` defines its own function for computing the laplacian:. https://github.com/CliMA/Oceananigans.jl/blob/95206ae73e10460beebb2ce9d5fc9945523e5724/test/test_matrix_poisson_solver.jl#L8-L15. instead of using the one in `utils_for_runtests.jl`. https://github.com/CliMA/Oceananigans.jl/blob/95206ae73e10460beebb2ce9d5fc9945523e5724/test/utils_for_runtests.jl#L60-L77. I can only note an extra `fill_halo_regions!(ϕ)` line. cc @simone-silvestri,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2638:197,test,test,197,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2638,2,['test'],['test']
Testability,Is there a test or example that saves output of the free surface? Perhaps that will sort out your concern at 1. above @simone-silvestri?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1258288022:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1258288022,1,['test'],['test']
Testability,Is there a way for me to cancel tests so they don't have to run every commit?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239643533:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239643533,1,['test'],['tests']
Testability,Is there currently a problem with the GPU tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1496451340:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1496451340,1,['test'],['tests']
Testability,"Is there more to the log? Might be useful if you can paste the whole log. Sometimes the `makedocs` failure is due to some warning much earlier in the build log, especially with `strict = true`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1455#issuecomment-796844407:21,log,log,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1455#issuecomment-796844407,3,['log'],['log']
Testability,"Is this correct in lines 274=275 of `enzyme_test`?; ```; x = y = (0, 2π); z = 1; ```; When I run it locally it returns this error:; ```; Got exception outside of a @test; ArgumentError: z length(1) must be 2.; ```. I found a few possible errors locally and can push.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438697101:165,test,test,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438697101,1,['test'],['test']
Testability,Is this ready to merge if tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3766#issuecomment-2336879714:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3766#issuecomment-2336879714,1,['test'],['tests']
Testability,Isn't this because of the implicit solve? What grid/model combination are you using?. You can try testing again using a matrix solver for the non immersed model (if you are using the hydrostatic model). The timings should be similar.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1083973888:98,test,testing,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1083973888,1,['test'],['testing']
Testability,Issues like the one fixed by #1755 suggest that the correctness or geometric consistency of `VerticallyStretchedRectilinearGrid` is not tested.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1756:136,test,tested,136,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1756,1,['test'],['tested']
Testability,It agrees _but_ tests fail on buildkite which is so confusing,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441917982:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441917982,1,['test'],['tests']
Testability,"It could be nice to have a type for managing time stepping --- eg, `Simulation` --- rather than requiring the writing of explicit loops as in . https://github.com/climate-machine/Oceananigans.jl/blob/4b7e5bced1019b1a6804d3797cfe0ed41fda4a51/examples/ocean_wind_mixing_and_convection.jl#L190. `Simulation` could look like. ```julia; struct Simulation; model; Δt; simulation_stop_time; wall_time_limit; simulation_stop_iteration; progress; end; ```. Or something along those lines. The field `progress` could either be a function or callable object, or tuple / list of functions or callable objects. The field `Δt` could either be a constant time-step or a `TimeStepWizard`. We might also need a new type called `ProgressMessage` for managing logging / emitting progress messages for simulations. Then we can give it a `frequency` (and `interval`) of emission and support some other nice behaviors like a default format and auto-emission of diagnostic / monitoring results. xref: #432 #431",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/447:741,log,logging,741,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/447,1,['log'],['logging']
Testability,"It doesn't change any code so it's not stale yet. What we need to do though is figure out how to upload data to `OceananigansArtifacts.jl`, and then download it into the test using `DataDeps`. @ali-ramadhan groks `DataDeps.jl` but I haven't yet.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1373#issuecomment-849929096:170,test,test,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1373#issuecomment-849929096,1,['test'],['test']
Testability,It failed again so I ran it on our cluster which errored in the same way just saying `killed`. It's failing on my new test and I think I've probably not implemented the `calculate_particle_tendency_contributions!` in a GPU friendly way so will try and resolve this tomorrow. . Edit: as I closed the terminal some error about the GPU node being out of memory flashed up which may be relevant.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1237427854:118,test,test,118,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1237427854,1,['test'],['test']
Testability,"It is indeed equivalent in terms of results: when testing tracer advection with a fixed velocity it looks like the profiles are identical for this timestepper in the HydrostaticModel and a NonhydrostaticModel (so probably it is good to have just one rk3 timestepper type). There is some difference in the nomenclature which I think allows a better understanding of how to split the barotropic and baroclinic modes, because the previous old field are stored and used to restart the substeps instead of having two different tendencies that are averaged at each substep.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3874#issuecomment-2441601892:50,test,testing,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3874#issuecomment-2441601892,1,['test'],['testing']
Testability,"It is the effect of `wait(device(arch), events)` vs the `wait(events)` in `fill_halo_regions.jl` line 64. (On main just substituting that line). ```; julia> benchmark_nonhydrostatic_model(GPU, Float64, 128); BenchmarkTools.Trial: 10 samples with 1 evaluation.; Range (min … max): 4.784 ms … 22.835 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 4.836 ms ┊ GC (median): 0.00%; Time (mean ± σ): 6.634 ms ± 5.692 ms ┊ GC (mean ± σ): 0.00% ± 0.00%. █ ; █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄ ▁; 4.78 ms Histogram: frequency by time 22.8 ms <. Memory estimate: 1.86 MiB, allocs estimate: 6061.; ```. vs . ```; julia> benchmark_nonhydrostatic_model(GPU, Float64, 128); BenchmarkTools.Trial: 10 samples with 1 evaluation.; Range (min … max): 6.907 ms … 25.036 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 7.512 ms ┊ GC (median): 0.00%; Time (mean ± σ): 9.426 ms ± 5.532 ms ┊ GC (mean ± σ): 0.00% ± 0.00%. █▄ ; ▆██▁▁▁▁▁▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▆ ▁; 6.91 ms Histogram: frequency by time 25 ms <. Memory estimate: 1.86 MiB, allocs estimate: 5563.; ```. I ll investigate more this wait function today.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-964152321:208,Benchmark,BenchmarkTools,208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-964152321,4,['Benchmark'],['BenchmarkTools']
Testability,It looks like GPU tests did not run for this PR. Any idea why it was merged?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3393#issuecomment-1867013194:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3393#issuecomment-1867013194,1,['test'],['tests']
Testability,It looks like I've got the MRG stuff working now and the hydrostatic regression tests are passing again,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181245026:80,test,tests,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181245026,1,['test'],['tests']
Testability,"It looks like `validate_advection` is also needed if we want to support a nice API for changing the floating point precision:. https://github.com/CliMA/Oceananigans.jl/blob/b3ddbc84c8f35aaf5b93fbbfdb4cffcada5c6533/src/Advection/weno_fifth_order.jl#L139. Right now users have to specify `Float32` in both the `grid` and `WENO5` to get reduced-precision all around. If we `validate_advection` we can use the ""stub, regularization"" strategy where `FT` is set to `eltype(grid)` only if it's not specificed (to support existing behavior where `FT` can be set indepednently of `eltype(grid)`.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2271#issuecomment-1047966020:407,stub,stub,407,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2271#issuecomment-1047966020,1,['stub'],['stub']
Testability,"It looks like https://github.com/CliMA/Oceananigans.jl/pull/2538/ implemented just one solver, with an optional tridiagonal component, is that right. Why does this PR take a different approach? Wouldn't using a single solver result in less code / duplication of transform logic?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2275811867:272,log,logic,272,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2275811867,1,['log'],['logic']
Testability,"It looks like our problems with GM are not solved by this PR --- even when we correctly mask interior values (it might be worth testing this a second time, but I think I did this correctly). Here are results for https://github.com/CliMA/Oceananigans.jl/pull/2477/commits/1c183f9a8df7b97f5074f18ce622b247b7b1c923, in which the stencil is rewritten to compute the ""gradient of the average"". When we do this, and use ""boundary-aware averages"", we eliminate a dependence on the boundary (ie the GM stencil is ""inward looking""). It doesn't fix the basic issue with spurious fluxes near the boundary:. https://user-images.githubusercontent.com/15271942/166609754-1c832d73-3089-48d0-89c4-a99caac344b1.mp4. Hmm... For reference, here's what happens when we revert to ""average of the gradient"" via https://github.com/CliMA/Oceananigans.jl/pull/2477/commits/b7a67598db1fe8d5afea27cece5d35d0c20aac93:. https://user-images.githubusercontent.com/15271942/166610211-95376390-bb80-4993-8b7b-6a3cbe27bebf.mp4. My next best hypothesis is that we are seeing the precise instability that Griffies 1998 points out, and the only solution is i) horizontal diffusion or ii) the Griffies stencil. @jm-c thoughts?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1116841953:128,test,testing,128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1116841953,1,['test'],['testing']
Testability,"It looks like that restarting from a checkpoint is not bit-for-bit? I think the issue is that when restarting from a checkpoint the time step is not restored -- it is still using the initial time step defined in `Simulation()`, not the `last_Δt` from the saved `Clock` object in the checkpoint file. See the example below, which is the output of the attached test case. . In the pickup run I changed the onscreen output from every 10 iterations to every 1 iterations to see the time step. Rather than using the previous time step (5.973 s) from the checkpoint, the pickup run is using a time step of 10 s which is the value when defining `simulation = Simulation(model, Δt=10, stop_iteration=220)`. I’m using v0.91.5. Initial run; ```; [ Info: Initializing simulation...; Iteration: 0000, time: 0 seconds, Δt: 11 seconds, max(|u|) = 2.5e-01 ms⁻¹, wall time: 0 seconds; [ Info: ... simulation initialization complete (13.909 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (4.696 seconds).; Iteration: 0010, time: 1.833 minutes, Δt: 11.212 seconds, max(|u|) = 2.6e-01 ms⁻¹, wall time: 19.116 seconds; Iteration: 0020, time: 3.702 minutes, Δt: 10.681 seconds, max(|u|) = 2.8e-01 ms⁻¹, wall time: 19.345 seconds; Iteration: 0030, time: 5.482 minutes, Δt: 10.215 seconds, max(|u|) = 2.9e-01 ms⁻¹, wall time: 19.629 seconds; Iteration: 0040, time: 7.185 minutes, Δt: 9.802 seconds, max(|u|) = 3.0e-01 ms⁻¹, wall time: 19.854 seconds; Iteration: 0050, time: 8.819 minutes, Δt: 9.433 seconds, max(|u|) = 3.1e-01 ms⁻¹, wall time: 20.082 seconds; Iteration: 0060, time: 10.391 minutes, Δt: 9.100 seconds, max(|u|) = 3.2e-01 ms⁻¹, wall time: 20.306 seconds; Iteration: 0070, time: 11.907 minutes, Δt: 8.798 seconds, max(|u|) = 3.3e-01 ms⁻¹, wall time: 20.559 seconds; Iteration: 0080, time: 13.374 minutes, Δt: 8.523 seconds, max(|u|) = 3.4e-01 ms⁻¹, wall time: 20.773 seconds; Iteration: 0090, time: 14.794 minutes, Δt: 8.270 seconds, max(|u|) = 3.5e-01 ms⁻¹, wall time",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3845:359,test,test,359,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3845,1,['test'],['test']
Testability,It looks like that worked for the enzyme tests!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2266743444:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2266743444,1,['test'],['tests']
Testability,"It looks like this PR was merged, but tests do not pass. We need to fix the tests...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3402#issuecomment-1867011862:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3402#issuecomment-1867011862,2,['test'],['tests']
Testability,"It looks like you have an old version of Oceananigans in your global Julia environment. That's probably what's making the tests fail. I think ideally the global environment should be empty. Here's mine:. ```bash; (base) tomas@np900:~/repos/Oceananigans.jl$ julia -e ""using Pkg; Pkg.status()""; Status `~/.julia/environments/v1.6/Project.toml` (empty project); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1772#issuecomment-869067602:122,test,tests,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1772#issuecomment-869067602,1,['test'],['tests']
Testability,"It might be also another problem not related to BC. ; When the test passes we get; ```; [2023/02/12 17:00:57.335] INFO Δv: min=-2.709402e-11, max=+2.834735e-11, mean=-2.606411e-14, absmean=+1.007853e-12, std=+2.676095e-12 (16512/16512 matching grid points); ```; On test failing; ```; [2023/02/14 10:02:14.671] INFO Δv: min=-3.212770e-11, max=+2.834735e-11, mean=-2.751160e-13, absmean=+1.256905e-12, std=+3.884381e-12 (16384/16512 matching grid points); ```; (same maximum difference, larger minimum, larger mean). All in all very small values, considering that `v` is a very small field. I will check which points are actually not matching, it might help us",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429895265:63,test,test,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429895265,2,['test'],['test']
Testability,"It might be good to add divergence and tracer budget calculations to either a validation or a test, no? What do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2892#issuecomment-1414117039:94,test,test,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2892#issuecomment-1414117039,1,['test'],['test']
Testability,"It might be possible to use one of the more complex validation tests like the forced flow, fixed slip convergence test on a vertically stretched grid for that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1806#issuecomment-872633972:63,test,tests,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1806#issuecomment-872633972,2,['test'],"['test', 'tests']"
Testability,It seemed quite easy but now all tests are broken for a weird reason 😅,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1402994491:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1402994491,1,['test'],['tests']
Testability,"It seems its working now!; The code below:; ```julia; using Oceananigans. grid = RectilinearGrid(size=(1, 1, 1), extent=(1, 1, 1)). b = CenterField(grid); f = 1. vz = Field{Face, Center, Center}(grid). vz_op = @at((Face, Center, Center), +∂x(b) / f); vz .= vz_op; ```; Returns:; ```julia; 1×1×1 Field{Face, Center, Center} on RectilinearGrid on CPU; ├── grid: 1×1×1 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 1×1×1 halo; ├── boundary conditions: FieldBoundaryConditions; │ └── west: Periodic, east: Periodic, south: Periodic, north: Periodic, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux; └── data: 3×3×3 OffsetArray(::Array{Float64, 3}, 0:2, 0:2, 0:2) with eltype Float64 with indices 0:2×0:2×0:2; └── max=0.0, min=0.0, mean=0.0; ```. I also tested on GPU:. ```julia; grid = RectilinearGrid(GPU(), size=(1, 1, 1), extent=(1, 1, 1)). b = CenterField(grid); f = 1. vz = Field{Face, Center, Center}(grid). vz_op = @at((Face, Center, Center), +∂x(b) / f); vz .= vz_op; ```. returns:. ```julia; 1×1×1 Field{Face, Center, Center} on RectilinearGrid on GPU; ├── grid: 1×1×1 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 1×1×1 halo; ├── boundary conditions: FieldBoundaryConditions; │ └── west: Periodic, east: Periodic, south: Periodic, north: Periodic, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux; └── data: 3×3×3 OffsetArray(::CUDA.CuArray{Float64, 3}, 0:2, 0:2, 0:2) with eltype Float64 with indices 0:2×0:2×0:2; └── max=0.0, min=0.0, mean=0.0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2436#issuecomment-1099254179:773,test,tested,773,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2436#issuecomment-1099254179,1,['test'],['tested']
Testability,"It seems like [these tests](https://buildkite.com/clima/oceananigans/builds/3559#6c943ada-d478-430c-b154-31160f8a3c3d) are failing because they compare the LES models with some pre-computed solutions: https://github.com/CliMA/Oceananigans.jl/blob/32c5c5a2d0f441a4b663866d511807d0f9413c90/test/regression_tests/ocean_large_eddy_simulation_regression_test.jl#L78. ~If I followed the code correctly, the LES models are looped through here: https://github.com/CliMA/Oceananigans.jl/blob/32c5c5a2d0f441a4b663866d511807d0f9413c90/test/test_turbulence_closures.jl#L4-L8~. ~which means that those are always run with the default values. Since we're comparing with pre-computed solutions, it'd be good to explicitly specify every closure's parameters, no? The downside is that we won't be able to automatically loop through th closure like this and have to specify them by hand.~",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889331619:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889331619,3,['test'],"['test', 'tests']"
Testability,"It seems like adding the rebuilding step has fixed that error so thank you!; However, there is another error (see attached error log). Based on my print statements from my run script, the error is occurring when the `run!` command is called or during the run before the first output of progress.; [err_gpu.01.txt](https://github.com/CliMA/Oceananigans.jl/files/5873490/err_gpu.01.txt); [log_gpu.01.txt](https://github.com/CliMA/Oceananigans.jl/files/5873492/log_gpu.01.txt). I have run the same case using the CPU architecture and it made it through a couple timesteps so I know that it works. It just runs too slowly on the CPU to be practical to use. . To your note, I do use .jl extensions but github wouldn't allow me to attach a .jl so I changed it to .txt to post it. I don't anticipate the zero Eulerian-mean flow to be a huge issue because my forcing starts up very gradually over the first few hours so I would expect that to act as the spin-up you used in your paper. However, you know much more about this than I do. Even with a gradual climb in forcing at the beginning of the run, how would you recommend improving the settings? Can I initialize the Eulerian-mean flow with noise? Or just run a different, more formal spin up case and then initialize from that? . Thanks so much for your help, this is my first time working with an LES so I am very green.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1317#issuecomment-767535529:129,log,log,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1317#issuecomment-767535529,1,['log'],['log']
Testability,"It seems like tests will pass this time. . FYI, I was forced to remove the instances of `@disallowscalar` because that's not included in `CUDA.jl` anymore, but I'm guessing this is okay since ""scalar iteration is now disallowed by default"" according to @maleadt. I'm guessing we wanna bump to 0.58.3 after this since this fixed an important bug. Can any one confirm?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863556999:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863556999,1,['test'],['tests']
Testability,It seems like the animation in the internal wave example isn't displaying properly:. https://clima.github.io/OceananigansDocumentation/stable/generated/internal_wave/. I tested with 2 different browsers. It show up like this on firefox:. ![image](https://user-images.githubusercontent.com/13205162/215351544-f6b82ec2-58e6-4e31-8f89-da86c02d9714.png),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2884:170,test,tested,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2884,1,['test'],['tested']
Testability,"It seems like there are some problems with the GPU tests, @navidcy and @glwagner do you have some idea on why tests are running for so long?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009029060:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009029060,2,['test'],['tests']
Testability,It seems like we're still getting the `all(test_fields.v .≈ truth_fields.v)` error in the [shallow water regression tests](https://buildkite.com/clima/oceananigans/builds/10225#01868315-b904-4152-b885-9b64cbab7111). I'll restart it and see what happens. But we should probably keep an eye on that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2944#issuecomment-1443689339:116,test,tests,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2944#issuecomment-1443689339,1,['test'],['tests']
Testability,"It seems logical to store the kwargs in the backend! That will also help with future proofing since we would probably implement NetCDF support by generalizing the backend concept. I think those two examples are when data is stored totally on disk or ""partly"" on disk (and part in memory).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3680#issuecomment-2313319674:9,log,logical,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3680#issuecomment-2313319674,1,['log'],['logical']
Testability,It seems that tests are needed for `VerticallyStretchedRectilinearGrid`. I propose we merge this first and then add some tests in a subsequent PR that hopefully will also address #1753 .,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1754#issuecomment-866270074:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1754#issuecomment-866270074,2,['test'],['tests']
Testability,"It seems this updates a lot of versions, including StructArrays. Seems like a good idea but there are some failed tests. When I looked at the errors one of them seemed to be about `OffsetArrays`, copied below right before the stacktrace. Not sure how to resolve this but I suspect others have ideas. ```; ┌ Warning: Could not use exact versions of packages in manifest, re-resolving;   | └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1526;   | ERROR: Unsatisfiable requirements detected for package OffsetArrays [6fe1bfb0]:;   | OffsetArrays [6fe1bfb0] log:;   | ├─OffsetArrays [6fe1bfb0] has no known versions!;   | └─restricted to versions 1.4.0-1 by Oceananigans [9e8cae18] — no versions left;   | └─Oceananigans [9e8cae18] log:;   | ├─possible versions are: 0.58.5 or uninstalled;   | └─Oceananigans [9e8cae18] is fixed to version 0.58.5;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1785#issuecomment-870516627:114,test,tests,114,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1785#issuecomment-870516627,3,"['log', 'test']","['log', 'tests']"
Testability,It should be pretty easy to adapt `correct_incompressible_immersed_tendencies.jl` to create `correct_shallow_water_immersed_tendencies.jl` to this features to `ShallowWaterModel`. It may also make it easier to test the immersed boundary method as there is no need for a pressure solve in simulating the equations.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1458:210,test,test,210,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1458,1,['test'],['test']
Testability,It should have been fixed in kernel abstractions. We have to test multi GPU without it and then we can remove it,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2748#issuecomment-1256192855:61,test,test,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2748#issuecomment-1256192855,1,['test'],['test']
Testability,"It shouldn't, unless you are looking at a regime that isn't covered in our regression tests / tests that closely inspect the difference between CPU and GPU results.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3320#issuecomment-1772922388:86,test,tests,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3320#issuecomment-1772922388,2,['test'],['tests']
Testability,"It turns out that results look OK without a sponge layer. I think because this is a viscous DNS, so the fluctuations get dampened (when I tested this, I did it with a LES). Here's the vorticity field without the sponge layer:. https://user-images.githubusercontent.com/13205162/142678582-00f6deb0-6376-4e7d-a15a-d378026a6b82.mp4. In hindsight I also agree with @glwagner's point about `v` being a background field. It would most likely create inertial oscillations.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-974338816:138,test,tested,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-974338816,1,['test'],['tested']
Testability,"It was not copying halo regions, which are needed for correct offline diagnostics since `FieldTimeSeries` uses `set!`. Closes #3224 . Thanks very much to @hdrake and @ikeshwani for finding this offline-diagnostics-ruining bug!. I think the implementation of `set!` between `Field`s has waffled over time. We should add a test if we want to ensure this behavior.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3225:321,test,test,321,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3225,1,['test'],['test']
Testability,It was working just waiting for the shallow water test to be fixed. Some merge conflicts now which I can fix tomorrow.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1480285884:50,test,test,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1480285884,1,['test'],['test']
Testability,It will fail right now but should start passing once #161 is fixed (this test will tell us whether we actually fixed it).,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/226:73,test,test,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/226,1,['test'],['test']
Testability,It would be nice to run unit tests on github actions before launching buildkite jobs. Someday...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3149#issuecomment-1605866380:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3149#issuecomment-1605866380,1,['test'],['tests']
Testability,It would be really cool to put some viz in the docs. Could add a validation test just for the grid to `validation` perhaps with viz in it too (perhaps as a stop gap if there isn't time to whip up nice docs).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-788891174:76,test,test,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-788891174,1,['test'],['test']
Testability,It'd be best if you guys can take a look at the conflicts in `src/Architectures.jl`; it's not clear to me what some decisions would influence elsewhere in the code - quite a bit has changed that you are probably more aware of. I'm happy to test the code once conflicts are resolved.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1997670821:240,test,test,240,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1997670821,2,['test'],['test']
Testability,"It'd be nice to state in writing the justification for writing a separate CPU solver for certain problems. In general, I think that any algorithm that works on the GPU will also work on the CPU. Thus at least in principle the simplest choice is presumably to use the same solver on both architectures. For example, benchmarking *might* show that a GPU-friendly algorithm performs poorly compared to a CPU-specific algorithm, which might justify maintaining separate solvers for the GPU and CPU. Is this the case?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/586#issuecomment-572064187:315,benchmark,benchmarking,315,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/586#issuecomment-572064187,1,['benchmark'],['benchmarking']
Testability,It's a good idea! Also @apaloczy had some tests that might be good to try to re-run.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2381407911:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2381407911,1,['test'],['tests']
Testability,"It's also worth noting that right now many calculations are done more than once in each timestep. For example for each component of $M_{ij}$ I'm calculating the whole strain rate tensor modulus in addition to the strain rate tensor component needed:. https://github.com/CliMA/Oceananigans.jl/blob/25cc34e6c395e210e0aecf8181919c25435d7919/src/TurbulenceClosures/turbulence_closure_implementations/scale_invariant_smagorinsky.jl#L241-L257. This is done for legibility of the code, but it may be necessary to forfeit that in favor of doing fewer calculations. (Also note that I'm using a weird way to define function names here, so lmk if you guys think I should change it.). Another thing to note that it's common to update dynamic Smagorinsky coefficients once every 5 or so time-steps only, since they can be pretty expensive. afaik this is generally done for the scale-dependent versions, which have two test filters instead of the one needed in this PR, but I wouldn't be surprised if it's occasionally necessary for the scale-invariant versions as well.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2212664403:905,test,test,905,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2212664403,1,['test'],['test']
Testability,"It's also worth noting that tests pass with `float_type=Float64`, even when `eltype(grid)` is `Float32`. Looking at #1786 reveals that `float_type` is only used in two places: to determine `buoyancy` kwarg (the default is `SeawaterBuoyancy`), and to set the eltype of `clock`. @francispoulin if you can, can you test both. ```julia; using Oceananigans. N = 32. grid = RegularRectilinearGrid(Float32, size=(N, N, N), extent=(1, 1, 1)); model = IncompressibleModel(architecture=GPU(), advection=WENO5(), buoyancy=nothing, grid=grid); time_step!(model, 1); ```. (to see if the `buoyancy` kwarg is somehow part of the problem) and. ```julia; using Oceananigans. N = 32. grid = RegularRectilinearGrid(Float32, size=(N, N, N), extent=(1, 1, 1)); model = IncompressibleModel(architecture=GPU(), advection=WENO5(), clock=Clock{Float64}(), grid=grid); time_step!(model, 1); ```. ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870700244:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870700244,2,['test'],"['test', 'tests']"
Testability,It's an error from the constructor for `VerticallyStretchedRectilinearGrid`. I would guess that the test uses incorrect syntax in constructing a vertically stretched grid?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819608119:100,test,test,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-819608119,1,['test'],['test']
Testability,"It's better to use `Field` for boundary conditions rather than `Array` --- this eliminates translation issues when switching architectures (eg CPU, to GPU, to multi-region, to distributed), and also allows diagnostics to be performed directly on the boundary conditions (which isn't always needed, but is very welcome to have available --- for example the spatial derivative of a flux). So, I think we should declare that it's ""best practice"" to use `Field`, not `Array`. To encourage this we should change the docs that show how to use an `Array`:. https://clima.github.io/OceananigansDocumentation/stable/model_setup/boundary_conditions/#.-A-random,-spatially-varying,-constant-in-time-temperature-flux-specified-by-an-array. to using a `Field`. Also, we should add correctness tests for using `Field`, which has a bug up until #3287. Curious about @simone-silvestri's input because he has used arrays a lot in boundary conditions. Note that we also are working on support for `FieldTimeSeries` as a boundary condition in #3233 .",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3298:780,test,tests,780,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3298,1,['test'],['tests']
Testability,"It's common for this error to pop up when there's a file handle already open (maybe if there was an error the previous time you ran the code). @loganpknudsen if you haven't done so yet, you could close and reopen the repl before running the code again. Or/and you can delete the previously created netcdf file. Regardless, this error is likely not related to this branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747543347:144,log,loganpknudsen,144,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747543347,1,['log'],['loganpknudsen']
Testability,"It's easy to extend the existing simple test to a two-output case, so I did that on #1807. If #1807 passes, then there is some other aspect of the setup that's producing a failure. It's also possible that there is more than one problem / cause of woe.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-873162947:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-873162947,2,['test'],['test']
Testability,"It's interesting that this affects performance so much. IIRC, we previously called `Base.power_by_squaring`, which seems slower than the current Float64 intrinsic:. ```julia; julia> A = CUDA.rand(1024,1024);. # current version; julia> @benchmark CUDA.@sync broadcast!(A, A, 10) do a, b; a^b; end; BenchmarkTools.Trial: ; memory estimate: 496 bytes; allocs estimate: 7; --------------; minimum time: 33.429 μs (0.00% GC); median time: 33.970 μs (0.00% GC); mean time: 35.515 μs (0.00% GC); maximum time: 464.024 μs (0.00% GC); --------------; samples: 10000; evals/sample: 1. # Int32 is faster indeed; julia> @benchmark CUDA.@sync broadcast!(A, A, 10) do a, b; a^(b%Int32); end; BenchmarkTools.Trial: ; memory estimate: 496 bytes; allocs estimate: 7; --------------; minimum time: 29.600 μs (0.00% GC); median time: 30.289 μs (0.00% GC); mean time: 33.132 μs (0.00% GC); maximum time: 740.031 μs (0.00% GC); --------------; samples: 10000; evals/sample: 1. # old code path was slower than both; julia> @benchmark CUDA.@sync broadcast!(A, A, 10) do a, b; Base.power_by_squaring(a, b); end; BenchmarkTools.Trial: ; memory estimate: 496 bytes; allocs estimate: 7; --------------; minimum time: 39.410 μs (0.00% GC); median time: 40.629 μs (0.00% GC); mean time: 45.890 μs (0.00% GC); maximum time: 1.195 ms (0.00% GC); --------------; samples: 10000; evals/sample: 1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869801976:236,benchmark,benchmark,236,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869801976,6,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"It's now obvious that tests like the one in #1807 implicitly perform this test, so it's not needed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1802#issuecomment-873294152:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1802#issuecomment-873294152,2,['test'],"['test', 'tests']"
Testability,"It's ready @navidcy . @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently. We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor. Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654:280,test,tests,280,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654,4,['test'],"['test', 'tests']"
Testability,It's so nice that we have these tests. Seeing them pass makes me so confident that you did this matrix constructor refactor correctly @elise-palethorpe.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1180287052:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1180287052,1,['test'],['tests']
Testability,"It's something to do with GPU, maybe GPU reductions?. ```; [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; --;   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199;   | Expression: minimum_xspacing(grid) ≈ FT(π / 3);   | Evaluated: 0.0 ≈ 1.0471975511965976; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331:90,Test,Testing,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331,3,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability,"It's very hard to make a benchmarking test with pass/fail criteria. However, I think we should launch nightly benchmarking jobs whose results can be inspected by eye. That will help us catch a regression if we are watchful without having to manually run benchmarks for a string of commits going into the past.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2176#issuecomment-1021231787:25,benchmark,benchmarking,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2176#issuecomment-1021231787,4,"['benchmark', 'test']","['benchmarking', 'benchmarks', 'test']"
Testability,It's weird... time stepping itself should be a test because of the multiple `fill_halo_regions!` both on individual fields and tuples. Here it seems that everything passes also without this fix...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069820663:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069820663,1,['test'],['test']
Testability,"I’ll be able to test next week, I’m on vacation the next few days. Thanks for the troubleshooting on this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1233549934:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1233549934,1,['test'],['test']
Testability,Jlk9/enzyme constructor any test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3603:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3603,1,['test'],['test']
Testability,"Joes PR adding integration tests (which now passes and we should merge, if you can review), I think needs 12 to pass",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3607#issuecomment-2136854514:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3607#issuecomment-2136854514,1,['test'],['tests']
Testability,"Just a few final details regarding the tests. Also the name ""update_lagrangian_particles!"" keeps confusing me, its hard to remember the difference between ""updating particles"" and ""updating particle properties"". Maybe `step_lagrangian_particles!` is a better name for that function (which is defined by `TimeSteppers`). There's also some stray stuff in the tests and validating that I'd rather get cleaned up before mergin, since it'll have to be cleaned up by ""someone"" sooner or later.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1568530147:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1568530147,2,['test'],['tests']
Testability,"Just a few notes:. * There's surprisingly little ""interpolation"" / reconstruction in our code (except for trivial reconstruction). Most of the reconstruction occurs for advection, but advective reconstruction doesn't need to be touched by this PR. So this PR actually mostly affects the implementation of GM.; * There are a few things re: using homogeneous operators for Coriolis forces. I suspect that it won't have an effect, but it needs to be tested.; * It should be feasible to use homogeneous / boundary-aware operators _only_ for fluxes. ; * Finally, I'm going to implement an ""enforce_impenetrability!"" operator that does 3D masking and works for both non-immersed and immersed boundaries. After that, we can use `nothing` as a default boundary condition for velocities rather than `ImpenetrableBoundaryCondition` and avoid `mask_immersed_field!` during time-stepping. It seems that impenetrable is still useful for users though for ""user-defined, additional"" velocity components so we may want to keep it...; * An even further step would eliminate the need for masking boundary regions by never updating the tendency there. But this approach allows users to more easily make mistakes, ie changing the velocity field during a run, but forgetting to enforce impenetrability.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1116063491:447,test,tested,447,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1116063491,1,['test'],['tested']
Testability,"Just a note on this PR: It's kind of hacky but to avoid images and videos taking up space in git history (they take up a lot!) I'd advocate for uploading images into an issue (effectively hosting them on GitHub's servers) and then linking/embedding them. In an ideal world the validation experiment CI pipeline would run and produce figures for all validation experiments which would then be automatically embedded into the docs with every version release. But setting up this infrastructure would take time and effort which I suspect no one can spare right now. Unfortunately it's a thankless job haha. > We try to fix this issue and keep the validation experiments and benchmarks up-to-date. I've always wanted to do this and wish I had the time to do it... This was the original motivitation for setting up the validation experiment CI pipeline: https://buildkite.com/clima/oceananigans-validation-experiments. It only runs the convergence tests right now and it still runs every night but it's been neglected so stuff is failing. I personally think we should be reviving the validation experiments one-by-one starting with the most important ones by running them as part of that CI pipeline and fixing it when it fails. But without the ability to dedicate the time I can see why reducing our maintenance burden would be desirable. I've also always wanted to set up a benchmarking CI pipeline, but I don't think we have the proper computational resources to set it up right now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872386226:671,benchmark,benchmarks,671,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872386226,3,"['benchmark', 'test']","['benchmarking', 'benchmarks', 'tests']"
Testability,"Just a quick update, zero-viscosity Bicklet jet test case for `VectorInvariant`, `WENOVectorInvariant` (smoothness calculated based on `ζ`), modified VectorInvariant WENO with smoothness based on 2D stencils of `u` and `v`, here called `WENOVectorInvariantZVEL`. `VectorInvariant`. https://user-images.githubusercontent.com/33547697/157745561-a8e5f128-2f4e-42e3-9305-3f624498590b.mp4. `WENOVectorInvariant`. https://user-images.githubusercontent.com/33547697/157745569-41c52e2d-c80b-4d43-b2bf-8a914e8856a2.mp4. `WENOVectorInvariantZVEL`. https://user-images.githubusercontent.com/33547697/157745571-725ea604-8dec-44bd-bd08-dcd70d9ed4b1.mp4. `WENOVectorInvariantZVEL` seems to perform actually very well compared to a (somewhat) standard ""vorticity-reconstruction"" `WENOVectorInvariant` and compared to the very noisy standard `VectorInvariant` in lie of the fact that; - Noise is reduced significantly despite dissipation not being too high; - Agreement between different resolutions is much higher",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064455116:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064455116,1,['test'],['test']
Testability,Just adding here as a small reminder: . Currently the split-explicit scheme does not seem to conserve to machine precision the free-surface height average (as it should). In the current iteration it only conserves to 8 digits. This is only when it is implemented as a part of the hydrostatic model. In a standalone test it does seem to conserve to machine precision. Once this issue is isolated and fixed I'd say it's good to go for merging,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-1014927629:315,test,test,315,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-1014927629,1,['test'],['test']
Testability,"Just adding to @glwagner's comment, @whitleyv and I have discussed adding:. - Boundary interpolation, so the topography does not have to match the grid.; - Neumann boundary conditions. ; - A simple log-layer wall-model. I think we have a good sense of how to approach the above. I'm also interested in discussing pressure solver modifications with @weymouth, we will talk on our end and then be in touch to schedule a time to chat. ; Thanks!; Jacob",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1036#issuecomment-720088717:198,log,log-layer,198,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1036#issuecomment-720088717,1,['log'],['log-layer']
Testability,"Just as a reference, the sed command to do this (I believe) is. ```sed ""s/\<Cell\>/Center/g""```. which produces the following results (as an example):. ```bash; $ line=""(Cell, Cellphone), Cell; :Cell, Cell.something""; $ echo ""$line"" | sed ""s/\<Cell\>/Center/g""; (Center, Cellphone), Center; :Center, Center.something; ```. So a one-liner to do this is (I think; I haven't tested):. ``` find . -type f -name ""*.jl"" -print0 | xargs -0 sed ""s/\<Cell\>/Center/g"" ```. assuming we just wanna replace in ""*.jl"" files. I agree with `Center` and `Face` being the most intuitive and I'd be glad to do this change if everyone agrees. Although this would probably need to come with a bump to the next version since this is a breaking change, right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/414#issuecomment-763796870:372,test,tested,372,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/414#issuecomment-763796870,1,['test'],['tested']
Testability,"Just cleaning up some stuff and removing unnecessary cruft: operator temporary fields, forcing fields, density field, and hydrostatic pressure field. This will save us a lot of memory!. Also added a CPU and GPU environment which we can start using for CI testing and local runs. Resolves #65",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/101:255,test,testing,255,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/101,1,['test'],['testing']
Testability,Just do the datadep like the tests do it and do delete anything downloaded to retrigger downloading. Let me know if that helps.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2023734972:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2023734972,1,['test'],['tests']
Testability,"Just found this issue while setting up a `ShallowWaterModel` experiment with nonzero `bathymetry`. Implementing this involves modifying `src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl` to include the terms associated with bathymetric gradients in `x_pressure_gradient` and `y_pressure_gradient`, correct? What else would be needed? I would be happy to help write a validation test case and/or an example for this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1114340276:393,test,test,393,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1114340276,1,['test'],['test']
Testability,"Just hacked something together that allows for user-defined forcing functions for the CPU. Have not tested on the GPU yet. Basically there's a struct `Forcing` that stores the user-defined forcing functions. It will replace the old `ForcingFields` struct. See `examples/deep_convection_3d.jl` for how I switched to using a forcing function for T to enforce a cooling surface heat flux. A big issue is that the current implementation slows down the time stepping by a factor of 2-3x. So we'll have to figure out why before merging. The function must have a signature like `F(u, v, w, T, S, Nx, Ny, Nz, Δx, Δy, Δz, i, j, k)` right now so this won't produce a nice solution as we will have to figure out #59 before the function signature can look as nice as `surface_cooling_disk(grid, velocities, tracers, i, j, k)`. This is work for another branch. Will keep working on this before merging. Just wanted to start something. Resolves #73",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/85:100,test,tested,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/85,1,['test'],['tested']
Testability,Just looked and this is actually implemented in `HydrostaticFreeSurfaceModels` just not in the other too. I'll change them and modify the multiple tracer test to use an auxiliary field.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2730#issuecomment-1242314105:154,test,test,154,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2730#issuecomment-1242314105,1,['test'],['test']
Testability,Just made some changes to `distributed_shallow_water_model.jl` to account for the fact that we now enforce the vertical to be `Flat`. I hope the tests will pass. One problem that I came up with is how to run a distributed test on 4 cores locally. Any advice @ali-ramadhan?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843107678:145,test,tests,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843107678,2,['test'],"['test', 'tests']"
Testability,Just realized I left a bug... the solution was initialized with random numbers and as such was not converging some times. This finally solves the issue of the test not passing (hopefully),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2572:159,test,test,159,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2572,1,['test'],['test']
Testability,Just realized the distributed tests have been running for 6 days. I guess it's fair to say there's still something to fix lol. Just killed it to save resources,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1194144494:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1194144494,1,['test'],['tests']
Testability,"Just realized we don't have any tests checking that output attributes were correctly set, but this can addressed in a future PR I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1299#issuecomment-758112855:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1299#issuecomment-758112855,1,['test'],['tests']
Testability,"Just so I understand this filtering thing. It doesn't remove the regex-filtered lines from the output; it just doesn't test those lines against the ""prediction"", right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2083#issuecomment-981525228:119,test,test,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2083#issuecomment-981525228,1,['test'],['test']
Testability,"Just so that we could run this validation test with latest Oceananigans. - fix Coriolis, Simulation setting and 2-D initial free-surface in; single face test: surface_gravity_waves_on_face.jl; - fix single face animation: animate_face.jl; - remove ""animate.jl"" (was identical to ""animate_face.jl""); - fix Simulation setting in full cubed test (but more to fix there).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2506:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2506,3,['test'],['test']
Testability,"Just some comments at this point:; * At this point, we have the HydrostaticFreeSurface model working with the split explicit free surface. It would be great to find some time later on to figure out what was going on with the implicit free surface on AMD GPUs (is the issue isolated only to that architecture??) and get this resolved.; * To get everything moved over to KernelAbstractions would constitute a rather large change, something I think @glwagner expressed an interest in avoiding. I'd vote in favor of pushing this change off for future PR's.; * I'm wrapping up a profiling report that includes MI210 and A100 GPU performance; this report will include some recommendations should we be interested in performance improvements on GPU hardware (AMD and Nvidia). This kind of work could also constitute PR's further down the road.; * The main outstanding issue seems to be that we need a platform for testing on AMD GPUs. . It appears the CliMA fork `Project.toml` and `Manifest.toml` have diverged; I'll take a look to see if I can fix.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1997632147:907,test,testing,907,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1997632147,1,['test'],['testing']
Testability,"Just some restructuring of the `fill_halo_regions!` to allow the application of `apply_regionally!` to the directional fill_halo.; The `fill_halo_regions!` looks like this; ```; halo_tuple = permute_boundary_conditions(boundary_conditions); ; for task = 1:3; barrier = device_event(arch); fill_halo_event!(task, halo_tuple, c, loc, arch, barrier, grid, args...; kwargs...); end; ```; this should actually not change the performance... but I guess it will change completely since we will not want a loop over halo events anymore, neither to permute BCs.; There are differences in the `HydrostaticFreeSurfaceModel` where I lumped all the `fill_halo_regions` together and exposed a little bit of parallelism, and in the `QuasiAdamsBashforthTimeStepper` which might affect the `NonhydrostaticModel` benchmarks",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116140545:795,benchmark,benchmarks,795,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116140545,1,['benchmark'],['benchmarks']
Testability,Just some small things from testing free convection with @SandreOuza,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/123:28,test,testing,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/123,1,['test'],['testing']
Testability,"Just take a step back. We had a working system until we exposed the GPU. I did that as an experiment and added the quick start example. Now, if the experiment isn't working, let's revisit it. Moving the docs to caltech is a nuclear option. If it gives us speed up --- great. That's a good reason. But if it's just for the GPU issue, it makes no sense. It's like we tried to experiment with a new vegetable in our pasta sauce, didn't like the vegetable, and decided to stop eating dinner altogether as as result. It's not logical.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3779#issuecomment-2356634967:521,log,logical,521,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3779#issuecomment-2356634967,1,['log'],['logical']
Testability,Just tested it and it runs fine:. ```julia; julia> run!(simulation); [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (11.290 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (26.266 seconds).; [ Info: Simulation is stopping after running for 41.963 seconds.; [ Info: Model iteration 10 equals or exceeds stop iteration 10.; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2711#issuecomment-2385618854:5,test,tested,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2711#issuecomment-2385618854,1,['test'],['tested']
Testability,"Just tested it. For CPUs the time is roughly the same, and for GPUs the timing I got was consistent with your estimate of 0.75 (the difference was a bit smaller for me).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186260385:5,test,tested,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186260385,1,['test'],['tested']
Testability,Just tested the script and it runs! I haven't tested that the outputs are correct but I think it's safe to leave this closed.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1116725273:5,test,tested,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1116725273,2,['test'],['tested']
Testability,"Just tested this and apparently the warning isn't issued anymore. However, no warning is issued now even when `window > inertval`:. ```julia; julia> using Oceananigans. julia> using Oceananigans.Utils. julia> using Oceananigans.Units. julia> grid = RegularRectilinearGrid(size=(4, 4, 4), x=(0, 1e6), y=(0, 1e6), z=(-4e3, 0)); RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}; domain: x ∈ [0.0, 1.0e6], y ∈ [0.0, 1.0e6], z ∈ [-4000.0, 0.0]; topology: (Periodic, Periodic, Bounded); resolution (Nx, Ny, Nz): (4, 4, 4); halo size (Hx, Hy, Hz): (1, 1, 1); grid spacing (Δx, Δy, Δz): (250000.0, 250000.0, 1000.0). julia> model = IncompressibleModel(; architecture = CPU(),; grid = grid,; ); IncompressibleModel{CPU, Float64}(time = 0 seconds, iteration = 0) ; ├── grid: RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=4, Ny=4, Nz=4); ├── tracers: (:T, :S); ├── closure: Nothing; ├── buoyancy: SeawaterBuoyancy{Float64, LinearEquationOfState{Float64}, Nothing, Nothing}; └── coriolis: Nothing. julia> Δt = 20minutes; 1200.0. julia> simulation = Simulation(model, Δt = Δt, iteration_interval = 20,; stop_time = 3days); Simulation{typename(IncompressibleModel){typename(CPU), Float64}}; ├── Model clock: time = 0 seconds, iteration = 0 ; ├── Next time step (Float64): 20 minutes ; ├── Iteration interval: 20; ├── Stop criteria: Any[Oceananigans.Simulations.iteration_limit_exceeded, Oceananigans.Simulations.stop_time_exceeded, Oceananigans.Simulations.wall_time_limit_exceeded]; ├── Run time: 0 seconds, wall time limit: Inf; ├── Stop time: 3 days, stop iteration: Inf; ├── Diagnostics: typename(OrderedCollections.OrderedDict) with 1 entry:; │ └── nan_checker => typename(NaNChecker); └── Output writers: typename(OrderedCollections.OrderedDict) with no entries. julia> u, v, w = model.velocities; # unpack velocity `Field`s. julia> outputs = (u=u, v=v, w=w);. julia> using Oceananigans.OutputWriters: NetCDFOutputWriter, AveragedTimeInterval. julia> simulation.output_writers[:a",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1274#issuecomment-873421141:5,test,tested,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1274#issuecomment-873421141,1,['test'],['tested']
Testability,Just tested this and it seems to work. Hard to believe that this small change makes such a big difference. WENO5 is now running faster for me on 1.6 than on 1.5. Nice catch @glwagner,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-868927107:5,test,tested,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-868927107,1,['test'],['tested']
Testability,"Just to be clear, the point of doing this is because you want to use dispatch to write flexible array operations that are agnostic to whether the array is a 'raw' array (like an `Array` or `CuArray`), or some kind of wrapper like an `OffsetArray`. By writing `parent(a)`, you ensure correct behavior on `a` in both cases; you don't need to write new high-level functions for wrappers versus arrays because dispatch is performed at the lower level, where it belongs. With `data` we can use the same logic --- this concept is deployed extensively in PR #463.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/454#issuecomment-542269350:498,log,logic,498,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/454#issuecomment-542269350,1,['log'],['logic']
Testability,"Just to clarify things a bit for you @loganpknudsen --- your error says. > ERROR: LoadError: Failed to precompile Oceananigans. this means that the segmentation fault occurs during precompilation of `Oceananigans`, which occurs before any code you have written executes. That's why the error comes from ""line 1"" of your script (is that where you write `using Oceananigans`?). Another clue is the text. > [52922] signal (11.1): Segmentation fault; > in expression starting at /glade/u/home/knudsenl/.julia/packages/Oceananigans/M82LU/src/Oceananigans.jl:129. That says the error comes from line 129 in the file `src/Oceananigans.jl`. Going to that line on `main` branch we find:. https://github.com/CliMA/Oceananigans.jl/blob/d6e63e53e795272378b7657c4a6f32da2d62d6f9/src/Oceananigans.jl#L129. so there's something wrong with your CUDA / how it's loaded. The best course of action is probably to update to julia 1.10 first of all rather than using julia 1.9.2. Next, see if you can simply write `using CUDA` rather than trying to run your whole script. If you can get that to work (better yet if you can use some of `CUDA.jl` on a GPU on derecho then move on to simply writing `using Oceananigans` and trying to build a grid on the GPU. If that succeeds move on to your script.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2240940342:38,log,loganpknudsen,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2240940342,2,['log'],['loganpknudsen']
Testability,"Just to summarize where we are here:. 1. The new test fails.; 2. We also expect that changes on #3477 will cause the test to fail. A possible solution to the changes that #3477 will incur is to replace the slurped locations with `args::Varargs{N, T}` @wsmoses ; 3. We need to merge #3477 to restore normal CPU performance. Otherwise, Oceananigans can't be used even merely to demonstrate capabilities on the CPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1948850386:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1948850386,2,['test'],['test']
Testability,Just updating the `Manifest.toml` and the Buildkite Julia version number to see if everything passes. I've been using 1.6 fine on my laptop so this should test 1.6 + GPUs.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514:155,test,test,155,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514,1,['test'],['test']
Testability,Just waiting for the 3hr-long gpu test to finish...! :) (@simone-silvestri),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1181899132:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1181899132,1,['test'],['test']
Testability,"Just want to confirm some final steps with @navidcy and @glwagner here to wrap up this PR. At the moment, I believe we just need to put in a method that throws an error for `validate_free_surface` when the architecture is the AMD GPU and the free surface type is implicit free surface. I'm working on putting this in through the extensions (I believe this is the correct spot) and testing this out. Is there anything else, you want to see to get this merged into main ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1967096656:381,test,testing,381,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1967096656,1,['test'],['testing']
Testability,"Kind of a random case, but here's some timings from a calibration problem I'm doing (I'm running 6 3D simulations, ranging from something like 33 to 117 time-steps, either size (6, 10, 32) or (6, 10, 64)). For these tests I just downgraded KernelAbstractions via Project.toml:. ## With `KernelAbstractions` 0.7.2 (also downgraded CUDAKernels). ```; 23.405205 seconds (25.27 M allocations: 2.610 GiB, 1.78% gc time, 99.80% compilation time); 5.019944 seconds (5.92 M allocations: 475.126 MiB, 0.86% gc time, 98.22% compilation time); 0.067385 seconds (107.25 k allocations: 72.628 MiB); 0.090308 seconds (107.25 k allocations: 72.628 MiB); 0.139109 seconds (217.20 k allocations: 147.487 MiB); 0.197798 seconds (217.20 k allocations: 147.487 MiB); ```. The two simulations are affected by compilation but things go fast after that. ## With `KernelAbstractions` 0.8.6. ```; 4.914645 seconds (28.10 M allocations: 6.039 GiB, 15.62% gc time, 51.22% compilation time); 5.011717 seconds (31.58 M allocations: 10.844 GiB, 19.87% gc time, 16.87% compilation time); 4.236418 seconds (27.41 M allocations: 11.073 GiB, 21.75% gc time); 8.501561 seconds (55.04 M allocations: 22.118 GiB, 22.03% gc time); 8.618707 seconds (56.01 M allocations: 22.627 GiB, 21.83% gc time); 17.081286 seconds (112.47 M allocations: 45.197 GiB, 21.73% gc time); ```. Smells like type inference failure to me. Some informal exploration shows that the tendency calculations dominate this problem (as they do many others) --- so it's a pretty basic issue I suspect.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041:216,test,tests,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041,1,['test'],['tests']
Testability,"Kind of a work-in-progress but would be good to merge as PR #997 depends on these changes. Not the final form of the Buildkite pipeline as I'm still working on improving and expanding it but so far there's an initial job/stage that downloads Julia and instantiates, precompiles, etc. Then all the other jobs can use this new Julia environment to run their tests. Past behavior was just to reuse my Julia environment. I think it's important that CI always creates a fresh environment from scratch as this is how users will install the code usually, and it will help us catch issues like #991 early.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1031:356,test,tests,356,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1031,1,['test'],['tests']
Testability,Kind of scary that we don't have tests for this. I wrote some as part of PR #167 but commented them out as I couldn't get them to work (I kept getting some CUDA error). I should make sure to finish that off.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/200:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/200,1,['test'],['tests']
Testability,"L: 10.0.0+440.64.0; - CUDNN: missing; - CUTENSOR: missing. Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5; - Device capability support: sm_30, sm_32, sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 31.432 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 31.738 GiB / 31.749 GiB available); nothing. [2021/07/30 10:27:44.108] INFO Setting up benchmark: (GPU, Float64, 128)...; [2021/07/30 10:28:25.970] INFO warming up; [2021/07/30 10:29:55.456] WARN Calling CUDA.@profile only informs an external profiler to start.; The user is responsible for launching Julia under a CUDA profiler. It is recommended to use Nsight Systems, which supports interactive profiling:; $ nsys launch julia -@-> /home/henryguo/.julia/packages/CUDA/lwSps/lib/cudadrv/profile.jl:71; [2021/07/30 10:29:58.016] INFO done profiling (GPU, Float64, 128); ==104758== Profiling application: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project benchmarkable_incompressible_model.jl; ==104758== Profiling result:; Type Time(%) Time Calls Avg Min Max Name; GPU activities: 12.29% 502.36us 5 100.47us 94.015us 103.42us _Z25julia_gpu_ab2_step_field_7ContextI14__CUDACtx_Namevv14__PassType_257v12DisableHooksE20_gpu_ab2_step_field_16CompilerMetadataI10StaticSizeI15_128__128__128_E12DynamicCheckvv7NDRangeILi3ES5_I11_8__8__128_ES5_I11_16__16__1_EvvEE11OffsetArrayI7Float64Li3E13CuDeviceArrayIS9_Li3ELi1EEE5Int64S9_S8_IS9_Li3ES10_IS9_Li3ELi1EEES8_IS9_Li3ES10_IS9_Li3ELi1EEE; 9.47% 386.91us 4 96.727us 88.672us 105.02us void regular_fft<unsigned int=128, unsigned int=8, unsigned int=16, padding_t=1, twiddle_t=0, loadstore_modifier_t=2, layout_t=1, unsigned int, double>(kernel_arguments_t<unsigned int>); 6.69% 273.47us 5 54.694us 53.503us 56.800us _Z33julia_gpu_store_field_tendencies_7ContextI14__CUDACtx_Namevv14__PassType_257v12DisableHooksE28_gpu_store_f",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912:1823,test,test,1823,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912,1,['test'],['test']
Testability,"LD.jl:983; [4] julia_type(::String) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\JLD.jl:30; [5] jldatatype(::JLD.JldFile, ::HDF5.HDF5Datatype) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\jld_types.jl:701; [6] read(::JLD.JldDataset) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\JLD.jl:370; [7] read_ref(::JLD.JldFile, ::HDF5.HDF5ReferenceObj) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\JLD.jl:502; [8] jlconvert(::Type{Model}, ::JLD.JldFile, ::Ptr{UInt8}) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\jld_types.jl:387; [9] read_scalar(::JLD.JldDataset, ::HDF5.HDF5Datatype, ::Type) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\JLD.jl:398; [10] read(::JLD.JldDataset) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\JLD.jl:370; [11] read(::JLD.JldFile, ::String) at C:\Users\Ali\.julia\packages\JLD\1BoSz\src\JLD.jl:346; [12] restore_from_checkpoint(::String) at D:\Home\Git\Oceananigans.jl\src\output_writers.jl:77; [13] run_basic_checkpointer_tests() at D:\Home\Git\Oceananigans.jl\test\test_output_writers.jl:34; [14] top-level scope at D:\Home\Git\Oceananigans.jl\test\runtests.jl:247; [15] top-level scope at C:\cygwin\home\Administrator\buildbot\worker\package_win64\build\usr\share\julia\stdlib\v1.1\Test\src\Test.jl:1083; [16] top-level scope at D:\Home\Git\Oceananigans.jl\test\runtests.jl:247; [17] top-level scope at C:\cygwin\home\Administrator\buildbot\worker\package_win64\build\usr\share\julia\stdlib\v1.1\Test\src\Test.jl:1083; [18] top-level scope at D:\Home\Git\Oceananigans.jl\test\runtests.jl:244; [19] top-level scope at C:\cygwin\home\Administrator\buildbot\worker\package_win64\build\usr\share\julia\stdlib\v1.1\Test\src\Test.jl:1083; [20] top-level scope at D:\Home\Git\Oceananigans.jl\test\runtests.jl:243; [21] include at .\boot.jl:326 [inlined]; [22] include_relative(::Module, ::String) at .\loading.jl:1038; [23] include(::Module, ::String) at .\sysimg.jl:29; [24] include(::String) at .\client.jl:403; [25] top-level scope at none:0; [26] eval(::Module, ::Any) at .",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/141:2379,test,test,2379,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/141,1,['test'],['test']
Testability,LES regression test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/473:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/473,1,['test'],['test']
Testability,"Last TODO item for the JOSS paper. Was going to include the convergence tests as part of `test_verification.jl` but in cleaning them up (mostly by relying on the version of Oceananigans in the repository, `using .ConvergenceTests` as a local module, and making sure legends don't block off the plots) I noticed that the 2D convergence tests are all failing now. Pretty sure this must be a stupid mistake as they were all converging correctly as of Oceananigans v0.30.0 but haven't tried to figure out what went wrong yet... Since they're kinda important now I'm thinking we should have a test job that just runs all the convergence tests, tests that the order of convergence is as expected, and produces all the convergence plots so we can look at them. We can do this once we've set up Buildkite somewhere (see also @simonbyrne's https://github.com/CliMA/slurm-buildkite). Also, @glwagner do we still need `analyze_single_forced_fixed_slip.jl` and `analyze_forced_fixed_slip_pressure.jl`? They're not mentioned in the convergence tests `README.md` so maybe we should remove them?. Resolves #873. # Convergence test plots. ![point_exponential_decay_time_stepper_convergence](https://user-images.githubusercontent.com/20099589/91511129-04753d80-e8ad-11ea-95a9-582b79da9dab.png). ![cosine_advection_diffusion_solutions](https://user-images.githubusercontent.com/20099589/91511137-09d28800-e8ad-11ea-9ac5-f978cd49ae5b.png). ![cosine_advection_diffusion_error_convergence](https://user-images.githubusercontent.com/20099589/91511140-0b9c4b80-e8ad-11ea-84ce-cb418b1971b0.png). ![gaussian_advection_diffusion_solutions](https://user-images.githubusercontent.com/20099589/91511147-0dfea580-e8ad-11ea-8c09-9816a687e67e.png). ![gaussian_advection_diffusion_error_convergence](https://user-images.githubusercontent.com/20099589/91511151-0f2fd280-e8ad-11ea-80c4-8b7920da8d64.png). ![two_dimensional_diffusion_convergence](https://user-images.githubusercontent.com/20099589/91511159-122ac300-e8ad-11ea-877e-251def",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/881:72,test,tests,72,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/881,5,['test'],"['test', 'tests']"
Testability,"Last minute benchmarks update for JOSS. Resolves #607. The performance benchmarks have been updated from v0.18.0 to v0.34.0. While it seems that CPU models have gotten faster by about ~32% while large GPU models have slowed down by ~15%, I think that's just because the v0.18.0 benchmarks were run on Supercloud or somewhere with a V100 while the v0.34.0 benchmarks were run on Tartarus where the TITAN V is marginally slower but the CPUs are beefier. No noticeable regression is pretty great considering how many features and improvements we've added since v0.18.0 and the fact that we haven't really done any profiling and targeted performance optimization. What seems to have gotten worse is constant overhead costs so small models are slower because of it, but this is something we can tackle when we focus on performance optimization in the future. ![benchmark_plots](https://user-images.githubusercontent.com/20099589/89906791-d2c85b00-dbb9-11ea-969a-4b8db2c31680.png)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/850:12,benchmark,benchmarks,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/850,4,['benchmark'],['benchmarks']
Testability,"Last time @ali-ramadhan tried doing any benchmarking for 2 GPUs we found that the efficiency was around 50%, so it took as long for 1 GPU as it did for 2 GPU. Henry is going to redo these benchmarks and I hope we will have some results by next week.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-868457569:40,benchmark,benchmarking,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-868457569,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"Launching. ```julia; using MPI; using Oceananigans; using Oceananigans.Distributed. MPI.Init(). comm = MPI.COMM_WORLD; rank = MPI.Comm_rank(comm); Nranks = MPI.Comm_size(MPI.COMM_WORLD). # Setup model; topology = (Periodic, Periodic, Flat); arch = MultiArch(CPU(); topology, ranks=(1, Nranks, 1)); grid = RectilinearGrid(arch; topology, size=(16, 16), extent=(2π, 2π)); c = CenterField(grid). f(x, y, z) = rand(); set!(c, f); cmax = maximum(c); @info ""(function) rank $rank has max|c|: $cmax"". a = rand(size(c)...); set!(c, a); cmax = maximum(c); @info ""(array) rank $rank has max|c|: $cmax""; ```. in a file `test.jl` with. ```; $ JULIA_NUM_THREADS=1 mpiexec -n 2 julia --project test.jl; ```. produces. ```; $ JULIA_NUM_THREADS=1 mpiexec -n 2 julia --project test.jl [18:22:01]; [ Info: (function) rank 0 has max|c|: 0.0; [ Info: (function) rank 1 has max|c|: 0.0; [ Info: (array) rank 0 has max|c|: 0.9891116380008036; [ Info: (array) rank 1 has max|c|: 0.9963683297139798; ```. So `set!` works with `Array` but not functions. `set! for distributed model should be fixed and tested.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2350:609,test,test,609,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2350,4,['test'],"['test', 'tested']"
Testability,"Let me summarize my findings in the commit 4841c96. I wrote a new script test/test_multi_region_cubed_sphere_scalar_halos.jl to verify the correct halo filling for scalar fields at locations cca, fca, cfa, and ffa. I manually filled out the halos of the parent (off-set) array and compared them against the halos of the array filled out with the fill_halo_regions! function. At the ffa locations, the tests fail for all halos. At the cca, fca, and cfa locations, the tests fail for (a) the north and west halos of the odd-numbered panels 1, 3, 5 (with non-trivial connectivities), and (b) the south and east halos of the even-numbered panels 2, 4, 6 (with non-trivial connectivities). The tests which fail are currently commented out in the script test/test_multi_region_cubed_sphere_scalar_halos.jl. After some digging, I found out that both the latitude and longitude values are not correctly defined on these halos. . To delve into the root of the issue, I first replace the line ; ```julia; Ψᵣ(λ, φ, z) = - U * R * (sind(φ) * cosd(α) - cosd(λ) * cosd(φ) * sind(α)); ```; with; ```julia; Ψᵣ(λ, φ, z) = λ ; ```; in test/test_multi_region_cubed_sphere_scalar_halos.jl, and run the script:; ```julia; julia> include(""test/test_multi_region_cubed_sphere_scalar_halos.jl""); ```; Then I type the following commands over the terminal and study the output:; ```julia; julia> Nx, Ny, Nz = 3, 3, 1; (3, 3, 1). julia> grid = ConformalCubedSphereGrid(panel_size = (Nx, Ny, Nz), z = (0, 1), radius = 1, horizontal_direction_halo = 3, z_halo = 1); ConformalCubedSphereGrid{Float64, FullyConnected, FullyConnected, Bounded} partitioned on CPU():; ├── grids: 3×3×1 OrthogonalSphericalShellGrid{Float64, FullyConnected, FullyConnected, Bounded} on CPU with 3×3×1 halo and with precomputed metrics; ├── partitioning: CubedSpherePartition with (1 region in each panel); ├── connectivity: CubedSphereConnectivity; └── devices: (CPU(), CPU(), CPU(), CPU(), CPU(), CPU()). julia> data_1 = create_c_test_data(grid); Cubed",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3280#issuecomment-1743842511:73,test,test,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3280#issuecomment-1743842511,5,['test'],"['test', 'tests']"
Testability,Let's add tests also?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328353618:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328353618,1,['test'],['tests']
Testability,Let's be real; we need tests. Closes #2223 maybe,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2224:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2224,1,['test'],['tests']
Testability,Let's delete from the tests until we have use for it?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480439518:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480439518,1,['test'],['tests']
Testability,Let's do a simple test of CPU performance to make sure we won't have to revert this soon given the change to splatting (which was implemented to solve a 100x slow down a few months ago),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2137702684:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2137702684,2,['test'],['test']
Testability,"Let's go for 100million then! Great stats Ali. Can we put them in to the; icy moon runs to get pdf of transit time from bottom to top. We need a; clock on each one and we stop it when the particle gets closer than a; chosen distance from the upper boundary. John. On Mon, Nov 23, 2020, 8:35 PM Ali Ramadhan <notifications@github.com> wrote:. > Some pretty promising Lagrangian particle tracking benchmarks!; >; > Couple of takeaways (all assuming a model with 128^3 grid points and QAB2; > time stepping):; >; > 1. *Low overhead*: You can advect up to ~100,000 particles on the CPU; > and up to ~10,000,000 particles on a (Titan V) GPU before the model slows; > down by more than 30%.; > 2. *Great on GPUs*: Seems that the GPU is great for advecting millions; > of particles. You can advect ~100,000,000 particles and your model only; > slows down by a factor of 4x. In this scenario, the GPU is ~620x faster; > than a single CPU core.; > 3. Calculated using (t_100000000 - t_0) / 100000000, advecting a; > single particle on the CPU takes ~110 ns while on the GPU it only takes; > ~0.127 ns. This seems a little too good to be true but I'll double check; > this.; >; > I'll start refactoring this PR using @glwagner; > <https://github.com/glwagner>'s and @zhenwu0728; > <https://github.com/zhenwu0728>'s feedback, but I think it would be; > really great if we can keep this performance.; > Benchmarks; >; > Oceananigans v0.44.1; > Julia Version 1.5.2; > Commit 539f3ce943 (2020-09-23 23:17 UTC); > Platform Info:; > OS: Linux (x86_64-pc-linux-gnu); > CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; > WORD_SIZE: 64; > LIBM: libopenlibm; > LLVM: libLLVM-9.0.1 (ORCJIT, cascadelake); > GPU: TITAN V; >; > Lagrangian particle tracking benchmarks; > ┌───────────────┬─────────────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; > │ Architectures │ N_particles │ min │ median │ mean │ max │ memory │ allocs │; > ├───────────────┼─────────────┼────────────┼────────────┼──────",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732535982:395,benchmark,benchmarks,395,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732535982,1,['benchmark'],['benchmarks']
Testability,"Let's not change the tests, but rather add `@test_broken` for the failing cases (here, GPU + immersed boundary grid). Ideally we get these tests passing eventually. I don't want to change the tests for good and lose that initiative.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1142600028:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1142600028,3,['test'],['tests']
Testability,Like which code? I mean what's an example that benefits from what changed here so I can test it to approve?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3715#issuecomment-2294372167:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3715#issuecomment-2294372167,1,['test'],['test']
Testability,Linux CPU+GPU tests are running on Buildkite so we can stop testing on GitLab CI. One less CI pipeline to maintain.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1049:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1049,2,['test'],"['testing', 'tests']"
Testability,"Locally I am seeing:. ```; Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; Test threw exception; Expression: ZeroField() - u == -u; Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; [4] getindex; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522:65,Test,Test,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522,4,"['Test', 'assert', 'test']","['Test', 'assertscalar', 'test']"
Testability,Locally on my machine these tests pass. On tartarus they pass as well. I'll open a PR and add this file back into the CI. If we see impassable problems we'll delete it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1616187716:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1616187716,1,['test'],['tests']
Testability,Logging,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478:0,Log,Logging,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478,1,['Log'],['Logging']
Testability,Logging with crayons,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/855:0,Log,Logging,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/855,1,['Log'],['Logging']
Testability,Logging.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71:0,Log,Logging,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71,1,['Log'],['Logging']
Testability,Logic for arguments to time-stepping related functions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/448:0,Log,Logic,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/448,1,['Log'],['Logic']
Testability,"Looking at performance benchmarks, Float32 is slower than Float64 on the CPU. I suspect something is being done wrong somewhere maybe. I have a few ideas:; 1. Those benchmarks were run on Google Cloud where the virtual CPUs aren't very performant so I thought it was maybe just a low-end 64-bit CPU where Float32 operations were emulated via Float64 operations resulting in fewer FLOPS. However, even on my own laptop I found Float32 on a CPU to be a bit slower, but just by 5-10% whereas on Google Cloud it was like 30%+ slower.; 2. It's likely that Float32 is still being mixed with Float64, and maybe this slows the code down due to too many implicit conversions? (Somewhat related to #34).; 3. Unlikely but I wonder if this is a Julia issue... I could perhaps run some simple C code to see if it's a hardware thing or just a weird Julia thing.; 4. I thought it looked fine on the GPU as you do see a ""speedup"" of 10-15% which I took to mean that we were memory bandwidth/latency limited (which is probably true). The V100 GPUs have twice as many FP32 units as they do FP64 units and if FP32 operations are faster, then I expect more than just a 10-15% speedup. So maybe we have similar issues on the GPU, which are preventing us from doing better than 15% speedup. Or maybe the GPU doesn't do implicit conversions and we are actually just memory bandwidth/latency limited. @glwagner has also pointed out these posts:; * Check out these benchmarks for arithmetic cpu operations: http://nicolas.limare.net/pro/notes/2014/12/12_arit_speed/ Conclusion: _usually_ single precision is faster, but is _occasionally_ comparable or slower depending on the processor (check results for x86-64 Intel Ivy Bridge).; * https://stackoverflow.com/questions/3426165/is-using-double-faster-than-float",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/188:23,benchmark,benchmarks,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/188,3,['benchmark'],['benchmarks']
Testability,Looking at the latest Buildkite build for the master branch it looks like GPU CI is only running CPU tests: https://buildkite.com/clima/oceananigans/builds/3045. Not sure why this would be the case... `CUDA.versioninfo()` seems to return the expected info on Sverdrup during initialization: https://buildkite.com/clima/oceananigans/builds/3045#ad4268d2-9b56-4cc0-ab46-ab9fdd61527b/31-253. I wonder if `CUDA.has_cuda()` is returning `false` on Sverdrup for some weird reason? https://github.com/CliMA/Oceananigans.jl/blob/dfc028667493bdd0eb1056d66d287c46e2591a7f/test/runtests.jl#L56,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1794:101,test,tests,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1794,2,['test'],"['test', 'tests']"
Testability,"Looking at this PR, I think we should make a few structural changes:; * Move `AbstractSchedule` to `Simulations`. This is where it belongs? (not `Utils`); * Make schedules a function of `Simulation`, not `model`. I don't think users really care --- it's just more logical I think this way. It's about homogenizing the Simulation/AbstractModel interface I guess.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3015#issuecomment-1482862799:264,log,logical,264,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3015#issuecomment-1482862799,1,['log'],['logical']
Testability,"Looks good to me! I was thinking of doing a cleaning and unifying of all the implicit solvers, but we can think about that later. We can merge when the tests pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2753#issuecomment-1259599032:152,test,tests,152,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2753#issuecomment-1259599032,1,['test'],['tests']
Testability,Looks like a good idea but I see that some tests were not successful?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2238#issuecomment-1034073975:43,test,tests,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2238#issuecomment-1034073975,1,['test'],['tests']
Testability,Looks like a good interface to me. But is it on purpose that there is only support for background fields in the `NonhydrostaticModel` and not for the `HydrostaticFreeSurfaceModel`?. @liuchihl will test it in our configurations.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2204239079:197,test,test,197,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2204239079,1,['test'],['test']
Testability,Looks like some GPU tests didn't even start due to. ```; signal (7): Bus error; ```. so I restarted the build.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1337#issuecomment-772681103:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1337#issuecomment-772681103,1,['test'],['tests']
Testability,"Looks like the new test only ran on the CPU on Sverdrup which could explain why it took 3+ hours and passed? https://buildkite.com/clima/oceananigans/builds/3043#c40e50d1-2fc1-4804-b44a-14c09f0efb50/16-351. Hmmm, this might be happening on master as well...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-871691887:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-871691887,1,['test'],['test']
Testability,"Looks like the tests run on the GPU now:. ```; [2021/07/01 10:39:51.478] INFO Testing vertically stretched rectilinear grid construction [GPU, Float64]...; --;   | [2021/07/01 10:39:51.496] INFO Testing vertically stretched rectilinear grid spacings [GPU, Float64]...;   | VerticallyStretchedRectilinearGrid{Float64, Periodic, Periodic, Bounded};   | domain: x ∈ [0.0, 1.0], y ∈ [0.0, 1.0], z ∈ [0.0, 361.0];   | topology: (Periodic, Periodic, Bounded);   | resolution (Nx, Ny, Nz): (1, 1, 19);   | halo size (Hx, Hy, Hz): (1, 1, 1);   | grid spacing (Δx, Δy, Δz): (1.0, 1.0, [min=1.0, max=37.0]); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872350172:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872350172,3,"['Test', 'test']","['Testing', 'tests']"
Testability,Looks like the velocity field is now fully incompressible over time but we need better tests to show this. Will merge once tests are implemented. Fully resolves #161. cc @sandreza,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/229:87,test,tests,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/229,2,['test'],['tests']
Testability,Looks like there's still work to do... I also realized that I forget a subtlety regarding the corners and periodic halo filling. I'm going to have to launch the kernels for periodic halo filling a bit differently to get the regression tests to pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1923#issuecomment-892358642:235,test,tests,235,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1923#issuecomment-892358642,1,['test'],['tests']
Testability,Looks like this PR only updates Adapt to v2.4.0 and not v3.0.0 so maybe it's being blocked by a dependency (which probably has a similar CompatHelper PR open right now). I think we should wait to check that all tests pass with Adapt v3.0.0 before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1287#issuecomment-754962548:211,test,tests,211,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1287#issuecomment-754962548,1,['test'],['tests']
Testability,"Looks like this happened after PR #1740 was merged as https://buildkite.com/clima/oceananigans/builds/2893 looks fine (GPU tests running on the commit before #1740 was merged) but the next commit/build on master is not fine https://buildkite.com/clima/oceananigans/builds/2895 (no GPU tests on the #1740 merge commit). Maybe this had something to do with CUDA.jl v3.3.0 or with the addition of the `JULIA_CUDA_USE_BINARYBUILDER=""true""` environment variable?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1794#issuecomment-871698977:123,test,tests,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1794#issuecomment-871698977,2,['test'],['tests']
Testability,Looks like those computed fields tests have started failing again so I'll change back to `test_broken`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2189831571:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2189831571,1,['test'],['tests']
Testability,Looks pretty good and the coding was simpler than I imagined. Provided the tests for halo regions pass is there anything else to do for ComputedFields?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1340#issuecomment-773409566:75,test,tests,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1340#issuecomment-773409566,2,['test'],['tests']
Testability,"Lots of interesting questions!. I think that doing a test with diffusivity of tracer, and maybe viscosity, would be interesting. In that limit we would impose no-flux boundary conditions at the walls (and immersed walls) and I would think that conservation should be better in both cases.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-867972244:53,test,test,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-867972244,1,['test'],['test']
Testability,"Lots of tests are failing, though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-924128314:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-924128314,1,['test'],['tests']
Testability,"MITgcm I believe uses the same two-dimensional preconditioned conjugate gradient solver for the rigid lid case as for the implicit free surface case. Many ocean models often have a split explicit method for stepping forward the free surface so there is no elliptic solve. ([Killworth et al. 1991](https://journals.ametsoc.org/view/journals/phoc/21/9/1520-0485_1991_021_1333_tdoafs_2_0_co_2.xml) discusses the disadvantages of either implicit free surface or rigid lid for ocean modeling with realistically complex geometries / coastlines.). This optimization really applies just to hydrostatic models on regular grids (no horizontal stretching). Much of the time I think it would be preferable to use the nonhydrostatic model for this case, since our FFT solver is so fast that the price paid is utterly minor. Yet with an immersed boundary (and perhaps only with a non-grid-fitted immersed boundary), there are some lingering issues that we haven't resolved about whether the FFT solver can be used as is while maintaining mass conservation. The hydrostatic solver uses a vertical integral of the continuity equation and is thus far more straightforward to maintain incompressibility with non-grid-fitted boundaries. So there is a little corner case in which you might want this feature. It's also obviously useful for testing the hydrostatic model.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1727#issuecomment-851699446:1320,test,testing,1320,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1727#issuecomment-851699446,1,['test'],['testing']
Testability,"MWE ; ```julia; grid = RectilinearGrid(size = (5, 5, 5), extent = (1, 1, 1)); model = HydrostaticFreeSurfaceModel(; grid); c = CenterField(grid; indices = (:, :, grid.Nz)); d = CenterField(grid); JLD2OutputWriter(model, (; c, d), filename = ""test"", schedule = IterationInterval(1)); ```; fails with ; ```julia; julia> JLD2OutputWriter(model, (; c, d), filename = ""test"", schedule = IterationInterval(1)); ERROR: ArgumentError: view indices (1:5, 1:5, 1:5) do not intersect field indices (Colon(), Colon(), 5:5); Stacktrace:; [1] view(f::Field{…}, i::UnitRange{…}, j::UnitRange{…}, k::UnitRange{…}); @ Oceananigans.Fields ~/development/Oceananigans.jl/src/Fields/field.jl:319; [2] Field; @ ~/development/Oceananigans.jl/src/Fields/field.jl:184 [inlined]; [3] construct_output(user_output::Field{…}, grid::RectilinearGrid{…}, user_indices::Tuple{…}, with_halos::Bool); @ Oceananigans.OutputWriters ~/development/Oceananigans.jl/src/OutputWriters/output_construction.jl:46; [4] (::Oceananigans.OutputWriters.var""#28#29""{Tuple{…}, Bool, HydrostaticFreeSurfaceModel{…}})(name::Symbol); @ Oceananigans.OutputWriters ./none:0; [5] iterate; @ ./generator.jl:47 [inlined]; [6] merge(a::@NamedTuple{}, itr::Base.Generator{Tuple{…}, Oceananigans.OutputWriters.var""#28#29""{…}}); @ Base ./namedtuple.jl:361; [7] NamedTuple(itr::Base.Generator{Tuple{…}, Oceananigans.OutputWriters.var""#28#29""{…}}); @ Base ./namedtuple.jl:151; [8] JLD2OutputWriter(model::HydrostaticFreeSurfaceModel{…}, outputs::@NamedTuple{…}; filename::String, schedule::IterationInterval, dir::String, indices::Tuple{…}, with_halos::Bool, array_type::Type, file_splitting::Oceananigans.OutputWriters.NoFileSplitting, overwrite_existing::Bool, init::typeof(Oceananigans.OutputWriters.noinit), including::Vector{…}, verbose::Bool, part::Int64, jld2_kw::Dict{…}); @ Oceananigans.OutputWriters ~/development/Oceananigans.jl/src/OutputWriters/jld2_output_writer.jl:185; [9] top-level scope; @ REPL[8]:1; Some type information was truncated. Use `show",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3835:242,test,test,242,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3835,2,['test'],['test']
Testability,Major refactor of TurbulenceClosures module plus more tests for HydrostaticFreeSurfaceModel,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1449:54,test,tests,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1449,1,['test'],['tests']
Testability,Makes SEAPICKLE! a bona fide Julia package. And adds a test.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3:55,test,test,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3,1,['test'],['test']
Testability,"Many models of size (16, 16, 16) are reduced to size (1, 1, 1). Oftentimes the test just executes a time-step to ensure there's no error. For this, a size (1, 1, 1) is sufficient.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/937:79,test,test,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/937,1,['test'],['test']
Testability,Maybe a better question (which might be silly): is there any reason why benchmarks need to have a different benchmark from the main repo?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090357885:72,benchmark,benchmarks,72,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090357885,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,Maybe it would be better to implement a regression test on the RegularLatitudeLongitudeGrid before merging,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-950208016:51,test,test,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-950208016,1,['test'],['test']
Testability,Maybe put in a PR with some tests in test_field.jl? I can fix this in a bit.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2391#issuecomment-1082146704:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2391#issuecomment-1082146704,1,['test'],['tests']
Testability,"Maybe tartarus is out of space too. I'll investigate. Having trouble staying logged in right now, keep getting kicked off.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1762#issuecomment-867768540:77,log,logged,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1762#issuecomment-867768540,1,['log'],['logged']
Testability,"Maybe this has already been extensively discussed but the GPU test suites on Buildkite fail often, requiring manual intervention to restart them for each PR. The obvious solution is a bigger machine for testing, but I have two suggestions that are much easier to implement:; 1. Updating Buildkite. Newer versions may be more stable. The latest version is 3.79 but Sverdrup is on v3.24.0 (almost 4 years old) and Tartarus is on v3.50.4.; 2. If builds are failing due to too much resource competition, reducing the number of Buildkite agents on Sverdrup may help. Right now there are 16. I wonder if GPU builds will be more stable with 8-12. Some builds may be slower but if no one has to restart a test suite then that would make for a better developer experience.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3751:62,test,test,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3751,3,['test'],"['test', 'testing']"
Testability,"Maybe this helps: You could use one `dt::Float32/64` for the time step in the model, and another `dt_int::Int` to count up the time used for output. Because with Float32; ```julia; julia> maxintfloat(Float32)/3600/24; 194.18074f0; ```; after 194 days of +dt you start flipping only the last mantissa bit, e.g. `dt=300f0` (5min); ```julia; julia> bitstring(300f0*3600*24*194); ""01001111100101011101110001000010"". julia> bitstring(300f0*3600*24*194 + 300f0); ""01001111100101011101110001000011""; ```; So after about one year +dt can be rounded back; ```julia; julia> bitstring(300f0*3600*24*366); ""01010000000011010101110011110111"". julia> bitstring(300f0*3600*24*366 + 300f0); ""01010000000011010101110011110111""; ```; but because you can factor out the `dt` and floats being logarithmic, this is actually independent of the time step `dt`.; ```julia; julia> bitstring(30f0*3600*24*366); ""01001110011000100010111001011000"". julia> bitstring(30f0*3600*24*366 + 30f0); ""01001110011000100010111001011000""; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2321#issuecomment-1512007255:773,log,logarithmic,773,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2321#issuecomment-1512007255,1,['log'],['logarithmic']
Testability,Maybe we can use `Term.jl` to implement a default / convenience log utility for simulations,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1076316613:64,log,log,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1076316613,1,['log'],['log']
Testability,Maybe we should propose a regression test for this...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2708#issuecomment-1223991142:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2708#issuecomment-1223991142,1,['test'],['test']
Testability,Maybe! I actually still have a couple test to fix before it's ready 😅,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1016064200:38,test,test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1016064200,1,['test'],['test']
Testability,Me too! I need some help I think here... I'm not sure why tests fail.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1563408348:58,test,tests,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1563408348,1,['test'],['tests']
Testability,MepSndBPomZX_nlXMFUWhU5nCMDE6qeyN2fWb5fb2QxQFUPYTCqZVjzG2jtpGPFs); [A fourth-order Cartesian grid embedded boundary method for Poisson's equation](https://msp.org/camcos/2017/12-1/camcos-v12-n1-p03-s.pdf); [A New Terrain-Following Vertical Coordinate Formulation for Atmospheric Prediction Models](https://journals.ametsoc.org/view/journals/mwre/130/10/1520-0493_2002_130_2459_antfvc_2.0.co_2.xml); [Comparison of Terrain-Following and Cut-Cell Grids Using a Nonhydrostatic Model](https://journals.ametsoc.org/view/journals/mwre/144/6/mwr-d-15-0226.1.xml); [Large-eddy simulations with ClimateMachine v0.2.0: a new open-source code for atmospheric simulations on GPUs and CPUs](https://gmd.copernicus.org/articles/15/6259/2022/); [Medium range forecasts using cut-cells: a sensitivity study](https://link.springer.com/article/10.1007/s00703-019-00681-w); [On methods for solving the oceanic equations of motion in generalized vertical coordinates](https://www.sciencedirect.com/science/article/abs/pii/S1463500305000090); [Representation of topography by porous barriers and objective interpolation of topographic data](https://www.sciencedirect.com/science/article/pii/S1463500313000425); [Representation of Topography by Shaved Cells in a Height Coordinate Ocean Model](https://journals.ametsoc.org/view/journals/mwre/125/9/1520-0493_1997_125_2293_rotbsc_2.0.co_2.xml); [Rescaled height coordinates for accurate representation of free-surface flows in ocean circulation models](https://www.sciencedirect.com/science/article/abs/pii/S1463500303000544); [Sliding or stumbling on the staircase: numerics of ocean circulation along piecewise-constant coastlines](https://agupubs.onlinelibrary.wiley.com/doi/epdf/10.1029/2022MS003594); ```[tasklist]; ### Tasks; - [ ] Tracer advection over seamount test case; - [ ] Two-dimensional implementation of `CutCellBottom`; - [ ] Three-dimensional implementation of `CutCellBottom`; - [ ] Merging of cells with small area (2D) or volume (3D) for cut cells; ```,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3123:4130,test,test,4130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123,1,['test'],['test']
Testability,Merge after tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1115545126:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1115545126,1,['test'],['tests']
Testability,Merge when tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3215#issuecomment-1690031565:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3215#issuecomment-1690031565,3,['test'],['tests']
Testability,Merging because all tests pass (it's just docs that don't build).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1540#issuecomment-816815511:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1540#issuecomment-816815511,1,['test'],['tests']
Testability,Mid-Level Enzyme + Oceananigans Integration Test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3346:44,Test,Test,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3346,1,['Test'],['Test']
Testability,"Might be cool to be able to dispatch on the order so the order could be specified as part of the model, e.g. ```julia; model = ShallowWaterModel(grid=grid, order=4); ```. and it would make it easier to use the operators in other models. We could define new types like. ```julia; struct SecondOrderCenteredDifference end # one option; struct CenteredDifference{N} end # another option; ```. then dispatch on `::SecondOrderCenteredDifference` or `::CenteredDifference{Val{4}}` or we could dispatch on numbers via `Val`. ```julia; julia> δ(i, A, ::Val{2}) = A[i] - A[i-1]; δ (generic function with 1 method). julia> δ(i, A, ::Val{4}) = (-2A[i+1] + 16A[i] - 16A[i-1] +2A[i-2]) / 12; δ (generic function with 2 methods). julia> δ(10, collect(1:20) .^ 2, Val(2)); 19. julia> δ(10, collect(1:20) .^ 2, Val(4)); 15.833333333333334; ```. but might have to be careful to [avoid performance regressions with `Val`](https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-value-type). That said it might take a non-trivial amount of refactoring to support and test dispatching on the operator order, at least for the incompressible model. Maybe it makes sense for `ShallowWaterModel` to add support for 4th-order operators first (with or without dispatch, probably easier without first) and from there we can investigate how to generalize?. If we go all out and start supporting lots of different operators I wonder if it's worth looking into [FiniteDiff.jl](https://github.com/JuliaDiff/FiniteDiff.jl) or [FiniteDifferences.jl](https://github.com/JuliaDiff/FiniteDifferences.jl). Not sure what role these packages would play. From skimming the FiniteDifferences.jl README it seems that there are no higher-order non-allocating implementations between the two packages.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1265#issuecomment-740952155:1066,test,test,1066,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1265#issuecomment-740952155,1,['test'],['test']
Testability,"Might be good to add a test (or more than just one) for windowed fields. Even a simple one like. ```julia; windowed_field = CenterField(grid, indices=(:, :, 1:1)); @test view(windowed_field, :, :, 1:1) isa AbstractArray; ```. or something. @siddharthabishnu can you add that? Pretty basic test so probably belongs in `test_field.jl`:. https://github.com/CliMA/Oceananigans.jl/blob/sb/extend-parent-indices/test/test_field.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2088811397:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2088811397,8,['test'],['test']
Testability,Might be good to come up with a minimal example that benchmarks a computation without setting up a simulation. In that benchmarking script I think we should also benchmark. ```julia; averaged_computed_s = AveragedField(ComputedField(s)); compute!(averaged_computed_s); ```. May want to profile too. Hopefully this is any easy fix.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-951078455:53,benchmark,benchmarks,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-951078455,3,['benchmark'],"['benchmark', 'benchmarking', 'benchmarks']"
Testability,"Might be useful at the REPL for interactive stuff cause you can write. ```julia; julia> N² = compute!(α * ∂z(T) - β * ∂z(S)); ```. for example. If people like, I'll add docs and a test or two. I guess the equivalent one-liner right now is. ```julia; julia> N² = @compute Field(α * ∂z(T) - β * ∂z(S)); ```. and the equivalent two-liner is. ```julia; julia> N² = Field(α * ∂z(T) - β * ∂z(S)); julia> compute!(N²); ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2235:180,test,test,180,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2235,1,['test'],['test']
Testability,"Might be worthwhile to profile with `timestepper=:RungeKutta3` as a sanity check, considering that this benchmark suggests a simple time-stepping function is 12% (!) of the cost. Another thought --- we should probably benchmark ""fully loaded"" models that at least use WENO advection (and perhaps some turbulence closure?), since that's more realistic. I think most usage of `NonhydrostaticModel` also has one tracer, rather than two (someday, we should change that default...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890002262:104,benchmark,benchmark,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890002262,4,['benchmark'],['benchmark']
Testability,Might make sense to figure out how to `@assert` that the benchmark is configured correctly?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885658285:40,assert,assert,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885658285,2,"['assert', 'benchmark']","['assert', 'benchmark']"
Testability,Might not be enough so let's check. I think maybe `GridFittedBottom` and `GridFittedBoundary` need to know about `Flat` too?. Should add a test too. @simone-silvestri ; @raphaelouillon. Closes #2479,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2532:139,test,test,139,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2532,1,['test'],['test']
Testability,Might not end up being merged but testing if using shared memory for the `calculate_interior_source_terms` kernel via GPUifyLoop's `@stencil` abstraction improves performance for register-heavy kernels. We can use #289 to benchmark. Reliant on https://github.com/vchuravy/GPUifyLoops.jl/issues/85.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/293:34,test,testing,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/293,2,"['benchmark', 'test']","['benchmark', 'testing']"
Testability,"Might've been this one:. https://github.com/CliMA/Oceananigans.jl/blob/fa5e280115f619d01a460f012328bd7e6d253b38/test/test_netcdf_output_writer.jl#L552. But there were also some user issues which lead us to believe it wasn't just about making sure the tests were good, as a recall. We can still take an opinionated stance that this is an important enough issue that it's worth some temporary user confusion.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3214#issuecomment-1679450417:112,test,test,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3214#issuecomment-1679450417,2,['test'],"['test', 'tests']"
Testability,Model verification tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/81:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/81,1,['test'],['tests']
Testability,Modify `test_dynamics.jl` to includes tests for `ShallowWaterModel`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1448:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1448,1,['test'],['tests']
Testability,More benchmarks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/300:5,benchmark,benchmarks,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/300,1,['benchmark'],['benchmarks']
Testability,More comprehensive testing for immersed boundaries,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1937:19,test,testing,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1937,1,['test'],['testing']
Testability,More powerful and elegant benchmarking framework,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1088:26,benchmark,benchmarking,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1088,1,['benchmark'],['benchmarking']
Testability,"More proper MPI etiquette, overlapping halo communication, and better scaling benchmarks",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1505:78,benchmark,benchmarks,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1505,1,['benchmark'],['benchmarks']
Testability,More tests for boundary conditions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2103:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2103,1,['test'],['tests']
Testability,"More thoughts. . 1. I'm reading the discussion on immersed boundary methods (IBMs) with interest on [#916](https://github.com/CliMA/Oceananigans.jl/issues/1036). It should be pointed out that this would be a great thing to test in a shalllow water model since there is no pressure inversion and it's much easier to resolve the horizontal, since we have no vertical. 2. Climate Machine also has a shallow water [model](https://github.com/CliMA/ClimateMachine.jl/blob/master/src/Ocean/ShallowWater/ShallowWaterModel.jl). I don't know the details of what this does but I should probably learn how the two models will differ.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1165#issuecomment-726868983:223,test,test,223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1165#issuecomment-726868983,1,['test'],['test']
Testability,More unit tests and comprehensive GPU testing.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/134:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/134,2,['test'],"['testing', 'tests']"
Testability,Most of the convergence tests run in a reasonable amount of time except for a few:. For example: https://buildkite.com/clima/oceananigans-validation-experiments/builds/137. * CPU Gaussian advection-diffusion: ~2:40 hours; * GPU Gaussian advection-diffusion: ~1:45 hours; * CPU forced flow free-slip: ~8 hours. I think for the Gaussian advection-diffusion tests we can just reduce the number of iterations. Some tests run for 26214 iterations. Not sure why the CPU forced flow free-slip is so slow though. It's a 2D simulation. The CPU forced flow fixed-slip is similar I think and takes only ~20 minutes.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1420:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1420,3,['test'],['tests']
Testability,Most of the sandbox scripts are very stale and could be misleading so I'm nuking them. Simulation scripts should go in respective repositories at this point. Sandbox scripts that are worth making into examples can go into `examples/`.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/367:12,sandbox,sandbox,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/367,2,"['Sandbox', 'sandbox']","['Sandbox', 'sandbox']"
Testability,Move Enzyme extension tests to dedicated test group,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3347:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3347,2,['test'],"['test', 'tests']"
Testability,"Moving a discussion from the slack channel here. . Basically I think it would be useful to have a way to compute averages inside a subset of the domain. From what I get understand from the discussion there are two ways to do this:. - Allowing to pass something like a `FieldSlicer` to `AveragedField`, which would then slice the field before computing the average. This was my original idea, but according to @glwagner it might be tricky.; - Creating something like `WindowedSpatialAverage`, for this purpose specifically. @glwagner suggested something like (not tested):. ```julia; struct WindowedSpatialAverage{F, I, J, K, D}; field :: F; i :: I; j :: J; k :: K; dims :: D; end. WindowedSpatialAverage(field; dims, i=Colon(), j=Colon(), k=Colon()) = WindowedSpatialAverage(field, i, j, k, dims). function (wsa::WindowedSpatialAverage)(model); compute!(wsa.field); window = view(data(wsa.field), wsa.i, wsa.j, wsa.k); return mean(window, dims=wsa.dims); end; ```. CC: @glwagner @ali-ramadhan",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1392:563,test,tested,563,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1392,1,['test'],['tested']
Testability,Moving the vertically stretched tests to a different file is what I was thinking also! :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021789897:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021789897,1,['test'],['tests']
Testability,"Multiple forcing is tested but all the forcing tests just check that they don't error, so I expect in this situation the advective forcing would have no effect but wouldn't error. Perhaps all of the forcing tests should really have something checking that they are changed, the forcing a could all just be set to return 1 and then we check that all of the tracers that are forced are not zero at the end?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1715564474:20,test,tested,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1715564474,3,['test'],"['tested', 'tests']"
Testability,Multithreading benchmarks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/869:15,benchmark,benchmarks,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/869,1,['benchmark'],['benchmarks']
Testability,Must not be tested.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3871:12,test,tested,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3871,1,['test'],['tested']
Testability,"My fault, must have messed up and forgot to skip `_apply_*_bcs!` for `NotFluxBC` in PR #631. . Fixes #675 and should fix failing tests on PR #671. Before:; ```; ──────────────────────────────────────────────────────────────────────────────────────; Static ocean benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 24.3s / 2.17% 1.83GiB / 18.1% . Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────; 32× 32× 32 [CPU, Float32] 10 256ms 48.6% 25.6ms 170MiB 50.0% 17.0MiB; 32× 32× 32 [CPU, Float64] 10 270ms 51.4% 27.0ms 170MiB 50.0% 17.0MiB; ──────────────────────────────────────────────────────────────────────────────────────; ```. After:; ```; ──────────────────────────────────────────────────────────────────────────────────────; Static ocean benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 126s / 62.8% 1.46GiB / 0.13% . Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────; 32× 32× 32 [CPU, Float32] 10 39.4s 49.9% 3.94s 1.00MiB 50.0% 102KiB; 32× 32× 32 [CPU, Float64] 10 39.5s 50.1% 3.95s 1.00MiB 50.0% 102KiB; ──────────────────────────────────────────────────────────────────────────────────────; ```. Unfortunately still a bit higher than v0.22.0 (~50 KiB allocations) but much better and more acceptable than 17 MiB!. Remaining memory allocations seem to be occuring in `fill_halo_regions.jl` but tried inlining some functions and didn't help so I'll revisit the problem in the future. ```; julia> analyze_malloc("".""); 323-element Array{CoverageTools.MallocInfo,1}: ; ⋮ ; CoverageTools.MallocInfo(5008, ""./benchmark/benchmark_static_ocean.jl.32885.mem"", 36) ; CoverageTools.MallocInfo(5952, ""./benchmark/benchmark_utils.jl.32885.mem"", 35) ; CoverageTools.MallocInfo(6080, ""./src/TimeSteppers/time_stepping_kernels.jl.32885.mem"", 139) ; Cove",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/685:129,test,tests,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/685,3,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"N `query(s::CuStream)` is deprecated, use `isdone(s)` instead. -@-> /g/data/v45/nc3020/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:41; [2023/02/21 06:37:54.934] INFO ... initial time step complete (22.395 seconds).; [2023/02/21 06:37:56.880] INFO Simulation is stopping. Model iteration 20 has hit or exceeded simulation stop iteration 20.; [2023/02/21 06:38:00.743] INFO Δu: min=-3.188983e-08, max=+2.966291e-08, mean=+3.932481e-11, absmean=+1.978398e-09, std=+5.640766e-09 (16384/16384 matching grid points); [2023/02/21 06:38:00.744] INFO Δv: min=-2.539346e-09, max=+1.967717e-09, mean=+2.462280e-12, absmean=+1.480658e-10, std=+4.143014e-10 (16488/16512 matching grid points); [2023/02/21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme w",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:13651,test,test,13651,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['test']
Testability,"N, ft), t_cpu/t_gpu); 76 end; 77 end; 78 ; 79 end # module; Static ocean benchmark: Test Failed at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:23; Expression: run_script(replace_strings, ""static_ocean"", benchmark_filepath(""static_ocean"")); Stacktrace:; [1] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:23; [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [3] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:16; [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [5] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:13; [6] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [7] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:10; Running channel benchmark: 16× 16× 16 [CPU, Float32]...; Running channel benchmark: 16× 16× 16 [CPU, Float64]...; Running channel benchmark: 16× 16× 16 [GPU, Float32]...; Running channel benchmark: 16× 16× 16 [GPU, Float64]... Oceananigans v0.34.1; 1 module _Test_channel_; 2 using Printf; 3 using TimerOutputs; 4 using Oceananigans; 5 using Oceananigans.Utils; 6 ; 7 include(""benchmark_utils.jl""); 8 ; 9 #####; 10 ##### Benchmark setup and parameters; 11 #####; 12 ; 13 const timer = TimerOutput(); 14 ; 15 Nt = 10 # Number of iterations to use for benchmarking time stepping.; 16 ; 17 # Model resolutions to benchmarks. Focusing on 3D models for GPU benchmarking.; 18 Ns = [(16, 16, 16)]; 19 float_types = [Float32, Float64] # Float types to benchmark.; 20 archs = [CPU()] # Architectures to benchmark on.; 21 @hascuda archs = [CPU(), GPU()] # Benchmark GPU on systems with CUDA-enabled GPUs.; 22 ; 23 #####; 24 ##### Run benchmarks; 25 #####; 26 ; 27 for arch in ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:107256,test,test,107256,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,"NING: Method definition parameterized_discrete_func(Any, Any, Any, Any, Any, Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:163 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition parameterized_fun(Any, Any, Any, Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:165 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition field_dependent_fun(Any, Any, Any, Any, Any, Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:166 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition exploding_fun(Any, Any, Any, Any, Any, Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:167 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition integer_bc(Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:170 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition integer_bc(Any, Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:170 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition integer_bc(Any, Any, Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:170 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition float_bc(Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:171 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition float_bc(Any, Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:171 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition float_bc(Any, Any, Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_ru",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3511:17771,test,test,17771,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3511,1,['test'],['test']
Testability,"NaNs often occur either because the time step is too small, or because the problem being posed is too extreme or not physical (such that a reasonable and stable time step cannot be found). One issue is that the use of `ValueBoundaryCondition` is incorrect here:. ```julia; w_bcs = WVelocityBoundaryConditions(grid, top = ValueBoundaryCondition(0.0), bottom=ValueBoundaryCondition(0.0)); ```. You are trying to specify an impenetrable boundary condition on the vertical velocity, which requires `NormalFlowBoundaryCondition`:. ```julia; w_bcs = WVelocityBoundaryConditions(grid, top = NormalFlowBoundaryCondition(0.0), bottom=NormalFlowBoundaryCondition(0.0)); ```. this is also the default for a grid with `topology(grid) = (Periodic, Periodic, Bounded)`, so there's no need to specify it explicitly. In other words, try changing . ```julia; boundary_conditions = (u=u_bcs, v=v_bcs, w=w_bcs, T=T_bcs)); ```. to . ```julia; boundary_conditions = (u=u_bcs, v=v_bcs, T=T_bcs)); ```. in your constructor for `IncompressibleModel`. A good approach for developing a complex simulation is to start with something simple (or something that worked previously) and modify the script incrementally (slowly!), re-running and re-testing the script after each significant change. For this is useful to run either a two-dimensional version of the problem or a very low resolution simulation. I also suggest adding some lines at the bottom of your script to plot the solution so you can visually inspect it after a run. Your setup looks like a laboratory-scale simulation of convection. I think starting with uniform cooling (rather than spatially varying), omitting the effect of salinity, and using an `IsotropicDiffusivity` in two-dimensions (rather than starting out in three dimensions) might be a good path forward for working and building up your script.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1432#issuecomment-791953056:1216,test,testing,1216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1432#issuecomment-791953056,2,['test'],['testing']
Testability,Need more tests for `single_column_model_mode` and `slice_ensemble_model_mode`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2219:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2219,1,['test'],['tests']
Testability,Need test for (Cu)Array of `IsopycnalSkewSymmetricDiffusivity` closures,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2258:5,test,test,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2258,1,['test'],['test']
Testability,Need test for non-trivial fluxes along two boundaries,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1938:5,test,test,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1938,1,['test'],['test']
Testability,Need to add some tests before merging though. cc @tomchor,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1260:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1260,1,['test'],['tests']
Testability,Need to test that time stepping works with all diffusivity closures,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/539:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/539,1,['test'],['test']
Testability,New Benchmarks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722:4,Benchmark,Benchmarks,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722,1,['Benchmark'],['Benchmarks']
Testability,New Threaded Benchmark Scripts,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881:13,Benchmark,Benchmark,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881,1,['Benchmark'],['Benchmark']
Testability,New benchmarking framework,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1169:4,benchmark,benchmarking,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1169,1,['benchmark'],['benchmarking']
Testability,New branch **fjp/generalize-runge-kutta-3**:. I did 2 trials to try and get an idea of the variance we can expect. Sorry if this is too much information. Trial 1: ; ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ Float32 │ 32 │ 3.770 ms │ 3.925 ms │ 3.975 ms │ 4.535 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float32 │ 64 │ 24.751 ms │ 24.945 ms │ 25.124 ms │ 26.909 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float32 │ 128 │ 218.012 ms │ 218.721 ms │ 219.037 ms │ 220.987 ms │ 247.69 KiB │ 1916 │; │ CPU │ Float64 │ 32 │ 4.253 ms │ 4.437 ms │ 4.509 ms │ 5.229 ms │ 299.80 KiB │ 1916 │; │ CPU │ Float64 │ 64 │ 29.137 ms │ 29.446 ms │ 29.689 ms │ 31.794 ms │ 299.80 KiB │ 1916 │; │ CPU │ Float64 │ 128 │ 257.251 ms │ 258.619 ms │ 259.852 ms │ 270.451 ms │ 299.80 KiB │ 1916 │; │ GPU │ Float32 │ 32 │ 2.489 ms │ 2.591 ms │ 2.755 ms │ 3.150 ms │ 814.41 KiB │ 11740 │; │ GPU │ Float32 │ 64 │ 10.374 ms │ 13.950 ms │ 13.590 ms │ 14.010 ms │ 814.38 KiB │ 11746 │; │ GPU │ Float32 │ 128 │ 88.020 ms │ 125.190 ms │ 122.408 ms │ 133.906 ms │ 814.38 KiB │ 11746 │; │ GPU │ Float64 │ 32 │ 5.323 ms │ 5.438 ms │ 5.431 ms │ 5.573 ms │ 892.33 KiB │ 11574 │; │ GPU │ Float64 │ 64 │ 34.741 ms │ 43.748 ms │ 42.586 ms │ 44.978 ms │ 892.30 KiB │ 11580 │; │ GPU │ Float64 │ 128 │ 279.110 ms │ 333.392 ms │ 328.209 ms │ 335.085 ms │ 892.30 KiB │ 11580 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; [2020/11/26 16:03:50.829] INFO Writing Incompressible_model_benchmarks.html...; Incompressible model CPU -> GPU speedup; ┌─────────────┬─────┬──────────┬─────────┬─────────┐; │ Float_types │ Ns │ speedup │ memory │ allocs │; ├─────────────┼─────┼──────────┼─────,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734478044:191,benchmark,benchmarks,191,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734478044,1,['benchmark'],['benchmarks']
Testability,"New log level should be enough if we just need flat per-iteration timings to time a few blocks for a few iterations. Are you thinking of just logging raw `@time` data?. I'm not sure if we need anything more than a new log level, but I imagine some of the benefits of using a package like TimerOutputs.jl would make the timer blocks much more useful for debugging and for users. It allows for nested timers and produces a very nice table summary at the end which includes number of calls and average time/memory allocations. This could also be useful for users wishing to time their simulations to figure out how much time is being spent on I/O vs. in kernels vs. solvers vs. callbacks, etc. I guess I also see timers as a debugging tool for users. Could help be figure out cluster filesystem issues or figure out whether Oceananigans or my coupled model (via callback) is the bottleneck. Otherwise if the timers are just a developer debugging tool that dumps timing information, that's useful but it might not be useful for timing real-world scripts/simulations since the log would fill up with a huge number of lines that can't be interpreted without further processing. Here's an example of it in use: https://github.com/JuliaGPU/CUDA.jl/issues/149#issuecomment-461943376 (CUDA.jl has been using TimerOutputs.jl for a long time I think). TimerOutputs.jl is easy to use since you just add `@timeit` blocks but that does add some noise to the code (not sure if more or less than using a timing log level).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-887921831:4,log,log,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-887921831,5,['log'],"['log', 'logging']"
Testability,New plots for convergence test using Plots.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276,1,['test'],['test']
Testability,New strategy for defining architecture in distributed tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3880:54,test,tests,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3880,1,['test'],['tests']
Testability,"Nice work @matinraayai !. Happy to merge this but then what's the plan for @matinraayai to continue to contribute @christophernhill ?. Also, who has access to an AMD GPU to test this code? Any plan for continuous integration testing?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112437720:173,test,test,173,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112437720,2,['test'],"['test', 'testing']"
Testability,Nice! Tests are passing :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2695#issuecomment-1230430646:6,Test,Tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2695#issuecomment-1230430646,1,['Test'],['Tests']
Testability,"Nice!. I was actually going to advocate for adding such a utility because I've found myself running a few tests where the time steps are likely to be diffusion limited:; 1. possibly stratified Couette flow sometimes,; 2. the Pearson vortex test from PR #336,; 3. more recently the [forced flow test](https://github.com/climate-machine/Oceananigans.jl/blob/5355044deae3120134b55cc20f6e38f637eea6a5/test/verification/forced_flow.jl) from (Brown, Cortez, & Minion, 2000) that I'm using to test whether our operator-splitting method is second-order accurate in both velocity and pressure. For geophysical flows, the time step will almost always be limited by advection, but there seem to be many other flows where the time step will be limited by diffusion. So if we want a package that is usable for not just geophysical flows, it would be nice to have adaptive time stepping that works with both advective and diffusive CFL.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/360#issuecomment-526919951:106,test,tests,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/360#issuecomment-526919951,5,['test'],"['test', 'tests']"
Testability,Nice!. Is there a test we could add that might catch this bug?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1194591286:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1194591286,1,['test'],['test']
Testability,"Nice, thanks for testing that. I found the second bug (which was created by the bugfix). I think it should work now. This could allow us to eliminate the hydrostatic pressure from the nonhydrostatic model and thereby save allocating one field. @simone-silvestri . Apparently all our prior tests were flawed because of this bug. We still need the hydrostatic pressure integral in the hydrostatic model.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518043988:17,test,testing,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518043988,2,['test'],"['testing', 'tests']"
Testability,"Nice, thanks!. I'm pretty surprised that `ab2_step_field!` dominates the cost. `ab2_step_field!` is this simple function:. https://github.com/CliMA/Oceananigans.jl/blob/9ecddac3fe2666e05f21e51b81ec2c403094e5ea/src/TimeSteppers/quasi_adams_bashforth_2.jl#L121. which seems much cheaper than something like `calculate_Gu!`. What's going on?. I'm also noticing that function is a bit sketchy because it uses the type of `χ` to convert `1.5` and `0.5`. This is fine if `χ` is a floating point number, but not otherwise... it should probably use `eltype(U)`. . How did you run the profiler? Does it make sense to add a new `profile` directory to the source code (or maybe just add something to `benchmark/`)?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890001070:690,benchmark,benchmark,690,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890001070,2,['benchmark'],['benchmark']
Testability,Nice. It's not tested until we use that example though. We could also go the extra step of testing it directly if we are going to add it separately>?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3815#issuecomment-2388996691:15,test,tested,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3815#issuecomment-2388996691,2,['test'],"['tested', 'testing']"
Testability,"No clue, but the reference linked in the original post tests some cases and includes a discussion.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1704#issuecomment-876058323:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1704#issuecomment-876058323,1,['test'],['tests']
Testability,"No worries don't apologies! I made the same mistake after reading [Hendrik Ranocha's blog post](https://ranocha.de/blog/Optimizing_EC_Trixi) and seeing. ![image](https://user-images.githubusercontent.com/15271942/128191753-8febcd84-8230-4def-ba80-8aaf848b92a0.png). But this is actually the output of benchmarking on individual components of the time-stepping scheme. I think it'd be a good idea to setup similar microbenchmarks of the time-stepping components (`update_state!`, `calculate_tendencies!`, etc). This is not quite the same as profiling but yields slightly more precise and also more digestible information about timings and relative cost of things per time-step.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-892672795:301,benchmark,benchmarking,301,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-892672795,1,['benchmark'],['benchmarking']
Testability,No worries!; it brings up an issue that regression tests and generation scripts should not rely on default args/kwargs,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3500#issuecomment-1981728258:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3500#issuecomment-1981728258,1,['test'],['tests']
Testability,"No, I did. ```; julia -O0 --color=yes --project -e 'using Pkg; Pkg.test()'; ```. which I took from buildkite.yml",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1545542718:67,test,test,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1545542718,1,['test'],['test']
Testability,"No, on main all tests are done in O(1h)… :(; But it’s strange.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2102609149:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2102609149,1,['test'],['tests']
Testability,None of the examples or validation tests changed,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1706577311:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1706577311,1,['test'],['tests']
Testability,"None of the individual test runs took very long, but our CI pipeline is clogged up due to this hanging issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-818309942:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-818309942,1,['test'],['test']
Testability,None other than it requires typing the code and adding a test or two. Are you suggesting extending the capabilities of `FieldSlicer`? I think that's a nice idea if so!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1512#issuecomment-809903134:57,test,test,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1512#issuecomment-809903134,1,['test'],['test']
Testability,"Not sure if the bug label is appropriate here but `ShallowWaterModel` is instantiated with uh = vh = h = 0 and the tendencies have 1/h terms in them so time stepping this ""empty"" shallow water model leads to blow up. This is generally fine: if you time-step a nonsensical model it should blow up. The issue is that we add a NaN checker by default (which will still be there in #1138) so the shallow water time stepping tests keep triggering the NaN checker and failing. Should we just disable NaN checking for these tests by removing the NaN checker via `delete!(simulation.diagnostics, :nan_checker)`?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1262:419,test,tests,419,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1262,2,['test'],['tests']
Testability,Not sure if this is fully correct but qualitatively the Gaussian blob remains coherent due to geostrophic balance and we get Kelvin waves on the boundary. Was hoping we could merge this PR as it gets the cubed sphere face grid working (and it seems to be working okay pending more rigorous validation tests). Not sure if we'll keep the surface gravity waves validation experiment but might be good to use it for the full cubed sphere as well. https://user-images.githubusercontent.com/20099589/112829246-d6342800-905e-11eb-89fc-4f77a3eb8521.mp4,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1480#issuecomment-809299564:301,test,tests,301,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1480#issuecomment-809299564,1,['test'],['tests']
Testability,"Not sure what ""squash and merge"" means but I deleted the file locally and then wanted to push the change but couldn't. If someone can tell me how to delete it I'm happy to do it. Also, I see that the tests pass so my use of `Polynomials` presumably worked?. Anything else that people would like done before someone approves this PR?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1650#issuecomment-839735472:200,test,tests,200,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1650#issuecomment-839735472,1,['test'],['tests']
Testability,Not sure why the matrix solver test failed,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3237#issuecomment-1694660034:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3237#issuecomment-1694660034,1,['test'],['test']
Testability,Not sure why the poisson solver test failed again but only on CPU,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1515044071:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1515044071,1,['test'],['test']
Testability,Not sure why the poisson test has failed now...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1514631344:25,test,test,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1514631344,1,['test'],['test']
Testability,Not sure why this test failed since I only changed some formatting,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1252316466:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1252316466,1,['test'],['test']
Testability,"Not that I know of, so we should maybe write a test to check that it's correct?. Also, this code should use `Integral`:. https://github.com/CliMA/Oceananigans.jl/blob/13b7f2366726b3e52303dee67bab264941088554/src/AbstractOperations/metric_field_reductions.jl#L74",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2735#issuecomment-1244085315:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2735#issuecomment-1244085315,1,['test'],['test']
Testability,Note on testing for this issue: the output is often correct for the _first_ evaluation of the average. Subsequent evaluations seem to produce the error.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1767#issuecomment-870888870:8,test,testing,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1767#issuecomment-870888870,1,['test'],['testing']
Testability,"Note that there is a validation test for couette flow here:. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/immersed_couette_flow.jl. So apparently this is only a problem with the API for specifying fluxes on individual boundary facets. Ie this works:. ```julia; u_immersed_bc = ValueBoundaryCondition(-1); u_top_bc = ValueBoundaryCondition(1); u_bcs = FieldBoundaryConditions(immersed=u_immersed_bc, top=u_top_bc); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3141#issuecomment-1582837617:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3141#issuecomment-1582837617,1,['test'],['test']
Testability,"Note there is already substepping implemented for CATKEVerticalDiffusivity and TKEDissipationVerticalDiffusivity. What are the challenges? For the closures this feature was relatively straightforward to implement. But this PR seems quite large. For many reasons it is often better to open the PR _first_ (better yet, an issue that defines the problem, so we can discuss designs), rather than at a late stage where feedback is difficult to manifest. Also, rather than supporting this generally for all time-steppers, I would argue that the correct approach is to implement this for just one model and one time-stepper. Once the proof of concept is well developed and tested, it can be applied more broadly in a separate PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3888#issuecomment-2450582918:666,test,tested,666,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3888#issuecomment-2450582918,2,['test'],['tested']
Testability,"Note to @glwagner : In this PR I had changed the default halo size from 1 to 3. Unfortunately, lots of the tests have implicitly assumed the halo size is 1, hence I had over 200 errors. I have therefore changed it back to 1 I think it should be changed in a separate PR as it is not a trivial task.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1504#issuecomment-806235788:107,test,tests,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1504#issuecomment-806235788,1,['test'],['tests']
Testability,Note to self that `cpu_poisson_solver_tests_2` is relatively cheap so we should add the CG Poisson solver tests there.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3890#issuecomment-2451038507:106,test,tests,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3890#issuecomment-2451038507,1,['test'],['tests']
Testability,Note to self: this behavior can also create a headache in testing.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1734#issuecomment-881927760:58,test,testing,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1734#issuecomment-881927760,1,['test'],['testing']
Testability,"Note: I couldn't find any tests for this, so it'd probably be a good idea to add some here before merging.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-1590176837:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3143#issuecomment-1590176837,1,['test'],['tests']
Testability,"Note: we probably need more tests for `FieldTimeSeries` specifically as well to ensure more robust behavior. These are a little more annoying to design though, I will leave for the future.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3225#issuecomment-1689958017:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3225#issuecomment-1689958017,1,['test'],['tests']
Testability,"Nothing has changed over at CI, so this looks like a legitimate issue?. That said, you are [using](https://github.com/climate-machine/Oceananigans.jl/blob/master/.gitlab-ci.yml) the `v4` templates, which do `pkg""develop""` and as a result ignore the Manifest. Maybe that's related? You might want to use the new `v5` templates, which do `pkg""instantiate""` (respecting the manifest) with a simpler CI organization (single `test.yml`, include file with extensible templates instead of predefined jobs).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/425#issuecomment-536881361:421,test,test,421,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/425#issuecomment-536881361,1,['test'],['test']
Testability,"Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}}}); @ Enzyme.Compiler ~/.julia/packages/Enzyme/8GSlk/src/rules/jitrules.jl:483; [48] #update_state!#71; @ ~/Projects/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/single_column_model_mode.jl:74; [49] set!; @ ~/Projects/Oceananigans.jl/src/Fields/set!.jl:33 [inlined]; [50] #apply_regionally!#56; @ ~/Projects/Oceananigans.jl/src/Utils/multi_region_transformation.jl:121 [inlined]; [51] apply_regionally!; @ ~/Projects/Oceananigans.jl/src/Utils/multi_region_transformation.jl:118 [inlined]; [52] macro expansion; @ ~/Projects/Oceananigans.jl/src/Utils/multi_region_transformation.jl:206 [inlined]; [53] #set!#40; @ ~/Projects/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:60 [inlined]; [54] set!; @ ~/Projects/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:48 [inlined]; [55] buoyancy_variance!; @ ~/Projects/Oceananigans.jl/test/test_enzyme.jl:246; [56] #time_step!#8; @ ~/Projects/Oceananigans.jl/src/TimeSteppers/quasi_adams_bashforth_2.jl:96; [57] macro expansion; @ ~/.julia/packages/Enzyme/8GSlk/src/compiler.jl:8839 [inlined]; [58] enzyme_call; @ ~/.julia/packages/Enzyme/8GSlk/src/compiler.jl:8405 [inlined]; [59] CombinedAdjointThunk; @ ~/.julia/packages/Enzyme/8GSlk/src/compiler.jl:8178 [inlined]; [60] autodiff; @ ~/.julia/packages/Enzyme/8GSlk/src/Enzyme.jl:491 [inlined]; [61] autodiff; @ ~/.julia/packages/Enzyme/8GSlk/src/Enzyme.jl:537 [inlined]; [62] autodiff(::ReverseMode{false, true, FFIABI, false, false}, ::typeof(buoyancy_variance!), ::Duplicated{HydrostaticFreeSurfaceModel{QuasiAdamsBashforth2TimeStepper{Float64, @NamedTuple{u::Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Flat, Flat, Bounded, Float64, Float64, Float64, Nothing, Nothing, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, Off",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596:136872,test,test,136872,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596,1,['test'],['test']
Testability,"Nothing, Nothing, Nothing, Nothing}, buoyancy::Nothing, coriolis::Nothing, free_surface::ImplicitFreeSurface{Nothing, Float64, Nothing, Nothing, Symbol, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, forcing::NamedTuple{(), Tuple{}}, closure::Nothing, boundary_conditions::NamedTuple{(), Tuple{}}, tracers::Nothing, particles::Nothing, velocities::Nothing, pressure::Nothing, diffusivity_fields::Nothing, auxiliary_fields::NamedTuple{(), Tuple{}});   | @ Oceananigans.Models.HydrostaticFreeSurfaceModels ~/builds/tartarus-1/clima/oceananigans/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_model.jl:113;   | [2] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:41 [inlined];   | [3] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:9;   | [5] include(fname::String);   | @ Base.MainInclude ./client.jl:444;   | [6] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:65 [inlined];   | [7] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [8] macro expansion;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:58 [inlined];   | [9] macro expansion;   | @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined];   | [10] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/test/runtests.jl:4;   | [11] include(fname::String);   | @ Base.MainInclude ./client.jl:444;   | [12] top-level scope;   | @ none:6;   | [13] eval;   | @ ./boot.jl:360 [inlined];   | [14] exec_options(opts::Base.JLOptions);   | @ Base ./client.jl:261;   | [15] _start();   | @ Base ./client.jl:485;  ; ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185:2309,test,test,2309,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185,1,['test'],['test']
Testability,Noticed this because `test_diffusion_cosine` was failing in PR #462. We should have that `length(zC) == Nz` but; ```julia; julia> Nz = 16; Lz = π/2; Δz = Lz / Nz; zC = -Lz+Δz/2:Δz:-Δz/2; length(zC); 16. julia> Nz = 32; Lz = π/2; Δz = Lz / Nz; zC = -Lz+Δz/2:Δz:-Δz/2; length(zC); 32. julia> Nz = 64; Lz = π/2; Δz = Lz / Nz; zC = -Lz+Δz/2:Δz:-Δz/2; length(zC); 63. julia> Nz = 128; Lz = π/2; Δz = Lz / Nz; zC = -Lz+Δz/2:Δz:-Δz/2; length(zC); 127. julia> Nz = 256; Lz = π/2; Δz = Lz / Nz; zC = -Lz+Δz/2:Δz:-Δz/2; length(zC); 255; ```. Looks like a scary effect of round-off error to me. I'll make the switch to using the `range` function with a fixed `length` and add a test to check for this.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/480:667,test,test,667,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/480,1,['test'],['test']
Testability,"Now I've looked harder I've realized that this issue is only for bounded domains so my original fix is incorrect for periodic domains since they are [xmin, xmax) not [xmin, xmax] like bounded domains. Fixed this now. I've changed the position of the particles in the existing tests so that they should be affected by the change if that works? For the x I put it on the edge so it gets advected out (and will have been looped round even without the fix), y near the boundary but should not get looped round, and for the z I've put it near the boundary where previously it will have been moved but should not have been.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1195305243:276,test,tests,276,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1195305243,1,['test'],['tests']
Testability,Now a test ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046351867:6,test,test,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046351867,1,['test'],['test']
Testability,Now begins the slog to fix all the tests haha. Looks like `show_fields.jl` is complaining that `Center` is not defined: https://buildkite.com/clima/oceananigans/builds/982#b79d3314-e323-4bce-a443-35926baf3803/40-133,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766164070:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766164070,1,['test'],['tests']
Testability,"Now the shallow water tests are failing, on top of the distributed shallow water tests. It seems to be in using `set!`. Hmm... ```; julia> set!(model, uh=uh₀, h=h₀); ERROR: type ShallowWaterModel has no field auxiliary_fields; Stacktrace:; [1] getproperty(x::ShallowWaterModel{RegularRectilinearGrid{Float64, Periodic, Periodic, Flat, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, CPU, Float64, UpwindBiasedFifthOrder, Nothing, NamedTuple{(:uh, :vh, :h), Tuple{typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing)}}, Nothing, Nothing, NamedTuple{(:uh, :vh, :h), Tuple{Field{Face, Center, Center, CPU, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, RegularRectilinearGrid{Float64, Periodic, Periodic, Flat, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{Nothing, Nothing}}}}, Field{Center, Face, Center, CPU, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, RegularRectilinearGrid{Float64, Periodic, Periodic, Flat, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Float64, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Boundary",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-843406019:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-843406019,2,['test'],['tests']
Testability,Nuke broken tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/368:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/368,1,['test'],['tests']
Testability,Nuke sandbox,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/367:5,sandbox,sandbox,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/367,1,['sandbox'],['sandbox']
Testability,Nuke vertically stretched sandbox,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1395:26,sandbox,sandbox,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1395,1,['sandbox'],['sandbox']
Testability,"Nukes Couette and Lid-driven flows, and reintroduces figures for convergence tests",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797:77,test,tests,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797,1,['test'],['tests']
Testability,Number of tests went down as a lot of them were regression tests between the three different sets of operators. But we will rebuild.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/96:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/96,2,['test'],['tests']
Testability,OK fixed it. Apparently tests were passing before because the `time_discretization` argument was not working properly.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2288#issuecomment-1059542167:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2288#issuecomment-1059542167,1,['test'],['tests']
Testability,"OK, I added some tests for variably spaced grids as well. @glwagner, what do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1615844030:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1615844030,1,['test'],['tests']
Testability,"OK, I changed only one now just want to see if unit tests on CPU pass. Although, with; https://github.com/CliMA/Oceananigans.jl/blob/a934f7ecbbeed50013b012ae230b1b6587e4e6aa/test/runtests.jl#L56; I'm wondering whether all CPU tests are actually being run with `arch = GPU()`....",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942853591:52,test,tests,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942853591,3,['test'],"['test', 'tests']"
Testability,"OK, I think I know what's the issue. The `interpolate!` now fills halos after interpolation:. https://github.com/CliMA/Oceananigans.jl/blob/29e4aaccc57b6391189700b8a6ac8324aff08805/src/Fields/interpolate.jl#L328. And the tests have a test that interpolates a $w$-velocity field with `Bounded` $z$-topology _but_ with non-zero values at top and bottom. When we fill the halos the boundary conditions are imposed and the interpolated field gets 0 at k=1 and k=Nz but the original field doesn't, so the test fails. This test in particular. https://github.com/CliMA/Oceananigans.jl/blob/29e4aaccc57b6391189700b8a6ac8324aff08805/test/test_field.jl#L171. fails when `f = w`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3395#issuecomment-1911600412:221,test,tests,221,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3395#issuecomment-1911600412,5,['test'],"['test', 'tests']"
Testability,"OK, I think we wrap up this PR and merge it. The advection tests and what not can be another PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1646559753:59,test,tests,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1646559753,1,['test'],['tests']
Testability,"OK, I tried to make the test pass and it doesn't on v0.76.5-v0.76.8 it it won't pass. On v0.77.0 it passes. This hints that the data were created with v0.77.0. @simone-silvestri do you have any recollection of this or a way to figure it out?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439341447:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439341447,1,['test'],['test']
Testability,"OK, in view of the benchmarks at https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1589191799 seems that the additional workers do something but not that much? With 4 workers we can bring the docs from 1h45 -> 1h. Shall we do that for now @glwagner?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1592121216:19,benchmark,benchmarks,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1592121216,1,['benchmark'],['benchmarks']
Testability,"OK, let me put my 2 cents. If we have the validations in the docs just because of the animations then we should just put the animations on YouTube or somewhere and point people there. Having the non-working versions of, e.g., `lid_cavity.jl` script in the repo and in the docs has lead many new users in the rabbit hole of figure it out. Then users feel that scripts are not working, sometimes they post an issue or ask in Slack. But who know how many other users are simply discouraged. Personally, if I download a code that includes non-working pieces of code I am very discouraged. Thus, bottom-line: I see @glwagner's point that the functionality or pipeline for maintaining healthy validations scripts (even a subset of them) then *only those* should be included in the Docs. `Sandbox`: I'm so against a `sandbox` directory! It's like keeping your trash bin in your house for ever in case there is something useful there. I used to to it all the time: I'd keep commented out code in my scripts... But I think it's a bad practice. We need to let go. The repository and the tagged versions should not include half-bake scripts and what not. I'm happy with a sandbox repository `Oceananigans.jl-sandbox` where we keep things. Or a `sandbox` branch even. Regarding this PR and what's should be kept in the Docs: I vote we keep the convergence tests in the docs and nuke the validations. I agree with the git history size issue and probably the method of including the `.png` files that @ali-ramadhan suggests would work -- I've never done it though. (btw, @ali-ramadhan, I've noticed an increase in the repo's size recently... :()",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872556231:810,sandbox,sandbox,810,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872556231,11,"['Sandbox', 'sandbox', 'test']","['Sandbox', 'sandbox', 'tests']"
Testability,"OK, now tests pass but I believe I removed more `@unroll`s than I should. It was only for testing purposes to see if those were the culprit for the warnings. @glwagner could we zoom and put back in the `@unroll`s that we should?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1884393184:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1884393184,2,['test'],"['testing', 'tests']"
Testability,"OK, some regression tests break with this change (probably because the data was produced with the default scheme which was different). Also some unit tests. I'll have a look.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3500#issuecomment-1981553474:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3500#issuecomment-1981553474,2,['test'],['tests']
Testability,"OK, tests pass!!!!!. Woooooohoooooo!!. Ready to review. Ready to move forward to Julia v1.9. cc @glwagner, @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615839629:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615839629,1,['test'],['tests']
Testability,"OK, the idea is that tests should pass in this PR but fail here: https://github.com/CliMA/Oceananigans.jl/tree/ncc/test-show-on-gpu; If that happens I am merging. @glwagner, @ali-ramadhan ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-840084170:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-840084170,2,['test'],"['test-show-on-gpu', 'tests']"
Testability,"OK, when test pass let's merge. And let's open an issue or PR for proper treatment of bathymetry in conservative formulation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144236447:9,test,test,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144236447,1,['test'],['test']
Testability,OK. How are these methods going to be tested and or maintained?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1756046079:38,test,tested,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1756046079,1,['test'],['tested']
Testability,"Oceananigans.Grids.ZDirection}; └── coriolis: Nothing. julia> model_mat = HydrostaticFreeSurfaceModel(grid = grid,; momentum_advection = nothing,; free_surface = ImplicitFreeSurface(solver_method=:HeptadiagonalIterativeSolver,; tolerance = 1e-15)); HydrostaticFreeSurfaceModel{CPU, Float64}(time = 0 seconds, iteration = 0); ├── grid: 128×1×5 RectilinearGrid{Float64, Bounded, Periodic, Bounded} on CPU with 1×1×1 halo; ├── tracers: (:T, :S); ├── closure: Nothing; ├── buoyancy: Buoyancy{SeawaterBuoyancy{Float64, LinearEquationOfState{Float64}, Nothing, Nothing}, Oceananigans.Grids.ZDirection}; └── coriolis: Nothing. julia> typeof(model_pcg.free_surface.implicit_step_solver.right_hand_side); Field{Center, Center, Nothing, Nothing, RectilinearGrid{Float64, Bounded, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, Float64, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing}. julia> typeof(model_mat.free_surface.implicit_step_solver.right_hand_side); Vector{Float64} (alias for Array{Float64, 1}); ```. If this is OK then we need to drop `interior()` from the `right_hand_side` at:; https://github.com/CliMA/Oceananigans.jl/blob/4f730161c8ea189779eed8c3b56961065f7699d3/test/test_implicit_free_surface_solver.jl#L111. cc: @simone-silvestri",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2184:3413,test,test,3413,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2184,1,['test'],['test']
Testability,"Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `91.80% <100.00%> (+2.91%)` | :arrow_up: |; | [src/TurbulenceClosures/diffusion\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9kaWZmdXNpb25fb3BlcmF0b3JzLmps) | `100.00% <100.00%> (ø)` | |; | [...e\_closure\_implementations/isotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2lzb3Ryb3BpY19kaWZmdXNpdml0eS5qbA==) | `100.00% <100.00%> (ø)` | |; | [src/TurbulenceClosures/turbulence\_closure\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfdXRpbHMuamw=) | `75.00% <100.00%> (ø)` | |; | [...urbulenceClosures/viscous\_dissipation\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy92aXNjb3VzX2Rpc3NpcGF0aW9uX29wZXJhdG9ycy5qbA==) | `100.00% <100.00%> (ø)` | |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `100.00% <100.00%> (ø)` | |; | ... and [39 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999?src=pr&el=footer). Last update [e808a82...b56c813](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/999#issuecomment-700403403:3012,test,test,3012,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/999#issuecomment-700403403,2,['test'],['test']
Testability,"Often when running CI, the tests fail on tartarus because of a loading error (there are apparently some missing files),. example; ```; ERROR: LoadError: LoadError: SystemError: opening file ""/storage5/buildkite-agent/.julia-5513/compiled/v1.6/Oceananigans/hU93i_FjLMs.ji"": No such file or directory; ```. Retrying the test clears the error, but maybe we should look a bit into it so that we don't have to manually retry...",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2222:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2222,2,['test'],"['test', 'tests']"
Testability,Oh I see. This was not at all clear to me from your previous question. I thought you were asking whether the new versions dropped support to CuArrays and therefore explain why tests were failing!. Let me get back on your question now that I understand!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613661175:176,test,tests,176,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613661175,2,['test'],['tests']
Testability,Oh no problem. I think there could even be more than one PR. First we just want to show that we can build a latitude longitude grid using OSSG. next we can test dynamics on OSSG and make sure its identical (that's a better test than just visualizing a splash). Then we can design a user interface that makes it easy to build latitdue longitude grid or any other grid on OSSG. Then we can deprecate latitude longitude grid. So there's a lot of ways to break it up. I just thought if OSSG works it'd be nice to demonstrate by running a case on lat lon grid.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3230#issuecomment-1697313519:156,test,test,156,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3230#issuecomment-1697313519,2,['test'],['test']
Testability,Oh this isn't implemented? How do we test it?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389522358:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389522358,1,['test'],['test']
Testability,"Oh, actually that makes sense since the unit test here just does the field allocation, and doesn't hit a KA call that would result in an issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3347#issuecomment-1765418512:45,test,test,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3347#issuecomment-1765418512,1,['test'],['test']
Testability,"Ok @jagoosw I added the test you asked for, let me know what you think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1715929949:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1715929949,1,['test'],['test']
Testability,Ok @simone-silvestri I think this is ready for testing!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2449#issuecomment-1104258234:47,test,testing,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2449#issuecomment-1104258234,1,['test'],['testing']
Testability,"Ok I think I figured it out. The `Float64` values are coming in from functions like `depthᶜᶜᶠ` and `height_above_bottomᶜᶜᶠ`. The main issue is actually the grid coordinates not being fully `Float32`. In particular, when coordinates like `grid.zᵃᵃᶜ` are ranges the reference and step size are `Float64`:. ```julia; julia> r = range(0.0f0, 1.0f0, 16); 0.0f0:0.06666667f0:1.0f0. julia> typeof(r); StepRangeLen{Float32, Float64, Float64, Int64}; ```. You can force it to be `Float32` via:. ```julia; julia> rr = StepRangeLen{Float32, Float32, Float32, Int}(r); 0.0f0:0.06666667f0:1.0f0. julia> typeof(rr); StepRangeLen{Float32, Float32, Float32, Int64}; ```. Doing this in `grid_coordinates.jl` fixes the MWE. Curiously this behavior of `range` is not mentioned in the docs for `range` or `StepRangeLen` but is discussed on the [Julia Discourse](https://discourse.julialang.org/t/the-type-of-a-range-step-defined-as-float32-changes-to-float64/27411). Well looks like it was briefly mentioned in the `StepRangeLen` docstring in 2019. The step size being twice the precision is supposed to help with rounding errors. But maybe on the GPU it can do more harm than good?. I can see how this leads to type promotion to `Float64` but I'm not totally sure how having a `Float64` reference and step size leads to illegal memory accesses. I'm also surprised that this issue never cropped up before. On another note, I wonder if this had any impact on performance. I'm curious to do some benchmarking before and after this change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2445532635:1474,benchmark,benchmarking,1474,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2445532635,1,['benchmark'],['benchmarking']
Testability,"Ok here's something simple:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); model = NonhydrostaticModel(; grid, advection=WENO()). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Here's what I've done:. * Run this on fresh clone of `main`. This returns. ```julia; julia> include(""../simple_benchmark.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; 20.460 s (144483404 allocations: 94.43 GiB); ```. * Restrict compat on KernelAbstractions to 0.7.2 and CUDAKernels to 0.3.3. This returns:. ```julia; julia> include(""../simple_benchmark.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; 2.202 s (118604 allocations: 52.20 MiB); ```. I'm running on a single core, Mac M1. Here the performance loss is just 10x so I'll change the somewhat dramatic title of this issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481304842:65,Benchmark,BenchmarkTools,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481304842,1,['Benchmark'],['BenchmarkTools']
Testability,"Ok if its just for a quick test rather than extended work, that makes sense",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3555#issuecomment-2069564427:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3555#issuecomment-2069564427,1,['test'],['test']
Testability,"Ok so I don't think we need `nameof` the way to write this is `string(nameof(typeof(scheme)))`, eg:. ```julia; julia> struct Test{T}; a :: T; end. julia> t = Test(1.1); Test{Float64}(1.1). julia> nameof(typeof(t)); :Test. julia> string(nameof(typeof(t))); ""Test""; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986844488:125,Test,Test,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986844488,5,['Test'],['Test']
Testability,"Ok! To summarize, we currently have. https://github.com/CliMA/Oceananigans.jl/blob/b288527ccf34fc17ec4b31a1e9da7bd8b8d25a10/src/Grids/grid_utils.jl#L213. which you propose to change to. ```julia; parent_index_range(index::UnitRange, loc, topo, halo) = 1:(last(index) - first(index) + 1); ```. I definitely agree that the parent index range of a field with indices `4:4` is `1:1` and your code seems correct to me. This is a clear bug --- should we add this to the indices tests? (I'm not sure what the state of the tests is for indices, but this is an obvious gap.). Note that with this change, none of the methods for `parent_index_range` will use the argument `halo`. So that should be removed. (I think `loc` and `topo` are needed to support slicing into ""ensemble grids"" that have a flat direction with more than one grid point... I think.). > since the output writer is trying to view the underlying data at [4:23, 4:23, 4:23]. I think @navidcy discovered a problem with `validate_indices` that may be related. But `restrict_to_interior` may also be broken for sliced fields.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2770#issuecomment-1269256387:472,test,tests,472,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2770#issuecomment-1269256387,4,['test'],['tests']
Testability,"Ok, I can reproduce this. Here's a few observations:. 1. It works when JLD2OutputWriter computes the outputs first.; 2. When NetCDFOutputWriter computes the outputs, the JLD2 output is _also_ wrong. This shows that the output is not being recomputed.; 3. The different between JLD2 and NetCDF is that JLD2 uses a NamedTuple while NetCDF uses Dict. With Dict, the order in which the outputs are computed is not deterministic. Yet that should not matter here, as far as I can tell. So there is a bug somewhere.; 4. I tested changing Dict to OrderedDict and the problem disappears. We can merge this last change. But I'd also like to dig a little further to see if there isn't some more insidious bug, because I don't understand why we _need_ deterministic computation of output. (On the other hand, I think deterministic output computation is a potentially useful feature so it makes sense to support this with NetCDFOutputWriter).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437859485:515,test,tested,515,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437859485,1,['test'],['tested']
Testability,"Ok, I see why this is happening. `conditional_∂z_c` ""throws away"" the immersed boundary when it passes through. ; Since a second derivative is just a first derivative of a first derivative, the immersed condition is tested only on the ""outer"" derivative, which doesn't see the immersed boundary. The inner derivative is then just called on the underlying grid and does not satisfy immersed boundary conditions. This does not happen in the `∇²` operator since the ""inner"" derivative correctly calls the `conditional_∂z_c`, thus being aware of the immersed boundaries. Good catch, I ll solve this issue",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2915#issuecomment-1426334459:216,test,tested,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2915#issuecomment-1426334459,1,['test'],['tested']
Testability,"Ok, I suggest we merge this if regression tests pass as a sort of ""experimental"" PR. The next PR will be a bit more drastic.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1371#issuecomment-780789191:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1371#issuecomment-780789191,1,['test'],['tests']
Testability,"Ok, I will review! Except, tests are failing? Also should we merge main?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1398858625:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1398858625,1,['test'],['tests']
Testability,"Ok, a bit better now!. The following uses some lower-level Oceananigans functions and `KernelFunctionOperation`. I suspect this is a bit more performant, but I'm not sure. The main reason is that I think our broadcasting machinery has some overhead right now, so writing `field .= op` is not all that cheap (we can fix this, but it might take some work). @iuryt if you have the chance to benchmark different solutions, it'd be interesting to hear what works best!. The main downside of this solution is that we need to understand the staggered grid to implement it. Maybe not too onerous (@simone-silvestri thinks I should give users more credit), but part of me feels like we should be able to auto-magic our way around this. The main barrier to using abstract operations here is figuring out how to implement this function with a `ConditionalOperation` (and also having `<` as a valid `BinaryOperation`, eg figuring out #2169). I also like the following because it's the first known example of `auxiliary_fields` being used. Hooray for that! Also I realized that we can just use a linear stratification which is nice. I made the shear stronger to increase the drama. Working on this helped uncover a few wrinkles in the user API:. * `closure = ScalarDiffusivity(VerticallyImplicitTimeDiscretization(); ν, κ=κᵇ)` doesn't work (#2342); * `HydrostaticFreeSurfaceModel(; velocities=velocities)` doesn't work (#2341). ```julia; using Oceananigans; using Oceananigans.Units; using Oceananigans.Operators; using GLMakie. # A bit of code...; @inline f²(i, j, k, grid, f, args...) = @inbounds f(i, j, k, grid, args...)^2. @inline function Riᶜᶜᶜ(i, j, k, grid, U, b); N² = ℑzᵃᵃᶜ(i, j, k, grid, ∂zᶜᶜᶠ, b); S²u = ℑxzᶜᵃᶜ(i, j, k, grid, f², ∂zᶠᶜᶠ, U.u); S²v = ℑyzᵃᶜᶜ(i, j, k, grid, f², ∂zᶜᶠᶠ, U.v); S² = S²u + S²v; return ifelse(S² == 0, zero(eltype(grid)), N² / S²); end. grid = RectilinearGrid(size=128, z=(-100, 0), halo=3, topology=(Flat, Flat, Bounded)); fake_model = HydrostaticFreeSurfaceModel(; grid, trac",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066093967:388,benchmark,benchmark,388,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066093967,1,['benchmark'],['benchmark']
Testability,"Ok, closing in! The last test is without an immersed boundary but with a bathymetry (you need to cap the bathymetry to something like -50m). If this works then we can focus all the attention to the immersed boundary",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2073077696:25,test,test,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2073077696,1,['test'],['test']
Testability,"Ok, the above example works by adding `grid` as a property to the output writer, and then passing `grid` explicitly to the initialization. Making this change required a couple minutes. The main technique was to search the file for `model.grid`, and make the necessary changes to use the user-provided grid instead. In this process I noticed that file initialization, which required the grid, has to occur outside the output writer constructor. This implies that that the ""output writer grid"" (which is now different from the model grid) must be stored within the output writer. So I added a `grid` property to the output writer. These changes took about 5 minutes. However, the main work is still there, to document this and add tests and an example needed. If there's any other source code changes needed I'm happy to put those in. The documentation will take more effort.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2093396001:729,test,tests,729,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2093396001,1,['test'],['tests']
Testability,"Ok. So, to do that, I will fork the main repo and do my modifications.; How can I test the forked repo while running julia?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1079154232:82,test,test,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1079154232,1,['test'],['test']
Testability,"Okay finally tests passed!. @navidcy I tried restarting the tests over and over (honestly more than 10 times over the past few days) and they always failed. I could only make them pass this morning when I restarted them one at a time. That is, starting one, and only restarting the next failed test when the previous one had fully run. So maybe the variability we see in tests has to do with different processes trying to access the same resources... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2223676543:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2223676543,4,['test'],"['test', 'tests']"
Testability,Okay so the segfault was because we were trying to set a field using an `Int128` or `UInt128`. It's not an important test so I removed it but it's a little weird that it just started failing since the test has been in since Oceananigans.jl v0.1.0...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-809391386:117,test,test,117,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-809391386,2,['test'],['test']
Testability,"Okay so there's some bad news: this IBM implementation seems to be pretty slow. . I ran two identical simulations with the same number of points on a GPU, but using a regular grid on one and an immersed boundary grid on the other (with the immersed solid boundaries set to coincide with the domain walls). Apparently for a 16×4×4 grid the IBM version is about 10 times slower than the non IBM one. For a 128×32×32 the factor is of about 8 times , so it doesn't appear to be getting better with increasing grid sizes. The difference seems to be similar (albeit a bit smaller) for CPUs. I'm not sure of what the best way is to speed things up. We could try changing how we implement the if-else clauses (right now we're using nested `ifelse()` functions, which always evaluates all arguments). . Alternatively instead of testing whether or not we're inside or outside the solid (in addition to fluid-solid boundaries) every time we calculate fluxes, we could store the indices that correspond to solid boundaries and solid interior points and IBM launch kernels only on those indices (although I'm not sure how to achieve that for GPUs).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1083958509:819,test,testing,819,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1083958509,1,['test'],['testing']
Testability,"Okay so this MWE reproduces the error:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); time = defDim(ds,""time"",Inf); v = defVar(ds,""temp"",Float32,(""time"",)); ds[""temp""][1] = b. close(ds); ```. However, if I create a variable without an unbouded dimension (i.e. without time) and do the same thing, it works properly:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); v = defVar(ds,""temp"",Float32,()); ds[""temp""][] = b. close(ds); ```. So I think this is an edge case that NCDatasets doesn't yet handle well. I'm gonna create an issue there and see what they say.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454:150,test,test,150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454,2,['test'],['test']
Testability,"Okay, I did some tests and I'm just getting more confused. Here's a more minimal example where I'm creating a simulation with zero everywhere except for a uniform initial condition for `u` and I added Coriolis (to have an inertial oscillation):. ```julia; using Oceananigans; using Oceananigans.Utils; using Oceananigans.Units. grid = RegularRectilinearGrid(size=(4, 4, 4), x=(0, 1e6), y=(0, 1e6), z=(-4e3, 0)); coriolis = FPlane(f=1e-4) # [s⁻¹]. model = IncompressibleModel(; architecture = CPU(),; grid = grid,; coriolis = coriolis,; tracers = NamedTuple(),; buoyancy = nothing,; closure = nothing,; ); set!(model, u=0.4). using Oceanostics: SingleLineProgressMessenger; Δt = 20minutes; simulation = Simulation(model, Δt = Δt, iteration_interval = 20,; stop_time = 3days,; progress = SingleLineProgressMessenger()). using Oceananigans.Fields: ComputedField; using Oceanostics: KineticEnergy. u, v, w = model.velocities # unpack velocity `Field`s. # Vertical vorticity [s⁻¹]; tke_k = KineticEnergy(model, u, v, w); tke_c = ComputedField(@at (Center, Center, Center) (u^2+v^2+w^2)/2). outputs = (tke_c=tke_c, u=u,). using Oceananigans.OutputWriters: NetCDFOutputWriter, TimeInterval, AveragedTimeInterval; simulation.output_writers[:snap] = NetCDFOutputWriter(model, outputs,; schedule = TimeInterval(2Δt),; filepath = ""snap.eady.nc"",; mode = ""c""); simulation.output_writers[:avg] = NetCDFOutputWriter(model, outputs,; schedule = AveragedTimeInterval(2Δt; window=1.999Δt, stride=1),; filepath = ""avg.eady.nc"",; mode = ""c""). @info ""Starting run""; run!(simulation); ```. This produces the wrong result for `u`, reproduced below. (Appears to be a cumulative mean.) . ![u_evolution](https://user-images.githubusercontent.com/13205162/124214589-537c9800-daa7-11eb-99cd-ef90fcc5b8cd.png). However, if I swap the line `outputs = (tke_c=tke_c, u=u,)` for ; ```julia; outputs = (tke_k=tke_k, u=u,); ```; (so basically I'm just changing the **TKE** calculation from being done with a `ComputedField` to being do",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872684633:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872684633,2,['test'],['tests']
Testability,"Okay, I took a second look at the other validation tests and I do think they should be kept. Sure, they're not super thorough, but I think they add to the docs. It's especially nice to see animations of the lid-cavity flow. So my vote goes to keeping them.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872276522:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872276522,1,['test'],['tests']
Testability,"Okay, after some looking around I found a minimal working example. The tests don't catch this because they don't test everything in `Float32`. . Can someone else verify that this produce the same error I posted above?. ```; using Oceananigans. N = 32. grid = RegularRectilinearGrid(Float32, size=(N, N, N), extent=(1, 1, 1)); model = IncompressibleModel(architecture=GPU(), float_type=Float32, advection=WENO5(), grid=grid); time_step!(model, 1); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869881176:71,test,tests,71,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869881176,2,['test'],"['test', 'tests']"
Testability,"Okay, apologies. I just didn't quite understand what you meant when you said they _seem_ identical. Typically we would just write something like `T1 == T2`, which will return `true` or `false`, or equivalently something like `all(T1 .== T2)`. Another test is to use `isapprox` (also written `≈`) as in `all(T1 .≈ T2)`. Here's a bit more background on the reproducibility tests we currently have:. We have [""regression tests""](https://github.com/CliMA/Oceananigans.jl/tree/main/test/regression_tests) that test to ensure that output from a certain simulation remains identical across PRs, including tests that involve LES closures. These tests involve ~10 time steps. We conclude that results are ""identical"" when every grid point is within `sqrt(eps(T))`, where `T` is the floating point type (eg `Float64` or `Float32`), for example:. https://github.com/CliMA/Oceananigans.jl/blob/fc84215f76661e9f1cfb103dc18f86442cec9d89/test/regression_tests/hydrostatic_free_turbulence_regression_test.jl#L112. Many of our other tests also implicitly rely on reproducibility. I think, therefore, that we do have reproduciblity in many cases. However, it is quite possible that your case exposes some particular feature that leads to a loss of reprodicibility. I think perhaps the next step in order to make progress is to code up a ""minimal working example"" (often called an MWE), which involves relentlessly simplifying the examle until we isolate the essential complication that leads to a failure of the test. With that knowledge in hand, we can dig deeper to find the underlying cause (and hopefully fix it). Often, the process of simplying a script in order to isolate the MWE also produces some insight about the issue (and potentially about the test).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1273675416:251,test,test,251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1273675416,22,['test'],"['test', 'tests']"
Testability,"Okay, here's my MWE which includes running the first simulation to generate the checkpoint file:. ```julia; using Oceananigans; using Printf. """""" Set up a simple simulation to test picking up from a checkpoint. """"""; function test_simulation(stop_time, Δt, δt); grid = RectilinearGrid(size=(), topology=(Flat, Flat, Flat)); model = NonhydrostaticModel(; grid); simulation = Simulation(model; Δt, stop_time). progress_message(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress_message, TimeInterval(δt)). checkpointer = Checkpointer(model,; schedule = TimeInterval(stop_time),; prefix = ""test"",; cleanup = false). simulation.output_writers[:checkpointer] = checkpointer. return simulation; end. rm(""test_iteration*.jld2"", force=true). Δt = 1 # timestep (s); T1 = 4 # first simulation stop time (s); T2 = 2T1 # second simulation stop time (s); δt = 2 # progress message frequency. # Run a simulation that saves data to a checkpoint; simulation = test_simulation(T1, Δt, δt); run!(simulation). # Now try again, but picking up from the previous checkpoint; N = iteration(simulation); checkpoint = ""test_iteration$N.jld2""; simulation = test_simulation(T2, Δt, δt); run!(simulation, pickup=checkpoint); ```. This reproduces the issue because I get. ```julia; julia> include(""test.jl""); [ Info: Initializing simulation...; [ Info: Iter: 0, time: 0 seconds; [ Info: ... simulation initialization complete (2.697 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (5.721 seconds).; [ Info: Iter: 2, time: 2 seconds; [ Info: Simulation is stopping after running for 8.786 seconds.; [ Info: Simulation time 4 seconds equals or exceeds stop time 4 seconds.; [ Info: Iter: 4, time: 4 seconds; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (529.973 μs); [ Info: Executing initial time step...; [ Info: ... initial time step complete (575.447 μs).; [ Info: Iter: 5,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3657#issuecomment-2246064310:176,test,test,176,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3657#issuecomment-2246064310,4,['test'],['test']
Testability,"Okay, it looks like we want to test `set!(model, ...)` so we need a model! . The tests are failing? Which maybe means they are working. https://buildkite.com/clima/oceananigans/builds/15738#018f734d-a866-49c7-9114-390d6932cb34/18-355",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2108767038:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2108767038,2,['test'],"['test', 'tests']"
Testability,"Okay, so I'm just gonna throw this out there: is it advantageous to migrate the Poisson solvers to a separate package (PoissonSolvers.jl)? It would be akin to the relationship between PencilFFTs.jl and PencilArrays.jl. I've been thinking about it for the past few days and I can see some pros:. - Separating the code can make Oceananigans easier to maintain:; - fewer things to test in every PR (the tests are becoming larger and larger and apparently we're starting to have backlogs on buildkite); - fewer lines/modules in general can make it easier to make sense of the code, especially for beginner users/contributors (in general the smaller the code base, the easier it is to attract contributors). Also having (brief) docs just for the solvers would be a very useful reference in general imho.; - Efficient Poisson solvers are hard to write and it's an art of their own since different BCs generally require different algorithms. With that said, having a separate package just for that might not only benefit the community (a quick google search for something like ""poisson solver julia"" shows that there's interest) but also it might make it easier for someone who needs a specific algorithm that we don't yet have to make a contribution that might help us. That said, I've never touched the Poisson solvers in Oceananigans so I don't know how ""portable"" they are, or if there are significant disadvantages. So some feedback here would be helpful. Thoughts?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1553:378,test,test,378,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1553,2,['test'],"['test', 'tests']"
Testability,"Okay, so in summary:. * *Correct*: time-averaging a TKE `ComputedField`; * *Wrong*: time-averaging a TKE `KernelComputedField`; * *Wrong*: time-averaging a dissipation `ComputedField`; * *Wrong*: time-averaging a dissipation `KernelComputedField`. I think probably the next step is to design a quantitative test that currently fails but should pass when this bug is fixed. Designing a minimal test might also help us isolate the issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-810496153:307,test,test,307,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-810496153,2,['test'],['test']
Testability,On Satori using stupidly large meshes gives 85% - 89% efficiency going from 1 to 2 GPU for the `multi_region_turbulence.jl` benchmark (Note `1440×600×48` is the size of the 1/4 degree simulation); Unfortunately the efficiency decreases on a larger number of GPUs... we definitely have to fix the scaling. #### Strong Scaling; | Grid size | Grid | GPUs | wall time | efficiency |; | -- | -- | -- | -- | -- |; | `1024×1024×100`| `RectilinearGrid` | 1 | 3.4 minutes | 100% |; | `1024×1024×100`| `MultiRegionGrid` | 2 | 1.9 minutes | 89.5% | ; | `1440×600×48`| `RectilinearGrid` | 1 | 1.4 minutes | 100% |; | `1440×600×48`| `MultiRegionGrid` | 2 | 49.2 seconds | 85.4% |; | `1440×600×48`| `MultiRegionGrid` | 3 | 38.8 seconds | 72.2% |. Going to smaller meshes than these hampers the efficiency incredibly. I think there might be a lot of low hanging fruits to optimize multi GPU,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116489219:124,benchmark,benchmark,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116489219,1,['benchmark'],['benchmark']
Testability,"On a related note, I think I was able to get multiple forcings to work on the GPU with 5+ forcings by using `@generated` to generate functions for the GPU to staticly dispatch on. Needs to be tested though. . ```diff; diff --git a/src/Forcings/multiple_forcings.jl b/src/Forcings/multiple_forcings.jl; index 30123ec36..178731937 100644; --- a/src/Forcings/multiple_forcings.jl; +++ b/src/Forcings/multiple_forcings.jl; @@ -41,18 +41,14 @@ end; ; -# The magic (which doesn't seem to work on GPU now); -@inline function (mf::MultipleForcings{N})(i, j, k, grid, clock, model_fields) where N; - total_forcing = zero(grid); - forcings = mf.forcings; - ntuple(Val(N)) do n; +@generated function (mf::MultipleForcings{N})(i, j, k, grid, clock, model_fields) where N; + quote; + total_forcing = zero(grid); + forcings = mf.forcings; Base.@_inline_meta; - @inbounds begin; - nth_forcing = forcings[n]; - total_forcing += nth_forcing(i, j, k, grid, clock, model_fields); - end; + $([:(@inbounds total_forcing += forcings[$n](i, j, k, grid, clock, model_fields)) for n in 1:N]...); + return total_forcing; end; - return total_forcing; end; ```. ---. MWE:. ```julia; using Oceananigans. grid = LatitudeLongitudeGrid(GPU(), size=(10, 10, 10), longitude=(0, 1), latitude=(0, 1), z=(-1, 0)). weird_forcing(λ, φ, z, t) = λ * φ + z; wonky_forcing(λ, φ, z, t) = z / (λ - φ); strange_forcing(λ, φ, z, t) = z - t; bizarre_forcing(λ, φ, z, t) = φ + λ; peculiar_forcing(λ, φ, z, t) = 2t / z. forcing1 = Forcing(weird_forcing); forcing2 = Forcing(wonky_forcing); forcing3 = Forcing(strange_forcing); forcing4 = Forcing(bizarre_forcing); forcing5 = Forcing(peculiar_forcing). forcing = (; u=(forcing1, forcing2, forcing3, forcing4, forcing5)). model = HydrostaticFreeSurfaceModel(; grid, forcing). time_step!(model, 1); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2312673635:192,test,tested,192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2312673635,1,['test'],['tested']
Testability,"On main we are passing the tendency kernel function as an argument to the kernel. ; Apparently, this prevents compilation on the CPU.; Another place where this design was implemented is the vertically implicit solver, where we pass functions to calculate the tridiagonal matrix coefficients. This PR fixes both problems. After this PR we should remember that we cannot pass functions as kernel arguments, ; not even as properties of a struct! Instead we can pass `Val(:function_name)` and dispatch on that to call the correct `function_name` (as implemented in this PR for the vertically implicit solver). Baroclinic adjustment test (with `Nx = Ny = 128, Nz = 10`); on main:; ```julia; [ Info: Initializing simulation...; [00.00%] i: 0, t: 0 seconds, wall time: 870.922 ms, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 16.500 minutes; [ Info: ... simulation initialization complete (957.942 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (19.178 seconds).; [15.28%] i: 20, t: 5.500 hours, wall time: 1.732 minutes, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 18.150 minutes; [32.08%] i: 40, t: 11.550 hours, wall time: 1.376 minutes, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 19.965 minutes; [50.57%] i: 60, t: 18.205 hours, wall time: 1.333 minutes, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 20 minutes; [69.09%] i: 80, t: 1.036 days, wall time: 1.219 minutes, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 20 minutes; [87.61%] i: 100, t: 1.314 days, wall time: 1.175 minutes, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 20 minutes; [ Info: Simulation is stopping after running for 7.623 minutes.; [ Info: Simulation time 1.500 days equals or exceeds stop time 1.500 days.; ```. on this PR:; ```julia; [ Info: Initializing simulation...; [00.00%] i: 0, t: 0 seconds, wall time: 9.474 seconds, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 16.500 minutes; [ Info: ... simulation in",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3030:628,test,test,628,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030,1,['test'],['test']
Testability,"On the CPU it seems like things are failing with `FATAL ERROR: Symbol ""__nv_llabs""not found`. I should be able to reduce it down to a minimal working example (guessing it's a CUDA.jl issue). GPU tests don't want to run (CUDA driver might be too old on Sverdrup?) but GPU regression tests passed on Tartarus so things might be fine there.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-832178508:195,test,tests,195,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-832178508,2,['test'],['tests']
Testability,One question: Should we modify the tests so that they would be able to catch the bug? Or is that too much?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1541#issuecomment-813710848:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1541#issuecomment-813710848,1,['test'],['tests']
Testability,"One way to come up with a test is to ""propose"" an incompressible solution, diagnose the advection term associated with this solution, and then add that term as a forcing function to the RHS to generate a stationary problem. The resulting problem could have zero pressure gradient by construction --- I think. This is the strategy used in. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/convergence_tests/src/ForcedFlowFreeSlip.jl. (free-slip) and. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/convergence_tests/src/ForcedFlowFixedSlip.jl. (fixed-slip).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172731076:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172731076,1,['test'],['test']
Testability,Only run GPU tests on GPU CI builds,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/758:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/758,1,['test'],['tests']
Testability,Only test Mac OSX on Travis now,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/933:5,test,test,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/933,1,['test'],['test']
Testability,"Oof, good catch. Thanks for adding the test. As a temporary fix, we could add a special constructor for `ImmersedBoundaryGrid` (ie use dispatch rather than the if-statement). . I suspect re-ordering the imports will be a larger piece of work that will probably require some work from @simone-silvestri . Technical debt is entrenched.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3830#issuecomment-2398232606:39,test,test,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3830#issuecomment-2398232606,1,['test'],['test']
Testability,Opened a PR with a test: https://github.com/CliMA/Oceananigans.jl/pull/1947,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1942#issuecomment-902684253:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1942#issuecomment-902684253,1,['test'],['test']
Testability,Or just move the vertically stretched tests to a different file... ?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021711000:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2183#issuecomment-1021711000,1,['test'],['tests']
Testability,Or perhaps when tests pass? Let me know if you need help with that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1022682513:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1022682513,1,['test'],['tests']
Testability,"Our earlier [tests](https://github.com/liuchihl/Oceananigans.jl/pull/1#issuecomment-2295354459) with a simple sine function indicate that when the checkpoint interval is an integer multiple of the `AveragedTimeInterval`, the results after the checkpoint seem reasonable. However, I’ve noticed this isn't the case with the following parameter settings, for instance:. ```julia; Δt = .01 # timestep; T1 = 6Δt # first simulation stop time; T2 = 2T1 # second simulation stop time; window_nΔt = 2 # window interval: 2Δt; interval_nΔt = 2 # time average saving interval: 2Δt; stride = 1; ```; The averaged values are clearly off after the checkpoint (t>6Δt):; <img width=""587"" alt=""image"" src=""https://github.com/user-attachments/assets/24c0238d-3723-435d-bca2-4b4a2be83e71"">. This issue does not only occur in the existing MWE (decaying function); it also occurs in our [MWE](https://github.com/liuchihl/Oceananigans.jl/pull/1#issuecomment-2295343588) using the exact same parameters mentioned above. The dashed curve and steps indicate `TimeInterval` and `AveragedTimeInterval` outputs, respectively, shown in the figure below. It is unclear to me as to why spurious zero appears in this case.; <img width=""892"" alt=""image"" src=""https://github.com/user-attachments/assets/5e78add8-7b29-45f3-8123-156cf6ae38d3"">. The point of these tests is to show that even when the checkpoint interval is an integer multiple of the `AveragedTimeInterval`, issues can still arise. . Here is the MWE with the decaying function for reference: ; ```julia; using Oceananigans; using Plots; using NCDatasets; using Test; if isfile(""single_decay_windowed_time_average_test.nc""); rm(""single_decay_windowed_time_average_test.nc""); end; run(`sh -c ""rm test_iteration*.jld2""`). function test_simulation(stop_time, Δt, window_nΔt, interval_nΔt, stride, overwrite). arch = CPU(); topo = (Periodic, Periodic, Periodic); domain = (x=(0, 1), y=(0, 1), z=(0, 1)); grid = RectilinearGrid(arch, topology=topo, size=(4, 4, 4); domain...). λ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2380652629:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2380652629,2,['test'],['tests']
Testability,"Out of curiosity, when we create a PR, is it possible to find out how long the tests take compared to before? It seems like it might be useful when making a change like this, as well as pretty much anything else.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877159681:79,test,tests,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877159681,1,['test'],['tests']
Testability,"Out of curiousity, how much work is it to implement RK3 for `HydrostaticFreeSurfaceModel`?. Seems like fixing AB2 for variable time steps isn't too difficult if it's just changing how $G^{n+1}$ is computed though. > Why don't we answer this once and for all, there are not two answers to this question. I thought this was answered quite clearly, albeit for a very idealized case, here: https://github.com/CliMA/Oceananigans.jl/pull/945#issuecomment-692706814 Is AB2 still technically only first-order accurate?. I know it's quite difficult to extrapolate from the convergence test to global simulations, but my experience has been that RK3 beats out AB2 for non-hydrostatic simulations. That said, it's probably still good to have AB2 especially if it can support variable time steps.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3738#issuecomment-2418029947:576,test,test,576,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3738#issuecomment-2418029947,2,['test'],['test']
Testability,Out of memory error with Docs tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3779:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3779,1,['test'],['tests']
Testability,"OutputWriters/netcdf_output_writer.jl:176; [5] run_thermal_bubble_netcdf_tests(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:29; [6] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:526 [inlined]; [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [8] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:525 [inlined]; [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [10] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:521; [11] include(::String) at ./client.jl:439; [12] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:94; [13] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [14] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:76; [15] include(::String) at ./client.jl:439; [16] top-level scope at none:6; [17] eval(::Module, ::Any) at ./boot.jl:331; [18] exec_options(::Base.JLOptions) at ./client.jl:264; [19] _start() at ./client.jl:484; ; i: 0001, t: 1.000 s, Δt: 1.100 s, wmax = 2.7e-04 ms⁻¹, wall time: 18.164 s; progress: 0.0 %, i: 0001, t: 1.000 s, Δt: 1.100 s, wall time: 11.110 s; N² = ((Rᵈ * f) / Lz) ^ 2 = 0.0004; α = sqrt(N²) / (f * σᵇ) = 0.02314814814814815; i: 0010, t: 3.667 min, Δt: 22.000 s, umax = (2.4e-01, 2.3e-01, 1.9e-05) ms⁻¹, wall time: 12.877 s; Simulating stratified plane Couette flow. N : 16, 16, 8; L : 12.6, 6.28, 2; Re : 4250.000; Ri : 0.010; Pr : 0.700; ν : 0.000235; κ : 0.000336; U_wall : 1.000; Θ_wall : 0.010. [1000.00%] i: 1, t: 1.00e-04, umax: (1.59e+00, 3.11e-01, 3.85e-01), CFL: 2.03e-04, νκmax: (9.98e-02, 9.97e-02), νκCFL: (1.60e-04, 1.60e-04), next Δt: 1.00e-04, wall time: 8",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:102666,Test,Test,102666,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,2,['Test'],['Test']
Testability,Overleaf documentation reflects this but not the code itself. This is the analytic solution we're testing against: https://en.wikipedia.org/wiki/Taylor%E2%80%93Green_vortex#Taylor%E2%80%93Green_vortex_solution,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/468:98,test,testing,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/468,1,['test'],['testing']
Testability,"Overturning, eddying channel validation test following Abernathey et al. 2011",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1744:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1744,1,['test'],['test']
Testability,"PL; [9a3f8284] Random; [ea8e919c] SHA v0.7.0; [9e88b42a] Serialization; [6462fe0b] Sockets; [2f01184e] SparseArrays v1.10.0; [10745b16] Statistics v1.10.0; [4607b0f0] SuiteSparse; [fa267f1f] TOML v1.0.3; [a4e569a6] Tar v1.10.0; [8dfed614] Test; [cf7118a7] UUIDs; [4ec0a83e] Unicode; [e66e0078] CompilerSupportLibraries_jll v1.1.0+0; [781609d7] GMP_jll v6.2.1+6; [deac9b47] LibCURL_jll v8.4.0+0; [e37daf67] LibGit2_jll v1.6.4+0; [29816b5a] LibSSH2_jll v1.11.0+1; [c8ffd9c3] MbedTLS_jll v2.28.2+1; [14a3606d] MozillaCACerts_jll v2023.1.10; [4536629a] OpenBLAS_jll v0.3.23+4; [05823500] OpenLibm_jll v0.8.1+2; [efcefdf7] PCRE2_jll v10.42.0+1; [bea87d4a] SuiteSparse_jll v7.2.1+1; [83775a58] Zlib_jll v1.2.13+1; [8e850b90] libblastrampoline_jll v5.8.0+1; [8e850ede] nghttp2_jll v1.52.0+1; [3f19e933] p7zip_jll v17.4.0+2; Info Packages marked with ⌃ and ⌅ have new versions available. Those with ⌃ may be upgradable, but those with ⌅ are restricted by compatibility constraints from upgrading.; Testing Running tests...; MPIPreferences:; binary: MPICH_jll; abi: MPICH. Package versions; MPI.jl: 0.20.19; MPIPreferences.jl: 0.1.10; MPICH_jll: 4.2.0+0. Library information:; libmpi: /Users/navid/.julia/artifacts/5c81ad3c4ead80006fae560b5e6f06fa265aefb1/lib/libmpi.12.dylib; libmpi dlpath: /Users/navid/.julia/artifacts/5c81ad3c4ead80006fae560b5e6f06fa265aefb1/lib/libmpi.12.dylib; MPI version: 4.1.0; Library version: ; MPICH Version: 4.2.0; MPICH Release date: Fri Feb 9 12:29:21 CST 2024; MPICH ABI: 16:0:4; MPICH Device: ch3:nemesis; MPICH configure: --prefix=/workspace/destdir --build=x86_64-linux-musl --host=aarch64-apple-darwin20 --disable-dependency-tracking --docdir=/tmp --enable-fast=all,O3 --enable-static=no --mandir=/tmp --with-device=ch3 --with-hwloc=/workspace/destdir FFLAGS=-fallow-argument-mismatch FCFLAGS=-fallow-argument-mismatch; MPICH CC: cc -fno-common -DNDEBUG -DNVALGRIND -O3; MPICH CXX: c++ -DNDEBUG -DNVALGRIND -O3; MPICH F77: gfortran -fallow-argument-mismatch -O3; MPICH FC:",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3511:11769,Test,Testing,11769,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3511,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"PR #2121 changed some function signatures, which broke functionality provided by `single_column_model_mode.jl` that sets `model.free_surface = nothing`. This PR restores that functionality. I think we could add a test, but the experimental nature of `single_column_model_mode.jl` could also mean it'd be better to wait.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2152:213,test,test,213,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2152,1,['test'],['test']
Testability,PR #3668 Introduced ambiguity for `TracerAdvection` on `ImmersedBoundaryGrid`s; This PR removes the ambiguity and adds a test to make sure this method is tested,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3696:121,test,test,121,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3696,2,['test'],"['test', 'tested']"
Testability,"PR co-authored with @sandreza . This PR tests Oceananigans with the Pearson vortex test from p. 310 of ""Nodal Discontinuous Galerkin Methods: Algorithms, Analysis, and Application"" by Hesthaven & Warburton. Error after 100 time steps:; ```julia; i: 100, t: 0.008, Δu: (avg=0.000224, max=0.000224), Δw: (avg=0.000224, max=0.000224); ```; which compares well with the DG error (considering our low-order numerics). We discovered that recomputing w from continuity breaks this test because du/dx = 0 and dv/dy = 0 by construction so w = 0 even though this is wrong. This is probably because we need to impose Neumann boundary condition on w, but recomputing w from continuity requires us to assume the value of `w[i, j, :]`, which we take to be 0 since we usually run with a rigid lid. So we switched to explicitly time stepping w which means this PR is ""DO NOT MERGE"" is its current state. Note: Before the test is merged, more comments are needed in the pearson vortex test.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/336:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/336,5,['test'],"['test', 'tests']"
Testability,"PR for discussion of changes to main. There are some things that can go in soon, others may require more work. . Note . - Julia AMD GPU stack (AMDGPU.jl, KernelAbstractions.jl) needs 1.7 Julia at least.; - Currently AMDGPU.jl works against ROCM 4.2. More recent ROCM 5 has LLVM that is ahead of Julia 1.7, so that breaks things! ; - people who are working on relevant Julia support include @jpsamaroo @vchuravy @luraess and @matinraayai .... What fun! . A buildkite test is here ( https://github.com/CliMA/Oceananigans.jl/blob/e4340a7f2ef10391b46e4b71bf3f74ffbd4bd945/.buildkite/pipeline.yml#L496 ) which gives some clues on what is needed to run something on MI50.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2540:466,test,test,466,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2540,1,['test'],['test']
Testability,"PRs #1935 and #1936 fix bugs associated with `ImmersedBoundaryGrid`: the first is a functionality bug that needs a detailed functionality test to catch (for example, testing that budgets are correct with immersed boundaries); the second fixes a more trivial issue with dispatch. We have a small number of immersed boundary tests; however we need a more comprehensive suite of tests to ensure that immersed boundaries are compatible with various closures and advection schemes. I think we should use the hydrostatic model for these tests for the time being, because immersed boundaries with non hydrostatic models are still experimental and under development. cc @whitleyv @jm-c",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1937:138,test,test,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1937,5,['test'],"['test', 'testing', 'tests']"
Testability,PS @christophernhill: Buildkite tests did not run on this PR since we disable Buildkite on PRs from forks (to avoid random PRs executing potentially malicious code on Tartarus and Sverdrup). So we usually open and merge branches from the repo itself.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1333#issuecomment-772496240:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1333#issuecomment-772496240,1,['test'],['tests']
Testability,PS there's a test now,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3225#issuecomment-1689951611:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3225#issuecomment-1689951611,1,['test'],['test']
Testability,PS: @francispoulin I think it's okay to keep the two test scripts as long as they're not part of `runtests.jl`. . Might be especially helpful at this early development stage so other developers/users can easily run the same scripts/tests that you're using to test the shallow water model. Then once the shallow water model is a bit more mature they could be turned into nice examples!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-740072504:53,test,test,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-740072504,3,['test'],"['test', 'tests']"
Testability,Pair programming with @francispoulin we figured out that the pressure solvers are not tested for `Flat` topologies which might be causing #1554. This PR just adds a warning about this until the pressure solvers properly support `Flat`. Resolves #1554 (?),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1556:86,test,tested,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1556,1,['test'],['tested']
Testability,"Partly an eyeball test for the channel, partly a source of new movies!. ![channel_plot_300000_cropped](https://user-images.githubusercontent.com/20099589/60388805-7b822c80-9a84-11e9-9fb6-05aca5a268b8.png). Doesn't look horrible but probably needs higher more grid points, lower grid cell aspect ratio, better advection scheme, and/or LES closure.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/301:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/301,1,['test'],['test']
Testability,Pearson vortex test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/336:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/336,1,['test'],['test']
Testability,Perfect! Looks like you caught some tests that use `ShallowWaterModel` with non-flat topologies!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842594707:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842594707,1,['test'],['tests']
Testability,Perform some of the grid tests on GPU as well,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054,1,['test'],['tests']
Testability,Performance benchmarks section of the README is super out of date,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3684:12,benchmark,benchmarks,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3684,1,['benchmark'],['benchmarks']
Testability,Performance benchmarks section of the README wrongly says we don't support `Distributed`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3758:12,benchmark,benchmarks,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3758,1,['benchmark'],['benchmarks']
Testability,Performance testing,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3492:12,test,testing,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3492,1,['test'],['testing']
Testability,"Perhaps I can chime in here to give some context. Something in the Oceananigans/KA/Enzyme/etc setup was breaking our integration test of the advection-diffusion (https://github.com/CliMA/Oceananigans.jl/pull/3480) which was blocking us for making progress for some time. Eventually Joe successfully minimized it down to this point as a minimal error (effectively just testing successful AD of Oceanigans.Utils.launch!, which was failing). We later determined the root cause of the issue to be a problem in KA (https://github.com/JuliaGPU/KernelAbstractions.jl/pull/476). The purpose of this is not to specifically act as a unit test for the individual KA issue, but to be a small unit test for Oceananigans modified launching infrastructure. That way if something else comes up as a bug in a future integration test, we can quickly find the root cause without weeks of debugging from the whole integration test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2106054020:129,test,test,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2106054020,6,['test'],"['test', 'testing']"
Testability,"Perhaps we can split the `.jl` file, e.g., put these:. https://github.com/CliMA/Oceananigans.jl/blob/c71770c10f40ebd0789491a33bbb3f8b4f6de14a/test/test_poisson_solvers.jl#L280-L312. in a different script and on their own buildkite process?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2183:142,test,test,142,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2183,1,['test'],['test']
Testability,"Perhaps we could put log this info at the `@debug` level?. We've also discussed logging initialization at @info (so that everyone sees it). I think logging individual tendency kernel timings might be hard because they are completed asychronously, but we can log how long it takes to compute _all_ the tendencies.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-881661216:21,log,log,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-881661216,4,['log'],"['log', 'logging']"
Testability,"Perhaps we don't have this, but can we rotate a `LatitudeLongitudeGrid` by a certain angle, and then test that the vectors are rotated exactly by that angle? This would provide a simple deterministic test. This could work for a very small grid on the equator, for example...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3744#issuecomment-2315768430:101,test,test,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3744#issuecomment-2315768430,4,['test'],['test']
Testability,"Perhaps we should split the regression tests? A natural split can be done for each grid type, e.g., see:; https://github.com/CliMA/Oceananigans.jl/blob/59a8a81f8ff1a0835f9d549428d61d7295c6c5f6/test/test_regression.jl#L73",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2140#issuecomment-1006168639:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2140#issuecomment-1006168639,2,['test'],"['test', 'tests']"
Testability,"Personally I don't see a problem with warnings in the docstrings if that's how the code behaves. > Strikes me that we could also change the log level so that warnings are not emitted. I'm not sure what the expected result of this is. But if this will create a situation where a given docstring won't have warnings, while users copy-pasting the contents from that same docstring may get a warning, then I think it'll be confusing and we should probably avoid that solution. If not, then that sounds like a great solution :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3705#issuecomment-2287861310:140,log,log,140,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3705#issuecomment-2287861310,1,['log'],['log']
Testability,Physics tests for channel or box models with analytic solutions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/158:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/158,1,['test'],['tests']
Testability,Physics tests for doubly-periodic domains with analytic solutions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/157:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/157,1,['test'],['tests']
Testability,Physics tests with analytic solutions for the statistics,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/159:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/159,1,['test'],['tests']
Testability,"Playing around with an internal wave test case I think we actually need todo something more like the adaptive boundary described in section 4.1 of this paper https://doi.org/10.1016/S1463-5003(00)00013-5 as I have come across two problems: when the flow is directed out of the domain on a prescribed interface (e.g. u = cos(pi/h(z+h)) then information can't get out, and on the ""Orlanski"" side where information is travelling into the domain I am getting instability as it is just keeping the boundary value constant which by default is zero. This might present some more user interface issues as it is going to require us to set a ""known"" value on every open boundary unless we're confident that the flow will only be leaving.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1971287155:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1971287155,1,['test'],['test']
Testability,Please could someone re-run the GPU tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582658520:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582658520,1,['test'],['tests']
Testability,Please could someone rerun the failed tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3722#issuecomment-2304642115:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3722#issuecomment-2304642115,1,['test'],['tests']
Testability,"Please could someone rerun the failed tests, I don't think they've actually failed from what I can tell from the error messages",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2019249485:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2019249485,1,['test'],['tests']
Testability,Please could someone try rerunning the failed test since it shouldn't have changed?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1578487553:46,test,test,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1578487553,1,['test'],['test']
Testability,Plots and fixes for benchmarks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746:20,benchmark,benchmarks,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746,1,['benchmark'],['benchmarks']
Testability,"Plots were added for the following benchmarking scripts, so as to present the most important data found in the original output tables in a visual format that is easier to analyze:; ```; benchmark_shallow_water_model.jl; benchmark_incompressible_model.jl; strong_scaling_shallow_water_model.jl; weak_scaling_shallow_water_model.jl; strong_scaling_incompressible_model.jl; ```; The plotting requires the Plots and PyPlot packages. Additional fixes were also made. Three manual calls to the garbage collection function, `GC()` was added in `src/Benchmarks.jl` which enabled `benchmark_shallow_water_model.jl` and `benchmark_incompressible_model.jl` to run multiple benchmarking cases with large grids without running out of memory. One such call is `GC( true)` which triggers a ""full"" garbage collection that is able to remove younger unreferenced objects. For the _single files of the scaling benchmarking scripts, the `@benchmark` portion was adjusted to have `evals=1` on top of the original configuration of `samples=10`. This allowed larger ranks of CPUs to be benchmarked. Originally, without the configuration limiting evaluations to 1, as the number of CPUs increased and the time per evaluation decreased, the number of times the benchmarked bit of code was run became too great and caused deadlocks between the MPI processes.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746:35,benchmark,benchmarking,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746,7,"['Benchmark', 'benchmark']","['Benchmarks', 'benchmark', 'benchmarked', 'benchmarking']"
Testability,Plus a simple test with a plankton growth/death model similar to `examples/convecting_plankton.jl`. TODO:; * [x] Add the interface to `HydrostaticFreeSurfaceModel`; * [x] Better interface for defining the biogeochemical source function; * [x] Better interface for automagically adding biogeochemical tracers?. With @jagoosw,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802,1,['test'],['test']
Testability,"Plus some cleanup of input validation, and a test.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/508:45,test,test,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/508,1,['test'],['test']
Testability,Poisson solver test: recovery of an analytic solution.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/227:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/227,1,['test'],['test']
Testability,Poisson solver tests on GPU still take too long,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2183:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2183,1,['test'],['tests']
Testability,Poisson solver tests use `CenterField` to represent fields at Faces,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1867:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1867,1,['test'],['tests']
Testability,Portable random number generator for testing.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/176:37,test,testing,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/176,1,['test'],['testing']
Testability,"Possibly, we should start using a merge queue that would disallow PRs from being merged unless tests pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867019151:95,test,tests,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867019151,1,['test'],['tests']
Testability,PressureField and tests for AveragedFields and ComputedFields in operations,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/956:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/956,1,['test'],['tests']
Testability,Pretty important so we can turn on the second golden master test!,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/219:60,test,test,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/219,1,['test'],['test']
Testability,Pretty sure we do test closure tuples,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2047#issuecomment-1479901754:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2047#issuecomment-1479901754,1,['test'],['test']
Testability,Previously if you ran `benchmark_regression.jl` it'll run the benchmarks but not print any useful results. This PR prints some benchmark results to make it a useful benchmarking script.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1214:62,benchmark,benchmarks,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1214,3,['benchmark'],"['benchmark', 'benchmarking', 'benchmarks']"
Testability,"Previously the functions `viscous_flux_u*` and `diffusive_flux_*` dispatched on `AbstractPrimaryGrid`. `AbstractPrimaryGrid` (now called `AbstractUnderlyingGrid` is an abstract type for distinguishing between `ImmersedBoundaryGrid` and the ""primitive"" / ""primary"" / ""underlying"" counterparts (I guess I'm still not sure what the best name is). As a result, flux calculations with `ImmersedBoundaryGrid` were hitting fallback flux functions that returned 0. This PR removes most instances dispatching on `grid` (except where necessary, where the dispatched type was changed from `AbstractPrimaryGrid` to `AbstractGrid`). It also nukes the fallbacks (which were the reason this issue escaped detection originally). The original motivation for dispatching on `AbstractPrimaryGrid` is not only wrong but also appears to be unnecessary, since the tests on this PR pass. For some reason `TwoDimensionalLeith` was also having trouble compiling on the GPU, so we're skipping those tests for now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1835#issuecomment-877174564:842,test,tests,842,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1835#issuecomment-877174564,2,['test'],['tests']
Testability,"Previously the functions viscous_flux_u* and diffusive_flux_* dispatched on AbstractPrimaryGrid. AbstractPrimaryGrid (now called AbstractUnderlyingGrid is an abstract type for distinguishing between ImmersedBoundaryGrid and the ""primitive"" / ""primary"" / ""underlying"" counterparts (I guess I'm still not sure what the best name is). As a result, flux calculations with ImmersedBoundaryGrid were hitting fallback flux functions that returned 0. This PR removes most instances dispatching on grid (except where necessary, where the dispatched type was changed from AbstractPrimaryGrid to AbstractGrid). It also nukes the fallbacks (which were the reason this issue escaped detection originally). This PR also adds a minimal test that _vertical_ diffusive and viscous fluxes work. It does not test the horizontal fluxes, but the test will catch egregious bugs like the one this PR fixes. The original motivation for dispatching on AbstractPrimaryGrid is not only wrong but also appears to be unnecessary, since the tests on this PR pass. For some reason TwoDimensionalLeith was also having trouble compiling on the GPU, so we're skipping those tests for now.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1835:721,test,test,721,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1835,5,['test'],"['test', 'tests']"
Testability,Print system info before running tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1180:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1180,1,['test'],['tests']
Testability,"Probably as a result of PR #3847, on the `main` branch precompiation fails due to some method overwriting. This may be harmless as all tests passed anyways, e.g. see the log from the last test of PR #3847: https://buildkite.com/clima/oceananigans/builds/18103#0192adf8-82f6-48e6-b72e-131502fdfcfc/26-746. But maybe there are some performance implications?. Output when running `using Oceananigans`:; ```; julia> using Oceananigans; Precompiling Oceananigans; Info Given Oceananigans was explicitly requested, output will be shown live ; WARNING: Method definition _advective_tracer_flux_x(Any, Any, Any, Oceananigans.ImmersedBoundaries.ImmersedBoundaryGrid{FT, TX, TY, TZ, G, I, M, S, Arch} where Arch where S where M where I where G where TZ where TY where TX where FT, Oceananigans.Advection.FluxFormAdvection{N, FT, A, B, C} where C where B where A where FT where N, Any...) in module Advection at /home/alir/atdepth/Oceananigans.jl/src/Advection/immersed_advective_fluxes.jl:79 overwritten at /home/alir/atdepth/Oceananigans.jl/src/Advection/tracer_advection_operators.jl:11.; ERROR: Method overwriting is not permitted during Module precompilation. Use `__precompile__(false)` to opt-out of precompilation.; ? Oceananigans; [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; WARNING: Method definition _advective_tracer_flux_x(Any, Any, Any, Oceananigans.ImmersedBoundaries.ImmersedBoundaryGrid{FT, TX, TY, TZ, G, I, M, S, Arch} where Arch where S where M where I where G where TZ where TY where TX where FT, Oceananigans.Advection.FluxFormAdvection{N, FT, A, B, C} where C where B where A where FT where N, Any...) in module Advection at /home/alir/atdepth/Oceananigans.jl/src/Advection/immersed_advective_fluxes.jl:79 overwritten at /home/alir/atdepth/Oceananigans.jl/src/Advection/tracer_advection_operators.jl:11.; ERROR: Method overwriting is not permitted during Module precompilation. Use `__precompile__(false)` to opt-out of precompilation.; [ Info: Skipping preco",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3851:135,test,tests,135,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3851,3,"['log', 'test']","['log', 'test', 'tests']"
Testability,Probably here https://github.com/JuliaGPU/CUDA.jl/blob/71e9760f02bc6e1bc76aaaf32e98be10a41bae6b/src/device/intrinsics/math.jl#L56. I would start with writing a test here for sind/cosd https://github.com/JuliaGPU/CUDA.jl/blob/71e9760f02bc6e1bc76aaaf32e98be10a41bae6b/test/device/intrinsics/math.jl#L97,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2371#issuecomment-1073377398:160,test,test,160,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2371#issuecomment-1073377398,2,['test'],['test']
Testability,Probably https://github.com/CliMA/Oceananigans.jl/blob/master/test/test_turbulence_closures.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883847271:62,test,test,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883847271,1,['test'],['test']
Testability,Probably in a next PR we will want a bit more tests for Particle tracking on Immersed Boundary grids,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2687#issuecomment-1198673154:46,test,tests,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2687#issuecomment-1198673154,1,['test'],['tests']
Testability,Probably makes sense to add a test to make sure this doesn't get reverted in the future too,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1588250343:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1588250343,1,['test'],['test']
Testability,"Probably makes sense to split `output_writers.jl`, `diagnostics.jl`, and `poisson_solvers.jl` into submodules. They're turning into megafiles that will benefit from being split into smaller logical chunks. And this will probably only get worse with time.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/495:190,log,logical,190,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/495,1,['log'],['logical']
Testability,Probably should do a quick benchmark before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1065515401:27,benchmark,benchmark,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1065515401,1,['benchmark'],['benchmark']
Testability,"Probably the quickest way to start is simply to add the ""holes"" manually after calling `compute!`. The reason this test is failing is not because `compute!` doesn't work, right? Getting `compute!` to work is just visualization.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3306#issuecomment-1758655160:115,test,test,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3306#issuecomment-1758655160,2,['test'],['test']
Testability,"Problem solved! @ali-ramadhan figured out that if we instead use the following then julia figures out how to dispatch correctly. ```; @inline Δx(i, j, k, grid::RegularRectilinearGrid{FT, Flat}) where FT = one(FT); @inline Δy(i, j, k, grid::RegularRectilinearGrid{FT, TX, Flat}) where {FT, TX} = one(FT); @inline ΔzC(i, j, k, grid::RegularRectilinearGrid{FT, TX, TY, Flat}) where {FT, TX, TY} = one(FT); @inline ΔzF(i, j, k, grid::RegularRectilinearGrid{FT, TX, TY, Flat}) where {FT, TX, TY} = one(FT); ```. I will do some tests, cleaning up and then push a PR to move the disucssion there.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1499#issuecomment-805124968:522,test,tests,522,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1499#issuecomment-805124968,1,['test'],['tests']
Testability,Profiling MPI and benchmarking strong + weak scaling,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1451:18,benchmark,benchmarking,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1451,1,['benchmark'],['benchmarking']
Testability,Quick fixes as I recklessly merged a _non-test-passing_ PR,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2201:42,test,test-,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2201,1,['test'],['test-']
Testability,Quick test tells me everything works with latest CUDA packages which just got released but will have to refactor a bit to make use of GPUifyLoop's new `@launch` functionality (and remove the `@setup` calls).,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/153:6,test,test,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/153,1,['test'],['test']
Testability,"Quickly benchmarked stepping the simulation and as setup in `test/test_biogeochemistry_npzd.jl` (just realized this is incorrectly named) got:; ```; BenchmarkTools.Trial: 3359 samples with 1 evaluation.; Range (min … max): 1.162 ms … 11.420 ms ┊ GC (min … max): 0.00% … 62.52%; Time (median): 1.324 ms ┊ GC (median): 0.00%; Time (mean ± σ): 1.479 ms ± 842.222 μs ┊ GC (mean ± σ): 5.25% ± 7.80%. ▇█▆▄▃▂▂▁ ▁; ████████▇▆▆▅▄▁▃▁▁▃▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▆▆ █; 1.16 ms Histogram: log(frequency) by time 7.82 ms <. Memory estimate: 1.52 MiB, allocs estimate: 2522. ```; And in `test/test_biogeochemistry_tracer_based.jl`got:; ```; BenchmarkTools.Trial: 978 samples with 1 evaluation.; Range (min … max): 2.071 ms … 77.292 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 3.359 ms ┊ GC (median): 0.00%; Time (mean ± σ): 5.091 ms ± 4.405 ms ┊ GC (mean ± σ): 5.49% ± 10.75%. ▄▂▃▃█▃ ; ███████▄▃▂▂▂▂▁▁▁▂▂▂▂▂▂▂▁▁▁▂▂▃▄▅▄▅▃▃▃▃▃▃▂▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▂ ▃; 2.07 ms Histogram: frequency by time 18.3 ms <. Memory estimate: 3.84 MiB, allocs estimate: 6731.; ```; So there seems to be a lot of room for optimization in how I've written `TracerBasedBiogeochemistry`. The difference when I just benchmarked `time_step!` was slightly less but still ∼2x slower. (Time to increment stop_iteration by 1 and run! after doing that for an initial step)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286:8,benchmark,benchmarked,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286,7,"['Benchmark', 'benchmark', 'log', 'test']","['BenchmarkTools', 'benchmarked', 'log', 'test']"
Testability,"Quite concerning that some of the convergence tests do not pass on the GPU... This is probably due to #1170 since the simpler convergence tests that do not rely on a pressure solver seem to pass (also the fact that it passes forced flow free slip with doubly periodic (x, z) but not with a wall-bounded dimension (x, y)). Hmmm, but the Taylor-Green one is doubly periodic... ![image](https://user-images.githubusercontent.com/20099589/100450333-76634b80-3083-11eb-92ea-0d645f564aab.png). ![image](https://user-images.githubusercontent.com/20099589/100450382-8c710c00-3083-11eb-801e-1ed16e5b22a9.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1223#issuecomment-734821927:46,test,tests,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1223#issuecomment-734821927,2,['test'],['tests']
Testability,"RAND: 10.1.2; - CUFFT: 10.1.2; - CUSOLVER: 10.3.0; - CUSPARSE: 10.3.1; - CUPTI: 12.0.0; - NVML: 10.0.0+440.64.0; - CUDNN: missing; - CUTENSOR: missing. Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5; - Device capability support: sm_30, sm_32, sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 4.367 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 4.805 GiB / 31.749 GiB available); nothing. [2021/08/05 12:11:43.425] INFO Setting up benchmark: (GPU, Float64, 128)...; [2021/08/05 12:12:45.688] INFO warming up; [2021/08/05 12:15:06.837] INFO Simulation is stopping. Model iteration 1 has hit or exceeded simulation stop iteration 1.; [2021/08/05 12:15:07.841] INFO Simulation is stopping. Model iteration 11 has hit or exceeded simulation stop iteration 11.; [2021/08/05 12:15:10.060] INFO done profiling (GPU, Float64, 128); ==45925== Profiling application: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project nonhydrostatic_profiler.jl; ==45925== Profiling result:; Type Time(%) Time Calls Avg Min Max Name; GPU activities: 20.46% 17.966ms 10 1.7966ms 1.7946ms 1.7987ms _Z23julia_gpu_calculate_Gv_7ContextI14__CUDACtx_Namevv14__PassType_257v12DisableHooksE18_gpu_calculate_Gv_16CompilerMetadataI10StaticSizeI15_128__128__128_E12DynamicCheckvv7NDRangeILi3ES5_I11_8__8__128_ES5_I11_16__16__1_EvvEE11OffsetArrayI7Float64Li3E13CuDeviceArrayIS9_Li3ELi1EEE22RegularRectilinearGridIS9_8PeriodicS12_7BoundedS8_IS9_Li1E12StepRangeLenIS9_14TwicePrecisionIS9_ES15_IS9_EEEE5WENO5vv20IsotropicDiffusivityI26ExplicitTimeDiscretizationS9_10NamedTupleI5__b__5TupleIS9_EEE8BuoyancyI14BuoyancyTracer10ZDirectionES19_I23__velocities___tracers_S20_IS19_I12__u___v___w_S20_I9ZeroFieldS24_S24_EES19_I5__b__S20_IS24_EEEES19_I12__u___v___w_S20_IS8_IS9_Li3ES10_IS9_Li3ELi1EEES8_IS9_Li3ES10_IS9_Li3ELi1EEES8_IS9_Li3ES10_IS9_Li3ELi1EEEEES19_I5__b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-893914746:1768,test,test,1768,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-893914746,1,['test'],['test']
Testability,"Ran `benchmark_shallow_water_model.jl` again with the fixes introduced in #1770. The CPU to GPU speedup is now at around 400 times as @francispoulin expected. However, it should be noted that though there is a notable increase in speedup, it is actually caused by the cases using CPU architecture taking more time. Similarly, the cases with GPU architecture take more time as well, but not at as large a percentage as the additional time incurred by the CPU architecture cases. . Please see https://github.com/CliMA/Oceananigans.jl/issues/1722#issue-905780649 for benchmark results without WENO5. ```; Oceananigans v0.58.1; Julia Version 1.6.0; Commit f9720dc2eb (2021-03-24 12:55 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; EBVERSIONJULIA = 1.6.0; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0/easybuild/avx2-Core-julia-1.6.0-easybuild-devel; JULIA_LOAD_PATH = :; GPU: Tesla V100-SXM2-32GB. Shallow water model benchmarks; ┌───────────────┬─────────────┬───────┬────────────┬────────────┬────────────┬────────────┬───────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼───────┼────────────┼────────────┼────────────┼────────────┼───────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.677 ms │ 2.876 ms │ 3.047 ms │ 4.806 ms │ 1.36 MiB │ 2253 │ 10 │; │ CPU │ Float64 │ 64 │ 5.795 ms │ 5.890 ms │ 6.073 ms │ 7.770 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 128 │ 16.979 ms │ 17.350 ms │ 17.578 ms │ 19.993 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 256 │ 62.543 ms │ 63.222 ms │ 63.544 ms │ 67.347 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 512 │ 250.149 ms │ 251.023 ms │ 251",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-868941194:564,benchmark,benchmark,564,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-868941194,1,['benchmark'],['benchmark']
Testability,Rayleigh-Benard regression test with forcing and passive tracer,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/239:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/239,1,['test'],['test']
Testability,"Re-posting from #3026... that PR solved performance problems with `NonhydrostaticModel`, but `HydrostaticFreeSurfaceModel` is still 2x slower roughly than when using KA 0.7.2. Here's a simple benchmark:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```; 10.220 s (85845109 allocations: 37.94 GiB) # main; 6.284 s (66184308 allocations: 16.31 GiB) # main with KA downgraded to 0.7.2; ```. cc @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037:192,benchmark,benchmark,192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037,3,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"Ready to be reviewed. I could not make the oceanic les regression test work for the moment, but we still have to build a bit on this PR so this is a good starting point to not blow up this PR too much. Next steps should be; - include an example (to be ran on the distributed pipeline); - include a tridiagonal solve; - relax the constraints on the divisibility of the grid size by the ranks, this will require a bit of experimenting but it can be easily done by modifying the buffers in `TransposableField` to be of variable size",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-2183310740:66,test,test,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-2183310740,1,['test'],['test']
Testability,Reduce the size of the eady_turbulence.jl script test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1058:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1058,1,['test'],['test']
Testability,Refactor of some stretched rectilinear grid tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2917:44,test,tests,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2917,1,['test'],['tests']
Testability,"Regarding the comment [here](https://github.com/CliMA/Oceananigans.jl/issues/2018#issuecomment-945826936). > I think there are probably a few other things to fix here, because we can't ""restore"" a grid with a GPU architecture.; >; > Fixing this fully really requires finishing #1998 first, and overhauling the checkpointing infrastructure to match so that the checkpointer is ""architecture aware"". We should also add tests for checkpointing with other grid types. I'm not sure what you mean by ""restoring"" a grid with GPU architecture. This last commit was enough for me to pickup my GPU-architecture simulation with a VerticallyStretchedGrid. For example, the following mwe works in this PR:. ```julia; using Oceananigans; using CUDA. grid1 = VerticallyStretchedRectilinearGrid(size=(2, 2, 2),; architecture=GPU(),; x=(0, 1), y=(0, 1), z_faces=k -> k,; halo=(3,3,3),; ). grid2 = VerticallyStretchedRectilinearGrid(size=(2, 2, 2),; architecture=GPU(),; x=(0, 1), y=(0, 1), z_faces=k -> k,; halo=(3,3,3),; ). if CUDA.@allowscalar grid1!=grid2; throw(error); end. model = NonhydrostaticModel(grid=grid1,; architecture=GPU(),; ). progress(sim) = @info ""Iteration: $(sim.model.clock.iteration), time: $(round(Int, sim.model.clock.time))""; simulation = Simulation(model, Δt=1, stop_time=10, progress=progress); simulation.output_writers[:chk_writer] = Checkpointer(model;; dir=""."",; prefix = ""mwe"",; schedule = TimeInterval(2),; force = false,; cleanup = true,; ). run!(simulation). simulation.stop_time = 20. run!(simulation, pickup=true); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945886370:417,test,tests,417,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945886370,1,['test'],['tests']
Testability,Regenerate LES regression test data,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/943:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/943,1,['test'],['test']
Testability,Regenerate regression test data following reversal of `k` index,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/526:22,test,test,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/526,1,['test'],['test']
Testability,Regression test for CATKE,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3762:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3762,1,['test'],['test']
Testability,Regression test for Hydrostatic free surface model,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2031:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2031,1,['test'],['test']
Testability,Regression test on the latitude longitude grid ; - Hydrostatic free surface model; - only tested the explicit free surface ; - both periodic and bounded latitude topology tested. Comments; - at the moment the data is generated on the fly at tests/test_regression.jl on the CPU() and tested on the GPU(); - explore the option to load the data in OceananigansArtifacts.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2031:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2031,5,['test'],"['test', 'tested', 'tests']"
Testability,Regression test(s) for `SplitExplicitFreeSurface`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3335:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3335,1,['test'],['test']
Testability,Regression tests for models with LES closures,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/479:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/479,1,['test'],['tests']
Testability,Regression tests for models with LES closures (round 2),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/484:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/484,1,['test'],['tests']
Testability,Regression tests for the Distributed module,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3328:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3328,1,['test'],['tests']
Testability,"Release notes:. * Tests and fixes for `FFTBasedPoissonSolver` for topologies with `Flat` dimensions (#1560); * Improved `AbstractOperations` that are much more likely to compile on the GPU, with better ""location inference"" for `BinaryOperation` (#1595, #1599)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1600:18,Test,Tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1600,1,['Test'],['Tests']
Testability,"Removed the ""fluid at rest"" test that was failing and included another (simpler) one for tilted buoyancy along with constructors. The new test checks that `x_dot_g_b`, etc., match for two different domains: one with z-aligned gravity and another with y-aligned gravity. . The only downside is that I only included the `x_dot_g_b` test for `model=BuoyancyTracer()`. Another separate test is needed for `model=SeawaterBuoyancy()` if we think that's necessary. (Constructors are tested for both models, though.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-913791965:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-913791965,10,['test'],"['test', 'tested']"
Testability,Rename Pearson vortex test to Taylor-Green vortex,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/468:22,test,test,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/468,1,['test'],['test']
Testability,Reopening this until we add a test or a regression.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2708#issuecomment-1225176695:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2708#issuecomment-1225176695,1,['test'],['test']
Testability,"Reported by @sandreza . Must have missed this (or tests didn't cover this case) in PR https://github.com/CliMA/Oceananigans.jl/pull/851. <img width=""1324"" alt=""Screen Shot 2020-08-21 at 5 45 54 PM"" src=""https://user-images.githubusercontent.com/20099589/90943555-4ce1b680-e3e8-11ea-8831-e3d66509adf6.png"">",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/864:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/864,1,['test'],['tests']
Testability,"Reported in PR #666. Might be serious enough that it is slowing down documentation building in PR #671. ```; Julia Version 1.3.1; Commit 2d5741174c (2019-12-30 21:36 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-6.0.1 (ORCJIT, skylake); GPU: TITAN V. ──────────────────────────────────────────────────────────────────────────────────────; Static ocean benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 173s / 51.2% 43.6GiB / 64.5% . Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────; 32× 32× 32 [CPU, Float32] 10 127ms 0.14% 12.7ms 170MiB 0.59% 17.0MiB; 32× 32× 32 [CPU, Float64] 10 153ms 0.17% 15.3ms 170MiB 0.59% 17.0MiB; 32× 32× 32 [GPU, Float32] 10 24.4ms 0.03% 2.44ms 10.0MiB 0.03% 1.00MiB; 32× 32× 32 [GPU, Float64] 10 24.2ms 0.03% 2.42ms 10.0MiB 0.03% 1.00MiB; 64× 64× 64 [CPU, Float32] 10 713ms 0.81% 71.3ms 676MiB 2.35% 67.6MiB; 64× 64× 64 [CPU, Float64] 10 868ms 0.98% 86.8ms 676MiB 2.35% 67.6MiB; 64× 64× 64 [GPU, Float32] 10 24.8ms 0.03% 2.48ms 10.0MiB 0.03% 1.00MiB; 64× 64× 64 [GPU, Float64] 10 25.2ms 0.03% 2.52ms 10.0MiB 0.03% 1.00MiB; 128×128×128 [CPU, Float32] 10 5.22s 5.90% 522ms 2.64GiB 9.39% 270MiB; 128×128×128 [CPU, Float64] 10 5.44s 6.14% 544ms 2.64GiB 9.39% 270MiB; 128×128×128 [GPU, Float32] 10 46.3ms 0.05% 4.63ms 10.0MiB 0.03% 1.00MiB; 128×128×128 [GPU, Float64] 10 45.6ms 0.05% 4.56ms 10.0MiB 0.03% 1.00MiB; 256×256×256 [CPU, Float32] 10 37.4s 42.3% 3.74s 10.5GiB 37.5% 1.05GiB; 256×256×256 [CPU, Float64] 10 37.7s 42.6% 3.77s 10.5GiB 37.5% 1.05GiB; 256×256×256 [GPU, Float32] 10 338ms 0.38% 33.8ms 10.0MiB 0.03% 1.00MiB; 256×256×256 [GPU, Float64] 10 336ms 0.38% 33.6ms 10.0MiB 0.03% 1.00MiB; ──────────────────────────────────────────────────────────────────────────────────────; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/675:458,benchmark,benchmarks,458,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/675,1,['benchmark'],['benchmarks']
Testability,Resolves #1027; Resolves #1252. ~~Needs tests.~~,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1259:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1259,1,['test'],['tests']
Testability,Resolves #1113 . Needs new multi-threading benchmarks. Will do as part of #1088 (need to add nice multithreading benchmark script on `ar/benchmarks` branch).,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1120:43,benchmark,benchmarks,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1120,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Resolves #1452 . Example:. ```julia; julia> using Oceananigans. julia> using Oceananigans.AbstractOperations: GridMetric. julia> grid = RegularRectilinearGrid(size=(1, 1, 1), extent=(1, 1, 1)); RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}; domain: x ∈ [0.0, 1.0], y ∈ [0.0, 1.0], z ∈ [-1.0, 0.0]; topology: (Periodic, Periodic, Bounded); resolution (Nx, Ny, Nz): (1, 1, 1); halo size (Hx, Hy, Hz): (1, 1, 1); grid spacing (Δx, Δy, Δz): (1.0, 1.0, 1.0). julia> Δz = GridMetric{Center, Center, Center}(Oceananigans.Operators.Δzᵃᵃᶜ, grid); GridMetric at (Center, Center, Center); ├── grid: RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=1, Nz=1); │ └── domain: x ∈ [0.0, 1.0], y ∈ [0.0, 1.0], z ∈ [-1.0, 0.0]; └── tree: ; GridMetric at (Center, Center, Center). julia> c = CenterField(CPU(), grid); Field located at (Center, Center, Center); ├── data: OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}}, size: (3, 3, 3); ├── grid: RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=1, Nz=1); └── boundary conditions: x=(west=Periodic, east=Periodic), y=(south=Periodic, north=Periodic), z=(bottom=ZeroFlux, top=ZeroFlux). julia> c_dz = c * Δz; BinaryOperation at (Center, Center, Center); ├── grid: RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=1, Nz=1); │ └── domain: x ∈ [0.0, 1.0], y ∈ [0.0, 1.0], z ∈ [-1.0, 0.0]; └── tree: ; * at (Center, Center, Center);    ├── Field located at (Center, Center, Center);    └── GridMetric at (Center, Center, Center); ```. TODO:. - [x] Add `architecture(grid)` for grids other than `RegularRectilinearGrid`.; - [x] Tests; - [x] Explore the possibility of special objects `Δx, Δy, Δz` that infer `BinaryOperation` location and create appropriate `GridMetric` operations at appropriate locations automagically.; - [x] I don't think we need `Difference` as proposed on #1452, but if others disagree we can add them here. cc @tomchor",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1607:1636,Test,Tests,1636,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1607,1,['Test'],['Tests']
Testability,Resolves #1512. Needs tests. Docstring for `FieldSlicer` could probably be spruced up too.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1526:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1526,1,['test'],['tests']
Testability,Resolves #1629 . TODO:. - [x] Perhaps a test?; - [x] OK from @ali-ramadhan that we bypass compute_and_slice_output for `LagrangianParticles`. cc @tomchor,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1631:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1631,1,['test'],['test']
Testability,"Resolves #1702 noticed by @mukund-gupta . In a [previous PR](https://github.com/CliMA/Oceananigans.jl/commit/3afd5b59fce91f9ab4aa6d0d19cd64fef7aea4cf#) we changed the notation of the closure term to indicate that it's the divergence of a flux, rather than specifically the divergence of a _viscous_ or _diffusive_ flux. This notational change required us to change the term's sign. Specifically, we used the redefinition. ```; ∂ⱼ_2ν_Σ₁ⱼ = - ∂ⱼ_τ₁ⱼ; ```. for the diffusive flux of x-momentum. However, we did not change the sign of the flux divergence for `AnisotropicBiharmonicDiffusivity`; we only changed the _name_ of the term. This PR corrects the sign error. There are a few closures that don't have regression tests and this highlights the danger of that.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1703:716,test,tests,716,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1703,1,['test'],['tests']
Testability,Resolves #1794 . We should also come up with a more permanent solution (perhaps another environment variable to toggle GPU-CI) that throws an error if GPU tests can't run on the GPU.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1799:155,test,tests,155,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1799,1,['test'],['tests']
Testability,Resolves #2061 . Todo:. - [x] Add a test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2062:36,test,test,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2062,1,['test'],['test']
Testability,Resolves #2106 . TODO:. - [x] Test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2108:30,Test,Test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2108,1,['Test'],['Test']
Testability,Resolves #2581. Maybe we should test this?. cc @simone-silvestri,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2582:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2582,1,['test'],['test']
Testability,Resolves #3771. Not sure where to add tests for this though. Do we need a `test_immersed_grids.jl`?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3776:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3776,1,['test'],['tests']
Testability,Resolves #578 ; Updates runtests to use the ModelLogger; Updates tests to use @info instead of println,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/585:65,test,tests,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/585,1,['test'],['tests']
Testability,"Resolves https://github.com/CliMA/Oceananigans.jl/issues/3750. Also supercedes #3794 where some tests are failing, not sure why. But that PR goes a bit further to clean up conditional ops. I think we want that too but let's start with this. cc @ali-ramadhan",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3801:96,test,tests,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3801,1,['test'],['tests']
Testability,Restarting the tests since we were having problems with the servers these past couple of days.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-867676446:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-867676446,1,['test'],['tests']
Testability,Restore netCDF output writer tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3167:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3167,1,['test'],['tests']
Testability,Return statement in a test seems incomplete,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2135:22,test,test,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2135,1,['test'],['test']
Testability,"Revert ""Adding norm for fields with some tests.""",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1562:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1562,1,['test'],['tests']
Testability,"Revert ""Cut down the examples. Moved stuff into a sandbox.""",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/231:50,sandbox,sandbox,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/231,1,['sandbox'],['sandbox']
Testability,"Revert ""Revert ""Cut down the examples. Moved stuff into a sandbox.""""",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/232:58,sandbox,sandbox,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/232,1,['sandbox'],['sandbox']
Testability,"Revert ""Updating Benchmark Docs""",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1950:17,Benchmark,Benchmark,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1950,1,['Benchmark'],['Benchmark']
Testability,"Reverts CliMA/Oceananigans.jl#1444. PR #1444 is quite nice but unfortunately I think the new `fill_halo_regions!`. ```julia; fill_halo_regions!(c::AbstractArray, fieldbcs, grid, args...; kwargs...); ```. broke MPI halo filling since it needs dispatch on. ```julia; fill_halo_regions!(c::AbstractArray, bcs, arch::AbstractMultiArchitecture, grid, c_location, args...); ```. It might be tricky to fix since you can't tell whether you're on `CPU` or `MultiCPU` from inside `fill_halo_regions!` with just knowledge of the `field`... I propose we revert #1444 just for now (since distributed models + tests are broken on master) and immediately open a new PR with the contents of #1444 where we can find a solution. My only idea is to add `architecture` to Field but perhaps it feels a little bloated... This failure was not caught by Buildkite since PR #590 was merged after #1444 was opened, and I think Buildkite only runs tests on branches, not pull requests (i.e. it doesn't merge master and run tests).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1484:596,test,tests,596,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1484,3,['test'],['tests']
Testability,"Reverts climate-machine/Oceananigans.jl#263 because boundary conditions API broke. Seems that the tests did not catch this maybe?. ```; (base) alir_mit_edu@oceananigans-debug:~/Oceananigans.jl$ julia --project newscript.jl ; WARNING: Method definition overdub(Cassette.Context{N, M, T, P, B, H} where H<:Union{Cassette.DisableHooks, Nothing} where B<:Union{Nothing, Base.IdDict{Module, Base.Dict{Symbol, Cassette.BindingMeta}}} where P<:Cassette.AbstractPass where T<:Union{Nothing, Cassette.Tag{N, X, E} where E where X where N<:Cassette.AbstractContextName} where M where N<:Cassette.AbstractContextName, Any...) in module Cassette at /home/alir_mit_edu/.julia/packages/Cassette/xggAf/src/overdub.jl:508 overwritten in module GPUifyLoops at /home/alir_mit_edu/.julia/packages/Cassette/xggAf/src/overdub.jl:508.; WARNING: Method definition recurse(Cassette.Context{N, M, T, P, B, H} where H<:Union{Cassette.DisableHooks, Nothing} where B<:Union{Nothing, Base.IdDict{Module, Base.Dict{Symbol, Cassette.BindingMeta}}} where P<:Cassette.AbstractPass where T<:Union{Nothing, Cassette.Tag{N, X, E} where E where X where N<:Cassette.AbstractContextName} where M where N<:Cassette.AbstractContextName, Any...) in module Cassette at /home/alir_mit_edu/.julia/packages/Cassette/xggAf/src/overdub.jl:521 overwritten in module GPUifyLoops at /home/alir_mit_edu/.julia/packages/Cassette/xggAf/src/overdub.jl:521.; CUDA-enabled GPU(s) detected:; CuDevice(0): Tesla V100-SXM2-16GB; ERROR: LoadError: TypeError: in setfield!, expected BoundaryCondition{Default,Nothing}, got BoundaryCondition{Flux,Float64}; Stacktrace:; [1] setbc!(::Oceananigans.CoordinateBoundaryConditions{BoundaryCondition{Default,Nothing},BoundaryCondition{Default,Nothing}}, ::Val{:left}, ::BoundaryCondition{Flux,Float64}) at /home/alir_mit_edu/Oceananigans.jl/src/boundary_conditions.jl:85; [2] setproperty!(::Oceananigans.CoordinateBoundaryConditions{BoundaryCondition{Default,Nothing},BoundaryCondition{Default,Nothing}}, ::Symbol, ::Boun",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/272:98,test,tests,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/272,1,['test'],['tests']
Testability,Rewrite regression tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/665:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/665,1,['test'],['tests']
Testability,"Ri : 0.010; Pr : 0.700; ν : 0.000235; κ : 0.000336; U_wall : 1.000; Θ_wall : 0.010. [1000.00%] i: 1, t: 1.00e-04, umax: (1.59e+00, 3.11e-01, 3.85e-01), CFL: 2.03e-04, νκmax: (9.98e-02, 9.97e-02), νκCFL: (1.60e-04, 1.60e-04), next Δt: 1.00e-04, wall time: 82.994 ms; Running static ocean benchmark: 16× 16× 16 [CPU, Float32]...; Running static ocean benchmark: 16× 16× 16 [CPU, Float64]...; Running static ocean benchmark: 16× 16× 16 [GPU, Float32]...; Running static ocean benchmark: 16× 16× 16 [GPU, Float64]... Oceananigans v0.34.1; 1 module _Test_static_ocean_; 2 using Printf; 3 using TimerOutputs; 4 using Oceananigans; 5 using Oceananigans.Utils; 6 ; 7 include(""benchmark_utils.jl""); 8 ; 9 #####; 10 ##### Benchmark setup and parameters; 11 #####; 12 ; 13 const timer = TimerOutput(); 14 ; 15 Nt = 10 # Number of iterations to use for benchmarking time stepping.; 16 ; 17 # Model resolutions to benchmarks. Focusing on 3D models for GPU benchmarking.; 18 Ns = [(16, 16, 16)]; 19 float_types = [Float32, Float64] # Float types to benchmark.; 20 archs = [CPU()] # Architectures to benchmark on.; 21 @hascuda archs = [CPU(), GPU()] # Benchmark GPU on systems with CUDA-enabled GPUs.; 22 ; 23 #####; 24 ##### Run benchmarks; 25 #####; 26 ; 27 for arch in archs, FT in float_types, N in Ns; 28 grid = RegularCartesianGrid(size=N, extent=(1, 1, 1)); 29 model = IncompressibleModel(architecture=arch, float_type=FT, grid=grid); 30 ; 31 time_step!(model, 1) # precompile; 32 ; 33 bname = benchmark_name(N, """", arch, FT); 34 @printf(""Running static ocean benchmark: %s...\n"", bname); 35 for i in 1:Nt; 36 @timeit timer bname time_step!(model, 1); 37 end; 38 end; 39 ; 40 #####; 41 ##### Print benchmark results; 42 #####; 43 ; 44 println(); 45 println(oceananigans_versioninfo()); 46 println(versioninfo_with_gpu()); 47 ; 48 print_timer(timer, title=""Static ocean benchmarks"", sortby=:name); 49 ; 50 println(""\n\nCPU Float64 -> Float32 speedup:""); 51 for N in Ns; 52 bn32 = benchmark_name(N, """", CPU(), F",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:104451,benchmark,benchmark,104451,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['benchmark'],['benchmark']
Testability,"Right now Buildkite only runs tests on the PR branch (pushes). Might be worth looking into whether Buildkite can also run pull request tests, i.e. merge the branch into master then run the tests. This would help catch issues like #1262.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1263:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1263,3,['test'],['tests']
Testability,"Right now I'm just constructing grids with dimensions that are multiples of 16 so; ```julia; Tx, Ty = 16, 16 # Threads per block; Bx, By, Bz = Int(Nx/Tx), Int(Ny/Ty), Nz # Blocks in grid.; ```. @vchuravy suggested laying them out to fill out the _x_-direction first, then the _y_-direction, then the _z_-direction. That would also let us use grids with arbitrary sizes, i.e. not just multiples of 16. Not sure if it would affect performance for large problems. See https://github.com/vchuravy/GPUifyLoops.jl/pull/18#issuecomment-465150581. Update: Yeah I should have done this a long time ago. This issue is preventing us from running small grids (e.g. 1D column models) on the GPU and running certain tests.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/64:702,test,tests,702,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/64,1,['test'],['tests']
Testability,"Right now JLD2 files always include the full grid (with halos) in `file[""grid""]` which can make it hard to make plots of the data, especially if it was sliced (requiring users to know how to cut out the halos). Not sure if this is a bug as `file[""grid""]` might be referring to the grid the simulation was run on in which case it makes sense to include all the coordinates including halos, but this might still surprise users wishing to make plots. Thanks to @vchuravy for helping uncover this issue!. ```julia; using Oceananigans, Oceananigans.OutputWriters, JLD2; grid = RegularCartesianGrid(size=(8, 8, 8), extent=(1, 2, 3)); model = IncompressibleModel(grid=grid); simulation = Simulation(model, Δt=1, stop_iteration=1); simulation.output_writers[:test] = JLD2OutputWriter(model, merge(model.velocities, model.tracers), schedule=IterationInterval(1), prefix=""test"", field_slicer=FieldSlicer(k=grid.Nz, with_halos=false)); run!(simulation); f = jldopen(""test.jld2""); ```. so. ```julia; julia> size(f[""timeseries/u/1""]); (8, 8, 1); ```. but. ```julia; julia> f[""grid/zC""]; 10-element Array{Float64,1}:; -3.1875; -2.8125; -2.4375; -2.0625; -1.6875; -1.3125; -0.9375; -0.5625; -0.1875; 0.1875; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1194:751,test,test,751,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1194,3,['test'],['test']
Testability,"Right now `Oceananigans.Distributed` requires the grid points to be split evenly among the ranks, e.g. if you have 4 ranks along the x-direction then `grid.Nx` must be a multiple of 4. @christophernhill suggested generalizing this. He's written some code for dividing nearly evenly into N subdomains when the global number of points is not exactly divisable by N: https://github.com/christophernhill/iap-2021-12.091/blob/e79dfe9dca5441e561cefd65b4c052b1a1dea5a3/step3.py#L36. `IncompressibleModel` can only be decomposed in y but `ShallowWaterModel` and `HydrostaticFreeSurfaceModel` can be decomposed in x and y so we should try this out with one of them. With shallow water model in this PR we could test different x, y, and xy domain decompositions (all non-equal).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1450:702,test,test,702,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1450,1,['test'],['test']
Testability,"Right now `SpecifiedTimes` is acting in a way different from its documentation. In addition to triggering a callback in the specified times, according to the docs, it's also triggering the callback in initialization. For example, the following MWE. ```julia; using Oceananigans. grid = RectilinearGrid(size=(4, 4, 4), extent=(1, 1, 1)); model = NonhydrostaticModel(; grid); simulation = Simulation(model, Δt=1, stop_iteration=10). callback_func(sim) = @warn ""Function called in iteration $(sim.model.clock.iteration)""; simulation.callbacks[:cfl_changer] = Callback(callback_func, SpecifiedTimes([5, 10])). run!(simulation); ```. produces the following output. ```julia; [ Info: Initializing simulation...; ┌ Warning: Function called in iteration 0; └ @ Main ~/repos/Oceananigans.jl/sandbox/test_specified_times.jl:7; [ Info: ... simulation initialization complete (262.483 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (28.766 seconds).; ┌ Warning: Function called in iteration 5; └ @ Main ~/repos/Oceananigans.jl/sandbox/test_specified_times.jl:7; [ Info: Simulation is stopping. Model iteration 10 has hit or exceeded simulation stop iteration 10.; ┌ Warning: Function called in iteration 10; └ @ Main ~/repos/Oceananigans.jl/sandbox/test_specified_times.jl:7; ```. Is this by design? If so the docs for `SpecifiedTimes` must be changed to account for that since they currently read:. ```; Return a callable TimeInterval that ""actuates"" (schedules output or callback execution) whenever the model's clock equals the specified values in times. For example,. • SpecifiedTimes([1, 15.3]) actuates when model.clock.time is 1 and 15.3.; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2719:782,sandbox,sandbox,782,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2719,3,['sandbox'],['sandbox']
Testability,"Right now all our tests are lumped into one (unit, integration, and model verification tests) and we run the tests on the CPU and the GPU (most tests are shared). This is not a high priority item right now, but it's already annoying that I have to wait several minutes for the GPU tests to run as I'm debugging. So just starting up a discussion around this topic. I can see us hitting some limitations soon:; 1. A comprehensive test suite will take time to run, long enough that we cannot keep running it during development and debugging.; 2. Comprehensive model verification tests (or system tests?) will take even longer to run and are absolutely crucial (see #81 #136), so this problem will get worse in the future.; 3. GPU tests take a while to run because of long compile time (#66) and they run on top of all the CPU tests. In general, setting up GPU models take more time so it's not ideal that we're setting up tons of tiny models for testing. Testing GPU stuff may also involve some expensive scalar CUDA operations (see #82). We will also need to run the test suite on the following architectures in the future:; 1. single-core CPU (Travis CI and Appveyor are fine here); 2. single GPU (JuliaGPU's GitLab CI pipeline works great here); 3. multi-core single CPU (MPI) (paid CI plans will probably work here); 4. multiple distributed CPU nodes (MPI) (no idea where to run this); 5. multiple GPUs (MPI) (no idea where to run this). Some ideas for things to do that will help:; 1. Explicitly split the tests up into 2-3 suites; 1.1. **Unit tests**: should run in a few minutes so we can run them during development and on every commit/PR/etc.; 1.2. **Integration tests**: can take a while to run so we don't want to run these locally all the time but probably on every PR. Shouldn't take much more than 1 hour to run so we don't have to wait forever to merge PR's.; 1.3. **Model verification tests** (also called _end-to-end_ tests): will probably take a long time to run. Maybe run this once a ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/139:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/139,12,"['Test', 'test']","['Testing', 'test', 'testing', 'tests']"
Testability,"Right now easiest thing to do would be to manually test the package on Supercloud or somewhere with multiple GPUs, but CI with GPUs would be nice. See for ideas: https://github.com/JuliaGPU/gitlab-ci. Might not be worth setting up for a while, seems like too much work.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/53:51,test,test,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/53,1,['test'],['test']
Testability,"Right now only 1 benchmark job is run to check for performance regression, which is important seeing as sometimes we introduce rogue bugs that kill performance. cc @simonbyrne will this work with the Slurm CI/CliMA bot framework you've set up? Will be awesome to start using it. No MPI stuff yet but will probably add some soon.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/280:17,benchmark,benchmark,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/280,1,['benchmark'],['benchmark']
Testability,"Right now reductions only exclude _immersed_ peripheral nodes:. https://github.com/CliMA/Oceananigans.jl/blob/72e2197e640ddf308fd40aa4658e7686e596bccd/src/ImmersedBoundaries/immersed_reductions.jl#L27. It recently caused me a lot of pain and confusion and time that ""ordinary"" peripheral nodes are included in the reduction, but immersed peripheral nodes are not. What is the logic for treating immersed boundaries differently from ordinary boundaries? I think we should either exclude only inactive nodes or peripheral nodes, but this behavior should be consistent between immersed and not immersed grids. This change would mean we don't need special reductions (at least for fields that are not reduced) on immersed vs not-immersed grids. @simone-silvestri may have the answer.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3064:376,log,logic,376,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3064,1,['log'],['logic']
Testability,"Right now regression data takes up a significant amount of space in the repo. I suppose this is not a huge issue as only developers/contributors `git clone` the repo while users can just `] add Oceananigans`. But a potential solution would be to store regression data elsewhere and access it using DataDeps.jl. This might be especially good if we want more/larger regression tests. And it wouldn't increase the repo size every time you have to change the regression data. We could maybe the store on engaging? Ideally it should be hosted somewhere with near 100% uptime as we're already maintaining Buildkite which fails sometimes, so we should try to reduce the number of possible failure points in our CI pipeline. ---. Copy pasted some analysis below:. I think regression files currently take up ~17.1 MiB of space in the git repo while a fresh clone of the repo is ~43 MiB (images and convergence plots probably take up several MiB). Here's a listing of all files in git history over 300 KiB (command from https://stackoverflow.com/a/42544963):; ```; 018186272590 328KiB test/data_rayleigh_benard_regression_000001100.jld; 19db949aaae8 328KiB test/data_rayleigh_benard_regression_000001000.jld; 424080660c53 328KiB test/data_rayleigh_benard_regression_000001000.jld; a7e1d690d6b5 328KiB test/data_rayleigh_benard_regression_000001100.jld; 72744372e5c4 361KiB test/regression_tests/data/thermal_bubble_regression.nc; 4ce9699176ee 363KiB test/deep_convection_regression_10.nc; c15f95e2bf3a 364KiB test/regression_tests/data/thermal_bubble_regression.nc; 6f28044e3b56 366KiB docs/src/verification/convergence_plots/gaussian_advection_diffusion_error_convergence.png; 194fdf47099b 392KiB docs/src/verification/convergence_plots/gaussian_advection_diffusion_error_convergence.png; 2f9d5e8650d7 420KiB docs/src/verification/convergence_plots/cosine_advection_diffusion_error_convergence.png; db8f742e7c95 446KiB docs/src/verification/convergence_plots/cosine_advection_diffusion_error_convergence.png; 0",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1086:375,test,tests,375,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1086,1,['test'],['tests']
Testability,"Right now tests cannot proceed until both CPU and GPU environments have been initialized. This slows down testing, especially on the CPU as there are fewer GPU agents (and GPU tests take longer). We should switch to using explicit Buildkite dependencies so GPU tests can start once the GPU environment has been initialized (and same for CPU): https://buildkite.com/docs/pipelines/dependencies#defining-explicit-dependencies",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1056:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1056,4,['test'],"['testing', 'tests']"
Testability,Right now the `model` `TEST_GROUP` takes about 48 minutes to run on sverdrup. So it'd be nice to split this test group up so that each test build is < 30 minutes.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1048:108,test,test,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1048,2,['test'],['test']
Testability,"Right now we have a simple interval wave test in `test_dynamics.jl` (vertically propagating and only 10 time steps) and an example (@glwagner thinks it looks off). We should turn them into a rigorous verification experiment. Would be a good test of the pressure gradient term, and we can compare with an analytic solution.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/674:41,test,test,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/674,2,['test'],['test']
Testability,"Right now we load cubed sphere grids from a file which is a Julia/JLD2.jl version of the binary files used by MITgcm. These grid files are currently stored at https://github.com/CliMA/OceananigansArtifacts.jl. The easiest way to use them is to load them as a data dependency with DataDeps.jl: https://github.com/CliMA/Oceananigans.jl/blob/master/test/data_dependencies.jl. This works well for the CS32 and CS96 grids, but for much larger grids like the CS510 the grid file is ~200 MiB uncompressed (~118 MiB compressed with JLD2's `compress=true`) which is bigger than GitHub's 100 MiB file size limit. 200 MiB for a grid file is also a bit cumbersome. Right now I'm thinking of hosting CS510 on the engaging cluster, although git lfs for OceananigansArtifacts.jl may be an option. It would be nice to be able to generate conformal cubed sphere grid files to make it easier for users to use cubed sphere grids, and also for the added flexibility of not being limited to three common resolutions (CS32, CS96, and CS510). It would also be good to keep the ability to load a cubed sphere grid from file since we may want to do this for other grids besides the cubed sphere in the future (lat-lon-cap or LLC grids?), and it would be useful to test that the grids we generate are indeed correct by comparing with the grid files. I'm opening this issue just to document what we know about conformal cubed sphere grid generation. It's not a particularly urgent issue. # Computing grid metrics. We already have some code that generates conformal cubed sphere grids with the coordinates, but they are missing the grid metrics (grid spacings and areas). @christophernhill has pointed out these MITgcm MATLAB scripts that may just be what we need to compute the grid metrics. http://wwwcvs.mitgcm.org/viewvc/MITgcm/MITgcm_contrib/high_res_cube/matlab-grid-generator/README?revision=1.1.1.1&view=markup; http://wwwcvs.mitgcm.org/viewvc/MITgcm/MITgcm_contrib/high_res_cube/matlab-grid-generator/calc_fvgrid.m?revis",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1586:346,test,test,346,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1586,1,['test'],['test']
Testability,"Right! The CPU -> GPU speed up has limited value, because the CPU is not a good reference / is not optimized. More useful would be a comparison with other models, somehow, but this is always challenging, especially for complicated models. Another useful piece of information would compare performance for difference GPUs. This blog post (which advertises the advantages of liquid cooled GPUs) is relevant and includes some Oceananigans benchmarks:. https://www.markiiisys.com/blog/liquid-cooled-workstation-advantageous-for-big-ocean-simulations-exceptional-for-small-tasks-oregon-state-mark-iii-nvidia-supermicro/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3684#issuecomment-2272422585:436,benchmark,benchmarks,436,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3684#issuecomment-2272422585,1,['benchmark'],['benchmarks']
Testability,"Right, #1786 doesn't resolve this issue. Rather, it ensures that the tests in #1782 fail, so that we can fix the issue on #1782 .",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870695452:69,test,tests,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870695452,1,['test'],['tests']
Testability,"Right, I think the problem is the availability of AMD GPUs to run tests. If we find one, I can revamp this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328512985:66,test,tests,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328512985,1,['test'],['tests']
Testability,"Right, there are no tests (or examples, or docs) on using `Field` (rather than `Array`) as a boundary condition... How about an issue to change the docs and add a test in a future PR?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3287#issuecomment-1737807119:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3287#issuecomment-1737807119,2,['test'],"['test', 'tests']"
Testability,"Right, there are some caveats on how you interpret those times. They aren't a benchmark.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877438005:78,benchmark,benchmark,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877438005,1,['benchmark'],['benchmark']
Testability,"Rigid lid is actually just a short step from having an implicit free surface (and looks like we are about to have a direct solver for simple domains ala #1869...) --- the math is identical for the implicit solve, with a few terms zero'd out (eg, take the limit of an infinitely long time step). This implies too that models with an implicit free surface that take very long time steps compared to the gravity wave time-scale (most large scale models...) are effectively quite close mathematically to the rigid lid case (notwithstanding effects of runoff, precipitation, and evaporation). It seems an _explicit_ rigid lid formulation is not very practically useful, mostly because iterative solves take longer so rigid lid models in complex domains where there's no direct solve end up being slower. I'm not sure if there are any advantages re: tracer conservation. The story might get more interesting with generalized vertical coordinates, too. If anyone is keen to run problems with rigid lids, we can implement it and test it without too much trouble. MITgcm docs explain this well: https://mitgcm.readthedocs.io/en/latest/algorithm/algorithm.html#implicit-time-stepping-backward-method",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1620#issuecomment-882560379:1021,test,test,1021,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1620#issuecomment-882560379,2,['test'],['test']
Testability,Run Windows tests on GitHub Actions.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1050:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1050,1,['test'],['tests']
Testability,Run convergence tests as part of the verification testset,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/873:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/873,2,['test'],"['tests', 'testset']"
Testability,Run convergence tests on GPU,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1216:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1216,1,['test'],['tests']
Testability,"Running channel benchmark: 16× 16× 16 [GPU, Float32]...; Running channel benchmark: 16× 16× 16 [GPU, Float64]... Oceananigans v0.34.1; 1 module _Test_channel_; 2 using Printf; 3 using TimerOutputs; 4 using Oceananigans; 5 using Oceananigans.Utils; 6 ; 7 include(""benchmark_utils.jl""); 8 ; 9 #####; 10 ##### Benchmark setup and parameters; 11 #####; 12 ; 13 const timer = TimerOutput(); 14 ; 15 Nt = 10 # Number of iterations to use for benchmarking time stepping.; 16 ; 17 # Model resolutions to benchmarks. Focusing on 3D models for GPU benchmarking.; 18 Ns = [(16, 16, 16)]; 19 float_types = [Float32, Float64] # Float types to benchmark.; 20 archs = [CPU()] # Architectures to benchmark on.; 21 @hascuda archs = [CPU(), GPU()] # Benchmark GPU on systems with CUDA-enabled GPUs.; 22 ; 23 #####; 24 ##### Run benchmarks; 25 #####; 26 ; 27 for arch in archs, FT in float_types, N in Ns; 28 	topology = (Periodic, Bounded, Bounded); 29 	grid = RegularCartesianGrid(topology=topology, size=N, extent=(1, 1, 1)); 30 model = IncompressibleModel(architecture=arch, float_type=FT, grid=grid); 31 ; 32 time_step!(model, 1) # precompile; 33 ; 34 bname = benchmark_name(N, """", arch, FT); 35 @printf(""Running channel benchmark: %s...\n"", bname); 36 for i in 1:Nt; 37 @timeit timer bname time_step!(model, 1); 38 end; 39 end; 40 ; 41 #####; 42 ##### Print benchmark results; 43 #####; 44 ; 45 println(); 46 println(oceananigans_versioninfo()); 47 println(versioninfo_with_gpu()); 48 ; 49 print_timer(timer, title=""Channel benchmarks"", sortby=:name); 50 ; 51 println(""\n\nCPU Float64 -> Float32 speedup:""); 52 for N in Ns; 53 bn32 = benchmark_name(N, """", CPU(), Float32); 54 bn64 = benchmark_name(N, """", CPU(), Float64); 55 t32 = TimerOutputs.time(timer[bn32]); 56 t64 = TimerOutputs.time(timer[bn64]); 57 @printf(""%s: %.3f\n"", benchmark_name(N), t64/t32); 58 end; 59 ; 60 @hascuda begin; 61 println(""\nGPU Float64 -> Float32 speedup:""); 62 for N in Ns; 63 bn32 = benchmark_name(N, """", GPU(), Float32); 64 bn64 = ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:108208,benchmark,benchmarks,108208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,Running the `distributed_nonhydrostatic_model_mpi.jl` benchmark,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2433:54,benchmark,benchmark,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2433,1,['benchmark'],['benchmark']
Testability,Running with 2 threads is the worst memory-wise. See benchmarks from https://github.com/CliMA/Oceananigans.jl/pull/1120#issuecomment-732516353 and similar results were reported by @francispoulin on a different machine from https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734500922. Not sure if this is because of Oceananigans.jl or because of KernelAbstractions.jl. Multithreaded seems to allocate a ton of memory in general though.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1218:53,benchmark,benchmarks,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1218,1,['benchmark'],['benchmarks']
Testability,"S20_S21_S8_IS9_Li1ES22_IS9_S23_IS9_ES23_IS9_EEEES9_ES24_10_identity4S18_vS19_IS9_S20_S20_S21_S8_IS9_Li1ES22_IS9_S23_IS9_ES23_IS9_EEEES9_ES15_IS12_S12_S12_S13_S16_IS12_S12_S12_6__z___S8_IS9_Li3ES10_IS9_Li3ELi1EEES25_vvS19_IS9_S20_S20_S21_S8_IS9_Li1ES22_IS9_S23_IS9_ES23_IS9_EEEES9_ES24_S26_S28_vS19_IS9_S20_S20_S21_S8_IS9_Li1ES22_IS9_S23_IS9_ES23_IS9_EEEES9_ES15_I4FaceS12_S31_S13_S16_IS31_S12_S31_S17_S8_IS9_Li3ES10_IS9_Li3ELi1EEES29_vvS19_IS9_S20_S20_S21_S8_IS9_Li1ES22_IS9_S23_IS9_ES23_IS9_EEEES9_ES24_S18_S25_vS19_IS9_S20_S20_S21_S8_IS9_Li1ES22_IS9_S23_IS9_ES23_IS9_EEEES9_ES15_IS12_S31_S31_S13_S16_IS12_S31_S31_S27_S8_IS9_Li3ES10_IS9_Li3ELi1EEES26_vvS19_IS9_S20_S20_S21_S8_IS9_Li1ES22_IS9_S23_IS9_ES23_IS9_EEEES9_ES24_S28_S29_vS19_IS9_S20_S20_S21_S8_IS9_Li1ES22_IS9_S23_IS9_ES23_IS9_EEEES9_EES14_IS18_S25_S26_7__xz___7__yz___EvS19_IS9_S20_S20_S21_S8_IS9_Li1ES22_IS9_S23_IS9_ES23_IS9_EEEES9_E' uses too much parameter space (0x1438 bytes, 0x1100 max).; ptxas fatal : Ptx assembly aborted due to errors; ```. A possible solution is proposed at https://github.com/JuliaGPU/CUDA.jl/issues/267. One workaround within Oceananigans is to ""stage"" the computation:. ```julia; julia> uxvywz = ComputedField(∂x(u)^2 + ∂y(v)^2 + ∂z(w)^2); ComputedField located at (Center, Center, Center) of MultiaryOperation at (Center, Center, Center); ├── data: OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3}}, size: (1, 1, 1); ├── grid: RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=1, Nz=1); ├── operand: MultiaryOperation at (Center, Center, Center); └── status: time=0.0. julia> compute!(ComputedField(uxvywz + ∂x(w)^2 + ∂y(w)^2, data=uxvywz.data)); ```. By sharing memory between the `ComputedField`s, we avoid allocating more memory in this solution. It may still be more computationally expensive however (though benchmarking is required to confirm that, as its not certain). Another solution is to hand-write the kernel operation using `KernelFunctionOperation`. cc @tomchor",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1886:3257,benchmark,benchmarking,3257,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1886,1,['benchmark'],['benchmarking']
Testability,Same as https://github.com/CliMA/Oceananigans.jl/pull/2899 but pinning GPUCompiler to version 0.16.4. This pinning made tests pass in https://github.com/CliMA/Oceananigans.jl/pull/2865,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2900:120,test,tests,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900,1,['test'],['tests']
Testability,Same here... Examples are fine after reverting in PR #1248 but I also noticed that shallow water tests are passing in that PR but failing on master so that's pretty weird. I'm pretty confused as well.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1247#issuecomment-739324370:97,test,tests,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1247#issuecomment-739324370,1,['test'],['tests']
Testability,Same issue with test not passing. Not sure what happened. Unable to look into it before Jan 3rd.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1002437838:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1002437838,1,['test'],['test']
Testability,"Same tests performed on an **Immersed** grid with a random bathymetry (i.e. roughly 50% of the cells are immersed); on main:. ```julia ; julia> using NESAPOceananigans; julia> set_problem_size!(500, 500, 50). julia> trial1 = run_model_benchmark!(momentum_kernel_test, GPU();; use_benchmarktools = true,; bathymetry = random_bathymetry()); BenchmarkTools.Trial: 5 samples with 1 evaluation.; Range (min … max): 20.150 ms … 21.143 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 20.174 ms ┊ GC (median): 0.00%; Time (mean ± σ): 20.384 ms ± 428.856 μs ┊ GC (mean ± σ): 0.00% ± 0.00%. █▁ ▁ ▁; ██▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁; 20.1 ms Histogram: frequency by time 21.1 ms <. Memory estimate: 482.09 KiB, allocs estimate: 407. julia> trial1 = run_model_benchmark!(tracer_kernel_test, GPU();; use_benchmarktools = true,; bathymetry = random_bathymetry()); BenchmarkTools.Trial: 5 samples with 1 evaluation.; Range (min … max): 9.614 ms … 10.272 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 9.717 ms ┊ GC (median): 0.00%; Time (mean ± σ): 9.797 ms ± 271.120 μs ┊ GC (mean ± σ): 0.00% ± 0.00%. █ █ █ █ █; █▁█▁▁▁▁▁▁█▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁; 9.61 ms Histogram: frequency by time 10.3 ms <. Memory estimate: 89.45 KiB, allocs estimate: 320. ```. on this branch:; ```julia ; julia> using NESAPOceananigans; julia> set_problem_size!(500, 500, 50). julia> trial1 = run_model_benchmark!(momentum_kernel_test, GPU();; use_benchmarktools = true,; bathymetry = random_bathymetry()); trial1 = run_model_benchmark!(momentum_kernel_test, arch; use_benchmarktools = true, bottom_height = random_bathymetry()) = Trial(13.991 ms); BenchmarkTools.Trial: 5 samples with 1 evaluation.; Range (min … max): 13.991 ms … 22.167 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 14.057 ms ┊ GC (median): 0.00%; Time (mean ± σ): 15.676 ms ± 3.629 ms ┊ GC (mean ± σ): 0.00% ± 0.00%. █; █▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▇ ▁; 14 ms Histogram: f",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2243530643:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2243530643,3,"['Benchmark', 'test']","['BenchmarkTools', 'tests']"
Testability,Sandbox scripts for Large eddy simulation,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/315:0,Sandbox,Sandbox,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/315,1,['Sandbox'],['Sandbox']
Testability,"Say we want to retrieve linear operator `A` given a function `linear_operation(x)` that applied on `x` returns `A*x`. Then, we can apply the `linear_operation` to all unit vectors and each time we get a column of `A`. [thanks @glwagner!]. For example, say we have a 1D case in which `A` is d²/dx²:. ```Julia; using OffsetArrays. L = 1; N = 8; H = 1; δ = L/N. poisson(f, i) = (f[i+1] - 2*f[i] + f[i-1])/δ^2. function fill_halos!(f::OffsetVector); f[0] = f[N]; f[N+1] = f[1]. return nothing; end. interior(f::OffsetVector) = f[1:N]. A = OffsetArray(zeros(N, N)). for j in 1:N; eⱼ = OffsetArray(zeros(N+2H), -H); eⱼ[j] = 1; fill_halos!(eⱼ); ∇²eⱼ = 0 * eⱼ; for i in 1:N; ∇²eⱼ[i] = poisson(eⱼ, i); end. A[:, j] = interior(∇²eⱼ); end. @show A. # test if A does the job. # compute the laplacian of f poisson() function; f = OffsetArray(rand(N+2H, ), -H); fill_halos!(f). ∇²f = 0 * f. for i in 1:N; ∇²f[i] = poisson(f, i); end. # compute the laplacian of f using matrix A; ∇²f_matrix = A * interior(f); ```. returns. ```Julia; julia> @show A; A = [-128.0 64.0 0.0 0.0 0.0 0.0 0.0 64.0; 64.0 -128.0 64.0 0.0 0.0 0.0 0.0 0.0; 0.0 64.0 -128.0 64.0 0.0 0.0 0.0 0.0; 0.0 0.0 64.0 -128.0 64.0 0.0 0.0 0.0; 0.0 0.0 0.0 64.0 -128.0 64.0 0.0 0.0; 0.0 0.0 0.0 0.0 64.0 -128.0 64.0 0.0; 0.0 0.0 0.0 0.0 0.0 64.0 -128.0 64.0; 64.0 0.0 0.0 0.0 0.0 0.0 64.0 -128.0]; 8×8 OffsetArray(::Matrix{Float64}, 1:8, 1:8) with eltype Float64 with indices 1:8×1:8:; -128.0 64.0 0.0 0.0 0.0 0.0 0.0 64.0; 64.0 -128.0 64.0 0.0 0.0 0.0 0.0 0.0; 0.0 64.0 -128.0 64.0 0.0 0.0 0.0 0.0; 0.0 0.0 64.0 -128.0 64.0 0.0 0.0 0.0; 0.0 0.0 0.0 64.0 -128.0 64.0 0.0 0.0; 0.0 0.0 0.0 0.0 64.0 -128.0 64.0 0.0; 0.0 0.0 0.0 0.0 0.0 64.0 -128.0 64.0; 64.0 0.0 0.0 0.0 0.0 0.0 64.0 -128.0; ```. and; ```julia; julia> isapprox(interior(∇²f), ∇²f_matrix); true; ```; For a 2D case with `A = ∂²/∂x² + ∂²/∂y²` we have:. ```Julia; using OffsetArrays. Lx = 2; Ly = 3; Nx = 12; Ny = 18; H = 1; δx = Lx/Nx; δy = Ly/Ny. poisson(f::OffsetMatrix, i, j) = (f[i+1, j]",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1109351042:740,test,test,740,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1109351042,1,['test'],['test']
Testability,"Scalar diffusivity fails on GPU if you use fields for the viscosity/diffusivity since there is no adapt method. . I've added them in this PR along with a test, feel free to remove the test if its too much.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3401:154,test,test,154,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3401,2,['test'],['test']
Testability,Search and replace testing for example scripts,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/418:19,test,testing,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/418,1,['test'],['testing']
Testability,"See below for a MWE. ```Julia; $ julia --project=docs; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.9.0 (2023-05-07); _/ |\__'_|_|_|\__'_| |; |__/ |. julia> using Glob. julia> glob(""src/*.jl""); 6-element Vector{String}:; ""src/Architectures.jl""; ""src/Biogeochemistry.jl""; ""src/Logger.jl""; ""src/Oceananigans.jl""; ""src/StokesDrift.jl""; ""src/Units.jl"". julia> glob(""src/**/*.jl""); 213-element Vector{String}:; ""src/AbstractOperations/AbstractOperations.jl""; ""src/AbstractOperations/at.jl""; ""src/AbstractOperations/binary_operations.jl""; ""src/AbstractOperations/broadcasting_abstract_operations.jl""; ""src/AbstractOperations/computed_field.jl""; ""src/AbstractOperations/conditional_operations.jl""; ""src/AbstractOperations/constant_field_abstract_operations.jl""; ""src/AbstractOperations/derivatives.jl""; ""src/AbstractOperations/grid_metrics.jl""; ""src/AbstractOperations/grid_validation.jl""; ""src/AbstractOperations/kernel_function_operation.jl""; ""src/AbstractOperations/metric_field_reductions.jl""; ""src/AbstractOperations/multiary_operations.jl""; ""src/AbstractOperations/show_abstract_operations.jl""; ""src/AbstractOperations/unary_operations.jl""; ""src/Advection/Advection.jl""; ""src/Advection/cell_advection_timescale.jl""; ""src/Advection/centered_advective_fluxes.jl""; ""src/Advection/centered_reconstruction.jl""; ""src/Advection/flat_advective_fluxes.jl""; ⋮; ""src/TurbulenceClosures/implicit_explicit_time_discretization.jl""; ""src/TurbulenceClosures/isopycnal_rotation_tensor_components.jl""; ""src/TurbulenceClosures/turbulence_closure_diagnostics.jl""; ""src/TurbulenceClosures/turbulence_closure_utils.jl""; ""src/TurbulenceClosures/velocity_tracer_gradients.jl""; ""src/TurbulenceClosures/vertically_implicit_diffusion_solver.jl""; ""src/Utils/Utils.jl""; ""src/Utils/kernel_launching.jl""; ""src/Utils/multi_region_transformation.jl""; ""src/Utils/ordered_dict_show.jl""; ""src/Util",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3109:417,Log,Logger,417,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3109,1,['Log'],['Logger']
Testability,See https://github.com/CliMA/Oceananigans.jl/discussions/3457. Made PR to see if tests will pass.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3458:81,test,tests,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3458,1,['test'],['tests']
Testability,Seems like a good idea to have an LES regression test for big PRs that modify the `TurbulenceClosures` module such as PR #452. I guess we can use a coarse stratified Couette flow or free convection simulation in steady state to check for this.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/473:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/473,1,['test'],['test']
Testability,"Seems like the `Float32` tracer conservation test is actually running with `Float64`... ```; [ Info: Tracer conservation after 10 time steps (CPU(), Float32): ⟨T⟩-T₀=-7.105427357601002e-14 °C; [ Info: Tracer conservation after 10 time steps (CPU(), Float64): ⟨T⟩-T₀=4.618527782440651e-14 °C; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/487:45,test,test,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/487,1,['test'],['test']
Testability,"Seems like this bit. https://github.com/CliMA/Oceananigans.jl/blob/29b4cf9e108ea4b72004fee940c66b706b138bbb/test/test_field.jl#L269-L272. runs on the `CPU unit tests`!. https://buildkite.com/clima/oceananigans/builds/3952#f28dce5a-3fa6-486c-9bb6-a543eb6face7. Anybody has any idea why?. cc: @ali-ramadhan, @glwagner",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-940781017:108,test,test,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-940781017,2,['test'],"['test', 'tests']"
Testability,Seems that the distributed tests passed. ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3489#issuecomment-1972796915:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3489#issuecomment-1972796915,1,['test'],['tests']
Testability,Set `-O0` when testing,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1078:15,test,testing,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1078,1,['test'],['testing']
Testability,Set h=1 in shallow water time stepping tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1264:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1264,1,['test'],['tests']
Testability,Set up Slurm pipeline for performance regression testing.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/280:49,test,testing,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/280,1,['test'],['testing']
Testability,Shall we merge this (when tests pass)?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1964566780:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1964566780,1,['test'],['tests']
Testability,"Shallow Water Models | 18 7 25; Model constructor errors | 2 2; (Periodic, Periodic, Bounded) model construction | 6 6; (Periodic, Bounded, Bounded) model construction | 6 6; (Bounded, Bounded, Bounded) model construction | No tests; Setting ShallowWaterModel fields | 4 4; Time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)] | 1 1; Time-stepping ShallowWaterModels [GPU(), (Periodic, Bounded, Bounded)] | 1 1; Time-stepping ShallowWaterModels [GPU(), (Bounded, Bounded, Bounded)] | 1 1; Time-stepping ShallowWaterModels [GPU(), Nothing] | 1 1; Time-stepping ShallowWaterModels [GPU(), FPlane{Float64}] | 1 1; Time-stepping ShallowWaterModels [GPU(), BetaPlane{Float64}] | 1 1; Time-step Wizard ShallowWaterModels [GPU(), ((Periodic, Periodic, Bounded), (Periodic, Bounded, Bounded), (Bounded, Bounded, Bounded))[1]] | 1 1; ERROR: LoadError: Some tests did not pass: 18 passed, 0 failed, 7 errored, 0 broken.; in expression starting at /home/fpoulin/software/Oceananigans.jl/test/runtests.jl:77; error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1326:1360,test,test,1360,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1326,1,['test'],['test']
Testability,Shallow water model tests are failing on master because `model.velocities.u` does not exist for `ShallowWaterModel`. This PR fixes this by checking for NaNs in the model's first field.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1257:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1257,1,['test'],['tests']
Testability,Shallow water regression tests often fail on GPU,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922,1,['test'],['tests']
Testability,Should I change everything in the `test` dir?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942850898:35,test,test,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942850898,1,['test'],['test']
Testability,Should I have a go at fixing the tests @glwagner?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1511478427:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1511478427,1,['test'],['tests']
Testability,Should I hold on reviewing until you figure out the tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1869#issuecomment-884620494:52,test,tests,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1869#issuecomment-884620494,1,['test'],['tests']
Testability,Should I just merge this since none of the tests are working? I've tested this locally and it's a pretty straightforward change,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1761#issuecomment-867077913:43,test,tests,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1761#issuecomment-867077913,2,['test'],"['tested', 'tests']"
Testability,Should be `Δz^2` instead of `Δz`. But this cannot be merged as is because it breaks some tests: the Rayleigh–Bénard tracer regression test uses Value boundary conditions and so the regression data would have to be regenerated.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/322:89,test,tests,89,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/322,2,['test'],"['test', 'tests']"
Testability,"Should be ready to go when all tests pass. We can wait for PR #2121 to finish and then merge this in. Update. Actually need to finish adapting the solver for the `NonHydrostaticModel` (i.e., the `z_face_solver`)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1013367087:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1013367087,1,['test'],['tests']
Testability,Should be ready to merge when tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3328#issuecomment-1758171611:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3328#issuecomment-1758171611,1,['test'],['tests']
Testability,Should be ready. Maybe a couple of tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3233#issuecomment-1753490292:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3233#issuecomment-1753490292,1,['test'],['tests']
Testability,"Should close #3833. Probably, we can wait to merge #3792 before this one and add some tests for fill halo regions here",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3834:86,test,tests,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3834,1,['test'],['tests']
Testability,"Should have instructions for:; * How to install the package as a user.; * How to `git clone`, `instantiate`, and `test` the package as a developer.; * CPU instructions.; * GPU instructions.; * When #151 is resolved, docker installation instructions. CPU and GPU instructions should not be separate but when #79 is solved, we should be able to run on the CPU without installing (and failing to build) all the CUDA packages.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/152:114,test,test,114,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/152,1,['test'],['test']
Testability,"Should run these benchmarks again once everything works on the GPU. Notes:; 1. Lat-lon grid seems slower than the single cubed sphere face, which is weird. Maybe the cost of computing the grid metrics on the fly is actually adding up to a significant overhead?; 2. Cubed sphere grid performs better than it should (less than 6x slower than 1 face), but allocates a lot of memory.; 3. Explicit vs. implicit free surface solver performance is problem-dependent so for the purposes of this benchmarks every implicit solver is forced to take 1 iteration. ```; Hydrostatic model benchmarks; ┌───────────────┬──────────────────────────────┬─────────────────────┬───────────┬───────────┬───────────┬───────────┬────────────┬─────────┬─────────┐; │ Architectures │ grid_types │ free_surface_types │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼──────────────────────────────┼─────────────────────┼───────────┼───────────┼───────────┼───────────┼────────────┼─────────┼─────────┤; │ CPU │ RegularRectilinearGrid │ ExplicitFreeSurface │ 3.127 ms │ 3.632 ms │ 3.665 ms │ 4.225 ms │ 263.23 KiB │ 1726 │ 10 │; │ CPU │ RegularLatitudeLongitudeGrid │ ExplicitFreeSurface │ 9.765 ms │ 10.370 ms │ 10.428 ms │ 11.847 ms │ 290.50 KiB │ 1984 │ 10 │; │ CPU │ ConformalCubedSphereFaceGrid │ ExplicitFreeSurface │ 5.986 ms │ 9.676 ms │ 10.276 ms │ 16.990 ms │ 151.66 KiB │ 1994 │ 10 │; │ CPU │ ConformalCubedSphereGrid │ ExplicitFreeSurface │ 24.817 ms │ 28.235 ms │ 30.393 ms │ 45.743 ms │ 2.12 MiB │ 41751 │ 10 │; ├───────────────┼──────────────────────────────┼─────────────────────┼───────────┼───────────┼───────────┼───────────┼────────────┼─────────┼─────────┤; │ CPU │ RegularRectilinearGrid │ ImplicitFreeSurface │ 6.418 ms │ 6.925 ms │ 7.147 ms │ 9.625 ms │ 578.41 KiB │ 3545 │ 10 │; │ CPU │ RegularLatitudeLongitudeGrid │ ImplicitFreeSurface │ 15.913 ms │ 16.438 ms │ 17.028 ms │ 20.042 ms │ 656.92 KiB │ 4306 │ 10 │; │ CPU │ ConformalCubedSphereFaceGrid │ ImplicitFreeSurface │ 9.89",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1604:17,benchmark,benchmarks,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1604,3,['benchmark'],['benchmarks']
Testability,Should speed up GitLab CI builds. CPU is already well-tested on Travis CI and Appveyor.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/758:54,test,tested,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/758,1,['test'],['tested']
Testability,Should tests be run with `julia --check-bounds=yes`?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3747:7,test,tests,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3747,1,['test'],['tests']
Testability,Should we add a test for this? Or at least make all directions testable on the validation script?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3854#issuecomment-2429960900:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3854#issuecomment-2429960900,2,['test'],"['test', 'testable']"
Testability,Should we add multithreading benchmarks to README?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/900:29,benchmark,benchmarks,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/900,1,['benchmark'],['benchmarks']
Testability,"Should we add the test @hdrake suggests in this PR or leave it for later? Happy either way... . I will elaborate a bit my train of thoughts and where my question came before. I opened the PR in an attempt to review. I looked at the file changes, I like the new feature... if I had seen that some test was added in the CI to test the new feature and the test suite was passing I'd feel very comfortable with it and would be more keen to approve. Now that I don't see that I need to look into the details of what happened here before I feel comfortable to approve (which I'm happy to do, but perhaps on Fri or next week)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287374910:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287374910,4,['test'],['test']
Testability,Should we also use `deflatelevel` for the name of the `NetCDFOutputWriter` kwarg?. It'd be nice to have a test for this I think.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3153#issuecomment-1605866597:106,test,test,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3153#issuecomment-1605866597,1,['test'],['test']
Testability,"Should we close this? There's no real specific action we can take to close it, though certainly improving the tests should be an ongoing priority...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-1480583262:110,test,tests,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-1480583262,1,['test'],['tests']
Testability,"Should we have a separate test file for construction of things like `WENO5(grid=grid)`? For this specific case there isn't any (and no obvious place to include it rn):. ```; ~/repos/Oceananigans.jl/test $ grep -r ""\<WENO5"" *  ✔  25s   base  ; test_hydrostatic_free_surface_models.jl: for momentum_advection in (VectorInvariant(), CenteredSecondOrder(), WENO5()); test_multi_region_advection_diffusion.jl: tracer_advection = WENO5(),; test_multi_region_advection_diffusion.jl: tracer_advection = WENO5(),; test_nonhydrostatic_models.jl: for scheme in (WENO5(), UpwindBiasedFifthOrder()); test_shallow_water_models.jl: for advection in (nothing, CenteredSecondOrder(), WENO5()); test_time_stepping.jl: WENO5()); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2549#issuecomment-1125330740:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2549#issuecomment-1125330740,2,['test'],['test']
Testability,Should we have a test? Or could you demonstrably that what you did had a positive impact in resolving the issue?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3287#issuecomment-1735858145:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3287#issuecomment-1735858145,1,['test'],['test']
Testability,"Should we merge this PR if all tests pass? Is there any other outstanding issues?. Regarding bathymetry properly included in `ConservativeFormulation()`, if there is more work needed there perhaps it belongs to a different PR (given the title of *this* PR)?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144208360:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144208360,1,['test'],['tests']
Testability,Should we preview the docs to make sure things are working before merging? They should render here: https://clima.github.io/OceananigansDocumentation/previews/PR2886. Or did you test things locally and are confident enough that this works?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1408822466:178,test,test,178,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1408822466,1,['test'],['test']
Testability,Should we put some preliminary benchmarking results here?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1854403078:31,benchmark,benchmarking,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1854403078,1,['benchmark'],['benchmarking']
Testability,Should we test also models run with tuple of closures and/or using different models?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2047:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2047,1,['test'],['test']
Testability,"Should we unmark this as a draft and try to get it merged? If there is still a problem and you know how to test it, you can add a `@test_broken` to the test suite. Then after we merge this PR, you can open another PR which marks that as a `@test` and takes up where this one leaves off.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2379752288:107,test,test,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2379752288,3,['test'],['test']
Testability,Shouldn't we have tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3130#issuecomment-1577475543:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3130#issuecomment-1577475543,1,['test'],['tests']
Testability,"Simple Dockerfile to build a Docker image with Oceananigans installed, precompiled, and with dependencies built. Should be useful for debugging and maybe speeding up CI. Image can be built then just downloaded by CI server, but usually testing is done before Docker image is built... We also have a Dockerhub repository where images will be published: https://cloud.docker.com/repository/docker/aliramadhan/oceananigans. We can look into automated builds: https://docs.docker.com/docker-hub/builds/. For GPU-accelerated container we can look into: https://github.com/NVIDIA/nvidia-docker. cc @christophernhill we're finally in the 21st century!. Resolves #151",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/316:236,test,testing,236,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/316,1,['test'],['testing']
Testability,"Simple kernels are safe (in fact, faster). ```julia; using Oceananigans; using Oceananigans.Architectures: device; using Oceananigans.Utils: launch!; using Oceananigans.Operators: ∇²ᶜᶜᶜ. using KernelAbstractions: @kernel, @index; using BenchmarkTools. @kernel function _diffuse!(c, Δt); i, j, k = @index(Global, NTuple); @inbounds c[i, j, k] += Δt * ∇²ᶜᶜᶜ(i, j, k, grid, c); end. function diffuse!(c, Δt); grid = c.grid; arch = grid.architecture; ev = launch!(arch, grid, :xyz, _diffuse!, c, Δt); wait(device(arch), ev); return nothing; end. function lots_of_steps!(c, Δt, steps=100); for _ = 1:steps; diffuse!(c, Δt); end; end. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); c = CenterField(grid); @btime lots_of_steps!(c, 0.01); ```. yields. ```julia; 447.763 ms (9832300 allocations: 975.37 MiB) # KA 0.8; 499.522 ms (9832300 allocations: 1.81 GiB) # KA 0.7; ```. adding `fill_halo_regions!` doesn't change much either",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481333405:236,Benchmark,BenchmarkTools,236,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481333405,1,['Benchmark'],['BenchmarkTools']
Testability,Simple tests for correct halo filling + dynamics with the MultiRegion cubed sphere,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3020:7,test,tests,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3020,1,['test'],['tests']
Testability,"Simulation API is almost ready. Comments on some of the points above:; 3. I made `stop criteria` an array so you can push/append extra stop criteria as needed.; 4. Out of scope for this PR.; 6. Went all out and completely removed `time_step!` for multiple time steps. Only the single step version remains. Major breaking changes:; 1. Diagnostics and output writers are now part of `Simulation`, not `Model`.; 2. `time_step!` takes a single time step. For multiple time steps, use a loop or a `Simulation`. Still need to:; 1. Write some simple `Simulation` units tests although it's already used by a lot of tests already.; 1. Update examples.; 2. Update model setup documentation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/621#issuecomment-586623011:562,test,tests,562,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/621#issuecomment-586623011,2,['test'],['tests']
Testability,Since I had to regenerate the data I thought to add some data for `SplitExplicitFreeSurface`. If we want the test I ll keep it as part of this PR,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765439199:109,test,test,109,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765439199,1,['test'],['test']
Testability,"Since it has to do with the `*nodes` functions this might be closely related to issue #3771 although the error is different so I'm opening a separate issue about it. I'll look into both together. MWE:. ```julia; using Oceananigans. underlying_grid = LatitudeLongitudeGrid(size = (12, 12, 12), latitude = (0, 1), longitude = (0, 1), z = (-1, 0)); slope(x, y) = x + y - 1; grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(slope)). model = HydrostaticFreeSurfaceModel(; grid). NetCDFOutputWriter(model, model.velocities; filename=""test"", schedule=IterationInterval(1)); ```. Error:. ```; ERROR: MethodError: no method matching xnodes(::LatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded, OffsetArrays.OffsetVector{…}, Float64, Float64, Float64, Float64, OffsetArrays.OffsetVector{…}, OffsetArrays.OffsetVector{…}, OffsetArrays.OffsetVector{…}, CPU}, ::Center; with_halos::Bool). Closest candidates are:; xnodes(::LatitudeLongitudeGrid, ::Any, ::Any, ::Any; with_halos); @ Oceananigans ~/atdepth/Oceananigans.jl/src/Grids/latitude_longitude_grid.jl:655; xnodes(::LatitudeLongitudeGrid, ::Any, ::Any; with_halos); @ Oceananigans ~/atdepth/Oceananigans.jl/src/Grids/latitude_longitude_grid.jl:635; xnodes(::Any, ::Any, ::Any, ::Any; kwargs...); @ Oceananigans ~/atdepth/Oceananigans.jl/src/Grids/nodes_and_spacings.jl:79; ... Stacktrace:; [1] xnodes(ibg::ImmersedBoundaryGrid{Float64, Bounded, Bounded, Bounded, LatitudeLongitudeGrid{…}, GridFittedBottom{…}, Nothing, Nothing, CPU}, loc::Center; kwargs::@Kwargs{with_halos::Bool}); @ Oceananigans.ImmersedBoundaries ~/atdepth/Oceananigans.jl/src/ImmersedBoundaries/ImmersedBoundaries.jl:268; [2] native_dimensions_for_netcdf_output(grid::ImmersedBoundaryGrid{Float64, Bounded, Bounded, Bounded, LatitudeLongitudeGrid{…}, GridFittedBottom{…}, Nothing, Nothing, CPU}, indices::Dict{String, Tuple{…}}, TX::Type{Bounded}, TY::Type{Bounded}, TZ::Type{Bounded}, Hx::Int64, Hy::Int64, Hz::Int64); @ Oceananigans.OutputWriters ~/atdepth/Oceananig",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3775:541,test,test,541,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3775,1,['test'],['test']
Testability,"Since it's a regression test, we will lose continuity of the code if any PRs are merged from now on. So I suggest regenerating the data ASAP and merging the regression test back in.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2927#issuecomment-1431577460:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2927#issuecomment-1431577460,2,['test'],['test']
Testability,"Since our test scripts are already too long, I suggest creating a new script `test_shallow_water_dynamics.jl`. We also need this if we want to run the script in the `shallow_water` `TEST_GROUP`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1448#issuecomment-794495504:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1448#issuecomment-794495504,1,['test'],['test']
Testability,"Since the code is just a few lines, it's easy to figure out what's going on in the REPL. The top of the error message says:. ```; [2] assemble_closure_velocities; @ ~/.julia/packages/Oceananigans/xmqSH/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:35 [inlined]; ```. So let's go look at this line. It is:. https://github.com/CliMA/Oceananigans.jl/blob/f89445dcc802341d5361c2f241fe48e483dbd9ff/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl#L35. Ok. Does `background_fields` have the property `u`? At the REPL, using the MWE, I find:. ```julia; julia> background_fields.u; ERROR: type BackgroundFields has no field u; Stacktrace:; [1] getproperty(x::Oceananigans.Models.NonhydrostaticModels.BackgroundFields{true, @NamedTuple{…}, @NamedTuple{…}}, f::Symbol); @ Base ./Base.jl:37; [2] top-level scope; @ REPL[7]:1; Some type information was truncated. Use `show(err)` to see complete types.; ```. Ok, we found the error. But where is `u`? writing `julia> background_fields.` and pressing TAB yields. ```julia; julia> background_fields.; tracers; velocities; ```. Ok, so maybe we want `background_fields.velocities.u`. Looking into the source code for background fields:. https://github.com/CliMA/Oceananigans.jl/blob/f89445dcc802341d5361c2f241fe48e483dbd9ff/src/Models/NonhydrostaticModels/background_fields.jl#L32-L38. confirms what we found, that `BackgroundFields.u` does not exist. Just to confirm, we go back to the REPL and try:. ```julia; julia> background_fields.velocities.u; ZeroField{Int64}; ```. so yes, using `velocities.u` should fix this particular bug. This is an easy fix. Just to go through the motions and get a hang for how this works, let's add the test first, and then make the fix.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433267716:1727,test,test,1727,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433267716,1,['test'],['test']
Testability,"Since this script computes the rates of convergence acurately, I wonder if we might want to include this as a test, or validation maybe? Thoughts?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866473521:110,test,test,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866473521,1,['test'],['test']
Testability,"Since we didn't release v0.79.4 yet, I suggest we wait for this to merge + some other bug fixes in PRs that are ready to be merged after tests pass and release after. cc @tomchor, @glwagner, @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073:137,test,tests,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073,1,['test'],['tests']
Testability,"Since we don't have bitwise reproducibility, each run has random round-off errors that, if integrated into a nonlinear trajectory, can cause two solution to diverge eventually. Possibly this test case is a little too challenging (too long time integration, or too nonlinear), meaning that occasional chaotic divergence of the solution is expected?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012:191,test,test,191,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012,1,['test'],['test']
Testability,"Since we have started to build a `MultiGPU` architecture, I did some tests on my desktop to compure `ShallowWaterModel` under `CPUs` and `GPUs`, as a build up to `MultiCPUs` and `MultiGPUs`. The results are below and shows that at the highest resolution, GPUs are more than 200 times faster (if I'm reading this correctly). . ```; Shallow water model benchmarks; ┌───────────────┬─────────────┬──────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼──────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ Float64 │ 32 │ 1.100 ms │ 1.174 ms │ 1.179 ms │ 1.330 ms │ 350.78 KiB │ 2315 │; │ CPU │ Float64 │ 64 │ 2.125 ms │ 2.308 ms │ 2.317 ms │ 2.507 ms │ 350.78 KiB │ 2315 │; │ CPU │ Float64 │ 128 │ 5.627 ms │ 5.796 ms │ 5.819 ms │ 6.274 ms │ 350.78 KiB │ 2315 │; │ CPU │ Float64 │ 256 │ 19.994 ms │ 20.857 ms │ 21.210 ms │ 24.729 ms │ 350.78 KiB │ 2315 │; │ CPU │ Float64 │ 512 │ 108.709 ms │ 109.811 ms │ 111.243 ms │ 116.733 ms │ 352.16 KiB │ 2403 │; │ CPU │ Float64 │ 1024 │ 461.325 ms │ 462.072 ms │ 462.734 ms │ 466.383 ms │ 352.16 KiB │ 2403 │; │ GPU │ Float64 │ 32 │ 1.740 ms │ 1.774 ms │ 1.868 ms │ 2.691 ms │ 722.42 KiB │ 7010 │; │ GPU │ Float64 │ 64 │ 1.814 ms │ 1.934 ms │ 2.086 ms │ 3.466 ms │ 739.64 KiB │ 6888 │; │ GPU │ Float64 │ 128 │ 1.920 ms │ 1.976 ms │ 2.187 ms │ 3.866 ms │ 774.52 KiB │ 6888 │; │ GPU │ Float64 │ 256 │ 2.095 ms │ 2.208 ms │ 2.237 ms │ 2.596 ms │ 849.89 KiB │ 6888 │; │ GPU │ Float64 │ 512 │ 1.988 ms │ 2.039 ms │ 2.150 ms │ 3.175 ms │ 995.27 KiB │ 6976 │; │ GPU │ Float64 │ 1024 │ 1.965 ms │ 2.080 ms │ 2.188 ms │ 3.242 ms │ 1.25 MiB │ 6976 │; └───────────────┴─────────────┴──────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; [2021/03/15 12:35:06.674] INFO Writing Shallow_water_model_benchmarks.html...; Shallow water model CPU -> GPU speedup; ┌────────",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799567039:69,test,tests,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799567039,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"Since you now report coverage via the gitlab-ci tests (to include GPU coverage) the coveralls.io is not needed. As far as I know, gitlab-ci is only able to report coverage to codecov.io. Thus, I propose to remove the coveralls badge. (Btw, the URL was broken anyway...)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/762:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/762,1,['test'],['tests']
Testability,Slightly reorganizes dependencies in tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2715:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2715,1,['test'],['tests']
Testability,Slims down model size for many tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/937:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/937,1,['test'],['tests']
Testability,"Slow down of 10% when introducing `exp` could make sense. > With const rate=1/10 and DiscreteForcing things are as fast as with no forcing. Okay, that makes sense. > So this seems to be a CPU issue. So the problem is that `ContinuousForcing` is rather slow on the CPU. That is a bit annoying. Kind of like how WENO is really slow on the CPU for unknown reasons. At least we have a workaround with `DiscreteForcing`... > Would a MWE help here?. I think what would help the most is a simple benchmarking script that compares identical forcing function implementations with `ContinuousForcing` and `DiscreteForcing` to no forcing. I think we only need one forcing function, and it's probably best if its simple (eg `- p.mu * model_fields.u[i, j, k]`) and doesn't involve complicated functions like `exp`. Since it's only a CPU issue I think it's not the highest priority though (it might not be something we can easily solve either...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875762070:489,benchmark,benchmarking,489,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875762070,2,['benchmark'],['benchmarking']
Testability,"So @simone-silvestri, the tests now pass but I think it's totally wrong. It just happens that whatever wrong thing happens happens both in serial and multi-region.... ```Julia; using Oceananigans, Logging, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: update_state!; using Oceananigans.MultiRegion; using Oceananigans.MultiRegion: reconstruct_global_field. using GLMakie. Logging.disable_logging(Logging.Warn). function initialize_model(grid; P = XPartition, regions, closure, field_name). model = HydrostaticFreeSurfaceModel(; grid = MultiRegionGrid(grid, partition = P(regions)),; free_surface = SplitExplicitFreeSurface(substeps=5),; closure,; tracers = :c,; coriolis = nothing,; buoyancy=nothing). initial_condition(x, y, z) = cos(2x). f = fields(model)[field_name]. @apply_regionally set!(f, initial_condition). update_state!(model). return model; end. Nx = Ny = 32. grid = RectilinearGrid(size = (Nx, Ny, 1), halo = (3, 3, 3),; topology = (Bounded, Bounded, Bounded),; x = (0, 1), y = (0, 1), z = (0, 1)). closure = ScalarDiffusivity(ν = 1, κ = 1). field_name = :u. model_serial = initialize_model(grid; P = XPartition, regions = 1, field_name, closure); model_parallel = initialize_model(grid; P = XPartition, regions = 2, field_name, closure). function plot_comparison(models, field_name, title). model_serial, model_parallel = models; f_serial = fields(model_serial)[field_name]; f_parallel = reconstruct_global_field(fields(model_parallel)[field_name]). fig = Figure(); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[2, 1]). x, y, z = nodes(f_serial); hm1 = heatmap!(ax1, x, y, interior(f_serial, :, :, 1)); Colorbar(fig[1, 2], hm1). x, y, z = nodes(f_parallel); hm2 = heatmap!(ax2, x, y, interior(f_parallel, :, :, 1)); Colorbar(fig[2, 2], hm2). fig[0, :] = Label(fig, title, fontsize=20, tellwidth=false). return fig; end. fig = plot_comparison((model_serial, model_parallel), field_name, ""before timestep""). save(""before_timestep.png"", fig); ```; ![before_timestep](https://github.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3514#issuecomment-2001900574:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3514#issuecomment-2001900574,5,"['Log', 'Test', 'test']","['Logging', 'Test', 'tests']"
Testability,So I added a unit test showing that checks that should test its functionality. Once we get more of Oceananigans differentiated we can add some bigger integration tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1756769531:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1756769531,3,['test'],"['test', 'tests']"
Testability,"So I did a bench. I run this:. ```Julia; using Oceananigans; using Oceananigans.Units. grid = RectilinearGrid(CPU(),; size = (3, 3, 3),; extent = (1, 1, 1),; topology = (Periodic, Bounded, Bounded)); model = HydrostaticFreeSurfaceModel(; grid). Δt=20minutes; simulation = Simulation(model, Δt=20minutes, stop_time=4Δt). u, v, w = model.velocities; ζ = ∂x(v) - ∂y(u); fields_slice = Dict(""u"" => u, ""v"" => v, ""w"" => w, ""ζ"" => ζ); simulation.output_writers[:top] = NetCDFOutputWriter(model, fields_slice;; filename = ""mwe.nc"",; schedule = TimeInterval(0.5day),; overwrite_existing = true,; indices = (:, :, grid.Nz)). @time run!(simulation); ```. on my laptop on an evnironment with _only_ Oceananigans. Just for the record, my general env contains:. ```Julia; (@v1.9) pkg> st; Status `~/.julia/environments/v1.9/Project.toml`; [6e4b80f9] BenchmarkTools v1.3.2; [13f3f980] CairoMakie v0.10.12; [e9467ef8] GLMakie v0.8.12; [db073c08] GeoMakie v0.5.1; [7073ff75] IJulia v1.24.2; [12c4ca38] Imaginocean v0.1.0 `https://github.com/navidcy/Imaginocean.jl#main`; [85f8d34a] NCDatasets v0.13.1; [5fb14364] OhMyREPL v0.5.23; [c3e4b0f8] Pluto v0.19.32; [295af30f] Revise v3.5.7; ```. Now on an environment with **Oceananigans v0.89.3** I get:. ```Julia; julia> @time run!(simulation); [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (18.715 minutes); [ Info: Executing initial time step...; [ Info: ... initial time step complete (7.933 seconds).; [ Info: Simulation is stopping after running for 18.861 minutes.; [ Info: Simulation time 1.333 hours equals or exceeds stop time 1.333 hours.; 1134.663423 seconds (2.18 G allocations: 1.143 TiB, 10.69% gc time, 100.03% compilation time); ```. while with **Oceananigans v0.90.1** I get:. ```Julia; julia> @time run!(simulation); [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (13.845 minutes); [ Info: Executing initial time step...; [ Info: ... initial time step complete (8.351 seconds).; [ I",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1804711654:836,Benchmark,BenchmarkTools,836,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1804711654,1,['Benchmark'],['BenchmarkTools']
Testability,"So I ended up defining `dictify` but wanted to apply it recursively to any of the kwargs that could be non-dicts (`outputs`, `output_attributes`, `global_attributes`, and `dimensions`). Found out that the general case is pretty difficult as lots of things implement `keys` and `outputs` (e.g. strings and arrays to name just two) and relying on `fieldnames` requires you to define an accompanying `fieldvalues` which seemed to require quite a bit of extra logic. So I stuck to the simple one-liner that only does something to named tuples; ```julia; dictify(outputs) = outputs; dictify(outputs::NamedTuple) = Dict(string(k) => dictify(v) for (k, v) in zip(keys(outputs), values(outputs))); ```; because it's a simple solution that works recursively for the most common use case (named tuples instead of dicts).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1139#issuecomment-722409494:456,log,logic,456,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1139#issuecomment-722409494,1,['log'],['logic']
Testability,So I have reverted back to the previous UI (added a couple of unit tests) and fixed the tests for enzyme to use Field diffusivities instead of integers that are not mutable. this PR should be ready to go,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327811398:67,test,tests,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327811398,2,['test'],['tests']
Testability,"So I started making the suggested changes but then decided to do more benchmarking and it appears that when I interpolate the sums into the benchmark properly there isn't a difference (i.e. https://juliaci.github.io/BenchmarkTools.jl/stable/manual/#Interpolating-values-into-benchmark-expressions):. ```julia; julia> @btime sof[1, 2, 3]; 45.412 ns (1 allocation: 16 bytes); -1.0065959327459124. julia> @btime bo[1, 2, 3]; 44.571 ns (1 allocation: 16 bytes); -1.0065959327459124. julia> @btime fbo[1, 2, 3]; 238.209 ns (1 allocation: 16 bytes); -1.0065959327459124. julia> @btime $(sof)[1, 2, 3]; 3.958 ns (0 allocations: 0 bytes); -1.0065959327459124. julia> @btime $(bo)[1, 2, 3]; 2.708 ns (0 allocations: 0 bytes); -1.0065959327459124. julia> @btime $(fbo)[1, 2, 3]; 2.666 ns (0 allocations: 0 bytes); -1.0065959327459124; ```; where ; ```julia; julia> sof = SumOfFields{3}(c[1:3]...); 200×200×200 SumOfFields{3, Center, Center, Center} on RectilinearGrid on CPU; └── grid: 200×200×200 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo. julia> bo = sum(c[1:3]); BinaryOperation at (Center, Center, Center); ├── grid: 200×200×200 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; └── tree: ; + at (Center, Center, Center); ├── + at (Center, Center, Center); │ ├── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; │ └── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; └── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU. julia> fbo = c[1] + c[2] + c[3]; MultiaryOperation at (Center, Center, Center); ├── grid: 200×200×200 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; └── tree: ; + at (Center, Center, Center); ├── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; ├── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; └── 200×200×200 Field{Center, Center, Center} on RectilinearGrid on CPU; ```. To check that the",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3676#issuecomment-2269534173:70,benchmark,benchmarking,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3676#issuecomment-2269534173,4,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark', 'benchmark-expressions', 'benchmarking']"
Testability,So I switched from KernelAbstraction v0.9.16 (what I have on my dev Oceananigans) to v0.9.10 (on the CI test) and replicated the error. Updating to 9.16 fixes this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1953422899:104,test,test,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1953422899,1,['test'],['test']
Testability,"So I think that the tests generally are very close to the memory limit (which I think is around 1GB, not sure how that's being set). It looks like the tracer sinking isn't actually using much more memory but its enough to push it over. If I remove the output writing and speed field tracking (which don't get tested in this run anyway) from the final test it seems to keep the memory usage lower. I can't test it myself on a GPU right now so am going to push and hopefully it'll work!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248258123:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248258123,4,['test'],"['test', 'tested', 'tests']"
Testability,"So a lot of tests break when I bump KernelAbstractions 0.8.4 + CUDAKernels 0.4.3.... cc @glwagner, @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2782#issuecomment-1283389480:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2782#issuecomment-1283389480,1,['test'],['tests']
Testability,"So main agrees with Artifacts (the previously generated data?)? ; Was this generated in the test environment or from oceananigans' environment?. ~~Is this on a CPU, because it seems like the difference arises on the GPU.~~",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441839736:92,test,test,92,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441839736,1,['test'],['test']
Testability,"So the logic is slightly different for `is_immersed` with `PartialCellBottom`. `is_immersed` is `false` for cells that are ""partially immersed"". It's only `true` for cells that are ""fully immersed"".",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1042499978:7,log,logic,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1042499978,1,['log'],['logic']
Testability,"So to be honest @siddharthabishnu phrasing regarding me ""contemplating"" is a bit generous. Personally, I'm not sure whether this can be a dynamics test; something for which the error is just an order of magnitude less than the solution itself seems a bit loose for me... isn't there anything else we can use for a dynamics test? feels like we've been stuck on this for ages... we need a dynamics test to merge the cubed sphere code and move on I think. Perhaps there is no dynamics test we can have?. The solution @siddharthabishnu uses above **is not** an exact solution of the HydrostaticFreeSurfaceModel equations... thus the big error. (It's an exact solution of the barotropic vorticity equation...) But whether this big of an error is expected or is it because the code has a bug I don't know and we've been in this vagueness for long. Anybody has any ideas?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3570#issuecomment-2134508179:147,test,test,147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3570#issuecomment-2134508179,4,['test'],['test']
Testability,"So what is ""truth"" above? Also, how did you figure out that the data we are comparing is from June 1st?. Hm... The regression tests show that only `v` fails... I recently updated the data we are comparing but perhaps somehow it's not updated? I'm not sure what you are comparing above. The initial conditions should be identical! If the initial conditions are that different then there is no way we will get tests to pass. What I wanted to see is the tendency fields at the first time step (but given we provide the initial condition) with v0.79.4 and with v0.77.0. The data we are comparing with was generated with v0.77.0 -- we thought we were pretty sure about that but might be wrong.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783:126,test,tests,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783,2,['test'],['tests']
Testability,"So, I'm hitting some errors running the `baroclinic_adjustment` example with the ROCBackend. The only modification of this example script is the specification of the architecture as `GPU()`. It seems that this chokes on AMDGPU's `zeros`. I did not encounter this in the other work I was doing on Simone's branch; though the test we were using was not building with a recilinear grid. ```; $ julia --project=. ./bench/baroclinic_adjustment.jl ; ERROR: LoadError: Not implemented; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] runtime_module(job::GPUCompiler.CompilerJob); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/interface.jl:173; [3] build_runtime(job::GPUCompiler.CompilerJob); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/rtlib.jl:101; [4] (::GPUCompiler.var""#136#138""{GPUCompiler.CompilerJob{GPUCompiler.GCNCompilerTarget, AMDGPU.Compiler.HIPCompilerParams}})(); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/rtlib.jl:139; [5] lock(f::GPUCompiler.var""#136#138""{GPUCompiler.CompilerJob{GPUCompiler.GCNCompilerTarget, AMDGPU.Compiler.HIPCompilerParams}}, l::ReentrantLock); @ Base ./lock.jl:229; [6] macro expansion; @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/rtlib.jl:120 [inlined]; [7] load_runtime(job::GPUCompiler.CompilerJob); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/utils.jl:92; [8] macro expansion; @ ~/.julia/packages/GPUCompiler/U36Ed/src/driver.jl:290 [inlined]; [9] emit_llvm(job::GPUCompiler.CompilerJob; libraries::Bool, toplevel::Bool, optimize::Bool, cleanup::Bool, only_entry::Bool, validate::Bool); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/utils.jl:92; [10] emit_llvm; @ ~/.julia/packages/GPUCompiler/U36Ed/src/utils.jl:86 [inlined]; [11] codegen(output::Symbol, job::GPUCompiler.CompilerJob; libraries::Bool, toplevel::Bool, optimize::Bool, cleanup::Bool, strip::Bool, validate::Bool, only_entry::Bool, parent_job::Nothing); @ GPUCompiler ~/.julia/packages/GPUCompiler/U36Ed/src/driver.jl:129; [12] ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1935971273:324,test,test,324,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1935971273,1,['test'],['test']
Testability,"So, everything that I've tested so far leads me to believe this is working with vertically stretched grids for now. I've tested a few examples with both CPU and GPU architecture and they've picked up successfully. (Although it's possible I'm missing something...) However, since @navidcy and @glwagner have reservations about this fix (regarding #1998) I won't expand it to all abstract grids for now. I think more discussions need to be done. I'll leave this PR open though since I need this fix to complete my research, if that's okay.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945890117:25,test,tested,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945890117,2,['test'],['tested']
Testability,"So, it looks like docs take more to build in this PR when compared to main (4:00 hrs vs 3:40 hrs). Probably good to benchmark a bit. I ll try some benchmarking on GPU and CPU",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589347491:116,benchmark,benchmark,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589347491,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"So, let me start by saying that I'm not 100% sure that this issue is an Oceananigans issue or not, but it did start a few weeks ago when the errors due to `ArrayInterface` started and the error only happens with Oceananigans. Also, the error happens in the server I use, but not on my laptop for some reason. Consider the following session on my laptop. Here I'm trying to make an environment as fresh as possible. (Which is why I'm creating a project from scratch and defining a new `DEPOT_PATH` that isn't `~/.julia`.). ```; (base) tomas@np900:~/Dropbox/tests$ mkdir julia_test; (base) tomas@np900:~/Dropbox/tests$ cd julia_test/; (base) tomas@np900:~/Dropbox/tests/julia_test$ touch Project.toml; (base) tomas@np900:~/Dropbox/tests/julia_test$ export JULIA_DEPOT_PATH=""`pwd`/julia_depot""; (base) tomas@np900:~/Dropbox/tests/julia_test$ julia --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.5.4 (2021-03-11); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. (julia_test) pkg> sr; ERROR: Could not determine command. (julia_test) pkg> st; Status `~/Dropbox/tests/julia_test/Project.toml` (empty project). (julia_test) pkg> st --manifest; Status `~/Dropbox/tests/julia_test/Manifest.toml` (empty manifest). (julia_test) pkg> add Oceananigans. # LOTS OF THINGS HAPPEN THAT I'M SKIPPING. (julia_test) pkg> precompile; Precompiling project...; [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]. julia> using Oceananigans. julia> . ```. So basically this works as expected. You can see the complete output [here](https://pastebin.com/XwghaH7e). However, if I do that same thing on the server, I get the following. (Note that I'm even using a freshly downloaded Julia binary, to be as general as possible.). ```; (p39) tomasc@casper-login1:~/scratch_cheyenne$ mkdir julia_test; (p39) tomasc@casper-login1:~/scra",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1625:556,test,tests,556,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1625,5,['test'],['tests']
Testability,"So, the test is failing on the GPU, but not on the CPU so I can't reproduce the error locally and I don't understand why it's failing. Can anyone give me a hand?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1467#issuecomment-799711547:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1467#issuecomment-799711547,1,['test'],['test']
Testability,"So, we do have tests for incompressibilty",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1934#issuecomment-1479899194:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1934#issuecomment-1479899194,1,['test'],['tests']
Testability,"Some Poisson solver tests, e.g. test_3d_poisson_ppn_planned!_div_free, fail when using FFTW.MEASURE or FFTW.PATIENT.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/99:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/99,1,['test'],['tests']
Testability,"Some TODOs:. - [ ] Make `set!` work for `Face, Face, Center` fields (eg streamfunctions); - [ ] Make broadcasting work for cubed sphere fields; - [x] Use plotting utilities from Imaginocean. With the above and fixing the tests then I think we are ready to merge. Supersedes #3221; closes #3204",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3266:221,test,tests,221,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3266,1,['test'],['tests']
Testability,Some benchmarking...; ```; This PR. Nonhydrostatic model benchmarks (Ns³); ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 64 │ 49.720 ms │ 479.12 KiB │ 1016 │ 10 │; │ CPU │ Float64 │ 128 │ 400.668 ms │ 479.12 KiB │ 1016 │ 10 │; │ CPU │ Float64 │ 256 │ 3.303 s │ 479.12 KiB │ 1016 │ 2 │; │ GPU │ Float64 │ 64 │ 3.179 ms │ 738.19 KiB │ 3039 │ 10 │; │ GPU │ Float64 │ 128 │ 8.913 ms │ 746.97 KiB │ 3601 │ 10 │; │ GPU │ Float64 │ 256 │ 68.202 ms │ 1.25 MiB │ 37738 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────┴─────────┘. HydrostaticFreeSurface model benchmarks (Ns²×10); ┌───────────────┬─────────────┬─────┬────────────┬────────────┬─────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼─────────┼─────────┤; │ CPU │ Float64 │ 64 │ 14.389 ms │ 1.33 MiB │ 2157 │ 10 │; │ CPU │ Float64 │ 128 │ 26.194 ms │ 1.33 MiB │ 2157 │ 10 │; │ CPU │ Float64 │ 256 │ 127.087 ms │ 1.33 MiB │ 2157 │ 10 │; │ GPU │ Float64 │ 64 │ 4.682 ms │ 1.73 MiB │ 4444 │ 10 │; │ GPU │ Float64 │ 128 │ 3.091 ms │ 1.73 MiB │ 4457 │ 10 │; │ GPU │ Float64 │ 256 │ 3.346 ms │ 1.73 MiB │ 4416 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴─────────┴─────────┘. ShallowWater model benchmarks (Ns²); ┌───────────────┬─────────────┬─────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ median │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼───────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 64 │ 2.130 ms │ 796.97 KiB │ 1460 │ 10 │; │ CPU │ Float64 │ 128 │ 6.043 ms │ 796.97 KiB │ 1460 │ 10 │; │ CPU │ Float64 │ 256 │ 34.627 ms │ 796.97 KiB │ 1460 │ 10 │; │ GPU │ Float64 │ 64 │ 2.164 ms │ 1.0,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1066030763:5,benchmark,benchmarking,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2335#issuecomment-1066030763,3,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"Some benchmarks from running `implicit_surface_solvers_benchmark.jl` . On GPU: ; FFT: 0.902434 seconds (1.58 M allocations: 549.219 MiB, 13.25% gc time) ; PCG: 37.329798 seconds (17.07 M allocations: 2.563 GiB, 1.85% gc time); Heptadiagonal: 4.323861 seconds (6.06 M allocations: 675.694 MiB, 4.72% gc time, 1.32% compilation time); MG: 4.495123 seconds (1.50 M allocations: 492.900 MiB, 2.16% gc time); PCG with FFT preconditioner: 22.673894 seconds (3.53 M allocations: 864.587 MiB, 0.77% gc time). On CPU:; FFT: 6.548544 seconds (3.61 M allocations: 1.910 GiB, 14.07% gc time, 1.30% compilation time); PCG: 32.354310 seconds (20.29 M allocations: 7.041 GiB, 5.80% gc time); Heptadiagonal: 9.795938 seconds (3.51 M allocations: 1.595 GiB, 39.13% gc time); MG: 11.868795 seconds (3.85 M allocations: 3.991 GiB, 43.10% gc time); PCG with FFT preconditioner: 10.473279 seconds (5.38 M allocations: 2.654 GiB, 9.37% gc time)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1241375321:5,benchmark,benchmarks,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1241375321,1,['benchmark'],['benchmarks']
Testability,"Some benchmarks... ## On `main`. ```julia; julia> include(""benchmark_two_dimensional_models.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; [ Info: Oceananigans will use 24 threads; [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 176.874 ms (66322 allocations: 23.79 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 500.601 ms (111291 allocations: 276.81 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 320.139 ms (48245 allocations: 269.93 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 14.721 ms (36840 allocations: 12.11 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 23.795 ms (40688 allocations: 12.18 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 17.219 ms (38055 allocations: 12.14 MiB); ```. ## This PR. ```julia; julia> include(""benchmark_two_dimensional_models.jl""); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 104.521 ms (77858 allocations: 25.03 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=1, Nz=256)...; 235.623 ms (120254 allocations: 26.49 MiB); [ Info: Benchmarking CPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=256, Nz=256)...; 137.914 ms (72488 allocations: 19.41 MiB); [ Info: Benchmarking GPU() model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=256, Ny=256, Nz=1)...; 14.675 ms (37239 allocations: 11.65 MiB); [ Info: Benchmarking GPU(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-961064605:5,benchmark,benchmarks,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2035#issuecomment-961064605,6,"['Benchmark', 'benchmark']","['Benchmarking', 'benchmarks']"
Testability,Some cleaning up in the implicit free surface solvers tests. Resolves #2184.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2181:54,test,tests,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2181,1,['test'],['tests']
Testability,"Some good news is that more tests seem to be passing compared to the prevoius PR. . One of the messages I saw was there was a cancellation signal, see below. Lots of the tests just cancelled, and I'm not sure why. ```; Testing Oceananigans; # Received cancellation signal, interrupting; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1985730877:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1985730877,3,"['Test', 'test']","['Testing', 'tests']"
Testability,Some intermediate commits from last week attempting to subtype `AbstractField <: DimensionalData.AbstractDimArray` but needs more work as tests are failing. Resolves #457; Works on (partially resolves?) #1493,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1700:138,test,tests,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1700,1,['test'],['tests']
Testability,Some issues in the tests... :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1619#issuecomment-826395987:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1619#issuecomment-826395987,1,['test'],['tests']
Testability,"Some notes while trying to sort out the output writer logic flow. The key function is `schedule(model)`, which is called every `timestep!`. When `schedule(model) == true`, the `write_output!(writer, sim.model)` function gets triggered:. https://github.com/CliMA/Oceananigans.jl/blob/088f9738877f0aeef7aa4038cf788f69ee102019/src/Simulations/run.jl#L146-L148. The trick for `AveragedTimeInterval` is that, for every timestep in an averaging window, we increment the `WindowedTimeAverage.result`:. https://github.com/CliMA/Oceananigans.jl/blob/088f9738877f0aeef7aa4038cf788f69ee102019/src/OutputWriters/windowed_time_average.jl#L220. The difficult part is handling the logic of when to stop collecting increments for a given window:. https://github.com/CliMA/Oceananigans.jl/blob/088f9738877f0aeef7aa4038cf788f69ee102019/src/OutputWriters/windowed_time_average.jl#L270-L280. and to reset the `WindowedTimeAverage.result` back to zero to begin accumulating over the next window:. https://github.com/CliMA/Oceananigans.jl/blob/088f9738877f0aeef7aa4038cf788f69ee102019/src/OutputWriters/windowed_time_average.jl#L255-L268",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2294972510:54,log,logic,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2294972510,2,['log'],['logic']
Testability,"Some of the buildkite pipelines take way too long. Specifically the `time_stepping_2`, `regression` and `solver` tests. I suggest we further split them?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2139:113,test,tests,113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2139,1,['test'],['tests']
Testability,"Some pretty promising Lagrangian particle tracking benchmarks!. Couple of takeaways (all assuming a model with 128^3 grid points and QAB2 time stepping):; 1. **Low overhead**: You can advect up to ~100,000 particles on the CPU and up to ~10,000,000 particles on a (Titan V) GPU before the model slows down by more than 30%.; 2. **Great on GPUs**: Seems that the GPU is great for advecting millions of particles. You can advect ~100,000,000 particles and your model only slows down by a factor of 4x. In this scenario, the GPU is ~620x faster than a single CPU core.; 3. Calculated using `(t_100000000 - t_0) / 100000000`, advecting a single particle on the CPU takes ~110 ns while on the GPU it only takes ~0.127 ns. This seems a little too good to be true but I'll double check this. I'll start refactoring this PR using @glwagner's and @zhenwu0728's feedback, but I think it would be really great if we can keep this performance. # Benchmarks. ```; Oceananigans v0.44.1; Julia Version 1.5.2; Commit 539f3ce943 (2020-09-23 23:17 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-9.0.1 (ORCJIT, cascadelake); GPU: TITAN V; ```. ```; Lagrangian particle tracking benchmarks; ┌───────────────┬─────────────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ Architectures │ N_particles │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────────────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ CPU │ 0 │ 361.749 ms │ 364.041 ms │ 364.293 ms │ 368.854 ms │ 293.44 KiB │ 1876 │; │ CPU │ 1 │ 375.030 ms │ 376.591 ms │ 377.959 ms │ 385.248 ms │ 297.16 KiB │ 1906 │; │ CPU │ 10 │ 377.251 ms │ 380.792 ms │ 387.560 ms │ 443.325 ms │ 297.16 KiB │ 1906 │; │ CPU │ 100 │ 378.867 ms │ 381.194 ms │ 381.328 ms │ 383.461 ms │ 297.16 KiB │ 1906 │; │ CPU │ 1000 │ 378.076 ms │ 384.114 ms │ 383.611 ms │ 388.507 ms │ 297.16 KiB │ 1906 │; │",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732529975:51,benchmark,benchmarks,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-732529975,1,['benchmark'],['benchmarks']
Testability,"Some progress:. The type infererence issue seems to be fixed. For `flow_over_hills.jl` the cost per time-step is approximately the same on my CPU for the ""reference case"" (no immersed boundary), and either free-slip or no-slip immersed boundary. I updated `flow_over_hills.jl` to introduce an initial perturbation that goes turbulent immediately. Here's a visualization of vorticity alongside total momentum loss for a 64x64 resolution:. https://user-images.githubusercontent.com/15271942/163830810-8f15244b-27e2-4bf0-a7b2-e35d73bd8c79.mp4. The ""reference"" case has a no-slip boundary but no bathymetry. The momentum loss between reference and free-slip case are similar. No-slip and immersed boundary has the most momentum loss. The effect of the pressure errors can be seen plainly that there is transient _injection_ of momentum into the system, which isn't physically possible. However over long periods of time the momentum goes in the right direction. I'm wondering if anyone has experience with PALM, which I believe uses a very similar immersed boundary method (with no pressure solver correction)... ? They must have similar ""leakage"" errors. Overall I'm happy. I'd like to implement a few more convenient features and then I think this implementation is complete. There's still a fair amount of work to do to write tests and documentation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1101498039:1325,test,tests,1325,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1101498039,1,['test'],['tests']
Testability,"Some recent improvements in `CUDA.jl`:. https://juliagpu.org/post/2022-01-28-cuda_3.5_3.8/#preserving_array_indices. attempt to avoid promoting index types from 32-bit to 64-bit integers (64-bit integers are Julia's default). Throughout `Oceananigans` we use 64-bit integers by using the constant `1` for index calculations:. https://github.com/CliMA/Oceananigans.jl/blob/9f6d841393094b123c99287fab7157a65db4d513/src/Operators/difference_operators.jl#L7. According to that blog post, changing the above line. ```julia; @inline δxᶜᵃᵃ(i, j, k, grid, u) = @inbounds u[i+0x1, j, k] - u[i, j, k] ; ```. may decrease register pressure (perhaps dramatically, especially for wide stencils with lots of indices). `0x1` is the integer 1 with type `UInt8`:. ```julia; julia> i = 0x1; 0x01. julia> typeof(i); UInt8. julia> i == 1; true. julia> i === 1; false; ```. The amount of code that generates our stencils is not all that large. We find stencil calculations in. * `Operators`; * `Advection`; * `ImmersedBoundaries`. I also found a few stray index manipulations in random places like. https://github.com/CliMA/Oceananigans.jl/blob/9f6d841393094b123c99287fab7157a65db4d513/src/Models/HydrostaticFreeSurfaceModels/pcg_implicit_free_surface_solver.jl#L211. I think this issue also implies that we should strive to minimize the number of places where we do index calculations, to minimize the chances that we accidentally convert to `Int64`. We might also want to do some profiling to see the specific effect moving to `UInt8` indices might have. Perhaps we should benchmark two fully-loaded models, a `NonhydrostaticModel` LES with high-order advection, and a global-configuration of `HydrostaticFreeSurfaceModel` with an immersed boundary / continents, etc.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2202:1554,benchmark,benchmark,1554,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2202,1,['benchmark'],['benchmark']
Testability,"Some results from the ""closure comparison"" validation test (rotating wind-driven mixing in a stratified fluid):. # dz = 1 meter, dx = dy = 2 meter. ![smag_comparison_10](https://github.com/user-attachments/assets/5c6a3bf2-42c8-46ad-968d-91210cc37fb5); ![closure_comparison_10](https://github.com/user-attachments/assets/71de45d3-c3aa-476d-8e31-bbba4bf70546). # dz = 2 meter, dx = dy = 4 meter. ![smag_comparison_20](https://github.com/user-attachments/assets/a223e274-1efa-400f-8a71-1c82e0e98bde); ![closure_comparison_20](https://github.com/user-attachments/assets/74d44106-3ebb-489c-b93a-b5329b8d62a5). Seems like dynamic smag is doing what it should which is great. I'm surprised to see that the Lilly coefficient doesn't do much at coarse resolution at least. On cost: it is a bit interesting. I think as kernel saturate, WENO(order=9) will start to win. For small kernels however, AMD seems ideal. We'll have to do a proper benchmark. This PR also contains an experimental implementation of Lagrangian-averaged (scale-invariant) dynamic Smagorinsky.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2443333362:54,test,test,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2443333362,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Some sandbox stuff might've been added by accident,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863619586:5,sandbox,sandbox,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863619586,1,['sandbox'],['sandbox']
Testability,Some test pass and it makes no sense. Is it just random test failure past of the test natural variability?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1864#issuecomment-881956216:5,test,test,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1864#issuecomment-881956216,3,['test'],['test']
Testability,"Some tests for no flux boundary conditions, diffusion, and Boussinesq.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/126:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/126,1,['test'],['tests']
Testability,Some tests need to be tweaked. :(. E.g. here a test was expecting a method error and got an argument error:. https://buildkite.com/clima/oceananigans/builds/17298#0191afb9-8515-4225-a6bf-84eef908549c/28-381,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2323606097:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2323606097,2,['test'],"['test', 'tests']"
Testability,"Something to do with . https://github.com/CliMA/Oceananigans.jl/blob/b32394a9e70598a3728c4ed6acbcd03b0946fc32/src/Fields/interpolate.jl#L6-L10. ??. Discovered by @johnryantaylor, who may be able to provide more details. First step: tests...",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2300:232,test,tests,232,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2300,1,['test'],['tests']
Testability,"Something worth discussing is if we want to unit test the operators. I guess maybe not simple stuff like `∂x_faa` but the composing ones like `∂x_caa(i, j, k, grid, F::Function, args...)` might need testing?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495594948:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495594948,2,['test'],"['test', 'testing']"
Testability,Sometimes (often) they just fail to initialize. Don’t assume you broke them necessarily. Uou need to see the log to understand if actually the tests broke or never started.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2015073674:109,log,log,109,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2015073674,2,"['log', 'test']","['log', 'tests']"
Testability,Sometimes if you wait tests fix themselves,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/575:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/575,1,['test'],['tests']
Testability,Sometimes tests fail to load. Merely restarting them does the job. Did that. Let’s see.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1252866889:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1252866889,1,['test'],['tests']
Testability,"Somewhat of a small frivolous PR but it improves logging in Oceananigans with some fancy formatting which includes using colors for timestamps and log levels (using the same colors as the base logger) and the source of the message is underlined (see screenshot below). It can be used via the usual macros (`@debug`, `@info`, `@warn`, and `@error`) once Oceananigans is loaded via `using` or `import`. Although this might actually be undesirable as it hijacks the global logger... The logger is now turned on globally in the `Oceananigans.__init__` function. I'd like to start using it for new simulations as it's useful to have timestamps. ![image](https://user-images.githubusercontent.com/20099589/90137955-51510400-dd44-11ea-9bb9-9c407db19b99.png)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/855:49,log,logging,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/855,5,['log'],"['log', 'logger', 'logging']"
Testability,"Somewhere between this commit ; https://buildkite.com/clima/oceananigans-distributed/builds/3113#01917ace-fe81-401d-ba21-467037e6aead; and main, we switched from using `libmpitrampoline.so` in the distributed tests to `libmpi.so` downloaded from the artifacts. . Previously, the mpi trampoline was loading a CUDA-aware implementation of Open MPI, while the libmpi.so we use now is a ; MPICH implementation non CUDA-aware:; https://buildkite.com/clima/oceananigans-distributed/builds/4227#0192f70a-b947-4d38-bd1c-c2497a964de9. This makes our GPU distributed tests fail. ; I am wondering where this switch happened because I couldn't trace any changes to the code. @Sbozzolo, do you know if something changed in the `LocalPreferences.toml` in the Caltech cluster?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3897:209,test,tests,209,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3897,2,['test'],['tests']
Testability,"Sorry I should have been more verbose. I meant that since the Manifest you pushed doesn't seem to work then I'm not sure I can reproduce the setup you run locally to test things. And that said, I'm not sure whether some errors you point out are because of the code or from a dependency version that is different to what I have on my side etc..",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3470#issuecomment-1937042477:166,test,test,166,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3470#issuecomment-1937042477,1,['test'],['test']
Testability,"Sorry for not removing the comments before. That was sloppy of me. They are gone now. On a similar note, the comments in my test scripts can also remove. However, I don't think these should be merged as they are my way of testing it and aren't really cleaned up. They will be removed for now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739952376:124,test,test,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739952376,2,['test'],"['test', 'testing']"
Testability,"Sorry if I'm missing something obvious (still new with the working of Oceananigans/Julia), but I was trying to test this feature and expand it to `BuoyancyTracer` over the weekend and I wonder if this implementation can be made more general. . The way I understand @ali-ramadhan created some functions `g_x` to extract the gravity components in each direction and then used them in the `x_dot_g_b` functions to calculate each component of the gravity acceleration. The thing is that gravity can only be a vector using `SeawaterBuoyancy`. When trying to apply this to `BuoyancyTracer` I found that I'd need to replicate the same feature but with a different name (since, as @glwagner pointed out, `gravitational_acceleration` would be a confusing name when working directly with buoyancy). Also, if you also think issue https://github.com/CliMA/Oceananigans.jl/issues/1372 is relevant, it might be nice to have one unified word/approach for the tilting of the domain. So what do you guys think if this tilting is implement at the `AbstractBuoyancy` level? If I understand correctly all buoyancy types inherit that, right? That way we'd have a keyword for the tilt (maybe `tilt`, `gravitational_direction` or `gravity_projection`) that would default to `(0, 0, 1)` and a similar option could be given to `FPlane`, avoiding confusion.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-782900312:111,test,test,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-782900312,1,['test'],['test']
Testability,Sorry meant to delete the sandbox before merging PR #1348.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1395:26,sandbox,sandbox,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1395,1,['sandbox'],['sandbox']
Testability,"Sorry, I was out. I can try running on GPU to see if I can catch the bug. Any specific test I could run?; I commented on the code, but did not see your post asking me to run the test. When I clicked on the notification it jumped directly to the code, sorry.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1094126204:87,test,test,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1094126204,2,['test'],['test']
Testability,"Sorry, I was thinking of the MPI tests (since that's what I'm looking at for the slides right now). I agree that for one CPU vs one GPU, it would be nice to use the same CPU and GPU in the different tests. I know we can specify the GPU type in the SLURM script. Maybe we can do the sme for the CPU?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880903279:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880903279,2,['test'],['tests']
Testability,"Sorry, you mentioned the tests only tested `y,z`, but not `x,z` or `x,y,z`. I thought if those tests could be done that might help to identify the problem. Maybe?. A double gyre might help but that introduces boundaries, or at least more boundaries, so maybe more compliated?. It is interesting that we get an instability in a lat-lon grid but not a Cartesian grid. If you re-scale the lengths down say by a factor of 10, or even 100, these two should agree. I wonder if we still get an instability? If we did in the lat-lon grid but not the Cartesian one, maybe that would point to a problem with diffusing on a sphere? Just a thought.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107538441:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107538441,3,['test'],"['tested', 'tests']"
Testability,"Sounds good. Is this tested, do you know?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3340#issuecomment-1763142265:21,test,tested,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3340#issuecomment-1763142265,1,['test'],['tested']
Testability,Sounds great! Can you post here the code with which you benchmarked it?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1364892709:56,benchmark,benchmarked,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1364892709,1,['benchmark'],['benchmarked']
Testability,"Sounds like a good idea. I think `setbc!` and `getbc` aren't fully tested so also worth adding some simple tests there. Hmmm, so right now aliases like `top` and `bottom` are defined on coordinate boundary conditions but maybe we want to define them on `FieldBoundaryConditions`?. ```julia; getbc(fbc::FieldBoundaryConditions, ::Val{:south}) = getfield(fbc.y, :left); getbc(fbc::FieldBoundaryConditions, ::Val{:top}) = getfield(fbc.z, :right); ```. So accessing boundary conditions of a field `u` would look like; ```julia; u.boundary_conditions.south # Instead of u.boundary_conditions.y.south; u.boundary_conditions.top # Instead of u.boundary_conditions.z.top; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/637#issuecomment-589875183:67,test,tested,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/637#issuecomment-589875183,2,['test'],"['tested', 'tests']"
Testability,Speed up matrix Poisson solver test + minor code cleanup,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2826:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2826,1,['test'],['test']
Testability,Split poisson solver tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2187:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2187,1,['test'],['tests']
Testability,Split tests into four groups for CI job matrices,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/872:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/872,1,['test'],['tests']
Testability,Split tests into smaller bits and pieces,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2140:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2140,1,['test'],['tests']
Testability,Split tests into smaller bits and pieces (take #2),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2151:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2151,1,['test'],['tests']
Testability,Split timestep tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2324:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2324,1,['test'],['tests']
Testability,"Starting proposal for tasks that ensure the cubed sphere halo filling and dynamics are correct:. - [ ] Advect a Gaussian bump over the sphere, show correctness of the solution and tracer conservation.; - [ ] Test that the velocity halos are correct by direct inspection.; - [ ] Test that vorticity can be computed (also at corners), recover analytical solution; - [ ] Shallow water tests: Rossby-Haurwitz, Gaussian splash. ```[tasklist]; ### Tasks; - [ ] Advect a Gaussian bump over the sphere, show correctness of the solution and tracer conservation.; - [ ] Test that the velocity halos are correct by direct inspection.; - [ ] Test that vorticity can be computed (also at corners), recover analytical solution; - [ ] Shallow water tests: Rossby-Haurwitz, Gaussian splash; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3020:208,Test,Test,208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3020,6,"['Test', 'test']","['Test', 'tests']"
Testability,"Starting to get tests failing because of conflicting qualifiers, e.g. both `Base` and `CUDAdrv` define `@elapsed`. Would be good to revise our existing `using` and `import` statements so that we only bring in exactly what we need to avoid these kinds of issues. And I believe it's good practice anyways.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/351:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/351,1,['test'],['tests']
Testability,"Still a work in progress but working on bringing in more unit and system tests. The system tests will include some that we've already implemented (e.g. #126) and some regression tests on simple examples. Also working on comprehensive GPU testing so that we're testing the GPU as much as we're testing the CPU. In particular, the Poisson solver isn't tested on the GPU right now which is kind of scary. **Warning**: GPU testing can take a while as a lot of compilation is involved :( See #66. Resolves #18 ; Resolves #22; Resolves #78",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/134:73,test,tests,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/134,8,['test'],"['tested', 'testing', 'tests']"
Testability,Still some test to fix,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3261#issuecomment-1714613118:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3261#issuecomment-1714613118,1,['test'],['test']
Testability,"Still the unit tests don't pass; something else is broken. Seems like some other validation is bypassed?. ```Julia; julia> RectilinearGrid(CPU(), Float64, size = (16, 16, 16), x = 1, y = 2, z = 3); ERROR: MethodError: no method matching get_face_node(::Int64, ::Int64). Closest candidates are:; get_face_node(::Function, ::Any); @ Oceananigans ~/Research/OC5.jl/src/Grids/grid_generation.jl:12; get_face_node(::AbstractVector, ::Any); @ Oceananigans ~/Research/OC5.jl/src/Grids/grid_generation.jl:13; get_face_node(::Nothing, ::Any); @ Oceananigans ~/Research/OC5.jl/src/Grids/grid_generation.jl:11. Stacktrace:; [1] generate_coordinate(FT::Type, topo::Periodic, N::Int64, H::Int64, node_generator::Int64, dir::Symbol, arch::CPU); @ Oceananigans.Grids ~/Research/OC5.jl/src/Grids/grid_generation.jl:39; [2] RectilinearGrid(architecture::CPU, FT::DataType; size::Tuple{Int64, Int64, Int64}, x::Int64, y::Int64, z::Int64, halo::Nothing, extent::Nothing, topology::Tuple{DataType, DataType, DataType}); @ Oceananigans.Grids ~/Research/OC5.jl/src/Grids/rectilinear_grid.jl:273; [3] top-level scope; @ REPL[4]:1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3333#issuecomment-1762168392:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3333#issuecomment-1762168392,1,['test'],['tests']
Testability,Stop testing on GitLab CI,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1049:5,test,testing,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1049,2,['test'],['testing']
Testability,"Strange. This ran for me on my local machine and a server, so it's strange that it fails these tests. . I don't believe this is a major concern but thought I would check in.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477960735:95,test,tests,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477960735,1,['test'],['tests']
Testability,Strategy for implementing and testing models with vertically stretched grids,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/471:30,test,testing,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/471,1,['test'],['testing']
Testability,Stratified plane Couette flow test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/310:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/310,1,['test'],['test']
Testability,Strikes me that we could also change the log level so that warnings are not emitted.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3705#issuecomment-2287776604:41,log,log,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3705#issuecomment-2287776604,1,['log'],['log']
Testability,Super easy fix. Suggested by @vchuravy. Should rerun multithreading benchmarks after this.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1113:68,benchmark,benchmarks,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1113,1,['benchmark'],['benchmarks']
Testability,Sure give it a try. We can merge when tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482078115:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482078115,1,['test'],['tests']
Testability,"Sure we can do that. But before we start a PR with a new test, shouldn't we first make sure there isn't anything wrong with my script?. That said, I think the basic ingredients are. - A time-average (NetCDF?) output (obviously); - Some diagnostic (preferably a Field, not a ComputedField) that changes in time predictably. The issue with creating a truly _minimal_ MWE is that (like [your comment summed up well](https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-810496153)) it's not clear which outputs exhibit the issue and which ones don't. I _think_ we might be able to get away with simply starting a quiescent simulation apart from a uniform u velocity and see if the total momentum is conserved on average. (This should start inertial oscillations.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817971702:57,test,test,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817971702,2,['test'],['test']
Testability,Sure! I was just doing what the test does to reproduce why CI fails... :) Let's simplify the test also!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1560123791:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1560123791,4,['test'],['test']
Testability,"Sure!. ```; (Oceananigans) pkg> status; Project Oceananigans v0.53.0; Status `~/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/Project.toml`; [79e6a3ab] Adapt v3.2.0; [052768ef] CUDA v2.4.1; [a8cc5b0e] Crayons v4.0.4; [7a1cc6ca] FFTW v1.3.2; [e9467ef8] GLMakie v0.1.30; [c27321d9] Glob v1.3.0; [033835bb] JLD2 v0.4.3; [63c18a36] KernelAbstractions v0.5.4; [da04e1cc] MPI v0.16.1; [442fdcdd] Measures v0.3.1; [85f8d34a] NCDatasets v0.11.3; [6fe1bfb0] OffsetArrays v1.6.2; [bac558e1] OrderedCollections v1.4.0; [4a48f351] PencilFFTs v0.12.2; [d330b81b] PyPlot v2.9.0; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.0; [09ab397b] StructArrays v0.5.0; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [10745b16] Statistics; ```. ```; ERROR: LoadError: ArgumentError: length(size) must be 2.; Stacktrace:; [1] validate_tupled_argument(::Tuple{Int64,Int64,Int64}, ::Type{T} where T, ::String, ::Int64; greater_than::Int64) at /home/meck/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/src/Grids/input_validation.jl:24; [2] validate_tupled_argument(::Tuple{Int64,Int64,Int64}, ::Type{T} where T, ::String, ::Int64) at /home/meck/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/src/Grids/input_validation.jl:24; [3] validate_size(::Type{T} where T, ::Type{T} where T, ::Type{T} where T, ::Tuple{Int64,Int64,Int64}) at /home/meck/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/src/Grids/input_validation.jl:48; [4] RegularRectilinearGrid(::Type{T} where T; size::Tuple{Int64,Int64,Int64}, x::Tuple{Int64,Int64}, y::Tuple{Int64,Int64}, z::Tuple{Int64,Int64}, extent::Nothing, topology::Tuple{DataType,DataType,DataType}, halo::Nothing) at /home/meck/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/src/Grids/regular_rectilinear_grid.jl:161; [5] simulate_lid_driven_cavity(; Re::Int64, N::Int64, end_time::Int64) at /home/meck/Documents/Bachelor Arbeit/Repos/Oceananigans.jl/validation/lid_d",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-807380928:754,Log,Logging,754,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-807380928,1,['Log'],['Logging']
Testability,"Sure, I ran a simple test using the MWE above without picking up a checkpoint and set:. ```julia; Δt = .01 # timestep (s); T1 = 5 # first simulation stop time (s); δt = .03 # progress message interval and output saving interval; # Run a simulation; simulation = test_simulation(T1, Δt, δt, true); run!(simulation); ```; I've noticed that this strange behavior occurs when δt is smaller than or equal to 0.03, but it disappears when δt is greater than 0.03 (even at 0.031). It seems there is a cutoff value of δt below which the error emerges.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2260950870:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2260950870,2,['test'],['test']
Testability,"Sure, I will work on the unit tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433785662:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433785662,1,['test'],['tests']
Testability,"Sure, tests should pass in this last commit, when that is done I ll merge!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2276#issuecomment-1050417811:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2276#issuecomment-1050417811,1,['test'],['tests']
Testability,"Sure, the PR resolves the rounding issue caused by `previous_interval_stop_time` through the use of actuations (as inspired by its application [here](https://github.com/CliMA/Oceananigans.jl/blob/dc5dc28c6cf433dcb8a6668cef99e98309e6ead9/src/Utils/schedules.jl#L58-L63)).; Here is the part of the code showing these [changes](https://github.com/CliMA/Oceananigans.jl/pull/3721/commits/a52812b00eb38e712ed20c7a6db3cf2e0c3a7877#diff-532eb4a17264dc44a7cae7601aca768c39bfb08f0493561c333f24a3261d6a46R123-R130). Another important change is that ; ```julia. # Save averaging start time and the initial data collection time; wta.window_start_time = model.clock.time; wta.window_start_iteration = model.clock.iteration; wta.previous_collection_time = model.clock.time. wta.schedule.collecting = false; wta.schedule.actuations += 1; ```. occurs only when the window ends, i.e., when `end_of_window(wta.schedule, model.clock) == true`. In contrast, the [previous version](https://github.com/CliMA/Oceananigans.jl/pull/3721/commits/a52812b00eb38e712ed20c7a6db3cf2e0c3a7877#diff-532eb4a17264dc44a7cae7601aca768c39bfb08f0493561c333f24a3261d6a46L265-L268) triggered this only when the model wasn't collecting. > I'm wondering if it makes sense that this is hard or if we should actually consider a more fundamental redesign to make it more robust... I agree that a more fundamental redesign could improve robustness in the long term. That said, the current adjustments seem to resolve the issue for now (I'll look into why certain cases aren't passing the test). We can continue to monitor its performance and consider a redesign if further issues arise.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2379285570:1541,test,test,1541,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2379285570,1,['test'],['test']
Testability,"Sure. . This [code ](https://github.com/CliMA/Oceananigans.jl/blob/78f1e2910355ca4213241b23525b717c73d77900/test/test_stretched_grid.jl#L5) shows different functions that I have defined, similar to your `cheb` example above. Passing the function, which in this context I've called `stretched` but agree we should change it, [here](https://github.com/CliMA/Oceananigans.jl/blob/78f1e2910355ca4213241b23525b717c73d77900/src/Grids/stretched_rectilinear_grid.jl#L54) you will see that the function is evaluated to define the grid. It's nothing fancy, but it does the trick. . Sorry if I misunderstood your suggestion?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1551#issuecomment-815385216:108,test,test,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1551#issuecomment-815385216,1,['test'],['test']
Testability,"Sure. I'm now working on making plots of convergence and should be able to get that done today. One issue is that I have commented out a lot of stuff, which was there before. I've focused on making the one advection test and haven't integrated it into the other tests, yet. Not sure if this is a problem?. I will create a PR later today.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-746523704:216,test,test,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-746523704,2,['test'],"['test', 'tests']"
Testability,"Surprisingly I was able to get a distributed `IncompressibleModel` running just using multiple dispatch without having to modify any existing code, although a cleaner design might require a bit of refactoring. PR is still a work-in-progress so it's a bit messy, the purpose was to demonstrate a proof of concept. MPI.jl and PencilFFTs.jl are new dependencies but I haven't updated the Project.toml yet. So far this PR adds some new infrastructure:; 1. Distributed/multi-architectures (e.g. `MultiCPU`) that know about rank connectivity.; 2. Halo communication between ranks is done via multiple dispatch on a new `HaloCommunicationBC` type.; 3. A `DistributedFFTBasedPoissonSolver` for solving Poisson equations across ranks.; 4. A `DistributedModel` that creates local grids for each ranks, injects halo communication BCs, and passes the distributed pressure solver to a local `IncompressibleModel`. I also added some simple tests for multi architecture rank connectivity, local grid construction, injection of halo communication BCs, and halo communication (testing x, y, and z slab decompositions). Also added tests for the distributed Poisson solver ensuring the solution is divergence-free. Next step for testing would probably be to test that the code handles `Bounded` topologies correctly then add tests that reproduce the regression tests but on multiple ranks and ensure the output matches the regression output. ## Some notes. ### Domain decomposition. Domain decomposition is supported and tested in x, y, and z. But for `IncompressibleModel` z-decomposition won't work right now because vertical integrals are done inside GPU kernels (so we probably don't want to decompose in z). And PencilFFTs.jl supports decompositions in dimensions 2 and 3 (since dimension 1 FFTs are the fastest). As a result, right now Oceananigans.jl only supports slab decompositions in y although we should figure out if pencil decompositions are possible. ### Local topologies. The local grid topology may need",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066:1020,test,tests,1020,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-775301066,2,['test'],"['testing', 'tests']"
Testability,Switch Tests to use the new logger,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/585:7,Test,Tests,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/585,2,"['Test', 'log']","['Tests', 'logger']"
Testability,Switch tests to use the new logger,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/578:7,test,tests,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/578,2,"['log', 'test']","['logger', 'tests']"
Testability,Switching to Plots.jl and unbreaking the example tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/536:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/536,1,['test'],['tests']
Testability,"T, IFFT}{x, y, z}.; - [x] Benchmark 3D {FFT, IFFT}; - [x] Benchmark 1D {DCT, IDCT}{x, y, z}.; - [x] Benchmark 3D {DCT, IDCT}; - [x] Try N = 16, 64, 256; - [x] Is it faster to do 3 1D transforms or 1 3D transform? Answer: 1 3D transform. To see whether we should just do 1D transforms for everything or whether batching is faster I ran some 1D and 3D FFT benchmarks. The results for triply-periodic are posted below. Based on the benchmarks, it seems that for 256^3 doing three 1D transforms is ~15% slower than doing one 3D transform. So it makes sense to batch transforms when possible. Note than FFT along dimension 1 is the fastest and FFT along dimension 2 is the slowest. FFT along dimension 3 is in the middle. So whatever FFTW is doing under the hood, FFTs along non-batched dimensions (e.g. along dimension 2) are slow. ```; FFT benchmarks; ┌───────────────┬─────┬───────────┬────────────┬────────────┬────────────┬────────────┬───────────┬────────┐; │ Architectures │ Ns │ dims │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────┼───────────┼────────────┼────────────┼────────────┼────────────┼───────────┼────────┤; │ CPU │ 16 │ (1, 2, 3) │ 13.948 μs │ 14.043 μs │ 20.717 μs │ 80.605 μs │ 0 bytes │ 0 │; │ CPU │ 64 │ (1, 2, 3) │ 1.656 ms │ 1.717 ms │ 1.809 ms │ 2.697 ms │ 0 bytes │ 0 │; │ CPU │ 256 │ (1, 2, 3) │ 229.619 ms │ 233.008 ms │ 234.033 ms │ 243.288 ms │ 0 bytes │ 0 │; │ CPU │ 16 │ 1 │ 3.240 μs │ 3.255 μs │ 3.603 μs │ 6.746 μs │ 0 bytes │ 0 │; │ CPU │ 64 │ 1 │ 445.803 μs │ 458.928 μs │ 513.041 μs │ 755.937 μs │ 0 bytes │ 0 │; │ CPU │ 256 │ 1 │ 61.083 ms │ 63.464 ms │ 63.969 ms │ 67.009 ms │ 0 bytes │ 0 │; │ CPU │ 16 │ 2 │ 4.085 μs │ 4.135 μs │ 4.723 μs │ 8.088 μs │ 0 bytes │ 0 │; │ CPU │ 64 │ 2 │ 564.769 μs │ 579.278 μs │ 615.731 μs │ 804.859 μs │ 0 bytes │ 0 │; │ CPU │ 256 │ 2 │ 110.718 ms │ 111.560 ms │ 111.506 ms │ 112.525 ms │ 0 bytes │ 0 │; │ CPU │ 16 │ 3 │ 7.772 μs │ 7.787 μs │ 9.499 μs │ 24.886 μs │ 0 bytes │ 0 │; │ CPU │ 64 │ 3 │ 684.541 μs",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1338:2400,benchmark,benchmarks,2400,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1338,1,['benchmark'],['benchmarks']
Testability,TODO:. - [] Test on_architecture for single column grid + `EnsembleColumnSize`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3886:12,Test,Test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3886,1,['Test'],['Test']
Testability,TODO:. - [x] Add a test that `KernelComputedField` works with `ConformalCubedSphereGrid`.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1603:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1603,1,['test'],['test']
Testability,Taylor-Green vortex verification experiment and convergence test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/611:60,test,test,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/611,1,['test'],['test']
Testability,Temporarily disable ShallowWater GPU regression test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2927:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2927,1,['test'],['test']
Testability,Test !(collecting) after output for `WindowedTimeAverage`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1802:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1802,1,['Test'],['Test']
Testability,Test ArgumentError for wrong background_field location,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1848:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1848,1,['Test'],['Test']
Testability,Test N-tuple `MultipleForcings` and make them work on the GPU,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3743:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3743,1,['Test'],['Test']
Testability,Test NetCDF output for all grids,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1490:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1490,1,['Test'],['Test']
Testability,Test advection schemes with Float32 and Float64,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1782:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1782,1,['Test'],['Test']
Testability,Test and fix bugs in `RegularLatitudeLongitudeGrid`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1415:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1415,1,['Test'],['Test']
Testability,"Test are passing! @glwagner please lmk if you want changes in the test. If not, I'll merge and register a new version.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127883538:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127883538,2,"['Test', 'test']","['Test', 'test']"
Testability,Test can come now or later,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2397#issuecomment-1084059429:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2397#issuecomment-1084059429,1,['Test'],['Test']
Testability,Test correctness / geometric consistency of `VerticallyStretchedRectilinearGrid`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1756:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1756,1,['Test'],['Test']
Testability,Test differentiation of Oceananigans broadcast kernel with Enzyme,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598,1,['Test'],['Test']
Testability,Test failing on GPU,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['Test'],['Test']
Testability,Test for GPU Poisson solver,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/238:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/238,1,['Test'],['Test']
Testability,Test for incompressibility in hydrostatic and non-hydrostatic models,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1934:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1934,1,['Test'],['Test']
Testability,Test for second-order convergence of pressure solver,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/704:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/704,1,['Test'],['Test']
Testability,Test needed for `ConsecutiveIterations` schedule,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2154:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2154,1,['Test'],['Test']
Testability,Test non-equal MPI domain decompositions soon,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1450:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1450,1,['Test'],['Test']
Testability,Test nonlinear advection for 2D/3D schemes,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172720465:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172720465,1,['Test'],['Test']
Testability,Test of potential density pass. ; The insitu density difference for k=2 is instead of 0 is 2e-13…,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2067977636:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2067977636,1,['Test'],['Test']
Testability,Test that horizontal average is correct over time,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/737:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/737,1,['Test'],['Test']
Testability,Test that the GPU Poisson solver solution is numerically divergence-free,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/246:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/246,1,['Test'],['Test']
Testability,Test time-stepping with all turbulent diffusivity closures,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/549:0,Test,Test,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/549,1,['Test'],['Test']
Testability,"Tested this behavior on GPUs and it persists. I can't notice a pattern on the slowdown rate, but sometimes things go from taking 1 ms to compute to taking 1 s. A 1000x slowdown!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-950029886:0,Test,Tested,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-950029886,1,['Test'],['Tested']
Testability,Testing problem,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2222:0,Test,Testing,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2222,1,['Test'],['Testing']
Testability,"Testing this branch vs main in a 3D example with `momentum_advection = VectorInvariant(vorticity_scheme = WENO(), divergence_scheme = WENO(), vertical_scheme = WENO())` and `tracer_advection = WENO()`. This branch:; ![Screenshot 2023-02-21 at 4 34 22 PM](https://user-images.githubusercontent.com/33547697/220463656-0ab7389b-2dc1-415e-98d1-c2d772b0b302.png). Main:; ![Screenshot 2023-02-21 at 4 34 02 PM](https://user-images.githubusercontent.com/33547697/220463630-48b3c9a1-f18c-4623-99e0-b383adeed088.png)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2936:0,Test,Testing,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2936,1,['Test'],['Testing']
Testability,Testing this change from type-stable-with-tracers,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3406:0,Test,Testing,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3406,1,['Test'],['Testing']
Testability,Testing with validation/mesoscale/baroclinic_adjustment.jl seems to indicate that the race condition is eliminated from the changes to the fill_halo_region! function,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985:0,Test,Testing,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985,1,['Test'],['Testing']
Testability,"Tests all pass but code is a bit messy (especially `plan_transforms.jl`) due to lots of special cases that I'm not yet sure how to simplify so needs some work. Ran new FFT-based Poisson solver benchmarks on Tartarus (Titan V GPUs) and static ocean benchmarks for all topologies on Satori (Tesla V100 GPUs) + regression. Results are below. Will post a followup with some highlights/conclusions. # FFT-based Poisson solver benchmarks. ## Raw numbers. ```; FFT-based Poisson solver benchmarks; ┌───────────────┬─────┬────────────────────────────────┬────────────┬────────────┬────────────┬────────────┬───────────┬────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────┼────────────────────────────────┼────────────┼────────────┼────────────┼────────────┼───────────┼────────┤; │ CPU │ 192 │ (Bounded, Bounded, Bounded) │ 560.466 ms │ 563.145 ms │ 563.074 ms │ 566.700 ms │ 192 bytes │ 4 │; │ CPU │ 192 │ (Bounded, Bounded, Periodic) │ 434.408 ms │ 435.974 ms │ 437.003 ms │ 441.246 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Bounded, Periodic, Bounded) │ 472.312 ms │ 473.340 ms │ 473.620 ms │ 475.649 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Bounded, Periodic, Periodic) │ 333.460 ms │ 334.702 ms │ 334.998 ms │ 336.918 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Periodic, Bounded, Bounded) │ 495.012 ms │ 497.853 ms │ 497.462 ms │ 500.181 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Periodic, Bounded, Periodic) │ 363.169 ms │ 365.104 ms │ 365.891 ms │ 373.893 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Periodic, Periodic, Bounded) │ 349.305 ms │ 350.431 ms │ 352.641 ms │ 371.861 ms │ 160 bytes │ 2 │; │ CPU │ 192 │ (Periodic, Periodic, Periodic) │ 203.109 ms │ 203.653 ms │ 204.025 ms │ 206.834 ms │ 192 bytes │ 4 │; │ GPU │ 192 │ (Bounded, Bounded, Bounded) │ 7.765 ms │ 16.841 ms │ 15.934 ms │ 16.872 ms │ 84.00 KiB │ 904 │; │ GPU │ 192 │ (Bounded, Bounded, Periodic) │ 6.492 ms │ 13.599 ms │ 12.878 ms │ 13.633 ms │ 57.50 KiB │ 651 │; │ GPU │ 192 │ (Bounded, Peri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296:193,benchmark,benchmarks,193,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296,9,"['Test', 'benchmark']","['Tests', 'benchmarks']"
Testability,"Tests are failing rn with an error I cannot reproduce:. ```; Immersed Fields reduction [CPU]: Error During Test at /var/lib/buildkite-agent/builds/tartarus-3/clima/oceananigans/test/test_field_reductions.jl:223; Got exception outside of a @test; MethodError: no method matching arch_array(::CPU, ::BitArray{3}); Closest candidates are:; arch_array(::Distributed, ::Any); @ Oceananigans ~/builds/tartarus-3/clima/oceananigans/src/DistributedComputations/distributed_architectures.jl:263; arch_array(::CPU, ::Array); @ Oceananigans ~/builds/tartarus-3/clima/oceananigans/src/Architectures.jl:59; arch_array(::CPU, ::CuArray); @ Oceananigans ~/builds/tartarus-3/clima/oceananigans/src/Architectures.jl:60; ...; Stacktrace:; [1] condition_operand; @ ~/builds/tartarus-3/clima/oceananigans/src/ImmersedBoundaries/immersed_reductions.jl:26 [inlined]; [2] sum(f::Function, c::Oceananigans.AbstractOperations.GridMetricOperation{Center, Center, Center, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{Field{Center, Center, Nothing, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1915984001:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1915984001,4,"['Test', 'test']","['Test', 'Tests', 'test']"
Testability,Tests are on track to pass so I think this PR is finally ready to be reviewed/merged (with a regrettable amount of technical debt). It's unfortunately too large to be effectively reviewed but I'm happy to make changes if needed (or go over the code on Zoom if anyone would like to do so).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-819174689:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-819174689,1,['Test'],['Tests']
Testability,Tests are passing! :tada: . I don't see any changes in Project.toml though. Don't forget to bump the version before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-963570267:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-963570267,1,['Test'],['Tests']
Testability,"Tests error with `UndefVarError: `settings` not defined`, e.g.,. https://buildkite.com/clima/oceananigans/builds/12688#018afd6b-fb54-446d-a3cc-c4d1c4f99dd1/18-366. This is related I believe to #3238.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3308#issuecomment-1747959143:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3308#issuecomment-1747959143,1,['Test'],['Tests']
Testability,Tests fail because shallow water model with h=0 blows up when time stepped,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1262:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1262,1,['Test'],['Tests']
Testability,"Tests fail on v0.76.5 on GPU... weird... ```Julia; nc3020@gadi-gpu-v100-0100:/g/data/v45/nc3020/OC.jl$ julia-1.6 --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| |; |__/ |. (Oceananigans) pkg> test; Testing Oceananigans; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Project.toml`; [79e6a3ab] Adapt v3.3.3; [6e4b80f9] BenchmarkTools v1.3.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a2441757] Coverage v1.6.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,4,"['Benchmark', 'Test', 'test']","['BenchmarkTools', 'Testing', 'Tests', 'test']"
Testability,"Tests fail, is this a ""success""?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870166246:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870166246,1,['Test'],['Tests']
Testability,Tests fail. Why do we need this?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1785#issuecomment-870459636:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1785#issuecomment-870459636,1,['Test'],['Tests']
Testability,Tests for 'show' methods,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/705:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/705,1,['Test'],['Tests']
Testability,Tests for `OffsetArrays-Field` broadcasts,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2501:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2501,1,['Test'],['Tests']
Testability,Tests for splitting output files using `TimeInterval`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3523:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3523,1,['Test'],['Tests']
Testability,"Tests pass locally on CPU and GPU so PR should be ready for review! Sorry my VS Code trimmed whitespace. @simone-silvestri I can't request your review since you opened the PR, but if you approve via text I can click the approve button and merge lol.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3666#issuecomment-2396924520:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3666#issuecomment-2396924520,1,['Test'],['Tests']
Testability,Tests pass so I guess we don't need these lines.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1755#issuecomment-866358804:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1755#issuecomment-866358804,1,['Test'],['Tests']
Testability,Tests pass so maybe all is fine...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2348#issuecomment-1103413079:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2348#issuecomment-1103413079,1,['Test'],['Tests']
Testability,"Tests pass, so documentation in your courts @iuryt @tomchor. I think for the docstring we can just say that the `grid` needs to be provided if `outputs` are on a different `grid` than `model`. But it could be nice to also put an example in the docs, since I think the whole idea of output on a different grid from the model takes a bit to explain. Eg here: https://clima.github.io/OceananigansDocumentation/stable/model_setup/output_writers/. I can contribute a test if there's desire to put in the documentation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2093564545:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2093564545,2,"['Test', 'test']","['Tests', 'test']"
Testability,Tests pass; this should be ready for review.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2274533468:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2274533468,1,['Test'],['Tests']
Testability,Tests still fail but docs passed somehow. ; https://clima.github.io/OceananigansDocumentation/previews/PR1568/,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1568:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1568,1,['Test'],['Tests']
Testability,Tests were introduced in #1994 and updated in #2786.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2219#issuecomment-1305160880:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2219#issuecomment-1305160880,1,['Test'],['Tests']
Testability,Tests whether the Poisson solver can recover an analytic solution that is a product of sines and cosines. It can!,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/227:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/227,1,['Test'],['Tests']
Testability,Tests will fail while we wait for https://github.com/CliMA/CubedSphere.jl to become a fully-fledged Julia package. Hopefully just one more day of waiting... https://github.com/JuliaRegistries/General/pull/30963,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-788883027:0,Test,Tests,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-788883027,1,['Test'],['Tests']
Testability,"Thank @simone-silvestri, it turns out that I wasn't using CUDA-aware MPI. #3883 addresses this by adding an error if CUDA-aware MPI is not available, so that we are not confronted with a mysterious segmentation fault (which could be caused by any number of issues, not just CUDA-aware MPI). Since we don't have GPU tests right now I will also check to make sure that this runs with a proper CUDA-aware MPI.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2445274146:315,test,tests,315,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2445274146,1,['test'],['tests']
Testability,Thank you @simonbyrne!. @glwagner I tried to fix `all_*_nodes` so that we can `set!` reduced fields (which `model.free_surface` now is) but not sure if `[]` is the best solution. If tests pass we should merge and tag v0.54.1.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1573#issuecomment-819020035:182,test,tests,182,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1573#issuecomment-819020035,1,['test'],['tests']
Testability,"Thank you all for your informative responses! I dug into this a bit... *tl;dr* It looks like the issue _may_ be ""fixed"" on julia 1.10-beta3 (and there is a 1.10-rc1 now). # Benchmarks. Using an empty `Project.toml`, I can reproduce the issue when using julia 1.9:. ```; (base) gregorywagner:test/ $ julia19 --project test.jl [3:18:25]; ┌ Warning: Overwriting existing ./mwe.nc.; └ @ Oceananigans.OutputWriters ~/.julia/packages/Oceananigans/f5Cpw/src/OutputWriters/netcdf_output_writer.jl:359; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (15.100 minutes); [ Info: Executing initial time step...; [ Info: ... initial time step complete (8.244 seconds).; [ Info: Simulation is stopping after running for 15.251 minutes.; [ Info: Simulation time 1.333 hours equals or exceeds stop time 1.333 hours.; 919.254871 seconds (2.19 G allocations: 1.143 TiB, 12.80% gc time, 100.00% compilation time); ```. Way, way too long. (So it's good we have this issue.). But on julia 1.10-beta3 I get. ```; [ Info: Simulation time 1.333 hours equals or exceeds stop time 1.333 hours.; 17.237010 seconds (26.28 M allocations: 1.741 GiB, 2.14% gc time, 99.58% compilation time: <1% of which was recompilation); ```. much better. (Note that on 1.10 we get a lot of annoying warnings which is documented on #3374 and is relatively easily fixed.). Also, things are fine if I use the Oceananigans Manifest.toml, even with julia 1.9:. ```; (base) gregorywagner:Oceananigans.jl/ (main✗) $ julia19 --project test.jl [3:13:09]; ┌ Warning: Overwriting existing ./mwe.nc.; └ @ Oceananigans.OutputWriters ~/Projects/Oceananigans.jl/src/OutputWriters/netcdf_output_writer.jl:359; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (2.381 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (8.751 seconds).; [ Info: Simulation is stopping after running for 12.013 seconds.; [ Info: Simulation time 1.333 hours equals or exceeds",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1807091361:173,Benchmark,Benchmarks,173,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1807091361,3,"['Benchmark', 'test']","['Benchmarks', 'test']"
Testability,"Thank you for all your comments. I will try those lines; Just one question. Is the sintax of. `ΞT = randn(size(T)...) *. shape`. correct? I am getting this error message:. > Warning: No xauth data; using fake authentication data for X11 forwarding.; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI ~/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 16 threads; ERROR: LoadError: syntax: invalid identifier name "".""; Stacktrace:; [1] top-level scope; @ /lustre/scratch5/.mdt0/fspereira/OCEANANIGANS/test/case09/c16_128_128m.jl:197; in expression starting at /lustre/scratch5/.mdt0/fspereira/OCEANANIGANS/test/case09/c16_128_128m.jl:197. Line 197 corresponds to the line above. I removed the `*.shape` and the simulations are now running. Is that ok?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268557962:902,test,test,902,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268557962,2,['test'],['test']
Testability,"Thank you for reply, @glwagner!. > Can you clarify --- is the simulation on the right with the FFT-based _direct_ solver, or is it with a preconditioned conjugate gradient solver that use an FFT as a preconditioner?. On the left is FFT-based direct solver. On the right is the PCG solver with the FFT-based solver as a preconditioner. > My suggestion is to use a preconditioned conjugate gradient solver, with the FFT-based solver as a _preconditioner_ (not as the direct solver). It is what the right panel shows, if I am not mistaken. But the simulation crashed after thousands of iterations. I heard that the PCG solver in Oceananigans has not been widely tested, so that is why I turned to the `HeptadiagonalIterativeSolver`. > As for blow up I think the problem happens for very small time-steps? Perhaps try it without adaptive time-stepping for now and also cap the `max_iterations` as a small number. I am doing more testing on this. It is a different issue though. I will open a new issue if I can find a simple way to reproduce the blow up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3552#issuecomment-2071006297:659,test,tested,659,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3552#issuecomment-2071006297,4,['test'],"['tested', 'testing']"
Testability,"Thank you for your answer. ; I am not sure if I understood your comment. The tests I did were obtained after set!(model,..), and before run. I wrote the T, u, v, and w fields. They were all identical; Is this what you asked me to do?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1273628214:77,test,tests,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1273628214,1,['test'],['tests']
Testability,"Thank you for your feedback @maleadt! What is CUDAnative compilation? If you mean the precompilation phase when CUDAnative is first loaded, then it's not that as I start timing after all packages are loaded. I thought 6-7 minutes was normal/expected as @vchuravy et al. reported similar GPU compilation times for their shallow water model: https://github.com/JuliaLabs/ShallowWaterBench. I haven't done any rigorous benchmarking yet but out of those 6 minutes, ~1.5 minutes are spent on compiling code that creates CuFFT plans (the first plan takes 1.5 minutes then the others take <1 second). From watching the log I'm guessing the other 4.5 minutes are evenly split between setting up the model (creating CuArrays, initializing them, etc.) and the first time step (where the kernels are getting compiled presumably). I don't think we have that many kernels (just 5 bigger ones) but one of them; https://github.com/ali-ramadhan/Oceananigans.jl/blob/2b64d584c79ece0429f2421335ddb6bc0c6c6663/src/time_steppers.jl#L213; has several layers of inlining (it's inlining the majority of the functions in [operators/ops_regular_cartesian_grid_elementwise.jl](https://github.com/ali-ramadhan/Oceananigans.jl/blob/master/src/operators/ops_regular_cartesian_grid_elementwise.jl)) after which it probably balloons up to be a pretty big kernel. They also have tons of arguments crammed in as the structs I was passing weren't `isbitstype` (working on this #59). I should come back and update this issue once we do some proper benchmarking (note to self: nvprof seems like it's being deprecated in favor of Nsight). Caching kernels between sessions sounds tough but will definitely look into timing compilations in CUDAnative, might provide some insight on how to speed things up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/66#issuecomment-466847765:416,benchmark,benchmarking,416,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/66#issuecomment-466847765,3,"['benchmark', 'log']","['benchmarking', 'log']"
Testability,"Thanks @ali-ramadhan . I think it would be worthwhile for us to see the results from all the benchmarks so I asked @henryg888 to try running all the scripts. If we see anything interesting we could all more results as they are generated, otherwise we will update the 5. At the moment we are waiting for julia to be updated on the servers and then we can do proper benchmarking on the V100's. . I agree that plots would be nice and maybe we can play with that too. Shouldn't be difficult but will certainly discuss it with you.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845186763:93,benchmark,benchmarks,93,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845186763,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"Thanks @ali-ramadhan and @navidcy . Adding `const U = 1.0` definitely seemed to help as now it has gone further. However, at this stage I believe it's complaining about the norm. Below is the beginning part of the output, in case this makes sense to others. ```; ERROR: LoadError: scalar getindex is disallowed; Stacktrace:; [1] error(::String) at ./error.jl:33; [2] assertscalar(::String) at /home/fpoulin/.julia/packages/GPUArrays/WV76E/src/host/indexing.jl:41; [3] getindex at /home/fpoulin/.julia/packages/GPUArrays/WV76E/src/host/indexing.jl:96 [inlined]; [4] getindex at /home/fpoulin/.julia/packages/OffsetArrays/lli7H/src/OffsetArrays.jl:300 [inlined]; [5] getindex at ./subarray.jl:257 [inlined]; [6] _getindex at ./abstractarray.jl:1100 [inlined]; [7] getindex at ./abstractarray.jl:1060 [inlined]; [8] iterate at ./abstractarray.jl:986 [inlined]; [9] iterate at ./abstractarray.jl:984 [inlined]; [10] generic_normInf(::SubArray{Float64,3,OffsetArrays.OffsetArray{Float64,3,CuArray{Float64,3}},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:445; [11] normInf at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:536 [inlined]; [12] generic_norm2(::SubArray{Float64,3,OffsetArrays.OffsetArray{Float64,3,CuArray{Float64,3}},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:477; [13] norm2 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:538 [inlined]; [14] norm(::SubArray{Float64,3,OffsetArrays.OffsetArray{Float64,3,CuArray{Float64,3}},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}, ::Int64) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/generic.jl:607; [15] norm(::SubArray{Float64,3",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1477#issuecomment-800208000:367,assert,assertscalar,367,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1477#issuecomment-800208000,1,['assert'],['assertscalar']
Testability,"Thanks @ali-ramadhan and I agree completely. When I was working on the validation schemes I did test these schemes outside of Oceananigans and they did produce the correct slopes of -1 and -6. Sixth order accuracy could actually be attractive for some applications. Getting first order from upwinding may not sound llike much but it does ensure positivity, which might also be helpful for some cases where you want to ensure tracer concentrations are non-negative.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1320#issuecomment-768404599:96,test,test,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1320#issuecomment-768404599,1,['test'],['test']
Testability,Thanks @ali-ramadhan for doing this. I wonder if we could modify this script and run it on `ShallowWaterModel` to start doing some strong scaling tests for that model?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1451#issuecomment-795869987:146,test,tests,146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1451#issuecomment-795869987,1,['test'],['tests']
Testability,"Thanks @ali-ramadhan for the feedback. What I have so far is only redoing the `one_dimensional_advection_schemes.jl` but I thought this was a good place to start. When we are happy with this it should be easy to do other more interesting cases. I am happy to work with you to merge this with what you did in the other PR, when you have time. I agree that having some `@test` checks is a good idea. . I don't think it's as simple as everything being single as I tried running Oceananigans using single and reproduced the same plot. @glwagner suggested maybe something happens in the pressure solve. Could be but I don't know yet but I'm going to try and test this using ShallowWaterModel, which has no pressure solve. I have used a small enough time step that the scheme hasn't bee a problem, but I agree that RK3 would be better. I was only using QAB2 because I wanted to compare it with what I had programmed, AB2, to get similar results. From what I have seen both QAB2 and AB2 do pretty much the same thing, in this example.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-754024823:369,test,test,369,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-754024823,4,['test'],['test']
Testability,"Thanks @aramirezreyes for creating this, and I think this is a great idea to make things more uniformity. Unfortunately, there are some errors. When I looked at the first one it seemed to have an errror due to another model?. ```; Immersed boundaries test divergent flow solve with hydrostatic free surface models: Error During Test at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl:8;   | Got exception outside of a @test;   | ArgumentError: The grid halo (1, 1, 1) must be larger than (3, 3, 3).;   | Stacktrace:;   | [1] HydrostaticFreeSurfaceModel(; grid::ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, GridFittedBottom{OffsetMatrix{Float64, Matrix{Float64}}}, CPU}, clock::Clock{Float64}, momentum_advection::CenteredSecondOrder, tracer_advection::WENO5{Float64, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, buoyancy::Nothing, coriolis::Nothing, free_surface::ImplicitFreeSurface{Nothing, Float64, Nothing, Nothing, Symbol, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, forcing::NamedTuple{(), Tuple{}}, closure::Nothing, boundary_conditions::NamedTuple{(), Tuple{}}, tracers::Nothing, particles::Nothing, velocities::Nothing, pressure::Nothing, diffusivity_fields::Nothing, auxiliary_fields::NamedTuple{(), Tuple{}});   | @ Oceananigans.Models.HydrostaticFreeSurfaceModels ~/builds/tartarus-1/clima/oceananigans/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_model.jl:113;   | [2] macro expansion;   | @ ~/builds/tartarus-1/c",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185:251,test,test,251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2128#issuecomment-1001728185,4,"['Test', 'test']","['Test', 'test']"
Testability,"Thanks @glwagner . It seems that the `ramp` changes with the direction of the gradient, but the tracer doesn't. That's why we have a difference. Thanks. This is a rather complicated problem that you are investigating and I wonder whether getting a 3D test for `IsopycnalSkewSymmetricDiffusivity` might be an easier way to find the bug? Just a thought.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107524673:251,test,test,251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107524673,1,['test'],['test']
Testability,"Thanks @glwagner I'm happy to say this worked! Sorry that I was slow in putting the pieces together. I agree that a test would no be a bad idea. I glanced in `test_time_stepping.jl` and I did not see anything obvious that tested the time stepping. I modfiied `test_shallow_water.jl` to use the wizard but not it uses it for everything. Not necessarily bad, but not sure if this is what we want? Not sure if we want to have two of these functions. If there are not any tests for the wizard in `IncompresibleModel` maybe something should be done there and `ShallowWaterModel` can parallel that?. ```; function time_stepping_shallow_water_model_works(arch, topo, coriolis); grid = RegularCartesianGrid(size=(1, 1, 1), extent=(2π, 2π, 2π), topology=topo); model = ShallowWaterModel(grid=grid, gravitational_acceleration=1, architecture=arch, coriolis=coriolis); set!(model, h=1). wizard = TimeStepWizard(cfl=1.0, Δt=1.0, max_change=1.1, max_Δt=10). simulation = Simulation(model, Δt=wizard, stop_iteration=1); run!(simulation). return model.clock.iteration == 1; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-764674870:116,test,test,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-764674870,3,['test'],"['test', 'tested', 'tests']"
Testability,"Thanks @glwagner and being able to have `Nothing` in the vertical would be nice. No, it's not forced to be flat in the vertical but I really think it should be. I was thinking of putting a test saying if not flat in the vertical then stop, but wasn't sure if this is okay.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1649#issuecomment-839146713:189,test,test,189,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1649#issuecomment-839146713,1,['test'],['test']
Testability,Thanks @glwagner for clarifying and I see the point. Thanks also in advance for fixing it up. . I encountered the same problem when I wanted to test `Flat` and in the end separted out the different dimensinal cases. Not ideal but it worked for my simple purposes. Will be nice to have something more elegant in the tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-820403743:144,test,test,144,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-820403743,4,['test'],"['test', 'tests']"
Testability,"Thanks @glwagner for the feedback. There are tests that were added for both the time-stepping and introducing tracers. https://github.com/CliMA/Oceananigans.jl/blob/swm-shenanigans/test/test_shallow_water_models.jl. I agree that testing shallow_water_model_forcing on the other code, is a good idea. @ali-ramadhan , did you want to try that in this PR or in a subsequent one?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1291#issuecomment-756152081:45,test,tests,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1291#issuecomment-756152081,6,['test'],"['test', 'testing', 'tests']"
Testability,"Thanks @glwagner! We haven't been using background velocities in our setups, so won't have as much to say on that yet. But we'll continue testing the background tracer fluxes. @samlewin, are you using background shear in addition to background tracer fields in your configurations, or is the shear just in your initial conditions? This PR might be relevant.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2276121204:138,test,testing,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2276121204,1,['test'],['testing']
Testability,Thanks @glwagner. Sorry I didn't test before but I assumed that since we never reached that warning it couldn't cause problems. I'll close this issue since it's clearly out of the scope for Oceananigans,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1911238491:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1911238491,2,['test'],['test']
Testability,Thanks @hennyg888 for sharing this. I thought i tested the last PR with `WENO5` but cleared I messed up with that. Sorry.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1771#issuecomment-871689677:48,test,tested,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1771#issuecomment-871689677,2,['test'],['tested']
Testability,Thanks @hennyg888 for the benchmarks!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-1479892147:26,benchmark,benchmarks,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-1479892147,1,['benchmark'],['benchmarks']
Testability,"Thanks @jagoosw!. Definitely agree it would be good to add some comprehensive tests for particle advection on lat-lon grids. Since this is hopefully a pretty obvious fix, I'll merge this PR and open another to add some comprehensive tests. But happy to do it in this PR if anyone objects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3855#issuecomment-2430165094:78,test,tests,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3855#issuecomment-2430165094,2,['test'],['tests']
Testability,"Thanks @navidcy for making these changes, this is much better!. I looked in the regression tests and it seems that the `v` velocity is not as close as it used to be. I wonder if this is a matter of the error being slightly bigger?. ```; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;   | Expression: all(test_fields.v .≈ truth_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /net/ocean/home/data44/data5/glwagner/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool);   | @ Main /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345:91,test,tests,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345,6,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"Thanks @navidcy for pointing this out. . I can see that now we loop over `float_types`, but I don't see where this is set to `[Float32, Float64]`, as it is in other tests. Maybe I'm missing something?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870169542:165,test,tests,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870169542,1,['test'],['tests']
Testability,"Thanks @navidcy for the quick approval. Strangely, 3 tests have already failed. I looked at one and see that it can't find a file, see below. This is not actually related to this PR but I don't know how to fix it. ```; Precompiling project...;   | ✓ Oceananigans;   | 1 dependency successfully precompiled in 88 seconds (199 already precompiled);   | Testing Running tests...;   | ERROR: LoadError: LoadError: SystemError: opening file ""/data5/glwagner/.julia-7768/compiled/v1.6/Oceananigans/hU93i_huVsp.ji"": No such file or directory;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2598#issuecomment-1146595140:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2598#issuecomment-1146595140,3,"['Test', 'test']","['Testing', 'tests']"
Testability,Thanks @navidcy. I ll merge when tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3487#issuecomment-1989677144:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3487#issuecomment-1989677144,1,['test'],['tests']
Testability,"Thanks @qingli411. One obvious way to introduce the concept of dynamic dependencies is to break functionality out into multiple small packages (`OceananigansPlotting`, `OceananigansOutput`, etc). @vchuravy argued that this is a good philosophy for packages; perhaps even more so for a complex project like this one: we may want to keep the core as simple as possible. This would also make the tests run faster, and might make development easier...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-501712624:393,test,tests,393,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-501712624,1,['test'],['tests']
Testability,"Thanks @sandreza! . This is the Rossby-Haurwitz test case with ω = 0 and g = 100 m/s². This is without momentum advection (`advection = nothing`). It's running for long enough to do a 45 degree rotation. Time step is 20 seconds which corresponds to a ""gravity wave CFL"" of <0.223. Solution seems to bounce around a bit but otherwise just rotates. https://user-images.githubusercontent.com/20099589/114553938-2cdf5b80-9c34-11eb-82d0-8d1c2874b84c.mp4. Keeping everything else the same but switching on momentum advection (`advection = VectorInvariant()`) the solution stays still as it rotates (as it should I think), but a corner seems to blows up at t ≈ 1.639 days no matter how small I make the time step. I'm running inviscid so maybe we need some diffusion? Might also help if we go to higher resolution as well?. https://user-images.githubusercontent.com/20099589/114556283-8cd70180-9c36-11eb-98d6-1aa82c09721e.mp4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-818719143:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-818719143,1,['test'],['test']
Testability,Thanks @simone-silvestri for adding a GPU test for `FieldTimeSeries`! I've adapted it correctly now and tests pass locally so I think this PR is ready for review. Actually I should add a test that uses the new kwargs. Would do a test where multiple threads open the same `FieldTimeSeries` but don't think we have multi-threaded tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3739#issuecomment-2397361158:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3739#issuecomment-2397361158,5,['test'],"['test', 'tests']"
Testability,"Thanks @simone-silvestri for clarifying. I checkede and the RH-wave is an exact solution in the case of a rigid-lid. Since the hydrostatic model must have a free-surface, taking gravity to be very big should make the solution even better. . It is impressive that everything is stable and can run with such a large time step considering how strong gravity is. . The advection of a bump is a simpler test case but not nearly as interesting as the RH-wave.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1061780426:398,test,test,398,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1061780426,2,['test'],['test']
Testability,Thanks @simone-silvestri! Should we add a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3137#issuecomment-1579112857:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3137#issuecomment-1579112857,1,['test'],['test']
Testability,"Thanks @simone-silvestri. The problem has been fixed. . These tests have all passed for me on CPUs and GPUs on my laptop and a server, and I presume they will for everyone else. But I don't beleive these tests were the regression tests that failed before. I am happy to look into those and revive them one by one, if someone can point me to where I might find them.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1969101963:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1969101963,3,['test'],['tests']
Testability,"Thanks @tomchor and @raphaelouillon with your help on this PR! I implemented preliminary support for closure tuples, but it still needs to be tested. There's still some work to do to support proper both wall-modeled and wall-resolved LES in complex domains but I think this is a good start.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1107514765:142,test,tested,142,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1107514765,1,['test'],['tested']
Testability,Thanks @tomchor for fixing this PR so that the tests pass. So far what we have only tested the case when there is buoyancy with no motion. It would be nice to have a problem with non-zero velocities work. . I see there is this script [here](https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/flow_over_hills.jl) that we could play with but it does not seem like a minimal working example. Do you know of a simple script that looks at flow over a bump we could look at?. @glwagner also suggested we test this with lat-lon grids and create tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1125406301:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1125406301,8,['test'],"['test', 'tested', 'tests']"
Testability,"Thanks @vchuravy, with Cassette.jl v0.3.6 the CPU tests all pass now!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-838548217:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-838548217,1,['test'],['tests']
Testability,"Thanks everyone for your feedback. @vchuravy , great to know that multi-threading is built in! . I agree that profiling would be a good way to determine why we get not great efficiency. I have not used perf but we can look into it. Also, do you know of benchmarking others have done using `KernelAbstractions` on threads that we could look at for comparison?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880844335:253,benchmark,benchmarking,253,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880844335,2,['benchmark'],['benchmarking']
Testability,"Thanks for all the context! . Good points about the time step being more restricted by Coriolis for coarse global simulations and error being dominated by spatial discretization. I'd also be very interested how AB2 compares against RK3 for time-to-solution. I guess this could be readily tested with the non-hydrostatic model simulating turbulence. I'd be curious if RK3 is always faster, or if it's case-dependent. Although it is risky to be on the edge of stability CFL-wise. > It may be a research project to adapt the split-explicit free surface. . Ah I didn't realize that RK3 was not really used for global ocean models, especially with a split-explicit free surface :(. > However, also in this form, successive tendencies do not cancel out. Is this neccessary or is this why Quasi AB2 is technically only first-order accurate? I guess right now with Euler steps the tendency terms do cancel out when an AB2 time step is taken.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3738#issuecomment-2418146640:288,test,tested,288,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3738#issuecomment-2418146640,1,['test'],['tested']
Testability,"Thanks for catching that! However, that's not the issue. One of the things I did (which I discussed a few messages ago) was to move `field_slicer.jl` from OutputWriter to Diagnostics, since I couldn't compile the code in the correct order for dependencies otherwise. (Plus now that FieldSlicer is used in Diagnostics, it's no longer exclusive to OutputWriters.). The test complains that it needs `short_show(fs::FieldSlicer)` in line 490 of `netcdf_output_writer.jl`: https://github.com/CliMA/Oceananigans.jl/pull/1397/files#diff-b0c6a1868ef9229398d7bef0568f8adbb7ad14c88e7a49d0e8598ccb51ea07b5R490. But I'm already `using` `short_show` from `Oceananigans.Diagnostics` in line 10 of the same file: https://github.com/CliMA/Oceananigans.jl/pull/1397/files#diff-b0c6a1868ef9229398d7bef0568f8adbb7ad14c88e7a49d0e8598ccb51ea07b5R10. This appears to work in my local set-up when testing, but somehow fails on github. Any ideas?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787486965:367,test,test,367,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787486965,2,['test'],"['test', 'testing']"
Testability,"Thanks for catching this error. I think you need to add `""KernelFunctionOperation""` to this line:. https://github.com/CliMA/Oceananigans.jl/blob/fd672ea3309eeac945244cab5ddd4feaa99962f3/src/AbstractOperations/show_abstract_operations.jl#L5. The tests do not run interactively so often `show` is not called. We have to test `show` methods explicitly to catch bugs like this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1758#issuecomment-867003526:245,test,tests,245,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1758#issuecomment-867003526,2,['test'],"['test', 'tests']"
Testability,Thanks for doing that and now all test pass. Very nice,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1848#issuecomment-877700061:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1848#issuecomment-877700061,1,['test'],['test']
Testability,"Thanks for embarking on this @glwagner!. > It's a bit of a work in progress. Before merging we need:; > * tests (simple 1D test with temperature to see if budgets are correct?). Just added ""WIP"" (work in progress) to the PR title. We can work on the tests together. For testing, we should be able to extend the 1D column model example: https://github.com/climate-machine/Oceananigans.jl/blob/master/examples/column_model.jl. > Also looks like Travis is failing; not sure why that is. Looks like it's just the one test in the time stepping section that's failing. Maybe something to do with how the boundary conditions are called during the time stepping? The Model test passes so it's not erroring during model initialization/construction. > I propose changing the struct `BoundaryConditions` to `ModelBoundaryConditions` for clarity. I'll always vote for clarity!. Just one initial question: I might be misunderstanding the purpose of `bc.calc` but why not `bc.impose(args...)` instead of `bc.calc(args...)` as we usually say that we _impose_ boundary conditions?. Have to run out but will have a more detailed look later today. Otherwise, looks really neat! On a more practical note, might end up being easier to discuss this PR in person.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-471182606:106,test,tests,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-471182606,6,['test'],"['test', 'testing', 'tests']"
Testability,"Thanks for looking into this @maleadt!. Hmmm, if it's indeed a multithreading issue then maybe the simple solution is to just turn off multithreading for FFTW during testing?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/636#issuecomment-589249373:166,test,testing,166,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/636#issuecomment-589249373,1,['test'],['testing']
Testability,"Thanks for noticing @francispoulin ! The GPU issue was a failing test, so if tests are passing, there's no issue! Perhaps a gift from St. Nick.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1270#issuecomment-754008736:65,test,test,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1270#issuecomment-754008736,2,['test'],"['test', 'tests']"
Testability,"Thanks for opening this!. I don't have a lot of server/internet access right now so I can't properly test this, but using `.*┌ Warning.*\n` and `.*└ @ Oceananigans.*\n` seems to work. You can test things out here: https://regexr.com/. Also, it seems like there's an extra quote in your regex line?. `DocTestFilters = [Regex(""Warning: defaulting""), Regex(""Oceananigans.Advection"")""]` . maybe should be. `DocTestFilters = [Regex(""Warning: defaulting""), Regex(""Oceananigans.Advection"")]`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2080#issuecomment-979912506:101,test,test,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2080#issuecomment-979912506,2,['test'],['test']
Testability,"Thanks for running these tests, @glwagner. They really do look like the issue in https://github.com/CliMA/Oceananigans.jl/issues/3290. > The easiest fix is to eliminate the pressure separation. Since we're waiting for the IBM-aware pressure solve, we could also just add an option to eliminate the pressure separation that would be `false` by default. That should be pretty easy. And then in the future when we're confident about the new algorithm we can eliminate the pressure separation completely (along with user interface an code simplifications that are possible with no pressure separation). > Another solution is to fix the hydrostatic pressure algorithm. Does it need fixing in this case though? The way I see it this is just a consequence of how the hydrostatic pressure is defined: a vertical integral of `b`, which doesn't play well with the assumption of a vertically-periodic domain. > We should also note that the vertical tridiagonal solve is not correct for vertically-periodic domains. But this is easily solvable (and the above 2 are as well). Cool! We should probably do that as well :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3364#issuecomment-1782238151:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3364#issuecomment-1782238151,2,['test'],['tests']
Testability,Thanks for running these tests. It would be nice to see how MPData performs in a 2D flow. . It's interesting that tweaking the number of iterations doesn't seem to make much difference. I'm a bit skeptical about this scheme though; it seems pretty diffusive and doesn't even beat third-order upwind which is way simpler. I might have introduced a bug although I went through the code again and it looks correct to me. Another possibility is that the high diffusivity is the trade-off for keeping the scheme positivity-preserving?; Godunov's theorem sets some tough standards -- it's not possible to obtain monotonic advection with a linear scheme beyond first order.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1954700946:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1954700946,2,['test'],['tests']
Testability,"Thanks for sharing the code. If it works on conjugagate_gradient_solver then I'd be up for trying it out with our previous tests and see if it passes. Also, I see that people are working on fixing this in `CUDA.jl` and in PR #688 they seems to want to get `p-norm` support. From looking at the code, under the hood, they see to be using LinearAlgebra.tr for all `p > 2`. I tried it for a few and for finite values of `p` it seems not to complain. But for `Inf`, it gives a warning. However, the infinity norm is just the maximum, which we can do quickly so it doesn't need this? . Anyhow, using the above seems like a good idea to try, sometime.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1562#issuecomment-817883819:123,test,tests,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1562#issuecomment-817883819,1,['test'],['tests']
Testability,"Thanks for spotting the bug! . It was a problem of `immersed_cell` trying to interrogate the first halo at a `Face` location, launching `inactive_cell` at `i` and `i-1` (where `i-1` was out-of-bounds). (this was also the reason for the shallow water tests not passing so we caught two birds with one stone!). I didn't come across it because I always use 4 halos regardless of the advection scheme. I changed a bit the code. Now it should work without requiring the value at `Face`s in the halo (it is necessary _only_ for vector invariant flavours of WENO for which the halo must be 4 anyways, so there should be no problem!)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1157081405:250,test,tests,250,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1157081405,1,['test'],['tests']
Testability,"Thanks for testing out the `VerticallyStretchedRectilinearGrid`!. > 1. The `OutputWriter` is complaining that there is no field `zC`. Right yeah `RegularRectilinearGrid` called it `grid.zC` but `VerticallyStretchedRectilinearGrid` calls it `grid.zᵃᵃᶠ` to be more consistent with the curvilinear grids being added, but the output writers might not know this yet. We should add some output writer tests for the different grids now. I think this might be an issue with `RegularLatitudeLongitudeGrid` as well. > 2. It didn't work with the `FT=Float64` argument. Ah how did you do call the constructor? Julia uses a `semicolon` to separate regular arguments from keyword arguments (https://docs.julialang.org/en/v1/manual/functions/#Keyword-Arguments). So maybe you meant to call. ```julia; grid = VerticallyStretchedRectilinearGrid(Float64, ...); ```. instead of. ```julia; grid = VerticallyStretchedRectilinearGrid(FT=Float64, ...); ```. ?. I guess it could be a bit confusing since `FT` is only what the function calls it but seems to be standard to include it in the docstring to give some idea of what the argument is. Well, the real solution would be a better docstring with examples. > 3. It asks me to use: `halo = (3, 3, 3)` and not `halo = (1, 1, 1)` . Yes. If you use higher-order advection schemes you might need larger halos. `RegularRectilinearGrid` automatically increased the halo size as needed but `VerticallyStretchedRectilinearGrid` doesn't do this yet. Should be possible to do it automatically though. > 4. For testing purposes, I tried using a linear grid with `zF = collect(-160:2.5:0)`. I ran for 1 short timestep and it produces NaN's in the `u` field. However, using the same linear grid with `RegularRectilinearGrid(size=(Nx, Ny, Nz), extent=(Δx*Nx, Δy*Ny, Δz*Nz), topology = (Periodic, Bounded, Bounded))` works fine. Hmmm, how small was the time step? There's a division by Δt in the pressure solve so that could blow things up but usually only if `Δt = 0` I think. Also, does",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-791560413:11,test,testing,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-791560413,2,['test'],"['testing', 'tests']"
Testability,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:84,test,tests,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445,1,['test'],['tests']
Testability,Thanks for the discussion @glwagner @tomchor @wenegrat I see that it was the initial condition that was unsuitable. Will read Wenegrat & Thomas (2020) to better understand how you set up your simulation there. > Does this keep a resting fluid stratified in the direction of gravity at rest? John. Ah that would indeed be a good test: set up an inviscid ocean stratified in the direction of g and ensure that the velocities remain (close to) zero. Ah interesting result @navidcy... Your setup looks good to me but not sure I can explain it either. Almost weirdly looks like the bubble is hitting an invisible boundary haha (I expected the bubble to keep rising and not spread out so suddently...),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-738007469:328,test,test,328,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-738007469,1,['test'],['test']
Testability,"Thanks for the effort, @ali-ramadhan, but I just tested this and the results are exactly the same!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1520#issuecomment-810355766:49,test,tested,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1520#issuecomment-810355766,1,['test'],['tested']
Testability,"Thanks for the explaination @glwagner and I agree, saving this question for future validation and/or convergence tests is a good idea.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1639#issuecomment-838848318:113,test,tests,113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1639#issuecomment-838848318,1,['test'],['tests']
Testability,"Thanks for the explaination. . It seems the two errors are for the CPU and GPU case that involve testing the advection scheme, but only one time stepping scheme test fails. ```; Advection schemes: Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-9/clima/oceananigans/test/test_time_stepping.jl:261; --;   | Test threw exception;   | Expression: time_stepping_works_with_advection_scheme(arch, advection_scheme);   | TaskFailedException;   |  ;   | nested task error: MethodError: div_Uu(::Int64, ::Int64, ::Int64, ::RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField, Oceananigans.Fields.ZeroField, Oceananigans.Fields.ZeroField}}, ::Field{Face, Center, Center, CPU, O; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1790#issuecomment-871454732:97,test,testing,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1790#issuecomment-871454732,5,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,"Thanks for the feedback @glwagner and @tomchor . I will respond soon but I have an updated I wanted to share. I did a simulation in each for 100 time steps a few times each. I found sometimes the second simulation was way faster than the first. For different advection schemes I found, to my surprise, they do scale differently. ```; scheme ratio; ====== ===; C2 1.7; U3 2.4; C4 3; U5 2.4; W5 3.4; ```. I would not call these offical benchmarks but more back of the envelop calculations (between friends). But these numbers are, mostly, around 3, which is what I expected. . For fun, I will do the same thing with GPUs (and will find out if my new code runs on a GPU). I guess one mystery is why is it that my actual simulation ran so slowly? I will try it again for 2 hours instead of 2 days and see how the scalings look.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1564#issuecomment-816767845:434,benchmark,benchmarks,434,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1564#issuecomment-816767845,2,['benchmark'],['benchmarks']
Testability,"Thanks for the reminder @navidcy. I don't think the .md's in Docs are automatically updated. I will update https://github.com/CliMA/Oceananigans.jl/blob/master/docs/src/appendix/benchmarks.md with the latest benchmark results. . On a second note, do we want to show the benchmark results with WENO5 or with no specified advection scheme?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877445139:178,benchmark,benchmarks,178,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877445139,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Thanks for the review @glwagner. I made the changes and also added a test that fails (well CUDA crashes) without this PR, and passes with this PR. > Does the annotation `::FT` work?. Unfortunately not. I ended up getting GPU exceptions instead: https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2441915837",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2444999725:69,test,test,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2444999725,1,['test'],['test']
Testability,"Thanks for working on this @josuemtzmo! I do tend to avoid file splitting since one file, even if it is huge, simplifies data analysis. And most of the time, the data analysis can be done on the fly alleviating the need for huge outputs. > Do we test this?. I don't think so. Definitely a good idea to do so since a wrong implementation can result in data loss. Usually Julia would stop then re-run the entire script so would a test look something like: set up a simulation with a checkpointer, run it for a some iterations with some file splitting output, then set up the exact same simulation (copy paste) and run it for some more iterations and more file splitting, then check that the output is all correct?. There may be some edge cases too, e.g. zero or only one output actuation after picking up, or before the initial simulation ends.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3818#issuecomment-2397594302:246,test,test,246,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3818#issuecomment-2397594302,4,['test'],['test']
Testability,"Thanks for working on this @navidcy! I'll try to `git merge master` which should fix some tests and then I'll look at fixing the other failures. > A question that comes about is that after this PR: do we test *only* on v1.6? If so, how are we making sure that code works smooth on v1.5? Should we test on both? Should we bump the julia compat requirement in the `Project.toml` file to `^1.6`?. Ideally yeah we would test on both 1.5 and 1.6 but I don't think we have the CI resources to do so :(. We could set up some GitHub Actions pipelines to test Mac and Windows with 1.5 and only run a subset of the tests so it doesn't massively slow down CI. It wouldn't be comprehensive but we'd get more coverage. Not sure if we'll have to only support Julia 1.6+ only soon, but that would save us from having to test on 1.5. We might not want to jump ship to 1.6 too soon though. I experienced longer compilation times when using Julia 1.6 in developing PR #1522 so I had to switch back to 1.5. Maybe I just had a weird setup though, I should investigate more carefully. I could be the only one who's had issues... Might be good to beta test 1.6 a little bit before switching completely.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-821192104:90,test,tests,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-821192104,8,['test'],"['test', 'tests']"
Testability,"Thanks to @glwagner's #1821 fix, `WENO5()` now works for `benchmark_incompressible_model.jl` for both Float32 and Float64. ; Very notable improvements on speedup. We're up from 150 to 450 times speedup for Float32, and up from 120 to 350 times speedup for Float64 on a 256^3 grid.; Here are the results of the latest benchmark with the latest master:; ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ CPU │ Float32 │ 32 │ 34.822 ms │ 34.872 ms │ 35.278 ms │ 38.143 ms │ 1.38 MiB │ 2302 │ 10 │; │ CPU │ Float32 │ 64 │ 265.408 ms │ 265.571 ms │ 265.768 ms │ 267.765 ms │ 1.38 MiB │ 2302 │ 10 │; │ CPU │ Float32 │ 128 │ 2.135 s │ 2.135 s │ 2.136 s │ 2.138 s │ 1.38 MiB │ 2302 │ 3 │; │ CPU │ Float32 │ 256 │ 17.405 s │ 17.405 s │ 17.405 s │ 17.405 s │ 1.38 MiB │ 2302 │ 1 │; │ CPU │ Float64 │ 32 │ 37.022 ms │ 37.179 ms │ 37.335 ms │ 39.017 ms │ 1.77 MiB │ 2302 │ 10 │; │ CPU │ Float64 │ 64 │ 287.944 ms │ 288.154 ms │ 288.469 ms │ 290.838 ms │ 1.77 MiB │ 2302 │ 10 │; │ CPU │ Float64 │ 128 │ 2.326 s │ 2.326 s │ 2.326 s │ 2.327 s │ 1.77 MiB │ 2302 │ 3 │; │ CPU │ Float64 │ 256 │ 19.561 s │ 19.561 s │ 19.561 s │ 19.561 s │ 1.77 MiB │ 2302 │ 1 │; │ GPU │ Float32 │ 32 │ 4.154 ms │ 4.250 ms │ 4.361 ms │ 5.557 ms │ 2.13 MiB │ 6033 │ 10 │; │ GPU │ Float32 │ 64 │ 3.383 ms │ 3.425 ms │ 3.889 ms │ 8.028 ms │ 2.13 MiB │ 6077 │ 10 │; │ GPU │ Float32 │ 128 │ 5.564 ms │ 5.580 ms │ 6.095 ms │ 10.725 ms │ 2.15 MiB │ 7477 │ 10 │; │ GPU │ Float32 │ 256 │ 38.685 ms │ 38.797 ms │ 39.548 ms │ 46.442 ms │ 2.46 MiB │ 27721 │ 10 │; │ GPU │ Float64 │ 32 │ 3.309 ms │ 3.634 ms │ 3.802 ms │ 5.844 ms │ 2.68 MiB │ 6033 │ 10 │; │ GPU │ Float64 │ 64 │ 3.330 ms │ 3.648 ms │ 4.008 ms │ 7.808 ms │ 2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877439491:317,benchmark,benchmark,317,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877439491,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Thanks to @hennyg888 , we now have scalings results for the distributed shallow water and nonhydrostatic models for both weak and strong scaling going up to 128 cores. . https://github.com/CliMA/Oceananigans.jl/blob/master/docs/src/appendix/benchmarks.md. The good news is that the `ShallowWaterModel`, in both weak and strong scaling, reaches efficienties of around 80% on 128 cores. This is something we can probably make better but not the first concern. The not so good news is that the `NonhydrostaticModel`, the efficiency goes down close to 10%. I don't know why but wanted to mention it as it's something that we should be able to do much better with. Thoughts? @christophernhill @glwagner @ali-ramadhan",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1948:241,benchmark,benchmarks,241,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1948,1,['benchmark'],['benchmarks']
Testability,"Thanks to @leios and @francispoulin for feedback that helped locate the issue!. Resolves #1170 . This PR fixes a bug in how index unpermutation is done as part of the Makhoul (1980) fast cosine transform algorithm we use for the GPU. It only affected wall-bounded dimensions of odd length (see below). Oceananigans was effectively setting the pressure to zero at the topmost grid point (it was actually accessing memory from out-of-bounds but since the bug was pretty consistent I assume it always grabbed some close-to-zero number). I'm shocked that no test picked this up... But looking at our tests, we don't test dimensions of odd length on the GPU. This is probably because in earlier versions of Oceananigans, GPU models only supported dimension lengths that were multiples of 16 (due to hard-coded thread-block layouts). So we probably don't have many, if any, comprehensive GPU tests with odd-sized wall-bounded dimensions. . TODO:; - [x] Add a test that fails due to this bug.; - [x] Confirm that the minimal icy moon setup does not blow up if Nz is even.; - [x] Commit fix. Test should pass and minimal icy moon should not blow up.; - [x] Ensure `divergence_free_poisson_solution` test runs on GPU with odd sizes (currently only even sizes are tested).; - [x] Ensure `poisson_solver_convergence` test runs on the GPU with even and odd sizes (currently it is not tested on the GPU). # Reproduction. ```julia; julia> permute(i, N) = isodd(i) ? floor(Int, i/2) + 1 : N - floor(Int, (i-1)/2); permute (generic function with 1 method). julia> unpermute(i, N) = i <= N/2 ? 2i-1 : 2(N-i+1); unpermute (generic function with 1 method); ```. This works fine for dimensions of even length:. ```julia; julia> N = 4; 4. julia> L = [permute(i, N) for i in 1:N]; 4-element Array{Int64,1}:; 1; 4; 2; 3. julia> [unpermute(i, N) for i in L]; 4-element Array{Int64,1}:; 1; 2; 3; 4; ```. but fails for dimensions of odd length:. ```julia; julia> N = 5; 5. julia> L = [permute(i, N) for i in 1:N]; 5-element Arr",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1228:554,test,test,554,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1228,5,['test'],"['test', 'tests']"
Testability,"Thanks! I often forget this!. but then, how do you explain that this test passes without gilling the halos?? . https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/test/test_computed_field.jl#L372",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557165977:69,test,test,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557165977,2,['test'],['test']
Testability,"Thanks! I'll get the tests to pass completely then merge! I forgot the previous comments, thanks for reminding me, I will address them now. . For replacing the Regular and Vertically stretched grid it shouldn't be a huge problem but there might be some conflicts. Major ones might be fields like `Δx` being substituted by `Δxᶠᵃᵃ` and `Δxᶜᵃᵃ` or making sure that architecture is always consistent between grid, models and fields",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-961968320:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2025#issuecomment-961968320,1,['test'],['tests']
Testability,"Thanks, @glwagner!!; I will test that and see how it goes.; I really think it would be nice for us to develop this functionality in for the writers.; Saving a subset of the simulation is pretty common when running high-res simulations.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2033093316:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2033093316,1,['test'],['test']
Testability,"Thanks, that's helpful @jagoosw. Just one more thought... I realized after I did the testing for my previous post that the hang occurs at ""Initializing simulation..."". This implies that the problem isn't with any constructors (eg the `Field` constructor above) but rather the actual computations, probably. A big change from 0.85 (which [occurred in 0.88](https://github.com/CliMA/Oceananigans.jl/releases/tag/v0.88.0)) is the [introduction of the `KernelParameters` abstraction](https://github.com/CliMA/Oceananigans.jl/pull/3125) for offsetting indices within kernels, used here:. https://github.com/CliMA/Oceananigans.jl/blob/70536571523ad2eb71fd9a2200121eca63998ac4/src/AbstractOperations/computed_field.jl#L78. and I think other places, which @simone-silvestri can advise. `KernelParameters` extends some `KernelAbstractions` functionality in a non-trivial way I think. Maybe there are some things we can improve there:. https://github.com/CliMA/Oceananigans.jl/blob/main/src/Utils/kernel_launching.jl. Even if the issue is fixed on 1.10, I think we still ought to understand this problem better since it might come back in the future (things like this often do...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1808580651:85,test,testing,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1808580651,1,['test'],['testing']
Testability,"Thanks, this looks good and I can't think of cases where the test would erroneously pass now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1716027943:61,test,test,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1716027943,1,['test'],['test']
Testability,"That cannot be true... The regression test should take around two hours, which yes is quite a lot and we should maybe split it into two... I don't know what is reason for the solver test to slow down, might it be because of the forced shutdown of saturday?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-970254433:38,test,test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-970254433,2,['test'],['test']
Testability,"That explains why I have never done it. @simone-silvestri , could you restart the test when you have a minute?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1158035473:82,test,test,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1158035473,1,['test'],['test']
Testability,That is ironically an error in the error printer. Can you convert that to an assertion so we can see the actual error message?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1786195710:77,assert,assertion,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1786195710,1,['assert'],['assertion']
Testability,That was quick! I think we didn't rush to resolve #1377 since it's a pretty major breaking change but as long as tests pass (and people agree with the change) we should tag a release!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1386#issuecomment-782294704:113,test,tests,113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1386#issuecomment-782294704,1,['test'],['tests']
Testability,"That's a good point. As a newcomer it will be nice to have some documentation of this, since otherwise, it is hard to know how to test specific files in the test suit.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000008000:130,test,test,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000008000,2,['test'],['test']
Testability,That's a good test too! Might be nice to do both tests in fact.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883756091:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883756091,2,['test'],"['test', 'tests']"
Testability,"That's awesome, thanks @arcavaliere!. I think if we can get a printing format similar to [MicroLogging.jl](https://github.com/c42f/MicroLogging.jl) with a timestamp on the left and log level + line location then we'll have a great logger we can merge into the code and start using!. And once we start using it we can tweak and improve it as we learn more. But let me know if you had other features in mind!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-544481969:181,log,log,181,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-544481969,2,['log'],"['log', 'logger']"
Testability,That's definitely good! It's not an issue that would crash a simulation but next time I'm editing `test_output_writers.jl` I'll remember to add some simple tests for this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1299#issuecomment-758166414:156,test,tests,156,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1299#issuecomment-758166414,2,['test'],['tests']
Testability,"That's fair. I think it's preferred generally to implement features when there's a strong need for it. The reason to wait is because code features (and their tests) often (not always) impose a maintenance burden on developers. So, given that supporting some features might slow down the pace of code development, it's in the interest of both users and developers to keep low-priority features out of the code for as long as possible / forever. Rotating a domain is an interesting use case. Other solutions are certainly cleaner, but pragmatism may force us in that direction.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2262#issuecomment-1047178584:158,test,tests,158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2262#issuecomment-1047178584,1,['test'],['tests']
Testability,"That's great news @ali-ramadhan . I guess by looking at your code I can learn how to adapt it to `ShallowWaterModel`. Maybe I will start by doing some tests for the two-dimensional turbulence example, or has someone done that already? By that I mean checking scalabiilty.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-786696921:151,test,tests,151,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-786696921,1,['test'],['tests']
Testability,"That's indeed better. Sure, if tests pass and images appear in the docs preview then merge! :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-876024011:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-876024011,1,['test'],['tests']
Testability,"The 3D solver with mixed boundary conditions (periodic in the horizontal with DFTs, Neumann in the vertical with DCTs) works now as tested against an analytic solution but for some reason once I switched to DCTs it's only first-order convergent. The relevant function is [`solve_poisson_3d_mbc`](https://github.com/ali-ramadhan/OceanDispatch.jl/blob/d7310255347ced6c12472903c07c7e0004882a44/src/spectral_solvers.jl#L121). ![solve_poisson_3d_mbc first order convergence](https://user-images.githubusercontent.com/20099589/48667435-603d5080-eaa3-11e8-9fb0-5dabc47ebcbb.png)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/7:132,test,tested,132,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/7,1,['test'],['tested']
Testability,The Bickley jet might be a good example to use as a regression test!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1137962212:63,test,test,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1137962212,1,['test'],['test']
Testability,"The CPU tests all pass, but it seems like the GPU server isn't working? Does something need to be rebooted?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1908410418:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1908410418,1,['test'],['tests']
Testability,The Convergence tests and Couette flow pages (in validation) had missing figures that somehow got lost at some point. I was able to find the figures by going back to older versions of Oceananigans and reintroduced them. Resolves #1459. Resolves #1696.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797,1,['test'],['tests']
Testability,"The JuliaGPU CI has AMD machines, but Oceanigans test-suite is probably to large.; We could support a smaller test-case. Also see https://github.com/SciML/DiffEqGPU.jl for an extension based approach and I am happy to add missing functionality to KernelAbstractions. @jpsamaroo might be able to help with issues arising from AMDGPU.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937273161:49,test,test-suite,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937273161,2,['test'],"['test-case', 'test-suite']"
Testability,"The Leith closure uses the isotropic operators for viscosity, but defines special operators for tracer diffusivities (so that tracer fluxes lie in a local isopycnal). I re-enabled the time-stepping test for Leith. We'll see if it works. Resolves #1034",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1074:198,test,test,198,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1074,1,['test'],['test']
Testability,The MG solver tests fail on the curvilinear grid.; https://buildkite.com/clima/oceananigans/builds/8380#0182bd4a-b305-42af-9390-a05e5b039826. I'm wondering whether it's because the grid spacing is not uniform...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1223407174:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1223407174,1,['test'],['tests']
Testability,The MPI we use in the distributed tests is not CUDA-aware,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3897:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3897,1,['test'],['tests']
Testability,"The PR isn't merged. To use the code on this PR, you have to install it at the Julia REPL by first typing `]` to enter package manager mode, and then writing:. ```julia; pkg> add Oceananigans#glw/closure-constant; ```. Once you've updated your local version of Oceananigans to use the code on this PR, you can test the source code changes that we've made.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3370#issuecomment-1801867651:310,test,test,310,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3370#issuecomment-1801867651,1,['test'],['test']
Testability,"The Partial cell method is bugged at the moment. @jm-c is working on correcting the bugs. An example is the output of `_immersed_cell` https://github.com/CliMA/Oceananigans.jl/blob/3c4785c03a9eb649a3636b79664134d1c802083b/src/ImmersedBoundaries/partial_cell_bottom.jl#L97-L102; which is incoherent with the notion of a `minimum_fractional_cell_height`. I.e., the test that checks whether a cell is immersed or not should include the minimal fractional cell height. ; Something more along these lines; ```julia; @inline function _immersed_cell(i, j, k, underlying_grid, ib::PartialCellBottom); # Face node below current cell; z = znode(i, j, k, underlying_grid, c, c, f); h = @inbounds ib.bottom_height[i, j, 1]; ϵ = ib.minimum_fractional_cell_height; # z + Δz is equal to the face above the current cell; Δz = Δzᶜᶜᶜ(i, j, k, ibg.underlying_grid); return z + Δz * ϵ ≤ h ; end; ```. There are other inconsistencies as we find out that simple examples still crash also with this fix. ; A simple case for which partial cells lead to the simulation crashing (independently on the time step size) is the [internal tide](https://github.com/CliMA/Oceananigans.jl/blob/main/examples/internal_tide.jl) example. If you want to contribute we are trying to correct the implementation over in #3682.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2274573004:363,test,test,363,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2274573004,1,['test'],['test']
Testability,The RH test: . https://user-images.githubusercontent.com/22668662/114433316-ab35f200-9b8f-11eb-877d-f4be82e1a559.mp4,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-817976070:7,test,test,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-817976070,1,['test'],['test']
Testability,"The Validation experiments in the Docs is very incomplete. I suggest we nuke it? Perhaps just leave the convergence tests page there and rename it to ""Convergence Tests""?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1696:116,test,tests,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1696,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"The Y-partition tests with Periodic longitude do not pass because of one point near the boundary where values are really low. I am kind of confident that the implementation is correct, we might be hitting a Floating point ordering problem that does not allow perfect reproducibility. I am considering relaxing the relative tolerance for distributed tests because I do not really see a way out for regression tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765215973:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765215973,3,['test'],['tests']
Testability,"The `ShallowWaterModel` tests are failing:. ```; [2021/02/17 14:56:04.486] INFO Testing time-stepping ShallowWaterModels [CPU(), (Periodic, Periodic, Bounded)]...; --;   | Time-stepping ShallowWaterModels [CPU(), (Periodic, Periodic, Bounded)]: Error During Test at /storage7/buildkite-agent/builds/tartarus-mit-edu-3/clima/oceananigans/test/test_shallow_water_models.jl:118;   | Test threw exception;   | Expression: time_stepping_shallow_water_model_works(arch, topo, nothing, nothing);   | type ShallowWaterModel has no field immersed_boundary; ```. I think what we really want to do is define a fallback `correct_immersed_tendencies!(args...) = nothing` in the `TimeSteppers` module (so that other models which do not have immersed boundary functionality can be time-stepped), and move the current definition of `correct_immersed_tendencies!` that's specific to `IncompressibleModel` to the `Models.IncompressibleModels` module. @whitleyv let me know what you'd like to do: you can make these changes, or I can help either by pair programming or making them myself.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1368#issuecomment-781615560:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1368#issuecomment-781615560,5,"['Test', 'test']","['Test', 'Testing', 'test', 'tests']"
Testability,"The `test_ensemble_hydrostatic_free_surface_models.jl ` fail when I run on my laptop. ```Julia; (base) navid:OC.jl/ (ncc/fix-race-issue) $ julia --project [12:21:26]; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.8.2 (2022-09-29); _/ |\__'_|_|_|\__'_| |; |__/ |. shell> cd test/; /Users/navid/Research/OC.jl/test. julia> include(""test_ensemble_hydrostatic_free_surface_models.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; WARNING: Method definition update_state!(Oceananigans.Models.HydrostaticFreeSurfaceModels.HydrostaticFreeSurfaceModel{TS, E, A, S, G, T, V, B, R, F, P, U, C, Φ, K, AF} where AF where K where Φ where C where U where P where F where R where B where V where T where G where S where A<:Oceananigans.Architectures.AbstractArchitecture where E where TS) in module HydrostaticFreeSurfaceModels at /Users/navid/Research/OC.jl/src/Models/HydrostaticFreeSurfaceModels/update_hydrostatic_free_surface_model_state.jl:18 overwritten at /Users/navid/Research/OC.jl/src/Models/HydrostaticFreeSurfaceModels/update_hydrostatic_free_surface_model_state.jl:20.; ** incremental compilation may be fatally broken for this module **. [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (53.522 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (15.625 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (556.792 μs); [ Info: Executing initial time step...; [ Info: ... initial time step complete (1.679 ms).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; [ Info: Initializing simulation...; [ Info: ... simulation in",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809:413,test,test,413,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809,2,['test'],['test']
Testability,"The `validation` scripts have proved useful for code development since they essentially provide convenient scientific / integration tests which would be hard or expensive to implement in CI, but which are still useful when implementing or evaluating a new feature. They also help us share knowledge and code. Yet a major problem is that the `validation` scripts are not tested and therefore most of them are broken, since they aren't updated as Oceananigans syntax changes. I was talking with @siddharthabishnu and we realized that a possible solution would be to follow the convention used by Flux's ""model-zoo"": https://github.com/FluxML/model-zoo. With this pattern, every validation ""experiment"" is a directory that includes a collection of scripts and a `Project.toml`. The `Project.toml` indicates the version of Oceananigans. If people want to upgrade the scripts + environment they can submit a PR. We'd still be informally testing the validation scripts, but hopefully this would make them more useful in the future, especially to new users. We'll have to select a handful of cases that we want to keep around in the process of transitioning to the new system.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3076:132,test,tests,132,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3076,3,['test'],"['tested', 'testing', 'tests']"
Testability,The actual bottlenecks (as seen from the profile) are the transpose steps. The FFT steps are basically irrelevant.; This file shows how to setup and perform the transposes; https://github.com/CliMA/Oceananigans.jl/blob/ss/distributed-fft/test/test_distributed_transpose.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1986306179:238,test,test,238,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1986306179,1,['test'],['test']
Testability,"The advantage is clearer for diagnostics: with a dictionary (or other named/associative collection) it will presumably be easier to keep track of the elements of `model.diagnostics` for the purpose of logging/printing, or saving their values... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/362#issuecomment-523545677:201,log,logging,201,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/362#issuecomment-523545677,1,['log'],['logging']
Testability,"The branch `fp-ss/shallow-water-version2` has (hopefully) corrected the problems with the tendency calculations brought up by @glwagner in #2928 (and elsewhere). Does someone what to take a look to confirm that we have done this correctly? If yes the changes start [here](https://github.com/CliMA/Oceananigans.jl/blob/f2511962ca15f3aaf87d2571e3551e59dc05c694/src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl#L7). . I thought the next step might be to add in the regression tests one by one, which were removed in #3050. I am going to look into `test_shallow_water_models.jl` next to see what runs and what doesn't with the current code.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966700098:488,test,tests,488,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966700098,1,['test'],['tests']
Testability,The build log says that `immersed_boundary` is used on line 99 of `shallow_water_model.jl` even though it does not exist.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-843327575:10,log,log,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-843327575,1,['log'],['log']
Testability,"The changes made still have some problems. ```. [2021/05/18 14:09:15.226] INFO Testing halo communication...; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | Expression: all(north_halo(field, include_corners = false) .== arch.connectivity.north); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:365; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [4] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:475 [inlined]; &nbsp; | [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119 [inlined]; &nbsp; | [6] top-level scope at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:448; &nbsp; | Halo communication: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | Expression: all(south_halo(field, include_corners = false) .== arch.connectivity.south); &nbsp; | Stacktrace:; &nbsp; | [1] test_triply_periodic_halo_communication_with_411_ranks(::Tuple{Int64,Int64,Int64}) at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:366; &nbsp; | [2] macro expansion at /storage7/buildkite-agent/builds/tartarus-mit-edu-9/clima/oceananigans/test/test_distributed_models.jl:477 [inlined]; &nbsp; | [3] macro expansion at /buildworker/worker/package_linux64/build",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802:79,Test,Testing,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843439802,8,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability,"The clause that controls the definition of `cell_diffusion_timescale` in `TimeStepWizard` had a bug. I re-wrote in a way that's clearer to understand and that fixes the bug. Consider the MWE below:. ```julia; using Oceananigans. grid = RectilinearGrid(size=(8, 8, 8), extent = (1,1,1),; topology=(Periodic, Periodic, Bounded)). closure = IsotropicDiffusivity(ν=1); model = NonhydrostaticModel(grid = grid,; closure = closure); @info """" model; ; wizard = TimeStepWizard(diffusive_cfl=0.1,); ```. Before this PR:. ```julia; julia> wizard.cell_diffusion_timescale(model); Inf. julia> @which wizard.cell_diffusion_timescale(model); infinite_diffusion_timescale(args...) in Oceananigans.Simulations at /home/tomas/.julia/packages/Oceananigans/IHPoE/src/Simulations/time_step_wizard.jl:12; ```. After this PR:. ```julia; julia> wizard.cell_diffusion_timescale(model); 0.015625. julia> @which wizard.cell_diffusion_timescale(model); cell_diffusion_timescale(model) in Oceananigans.TurbulenceClosures at /home/tomas/repos/Oceananigans.jl/src/TurbulenceClosures/turbulence_closure_diagnostics.jl:15; ```. I'll also add a test to catch this in the future, since there are no tests for `diffusive_cfl` that I could tell.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2213:1112,test,test,1112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2213,2,['test'],"['test', 'tests']"
Testability,"The code in https://github.com/CliMA/Oceananigans.jl/blob/master/src/OutputWriters/time_average_outputs.jl is a utility / user-convenience function for wrapping outputs passed to `JLD2OutputWriter` and `NetCDFOutputWriter` in a `WindowedTimeAverage`. It does not involve any averaging. If you can explain why you think it is convoluted, perhaps we can improve it. `WindowedTimeAverage` is defined in this file: https://github.com/CliMA/Oceananigans.jl/blob/master/src/OutputWriters/windowed_time_average.jl. The key part is `accumulate_result!`:. https://github.com/CliMA/Oceananigans.jl/blob/d17f926b2c4787bf44f619439e81bfb82937aabf/src/OutputWriters/windowed_time_average.jl#L126-L144. Can you explain why isn't this captured in our tests?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872452104:735,test,tests,735,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872452104,1,['test'],['tests']
Testability,"The code should allow all types of partitioning but there is a bug preventing the tests from passing for y- and xy-partitions. This PR aims to fix the bug (and consequently add the excluded y- and xy-partitioning tests) . rework `fill_halo_regions!` to split out non-communicating and communicating boundary conditions such that the latter are executed alone. . To give an example, for ; ```julia ; julia> boundary_conditions = FieldBoundaryConditions(west = NoFluxBoundaryCondition(), east = NoFluxBoundaryCondition(), south = ImpenetrableBoundaryCondition(), north = DistributedCommunicationBoundaryCondition(), bottom = nothing, top = nothing); Oceananigans.FieldBoundaryConditions, with boundary conditions; ├── west: FluxBoundaryCondition: Nothing; ├── east: FluxBoundaryCondition: Nothing; ├── south: OpenBoundaryCondition: Nothing; ├── north: DistributedBoundaryCondition: Nothing; ├── bottom: Nothing; ├── top: Nothing; └── immersed: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing); ```. in main:; ```julia; julia> halo_tuple = permute_boundary_conditions(boundary_conditions);. julia> for i in 1:length(halo_tuple[1]); @info ""operation $(halo_tuple[1][i]) with bcs $((halo_tuple[2][i], halo_tuple[3][i]))""; end; [ Info: operation fill_bottom_and_top_halo! with bcs (nothing, nothing); [ Info: operation fill_west_and_east_halo! with bcs (FluxBoundaryCondition: Nothing, FluxBoundaryCondition: Nothing); [ Info: operation fill_south_and_north_halo! with bcs (OpenBoundaryCondition: Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.DistributedCommunication, Nothing}); ```. in this PR; ```julia; julia> halo_tuple = permute_boundary_conditions(boundary_conditions);. julia> for i in 1:length(halo_tuple[1]); @info ""operation $(halo_tuple[1][i]) with bcs $(halo_tuple[2][i])""; end; [ Info: operation fill_bottom_and_top_halo! with bcs (nothing, nothing); [ Info: operation fill_south_halo! with bcs (OpenBoundaryCondition: Nothing,); [ Info: operation fill_west_and_east_halo",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338:82,test,tests,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338,2,['test'],['tests']
Testability,"The codebase makes extensive use of `@inbounds`, for good reason and usually pretty safely. But does it make sense to run the tests with `--check-bounds=yes` to catch any cases of out-of-bounds memory accesses?. Out of bounds accesses don't always produce an error and can silently lead to undefined behavior. This may lead to slightly slower tests, although I doubt it would slow them down by much as most of the time is spend on compiling. Might help with discovering certain issues sooner. Probably #3615 but maybe not #3320. X-Ref: https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2318319464",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3747:126,test,tests,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3747,2,['test'],['tests']
Testability,The cubed sphere grid from the MIT as read from DataDeps has the faces ordered:; 1. `+ x` direction; 2. `+ y` direction; 3. `+ z` direction (Arctic); 4. `- x` direction; 5. `- y` direction; 6. `- z` direction (Antarctica); ; So to avoid confusion for (users and developers!) I thought I make sure that the ConformalCubedSphere follows the same convention. This PR does that + it adds tests to check whether the ConformalCubedSphereGrid metrics from the grid read from file and the grid constructed in Oceananigans.jl are the same. After this is merged we'll move on to #2867 to constructing `ConformalCubedSphereGrid` using MultiRegion (an possibly nuke the `CubedSpheres` module completely). We will have a `ConformalCubedSphereGrid` (which is the same as the `cs32` grid read from file) to bench our MultiRegion implementation with!. (This PR also moves some of the spherical trigonometry utility function to `grid_utils.jl`.). Closes #1586,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2871:384,test,tests,384,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2871,1,['test'],['tests']
Testability,"The deep convection golden master fails intermittently even if the random number generator is seeded with the same value. Some randomness is added to the initial surface temperature. For now the 5 tests affected by this are skipped with `@test_skip` and will show up as ""Broken"". @christophernhill suggested using a portable random number generator: http://mitgcm.org/download/daily_snapshot/MITgcm/model/src/port_rand.F",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/176:197,test,tests,197,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/176,1,['test'],['tests']
Testability,The dependency on OrthogonalSphericalShellGrids here is blocking the progress (the `SplitExplicitAuxiliaryFields` type has changed in this PR). How do we deal with this? We could remove the dependency in the tests of Oceananigans and move those tests over at OrthogonalSphericalShellGrids,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3841#issuecomment-2431512977:208,test,tests,208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3841#issuecomment-2431512977,2,['test'],['tests']
Testability,The diff coverage is `83.56%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #930 +/- ##; ==========================================; + Coverage 72.84% 73.05% +0.21% ; ==========================================; Files 194 197 +3 ; Lines 5719 5823 +104 ; ==========================================; + Hits 4166 4254 +88 ; - Misses 1553 1569 +16 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `75.00% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | |; | [test/test\_averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2F2ZXJhZ2VkX2ZpZWxkLmps) | `0.00% <0.00%> (ø)` | |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `82.50% <30.00%> (-4.78%)` | :arrow_down: |; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `60.37% <83.33%> (+7.43%)` | :arrow_up: |; | [src/BoundaryConditions/zero\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy96ZXJvX2hhbG9fcmVnaW9ucy5qbA==) | `78.94% <87.50%> (+2.47%)` | :arrow_up: |; | [src/Fields/averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hdmVyYWdlZF9maWVsZC5qbA==) | `94.44% <94.44%> (ø)` | |; | [src/AbstractOperation,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/930#issuecomment-690826704:1327,test,test,1327,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/930#issuecomment-690826704,2,['test'],['test']
Testability,"The difference appears to be that the code on #1780 uses the argument `float_type`, whereas this test only changes `eltype(grid)`. `float_type` only determines the floating point type of the `Clock` and `buoyancy`. So I'm not sure why or how this causes the test in #1780 to fail. Either way I think the `float_type` argument has caused enough trouble so I'm trying to banish it in #1786 . Once it's gone let's try to resolve this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870458699:97,test,test,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870458699,2,['test'],['test']
Testability,"The difference operator doesn't use the grid metrics --- but maybe you mean the derivative / gradient operator?. Such a test would catch this issue, it's true. We could use a simple test with linear gradients. There might already be such a test, but not for all grids... ?. I think the fact that the cell spacings don't add up to the grid size could be an even worse problem because it means that integrals / budgets are not correct. But I'm not sure since the spacings at cell centers might be more important (these lines only manipulate the spacing at cell interfaces).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1755#issuecomment-866287834:120,test,test,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1755#issuecomment-866287834,6,['test'],['test']
Testability,The difficulties in getting a test to fail on #1784 could mean that the issue this PR resolves is machine dependent. But I'm not sure.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-870838764:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-870838764,1,['test'],['test']
Testability,"The distributed regression tests are still failing but I'm not sure how to go about getting them to work because I can't work out how to run mpi locally, is it possible to do e.g. `mpiexec -n 4 ...` locally just on a single machine?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181606447:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181606447,1,['test'],['tests']
Testability,The docs log complaints about the Eady turbulence example giving NaNs... Did anything changed in the code?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-797817214:9,log,log,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-797817214,1,['log'],['log']
Testability,The documentation build probably just needs to be restarted. Fixing the distributed test errors and committing the changes will trigger this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842647371:84,test,test,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842647371,1,['test'],['test']
Testability,The documentation buildkite test was failing for #1930 already so I don't think that it is what broke it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1949#issuecomment-902789630:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1949#issuecomment-902789630,1,['test'],['test']
Testability,"The dynamics test exhibits some ""breathing"":. https://user-images.githubusercontent.com/15271942/109686870-acb3d980-7b50-11eb-86c5-437fb7257d6b.mp4. https://user-images.githubusercontent.com/15271942/109686850-a887bc00-7b50-11eb-8939-803a1de29261.mp4. this could be because the initial condition doesn't satisfy discrete geostrophic balance, or a continuing issue with the coriolis implementation. However, I suggest we merge this PR now (since it has some bug fixes) and continue working on the validation tests in a future PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1404#issuecomment-789067613:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1404#issuecomment-789067613,2,['test'],"['test', 'tests']"
Testability,"The error originates from this line:. https://github.com/CliMA/Oceananigans.jl/blob/d6deb950cdcd489ceb872568663ecf5b2c8ccb2a/src/Fields/field_tuples.jl#L26. So the first arg `arch` is `Float64` here. I believe the problem is this line:. https://github.com/CliMA/Oceananigans.jl/blob/d6deb950cdcd489ceb872568663ecf5b2c8ccb2a/test/test_boundary_conditions_integration.jl#L139. where only one positional argument is provided (and that's `Float64`). If only one positional argument is provided, then that's `architecture`:. https://github.com/CliMA/Oceananigans.jl/blob/d6deb950cdcd489ceb872568663ecf5b2c8ccb2a/src/Grids/rectilinear_grid.jl#L256-L257. This propagates down to `XFaceField`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-989369767:324,test,test,324,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-989369767,1,['test'],['test']
Testability,The error with the test set `CPU hydrostatic free surface` model is probably related to a preconditioner that is not symmetric positive definite.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2351283415:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2351283415,1,['test'],['test']
Testability,"The errors of the `cpu-simulation-tests` are of this kind:. ```julia; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-2/clima/oceananigans/test/test_jld2_output_writer.jl:135; --;   | Expression: wT == zero(FT);   | Evaluated: -1.2037062f-34 == 0.0; ```. which is something that should be solved by replacing `==` with `\approx`, but I wonder why this used to pass before but isn't passing now. In other words: I'm not sure if merely replacing equality with approximate equality is the right way to solve this test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-994942677:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-994942677,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"The first build to exhibit the issue (all tests pass except docs) appears to be [1881](https://buildkite.com/clima/oceananigans/builds/1881#481a169e-486f-478f-973e-41c3b9bbc1da), and the last build to pass before it is [1878](https://buildkite.com/clima/oceananigans/builds/1878#9e70195f-804f-4b9d-9398-e5ddd1fe8594). Two packages are different:. * [`ArrayInterface` was bumped from 3.1.6 to 3.1.7](https://github.com/JuliaArrays/ArrayInterface.jl/pull/138/files); * [`ChainRulesCore` was bumped from 0.9.36 to 0.9.37](https://github.com/JuliaDiff/ChainRulesCore.jl/pull/329/files). No idea if this is progress...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-817067508:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-817067508,1,['test'],['tests']
Testability,The first thing maybe is to add a test that catches the bug.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2297211763:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2297211763,1,['test'],['test']
Testability,"The fix we recently had to put in to get CATKE's parameters up-to-date with [Wagner et al 2024](https://glwagner.github.io/assets/pdf/CATKE.pdf) show that we should probably be regression-testing CATKE results, especially if we are going to make related/surrounding improvements to `TKEDissipationVerticalDiffusivity`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3762:188,test,testing,188,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3762,1,['test'],['testing']
Testability,The following PR adds a new script with immersed boundaries on a lat-lon grid as a validation test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1880:94,test,test,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1880,1,['test'],['test']
Testability,"The following errors but I don't think it should... ```Julia; julia> grid = RectilinearGrid(size=3, z= x->x^2, topology=(Flat, Flat, Bounded)); ERROR: AssertionError: c₁ < c₂; Stacktrace:; [1] generate_coordinate(FT::Type{Float64}, topo::Flat, N::Int64, H::Int64, node_interval::Tuple{Float64, Float64}, coordinate_name::Symbol, arch::CPU); @ Oceananigans.Grids ~/Research/OC9.jl/src/Grids/grid_generation.jl:100; [2] RectilinearGrid(architecture::CPU, FT::DataType; size::Int64, x::Nothing, y::Nothing, z::Function, halo::Nothing, extent::Nothing, topology::Tuple{DataType, DataType, DataType}); @ Oceananigans.Grids ~/Research/OC9.jl/src/Grids/rectilinear_grid.jl:273; [3] RectilinearGrid; @ ~/Research/OC9.jl/src/Grids/rectilinear_grid.jl:254 [inlined]; [4] top-level scope; @ REPL[4]:1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3331#issuecomment-1757833504:151,Assert,AssertionError,151,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3331#issuecomment-1757833504,1,['Assert'],['AssertionError']
Testability,The implicit free surface solver tests are also failing on the main branch: https://buildkite.com/clima/oceananigans/builds/1644 but this seems like it would be a trivial fix.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1484#issuecomment-800523987:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1484#issuecomment-800523987,1,['test'],['tests']
Testability,"The intention of this PR is to extend the capability of `FieldTimesSeries` such that it can be used in time-dependent boundary conditions and forcing. This PR develops over 2 main points, but it is still a work in progress so suggestions are welcome. 1) Allow writing down files with `set!`ing the `OnDisk` flavor of a field time series so that it aligns with the format of our jld2 output writer. In this way, it is possible to easily format BC from different file types (such as binary or text) to be used with Oceananigans. ; An example of this is:; ```julia; grid = LatitudeLongitudeGrid(size = (16, 16, 10), latitude = (-60, -40), longitude = (-10, 10), z = (0, 1)); u = XFaceField(grid); fts = FieldTimeSeries{location(u)...}(grid, 1:100, backend = OnDisk(), path = ""testfile.jld2"", name = ""u""); for i in 1:length(fts.times); set!(u, 2i); set!(fts, u, i); end; ```; This will generate a file called `testfile.jld2` with the following structure; ```; julia> f = jldopen(""testfile.jld2""); JLDFile /Users/simonesilvestri/development/Oceananigans.jl/testfile.jld2 (read-only); ├─📂 serialized; │ └─🔢 grid; └─📂 timeseries; ├─📂 u; │ ├─🔢 1; │ ├─📂 serialized; │ │ ├─🔢 location; │ │ └─ ⋯ (2 more entries); │ └─ ⋯ (99 more entries); └─📂 t (100 entries); ```; which can be easily read by the other field time series types. 2) To do linear interpolation we need at least 2 fields in memory, so `OnDisk` will not do. On the other hand, we might not want _all_ fields in memory as if we are dealing with forcings that might overwhelm the memory (especially on the GPU). So the proposal is to implement a `Chunked` abstraction that only keeps in memory a ""chunk"" of the data. The details of this implementation are still open do be decided, especially if we want an automatic update of the chunk if we index into an index not existing in memory or if we want the user to be responsible in updating the data in memory through something like a callback; ```julia; julia> fts3 = FieldTimeSeries(""testfile.jld2"", ""u",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3233:773,test,testfile,773,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3233,3,['test'],['testfile']
Testability,"The issue was that, prior to the update the fill_halo_region! function, the test in validation/mesoscale/baroclinic_adjustment.jl , which in particular, uses the hydrostatic model with an explicit free surface, would produce different answers when run twice after several thousand timesteps. This typically happens when there is a race condition in the code and this particular one was hard to find since it occurs only after several timesteps have occurred. The reason for ""potential"" in the title of the PR is that I do not understand why this race condition exists in the first place, since I have not seen this in any other Oceananigans model, including Hydrostatic + Implicit Free Surface or the NonHydrostatic Model",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-920473363:76,test,test,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-920473363,1,['test'],['test']
Testability,"The logic should be reversed, we should have to include ""compute_tendencies=false"" as an _optimization_. Rather than what's implemented here, which does the unsafe thing by default. The problem with this logic is that it makes it harder to implement new models. The optimizations should be the optional thing basically, if one is naive, then things should work even if they are slower than they could be",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3741#issuecomment-2313416515:4,log,logic,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3741#issuecomment-2313416515,2,['log'],['logic']
Testability,"The main contribution of this pull request is a refactor of the function `time_step!` and related functions to reduce code duplication and improve readability. There is now a function called `time_step_kernel!` that dispatches on the value of its first argument (provided by `model.metadata`) to execute on the CPU or GPU. A `Model` constructor is now provided in which all important information can be input via keyword arguments. I favor this kind of design for fluids codes because I believe it improves the understand-ability of scripts, as it encourages explicit naming of parameters passed into the `Model` constructor. The output writing functionality has also been refactored slightly. However, many more changes will be made in the future so this is not consequential. I also reduced the computational burden of a few of the tests, and changed to factor of 2 resolutions since this makes sense for FFTs (though relatively unimportant for testing, I think should encourage users to use powers of 2 and make a habit of using them ourselves). A few more notes:. * We need tests for output writers, and the output writing functionality needs to be revamped; * The model constructor needs work; * The examples are outdated. We should probably reduce the number of examples until the code becomes more stable, and commit to maintaining the few that remain; * We should get rid of model metadata and simply include the 'architecture' as a type parameter of `Model`; * and so much more... Lots of work to do!",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/97:834,test,tests,834,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/97,3,['test'],"['testing', 'tests']"
Testability,"The main goal for this PR is to create a user-facing function to obtain grid spacings. EDIT:. The current behavior is that for every grid type there are functions `xspacings()`, `xspacing()`, `xnodes()` and `xnode()` (and similarly for y and z) that follow the pattern illustrated below:. ```julia; julia> grid = RectilinearGrid(size=(4, 4, 1), extent=(1, 1, 1)); 4×4×1 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.25; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.25; └── Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=1.0. julia> xnodes(grid, Center(), Center(), Face()); 4-element view(OffsetArray(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, -2:7), 1:4) with eltype Float64:; 0.125; 0.375; 0.625; 0.875. julia> xnode(2, 2, 2, grid, Center(), Center(), Face()); 0.375. julia> xspacings(grid, Center(), Center(), Face()); 0.25. julia> xspacing(1, 2, 3, grid, Center(), Center(), Face()); 0.25; ```. These functions also appropriately handle stretched coordinates. In addition, both `xspacings()` and `xnodes()` have a `with_halos` kwarg that controls whether of not halos points are included. Convenience functions with fewer arguments are also defined for the cases where that's possible. For example:. ```julia; julia> xnode(2,2,2, grid, Center(), Center(), Face()); 0.375. julia> xnode(2, grid, Center()); 0.375; ```. I added tests for these functions for every grid in a way that doesn't create new grid instantiations.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2842:1477,test,tests,1477,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842,1,['test'],['tests']
Testability,The main point of upgrading is to get rid of CUDA errors on the CPU and use `CUDAapi.has_cuda()` which replaces the `HAVE_CUDA` variable we've been using. This was originally in PR https://github.com/climate-machine/Oceananigans.jl/pull/378 (this PR is mostly cherry picked commits) but when it was merged @glwagner reported issues with forcing functions on the GPU. So now I've added a test that makes sure that forcing functions don't crash when used in a CPU or GPU model (one with and one without `const`).,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/388:387,test,test,387,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/388,1,['test'],['test']
Testability,"The main rationale for not having an immersed boundary conditions example was because we regarded it as an experimental feature, and didn't want to trip new users up (which is the opposite of the motivation #3). We could change our philosophy though. @tomchor you may not realize it, but you probably have the most experience with immersed boundary conditions. I think it's reasonable that nobody has added an example for these yet. I don't think there are any validation tests at all, or papers that use them, in constrast to much of the rest of the code. The fact that a major bug like the one found in #3142 still exists is a testament to the fact that these are unvalidated, and I think also validates our justification for not having an example yet.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3148#issuecomment-1599993028:472,test,tests,472,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3148#issuecomment-1599993028,2,['test'],"['testament', 'tests']"
Testability,The meridional velocity had the wrong sign in the vector rotation operator for switching from extrinsic to intrinsic coordinates in an `OrthogonalSphericalShellGrid`.; The test was also poorly designed (my bad) and conspired to hide the bug. This PR should fix the rotation and update the test to make sure everything is correct.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3744:172,test,test,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3744,2,['test'],['test']
Testability,The other issue that keeps coming up in many GPU tests has to do with conditional averaging when we have immersed boundaries... https://buildkite.com/clima/oceananigans/builds/8443#0182e818-e8be-4719-bda6-acbd51410754/33-445,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1230015146:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1230015146,1,['test'],['tests']
Testability,The other possibility which achieves the same goal (and which I'm fine with) is to enforce `.nc` in `filename` for `NetCDFOutputWriter`. We'd have to change a lot fewer tests for that too...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1098303653:169,test,tests,169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1098303653,1,['test'],['tests']
Testability,"The poisson solver tests have a mysterious property:. https://github.com/CliMA/Oceananigans.jl/blob/5fbd8cd20c5db8e9b11b6175984e7592a08fc874/test/test_poisson_solvers.jl#L17-L20. whereby `CenterField` is used for `Ru`, `Rv`, and `Rw` --- fields that should be located on faces, and have boundary conditions appropriate for velocity fields. When these fields are merely relocated to the correct location, the tests fail. Since by all accounts the Poisson solver is correct, there is probably something wrong with the tests. But we can't really be sure about either while the tests contain an obvious inconsistency. We should probably fix these tests. @ali-ramadhan, do you remember why we use `CenterField` for `Ru`, `Rv`, and `Rw`? The code was added in this PR: https://github.com/CliMA/Oceananigans.jl/pull/834/.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1867:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1867,6,['test'],"['test', 'tests']"
Testability,"The primary issue fixed here are actually the tests themselves, rather than the implementation. However this PR also makes a number of small improvements to the implementation, including a bug in which `recompute_safely` was implemented wrong (despite producing correct behavior, due to a ""cancellation of errors""). It looks like computations on `Faces` and along `Bounded` dimensions may not be possible with `BuoyancyField`. I will open an issue with an MWE. This is not a high-priority, because making such computations on boundaries correct in general really requires solving #971 ; otherwise we cannot guarantee that boundary conditions are correct (and they will often be wrong when averages are taken, as they commonly are during output). Relies on #1016 .",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1020:46,test,tests,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1020,1,['test'],['tests']
Testability,"The problem is this iteration:. ```julia; [ Info: Iter: 32, time: 300 ms , u-avg: 2.5442761423093008, window_start_time: 0.28, window_start_iteration: 30, previous_collection_time: 0.3, fetch_operand: true, interval: 0.03, previous_interval_stop_time: 0.27, collecting: true; ```. We should have `collecting: false`. That means `end_of_window`. https://github.com/CliMA/Oceananigans.jl/blob/406eb9c5c7a9fc86947747116128c8c1ba4c93d4/src/OutputWriters/windowed_time_average.jl#L270. spuriously returns `false`. https://github.com/CliMA/Oceananigans.jl/blob/406eb9c5c7a9fc86947747116128c8c1ba4c93d4/src/OutputWriters/windowed_time_average.jl#L93. So we want to look at `model.clock.time` and `sch.previous_interval_stop_time + sch.interval`. It does seem probable the issue is roundoff error. Probably `AveragedTimeInterval` needs to be updated to align more with the (new) criteria currently being used for `TimeInterval` eg we need a similar criteria as used for `next_actuation_time`:. https://github.com/CliMA/Oceananigans.jl/blob/406eb9c5c7a9fc86947747116128c8c1ba4c93d4/src/Utils/schedules.jl#L56-L61. Would be helpful to have a test too.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264548157:1132,test,test,1132,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264548157,1,['test'],['test']
Testability,"The problem was that the pressure solvers are not tested for `Flat`. It seems that the CPU case does the right thing but the GPU case does not. I will create an issue saying this needs to be addressed. In the mean time, @ali-ramadhan and I have added a warning to tell the user that the pressure solvers are not tested for flat. `#1556`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815841579:50,test,tested,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815841579,2,['test'],['tested']
Testability,The problems seen in the global simulation were actually fixed by #2774. The test was performed without updating the code to the latest version. I will close this PR,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2778#issuecomment-1279612571:77,test,test,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2778#issuecomment-1279612571,1,['test'],['test']
Testability,The reason why this test does not pass on the GPU for periodic boundary conditions in the longitudinal direction might have something to do with the synchronization of the halo filling (PR #1985 which we might want to merge soon),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2031#issuecomment-955473060:20,test,test,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2031#issuecomment-955473060,1,['test'],['test']
Testability,"The regression tests take a long time just because there are quite a few tests. We recently added many new hydrostatic regression tests (10-20? or more?) where there used to be just a handful. The solver tests have always been a bottleneck but I think there are a few new solvers being tested which probably increased the test length? I'm not sure why `time_stepping_2` would have increased (possibly that was always a bit slow). I definitely agree that CI time is a problem, which is why we opened #1962 to move the CI over to Caltech's central cluster and to split tests into a ""nightly"" category (running every night rather than on every PR / commit), and a per-commit category. However, we haven't made much progress on that PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009058943:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2139#issuecomment-1009058943,7,['test'],"['test', 'tested', 'tests']"
Testability,The results from running the new multithreading benchmark scripts are posted in #1861.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-884202297:48,benchmark,benchmark,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-884202297,1,['benchmark'],['benchmark']
Testability,The results in the table above were run on one `GPU` I gather. Are we planning to do some tests on 2 and 4 GPU's to see how fast they are?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1111655708:90,test,tests,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1111655708,1,['test'],['tests']
Testability,The results over at https://github.com/glwagner/multithreaded-stencils suggest that we could be leaving as much as 2x on the table for CPU performance by choosing a non-optimal group size for multithreading. This PR changes the group size on the CPU. @hennyg888 could be good to runs some benchmarks to see if this improves our CPU / multithreading situation!,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1902:289,benchmark,benchmarks,289,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1902,1,['benchmark'],['benchmarks']
Testability,"The second time-step is when `QuasiAdamsBashforth2` uses tendency information saved from the previous time-step. On the first time-step it's equivalent to a forward Euler scheme. > I know the differences are small, 8th decimal place or so, but on such a coarse grid should we be expecting the same answers?. Hardware differences can produce results that differ by something like `sqrt(eps(Float64))` I think. This is the tolerance we use for regression tests (but even those sometimes fail to pass on the GPU for some reason). Since the background buoyancy field has a linear gradient and your domain is bounded, can you try running the same simulation but explicitly resolving the background buoyancy field? (This could suggest that the issue has to do with `BackgroundField`...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815284094:453,test,tests,453,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815284094,1,['test'],['tests']
Testability,"The simple test code from @christophernhill, now successfully differentiating!. Not sure what the correct answer should be, so someone should check this. This probably makes sense to add a test somewhere at least, and also can be used as a starting point for future development. ```julia; using Enzyme; using Oceananigans; using KernelAbstractions: @index, @kernel; using Oceananigans.Utils: launch!; using Oceananigans.Architectures: device. using EnzymeCore. EnzymeCore.EnzymeRules.inactive_type(::Type{<:Oceananigans.Grids.AbstractGrid}) = true. arch=CPU(); FT=Float64. N = 100; topo = (Periodic, Flat, Flat); grid = RectilinearGrid(arch, FT, topology=topo, size=(N), halo=2, x=(-1, 1), y=(-1, 1), z=(-1, 1)). function del21d!(d2buf,fld::Field); g = fld.grid; Nx = g.Nx; for i=1:Nx; d2buf[i] = fld[i-1,1,1]+fld[i+1,1,1]-2fld[i,1,1]; end; return; end. @kernel function del21d_k!(d2buf_k,fld); i,j,k = @index(Global,NTuple); @inbounds d2buf_k[i,j,k] = fld[i-1,j,k]+fld[i+1,j,k]-2fld[i,j,k]; end. # 2. halo; function halo1d!(fld::Field); g = fld.grid; Hx = g.Hx; Nx = g.Nx; for i=1:Hx; fld[i-Hx,1,1]=fld[Nx-Hx+i,1,1]; fld[Nx+i,1,1]=fld[i ,1,1]; end; return nothing; end. # 3. simple model; function diffuse1d_model!(jcost,fld); grid=fld.grid; d2buf=ones(grid.Nx); arch=grid.architecture; d2buf_k = CenterField(grid); k=1.0; dt=0.1; nsteps=50; for i in 1:nsteps; del21d!(d2buf,fld); ### kernel style; event=launch!(arch,grid,:xyz,del21d_k!,d2buf_k,fld); for j in 1:fld.grid.Nx; d2buf[i] = d2buf_k[i]; end; for j in 1:fld.grid.Nx; fld[j,1,1] = fld[j,1,1] + k*d2buf[j]*dt; end; halo1d!(fld); end; jcost[1]=fld[15,1,1].*fld[15,1,1]; return nothing; end. c = CenterField(grid); c2 = CenterField(grid); f(x, y, z) = exp( -50((x-grid.xᶠᵃᵃ[1])/grid.Lx-0.5)^2 ); set!(c,f); halo1d!(c); set!(c2,f); halo1d!(c2); j=[0.]; diffuse1d_model!(j,c). bc=CenterField(grid); set!(c,f); set!(bc,0); j=[0.]; bj=[1.]; autodiff(Reverse, diffuse1d_model!,Duplicated(j,bj), Duplicated(c,bc) ). @show bj; @show bc; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3346:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3346,2,['test'],['test']
Testability,The test architectures are specified here:. https://github.com/CliMA/Oceananigans.jl/blob/9ffbee31bc5a2fa38dd93fa1594b94cddaebba8c/test/utils_for_runtests.jl#L6-L24. This was hard to find at first,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443344495:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443344495,2,['test'],['test']
Testability,"The test cases using a RegularRectilinearGrid and Flat. The dispatch seems to use the first one but I think we need to define the dispatch a bit differently, but I don't know how to do that. A subdispatch sounds attractive but don't know if that's really a thing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1499#issuecomment-804929696:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1499#issuecomment-804929696,1,['test'],['test']
Testability,"The test environment always runs with `--check-bounds=yes` so if you want to reproduce test results locally, you have to explicitly set `--check-bounds=yes`.; If the check bounds are not set, the `@inbounds` will bypass the problem. Anyways, those lines should not be called unless we specifically set `precompute_metrics=false` in the `LatitudeLongitudeGrid` constructor.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630455445:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630455445,2,['test'],['test']
Testability,"The test environment assumes `--check-bounds=yes` even when not explicitly specified. https://github.com/JuliaLang/Pkg.jl/blob/3ca88658d2bc23d877cc5829cdab2aa4dfdae564/src/Pkg.jl#L240-L278. Vector invariant should work with `Flat`, also, the error seems to stem from `div_𝐯u`, which is the flux form advection. I can take a look. You are right that maybe horizontally `Flat` does not work in general with lat-long",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630226850:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630226850,1,['test'],['test']
Testability,"The test in this PR passes on the CPU and fails on the GPU, so the intended result is achieved.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-872569410:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-872569410,1,['test'],['test']
Testability,"The test passes locally so hopefully will work on this go, otherwise I think this is ready?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1529918588:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1529918588,1,['test'],['test']
Testability,"The test that slowed down significantly is this. https://github.com/CliMA/Oceananigans.jl/blob/0163628e3dc810eed76440cc6ceef9870cc50f7f/test/test_matrix_poisson_solver.jl#L141-L148. which runs _only_ on the CPU. I don't know what's the problem with tartarus, but we could add; ```; if arch isa CPU; @info "" Testing Sparse Approximate Inverse..."". A = sprand(100, 100, 0.1); A = A + A' + 1I; A⁻¹ = sparse(inv(Array(A))); M = sparse_approximate_inverse(A, ε = 0.0, nzrel = size(A, 1)); ; @test all(Array(M) .≈ A⁻¹); end; ```; to disable the test on tartarus",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688,5,"['Test', 'test']","['Testing', 'test']"
Testability,"The test that’s failed says on buildkite that the client was lost and there’s no errors from Julia, I’m guessing if I can get them to rerun it might be fine since the other GPU tasks ran fine?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1237094696:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1237094696,1,['test'],['test']
Testability,The tests also fail with. ```; ERROR: The manifest file you are using was most likely generated by a different version of Julia and is not compatible with this Julia version; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1994#issuecomment-983989201:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1994#issuecomment-983989201,1,['test'],['tests']
Testability,The tests are failing :-(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013551552:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013551552,1,['test'],['tests']
Testability,The tests have sped up a lot (presumably because compile time is so much better with KA 0.9). This means that the docs build is a much bigger bottleneck. I think we're at 2h48m:. https://buildkite.com/clima/oceananigans/builds/11123#01879a9c-fde8-4691-a3f5-29ef6060e288. so we will see what we get down to.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3075#issuecomment-1515556985:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3075#issuecomment-1515556985,1,['test'],['tests']
Testability,The tests in ClimaOcean run the function and produced a bug. I linked [the log](https://buildkite.com/clima/climaocean-ci/builds/1264#01918d21-30e8-4d9c-9ee8-a220eb16eb28/202-514) above. . I can try to create an MWE if it helps.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2309544041:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2309544041,2,"['log', 'test']","['log', 'tests']"
Testability,"The tests in `test_cubed_spheres.jl` were not used (the file was not included). Therefore, the tests on vector rotation were not performed. This PR includes these tests in a new file on a coarse cubed sphere grid. ; @navidcy and @siddharthabishnu are there any tests in `test_cubed_spheres.jl` we want to salvage?. Another problem is the inclusion of `OrthogonalSphericalShellGrids` in the tests. This has caused a bit of problems because of circular dependency. . The inclusion of `OrthogonalSphericalShellGrids` in the tests is to have a non-trivial `OrthogonalSphericalShellGrid` in the tests. For the moment, however, it is used only in the vector rotation test (which was not performed anyways), which is covered by using a conformal cubed sphere. . For this reason thought to remove this dependency here since at the moment does not add anything, and I will open an issue to discuss which non-trivial OrthogonalSphericalShellGrid we want to build to test the OrthogonalSphericalShellGrid capabilities.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3881:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3881,9,['test'],"['test', 'tests']"
Testability,"The tests should run with `--check-bounds=yes` automatically. I think that when calling `Pkg.test()` the testing environment automatically activates the 0 optimization flag (`-O0`) and the bounds checking flag `--check-bounds=yes`, but I cannot find a reference at the moment.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3747#issuecomment-2318384101:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3747#issuecomment-2318384101,3,['test'],"['test', 'testing', 'tests']"
Testability,The tests use a lot of scalar indexing that's why they fail on the GPU:. https://buildkite.com/clima/oceananigans/builds/15604#018f40ed-787d-4e74-a5f4-ae1656fa3043/18-724. I think if we are comparing single numbers it makes sense to use `@allowscalar`. If we are comparing vectors it could be nice to figure out how to get the tests to run without `@allowscalar` since presumably this is possible.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2093986439:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2093986439,2,['test'],['tests']
Testability,"The tricky thing is that this PR is supposed to fix the issue. So we need a second PR with a test that fails, and then to cherry-pick that test into this PR (after confirming manually that the test fails for the ""right"" reason). Anybody is welcome to open this other PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-869771468:93,test,test,93,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-869771468,3,['test'],['test']
Testability,"There are a couple of issues with reductions on a fts.; Given the following field time series; ```julia; grid = RectilinearGrid(size = (1, 1, 1), extent = (1, 1, 1)); fts = FieldTimeSeries{Center, Center, Center}(grid, 1:10; backend = OnDisk(), path = ""./test.jld2"", name = ""T""); f = CenterField(grid). for i in 1:10; set!(f, i); set!(fts, f, i); end; ```. ```julia; julia> sum(f; dims = 1); ERROR: UndefVarError: `filltype` not defined; Stacktrace:; [1] sum(f::Function, fts::FieldTimeSeries{…}; dims::Int64, kw::@Kwargs{}); @ Oceananigans.OutputReaders ~/development/Oceananigans.jl/src/OutputReaders/field_time_series_reductions.jl:30; [2] sum(fts::FieldTimeSeries{…}; kw::@Kwargs{…}); @ Oceananigans.OutputReaders ~/development/Oceananigans.jl/src/OutputReaders/field_time_series_reductions.jl:38; [3] top-level scope; @ REPL[19]:1; Some type information was truncated. Use `show(err)` to see complete types.; ```; Also, I think that the index for the reduction here is wrong, `i` instead of `n`; https://github.com/CliMA/Oceananigans.jl/blob/3c95e7ee6772a2597e206ae35202500be1ef5b32/src/OutputReaders/field_time_series_reductions.jl#L42-L45",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3752:255,test,test,255,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3752,1,['test'],['test']
Testability,"There are a lot of new instances of `@allowscalar`, but rather than adding new instances we should be refactoring the tests so they don't appear. When we find that we have to use `@allowscalar`, it often indicates that our `Field` infrastructure is somehow deficient / doesn't support necessary operations, which causes us to resort to indexing and other syntax that requires `@allowscalar`. @navidcy @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411314641:118,test,tests,118,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411314641,1,['test'],['tests']
Testability,"There are few tests for this functionality, but it's crucial for `OceanTurbulenceParameterEstimation.jl`. We should add more tests (especially for slice ensemble models which I think have zero tests now). cc @navidcy",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2219:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2219,3,['test'],['tests']
Testability,"There is a fair amount of scalar iteration right now, largely I think because we have array-like objects (Fields, and friends) that lack fully-featured broadcasting capabilities. This means writing something like `a .== 2` triggers scalar iteration on the GPU because it hits Base broadcasting. We _can_ fix the problem by fleshing out broadcasting a bit so `a .== 2` works ""correctly"" / sensibly, but we haven't prioritized it (we also didn't have broadcasting at all for Field until a month or two ago). Possibly, if changing a global via `allowscalar(true)` were not available we would have been forced to address this deficiency in our Field abstraction sooner. So that could have been a good thing depending on your perspective. It did allow us to sweep some things under the hood. On the other hand I don't think we have any performance issues; scalar iteration is only used on very small arrays for testing where we are completely dominated by compile times.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-864145884:906,test,testing,906,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-864145884,1,['test'],['testing']
Testability,"There is a test for immersed boundary inside `test_implicit_free_surface.jl` but it seems to be *trivially passing* (see, e.g., the [log](https://buildkite.com/clima/oceananigans/builds/8449#0182eb0d-74d3-440e-92a7-eb0ffecfb042/25-734) from tests run on `main`). One problem was that `set_simple_divergent_velocity!` function defined at; https://github.com/CliMA/Oceananigans.jl/blob/af21542ba01afe92e7fc4de6251dec55ed5182c7/test/test_implicit_free_surface_solver.jl#L17-L35; was setting a non-zero `u` velocity in the center of the domain at `k = 1`, but that was inside the immersed boundary. I changed the [`set_simple_divergent_velocity!`](https://github.com/CliMA/Oceananigans.jl/blob/f585ef8a3ccd80d1418d9fed5d573ed7d3ecb4d3/test/test_implicit_free_surface_solver.jl#L17-L46) function to address that. However, still there is an issue... I managed to pinpoint it down to the step:. https://github.com/CliMA/Oceananigans.jl/blob/f585ef8a3ccd80d1418d9fed5d573ed7d3ecb4d3/src/Models/HydrostaticFreeSurfaceModels/implicit_free_surface.jl#L140. Here's a demonstration... (not a MWE). I have a model with non-zero `u` velocity:. ```; julia> model.velocities.u; 129×1×5 Field{Face, Center, Center} on ImmersedBoundaryGrid on CPU; ├── grid: 128×1×5 ImmersedBoundaryGrid{Float64, Bounded, Periodic, Bounded} on CPU with 3×3×3 halo; ├── boundary conditions: FieldBoundaryConditions; │ └── west: Open, east: Open, south: Periodic, north: Periodic, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux; └── data: 135×7×11 OffsetArray(::Array{Float64, 3}, -2:132, -2:4, -2:8) with eltype Float64 with indices -2:132×-2:4×-2:8; └── max=0.1, min=0.0, mean=0.000159236. julia> model.velocities.u[imid, 1, 3]; 0.1; ```. ```Julia; julia> ∫ᶻQ = model.free_surface.barotropic_volume_flux; NamedTuple with 2 Fields on 128×1×5 ImmersedBoundaryGrid{Float64, Bounded, Periodic, Bounded} on CPU with 3×3×3 halo:; ├── u: 129×1×1 Field{Face, Center, Nothing} reduced over dims = (3,) on ImmersedBoundaryGrid on CPU; └── v: ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2723:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2723,5,"['log', 'test']","['log', 'test', 'tests']"
Testability,"There is an error in `initailize-gpu-environment`, copied below, which I don't believe comes from this change. Can someone reset the tests? I don't believe I have the authority to do that. ```; ERROR: Unable to automatically install 'CUDNN' from '/data5/glwagner/.julia-2937/packages/CUDA/mVgLI/Artifacts.toml';  ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866783261:133,test,tests,133,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866783261,1,['test'],['tests']
Testability,There is no forcing and I created a branch that has the one line that specifies `WENO5` as the advection scheme. . `fjp/benchmark-incompressiblemodel-WENO5`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869738802:120,benchmark,benchmark-incompressiblemodel-,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869738802,1,['benchmark'],['benchmark-incompressiblemodel-']
Testability,"There is still a problem. This time with the vector size:. > ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI ~/.julia/packages/MPI/08SPr/deps/deps.jl:15; [NVBLAS] No Gpu available; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [ Info: Oceananigans will use 16 threads; ERROR: LoadError: DimensionMismatch(""arrays could not be broadcast to a common size; got a dimension with lengths 129 and 128""); Stacktrace:; [1] _bcs1; @ ./broadcast.jl:501 [inlined]; [2] _bcs (repeats 3 times); @ ./broadcast.jl:495 [inlined]; [3] broadcast_shape; @ ./broadcast.jl:489 [inlined]; [4] combine_axes; @ ./broadcast.jl:484 [inlined]; [5] instantiate; @ ./broadcast.jl:266 [inlined]; [6] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(*), Tuple{Array{Float64, 3}, Array{Float64, 3}}}); @ Base.Broadcast ./broadcast.jl:883; [7] top-level scope; @ /lustre/scratch5/.mdt0/fspereira/OCEANANIGANS/test/case13/c16_128_128m.jl:200. Also, shouldn't we set v (last line below, I added the commented v's):. `Random.seed!(1414). T = model.tracers.T; u, v, w = model.velocities. x, y, z = nodes(T, reshape=true); Lz = model.grid.Lz. shape = @. z / Lz * (1 + z / Lz); ΞT = randn(size(T)...) .* shape; Ξu = randn(size(u)...) .* shape; #Ξv = randn(size(v)...) .* shape; Ξw = randn(size(w)...) .* shape. Tᵢ = @. 20 + dTdz * z + dTdz * Lz * 1e-6 * ΞT; uᵢ = @. sqrt(abs(Qᵘ)) * 1e-3 * Ξu; #vᵢ = @. sqrt(abs(Qᵘ)) * 1e-3 * Ξv; wᵢ = @. sqrt(abs(Qᵘ)) * 1e-3 * Ξw. #set!(model, u=uᵢ, v=vᵢ, w=wᵢ, T=Tᵢ, S=35); set!(model, u=uᵢ, w=wᵢ, T=Tᵢ, S=35)`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268613743:1257,test,test,1257,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268613743,1,['test'],['test']
Testability,There seems to be a pattern with the failing tests 🤔 🤔 🤔 🤔 🤔 @simone-silvestri,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2568#issuecomment-1133527273:45,test,tests,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2568#issuecomment-1133527273,1,['test'],['tests']
Testability,There was a bug in some recent updates to KernelAbstractions.jl that caused Enzyme to break on broadcasting arrays in Oceananigans. This PR includes a test to make sure this bug doesn't occur again.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598:151,test,test,151,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598,1,['test'],['test']
Testability,There was a typo in that we should have `model.background_fields.velocities.u`. I think now the tests will pass. Is there anything else that people might want here?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-877465490:96,test,tests,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-877465490,1,['test'],['tests']
Testability,There was some power interruption at MIT. Now it's fixed but probably someone has to go turn on Sverdrup (where the GPU tests run on).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2694#issuecomment-1216054364:120,test,tests,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2694#issuecomment-1216054364,1,['test'],['tests']
Testability,"There's a disadvantage if we need to use `print` for an application other than the one in #2098. Then this PR creates work for us in the future. We can't really predict whether that will occur (but it could come up in the context of log-file creation... ?). I think the purpose of `print` is to remove ""decorations"" and ""Julia-specific details"", rather than important numerical information such as whether the WENO5 coefficients are grid-stretching-dependent:. ```julia; help?> print; search: print println printstyled sprint isprint prevind parentindices precision. print([io::IO], xs...). Write to io (or to the default output stream stdout if io is not given) a canonical; (un-decorated) text representation. The representation used by print includes minimal; formatting and tries to avoid Julia-specific details. print falls back to calling show, so most types should just define show. Define print if; your type has a separate ""plain"" representation. For example, show displays strings with; quotes, and print displays strings without quotes. string returns the output of print as a string. Examples; ≡≡≡≡≡≡≡≡≡≡. julia> print(""Hello World!""); Hello World!; julia> io = IOBuffer();. julia> print(io, ""Hello"", ' ', :World!). julia> String(take!(io)); ""Hello World!""; ```. Here, it looks like `print` returns the ""base name"" of the advection scheme's type, eg similar to `summary(scheme) = string(typeof(scheme))`, but throwing away type parameter information:. ```julia; help?> summary; search: summary MethodSummary. summary(io::IO, x); str = summary(x). Print to a stream io, or return a string str, giving a brief description of a value. By; default returns string(typeof(x)), e.g. Int64. For arrays, returns a string of size and type info, e.g. 10-element Array{Int64,1}. Examples; ≡≡≡≡≡≡≡≡≡≡. julia> summary(1); ""Int64"". julia> summary(zeros(2)); ""2-element Vector{Float64}""; ```. @navidcy suggested `string(typeof(string).name.wrapper)` which seems to do the job of removing type parameter in",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986784328:233,log,log-file,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2099#issuecomment-986784328,1,['log'],['log-file']
Testability,There's a tradeoff between taking too few time-steps (not enough time for subtle differences to manifest above the noise floor) and taking too many time steps. Perhaps just halving the time-steps for this test will make it more robust but hopefully still useful,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430090495:205,test,test,205,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430090495,1,['test'],['test']
Testability,"There's been a bunch of interest in using Oceananigans for physical-biogeochemical interaction studies --- problems where systems of reacting tracers that represent either oceanic biological systems, chemical reactions and cycles, or both interact with turbulence and fluid dynamics simulated by Oceananigans. In order to organize the community's work (and also to support some work at Clima on biogeochemistry in Oceananigans), I propose that we create a new package that interfaces with `Oceananigans` --- could it be... `Biogeoceananigans.jl`... ? --- to:. 1. Facilitate sharing code, and collaboration on implementation and testing of biogeochemistry models to be used in Oceananigans simulations; 2. Develop documentation and a suite of examples to illustrate usage, setup, and analysis of numerical experiments with biogeochemistry . To achieve either of these there's no question we need a _particular place_ to collaborate on re-useable code (rather than working independently). But also, I think the Oceananigans.jl repository is not the best repo to use to achieve the above goals, because it's big and complex, which might make it harder for potential developers to contribute and see their place. I also think it would slow development down, because, for example, we'll have to make sure all unit tests for differential operators pass before we can add a new biogeochemistry model implementation. I think development might be faster and more accessible if we do it in a different repo. There are also some details to discuss regarding implementation. Oceananigans' design already supports reacting systems via `Forcing`. Oceananigans `Forcing` are arbitrary functions of spatial coordinates, time, prognostic model fields, and forcing function parameters --- or alternatively, indices `i, j, k`, `grid`, `clock`, and a NamedTuple of model fields that can be indexed into arbitrarily. @iuryt and @syou83syou83 (and perhaps others) have experimented in this direction. However, I think we mi",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2512:628,test,testing,628,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2512,1,['test'],['testing']
Testability,"Thermal bubble regression test now works again. Dumb leftover mistake from #228. Inb4 we should have unified the poisson solvers. Love it when you're off by 10^50:. Before:; ```; [ Info: Δu: min=-3.55764e+54, max=3.55764e+54, mean=-2.0648e+35, absmean=6.04154e+52, std=2.66887e+53; [ Info: Δv: min=-3.55764e+54, max=3.55764e+54, mean=2.57926e+35, absmean=6.04154e+52, std=2.66887e+53; [ Info: Δw: min=-8.03359e+54, max=5.86492e+54, mean=-8.09207e+35, absmean=7.70596e+52, std=3.93725e+53; [ Info: ΔT: min=-9.12137e+52, max=3.63655e+52, mean=1.50945e+34, absmean=3.54008e+50, std=3.58814e+51; [ Info: ΔS: min=-3.2411e+53, max=1.29218e+53, mean=2.84495e+34, absmean=1.2579e+51, std=1.27498e+52; ```. After:; ```; [ Info: Δu: min=-1.20346e-17, max=1.11131e-17, mean=-3.21903e-22, absmean=6.46707e-19, std=1.21175e-18; [ Info: Δv: min=-1.8052e-17, max=1.07099e-17, mean=-3.80102e-22, absmean=6.51696e-19, std=1.25463e-18; [ Info: Δw: min=-3.97428e-17, max=3.5345e-17, mean=4.25729e-21, absmean=3.64351e-18, std=5.66798e-18; [ Info: ΔT: min=-1.77636e-15, max=1.77636e-15, mean=-4.77049e-18, absmean=1.95156e-17, std=1.86152e-16; [ Info: ΔS: min=0, max=0, mean=0, absmean=0, std=0; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/243:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/243,1,['test'],['test']
Testability,Thermal wind example/test.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/179:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/179,1,['test'],['test']
Testability,"These are all the lines in the benchmark scripts that I can find where a pretty table and html file is created with a title and filename containing "">"".; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_advection_schemes.jl#L39; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_equations_of_state.jl#L41; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_fft_based_poisson_solvers.jl#L41; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_fourier_tridiagonal_poisson_solver.jl#L41; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_incompressible_model.jl#L39; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_lagrangian_particle_tracking.jl#L49; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_shallow_water_model.jl#L41; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_time_steppers.jl#L39; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_topologies.jl#L39; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_tracers.jl#L64; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_turbulence_closures.jl#L46; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_vertically_stretched_incompressible_model.jl#L39",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1672#issuecomment-844283662:31,benchmark,benchmark,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1672#issuecomment-844283662,13,['benchmark'],['benchmark']
Testability,"These are definitely cool ideas for progress statements!. I see logging as being much more general though. It should also be used when printing progress statements, but I think it's especially useful to have `@debug` messages in certain places to help with debugging. And maybe `@info` messages so the user knows what the model is doing. It could get noisy if we get carried away with them but a user staring at a blank screen for 3 minutes might not know that the GPU stuff is just compiling in the background. More responsive software feels more user-friendly.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-541418998:64,log,logging,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-541418998,1,['log'],['logging']
Testability,"These are the first results from a weak scaling. I have not modified how the speedup is changed but looking at the mean times should be informative. As we add the number of cores, each core has the same number of degrees of freedom. Ideally, the total time should not change. There is a big difference going from 1 to 2, but after that the difference does not seem nearly as bad. @ali-ramadhan and I are talking about how to profile this but if anyone has any thoughts or suggestions, we are happy to hear them!. ```; Shallow water model weak scaling benchmark; ┌──────────────┬───────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │; ├──────────────┼───────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ (4096, 256) │ 1 │ 523.845 ms │ 529.054 ms │ 528.660 ms │ 532.950 ms │ 391.83 KiB │ 2719 │; │ (4096, 512) │ 2 │ 1.014 s │ 1.015 s │ 1.017 s │ 1.023 s │ 371.58 KiB │ 3151 │; │ (4096, 1024) │ 4 │ 1.210 s │ 1.216 s │ 1.219 s │ 1.238 s │ 371.72 KiB │ 3160 │; │ (4096, 2048) │ 8 │ 1.109 s │ 1.124 s │ 1.180 s │ 1.296 s │ 371.72 KiB │ 3160 │; │ (4096, 4096) │ 16 │ 1.259 s │ 1.307 s │ 1.302 s │ 1.337 s │ 371.72 KiB │ 3160 │; └──────────────┴───────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; [2021/03/15 10:34:57.910] INFO Writing Shallow_water_model_weak_scaling_benchmark.html...; Shallow water model weak scaling speedup; ┌──────────────┬───────┬──────────┬──────────┬─────────┐; │ size │ ranks │ speedup │ memory │ allocs │; ├──────────────┼───────┼──────────┼──────────┼─────────┤; │ (4096, 256) │ 1 │ 1.0 │ 1.0 │ 1.0 │; │ (4096, 512) │ 2 │ 0.521109 │ 0.948319 │ 1.15888 │; │ (4096, 1024) │ 4 │ 0.434976 │ 0.948678 │ 1.16219 │; │ (4096, 2048) │ 8 │ 0.47074 │ 0.948678 │ 1.16219 │; │ (4096, 4096) │ 16 │ 0.40486 │ 0.948678 │ 1.16219 │; └──────────────┴───────┴──────────┴──────────┴─────────┘; [2021/03/15 10:34:58.558] INFO Writing Shallow_w",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799473915:551,benchmark,benchmark,551,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799473915,1,['benchmark'],['benchmark']
Testability,"These benchmarks:. https://github.com/CliMA/Oceananigans.jl/pull/2412. show a factor of 2 speed up on the CPU. In principle, the FFT is faster than a matrix multiply which may explain it? Or, perhaps the benchmarks test the wrong thing so we should re-run them. As explained on that PR, some performance is left on the table, because the fastest combination would use an FFT-based preconditioner with a matrix multiply to compute the LHS.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172613179:6,benchmark,benchmarks,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172613179,3,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"These lines do not work for `ImmersedBoundaryGrid`. https://github.com/CliMA/Oceananigans.jl/blob/be00e364f9dcd712b3d0c3d48e32b94b181a02fc/src/OutputWriters/netcdf_output_writer.jl#L391-L395. Changing the first line to; ```Julia; if model.grid isa AbstractRectilinearGrid || model.grid isa ImmersedBoundaryGrid{<:Any,<:Any,<:Any,<:Any,<:AbstractRectilinearGrid}; ```; temporarily fixed my problem. Here is the script that I use for testing this issue:; ```Julia; using Oceananigans. underlying_grid = RectilinearGrid(; size=(32, 32, 16),; x=(-3.0, 3.0), y=(-3.0, 3.0), z=(0.0, 1.0),; topology=(Periodic, Periodic, Bounded),; halo=(4, 4, 4),; ). hill(x::Real, y::Real) = 0.1 + 0.1 * exp(-x^2 - y^2). grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(hill)). model = NonhydrostaticModel(;; grid,; advection = WENO(),; ). simulation = Oceananigans.Simulation(model; Δt = 1.0, stop_time = 100.0). fields = model.velocities. simulation.output_writers[:fields] = NetCDFOutputWriter(; model,; fields,; filename = ""output.nc"",; schedule = Oceananigans.TimeInterval(10.0),; ). run!(simulation); ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3069:432,test,testing,432,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3069,1,['test'],['testing']
Testability,"These lines multiply `h` (a field at ccc) with objects at `fcc` and `cfc` respectively. https://github.com/CliMA/Oceananigans.jl/blob/bcc34f07b3f949ea6fb34c7814f4b856d24924c2/src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl#L16-L17. This doesn't look correct, but if there is some logic that makes it correct, it should be documented with a comment at least. I think if the bathymetric height is defined at cell centers, then the bathymetric height at a cell interface might need to be defined as the maximum of the height of the adjacent cells.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3051:296,log,logic,296,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3051,1,['log'],['logic']
Testability,"These lines should not be there and at the least lower the accuracy of calculations on stretched grids. We need tests that the metrics and grid geometry are correct for stretched grids (eg all the cell spacings added up gives the total domain size; cell centers are located halfway between cell interfaces, etc). . Not sure why these lines are there but it may have been necessary due to a serious bug with the vertically stretched Poisson solver that was fixed in https://github.com/CliMA/Oceananigans.jl/pull/1541. I'm not sure.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1755:112,test,tests,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1755,1,['test'],['tests']
Testability,"These lines:. ```julia; φ₁, φ₂ = get_domain_extent(latitude, Nφ) ; @assert -90 <= φ₁ <= φ₂ <= 90 ; ; (φ₁ == -90 || φ₂ == 90) && ; @warn ""Are you sure you want to use a latitude-longitude grid with a grid point at the pole?"" ; ```. should be outside the if statement.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3241#issuecomment-1697308462:68,assert,assert,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3241#issuecomment-1697308462,1,['assert'],['assert']
Testability,These test failures are just testing problems not actual code problems right?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3508#issuecomment-2004506511:6,test,test,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3508#issuecomment-2004506511,2,['test'],"['test', 'testing']"
Testability,"These tests aren't passing, and I have no clue why. The error is:. ```; ERROR: `Enzyme=7da242da-08ed-463a-9acd-ee780be4f1d9` depends on `ChainRulesCore=d360d2e6-b24c-11e9-a2a3-2a2ae2dbcce4`, but no such entry exists in the manifest.; ```. But I never changed anything related to that. Does anyone know what's going on?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2221669095:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2221669095,1,['test'],['tests']
Testability,These tests still fail: https://buildkite.com/clima/oceananigans/builds/13791#018c8e8a-a41b-43de-a387-49157d3ccc32/6-46,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867997015:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867997015,1,['test'],['tests']
Testability,These two tests should be failing... https://github.com/CliMA/Oceananigans.jl/blob/77693f7d5dad1e5f8a90c13a2dcd13b8db2e1f71/test/test_rectilinear_grid.jl#L146-L147. Wait. Is `test_rectilinear_grid.jl` ever being called in tests? I'm bit confused...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-966085231:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-966085231,3,['test'],"['test', 'tests']"
Testability,"They are already there, https://github.com/CliMA/Oceananigans.jl/blob/7291ada057afc9cfcefb2b6e9351cff8782d9217/test/test_hydrostatic_regression.jl#L80; we have to merge in `OceananaigansArtifacts` the branch and correct main to download from `OceananaigansArtifacts#main`. I ll open a PR there",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3335#issuecomment-1791152312:111,test,test,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3335#issuecomment-1791152312,1,['test'],['test']
Testability,"Think so. GPU tests passed, only docs are failing now (but I think they just failed to start... I'm restarting!)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1608831536:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1608831536,1,['test'],['tests']
Testability,"Thinking about this more, I think it would make sense to make an even more radical change. I think we should add `diagnostics`, `output_writers`, and `clock` to `Simulation`. . The `time_step!` function then performs a single time-step, whereas to run a simulation one should write `run!(simulation)`, which handles diagnostics, output writing, adaptive time-stepping, and logging in an integrated way. This orthogonalizes the design a bit: `diagnostics` and `output_writers` are not really aspects of a ""model"", if we use a narrow interpretation of a model as a discrete representation of a physical system. A single physical system might conceivably be associated with a wide range of disparate diagnostics and output, depending on what kind of science is being done. I think scripts become clearer. The user writes. ```julia; model = Model(; model_parameters...). simulation = Simulation(model; simulation_parameters...). simulation.diagnostics[:diag] = # something. run!(simulation); ```. As an example to illustrate why `Simulation` is orthogonal to `Model`, here's a possible clear and coherent usage of this separation:. ```julia; model = Model(; model_parameters...). set!(model; first_interesting_initial_condition...). first_simulation = Simulation(model, first_simulation_parameters...); first_simulation[:diag] = diag_specific_to_first_simulation; run!(first_simulation). set!(model; second_interesting_initial_condition...) # same physical model, but different starting initial condition... no new memory allocated, no recompilation --- fast. second_simulation = Simulation(model, second_simulation_parameters...); second_simulation[:diag] = diag_specific_to_second_simulation; run!(second_simulation); ```. We can use `run!(simulation, time_steps=nsteps)` to allow hand-coded user loops that achieve a functionality similar to what we have now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/447#issuecomment-542294442:373,log,logging,373,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/447#issuecomment-542294442,1,['log'],['logging']
Testability,"This ""PR"" adapts one of the CPU Poisson solver tests to the GPU. The test fails. . Hopefully there is a bug in the test. If so, it should be fixed so that we have a valid test for the GPU Poisson solver. I suggest we use just one solver for both the CPU and the GPU --- unifying those could be in the scope of this PR. It'll also be nice to have one function that returns the (real) solution to the Poisson equation, given complex input. . Our algorithm (for Periodic-Periodic-Neumann --- this would not be the case for Periodic-Periodic-Periodic) requires one temporary storage variable (which stores a permuted, complex version of the solution) that should be part of the `PPNPoissonSolver` struct (see what I did there?)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/238:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/238,4,['test'],"['test', 'tests']"
Testability,"This PR ""enhances"" `JLD2OutputWriter` so it first _checks_ whether an iteration number exists in the file it's about to save to. If the iteration number does exist, it emits warning, but does not fail. Previously, it would fail. This helps when restoring a simulation from a checkpoint when output is saved at higher frequency than the simulation is checkpointed. TODO: probably test makes sense.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2537:379,test,test,379,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2537,1,['test'],['test']
Testability,"This PR (pair programmed with @francispoulin) allows users to select the `timestepper` and adds support for `forcing` functions as part of the `ShallowWaterModel`. We also added some simple tests. We also added a `shallow_water_model_forcing` function that should readily generalize to `IncompressibleModel` while being shorter, so we can consider using it to replace `model_forcing`. Resolves #1284",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1291:190,test,tests,190,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1291,1,['test'],['tests']
Testability,"This PR (part 3/3) upgrades the field abstraction so fields store their own boundary conditions. This simplifies the model boundary condition hierarchy and generalizes the field and boundary conditions abstractions so they can be used for a compressible model (and any other model we come up with in the future). All future fields will have boundary conditions so PRs like #601 won't be necessary again. The only change in user interface is that you pass a named tuple to the model constructor now instead of an instance of `SolutionBoundaryConditions`. This also works for LES diffusivities so the amount of convoluted scripting gymnastics is much reduced (see test from #601). Setting a diffusivity BC is now almost as easy as a tracer BC. ```julia; grid = RegularCartesianGrid(FT, size=(16, 16, 16), length=(1, 1, 1)). buoyancy_bcs = TracerBoundaryConditions(grid, bottom=BoundaryCondition(Gradient, bz)); κₑ_bcs = DiffusivityBoundaryConditions(grid, bottom=BoundaryCondition(Value, κ₀)); model_bcs = (b=buoyancy_bcs, κₑ=(b=κₑ_bcs,)). model = IncompressibleModel(; grid=grid, architecture=arch, float_type=FT, tracers=:b, buoyancy=BuoyancyTracer(),; closure=AnisotropicMinimumDissipation(), boundary_conditions=model_bcs; ); ```. Internally: No surprise, this change ended up being pretty invasive. But note that we now have a more flexible and easier to use package with fewer lines of code!. I'm happy to discuss and iterate over the choices that were made in this PR. But glad that I was able to make these changes. Development of the compressible model can continue based on this branch. Changes:; 1. Fields has a new property: `field.boundary_conditions`. 2. Better pretty printing for fields:; ```; Field located at (Cell, Cell, Cell); ├── data: OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}}, size: (18, 18, 18); ├── grid: RegularCartesianGrid{Float64, Periodic, Periodic, Bounded}(Nx=16, Ny=16, Nz=16); └── boundary conditions: x=(west=Periodic, east=Periodic), y=(south=Periodic, nor",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/631:662,test,test,662,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/631,1,['test'],['test']
Testability,"This PR _finally_ revives the half-baked `VerticallyStretchedCartesianGrid` implementation that's been living in Oceananigans.jl for over a year. It also formalizes the `FourierTridiagonalPoissonSolver` that's been living in `test_solvers.jl` for a while as well. I re-ran the regression tests using a `VerticallyStretchedCartesianGrid` with constant spacing as a sanity check and they pass on the CPU which is good and helped uncover some functions that needed generalization. There's still quite a bit to do and test so maybe we should merge this PR after a bit of polish and continue developing and testing the `VerticallyStretchedCartesianGrid` in subsequent smaller PRs?. TODO off the top of my head:; 1. Adapt `VerticallyStretchedCartesianGrid` to work in GPU kernels. It has some offset arrays.; 2. Test the `FourierTridiagonalPoissonSolver` for other/all topologies.; 3. Add some dynamics tests?; 4. Validation experiment: Stratified Couette flow (Vreugdenhil & Taylor, 2018).; 5. Benchmarks! The xy FFT + z Tridiagonal solver might be faster than xyz FFT. Resolves #471. And of course, no PR is complete without eye candy (had to use matplotlib for irregular heatmaps):. https://user-images.githubusercontent.com/20099589/107367287-1fc7b400-6aad-11eb-945f-1fb2694392b2.mp4",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1348:288,test,tests,288,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1348,6,"['Benchmark', 'Test', 'test']","['Benchmarks', 'Test', 'test', 'testing', 'tests']"
Testability,"This PR adapts the analytical pressure solver test to an explicit test for second-order convergence of the pressure solver in all configurations. The triply periodic solver currently throws an error if we try to construct it, so I'm skipping that test.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/704:46,test,test,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/704,3,['test'],['test']
Testability,This PR adapts the hydrostatic regression tests to be run in distributed mode. an important step in this direction is to allow array partitioning under the hood in `set!` if the array size coincides with the global size of the field (implemented here). a more important step is to remove the topology from the `Distributed` architecture (it should not know anything about topology which is a grid property),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3328:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3328,1,['test'],['tests']
Testability,"This PR adds MPI waits after sending and receiving all the halos and overlaps halo communication (thanks @christophernhill!). I was initially worried that overlapping halo communication would cause the corner halos to become wrong (I'm not even sure if the corner halos should be filled via communication?). But running the MPI example the movie looked fine so I'll keep the overlapping for now. Scaling benchmarks are better now! Results seem quite machine-dependent but on Satori for weak scaling I'm seeing >90% efficiency up to 16 ranks then ~85% efficiency on 32 ranks. Strong scaling seems noisier/a bit worse for some reason (including a 104% efficiency hit haha) but definitely better than before. # Weak scaling (shallow water). ```; Shallow water model weak scaling benchmark; ┌──────────────┬─────────┬─────────┬─────────┬─────────┬─────────┬────────────┬────────┬─────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├──────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼────────────┼────────┼─────────┤; │ (8192, 256) │ (1, 1) │ 1.188 s │ 1.190 s │ 1.190 s │ 1.193 s │ 416.81 KiB │ 2665 │ 5 │; │ (8192, 512) │ (1, 2) │ 1.187 s │ 1.192 s │ 1.192 s │ 1.200 s │ 408.80 KiB │ 3178 │ 10 │; │ (8192, 1024) │ (1, 4) │ 1.204 s │ 1.206 s │ 1.206 s │ 1.212 s │ 408.80 KiB │ 3178 │ 20 │; │ (8192, 2048) │ (1, 8) │ 1.220 s │ 1.223 s │ 1.223 s │ 1.230 s │ 408.80 KiB │ 3178 │ 40 │; │ (8192, 4096) │ (1, 16) │ 1.281 s │ 1.283 s │ 1.284 s │ 1.291 s │ 408.80 KiB │ 3178 │ 64 │; │ (8192, 8192) │ (1, 32) │ 1.347 s │ 1.417 s │ 1.424 s │ 1.497 s │ 408.80 KiB │ 3178 │ 128 │; └──────────────┴─────────┴─────────┴─────────┴─────────┴─────────┴────────────┴────────┴─────────┘; ```. ```; Shallow water model weak scaling speedup; ┌──────────────┬─────────┬──────────┬────────────┬──────────┬────────┐; │ size │ ranks │ slowdown │ efficiency │ memory │ allocs │; ├──────────────┼─────────┼──────────┼────────────┼──────────┼────────┤; │ (8192, 256) │ (1, 1) │ 1.0 │ 1",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1505:404,benchmark,benchmarks,404,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1505,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,This PR adds `Oceananigans.Diagnostics.WindowedTimeAverage` for computing the average of a quantity or 'kernel' over a specified time window. The design of `WindowedTimeAverage` is discussed extensively on #501 . . This PR only implements the basic functionality needed to compute `WindowedTimeAverage`. A streamlined user interface through `JLD2OutputWriter` and `NetCDFOutputWriter` will be implemented in a future PR. Todo:. - [x] tests. Resolves #501,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/856:434,test,tests,434,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/856,1,['test'],['tests']
Testability,"This PR adds `boundary_conditions` to `ComputedField`. I added a new `DefaultComputedFieldBoundaryCondition`, because `DefaultBoundaryCondition` specifies an `ImpenetrableBoundaryCondition` when a field is located on `Face` and the direction is `Bounded`. But I think this is only appropriate for velocities and is not what we want in general. Arguably, we should change `DefaultBoundaryCondition` instead and implement special behavior for velocity fields... Strictly speaking the boundary conditions are only ""correct"" in periodic directions, since we have no way of evaluating what the boundary conditions need to be in `Bounded` directions. Should we use a `nothing` default for `Bounded` directions in all cases for `ComputedField`?. Current tests pass, but I still need to add tests to make sure that halos are filled properly. cc @tomchor",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1340:747,test,tests,747,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1340,2,['test'],['tests']
Testability,"This PR adds a `FieldSlicer` that slices fields on indices prior to output. This PR is a work in progress because we at least need unit tests:. - [x] add unit tests for `FieldSlicer`. It probably also make sense to test integration with both `JLD2OutputWriter` and `WindowedTimeAverage`:. - [x] add tests for integration with `JLD2OutputWriter` and `WindowedTimeAverage`. In the future, we would like to permit slicing at physical locations (rather than indices). This can be accomodated in the constructor for `FieldSlicer` in various ways (outside the scope of this PR). We would also like the ability to interpolate to locations. For this we want something like `InterpolatingFieldSlicer`. Comments and suggestions for the API are welcome.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/932:136,test,tests,136,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/932,4,['test'],"['test', 'tests']"
Testability,"This PR adds a `TurbulenceClosures` module to `Oceananigans`. At the moment nothing in the `Oceananigans` algorithm is touched --- the module is simply loaded and exported. I suggest that we keep it this way, given the size of this PR, and work on integrating the code into `Oceananigans` in a future PR. A simple incremental test in that future PR will be to replace the diffusive operators with the ones here and ensure that the regression tests still pass. Ultimately `TurbulenceClosures` will provide code for all the different diffusive terms we want to provide for `Oceananigans` users. The current design is that a 'closure' must provide a diffusive flux divergence term for `Oceananigans`. These diffusive flux terms are. * `∇_κ_∇ϕ(i, j, k, grid, ϕ, closure, u, v, w, T, S)` for a scalar `ϕ`; * `∂ⱼ_2ν_Σ₁ⱼ(i, j, k, grid, closure, u, v, w, T, S)` for x momentum; * `∂ⱼ_2ν_Σ₂ⱼ(i, j, k, grid, closure, u, v, w, T, S)` for y momentum; * `∂ⱼ_2ν_Σ₃ⱼ(i, j, k, grid, closure, u, v, w, T, S)` for z momentum. This will have to be generalized if we wish to provide more sophisticated turbulence closures with, for example, backscatter. I am open to changing the name of the diffusive flux divergences. This PR introduces the closures:. * `ConstantSmagorinsky` (with no buoyancy modification --- yet); * `ConstantIsotropicDiffusivity`; * `DirectionalDiffusivity` (with different horizontal and vertical diffusivities --- for lack of a better term). There is also an abstraction --- we have `ScalarDiffusivity`s and `TensorDiffusivity`s. The `DirectionalDiffusivity` is an example of a tensor diffusivity. I would like to add docs before merging. Please review the code and let me know what can be improved while I work on docs, and suggest improvements to the doc strings. There are some unit tests included in this PR. Please take a look and suggest new ones. There is significant notation associated with this PR. I don't think we need to finalize the notation here, but comments are welcome. This PR m",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/234:326,test,test,326,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/234,2,['test'],"['test', 'tests']"
Testability,"This PR adds a `dims` keyword argument to `zero_halo_regions`, so that we can avoid zeroing out halo regions in directions that are not averaged. It also adds tests to ensure that this works. This PR does not solve all the issues with averaging halo regions, however. In particular, the halo regions are not guaranteed to be correct because they may have been previously zeroed out. This can be solved by calling `fill_halo_regions` prior to computing an average. However, this solution is not possible with the current syntax, because field boundary conditions can depend on other fields of model that are not available within `compute!(averaged_field)`. I will raise an issue after this PR to discuss this other problem, which involves some difficult trade-offs.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/970:159,test,tests,159,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/970,1,['test'],['tests']
Testability,This PR adds a `with_halos` option to the `Average` diagnostic. By default `with_halos = false`. Previously `with_halos` was always `true` which was awkward as most use cases did not warrant halos in the output. PR test `Average` with halos and add result size tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/859:215,test,test,215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/859,2,['test'],"['test', 'tests']"
Testability,"This PR adds a benchmarking script that times how long a single time step takes on the CPU and GPU using `Float32` and `Float64` for various model resolutions. It uses TimerOutputs.jl to nicely format the benchmarks. It also prints out CPU->GPU speedups and Float64->Float32 ""speedups"". It only executes the GPU benchmarks if executed on a CUDA-enabled machine. We can later extend it to time model initialization, different parts of the time stepping, etc. Right now it only benchmarks a simple ""static ocean"" configuration so no fancy forcing functions are used, but we can extend the number of scenarios/experiments we benchmark. The time stepping and Poisson solver still takes the same amount of time whether the ocean is static or active. Resolves #67. Well, kind of. It's not clear to me how to easily incorperate this with CI in a way that doesn't involve one of us eyeballing the text output. For now we should at least run this script every time we make a change that might potentially impact performance. Example output; ```; ──────────────────────────────────────────────────────────────────────────────────────────────────; Oceananigans.jl benchmarks Time Allocations; ────────────────────── ───────────────────────; Tot / % measured: 718s / 46.6% 17.2GiB / 0.02%. Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────────────────; 256x256x256 static ocean (CPU, Float32) 10 168s 50.2% 16.8s 20.3KiB 0.73% 2.03KiB; 256x256x256 static ocean (CPU, Float64) 10 141s 42.3% 14.1s 20.3KiB 0.73% 2.03KiB; 128x128x128 static ocean (CPU, Float32) 10 12.4s 3.72% 1.24s 14.5KiB 0.52% 1.45KiB; 128x128x128 static ocean (CPU, Float64) 10 9.00s 2.69% 900ms 14.8KiB 0.54% 1.48KiB; 64x 64x 64 static ocean (CPU, Float32) 10 1.03s 0.31% 103ms 14.2KiB 0.51% 1.42KiB; 256x256x256 static ocean (GPU, Float64) 10 891ms 0.27% 89.1ms 333KiB 12.0% 33.3KiB; 256x256x256 static ocean (GPU, Float32) 10 859ms 0.26% 85.9ms 329KiB 11.9% 32",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/116:15,benchmark,benchmarking,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/116,5,['benchmark'],"['benchmark', 'benchmarking', 'benchmarks']"
Testability,"This PR adds a bunch of examples, tests them, and writes them so that `Literate.jl` can be used to generate markdown files from them. . In the future, we can add these markdown files to the documentation. Examples that might be good to add to ~~this~~ a future PR:. - 2D convection into a stratified fluid with ""phytoplankton-like"" tracer: demonstrates forcing functions, nice boundary conditions, etc; - 2D Kelvin-Helmholtz instability: just a simple but interesting stratified example; - Stratified Couette flow example: nice 3D example with `Value` boundary conditions. Also: . - [x] Clean up and simplify deepening mixed layer example: should become a good 3D example; perhaps merge into single 'case' including forcing by both wind and unstable buoyancy forcing",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/425:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/425,1,['test'],['tests']
Testability,"This PR adds a convenience function `PressureField(model)` that returns a `ComputedField` representing total pressure, with data stored by default in the hydrostatic pressure field. It also adds tests for using `AveragedField`s and `ComputedField`s in operations, and fixes a method ambiguity associated with deducing interpolation to `Nothing` locations.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/956:195,test,tests,195,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/956,1,['test'],['tests']
Testability,"This PR adds a docstring for `ImmersedBoundaryGrid` that includes the `active_cells_map` feature. It moves the interface to the top-level, and fixes `with_halo` to work with the new interface. We should add a test for `with_halo` with `ImmersedBoundaryGrid`. resolves #2988",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2989:209,test,test,209,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2989,1,['test'],['test']
Testability,This PR adds a few barotropic turbulence validation tests on `RegularLatitudeLongitudeGrid`. It also includes some miscellaneous improvements needed for these simulations:. * Bugfixes for `HorizontallyCurvilinearAnisotropicBiharmonicDiffusivity` (missing functions + closure shenanigans to solve type inference issues); * Allows `TimeStepWizard` to accept user-defined `cell_advection_timescale` functions; * Implements `auxiliary_fields` computed during `update_state!` for `HydrostaticFreeSurfaceModel`. Here's where we are at:. https://user-images.githubusercontent.com/15271942/116346519-4ab5d000-a79f-11eb-8c7f-91281db0ff56.mp4,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1626:52,test,tests,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1626,1,['test'],['tests']
Testability,"This PR adds a field `erroring` to the `NaNChecker`, and also makes the `NaNChecker` mutable. This means that the default `NaNChecker` can be converted to an erroring `NaNChecker` by writing. ```julia; simulation.callbacks[:nan_checker].func.erroring = true; ```. or. ```julia; erroring_NaNChecker!(simulation); ```. TODO. - [x] Test. Resolves #2086 .",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2087:329,Test,Test,329,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2087,1,['Test'],['Test']
Testability,This PR adds a naive fifth-order advection scheme called `UpwindBiasedFifthOrder`. This primarily interesting to see the advantages of the WENO algorithm at the same order of accuracy. ![Square_RungeKutta3_UpwindBiasedFifthOrder_N64_CFL0 50_U+1](https://user-images.githubusercontent.com/15271942/94488260-49440b00-01b0-11eb-985f-ab8aed3892ab.gif). ![Square_RungeKutta3_UpwindBiasedFifthOrder_N64_CFL0 50_U-1](https://user-images.githubusercontent.com/15271942/94488252-46491a80-01b0-11eb-92c3-23b814e44f18.gif). Still need to. - [ ] update convergence tests to include `UpwindBiasedFifthOrder`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/994:553,test,tests,553,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/994,1,['test'],['tests']
Testability,"This PR adds a new `AbstractModel` called `HydrostaticFreeSurfaceModel` to `IncompressibleModel` and `ShallowWaterModel` in the Oceananigans model suite. `HydrostaticFreeSurfaceModel` is intended to solve the hydrostatic Boussinesq equations beneath a free surface. This PR adds the basic infrastructure needed to time step models on a `RegularCartesianGrid` with explicit free surface dynamics. I think we should save dynamics tests and an example for a future PR, and just work on getting some of the basic ingredients into this model. The time-stepping tests are currently in place, but most of `time_step!(model::HydrostaticFreeSurface, dt)` needs to be fleshed out. Todo for this PR:. - [x] correct tendency calculation and time-stepping for an Adams-Bashforth timestepping method; - [x] calculation of vertical velocity from the continuity equation",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1349:428,test,tests,428,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1349,2,['test'],['tests']
Testability,"This PR adds a new `Diagnostic` type called `Timeseries`, which takes a function or callable object of model (anything that has a method of the form `obj(model)`), and stores the result in `data` vector and the time-of-collection in a `time` vector. It also adds an object called `CFL` which computes the Courant-Freidrichs-Lewy number. `CFL` associates with a function `timescale`, which is used to provide convenience constructors `AdvectiveCFL` and `DiffusiveCFL`. We also add an object for computing `maximum(f, field.data.parent)` for `field`s, for an element wise operation `f`. The PR includes tests and docstrings for this functionality.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/407:601,test,tests,601,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/407,1,['test'],['tests']
Testability,"This PR adds a new function `interpolate(field, x, y, z)` that interpolates `field` to the physical point `(x, y, z)` using trilinear interpolation. This may be used for Lagrangian particle tracking (X-Ref #511), output on custom grids, and checkpoint restoration onto a new grid. No guarantees when `(x, y, z)` lies outside the domain of the field. I think it interpolates into the halo regions and I can test for this if we think it's important (actually this might be an important case...). Worrying about out of bounds, boundary conditions, extrapolation, etc. could slow down the `interpolate` function so it assumes the input makes sense. I think it's the particle's job to stay within the domain of the field. Output on a new grid is possible via. ```julia; new_field_data = interpolate.(Ref(field), nodes(loc, new_grid, reshape=true)...); ```. or. ```julia; new_field_data = interpolate.(Ref(field), xs, ys, zs); ```. so I did not feel the need to define any new types like `InterpolatedField` or `Interpolator`. @glwagner has pointed out that when restoring onto a new grid, you may want to respect global budgets in which case `interpolate` may not be appropriate for checkpoint restoration and an `integrator` (?) of some kind might be needed to ensure conservation of field quantities (momentum, tracers) via Gaussian quadrature. Is this a problem with linear interpolation though? Seems like linear interpolation should preserve global integrals?. Resolves #975",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1090:406,test,test,406,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1090,1,['test'],['test']
Testability,"This PR adds a new nonlinear equation of state, @sandreza's favorite 55-term polynomial approximation to TEOS-10 suitable for Boussinesq models as described in Roquet et al. (2014). The TEOS-10 polynomial approximation implemented in this PR has been translated into Julia from https://github.com/fabien-roquet/polyTEOS/blob/master/polyTEOS10.py (Thank you @fabien-roquet!). The Roquet et al. (2014) paper has some test/check values so I added some basic tests based on those, which pass. There are two things to figure out before merging:; 1. How to make `TEOS10` work with different float types. Right now the coefficients are defined as `const`s but then they're `Float64` by default. Perhaps it makes sense to define them as part of a `TEOS10` struct, but that will make the code a bit messier.; 2. Integrate `TEOS10` with `Oceananigans.Buoyancy` by defining `ρ′`, `thermal_expansion`, and `haline_contraction` functions. We can readily do this, just gotta convert geopotential depth `D` (which Oceananigans uses) to dbar (which `TEOS10` expects).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/731:415,test,test,415,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/731,2,['test'],"['test', 'tests']"
Testability,"This PR adds a new schedule called `AllSchedule` that allows scheduling based on multiple criterion. It also adds a `hasnan(model::AbstractModel)` that checks for a NaN in a model's first field. Together this allows schedules that avoid actuating if NaNs are detected via. ```julia; schedule = AllSchedule(TimeInterval(100), !hasnan); ```. for example. Note that `all` is short-circuiting, so order matters. Putting `!hasnan` second means that `hasnan` will not be called unless `TimeInterval(100)(model)` returns `true` first (this matters for avoiding `hasnan` calls on every time-step). TODO:. - [x] better name than `MultiSchedule` perhaps `AllSchedules`?; - [x] Also have `AnySchedule` that actuates if _any_ schedules actuate?; - [x] Tests. This feature was discussed on #2086 .",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2088:740,Test,Tests,740,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2088,1,['Test'],['Tests']
Testability,This PR adds a new submodule `Oceananigans.CubedSpheres` that implements new grid and field types for running `HydrostaticFreeSurfaceModel` with a fully connected cubed sphere (should eventually also be flexible enough to just use 1 < n < 6 faces but I'm just testing 6 faces for now). This PR is still a work-in-progress and is quite messy with some pretty horrible code (please don't judge :sob:). I'll be adding to it and refactoring it over the next few days. Compile times have increased significantly with `grid::ConformalCubedSphereGrid` which has slowed down development but should be pretty close to being able to time step. EDIT: This might only be on Julia 1.6...,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1522:260,test,testing,260,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1522,1,['test'],['testing']
Testability,"This PR adds a new submodule called `Oceananigans.Advection`. The advection scheme for a model is chosen by using the advection keyword in the constructor for `IncompressibleModel`. For example,. ```julia; model = IncompressibleModel(advection=CenteredSecondOrder(), ...); ```. This PR also adds a `CenteredFourthOrder` advection scheme. Convergence tests and instantiation tests are forthcoming.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/815:350,test,tests,350,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/815,2,['test'],['tests']
Testability,"This PR adds a new turbulence closure called `HorizontalCurvilinearDiffusivity`, following section 2.15.7 in the MITgcm documentation:. https://mitgcm.readthedocs.io/en/latest/algorithm/algorithm.html#horizontal-dissipation. There it is stated that this closure. > conserves potential vorticity (thickness weighted relative vorticity) and divergence and dissipates energy, enstrophy and divergence squared. The same details are not given for tracer diffusion, so I left the tracer diffusivity at zero for now. @christophernhill please advise. I also needed to add a few operators. I'm not sure where to put them since we have both ""closure_operators.jl"" and ""viscous_dissipation_operators.jl"". It might make sense to clean this up a bit in this PR --- @ali-ramadhan let me know what you think. To do:. - [x] Tracer diffusion valid on curvilinear grids; - [x] Some clean up of `TurbulenceClosures` module; - [x] Unit tests",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1375:916,test,tests,916,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1375,1,['test'],['tests']
Testability,"This PR adds a property to `IncompressibleModel` called `background_fields`. `background_fields.velocities` contains background velocity fields; `background_fields.tracers` contains background tracer fields. Background fields are specified with a `NamedTuple` similar to forcing functions and boundary conditions:. ```julia; background_u(x, y, z, t) = z * sin(t). model = IncompressibleModel(grid=grid, background_fields=(u,), ...); ```. Background fields are neglected in all tendency terms _except_ the advection terms. This restricts their use, but greatly simplifies their implementation. Todo:. - [x] update physics docs to include background fields in model equations; - [x] update model setup docs; - [x] tests; - [x] update `eady_turbulence.jl` and `internal_wave.jl` example to use `background_fields`; - [x] extend implementation of `FunctionField` to take parameters and add a special constructor for background `FunctionFields`. Resolves #960",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1014:712,test,tests,712,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1014,1,['test'],['tests']
Testability,"This PR adds a step in the outer `Field` constructor that validates boundary conditions. We check three things:. 1. That boundary conditions are compatible with the topology. Namely, we are restricted to default choices in `Periodic` or `Flat` directions; anything but default throws an error. 2. If a topology is `Bounded`, we check that boundary conditions are compatible with field location. Mostly we cannot support flux, value, or gradient boundary conditions for fields at faces, and we only support `nothing` for fields in `Flat` directions. 3. That boundary condition arrays are on the right architecture. TODO:. - [x] Test. Resolves #419; Resolves #890. Supercedes #1732",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2163:627,Test,Test,627,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2163,1,['Test'],['Test']
Testability,"This PR adds a test that automatically differentiates a hydrostatic turbulence simulation that uses `Centered` momentum advection and an `ExplicitFreeSurface`. . @wsmoses @jlk9 . Previously we had deduced that this model was differentiable, but it looks like there are still some issues. Not sure what the other test was doing. I think we should consider this separately from #3822 since that PR is currently working on the `SplitExplicitFreeSurface`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3867:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3867,2,['test'],['test']
Testability,"This PR adds a validation experiment as suggested by @christophernhill and @jm-c to add a very small Gaussian sea surface height η perturbation in the northern hemisphere of the cubed sphere face and watch it evolve. There is no rotation/Coriolis and no diffusivity right now to test the simplest model possible (so η just splashes around as expected). Next step would be to turn on rotation, diffusivity, and the implicit free surface. Might have to generalize some things, e.g. Coriolis, to non-regular curvilinear grids like `ConformalCubedSphereFaceGrid`. So I guess the main purpose of this PR is to make sure the cubed sphere face works, so maybe the validation experiment won't make it into the final version of this PR. https://user-images.githubusercontent.com/20099589/111330144-139fbb00-8646-11eb-9598-a0e18e88280b.mp4. This PR depends on PR #1433. Will `git rebase main` once it's merged.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1480:279,test,test,279,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1480,1,['test'],['test']
Testability,This PR adds a vertical regrid feature + tests. cc @adelinehillier,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1987:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1987,1,['test'],['tests']
Testability,"This PR adds a work-in-progress lid-driven cavity verification experiment. It also somewhat acts as a test for PR #475. It's a very classic test case and makes for a nice simple example: https://www.cfd-online.com/Wiki/Lid-driven_cavity_problem. I will compare point-wise velocity values along vertical and horizontal lines through the geometric center of the cavity at a resolution of 128x128 for various Reynolds numbers from Re=100 to Re=10,000. The values are reported in Tables 1 and 2 of [Ghia et al. (1982)](https://doi.org/10.1016/0021-9991(82)90058-4). Basically doing what this YouTube video is doing: https://www.youtube.com/watch?v=gkg3nG_qU7g. Helps with #332 and #346",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/476:102,test,test,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/476,2,['test'],['test']
Testability,"This PR adds another validation script for quick tests and such of distributed `NonhydrostaticModel`. We've been using the benchmark script, but that has additional features (and as a benchmark, is expensive to run). Hopefully these prove useful for fleshing out support for distributed cases. Right now I've just added a simple 2D turbulence script. TODO:; - [x] Add output to 2D turbulence script; - [ ] Add a 3D `NonhydrostaticModel` case; - [ ] Add `HydrostaticFreeSurfaceModel` case; - [ ] Add a script that runs into #2347 . cc @johnryantaylor",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2348:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2348,3,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"This PR adds areas, volumes, and a few product operators needed to evaluate correct Coriolis terms on curvilinear grids, following. https://mitgcm.readthedocs.io/en/latest/algorithm/algorithm.html#id8. Before merging we should discuss:. - Should I update all the Coriolis terms? (`beta_plane.jl, non_traditional_f_plane.jl`, etc?); - Are we ok using three-letter codes, even though we only plan to support horizontally-curvilinear grids (rather than vertically curvilinear grids) in the near future?; - Should we add more regression tests / evaluate existing regression tests before changing terms that are not covered?; - It's not feasible to adapt the _entire_ codebase to work on curvilinear grids right now. How should we handle throwing errors for cases that are not supported? Adding `RegularCartesianGrid` annotations in key places seems like the easiest strategy, but we should be careful not to miss any. We can perhaps add annotations to _all_ operators, and then support curvilinearity in as parsimonious fashion as possible to be conservative.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1371:533,test,tests,533,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1371,2,['test'],['tests']
Testability,This PR adds biharmonic diffusion appropriate for curvilinear grids as described by the MITgcm docs:. https://mitgcm.readthedocs.io/en/latest/algorithm/algorithm.html#horizontal-dissipation. Looking for suggestions on more comprehensive tests / validation experiments.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1531:237,test,tests,237,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1531,1,['test'],['tests']
Testability,"This PR adds comparison operators to our supported operators, and also cleans up `Field` constructors for cases where computations or reductions return non-floating-point elements (such as Booleans). This support is progress towards allowing users to specify things like conditional averages as diagnostics, using `AbstractOperation`s. It's still a WIP because we need tests, and probably should also wait for a few other PRs before merging (eg #2097).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2169:369,test,tests,369,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2169,1,['test'],['tests']
Testability,"This PR adds experimental support for rotating/tilting the gravity vector. I'm not even sure if it works properly but I'm opening a draft PR as it might be ready to be experimented with? I don't think we can have a non-zero gravity component along a periodic direction as the fluid just free falls along that dimension and the model blows up. But here's a thermal bubble rising with gravity tilted at 45 degrees. ![tilted_gravity_plume](https://user-images.githubusercontent.com/20099589/100940093-5ab5d600-34c5-11eb-918e-f574f284f024.gif). This is an experimental feature since it needs more rigorous testing and because full support for tilted gravity may require more work, e.g.; 1. Should AMD use `z_dot_g_b` now?; 2. Should `∂x_b` return a vector or should it be split up into `x_dot_∂x_b`, etc.? The Leith closure uses `∂x_b`.; 3. We may want to clean up and refactor the implementation, taking some suggestions from #1151. cc @tomchor . Resolves #1151",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242:602,test,testing,602,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242,1,['test'],['testing']
Testability,"This PR adds new features to the `NetCDFOutputWriter` and fixes some bugs. 1. It now always writes useful metadata to all NetCDF files (the date the file was generated, the Julia version, and the Oceananigans version used). This is essential for reproducibility.; 2. Add a `verbose` flag (default is `false`) in case you want to track what's being to disk and how long it takes for each output to be computed.; 3. Add an `include_halos` flag (default is `false`) in case you want to use the full grid including halos to write fields and custom output. Added new tests for this.; 4. Test that the x, y, z coordinates being written to NetCDF files are correct. They were not (I think this happened when we switched to using offset arrays for `grid.xC`, etc.). This has been fixed.; 5. Added jldoctest examples showing how to write fields and custom output to NetCDF.; 6. There was a bug in showing/printing grid domains for bounded dimensions, e.g.; ```julia; julia> grid = RegularCartesianGrid(size=(16, 16, 16), extent=(1, 1, 1)); RegularCartesianGrid{Float64, Periodic, Periodic, Bounded}; domain: x ∈ [0.0, 1.0], y ∈ [0.0, 1.0], z ∈ [-1.0, 0.0625]; topology: (Periodic, Periodic, Bounded); resolution (Nx, Ny, Nz): (16, 16, 16); halo size (Hx, Hy, Hz): (1, 1, 1); grid spacing (Δx, Δy, Δz): (0.0625, 0.0625, 0.0625); ```; Notice that `z ∈ [-1.0, 0.0625]` should be `z ∈ [-1.0, 0.0]`. This has been fixed now. I'd like to start using these features in LESbrary.jl (and in PR #572) so I'll tag v0.33.0 once this PR is merged. Resolves #683",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/823:562,test,tests,562,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/823,2,"['Test', 'test']","['Test', 'tests']"
Testability,This PR adds some convenience functions for interacting with fields that are functions. Unfortunately I can't test it on my mac because I don't have `CUDAnative` (?) and CUDA stuff is broken for some reason on my desktop. . I added an example in `examples/working_with_fields.jl` to demonstrate how to use the abstraction. @ali-ramadhan can you help me debug and test? This PR is small and simple. Addresses #174.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/210:110,test,test,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/210,2,['test'],['test']
Testability,This PR adds support for Krylov.jl and aims to test it out for solving the Poisson equation. cc @xkykai @amontoison. Closes #3803,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3812:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3812,1,['test'],['test']
