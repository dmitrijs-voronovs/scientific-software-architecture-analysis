quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"For the failure at the end, check out `driver/driver_nbody.py:471`. Which looks like `wfn = core.Wavefunction.build(molecule, 'sto-3g')`. This should be replaced with `wfn = core.Wavefunction.build(molecule)` so that the global basis set is picked up. You may want to try a fix more like `[x if x > 1.e-10 else x + 1.e10 for x in values]` to be a bit more canonical.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/926#issuecomment-370246164:8,failure,failure,8,https://psicode.org,https://github.com/psi4/psi4/issues/926#issuecomment-370246164,1,['failure'],['failure']
Availability,For the linear dependency problems you might want to have a look at Knizia et al in 10.1021/ct200239p. Replacing the use of inverse overlap matrices with the solution of linear equations makes the algorithms much more tolerant to linear dependencies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252990815:218,toler,tolerant,218,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252990815,1,['toler'],['tolerant']
Availability,"For the record, the following are the tests that are terminated prematurely (with error msg) when ERD globally activated. If anyone gets the `WARNING: string truncated` with gdma, your compile dir path is too long. I think I can fix it, but that's not for this PR. ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277397753:82,error,error,82,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753,1,['error'],['error']
Availability,"For the reduced PBS file, I think you'll want something like the below. For psidatadir, just ensure non-interference. need to have psipath existing before appending. and jobname must match pbs name. i've tested it on dftd3 at least. ```; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i jobname.in -o jobname.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/361#issuecomment-212251160:470,echo,echo,470,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212251160,2,['echo'],['echo']
Availability,"For what its worth 1.1 shouldn't be too far down the pipeline. This year at the very latest, but hopefully 2-3 months.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-232783553:44,down,down,44,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232783553,1,['down'],['down']
Availability,"Forgot that MOLPRO used non-augmented basis sets always for HF. Switching to `cc-pvtz-jkfit` we get:. ```; MOLPRO: -601.627052047; Psi4: -601.627052093; ```. Much better!. Now the MP2 issues comes due to the fact that Psi4 was enforcing symmetry while MOLPRO was not. Running both Psi4 and MOLPRO in C1 symmetry returns the following:. ```; MOLPRO: -603.5988606; Psi4: -603.5988594; ```. So an overall error of `1e-6`, roughly on the order of the convergence thresholds. So there is some kind of symmetry breaking operation going on here. Could be physical or could be a bug. If I recall correctly @bozkaya's code is not ""symmetry tolerant"" so it forces C1 symmetry from the start. This would explain why DFOCC is returning a result close to MOLPRO, the different SCF fitting basis sets would explain the rest. . Short version: Its a symmetry issue, specify C1 symmetry and it should fix the errors that you see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408#issuecomment-226325532:402,error,error,402,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-226325532,3,"['error', 'toler']","['error', 'errors', 'tolerant']"
Availability,Formatted checkpoint files don't work,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/708:10,checkpoint,checkpoint,10,https://psicode.org,https://github.com/psi4/psi4/issues/708,1,['checkpoint'],['checkpoint']
Availability,"Formatting is great, but just in case part of your goal is to compare basissets at the `.gbs` file level, I wanted to let you know about https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/primitives/diff_gbs.py . Thhe basis set exchange has one, too, -- I think https://github.com/MolSSI-BSE/basis_set_exchange/blob/master/basis_set_exchange/curate/diff.py. I'll look into the adcc errors. I think Max updated the conda packages recently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031:394,error,errors,394,https://psicode.org,https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031,1,['error'],['errors']
Availability,From Andy: current status is that the 1e-10 errors are suspect. Want to use Ben's MIRP https://github.com/MolSSI/MIRP to gauge what's right and see if they're acceptable. Good miniproject.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-418167798:44,error,errors,44,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-418167798,1,['error'],['errors']
Availability,"From forum: http://forum.psicode.org/t/polarizability-error-ao-mux-has-an-unrecognized-shape/1916/3. The error is `ERROR: ""AO Mux"" has an unrecognized shape. Must be either (36, 36) or (5, 31)`; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/response/scf_response.py#L176; The `vector` here, has still the original size. DIdn't trace it any further. Made up example for testing:; ```; molecule mol {; 0 1; O 0.44260 -0.88720 -0.29490; H 0.73940 -0.26640 -0.96690; H 0.79240 -0.54630 0.53350; }. basis {; assign verydiff; [verydiff]; spherical; ****; H 0; S 4 1.00; 1.301000D+01 1.968500D-02; 1.962000D+00 1.379770D-01; 4.446000D-01 4.781480D-01; 1.220000D-01 5.012400D-01; S 1 1.00; 1.220000D-01 1.000000D+00; S 1 1.00; 0.0297400 1.0000000; P 1 1.00; 7.270000D-01 1.0000000; P 1 1.00; 0.1410000 1.0000000; ****; O 0; S 9 1.00; 1.172000D+04 7.100000D-04; 1.759000D+03 5.470000D-03; 4.008000D+02 2.783700D-02; 1.137000D+02 1.048000D-01; 3.703000D+01 2.830620D-01; 1.327000D+01 4.487190D-01; 5.025000D+00 2.709520D-01; 1.013000D+00 1.545800D-02; 3.023000D-01 -2.585000D-03; S 9 1.00; 1.172000D+04 -1.600000D-04; 1.759000D+03 -1.263000D-03; 4.008000D+02 -6.267000D-03; 1.137000D+02 -2.571600D-02; 3.703000D+01 -7.092400D-02; 1.327000D+01 -1.654110D-01; 5.025000D+00 -1.169550D-01; 1.013000D+00 5.573680D-01; 3.023000D-01 5.727590D-01; S 1 1.00; 3.023000D-01 1.000000D+00; S 1 1.00; 0.0189600 1.0000000; P 4 1.00; 1.770000D+01 4.301800D-02; 3.854000D+00 2.289130D-01; 1.046000D+00 5.087280D-01; 2.753000D-01 4.605310D-01; P 1 1.00; 2.753000D-01 1.000000D+00; P 1 1.00; 0.0185600 1.0000000; D 1 1.00; 0.1000 1.0000000; D 1 1.00; 0.1000 1.0000000; ****; }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1998:54,error,error-ao-mux-has-an-unrecognized-shape,54,https://psicode.org,https://github.com/psi4/psi4/issues/1998,3,"['ERROR', 'error']","['ERROR', 'error', 'error-ao-mux-has-an-unrecognized-shape']"
Availability,"From psi4 command-line, default cores is 1 and more added by `-n <cores>`. From qcengine, default is all-the-machine-has and user adjusted by `local_options` (maybe name changed). The former is a traditional research code expectation and reasoning -- this is a cutting-edge and semistable code that I'm going to run cautiously at first before trying for speed. The latter is more consumer software expectation -- do your fastest on the resources available. Would that explain what you're seeing?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2600#issuecomment-1152547044:446,avail,available,446,https://psicode.org,https://github.com/psi4/psi4/issues/2600#issuecomment-1152547044,1,['avail'],['available']
Availability,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853#issuecomment-343702224:582,down,down,582,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224,2,"['down', 'error']","['down', 'error']"
Availability,"Full rework of SAD guess (#1451, #1452, #1456, #1458, #1477, #1479, #1481), fixing issues with fractional occupations, ECPs, and ghost atoms. Sad with spin-averaged fractional occupations is now the default guess in Psi4, yielding huge performance improvements. This is especially significant for unrestricted and restricted open-shell methods, for which the default guess was GWH which is even worse than CORE. Implemented the on-the-fly extended Huckel guess (#1498, #1529), which is based on the SAD solver. DIIS maximum absolute error criterion for SCF, instead of the default RMS error (#1460). Removed inconsistencies and bugs in formatted checkpoint files (#1475). Code assumes that the post-HF wave function contains a correlated density. Fixed inconsistencies in the passing of DF_FITTING_CONDITION; the default value is now 1e-10 in line with what was actually used by the code before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888:533,error,error,533,https://psicode.org,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888,3,"['checkpoint', 'error']","['checkpoint', 'error']"
Availability,"GQL(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQL@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgqr，该符号在函数 ""int __cdecl psi::C_DORGQR(int,int,int,double *,int,double *,double *,int)"" (?C_DORGQR@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgrq，该符号在函数 ""int __cdecl psi::C_DORGRQ(int,int,int,double *,int,double *,double *,int)"" (?C_DORGRQ@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgtr，该符号在函数 ""int __cdecl psi::C_DORGTR(char,int,double *,int,double *,double *,int)"" (?C_DORGTR@psi@@YAHDHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormbr，该符号在函数 ""int __cdecl psi::C_DORMBR(char,char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMBR@psi@@YAHDDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormhr，该符号在函数 ""int __cdecl psi::C_DORMHR(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMHR@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormlq，该符号在函数 ""int __cdecl psi::C_DORMLQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMLQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormql，该符号在函数 ""int __cdecl psi::C_DORMQL(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQL@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormqr，该符号在函数 ""int __cdecl psi::C_DORMQR(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQR@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:30335,error,error,30335,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,Gaussian FCHK Errors and Inefficiencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272:14,Error,Errors,14,https://psicode.org,https://github.com/psi4/psi4/issues/1272,1,['Error'],['Errors']
Availability,General maintenance,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736:8,mainten,maintenance,8,https://psicode.org,https://github.com/psi4/psi4/pull/736,1,['mainten'],['maintenance']
Availability,"General philosophy has been that something in the energy/grad/etc call can silently trump an option ( otherwise reference rhf + energy b3lyp wouldn’t work). I think that holds for method, basis, fc, etc for g2. The hf3c isn’t so clear cut imo b/c the basis set is constant, so easy to switch out. Though as peter points out, it’s no longer hf3c then and shouldn’t get the “hf3c total energy “ set, only perhaps “scf total energy”. Comes down to does a method suggest or require certain options. . At one point, fc in this g2 sequence were behaving very strangely for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622:437,down,down,437,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622,2,['down'],['down']
Availability,"Generally psi4 is supposed to catch those and still finish gracefully, and with upcoming psi4 v1.4 one gets also more visible error messages (see PR https://github.com/psi4/psi4/pull/1862). But here psi4 is aborted which is indeed not user friendly.; I dont know the exceptions machinery well enough to say why but it happens also in the current developer version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241:126,error,error,126,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241,1,['error'],['error']
Availability,Geometry optimization failures,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/18:22,failure,failures,22,https://psicode.org,https://github.com/psi4/psi4/issues/18,1,['failure'],['failures']
Availability,Get useful info back after optimizer errors,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/881:37,error,errors,37,https://psicode.org,https://github.com/psi4/psi4/pull/881,1,['error'],['errors']
Availability,Getting SIGSEGV error on cc-pvdz calculation of simple ethanol molecule,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:16,error,error,16,https://psicode.org,https://github.com/psi4/psi4/issues/2930,2,['error'],['error']
Availability,Getting pretty close to merging this in. Failing tests case should be limited to the following:. ```; 22 - cc14 (Failed); 155 - docs-psimod (Failed); 187 - mints9 (Failed); ```. Docs and mints both require changes to the test case. `cc14` remains the only undiagnosed test failure.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/481#issuecomment-254326737:273,failure,failure,273,https://psicode.org,https://github.com/psi4/psi4/pull/481#issuecomment-254326737,1,['failure'],['failure']
Availability,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263272403:275,error,errors,275,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403,3,['error'],"['error', 'errors']"
Availability,"Give the newly committed fix a try, then if that's not satisfactory, reopen this. `psi4 --test` is what that preloading is actually affecting, so pass along any unexpected results of that. (Though I'm not sure if an error caused by a present but broken add-on should be skipped or failed.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/656#issuecomment-288422107:216,error,error,216,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-288422107,1,['error'],['error']
Availability,"Given the reporter, the geometry they input is probably garbage. While I agree attempts to optimize from this are in vain, there should be a proper error message instead of just crashing with an obscure C error code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167:148,error,error,148,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167,2,['error'],['error']
Availability,"Glad to hear that we are right on time :-) . The error handling is something central for us too as we aimed to make trexio user-friendly. Btw, if you notice something needed for Psi4 which is currently missing in the trexio format - feel free to open an issue in the repo or ping me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385:49,error,error,49,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385,4,"['error', 'ping']","['error', 'ping']"
Availability,"Glad to help, as you're actually using the feature. Note that we're doing some infrastructure reworking (on private repo for now, but private is what conda builds from, again for now) that affect plugins. Until that settles down and appears in public (which is to become our primary repo, for conda, too) with guidelines, you may want to stick with recommending the `0.3` series for your RESP plugin. (Helps that our nightly build box is down for now, so there's only one `0.4` series around https://anaconda.org/psi4/psi4/files.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-182553481:224,down,down,224,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182553481,4,['down'],['down']
Availability,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/764#issuecomment-318659874:18,down,down,18,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874,1,['down'],['down']
Availability,"Good catch!. David. On Tue, Apr 25, 2017 at 4:20 PM, Andy Simmonett <notifications@github.com>; wrote:. > You're gaining quite the reputation for hunting down difficult and obscure; > bugs. Thanks a lot! At first glance, I think you're right about the size_t; > being a good solution, but I'll hold off saying anything definitive about; > that until I can look at it in a less sleep deprived state.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/685#issuecomment-297152955>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhY_fd5Pi2IM3dRb0-ShVYHzaVFtks5rzlWdgaJpZM4NH_3A>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685#issuecomment-297155704:154,down,down,154,https://psicode.org,https://github.com/psi4/psi4/pull/685#issuecomment-297155704,1,['down'],['down']
Availability,"Good day Sir,. Please I am still finding it difficult to generate the potential energy; data for the CF molecule. Would you be pleased to be of help? I don't mind; having a virtual meeting with you so you can assist me. I am the one one; doing this kind of research in my school and my supervisor doesn't know; much in this area. Please help 🙏 me.; If you request any information pertaining this, I will send it across; immediately. Thank you in anticipation. Kind regards; Sanctus. On Tue, Jun 18, 2024, 02:27 Jonathon Misiewicz ***@***.***>; wrote:. > Based on your writing, I assume you're a student researcher.; >; > Posting error messages *like this* is not a good way to get help. Large; > input files like this make it difficult for developers to find the actual; > problem. It's best practice to simplify the input file as much possible; > while still making the error clear. Sometimes, doing that can tell *you*; > where the problem is. If you don't know how to do this kind of; > troubleshooting, consult your seniors in your research group or your; > professor.; >; > I've played around with your latest input file and can confirm that you; > have made a fairly straightforward mistake, but you've discarded important; > information. As an exercise, please post a *simplified* input that; > reproduces your problem, and a *complete* error message. Once you've done; > that, I'll update the error message to be more explicit and offer some; > advice on how to bypass this. (Though once you understand the error, it's; > fairly straightforward.); >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/BA3DXYANKY74HK5CYFXZ6YLZH4TB5AVCNFSM6AAAAABI5T5SNGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCNZUGEYDEOJVGU>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549:629,error,error,629,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549,10,['error'],['error']
Availability,"Good find, there's some additional info in that header file that explains how the precision parameter is used to screen primitives. If we use the default libint2 engine precision parameter (`std::numeric_limits<double>::epsilon()`) we would still have a problem, since the current engine precision parameter (`std::numeric_limits<double>::epsilon() * std::pow((double)max_nprim, -4.0) * 1.e-2`) is smaller/tighter and causes convergence issues. I think we need something closer to 0.0. I've found that tightening the parameter by a factor of 10 (setting it to `std::numeric_limits<double>::epsilon() * std::pow((double)max_nprim, -4.0) * 1.e-3`) fixes all of the errors I've encountered. Any objections to this? Also, does anyone know how this parameter was chosen in the first place?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-782982394:663,error,errors,663,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-782982394,1,['error'],['errors']
Availability,"Good point -- @jeffschriber understands the issue and plans to address it sometime. The summary is that the new MBIS volume ratio functionality is only half available. The `energy(); oeprop(..., ""MBIS_VOLUME_RATIOS"")` route is fine, but `set scf_properties [mbis_volume_ratios]; energy()` fails b/c some necessary data (free atom volumes) isn't available. This isn't a regression. It'd just be nice to even up the capabilities, esp. as a qcschema run can only use the second form.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575:157,avail,available,157,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575,2,['avail'],['available']
Availability,"Good point, @mbanck. These release notes will be relative to 4.0beta5 from July 2013. Incremental release notes for earlier betas (though not all the way back to psi3 3.4.0) are at http://psicode.org/downloads.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-220846631:200,down,downloads,200,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220846631,1,['down'],['downloads']
Availability,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249720030:497,error,errors,497,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030,1,['error'],['errors']
Availability,"Good to know!. And naming the block and applying `set basis_relativistic mysvp` fixes the original forum issue. It would still be nice if the error message had told him the problem was needing to define `basis_relativistic`, though...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1332#issuecomment-435700102:142,error,error,142,https://psicode.org,https://github.com/psi4/psi4/issues/1332#issuecomment-435700102,1,['error'],['error']
Availability,"Good, thanks!. Assuming [this is the log](https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=i386&ver=1%3A1.2.1-1&stamp=1546604357&raw=0) to look at, a few comments:; - no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`); - psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`); - production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8; - source is probably a little out of date as this turned to c++14 around Christmas (`-- Setting (unspecified) option psi4_CXX_STANDARD: 11`); - I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`); - threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270.; - it's finding an AM=5 libint (`-- [36mFound Libint 5[m: /usr/lib/libint.a (found version 1.2.0)`). this'll make it through the tests but not good for production.; - aha, you're targeting v1.2.1, not v1.3! nevermind what I said about c++14; - `ImportError: Install python module networkx`; - Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824:733,avail,available,733,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824,2,"['avail', 'failure']","['available', 'failures']"
Availability,"Google's style is starting to become C++ standard from what I've seen and; would be my vote. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 7, 2016 1:32 PM, ""Daniel Smith"" notifications@github.com wrote:. > Ah, I run a lot of the CI code that hasn't been touched since Psi3 through; > clang-format with google style options so that I can read it a bit better.; > I do wish the ignore white-space option was available online as well.; > ; > I do like the idea of a style guide for the code, but it isn't; > particularly high on any list.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/372#issuecomment-217654331",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/372#issuecomment-217657023:439,avail,available,439,https://psicode.org,https://github.com/psi4/psi4/pull/372#issuecomment-217657023,2,['avail'],['available']
Availability,"Got it. Expect a PR with the gory details and comments over the weekend. If anybody needs this _right away_, you need to change [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L2089-L2093) from; ```; PAbp[A][b] /= -(eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfocc; B++) {; ```; to; ```; PAbp[A][b] /= (eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfvir; B++) {; ```. There's a sign error, and you're looping over the wrong variable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1916#issuecomment-639869519:443,error,error,443,https://psicode.org,https://github.com/psi4/psi4/issues/1916#issuecomment-639869519,1,['error'],['error']
Availability,"Granted. I was vaguely remembering that I also use 'valid_atom_map' to test whether RFO eigenvectors are symmetric - and they can be large and asymmetric. But for valid_atom_map it looks like I pass a tolerance in from optking, so I don't forsee any problems. Give it a shot.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195#issuecomment-189456212:201,toler,tolerance,201,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189456212,1,['toler'],['tolerance']
Availability,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122478325:1018,error,error,1018,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325,1,['error'],['error']
Availability,Great catch by @dsirianni. I'll pull this one in (with squash) and the exception error can be fixed separately.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330655700:81,error,error,81,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330655700,1,['error'],['error']
Availability,"Great to see this capability added! A pdf in doc/external can probably be linked to from Sphinx docs, though it won't be searchable. If Stone isn't keen on the subdir of Psi4 scheme, we could arrange so that his code stays on his website, a conda recipe (or cmake Add_External_Project) curls it from the web, a patch converts it to build as a lib rather than an exe, and so libgdma.so stays outside psi4. Then the interface code between gdma and libmints stays in psi4. Would like to make the built library available from our conda channel, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201110783:507,avail,available,507,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201110783,1,['avail'],['available']
Availability,"Great work tracking that one down, @bennybp et al. and thanks for the heads-up, @dkoes. Does anybody know why the CSS elements are fubared in the manual? The issues mentioned by @amjames still persist - perhaps it's a result of those modified directory permissions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210202336:29,down,down,29,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210202336,1,['down'],['down']
Availability,"Great work, @bennybp and @loriab. I didn't realize just how half assed my attempt to interface ERD was until reviewing this PR (I lost steam a little when I realized we weren't getting any speedup over libint). The error checking to catch bad use cases is great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277415985:215,error,error,215,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277415985,1,['error'],['error']
Availability,Great! I believe we will also explore ICC on top of MSVC incase the clang/MSVC compatibility with default conda channels is not robust.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-423186874:128,robust,robust,128,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-423186874,1,['robust'],['robust']
Availability,"Great! confirmed that `ctest` on libxc itself is clean for me. and in psi4, above error cleaned up, and `C_DSYEV` error cleaned up, too. For status, the 4 failing ctests are below. I'll run pytests next. ```. Printing out the relevant lines from the Psithon --> Python processed input file:; reference_wpbe_4 = -75.27504649361143; reference_wpbe_5 = -75.28530313989565; reference_wpbe_6 = -75.29249565176227; core.set_global_option(""DFT_OMEGA"", 0.4); func_call = energy('SCF', dft_functional=""wPBE""); --> compare_values(reference_wpbe_4, func_call, 6, ""wPBE0 omega=0.4""); core.set_global_option(""DFT_OMEGA"", 0.5); func_call = energy('SCF', dft_functional=""wPBE""); compare_values(reference_wpbe_5, func_call, 6, ""wPBE0 omega=0.5""); core.set_global_option(""DFT_OMEGA"", 0.6); func_call = energy('SCF', dft_functional=""wPBE""). !----------------------------------------------------------------------------------!; ! !; ! wPBE0 omega=0.4: computed value (-79.03914662) does not match !; ! (-75.27504649) to atol=1e-06 by difference (-3.76410013). !; ! !; !----------------------------------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 16.57 sec; ----------------------------------------------------------; Test Failed.; ""dft-custom"" end time: Jan 05 15:36 EST; ""dft-custom"" time elapsed: 00:00:16; ----------------------------------------------------------; ```. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""ne""); core.set_global_option(""DFT_SPHERICAL_POINTS"", 770); core.set_global_option(""D_CONVERGENCE"", 1e-5); core.set_global_option(""BASIS"", ""cc-pvdz""); activate(ne); --> edft = energy(""ft97""); compare_values(-128.850056371480, edft, 4, ""Ne: FT97""). !-------------------------------------------------------!; ! !; ! Could not converge SCF iterations in 100 iterations. !; ! !; !------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620:82,error,error,82,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620,2,['error'],['error']
Availability,"Great. Let me explain the issue here. DFT does a numerical integration. If you want to compute a gradient, then _in principle_, you should include derivatives of the integration grid itself. Psi4 does not do that. (@susilehtola tells me that an open-source library in active development will handle that for us soon.) In the limit of an infinitely large grid, the error due to neglecting the geometry dependence of the grid vanishes. That error is _probably_ what you're seeing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791:364,error,error,364,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791,2,['error'],['error']
Availability,"Greetings friends,; As per the developer wish list ( #402) it was decided that boost should be removed from Psi4 as there is little point in keeping it around when all the needed features are in C++11. When removing boost we gain:; - Fewer dependencies; - More canonical operations through C++ standards; - Simpler and more expressive python bindings; - Fewer python lib issues (in theory); - You will no longer get six pages of error messages when boost templates fail in some way; - Build simplification and faster compiler time; - Fewer compiler warning (lots from boost); - Less CI hassle; - There will be a party with cake and burning of a boost effigy (streamed and tweeted); ## . My primary goal is to tackle boost python and convert all existing code to PyBind11. Through this I will tackle the following boost libraries: python, tuple, lexical, shared_ptr, and math. I have a reasonable plan to accomplish this and initial tests show that I should be able to pull it off.; ## . However, there are other libraries that I could use help converting either in the form ideas or some of the grunt work. These are:. Boost filesystem:; - [x] `bin/fisapt/fisapt.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem/operations.hpp>`; - [x] `bin/psi4/export_plugins.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/psi_start.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/python.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/csg.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/cubeprop.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libefp_solver/efp_solver.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/filesystem.hpp>`. For most of these we would likely let Python handle the filesystem paths and just pass them into C-side as a `std::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450:429,error,error,429,https://psicode.org,https://github.com/psi4/psi4/issues/450,1,['error'],['error']
Availability,"Greetings to all. I've build the latest v1.7 release successfully but met some problem when running the test suites.; Test 243 failed with the following error:. ```bash; 243: psi4.driver.p4util.exceptions.TestComparisonError: root; 243: Arrays differ.	_compare_recursive: computed value does not match to atol=1e-06 (o-e: RMS 5.0e-01, MAX 1.6e+00, RMAX 2.0e+00).; 243: Expected:; 243: [[ 0.0291933 -0.3287121 0.7914111 -0.5145527]; 243: [ 0.1791863 -0.7419178 0.1002281 0.6382825]; 243: [ 0.5820757 -0.3705022 -0.5095786 -0.5140483]; 243: [ 0.7926083 0.4519231 0.3224164 0.2521612]]; 243: Observed:; 243: [[-0.029193323165 0.328712055763 -0.791411145833 0.514552749997]; 243: [ 0.179186290535 -0.741917790628 0.100228136947 0.638282528194]; 243: [ 0.582075699497 -0.370502185067 -0.509578634502 -0.514048272222]; 243: [ 0.792608291164 0.451923120902 0.322416398582 0.252161169688]]; 243: Difference (passed elements are zeroed):; 243: [[-0.058386623165 0.657424155763 -1.582822245833 1.029105449997]; 243: [ 0. 0. 0. 0. ]; 243: [ 0. 0. 0. 0. ]; 243: [ 0. 0. 0. 0. ]]; ```. It seems the first row is completely negated?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2828:153,error,error,153,https://psicode.org,https://github.com/psi4/psi4/issues/2828,1,['error'],['error']
Availability,"Greetings, all. It's time to schedule Kill the Boost week! There are three major parts of this, as I see it: BoostPy, BoostNonPy, and FilterBranch. These are defined in the addendum to the top post of this ticket. I imagine the in-person and through-hangout times will be focused on the BoostPy target, though we should all be working on the BoostNonPy as convenient. So, please to add your availability to the weeks below. Reply or feel free to edit this comment. **Aug 15:** LAB, Jet-ok, best for andy; **Aug 22 (ACS Nat'l Mtg):** LAB, Jet-ok, works for andy; **Aug 29:** LAB, Jet-ok, andy traveling",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-237669294:391,avail,availability,391,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-237669294,1,['avail'],['availability']
Availability,"H, wfn2 = psi4.hessian('b3lyp', return_wfn=True); wfn2.to_file(). Traceback (most recent call last):; File ""/root/.pycharm_helpers/pydev/pydevconsole.py"", line 364, in runcode; coro = func(); File ""<input>"", line 1, in <module>; File ""/opt/anaconda3/envs/py310/lib/python3.10/site-packages/psi4/driver/p4util/python_helpers.py"", line 360, in _core_wavefunction_to_file; 'Ca': wfn.Ca().to_array() if wfn.Ca() else None,; RuntimeError: ; Fatal Error: Wavefunction::Ca: Unable to obtain MO coefficients.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1683589981287/work/psi4/src/psi4/libmints/wavefunction.cc on line: 804; The most recent 5 function calls were:; psi::Wavefunction::Ca() const. this error doesn't happen when calculating energy",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068:442,Error,Error,442,https://psicode.org,https://github.com/psi4/psi4/issues/3068,3,"['Error', 'error']","['Error', 'error']"
Availability,"H10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebrd，该符号在函数 ""int __cdecl psi::C_DGEBRD(int,int,double *,int,double *,double *,double *,double *,double *,int)"" (?C_DGEBRD@psi@@YAHHHPEANH00000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgecon，该符号在函数 ""int __cdecl psi::C_DGECON(char,int,double *,int,double,double *,double *,int *)"" (?C_DGECON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeequ，该符号在函数 ""int __cdecl psi::C_DGEEQU(int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGEEQU@psi@@YAHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgees，该符号在函数 ""int __cdecl psi::C_DGEES(char,char,int,double *,int,int *,double *,double *,double *,int,double *,int)"" (?C_DGEES@psi@@YAHDDHPEANHPEAH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeesx，该符号在函数 ""int __cdecl psi::C_DGEESX(char,char,char,int,double *,int,int *,double *,double *,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGEESX@psi@@YAHDDDHPEANHPEAH000H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeev，该符号在函数 ""int __cdecl psi::C_DGEEV(char,char,int,double *,int,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEEV@psi@@YAHDDHPEANH000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeevx，该符号在函数 ""int __cdecl psi::C_DGEEVX(char,char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGEEVX@psi@@YAHDDDDHPEANH000H0HPEAH100000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgehrd，该符号在函数 ""int __cdecl psi::C_DGEHRD(int,int,int,double *,int,double *,double *,int)"" (?C_DGEHRD@psi@@YAHHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgelqf，该符号在函数 ""int __cdecl psi::C_DGELQF(int,int,double *,int,double *,double *,int)"" (?C_DGELQF@psi@@YAHH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:18704,error,error,18704,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormqr，该符号在函数 ""int __cdecl psi::C_DORMQR(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQR@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPB",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:31850,error,error,31850,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,HEAD build failure with gcc 4.4.6,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85:11,failure,failure,11,https://psicode.org,https://github.com/psi4/psi4/issues/85,1,['failure'],['failure']
Availability,"HHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesdd，该符号在函数 ""int __cdecl psi::C_DGESDD(char,int,int,double *,int,double *,double *,int,double *,int,double *,int,int *)"" (?C_DGESDD@psi@@YAHDHHPEANH00H0H0HPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv，该符号在函数 ""int __cdecl psi::C_DGESV(int,int,double *,int,int *,double *,int)"" (?C_DGESV@psi@@YAHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgesvx，该符号在函数 ""int __cdecl psi::C_DGESVX(char,char,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGESVX@psi@@YAHDDHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrf，该符号在函数 ""int __cdecl psi::C_DGETRF(int,int,double *,int,int *)"" (?C_DGETRF@psi@@YAHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetri，该符号在函数 ""int __cdecl psi::C_DGETRI(int,double *,int,int *,double *,int)"" (?C_DGETRI@psi@@YAHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgetrs，该符号在函数 ""int __cdecl psi::C_DGETRS(char,int,int,double *,int,int *,double *,int)"" (?C_DGETRS@psi@@YAHDHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbak，该符号在函数 ""int __cdecl psi::C_DGGBAK(char,char,int,int,int,double *,double *,int,double *,int)"" (?C_DGGBAK@psi@@YAHDDHHHPEAN0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggbal，该符号在函数 ""int __cdecl psi::C_DGGBAL(char,int,double *,int,double *,int,int *,int *,double *,double *,double *)"" (?C_DGGBAL@psi@@YAHDHPEANH0HPEAH1000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgges，该符号在函数 ""int __cdecl psi::C_DGEGS(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGS@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggesx，",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:22602,error,error,22602,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"HPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevd，该符号在函数 ""int __cdecl psi::C_DSPEVD(char,char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPEVD@psi@@YAHDDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspevx，该符号在函数 ""int __cdecl psi::C_DSPEVX(char,char,char,int,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPEVX@psi@@YAHDDDHPEANNNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgst，该符号在函数 ""int __cdecl psi::C_DSPGST(int,char,int,double *,double *)"" (?C_DSPGST@psi@@YAHHDHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgv，该符号在函数 ""int __cdecl psi::C_DSPGV(int,char,char,int,double *,double *,double *,double *,int,double *)"" (?C_DSPGV@psi@@YAHHDDHPEAN000H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvd，该符号在函数 ""int __cdecl psi::C_DSPGVD(int,char,char,int,double *,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSPGVD@psi@@YAHHDDHPEAN000H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspgvx，该符号在函数 ""int __cdecl psi::C_DSPGVX(int,char,char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,double *,int *,int *)"" (?C_DSPGVX@psi@@YAHHDDDHPEAN0NNHHNPEAH00H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsprfs，该符号在函数 ""int __cdecl psi::C_DSPRFS(char,int,int,double *,double *,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSPRFS@psi@@YAHDHHPEAN0PEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspsv，该符号在函数 ""int __cdecl psi::C_DSPSV(char,int,int,double *,int *,double *,int)"" (?C_DSPSV@psi@@YAHDHHPEANPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dspsvx，该符号在函数 ""int __cdecl psi::C_DSPSVX(char,char,int,int,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DSPSVX@psi@@YAHDDH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:41573,error,error,41573,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"HPEANPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptri，该符号在函数 ""int __cdecl psi::C_DSPTRI(char,int,double *,int *,double *)"" (?C_DSPTRI@psi@@YAHDHPEANPEAH0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsptrs，该符号在函数 ""int __cdecl psi::C_DSPTRS(char,int,int,double *,int *,double *,int)"" (?C_DSPTRS@psi@@YAHDHHPEANPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstebz，该符号在函数 ""int __cdecl psi::C_DSTEBZ(char,char,int,double,double,int,int,double,double *,double *,int *,int *,double *,int *,int *,double *,int *)"" (?C_DSTEBZ@psi@@YAHDDHNNHHNPEAN0PEAH101101@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstedc，该符号在函数 ""int __cdecl psi::C_DSTEDC(char,int,double *,double *,double *,int,double *,int,int *,int)"" (?C_DSTEDC@psi@@YAHDHPEAN00H0HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstegr，该符号在函数 ""int __cdecl psi::C_DSTEGR(char,char,int,double *,double *,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSTEGR@psi@@YAHDDHPEAN0NNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstein，该符号在函数 ""int __cdecl psi::C_DSTEIN(int,double *,double *,int,double *,int *,int *,double *,int,double *,int *,int *)"" (?C_DSTEIN@psi@@YAHHPEAN0H0PEAH10H011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsteqr，该符号在函数 ""int __cdecl psi::C_DSTEQR(char,int,double *,double *,double *,int,double *)"" (?C_DSTEQR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsterf，该符号在函数 ""int __cdecl psi::C_DSTERF(int,double *,double *)"" (?C_DSTERF@psi@@YAHHPEAN0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstev，该符号在函数 ""int __cdecl psi::C_DSTEV(char,int,double *,double *,double *,int,double *)"" (?C_DSTEV@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dstevd，该符号在函数 ""int __cdecl psi::C_DSTEVD(char,int,double *,d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:43906,error,error,43906,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"Ha, I was trying to come up with a minimal reproducible example and found the story somewhat more complicated. We're using a custom basis set, and it's nearest sibling (aug-cc-pvdz) doesn't reproduce the bug. Further, if I remove the mol.set_geometry call (which is just reloading in the same geometry, modulo some flutter from unit conversion and digit truncation (this was part of a bigger calc that keeps updating the geometry but only this section was required for reproduction), the bug goes away... Here is the file, attached so it's not GIANT in the field here b/c it has the custom basis spec:. [run.txt](https://github.com/psi4/psi4/files/7314753/run.txt). And here are the results I got running with and without wcombine:; [run_wcombine_out.txt](https://github.com/psi4/psi4/files/7314757/run_wcombine_out.txt); [run_nowcombine_out.txt](https://github.com/psi4/psi4/files/7314758/run_nowcombine_out.txt). I'm stumped here, especially by how hard it turned out to be to get the bug to happen. But it happens reliably if I run both of those files `--memory 27.3GB -n8 `. So... yeah. I've been running a few thousand jobs through now with `set wcombine false` and haven't seen any suspicious energies (I'm comparing to PNO-LCCSD(T*)-F12b in a comparable basis set, and this was producing several-kcals-of-difference vs the usual sub-kcal I was seeing in cases that didn't run into the bug), so it looks like it's a valid workaround for me. But yeah, I'm a little... baffled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-939198359:1017,reliab,reliably,1017,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939198359,1,['reliab'],['reliably']
Availability,"Have been going through the psi4 build in preparation for our new supercomputer and found a ""glitch"" in that all the psi4numpy tests failed with:; ImportError: No module named numpy; which puzzled me momentarily.; Chased it down to:; tests/runtest.py: pyexitcode = backtick([""python"", infile, "" > "", outfile]); Our python3 doesn't equivalence to python, and alias (which I usually use to get round this) didn't carry through though it may have if I put it in my dot files. Anyway the Q&D of python-> python3 did the trick but our system guys have pointed out:; [https://developers.redhat.com/blog/2019/05/07/what-no-python-in-red-hat-enterprise-linux-8/](https://developers.redhat.com/blog/2019/05/07/what-no-python-in-red-hat-enterprise-linux-8/); Something to keep in mind?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1708:224,down,down,224,https://psicode.org,https://github.com/psi4/psi4/issues/1708,1,['down'],['down']
Availability,"Have we changed what PSIDATADIR should point to?. On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:. > An error has occurred. Traceback:; > ; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > ; > ```; > psi4.scf(NoneType, NoneType); > ```; > ; > did not match C++ signature:; > ; > ```; > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > ```; > ; > ""<string>"", line 47, in <module>; > ; > This is, for example, from the opt1 test case, but all jobs fail. I; > already tried removing my objdir completely and recompiling.; > ; > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > The current head (0.4.156 / 7783818; > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > / 0.5.92) works fine for me on the test case above and on all the usual; > > test cases. What is the nature of your broken python?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196158996:125,error,error,125,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196158996,1,['error'],['error']
Availability,"Have you pulled in master in the last day or so? @dgasmith committed some fixes for the full test suite, which corrected about 5 or 6 failures. As far as I know, the full suite should pass with that change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303895491:134,failure,failures,134,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303895491,1,['failure'],['failures']
Availability,"Have you tested this against Python 2, too? I'm getting the following error at execution time on my Mac with Python 2.7:. ```; Traceback (most recent call last):; File ""<string>"", line 29, in <module>; File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/driver.py"", line 618, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 2123, in run_adc; scf_helper(name, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 1457, in scf_helper; e_scf = psi4.scf(precallback, postcallback); TypeError: No registered converter was able to produce a C++ rvalue of type std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > from this Python object of type unicode; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130013400:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130013400,1,['error'],['error']
Availability,"Haven't checked, but that's a redundant input, isn't it? `basis cc-pvdz` + `relativistic x2c` triggers the primary basis to decontract. That said, the answer in the docs for the x2c example is known wrong. Were you going to address that, @WDerricotte?. Let me know if I'm mistaken about any of this, as I don't run relativistic regularly. And if there's something that _should_ work, please make a test case of it so it will continue to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288812442:30,redundant,redundant,30,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288812442,1,['redundant'],['redundant']
Availability,"Hello @loriab, I have taken what you and @ajmisquitta has said and applied it to an argon dimer which worked out fine. However when attempting to apply this to a water dimer I get the following error. <code>[s.rayner@spasrv12 water_aug-cc-pvqz_psi4_deltaHF_ccsd_t]$ psi4 -n 4; Calculating for basis aug-cc-pvQZ; Calculating for coordinate set: 0; rDistance 4.72431496198; </code>. <code>; QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 4 for role RIFIT among:; Shell Entries: ['RN']; Basis Sets: ['def2-qzvpp-ri']; File Path: , /home/s.rayner/psi4conda/share/psi4/basis; Input Blocks:; </code>; <p>; <code>; Traceback (most recent call last):; File ""/home/s.rayner/psi4conda/share/psi4/python/qcdb/libmintsbasisset.py"", line 599, in pyconstruct; bs, msg = BasisSet.construct(parser, mol, fitrole, None if fitrole == 'BASIS' else fitrole, basstrings[fitrole]); File ""/home/s.rayner/psi4conda/share/psi4/python/qcdb/libmintsbasisset.py"", line 748, in construct; (at + 1, role, text2)); qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 4 for role RIFIT among:; Shell Entries: ['RN']; Basis Sets: ['def2-qzvpp-ri']; File Path: , /home/s.rayner/psi4conda/share/psi4/basis; Input Blocks:</code></p>. The input.dat as the following http://pastebin.com/6kRJzc9e. Any help on this issue would be deeply appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626#issuecomment-281360860:194,error,error,194,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281360860,1,['error'],['error']
Availability,"Hello @raimis @loriab , I built psi4-v1.3.2 with visual studio 2019，I have changed the compilation option -openmp to -openmp:experimental(Although it does not fully support the syntax of openmp4.0), and fixed some include errors in the src。I compiled all the dependency libraries successfully，but at the end of the link an error occurred. I found that `FC_SYMBOL ""The type of Fortran name mangling"" 2`，I changed the value to 1 and get the same error. It looks like a problem with the calling interface of fortran, but i have no idea to solve it. Can you give me some ideas to solve this problem, thanks. ```; Error log:; [1262/1263] Linking CXX static library src\psi4\scfgrad\scfgrad.lib; [1263/1263] Linking CXX shared library src\core.cp37-win_amd64.pyd; FAILED: src/core.cp37-win_amd64.pyd src/core.lib ; cmd.exe /C ""cd . && ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"" -E vs_link_dll --intdir=src\CMakeFiles\core.dir --rc=""D:\Windows Kits\10\bin\10.0.17763.0\x64\rc.exe"" --mt=""D:\Windows Kits\10\bin\10.0.17763.0\x64\mt.exe"" --manifests -- C:\PROGRA~2\MICROS~3\2019\COMMUN~1\VC\Tools\MSVC\1421~1.277\bin\Hostx64\x64\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj src\CMakeFiles\core.dir\export_misc.cc.obj src\CMakeFiles\core.dir\export_oeprop.cc.obj src\CMakeFiles\core.dir\export_pcm.cc.obj src\CMakeFiles\core.dir\export_plugins.cc.obj src\CMakeFiles\core.dir\export_psio.cc.obj src\CMakeFiles\core.dir\export_trans.cc.obj src\CMakeFiles\core.dir\export_wavefunction.cc.obj src\CMakeFiles\core.dir\export_options.cc.obj src\CMakeFiles\core.dir\create_new_plugin.cc.obj src\CMakeFiles\core.dir\read_options.cc.obj s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:222,error,errors,222,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,4,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331682241:445,down,down,445,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241,2,['down'],['down']
Availability,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565:124,error,error,124,https://psicode.org,https://github.com/psi4/psi4/issues/565,3,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"Hello Psi4!; First of all, thank you for your hard work on improving the Psi.; This is not a bug report but rather a possible enhancement: we have recently developed a wave function format called [TREXIO](https://github.com/TREX-CoE/trexio) with the focus on self-consistence and I/O performance. The format comes with a C library and an API to interact with the data: it has a text (ASCII-based) and HDF5 (binary) back ends for I/O. Bindings in Python, Fortran and OCaml are available. Sparse data like 2e integrals or CI coefficients are stored in a sparse data representation (similar to FCIDUMP) which significarntly improved the performance of the I/O (especially in the HDF5 case). The source code can be found [here](https://github.com/TREX-CoE/trexio) and a detailed description of the format and an API can be found [here](https://trex-coe.github.io/trexio/trex.html). Would it be interesting to have TREXIO as an alternative I/O back end in Psi4? The library is packaged for both PyPI and conda (via conda-forge). I am one of the core developers and can help/contribute.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847:476,avail,available,476,https://psicode.org,https://github.com/psi4/psi4/issues/2847,1,['avail'],['available']
Availability,"Hello Psi4,. I am running a geometry optimisation for a small molecule with a chlorium atom (see the Psi4 input at the bottom of this page) and get the following error. It comes from the fact that the atomic symbols are uppercased by Psi4 (e.g. `CL` for chlorium) while `geometric` engine expects them capitalized (e.g. `Cl`). I have a one-liner fix for this which should go in the `driver.py` module. I can open a PR or communicate the fix here, whatever you prefer. ```; Traceback (most recent call last):; File ""/opt/conda/envs/psi4-env/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 50, in <module>; File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/psi4/driver/driver.py"", line 1152, in optimize; return optimize_geometric(name, **kwargs); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/psi4/driver/driver.py"", line 918, in optimize_geometric; optimizer.prepareFirstStep(); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/optimize.py"", line 376, in prepareFirstStep; self.H0 = self.IC.guess_hessian(self.coords); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/internal.py"", line 3457, in guess_hessian; Hprim = self.Prims.guess_hessian(coords); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/internal.py"", line 2730, in guess_hessian; elem1 = min(Elements.index(self.elem[ic.a]), Elements.index(self.elem[ic.b])). ValueError: 'CL' is not in list. Printing out the relevant lines from the Psithon --> Python processed input file:; 'coordsys' : 'tric',; 'convergence_set' : 'GAU_LOOSE',; 'convergence_energy' : 1e-4,; }; core.set_global_option(""GEOM_MAXITER"", 5); --> optimize('mp2', engine='geometric', optimizer_keywords=geometric_keywords); ```. Versions:; - geometric 1.0; - psi4 1.7+6ce35a5; - python 3.9. Psi4 input file:; ```; memory 14000 MB; molecule ligand {; 0 1; Cl -1.0833 -0.2140 0.0000 ; O -0.3456 1.2535 0.0000 ; O 1.0833 1.2535 0.0000 ; N 1.0362 -0.4689 0.0000 ; N -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2871:162,error,error,162,https://psicode.org,https://github.com/psi4/psi4/issues/2871,1,['error'],['error']
Availability,"Hello Saeed. All questions about **multideterminant.py** should be asked [there](https://github.com/Konjkov/molden2qmc/issues) for this you need to apply psi4 version, input, output... this script works correctly for versions ORCA4.X and ORCA5.X. > 1 -0.445106 ( 735, 514) 6A1X* 7A1A* 8A1A* 9A1A* 1A2A* 2B1X* 3B1B* 2B2X* 3B2**X*. I don't know such notations for e-promotion rules, maybe that's why my script doesn't work correctly for PSI4. Maybe there is a link to documentation explaining this.; A - up electron; B - down electron; X - doubly occupied; also A, B can also mean irreducible representations. What do the asterisk mean? . Best wishes, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-2425979772:519,down,down,519,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-2425979772,1,['down'],['down']
Availability,"Hello everyone,; So this is for a DFT-SAPT computation I'm assuming? I'm less familiar with this code, but in Hartree-Fock based SAPT this error indicates that the orbital hessian has a negative eigenvalue, i.e. the SCF did not converge on a minimum. This would usually be solved by doing a stability analysis on the SCF before passing the correct solution to SAPT. The [advanced example](http://www.psicode.org/psi4manual/master/sapt.html#advanced-example) in the manual shows how to do that, and has the stability analysis included for monomer A in the Hartree-Fock case. Not sure any of that works for DFT. I believe the array s in the incriminated lines contains the product of the orbital hessian with the amplitudes. I haven't touched the code in some time so I may be wrong but that is my current hypothesis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-515481737:139,error,error,139,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515481737,1,['error'],['error']
Availability,"Hello! Thanks for the reply. I initially tried with with df SCF, but that gave the same error... changed it to direct to see if that would make a difference... but alas no.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35#issuecomment-35249012:88,error,error,88,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-35249012,1,['error'],['error']
Availability,"Hello!. I'm trying to compile Psi4 on my laptop and I have a problem. As described here [https://github.com/psi4/psi4/wiki/3_Building#builddetailed], I've run setup script, then I've entered $top/objdir and typed 'make -j8'. Compilation was successful, but I've got a linking error. Operating system is ArchLinux 4.2.5. I have Python2.7 and Python3.5 both installed on my computer, LAPACK, BLAS, boost, perl are also installed. It seems like ld cannot link psi4 with boost::regex. When I didn't specified usage of Python2 in the setup script command line, there were linking errors due to different versions of python in Psi (python3) and python in boost (python2). Without specifying '--chemps2 off' the compilation also fails to start. To help setup script in detecting boost libraries on my computer, I've tried to run setup with '--boost-incdir=/usr/include --boost-libdir=/usr/lib' options. I've also tried to find in automatically generated makefiles the invocation of ld (I wanted to add option '-lboost_regex' to linker), but I have not found.; Could you tell me, please, what is wrong? How can I fix this problem?. Thank you very much!; Alexander. Output of the 'setup' script:; [piton@avo psi4]$ ./setup --chemps2 off --python=/usr/bin/python2; cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CHEMPS2=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DPYTHON_INTERPRETER=/usr/bin/python2 -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=release /home/piton/gitdir/psi4. -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=**restrict** -DFUNDERSCORE=1 -fPIC -fopenmp -O3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:276,error,error,276,https://psicode.org,https://github.com/psi4/psi4/issues/312,2,['error'],"['error', 'errors']"
Availability,"Hello, ; I work at OpenEye Scientific Software where we use psi4 in a couple of our products. This week one of our development packages started failing for no reason I could identify. We have been working with version 1.5, planning to deploy our packages with that next week (upgrading to 1.6 next time). Despite no changes I can find on your end something in the last week seems to make it impossible to build a conda environment with psi4 1.5 anymore. . I get the same failures with a very minimal conda environment that we do on our more complex cloud platform. @zachglick is interning with my team this summer and was also able to replicate this. ; Below is the commands we used to build a new conda enviroment:; `conda create -n test_env -c conda-forge -c psi4 -c psi4 python=3.7 psi4==1.5+e9f4d6d dftd3==3.2.1 --yes`; (note, I've tried python 3.7, 3.7.12, and 3.8 on my mac). This script results in a segmentation fault ; ```; import psi4. # make output file; psi4_output = ""minimal_env.dat""; print(""set output file path""); psi4.set_output_file(psi4_output). # make molecule; print(""create molecule...""); molecule = psi4.geometry(""""""O 1.6406245231628418 2.186539888381958 0.3502783477306366; C 0.8303495645523071 1.106687068939209 0.17728924751281738; C 0.26523858308792114 0.47432053089141846 1.2845896482467651; C -0.5650492906570435 -0.6324407458305359 1.1073246002197266; C -0.8302973508834839 -1.1067066192626953 -0.17723894119262695; N -1.6608778238296509 -2.2135820388793945 -0.3546023368835449; C -2.3128416538238525 -2.9721903800964355 0.626854419708252; O -2.283581256866455 -2.8034048080444336 1.8416125774383545; C -3.1216139793395996 -4.092474460601807 0.022369852289557457; H -2.5071558952331543 -4.992997646331787 -0.06683211773633957; H -3.9806551933288574 -4.315130233764648 0.6616312265396118; H -3.4815473556518555 -3.7952513694763184 -0.9667707681655884; H -1.818267822265625 -2.5147225856781006 -1.3233563899993896; C -0.2652755677700043 -0.47430306673049927 -1.284630060195",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:471,failure,failures,471,https://psicode.org,https://github.com/psi4/psi4/issues/2593,2,"['failure', 'fault']","['failures', 'fault']"
Availability,"Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your patience. Between some life changes and issues compiling Psi4, I haven't been able to look at this issue previously. 1. Following Susi's suggestion, B3LYP converges straightforwardly. The SCF iterations takes one bad step early on, but this happens whether ADIIS is on or off.; 2. If I disable ADIIS completely using your original functional, it _still_ fails. Once the energy gets to around 284 Eh, it doesn't become negative again. **Contrary to the topic title, ADIIS is not at fault**.; 3. The title suggests that you've had previous ADIIS issues previously. If so, please send me specific examples. My experience has been that ADIIS itself is fine, but can break when other parts of the code are badly behaved. I'll do some digging to see if I can suggest an alternate protocol that will actually converge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430:553,fault,fault,553,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430,1,['fault'],['fault']
Availability,"Hello, I've downloaded conda and Psi4 into my Ubuntu, along with Jupyter Notebook, but when I go to run the following code into my jupyter-notebook:. ```; import psi4; psi4.__version__. I receive this error:. ModuleNotFoundError Traceback (most recent call last); /tmp/ipykernel_2200/2591947057.py in <module>; ----> 1 import psi4; 2 psi4.__version__. ModuleNotFoundError: No module named 'psi4'; ```; I have conda installed psi4 and conda -V works properly. When I do Psi4 test I recieve: ""64 passed, 39 skipped, 7746 deselected, 2 xfailed"". The two that have failed are: . psi4conda/lib/python3.10/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp XFAIL (EFP not transm...) [ 32%]; psi4conda/lib/python3.10/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_cc XFAIL (no AtomicInput ...) [ 58%]. Any recommendations on what I can do to resolve these issue(s) or what I can check would be very helpful, thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188:12,down,downloaded,12,https://psicode.org,https://github.com/psi4/psi4/issues/3188,2,"['down', 'error']","['downloaded', 'error']"
Availability,"Hello,. I am working on a university project and want to confirm that Psi4 is running correctly. When I run the test that the binary installation guide specifies I get the following error:. ![image](https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675:182,error,error,182,https://psicode.org,https://github.com/psi4/psi4/issues/675,1,['error'],['error']
Availability,"Hello,. I realize that there is a warning about PCM failing with symmetry point groups however, it would be nice to add like a 1-3 line error message that would go a long way to helping out any user that has not read all of the docs very carefully.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1939:136,error,error,136,https://psicode.org,https://github.com/psi4/psi4/issues/1939,1,['error'],['error']
Availability,"Hello,. It seems that there may be a problem with the normalization of the contraction coefficients in the molden wavefunction format for d functions (and higher). An example computation on an test molecule (NH3) where exactly the same basis sets were given to ORCA and PSI4 can be downloaded here:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. The molden files are almost the same, except for the contraction coefficients of the D functions. Is there an authoritative source that can tell us what the correct normalization of the contraction coefficients in the molden file should be? Having different variants of the same format is a pain in terms of post-processing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60:282,down,downloaded,282,https://psicode.org,https://github.com/psi4/psi4/issues/60,1,['down'],['downloaded']
Availability,"Hello,. Somehow the `pytest` module is imported during the DFT calculation with dispersion correction and crashes Psi4 if `pytest` is missing. It can be fixed simply by installing the missing module, but I thought that it's worth reporting still in order to patch the packaging. Psi4: v.1.8 from `conda-forge` (installed in a clean env using ` conda install psi4 python=3.10 -c conda-forge/label/libint_dev -c conda-forge `). Code to reproduce:. ```python; molecule {; 0 1; O 0.0 0.5 0.0; H 0.5 0.0 0.0; H -0.5 0.0 0.0. no_reorient; symmetry c1; }. memory 8GB; set_num_threads(2); set freeze_core True. E, wfn = energy('wb97x-d/6-311g**',return_wfn=True); ```. Fails with the following error:. ```; Traceback (most recent call last):; File ""/home/q-posev/miniconda3/envs/psi4-v18/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2574, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1430, in scf_wavefunction_factory; superfunc, _disp_functor = build_functional_and_disp(name, restricted=(reference in [""RKS"", ""RHF""]), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1407, in build_functional_and_disp; _disp_functor = empirical_dispersion.EmpiricalDispersion(name_hint=superfunc.name(),; File ""/home/q-posev/mi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3003:686,error,error,686,https://psicode.org,https://github.com/psi4/psi4/issues/3003,1,['error'],['error']
Availability,"Hello,. We have developed software around psi4 to perform potential energy scans. We submit psi4 jobs to our cluster. Our cluster architecture is allocated where each node has 64 cores with each core having 1 thread enabled. My psi4 is installed pythonically. . When I submit jobs I request how many predicted cores I need:. ```bash; -pe smp 64; ```. Initially, when I submitted the jobs, I would pass this flag into `psi4.set_num_threads` but since each core has 1 thread it only used 1 the whole scan. Which would not work for our purpose, it's too slow. . When reading the documentation I can set the OMP and MKL flags prior to running the script. ```bash; export MKL_NUM_THREADS=48; export OMP_NUM_THREADS=48; ```. I saw that psi4 started spreading the loads across the cores but it looks like there are spikes where it clocks over the 48 requested cores that I thought is what tell psi4 what is available to it. . We record our results on ganglia on the performance and here are the screenshots down below:. ![n131](https://user-images.githubusercontent.com/11812946/195706024-72bf740f-be03-4348-8a08-8f7e5d90178c.png). So my question is how do I control pythonically psi4, it's allocation to cores, and set the limit where it doesn't spike a node. If that makes sense?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747:900,avail,available,900,https://psicode.org,https://github.com/psi4/psi4/issues/2747,2,"['avail', 'down']","['available', 'down']"
Availability,"Hello,; Has this been resolved? I have just hit that error:; iwl_buf_init: Can't open file 33; with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; I'm using a fresh build I pulled(?) yesterday.; Best wishes,; Rika. molecule caffeine {; units bohr; 0 1; C 1.50 -0.505274704 0.000000; C -0.535187033 -2.058190923 0.000000; C 2.65 -4.522014770 0.000000; C 1.346731167 2.284891446 0.000000; C -3.463010598 1.525507419 0.000000; C -1.745695607 5.842896101 0.000000; C -5.228750999 -2.835032850 0.000000; C 6.295922772 -1.343301717 0.000000; N 3.617453017 -2.104182389 0.000000; N 0.151176399 -4.614309103 0.000000; N -3.029497084 -1.135014970 0.000000; N -1.247933362 3.102880179 0.000000; O 3.102683166 3.787581194 0.000000; O -5.585618888 2.429058396 0.000000; H 3.895327083 -6.157733721 0.000000; H -2.816386000 6.395195000 -1.672580; H -2.816386000 6.395195000 1.672580; H 0.068926104 6.808767386 0.000000; H -6.392104000 -2.520913000 -1.673960; H -6.392104000 -2.520913000 1.673960; H -4.537919087 -4.771667968 0.000000; H 7.459103496 -3.040539942 0.000000; H 6.719940000 -0.221440000 1.677441; H 6.719940000 -0.221440000 -1.677441; }. set basis cc-pvtz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35#issuecomment-41624543:53,error,error,53,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41624543,4,['error'],['error']
Availability,"Hello,; This is Jason from Monash Uni again. Thought I'd post my issue here instead of emailing everyone. I'm getting a PSIO error for some FNO-CD-CCSD(T) calculations and I'm hoping someone could help solve my problem. See below for the details. Cheers,; Jason. Input. ```; memory 126 Gb; molecule complex {; *** Atomic coordinates omitted ***; }. set globals {; basis aug-cc-pVDZ; scf_type df; df_basis_cc cholesky; freeze_core True; guess sad; basis_guess 3-21G; }; energy('fno-df-ccsd(t)'); ```. End of calculation output. ```; *** at Mon Feb 10 13:17:33 2014. *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2784. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.157303195170. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 678; Number of virtual orbitals in truncated space: 640. ==> Memory <==. Total memory requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:125,error,error,125,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['error'],['error']
Availability,"Hello. I was trying to build Psi4 onto a cluster and I encountered this error:. ```; $psisource/src/lib/libmints/oeprop.h(116): error: data member initializer is not allowed; int max_noon_ = 3;. compilation aborted for /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: *** [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: *** [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: *** [all] Error 2; ```. I was told by my Linux guru to try different compilers and libraries in case that the code is incompatible with my system. I was building using Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe this is a bug. Let me know if you'd like more information. Thanks,; David",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188:72,error,error,72,https://psicode.org,https://github.com/psi4/psi4/issues/188,6,"['Error', 'error']","['Error', 'error']"
Availability,Here an input file : it simply crashes with no specific error. molecule c2h3 {; C .049798 -.576272 .000000; C .049798 .710988 .000000; H -.876750 -1.151844 .000000; H .969183 -1.154639 .000000; H -.690013 1.498185 .000000; units ang; symmetry c1; }; set basis cc-pvdz ; set scf_type df; set cc_type df. set guess GWH; set reference rohf; set MAXITER 1000. set e_convergence 1e-6; set d_convergence 1e-6; set ints_tolerance 1e-8. set FROZEN_DOCC [1]; set frozen_uocc [10]; set roots_per_irrep [4]; energy('eom-cc3'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/462#issuecomment-240187176:56,error,error,56,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240187176,2,['error'],['error']
Availability,Here is another example of this error. ```memory 2 GB; molecule {; 8 0.0000079789 0.0000000002 3.3734612294; 1 -0.7693027984 -0.0000000004 3.9669401984; 1 0.7691761670 -0.0000000031 3.9671249871; }. energy('pbe0/aug-cc-pVDZ'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-1315662300:32,error,error,32,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-1315662300,1,['error'],['error']
Availability,"Here lie uses for general Cholesky machinery.; - Fock-type terms in DF-SAPT, particularly higher-order, see #317 ; - If you care about 6-zeta accuracy, you probably oughtn't to be using density fitting. Nevertheless, having orbital basis sets for which _no_ auxiliary is appropriate (even as overkill, like QZ for sto-3g) is troubling for the auxiliary defaulting machinery. On-the-fly construction could help. Maybe a more plausible case is when auxiliary basis sets aren't available for a particular element or for tight functions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/476:475,avail,available,475,https://psicode.org,https://github.com/psi4/psi4/issues/476,1,['avail'],['available']
Availability,"Here's a few more refs and the original discussion http://forum.psicode.org/t/naming-considerations-for-cepa-0/156 . And more ways it can confuse ppl http://forum.psicode.org/t/cepa-0-singles/1525/11 . My main consideration is that `energy(""cepa(0)"")` is running the same method in all modules. That's what's currently forced by cepa(0) directing all traffic to fnocc (since that's the only module that can do lccsd). `lccd` properly manages direction to fnocc/occ. If the opinion of `cepa0 --> lccsd` has shifted over the years to `cepa0 --> lccd`, that's ok with me, and with a lot of warnings, we can shift the definition. Or, if you'd like `cepa0` to always raise an error and demand sd/d distinction, that's ok, too. Or maybe dct could adjust to the current scheme. Basically, I think the current way is sane. But then I don't use cepa. And the current setup has shown itself to be confusing to new (thread above) and experienced (AED, Jonathon) practitioners. So strong feelings from multiple other parties could overcome my symlink.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872#issuecomment-616805230:671,error,error,671,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616805230,1,['error'],['error']
Availability,"Here's another case where the energy stagnates but there's still large DIIS error. I don't really understand how this is possible.; ```; memory 8 gb. molecule {; Cr 0.47834117238031 0.45636471654971 0.09285402419506; O 1.55111099616190 1.09138241759496 -0.82993325785254; O -0.61796524632964 1.38903190796852 0.67056903439165; Cl -0.44331553251777 -1.03073713008178 -0.94412856229465; Cl 1.43568861030522 -0.43101191203143 1.65244876156047; }. set basis 6-31G**; set df_basis_scf def2-svp-jfit; set geom_maxiter 250. # Use a (75,302) quadrature grid; set dft_radial_points 75; set dft_spherical_points 302. my_dft = {; ""name"": ""my lda"",; ""x_functionals"": {""lda_x"": {}},; ""c_functionals"": {""lda_c_pw"": {}}; }; energy('scf', dft_functional=my_dft); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-869728286:76,error,error,76,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-869728286,1,['error'],['error']
Availability,"Here's some of the errors in frequencies pre-fix; max is for HOOH TS. I've cherry-picked the commit into pyvib2, and the tests, if handy, are [here](https://github.com/loriab/psi4/blob/a4219be5e605a8f3f92fde127fdac4c187eaa70e/tests/python/vibanalysis/input.py). * CO2; ```; 	exp: [ 761.1526 761.1526 1513.3122 2580.1495]; 	obs: [ 765.97192061+0.j 954.84604992+0.j 1511.98600598+0.j; 2577.29764966+0.j]; 	dif: [ 4.81932061+0.j 193.69344992+0.j -1.32619402+0.j -2.85185034+0.j]; ```; * Ethene; ```; 	exp: [ 885.4386 1073.4306 1080.4104 1135.9390 1328.7166 1467.8428; 1565.5328 1831.6445 3287.3173 3312.1889 3371.7974 3399.4232]; 	obs: [ 885.43769105+0.j 1073.42980093+0.j 1080.48361108+0.j; 1135.93848940+0.j 1341.57874983+0.j 1467.71701985+0.j; 1565.53257843+0.j 1831.21804884+0.j 3287.31942795+0.j; 3312.16817472+0.j 3373.24482206+0.j 3399.42544494+0.j]; 	dif: [ -9.08947590e-04+0.j -7.99067003e-04+0.j 7.32110847e-02+0.j; -5.10595379e-04+0.j 1.28621498e+01+0.j -1.25780152e-01+0.j; -2.21567931e-04+0.j -4.26451164e-01+0.j 2.12794906e-03+0.j; -2.07252822e-02+0.j 1.44742206e+00+0.j 2.24494358e-03+0.j]; ```; * CH3 & NH3 ok; * Formaldehyde; ```; 	exp: [ 1325.3286 1359.7579 1637.4774 2013.4255 3108.9786 3183.3975]; 	obs: [ 1325.82947096+0.j 1376.06130208+0.j 1637.37151242+0.j; 2010.83034420+0.j 3108.93196717+0.j 3185.06227338+0.j]; 	dif: [ 0.50087096+0.j 16.30340208+0.j -0.10588758+0.j -2.59515580+0.j; -0.04663283+0.j 1.66477338+0.j]; ```; * HOOH TS; ```; 	exp: [ 0.0000+278.6136j 1128.8155 +0.j 1364.3495 +0.j; 1698.2924 +0.j 4140.0257 +0.j 4146.4749 +0.j ]; 	obs: [ 0.00000000+273.62786912j 1122.20829758 +0.j 1385.41184315 +0.j; 1715.97750485 +0.j 4143.48648522 +0.j 4306.47193962 +0.j ]; 	dif: [ 0.00000000-4.98573088j -6.60720242+0.j 21.06234315+0.j; 17.68510485+0.j 3.46078522+0.j 159.99703962+0.j ]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361040047:19,error,errors,19,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361040047,1,['error'],['errors']
Availability,"Here, I kind of feel like for the returned `jobrec` the dispersion energy is the correct thing for the current energy. I would hazard that this is an issue in reintegration of this energy down the line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1470#issuecomment-455797642:188,down,down,188,https://psicode.org,https://github.com/psi4/psi4/pull/1470#issuecomment-455797642,1,['down'],['down']
Availability,"Hey everyone,. I got the code through Valgrind for the stability test case and I did find an invalid read, but in the orbital rotation parameters that occurs after all the roots are computed. I'm correcting it now and investigating all divisions occurring in the code for small numbers. @jturney Could you just run the stability1 test case if it does not take too much time ? From what I understood the observed error was not even fully reproducible on Travis, which is going to make difficult to correct it. If you can see it on your machine you could also test the new version once I commit it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182873969:412,error,error,412,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182873969,1,['error'],['error']
Availability,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:216,error,error,216,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360,1,['error'],['error']
Availability,"Hi @kzinovjev great job adding this. . @loriab It would be great to have these available via the qcengine interface so we could store them in QCArchive when MBIS charges are requested on a calculation, can you adviseif any other changes would be needed to be made to make this possible?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635:79,avail,available,79,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635,1,['avail'],['available']
Availability,"Hi @loriab @dgasmith,. Sorry I didn't update. I was able to compile the C code that I wanted using the newest gcc packages from conda (gcc_linux-64). From my side is all fine except that when we depend on psi4, we bring all its dependencies with us, and I was wondering if this gcc version differences may cause problems down the line. If you guys make psi4 work with the default gcc from conda, that would be ideal, but I am no one to ask for that from you guys :) you already do a very good job. I think that's all. Feel free to close this if you feel it makes no sense to continue open. Cheers,; João",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347174011:321,down,down,321,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347174011,1,['down'],['down']
Availability,"Hi @loriab,. I promise I will find a consolidation way to reduce the source code as much as possible when I find a free time to work on it. Presently, I am more focused on the implementation and adding some new features to DFOCC. Even If we suppose that there are some redundant codes in DFOCC, it is a not big problem. It may just take a few more minutes of building time and a slightly additional storage. Further, I think the relatively large body of DFOCC w.r.t. some other modules is understandable since DFOCC includes many post-HF methods (standard and OO) including energies and gradients, and most of them are implemented for RHF and UHF refs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-221381893:269,redundant,redundant,269,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221381893,1,['redundant'],['redundant']
Availability,"Hi @loriab,. Thanks for looking carefully into this. I don't really understand the terms psithon and psiapi you use, but our use of psi4 is always through the command-line tool, and this is the functionality where we were trying to fix the pcm capabilities, because we were rather using an ugly fix of saving the working directory and changing back to it in the end. @raimis and I are available to provide any help you may need. Happy holidays to the PSI4 team!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-354305258:385,avail,available,385,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-354305258,1,['avail'],['available']
Availability,"Hi @msaitow, I don't believe we ever corresponded directly back when you were adding ADC to Psi4, but I did want to thank you on behalf of all the Psi4 developers for the longstanding functionality. I think your contribution of the ADC module was one of the first prompts to this community that we could develop software in a delocalized fashion and that the early Psi4 codebase could be understood and be a good development platform. There have been a few issues detected with ADC and a capable replacement in ADCC, so I wanted to let you know that we're removing the ADC module with #2737. The code will still be available in https://github.com/psi4/psi4attic and in any version of Psi4 through v1.6.1 . Thanks again!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-1273741984:615,avail,available,615,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-1273741984,1,['avail'],['available']
Availability,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-284125806:86,down,download,86,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806,4,['down'],"['download', 'downloads']"
Availability,"Hi @susilehtola, I'm sorry it doesn't look like we'll get to this in 1.1. We're busy preparing for a conference later this week, but I'll alert @CDSherrill in person that this could do with a look after the furor dies down. Do you have any known barrier-to-1.1 issues? The plan is to tag later today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301847966:218,down,down,218,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301847966,1,['down'],['down']
Availability,"Hi All,. Trying to build from source here but I get the following errors:. ```; [ 11%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/transform_read_so.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_bw.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_mk.cc.o; [ 12%] Linking CXX static library libpsimrcc.a; [ 12%] Built target psimrcc; [ 12%] Building CXX object src/psi4/sapt/CMakeFiles/sapt.dir/wrapper.cc.o; [ 12%] Linking CXX static library libsapt.a; [ 12%] Built target sapt; Consolidate compiler generated dependencies of target scf_solver; [ 13%] Built target scf_solver; Consolidate compiler generated dependencies of target scfgrad; [ 13%] Built target scfgrad; Consolidate compiler generated dependencies of target l2export; [ 13%] Built target l2export; Consolidate compiler generated dependencies of target 3index; [ 13%] Built target 3index; Consolidate compiler generated dependencies of target ciomr; [ 15%] Built target ciomr; Consolidate compiler generated dependencies of target cubeprop; [ 16%] Built target cubeprop; Consolidate compiler generated dependencies of target disp; [ 16%] Built target disp; Consolidate compiler generated dependencies of target dpd; [ 25%] Built target dpd; Consolidate compiler generated dependencies of target filesystem; [ 25%] Built target filesystem; Consolidate compiler generated dependencies of target fock; [ 25%] Building CXX object src/psi4/libfock/CMakeFiles/fock.dir/DiskDFJK.cc.o; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:17: error: no viable overloaded operator[] for type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ~~~~~~~~^~~~~~~~~~~~~~; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:68: error: member access into incomplete type 'psi::Opt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3006:66,error,errors,66,https://psicode.org,https://github.com/psi4/psi4/issues/3006,1,['error'],['errors']
Availability,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220670249:104,avail,available,104,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249,1,['avail'],['available']
Availability,"Hi Jet,. I try to use your diatomic code, which is available in psi4, with the following command:. phys_consts = anharmonicity(rvals, energies). I got the following error:. NameError: name 'anharmonicity' is not defined. What is the correct syntax?. @jturney @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/234:51,avail,available,51,https://psicode.org,https://github.com/psi4/psi4/issues/234,2,"['avail', 'error']","['available', 'error']"
Availability,"Hi Justin,. My /tmp was erased, so it took me a while before being able to reproduce the error.; What was happening is the following:; - I started off with a really bad geometry and a certain order of C an H atoms.; - After a while, I killed psi4 to generate a new input file with D2h symmetry. Therefore I reordered the C and H atoms to corresponding D2h pairs.; - So in the folder (the problem would happen in any folder), filename.moleculename.intco was still there from the previous atom ordering.; - Psi4 tried to combine the new molecule with the old filename.moleculename.intco, and it got nowhere. It restrained the update steps to negligibly small displacements. ==> So how about changing filename.moleculename.intco > filename.moleculename.pid.intco ?. Best,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73297994:89,error,error,89,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73297994,1,['error'],['error']
Availability,"Hi Lori,. In one of the functions, ccsd_WabefT2_cd(), I use CD factors for (ab|cd) integrals while for all the other 4-index integrals DF factors are used. In the second function, ccsd_WabefT2(), I use only DF factors for all 4-index integrals. Further, the explicit form of W_abef tensors are different for each functions. Hence, although both functions looks repeating each other, they are not in fact. At the theoretical point of view, there are significant differences between them. Hence, I prefer to keep them separate. However, it is possible to merge them. But in that case I will need if-else blocks at several places. Of course, I create common functions if I need something repeatedly. However, if I see theoretically significant difference between two functions, then I prefer separate functions. For example, instead of merged CCD and CCSD codes, I prefer to keep them separate, which looks me better organised. Alternatively, it is possible to merge all MP2, MP3, MP2.5, LCCD, and CCD into CCSD code with many if-else blocks or switch-case blocks. For each different method creating different functions appears to me more systematic and better organised. . I agree with you about avoiding repetitive codes for the sake of maintenance and build time. Presently, I am busy with CCSD(T) gradients. When I get some free time I will try to reduce repetitive codes if there are any, except for the similarities between high-order and lower-order methods, such as CCSD and MP3. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220426701:1236,mainten,maintenance,1236,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220426701,1,['mainten'],['maintenance']
Availability,"Hi Lori,. Let us start with your first question for the HF molecule. I run your job, and it terminates ""normally"". Since it is a gradient job I do not simply grab integrals from SCF, but I compute both JKFIT and RI basis DF integrals. Hence, it does not matter to start with the conventional integrals the df-mp2 code proceeds. However, the gradient is not correct because the MO coefficients are from conventional SCF, but it should be from DF-SCF. I think in the case df-mp2 gradients, if user set the conventional SCF, then we should throw an error. Alternatively we may change the reference to DF-SCF and throw a warning for user to explain what we did. Both solutions are okay for me. DFOCC uses frozen cores properly in energy and gradients. I did not add the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients. However, OCC does not use frozen cores in the energy and gradients. In case of OCC the problem is that you need to define different MO class with libtrans, which is not obvious how to do it. I know it is possible now. Andy explained it for me. As a result, there is no plan for OCC module. However, frozen virtuals will be added to DFOCC. In fact, I am waiting for RC1 release, then I will implement add it to Psi4. For the final question, your reference gradient is wrong (mp2tot_vals). This is a very good example how 3-point numeric gradients are unreliable for challenging systems. I reproduce problem with your input. However, if I use ""points 5"", all numeric gradient computations give the same result with the analytic gradients. I also run the same job with gausssian 09 with analytic gradients, which gives the same result with our analytic gradient. Here is the G09 result:. ---. Center Atomic Forces (Hartrees/Bohr); Number Number X Y Z. ---. ```; 1 1 0.000000000 0.000000000 -0.002819339; 2 9 0.000000000 0.000000000 0.002819339; ```. ---. and our analytic gradients:. -Total gradient:; Atom X Y Z; ------ ----------------- ----------------- ---------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192875912:546,error,error,546,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192875912,2,['error'],['error']
Availability,"Hi Lori,. Thank you very much for your help. I have updated my tensor class. Further, I have added delte-MP2 corrections to the energy of the method, hence it is saved to PsiVar now. I think, you may add it public repo now. However, when try to make a push I got the following error:. remote: Permission to loriab/psi4.git denied to bozkaya.; fatal: unable to access 'https://github.com/loriab/psi4.git/': The requested URL returned error: 403. As I understand you should allow me to push my changes. Let me know if we need anything else. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988:277,error,error,277,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988,2,['error'],['error']
Availability,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-128100571:409,redundant,redundant,409,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571,1,['redundant'],['redundant']
Availability,"Hi Sebastian,. I'm unable to reproduce the error. Could you send me the output file?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73293029:43,error,error,43,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73293029,1,['error'],['error']
Availability,"Hi Sebastian,. Something is wrong with my DMRG-CASPT2 and DMRG-natural-orbital calculattion. This the error. Error: option WFN_IRREP is not contained in the list of available options. Did you mean? . An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 33, in <module>. RuntimeError: ; Fatal Error: WFN_IRREP is not a valid option.; Error occurred in file: /scratch/cdsgroup/conda-builds/work/src/lib/liboptions/liboptions.h on line: 59; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::Options::use(std::string&); py_psi_set_local_option_int(std::string const&, std::string const&, int); boost::python::objects::caller_py_function_impl<boost::python::detail::caller<bool (_)(std::string const&, std::string const&, int), boost::python::default_call_policies, boost::mpl::vector4<bool, std::string const&, std::string const&, int> > >::operator()(_object_, _object_); boost::python::objects::function::call(_object_, _object_) . For DMRG-SCF and DMRG-CI, all are fine. Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222663666:102,error,error,102,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222663666,6,"['Error', 'avail', 'error']","['Error', 'available', 'error']"
Availability,"Hi Vladimir,. For RHF case I build the entire OPDM, however SCF code builds only alpha-part of it. MoldenWriter is a function of libmints and it assumes that only alpha-part available, then it scale the OPDM by 2. However, for DFOCC module it is unnecessary and therefore you obtain the twice of occupation numbers. . I will fix it and push my changes in a minute. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152726098:174,avail,available,174,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152726098,1,['avail'],['available']
Availability,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:266,ROBUST,ROBUST,266,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214,2,"['ROBUST', 'failure']","['ROBUST', 'failure']"
Availability,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:107,redundant,redundant,107,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085,1,['redundant'],['redundant']
Availability,"Hi all,. As part of a large benchmarking study, I've been computing the interaction energies of various hexamine dimers. With PBEh-3c, I've gotten some suspiciously large errors relative to CCSD(T)/CBS. I have used 590, 99 (spherical,radial) points, and I've also compared the energies to Orca (using defgrid3... after recommendations from issue #2304). Psi4 and Orca differ by as many as .3-.4 kJ/mol, depending on the dimer, which is a large percent error. One test case is summarized below:. | Program | Monomer A (H) | Monomer B (H) | Dimer AB (H)| $E_{int}$ (kcal/mol)| ; |---------|-------------|-------------|-----------|-----------|; | Psi4 | -453.84229689692728 | -453.84229689783353 | -907.68447385499462 | 0.075263339533 |; |Orca | -453.842841688023 | -453.842841698644 | -907.685688152560 | -0.002990642998 |. | Program | $E_{int}$ (kJ/mol)| Notes|; |---------|-------------| ----|; | Psi4 | 0.31490181 | |; |Orca | -0.01251285 | |; | Benchmark | -0.00315431 | Focal Point CCSD(T)/CBS with Psi4 |. I have noticed this warning in all of my Psi4 hexamine/PBEh-3c files:; `Warning: Molecule has a spherically-symmetric moment of charge but lacks icosahedral, octahedral, and tetrahedral symmetry.` . CDS figures this has something to do with the grid placement. Any ideas of how to alleviate this warning while keeping the same geometries and/or what the energy difference could be attributed to? I've tried different basis sets, different number of grid points, `symmetry c1`, `molecule.symmetrize(1e-3)`, no pruning scheme (rather than `robust`). The only time I have been able to get the warning to go away is when I use `bsse_type='cp'`, but I really shouldn't be running the calculation with cp correction because that is already included in the PBEh-3c calculation. Output files for the above example are attached, as well as a graph of Psi4 and Orca interaction energies for all dimers tested. . [Psi4-214-int.txt](https://github.com/psi4/psi4/files/9200713/Psi4-214-int.txt); [Orca-21",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647:171,error,errors,171,https://psicode.org,https://github.com/psi4/psi4/issues/2647,2,['error'],"['error', 'errors']"
Availability,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2102:36,error,error,36,https://psicode.org,https://github.com/psi4/psi4/issues/2102,6,"['Error', 'error']","['Error', 'error']"
Availability,"Hi all,. I am out of Country for the International Junior Science Olympiad (IJSO), hence I could not catch up with you. I know the problem for large molecules, it is because of int. I think if I change all ints to long long int, the problem will be solved. When I find an available time I can take a look. Meanwhile, you can use your patch and update dfocc as long as your patch passes all dfocc tests. Alternatively, a volunter may change all int data types to LLI for dfocc. @devinamatthews @dgasmith . Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405:272,avail,available,272,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405,1,['avail'],['available']
Availability,"Hi all,. I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; # =======================; # ! sample input. memory 500 mb. molecule test {; Li 0.000 0.000 0.000; }. set reference uhf; set globals = {; scf_type direct; basis 6-31G; e_convergence 10; }. this_energy = energy('scf'); # =======================. running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64). The error message is: ; # =======================. Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; scf_helper(name, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; e_scf = PsiMod.scf(precallback, postcallback); RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; line: 339; # =======================. Is it a but or am I wrong anywhere?; I appreciate any help and suggestions,; Hao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7:498,error,error,498,https://psicode.org,https://github.com/psi4/psi4/issues/7,1,['error'],['error']
Availability,"Hi all,. I have been benchmarking energy calculations of various organic small-molecule dimers in Psi4. These dimers have minimum monomer separations (closest intermolecular contact) up to 15 Å. To determine which method produces interaction energies closest to coupled cluster results, I have graphed the partial crystal lattice energy contributions (a scaled sum of the dimer interaction energies) for subsets of dimers with monomer separations between (n, n+1). Odd behavior arose when analyzing results of benzene. PBEh-3c returned errors _much_ larger than any other method. To investigate these results, PBE, PBEh, and PBEh-3c were run in ORCA (5.0.1) and Psi4 (1.4rc3). Results are shown below. Methods denoted with an asterisk are those which use a fine grid (total points = 6340328). Methods without an asterisk used the default grid (Psi4 total points = 253270; ORCA total points = 56510). ![subplot-8](https://user-images.githubusercontent.com/87093097/134976005-f5bf7501-27d2-40c0-b033-06b33126f8dc.png). The graph shows that while PBE generally agrees in Psi4 and ORCA, PBEh and PBEh-3c disagree when comparing the two software packages and default grid points are used. When Psi4 uses a fine grid, the results align more-so with ORCA -- and the coupled cluster results. Two individual dimers have been chosen to highlight the differences in interaction energies:. | Benzene Dimer | Min. Monomer Separation (Å) | Interaction Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points |; |---|---|---|---|---|---|---|; | 2mer-0+1 | 2.544 | -6.01017169 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -6.09347943 | Psi4 | 302 | 75 | 253270 |; | | | -6.06158176 | Psi4 | 5810 | 99 | 6340328 |; | 2mer-0+77 | 11.016 | -0.03777130 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -0.09279455 | Psi4 | 302 | 75 | 253270 |; | | | -0.03957357 | Psi4 | 5810 | 99 | 6340328 |. To me, this seems to be a systematic issue with Psi4 calculating interaction energies with PBE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304:536,error,errors,536,https://psicode.org,https://github.com/psi4/psi4/issues/2304,1,['error'],['errors']
Availability,"Hi all,. I have installed psi4-1.3 in Win10/WSL-Ubuntu18.04 successfully, and when run 'psi4 --test', only _dftd3_ and _grimme_3c_ failed. I have found that psi4-v1.3 integrated dftd3 shown error when run ""dftd3""under WSl:. **_Segmentation fault (core dumped)_**. Then I rebuild _dftd3_ under WSL and use the newly build _dftd3_, then the 'psi4 --test' show all pass. So, this is just a build-bug report.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1587:190,error,error,190,https://psicode.org,https://github.com/psi4/psi4/issues/1587,2,"['error', 'fault']","['error', 'fault']"
Availability,"Hi all,. I just built Psi4 on mac os x, and everything seem to build and test fine. However, in doing a calculation I received the following error: . ```; An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; OEProp.__init__(OEProp, str); did not match C++ signature:; __init__(_object*, boost::shared_ptr<psi::Wavefunction>): File ""<string>"", line 28, in <module>. File ""/usr/local/psi4/share/psi4/python/p4util/util.py"", line 41, in oeprop; oe = psi4.OEProp(wfn); ```. Input was:. ```; import psi4. molecule {; C 0.012220093121 -0.717626540721 0.000000000000; O -0.062545506204 0.679938040344 0.000000000000; H 0.518735639503 -1.098516178616 0.883563931671; H 0.518735639503 -1.098516178616 -0.883563931671; H -1.002097021106 -1.091505681690 0.000000000000; H 0.811765758420 1.042084199023 0.000000000000; }. set globals {; basis 6-31g*; }. energy('scf'); oeprop(""MULLIKEN_CHARGES""); ```. Commenting out the `oeprop` line not surprisingly gets rid of the error. . I doubt any of the rest of this matters, but... I did get two errors building, in case they're relevant, but I've seen them in other open issues:. ```; The following tests FAILED:; 254 - pywrap-opt-sowreap (Failed); 263 - sapt4 (Failed); Errors while running CTest; make: *** [test] Error 8; ```. Command used to configure: `./setup -DBUILD_CUSTOM_BOOST=TRUE --python /usr/bin/python objdir`; Compiler: gcc/g++/gfortran from hpc.sourceforge.net; OS: OS X 10.10.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260:141,error,error,141,https://psicode.org,https://github.com/psi4/psi4/issues/260,6,"['Error', 'error']","['Error', 'Errors', 'error', 'errors']"
Availability,"Hi all,. Just a report. Current conda v2rdm_casscf build was not compatible with the newly psi4-1.4a2.dev215 version. > Traceback (most recent call last):; > File ""/root/miniconda3/envs/psi4/bin/psi4"", line 184, in <module>; > import psi4; > File ""/root/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/__init__.py"", line 82, in <module>; > from .driver import endorsed_plugins; > File ""/root/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; > import v2rdm_casscf; > File ""/root/miniconda3/envs/psi4/lib//python3.7/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; > psi4.core.plugin_load(sofile); > RuntimeError:; > Fatal Error: load_plugin: Cannot open library: /root/miniconda3/envs/psi4/lib/python3.7/site-packages/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZN3psi8ERISieveC1ESt10shared_ptrINS_8BasisSetEEd; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1573157589938/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; > The most recent 5 function calls were:; > ; > ; > forrtl: severe (174): SIGSEGV, segmentation fault occurred; > Image PC Routine Line Source; > libgdma.so 00007FDBC5B360DC for__signal_handl Unknown Unknown; > libpthread-2.27.s 00007FDBD8DF2890 Unknown Unknown Unknown; > ld-2.27.so 00007FDBD9016A31 Unknown Unknown Unknown; > libc-2.27.so 00007FDBD8B472DF _dl_catch_excepti Unknown Unknown; > libc-2.27.so 00007FDBD8B4736F _dl_catch_error Unknown Unknown; > libdl-2.27.so 00007FDBD87D1735 Unknown Unknown Unknown; > libdl-2.27.so 00007FDBD87D10B3 dlclose Unknown Unknown; > core.cpython-37m- 00007FDBC6A8034A Unknown Unknown Unknown; > core.cpython-37m- 00007FDBC672D382 Unknown Unknown Unknown; > core.cpython-37m- 00007FDBC6756337 Unknown Unknown Unknown; > core.cpython-37m- 00007FDBC6762AB4 Unknown Unknown Unknown; > python3.7 00007FDBD94D3B65 PyCFunction_Call Unknown Unknown; > python3.7 00007FDBD95B2E74 Unknown Unknown Unknown; > python3.7 00007FDBD9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1750:699,Error,Error,699,https://psicode.org,https://github.com/psi4/psi4/issues/1750,2,['Error'],['Error']
Availability,"Hi all,. Just a report. Current conda v2rdm_casscf build was not compatible with the production psi4-1.3.2+ecbda83 version(Tested under Win10 WSL Ubuntu1804). ```; Traceback (most recent call last):; File ""/root/miniconda3/envs/psi/bin/psi4"", line 177, in <module>; import psi4; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F0370F460DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F03763F2890 Unknown Unknown Unknown; ld-2.27.so 00007F0376616A31 Unknown Unknown Unknown; libc-2.27.so 00007F03761472DF _dl_catch_excepti Unknown Unknown; libc-2.27.so 00007F037614736F _dl_catch_error Unknown Unknown; libdl-2.27.so 00007F0375DD1735 Unknown Unknown Unknown; libdl-2.27.so 00007F0375DD10B3 dlclose Unknown Unknown; core.cpython-36m- 00007F0371E280E7 Unknown Unknown Unknown; core.cpython-36m- 00007F037202C9B2 Unknown Unknown Unknown; core.cpython-36m- 00007F03720539F6 Unknown Unknown Unknown; core.cpython-36m- 00007F0371AFD0D6 Unknown Unknown Unknown; python3.6 00007F03769C4B36 PyCFunction_Call Unknown Unknown; python3.6 00007F03769C1A5E PyObject_Call Unknown Unknown; python3.6 00007F0376AC1834 Unknown Unknown Unknown; python3.6 00007F0376ABF37F Py_FinalizeEx Unknown Unknown; python3.6 0000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1775:719,Error,Error,719,https://psicode.org,https://github.com/psi4/psi4/issues/1775,2,['Error'],['Error']
Availability,"Hi all,. Running the following per the docs works as expected:; ```; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env; >>> psi4 --version; 1.6.1; ```. And I'm able to use psi4 in PsiAPI mode as expected (can run the h2o geometry opt and freq calcs) after entering a python shell. However, when I try to use Psi4 in Psithon mode like so, I obtain an error:. ```; >>> psi4 -i input.dat -o output.dat; A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.1; ```. Is this a compile issue in the Psi4 executable on conda?. In case it's helpful, I'm using a Mac (v.11.3.1) and running conda (4.12.0) with python 3.9.13. The input file I was trying to use contains:. ```; memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. The tests module ran 92 / 4121 tests, and two failed (test_gdma and test_psi4_cc), but these seem unrelated to the current issue.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2661:365,error,error,365,https://psicode.org,https://github.com/psi4/psi4/issues/2661,1,['error'],['error']
Availability,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789:28,error,error,28,https://psicode.org,https://github.com/psi4/psi4/issues/789,10,"['Error', 'error']","['Error', 'error']"
Availability,"Hi all，. I have found that the qcengine 0.13.0 was not compatible with PSI4 dev version,. when use qcengine 0.13.0, show below error:. ```; ======================================================== ERRORS ========================================================; _____________ ERROR collecting miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_addons.py ______________; ImportError while importing test module '/root/miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_addons.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_addons.py:7: in <module>; from qcengine.testing import using_mp2d; E ImportError: cannot import name 'using_mp2d' from 'qcengine.testing' (/root/miniconda3/envs/psi4/lib//python3.7/site-packages/qcengine/testing.py); ______________ ERROR collecting miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_mp2d.py _______________; ImportError while importing test module '/root/miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_mp2d.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_mp2d.py:7: in <module>; from qcengine.testing import using_mp2d; E ImportError: cannot import name 'using_mp2d' from 'qcengine.testing' (/root/miniconda3/envs/psi4/lib//python3.7/site-packages/qcengine/testing.py); _________ ERROR collecting miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_qcng_dftd3_mp2d.py _________; ImportError while importing test module '/root/miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_qcng_dftd3_mp2d.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; miniconda3/envs/psi4/lib/python3.7/site-packages/psi4/tests/test_qcng_dftd3_mp2d.py:10: in <module>; from qcengine.testing import is_program_new_enough, using_dftd3, using_dftd3_321, usi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1782:127,error,error,127,https://psicode.org,https://github.com/psi4/psi4/issues/1782,4,"['ERROR', 'error']","['ERROR', 'ERRORS', 'error']"
Availability,"Hi everyone,. You can use my CASPT2 test test13 (; https://github.com/SebWouters/CheMPS2/blob/master/tests/test13.cpp.in ),; but with DMRG instead of FCI as solver. Just make sure to use a very small; Davidson residual tolerance for the last sweep (1e-9 or 1e-10). Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223890082:219,toler,tolerance,219,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223890082,1,['toler'],['tolerance']
Availability,"Hi psi4 experts. psi4 shows promising functions and I am trying to install psi4 on my Ubuntu 20 with the command. `conda create -n p4env python=x.x psi4 -c psi4/label/dev`. But I got error messages:; ```. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']; python=3.9The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. I am new to psi4 and I hope someone can help me to solve this problem. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390:183,error,error,183,https://psicode.org,https://github.com/psi4/psi4/issues/2390,2,"['Avail', 'error']","['Available', 'error']"
Availability,"Hi, ; I am trying to install and use Psi4 on Google colab but unable to do so. Here is what I've been trying:; ```; #Installing conda ; !wget -c https://repo.anaconda.com/miniconda/Miniconda3-py37_4.12.0-Linux-x86_64.sh; !chmod +x Miniconda3-py37_4.12.0-Linux-x86_64.sh; !bash /content/Miniconda3-py37_4.12.0-Linux-x86_64.sh -bfp /usr/local. !conda install --channel defaults conda python=3.8 --yes; !conda update --channel defaults --all --yes. #Installing Psi4; !conda install psi4 python=3.8 -c psi4. import psi4; ```; Error:; ```; ImportError Traceback (most recent call last); [<ipython-input-18-ae2916a96900>](https://localhost:8080/#) in <module>(); ----> 1 import psi4. [/usr/local/lib/python3.8/site-packages/psi4/__init__.py](https://localhost:8080/#) in <module>(); 52 ; 53 # Init core; ---> 54 from . import core; 55 ; 56 from psi4.core import get_num_threads, set_num_threads. ImportError: cannot import name 'core' from 'psi4' (/usr/local/lib/python3.8/site-packages/psi4/__init__.py); ```; [Here](https://github.com/psi4/psi4/files/8878265/conda_list.txt) is a text file that contains the results of `conda list`. Versions in use:; Psi4: v1.6; Python: v3.8.13; conda: v4.13.0. ```; which conda python psi4; /usr/local/bin/conda; /usr/local/bin/python; /usr/local/bin/psi4; ```. Please suggest where I might be going wrong. Regards,; Hemant",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598:522,Error,Error,522,https://psicode.org,https://github.com/psi4/psi4/issues/2598,1,['Error'],['Error']
Availability,"Hi, @raimis. We did use Boost until a couple of years ago. Its primary role was to link the C++ layer to Python, but it became extremely annoying to support and we ripped it out, using the header-only Pybind11 instead. A *lot* of users ran into build problems with mismatches in the boost versions found at configure time and that linked at compile time. These kinds of problems are easy to encounter if multiple boost implementations are available on a system, and the errors that result are very cryptic. For this reason, we went to a lot of trouble to remove all traces of Boost and it would be best not to reintroduce if possible. Looking at the list of problematic features quickly, they seem like they could be handled in C++11 (chrono library) or in the python layer. Would it be easy in your estimation to just compile away the time reporting for MSVC builds, and we can make a different PR later on to reintroduce them by using C++11 instead? Same for the stack trace. I'm not sure how/where the filesystem is used, so that could be a trickier one to handle - I'll look at it when I get a chance. We were trying to migrate OS interactions like filesystem stuff from C++ to Python where possible, so this could be good motivation for us to start seriously looking at doing so. Thanks again for your hard work with the MSVC conversion - it looks like you've had a lot of work to do. I'm not trying to make life harder for you, but I think it's fair to say that our experience with Boost was quite negative in the later years, so it is worth debating alternatives.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-403834794:439,avail,available,439,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-403834794,2,"['avail', 'error']","['available', 'errors']"
Availability,"Hi, I am trying to compute energy and force scans for some diatomic compounds using psi4.gradeint. In this case, a NO radical is used, with MP2 and the aug-cc-pvtz basis. The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? The main part of the script is here:; ```; converged = True; try:; grad, wfn = psi4.gradient(""MP2"", molecule=geom, return_wfn=True); except psi4.driver.SCFConvergenceError as ex:; converged = False; print(""SCF convergence error at r = %g converged = %s"" % (r, str(converged))); if converged:; myener = wfn.energy(); forces = grad.to_array(); table.append([r, myener, -forces[0][2]]); ```. I would be thankful for any input!. ![energy](https://user-images.githubusercontent.com/3735358/225842500-985ebc66-c219-455b-8ada-39eba9729b88.png); [psi4energy.zip](https://github.com/psi4/psi4/files/10998961/psi4energy.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901:658,error,error,658,https://psicode.org,https://github.com/psi4/psi4/issues/2901,1,['error'],['error']
Availability,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1984:412,fault,fault,412,https://psicode.org,https://github.com/psi4/psi4/issues/1984,4,"['Error', 'fault']","['Error', 'fault']"
Availability,"Hi, I was wondering if anyone is facing any problems accessing ps4 forum webpage. Anytime I try to open any link on psi4 forum it shows me this error. I have used multiple devices and internet connections to access this.; <img width=""1646"" alt=""Screen Shot 2023-01-31 at 12 27 09 PM"" src=""https://user-images.githubusercontent.com/96807514/215875127-ef6dcd14-6e27-480f-a31e-860c85ac0bce.png"">",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2868:144,error,error,144,https://psicode.org,https://github.com/psi4/psi4/issues/2868,1,['error'],['error']
Availability,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144729559:212,error,error,212,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559,4,['error'],['error']
Availability,"Hi, I'm one of the core developers for Psi. One of my personal objectives for this year is to _replace_ our current I/O system, which has not been significantly redesigned since its original creation in the '90s. While it fulfilled its original design goals of simplifying the API compared to its predecessor, its _steep learning curve_ and _difficult to understand error messages_ are obstacles to continued Psi development, given that our graduate student-led development inherently has high turnover. I can tell you now that your project is of immediate interest. I'll look over the project in detail and have more detailed thoughts for you by this time next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929:366,error,error,366,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929,2,['error'],['error']
Availability,"Hi, I'm the freshman in psi4. ; I want to try to put auxiliary basis set directly instead of creating a gbs file.; Should this idea make sense in psi4?; I try the file below, but always get syntax error. I find auxiliary basis set for iodine, and give it a name, ijkfit. set {; df_basis_sapt {; assign I ijkfit{; spherical. I 0. S 3 1.00; 78.663624500 0.22672393800E-01; 48.541031400 -0.18152349840; 29.953788800 0.98312521180; S 1 1.00; 18.484236200 1.0000000000; S 1 1.00; 11.406633900 1.0000000000; S 1 1.00; 7.0391304000 1.0000000000; S 1 1.00; 4.3439548000 1.0000000000; S 1 1.00; 2.6807457000 1.0000000000; S 1 1.00; 1.6543571000 1.0000000000; S 1 1.00; 1.0209523000 1.0000000000; S 1 1.00; 0.63006230000 1.0000000000; S 1 1.00; 0.38883260000 1.0000000000; S 1 1.00; 0.23996180000 1.0000000000; P 3 1.00; 58.564943900 0.47818500000E-04; 32.524986300 0.91692464400E-01; 18.063612600 -0.99578737170; P 1 1.00; 10.032273100 1.0000000000; P 1 1.00; 5.5718636000 1.0000000000; P 1 1.00; 3.0946187000 1.0000000000; P 1 1.00; 1.7187729000 1.0000000000; P 1 1.00; 0.95462700000 1.0000000000; P 1 1.00; 0.53021480000 1.0000000000; P 1 1.00; 0.29449110000 1.0000000000; P 1 1.00; 0.16356630000 1.0000000000; P 1 1.00; 0.90848100000E-01 1.0000000000; D 2 1.00; 36.660416700 0.38284697300E-01; 20.124038000 0.99926687220; D 1 1.00; 11.073863500 1.0000000000; D 1 1.00; 6.1069764000 1.0000000000; D 1 1.00; 3.3742113000 1.0000000000; D 1 1.00; 1.8672931000 1.0000000000; D 1 1.00; 1.0347167000 1.0000000000; D 1 1.00; 0.57394910000 1.0000000000; D 1 1.00; 0.31859720000 1.0000000000; D 1 1.00; 0.17692960000 1.0000000000; D 1 1.00; 0.98270400000E-01 1.0000000000; F 2 1.00; 23.924298800 0.52150940000E-03; 12.079185400 0.99999986400; F 1 1.00; 6.0988158000 1.0000000000; F 1 1.00; 3.0793646000 1.0000000000; F 1 1.00; 1.5241930000 1.0000000000; F 1 1.00; 0.76960140000 1.0000000000; F 1 1.00; 0.39640310000 1.0000000000; F 1 1.00; 0.20015500000 1.0000000000; G 2 1.00; 13.390088800 0.36144881600E-01; 6.82854",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/823:197,error,error,197,https://psicode.org,https://github.com/psi4/psi4/issues/823,1,['error'],['error']
Availability,"Hi, PSI4 developers. My input:. ```; memory 1000 mb; molecule naphtalene {; 0 1; H -3.36584264 1.24097876 0.00000000; H -3.36584264 -1.24097876 0.00000000; C -2.42446866 -0.70593661 0.00000000; C -2.42446866 0.70593661 0.00000000; H -1.23966218 -2.48102176 0.00000000; C -1.24087056 -1.39724699 0.00000000; H -1.23966218 2.48102176 0.00000000; C -1.24087056 1.39724699 0.00000000; C 0.00000000 -0.71416200 0.00000000; C 0.00000000 0.71416200 0.00000000; H 1.23966218 -2.48102176 0.00000000; C 1.24087056 -1.39724699 0.00000000; H 1.23966218 2.48102176 0.00000000; C 1.24087056 1.39724699 0.00000000; C 2.42446866 -0.70593661 0.00000000; C 2.42446866 0.70593661 0.00000000; H 3.36584264 1.24097876 0.00000000; H 3.36584264 -1.24097876 0.00000000; }. set {; basis sto-3g; scf_type df; ROOTS_PER_IRREP = [ 0, 0, 0, 0, 0, 0, 1, 1 ]; }. energy('eom-cc3'); ```. crash on second excitation state calculation with error:. ```; PSIO_ERROR: unit = 128, errval = 18; PSIO_ERROR: 18 (Incorrect block end address). An error has occurred. Traceback:; <type 'exceptions.RuntimeError'>:.; Fatal Error: PSIO Error; Error occurred in file: /home/vladimir/git/psi4public/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_rd(psi::dpdfile4*, int); : File ""<string>"", line 43, in <module>. File ""/usr/local/psi4/share/psi4/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/psi4/share/psi4/python/proc.py"", line 2243, in run_eom_cc; psi4.cceom(ref_wfn); ```. with respect, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307:906,error,error,906,https://psicode.org,https://github.com/psi4/psi4/issues/307,6,"['Error', 'error']","['Error', 'error']"
Availability,"Hi, Rob. All ECP-related issues are marked with the `ecpint-needed` tag. There are currently five open ones. I'm going to go through them and attempt to reproduce them with the v1.6 release, so we can assess if ECPs are broken. You raise a good point: debugging ECP issues is going to be harder if we also change basis functions. @loriab, can we put a moratorium on #2537 until we've had more time to investigate the ECP issues and evaluate the performance of DDD ""in the wild""? While I would not expect DDD to introduce strange correctness errors like I would expect of integral convention swaps, I am too paranoid to neglect the possibility. Say hi to Nick Stair for me. I'll report back once I've finished my preliminary investigations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145:541,error,errors,541,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145,1,['error'],['errors']
Availability,"Hi, all! I mentioned this issue yesterday at the Psi4 Dev meeting, and I wanted to post the issue here, with more collected information. The crux of the issue, as I have determined, is that the COSX code, when using the ROBUST grid pruning scheme in conjunction with 146 spherical points on either of its grids (initial or final), simply breaks. Consider the following input:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type cosx; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; cosx_spherical_points_final 146; cosx_radial_points_final 50; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. A simple expansion of the final COSX grid compared to default. This calculation breaks upon entering the final SCF iteration (where the tight grid is used) with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! ADIIS minimization failed. File a bug, and include your entire input and output !; ! files. !; ! !; !----------------------------------------------------------------------------------!; ```. The following input, an expansion of both the initial and final grids, also fails:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type cosx; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; cosx_spherical_points_initial 146 ; cosx_radial_point_initial 50 ; cosx_spherical_points_final 302; cosx_radial_points_final 75 ; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. This one fails in the SAD-guess iteration, with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::diagonalize: DSYEV failed! !; ! Error occurred in file: !; ! /theoryfs2/ds/dpoole",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890:220,ROBUST,ROBUST,220,https://psicode.org,https://github.com/psi4/psi4/issues/2890,3,"['ROBUST', 'error', 'robust']","['ROBUST', 'error', 'robust']"
Availability,"Hi, thank you very much for your response. > I would ordinarily advise putting psi4 is a separate conda env, not the base one. That seems awkward in colab (has to be activated per cell!) but is a possibility, https://stackoverflow.com/questions/53031430/conda-environment-in-google-colab-google-colaboratory. I tried this and am able to install psi4 and even import it without any errors. [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test`; kindly let me know if this mean that psi4 is in functional state.; Here is the `conda list` output in case it is needed.; [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use. Just to make sure, psi4 is no longer supported on python3.7, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152894724:381,error,errors,381,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152894724,1,['error'],['errors']
Availability,"Hi, this is more of a question than an issue (almost certainly due to user error), but I haven't been able to get too far by reading the documentation. . I am trying to achieve the following using the Psi4 Python API: generate a basis set for a molecule, import a predefined grid into Psi4, and evaluate all the basis functions in a basis set on all grid points. Here's a minimal example of that (`wts.npy` and `pts.npy` are in the attached zip file). ```; def minimal_repro():; basis_set = 'cc-pv5z-jkfit'; mol_desc = '''; C 1.54012679 -1.01667266 0.93163498; C 4.07235980 -0.09826576 -0.02267671; H 1.37950007 -0.71809593 2.97064947; H 0.00000000 0.00000000 0.00000000; H 1.31146993 -3.03678988 0.54991030; H 5.61248659 -1.11682814 0.90706854; H 4.30290639 1.92185147 0.36093769; H 4.23298652 -0.39684249 -2.06169120; '''; p4mol = psi4.geometry(mol_desc). # not sure what this parameter should be set to; delta = 0.1. wts = np.load('wts.npy'); pts = np.load('pts.npy'). basis_set = psi4.core.BasisSet.build(p4mol, 'ORBITAL', basis_set); basis_extents = psi4.core.BasisExtents(basis_set, delta). xs = psi4.core.Vector.from_array(pts[:, 0]); ys = psi4.core.Vector.from_array(pts[:, 1]); zs = psi4.core.Vector.from_array(pts[:, 2]); ws = psi4.core.Vector.from_array(wts). blockopoints = psi4.core.BlockOPoints(xs, ys, zs, ws, basis_extents); max_points = blockopoints.npoints(); max_functions = basis_set.nbf(); funcs = psi4.core.BasisFunctions(basis_set, max_points, max_functions); funcs.compute_functions(blockopoints). vals = np.array(funcs.basis_values()['PHI']). all_zeros = []; for col_idx in range(vals.shape[1]):; if np.allclose(vals[:, col_idx], 0.0):; all_zeros.append(col_idx). print('basis fcns that are all zeros', all_zeros); ```. My question is regarding the `delta` parameter to the `BasisExtents` object. Modulating this parameter seems to change the number of basis functions that evaluate to zero at all grid points. For example, at delta = 0.01, I get:. ```; ('basis fcns that are ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1051:75,error,error,75,https://psicode.org,https://github.com/psi4/psi4/issues/1051,1,['error'],['error']
Availability,"Hi,. Anyone noticed that programs like _gcp_ and _xcfour_ are getting loaded when psi4 is starting? Or is it just me? I only noticed because psi4 will stop/crash if e.g. xfcour does not find all libraries (mpi, mkl, etc.). gcp will print an error about its missing input file and be ""defunc"" in my bash. Note that it happens even when none of the programs will actually be used according to the input. I am at a loss what to look at in my psi4 installation. version: 1.1a2.dev309, gnu+mkl build",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/656:241,error,error,241,https://psicode.org,https://github.com/psi4/psi4/issues/656,1,['error'],['error']
Availability,"Hi,. I am running Psi4 on Microsoft Azure. We have a 32 CPU and 128 GB of memory for running our workflow Ubuntu 20.04. When I run our code I get for optimizing `psi4.optimize` I get an initial segmentation fault. Python version 3.7, and psi4 version 1.7. It's odd because with . psi4.set_memory('128GB'); psi4.get_memory(). I can see psi4 has that allocated memory. When I run:. `psi4 --test`. ```; /_pytest/config/__init__.py"", line 620, in _importconftest; assert mod not in mods; AssertionError; ```. This gets returned. What is going on here, any hints?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3154:207,fault,fault,207,https://psicode.org,https://github.com/psi4/psi4/issues/3154,1,['fault'],['fault']
Availability,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:60,error,error,60,https://psicode.org,https://github.com/psi4/psi4/issues/1959,7,"['Error', 'error']","['Error', 'error']"
Availability,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870:262,error,error,262,https://psicode.org,https://github.com/psi4/psi4/issues/1870,3,['error'],['error']
Availability,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1902:33,error,error,33,https://psicode.org,https://github.com/psi4/psi4/issues/1902,12,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"Hi,. I have a molecule that has Gallium ion approaching the surface of an aromatic ring. There are 3 in the structure. I want to perform UV excitation on them to get an initial wavelength but running into problems. Is my error so far. My code looks something like this:. ```python. psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau',; 'freeze_core': 'true',; 'reference': 'uhf',; 'save_jk': True,; 'fail_on_maxiter': 'false'; }). molecule = 'X'. energy, wave_function = psi4.energy(; 'hf/6-311g',; return_wfn=True,; molecule=self.molecule; ). rpa = tdscf_excitations(wave_function, states=[10]); poles = [r[""EXCITATION ENERGY""] for r in rpa]; opa_residues = [np.linalg.norm(r[""ELECTRIC DIPOLE TRANSITION MOMENT (LEN)""])**2 for r in rpa]; ecd_residues = [r[""ROTATORY STRENGTH (LEN)""] for r in rpa]; opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ```. Stacktrace Error:. ```python; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 720, in tdscf_excitations; res_1 = _solve_loop(wfn, ptype, solve_function, singlets_per_irrep, maxiter, restricted, ""singlet""); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 326, in _solve_loop; ret = solve_function(engine, nstates, guess_, maxiter); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 690, in rpa_solver; return solvers.hamiltonian_solver(engine=e,; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/p4util/solvers.py"", line 989, in hamiltonian_solver; raise RuntimeError(msg); RuntimeError: The H2 matrix is not Positive Definite. This means the reference state is not stable.; ```. Running things I would maybe predict at UHF is not right and I don't think this is a coordinate op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134:221,error,error,221,https://psicode.org,https://github.com/psi4/psi4/issues/3134,2,"['Error', 'error']","['Error', 'error']"
Availability,"Hi,. I have been comparing the basis sets _aug-cc-pVTZ_ and _aug-cc-pVQZ_. While I was running frequency calculations on a large set of molecules, I found out that some of my molecules never converged. This is not surprising, as there will always be complex geometries that will have a harder time converging within the default number of iterations (100). One of the molecules which never converged and stood out to me was ammonia (for aug-cc-pVQZ). The optimization of the structure was quick and easy, but the frequency calculation never converged due to the density matrix criterium (got down to ~10e-7, but never 10e-8). The atom coordinates I initially used was retrieved from a force field calculation. As these coordinates didn't work (even after increasing the number of iterations), I then changed the coordinates of ammonia to [this reference](https://www.researchgate.net/figure/Cartesian-coordinates-and-atomic-masses-of-ammonia_tbl2_259630381), but it still didn't do the trick as it got stuck at other atomic displacements instead. After playing around with these coordinates for a while, I finally got my run to converge. Questions is, is there a better (automated) way to achieve this kind of convergence, instead of doing this manually for the other remaining molecules? Changing the number of iterations feels a bit naive (and inefficient) and randomly displacing the atoms pre-Psi4 could mean a huge increase in CPU hours (especially for molecules > 100 Da). How would lowering the density matrix criterium (e.g. 10e-7) affect the results?. All tips appreciated! . Example of the ammonia Psi4 infile that finally worked:; ```; molecule mol_ammonia {; 0 1; H 0.000000000 0.000000000 1.208000000; N 0.000000000 0.000000000 0.000000000; H 1.150353000 0.000000000 -0.536000000; H -0.67517600 -1.0230290000 -0.536000000. units angstrom; no_reorient; }. set globals {; 	basis aug-cc-pVQZ; 	dft_spherical_points 434; 	dft_radial_points 85; }. set_memory(80000000000); try:; optimize('pwpb9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2016:591,down,down,591,https://psicode.org,https://github.com/psi4/psi4/issues/2016,1,['down'],['down']
Availability,"Hi,. I just got an MRCC license and started toying around with the Psi4 interface. Unfortunately, it is not working for me. ; ```; molecule {; 0 1; O; H 1 1.0; H 1 1.0 2 110.0; }. set qc_module mrcc; optimize('ccsdt/cc-pvdz'); freq('ccsdt/cc-pvdz'); ```; Using the mrcc.2023-08-28.binary.tar.gz binary release, I just get a big bunch of file not found errors; ```; $ psi4 -n6 h2o.in ; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:352,error,errors,352,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['error'],['errors']
Availability,"Hi,. I just updated my psi4 conda installation using:. `conda install psi4 python=3.10 -c conda-forge/label/libint_dev -c conda-forge `. imports seem to work fine:. ```; import psi4; import forte; ```; however, when I run the following:. ```; psi4.set_memory('500 MB'); numpy_memory = 2 # No NumPy array can exceed 2 MB in size; psi4.core.set_output_file('output.dat', False); # specify the basis; basis = 'cc-pVTZ'; # Set computation options; psi4.set_options({'basis': basis,; 'scf_type': 'pk',; 'save_jk': 'true',; 'guess': 'core',; 'print' : 5,; 'FREEZE_CORE' : 'True',; 'e_convergence': 1e-8,; 'd_convergence': 1e-10,; 'LOCAL_MAXITER':10000}); geometry = '''; O -4.6674893014 0.2942847846 3.0623807031; H -3.892960984 0.903739148 3.0964143699; H -4.4005368234 -0.1221007613 2.241525046; '''; mol = psi4.geometry(geometry+""symmetry c1""); SCF_E_psi = psi4.energy('scf'); ```; it fails with:. ```; File ~/opt/miniconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/p4util/procutil.py:531, in prepare_options_for_set_options(); 529 current_module = psi_options.get_current_module(); 530 # Get the current Forte options from Forte; --> 531 forte_options = forte.ForteOptions(); 532 forte.register_forte_options(forte_options); 533 psi_options.set_current_module(""FORTE""). AttributeError: module 'forte' has no attribute 'ForteOptions'; ```. I can minimally reproduce the error with:. ```; mport forte; forte_options = forte.ForteOptions(); ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); Cell In[7], line 2; 1 import forte; ----> 2 forte_options = forte.ForteOptions(); AttributeError: module 'forte' has no attribute 'ForteOptions'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010:1377,error,error,1377,https://psicode.org,https://github.com/psi4/psi4/issues/3010,1,['error'],['error']
Availability,"Hi,. I suspect that this problem is related to the definition of your basis set. The `basis` block in your input file is part of psi4's special syntax to define [custom, mixed basis sets](https://psicode.org/psi4manual/1.5.0/basissets.html#mixing-basis-sets):; ```; basis {; assign def2-SVP; }; ```. I can run your inputs successfully if I swap out that `basis` block for the standard basis syntax:; ```; set {; basis def2-SVP; }; ```. Here's the SCF output from the second input, which starts the SCF from the serialized orbitals:; ```; ==> Iterations <== . Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -270.15381570481316 -2.70154e+02 1.44676e-07 ; @DF-RKS iter 1: -270.15381570483822 -2.50679e-11 1.66794e-07 DIIS; Energy and wave function converged.; ```. This fix should be sufficient if all of your calculations require standard, pre-defined basis sets. If you do need to use custom, mixed basis sets, we'll need to investigate this error further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1120477445:944,error,error,944,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1120477445,1,['error'],['error']
Availability,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:115,error,errors,115,https://psicode.org,https://github.com/psi4/psi4/issues/581,8,"['Error', 'error']","['Error', 'Errors', 'errors']"
Availability,"Hi,. I've been trying to calculate the energies of monoatomic compounds. All of the atoms ran successfully, except for hydrogen with multiplicity 2. My in-file:; ```; molecule mol_atomic_hydrogen_doublet {; 0 2; H 0.000000000 0.000000000 0.000000000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVQZ; dft_spherical_points 434; dft_radial_points 85; reference uhf; }. set_memory(100000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); ```. The error I got (including previous lines):; ```; *** tstart() called on host; *** at Fri Aug 21 16:21:36 2020. => Loading Basis Set <=. Name: (AUG-CC-PVQZ AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; UMP2 Wavefunction, 28 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 80; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/dri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995:629,error,error,629,https://psicode.org,https://github.com/psi4/psi4/issues/1995,1,['error'],['error']
Availability,"Hi,. MBIS calculation fails for iodine containing molecules with DZVP basis set using `psi4 1.4.1` and `psi4 1.6.1`. Here is a minimal reproducible example:; ```; molecule dummyol {; 0 1; C 0. -1.94 0.; I 0. 0.24 0.; H -1.04 -2.27 0.; H 0.52 -2.27 0.90; H 0.52 -2.27 -0.90; }; set {; guess sad; scf_type df; basis DZVP # works for def2-svp; e_convergence 8; d_convergence 8; }; e, wfn = energy('scf', return_wfn=True); oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). ```; The error message reads:; ```; Traceback (most recent call last):; File ""/home/anaconda3/envs/psi4-09-26-22/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/prop_util.py"", line 121, in free_atom_volumes; psi4.oeprop(at_wfn, 'MBIS_CHARGES', title=a_sym + "" "" + method, free_atom=True); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 74, in oeprop; oe.compute(). RuntimeError: ; Fatal Error: Atomic Number 53 unsupported by MBIS; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on line: 1871; The most recent 5 function calls were:. psi::OEProp::compute_mbis_multipoles(bool); psi::OEProp::compute(). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""BASIS"", ""DZVP""); core.set_global_option(""E_CONVERGENCE"", 8); core.set_global_option(""D_CONVERGENCE"", 8); e, wfn = energy('scf', return_wfn=True); --> oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Atomic Number 53 unsuppor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728:498,error,error,498,https://psicode.org,https://github.com/psi4/psi4/issues/2728,1,['error'],['error']
Availability,"Hi,. Thanks for this great open source program!. We got an unexpected error when running a calculation on a water cluster recently. It seems to give a segmentation fault immediately before the start of the SCF iterations. I've attached the input and output files and the output to screen. We have run some smaller water clusters where the error does not occur. [input.txt](https://github.com/psi4/psi4/files/7097168/input.txt); [output.txt](https://github.com/psi4/psi4/files/7097170/output.txt); [output_to_screen.txt](https://github.com/psi4/psi4/files/7097171/output_to_screen.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/issues/2288,3,"['error', 'fault']","['error', 'fault']"
Availability,"Hi,. The link to . http://www.thch.uni-bonn.de/tc/index.php?section=downloads&subsection=getd3&lang=english. listed in. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dftd3.rst. does not lead to an existing page.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1084:68,down,downloads,68,https://psicode.org,https://github.com/psi4/psi4/issues/1084,1,['down'],['downloads']
Availability,"Hi,. When I submit a wB97M-V calculation using the SG-1 grid (recommended in the wB97M-V paper: http://aip.scitation.org/doi/10.1063/1.4952647), I receive the following error:. ```RuntimeError: ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /tmp/garden-install.fcce11d8cfbe/psi4-1.1-desres05-c7/psi4/src/psi4/libfock/cubature.cc on line: 2488; The most recent 5 function calls were:. psi::MolecularGrid::buildGridFromOptions(psi::MolecularGrid::MolecularGridOptions const&); psi::DFTGrid::buildGridFromOptions(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/827:169,error,error,169,https://psicode.org,https://github.com/psi4/psi4/issues/827,3,"['Error', 'error']","['Error', 'error']"
Availability,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/648:59,error,error,59,https://psicode.org,https://github.com/psi4/psi4/issues/648,4,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"Hi,; I cannot remember correctly as I have been digging through net in search of a [different issues](http://forum.psicode.org/t/fatal-error-psioutstream-failed-to-open-file/2572) and I came across this.; It worked your way, thanks for helping me out.; M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2668#issuecomment-1209169955:135,error,error-psioutstream-failed-to-open-file,135,https://psicode.org,https://github.com/psi4/psi4/issues/2668#issuecomment-1209169955,1,['error'],['error-psioutstream-failed-to-open-file']
Availability,"Hi,; I have created a brand new environment with psi4 1.6.1 on windows10 machine using:; ```; conda create -n psi4 python=3.8; activate psi4; conda install psi4 -c conda-forge -c psi4; ```; I had problems with psi4.core.be_quiet(), so I thought that maybe I need to set paths.; I tried to use psi4_io to set paths, but get an error:; ```; >>>import psi4; >>>import os; >>> psi4_io.set_default_path; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; NameError: name 'psi4_io' is not defined; ```; Cheers,; M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2668:326,error,error,326,https://psicode.org,https://github.com/psi4/psi4/issues/2668,1,['error'],['error']
Availability,"Hi,; could you take a look at the attached runs. The tar.gz file includes three geometry optmmization jobs of the same molecule from three different starting conformations. They all fail on our cluster due to memory issues. The cluster is using cgroups. I am asking slurm for 10gb and specifying ```memory 8.0 Gb```. Two of the jobs are have the following error message (rec19_4405620.log, rec284_4405895.log):; ```slurmstepd: error: Detected 1 oom-kill event(s) in step 4405620.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler. ```. while the third has this error (rec24_4405625.log):; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1550197239473/work/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::tocwrite(unsigned long); ```. - One job (rec284_pid139597.out) was killed before the first scf even started.; - the other two were killed during the first gradient evaluation (rec19_pid139597.out, rec24_pid139597.out) . These are just three jobs out of 500 similar ones that failed. I picked them to show a couple of divers failures. The input files are included as well (*.dat).; I tried the same thing with B3LYP and it worked.; Psi4 used: ```Psi4 1.3rc2```. Any ideas?; Thanks,; Alberto; [psi4.wb97.tar.gz](https://github.com/psi4/psi4/files/3040711/psi4.wb97.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590:356,error,error,356,https://psicode.org,https://github.com/psi4/psi4/issues/1590,7,"['Error', 'error', 'failure']","['Error', 'error', 'failures']"
Availability,"Hi. We run jupyter in a container. writing: import psi4; in a cell and then run it gives the error message (repeated at the ; bottom of mail). operating system:; NAME=""Ubuntu""; VERSION=""18.04.5 LTS (Bionic Beaver)"". psi4 version: 1.4+9485035. and. Python version = 3.9.6 | packaged by conda-forge | (default, Jul 11 ; 2021, 03:39:48); [GCC 9.3.0]; IPython version = 7.26.0. best regards; Sissel. ---------------------------------------------------------------------------; ImportError Traceback (most recent call ; last); /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call ; last); /tmp/ipykernel_64/253247311.py in <module>; ----> 1 import psi4. /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in ; [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61; 62 from psi4.core import set_output_file, get_num_threads, ; set_num_threads. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. On 2021-09-16 13:08, Jonathon Misiewicz wrote:; > A traceback is never adequate information for a bug report.; > ; > We need a Psi4 version number, exact steps to reproduce the error, and; > need to know what operating system you're using.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub [1], or unsubscribe; > [2].; > Triage notifications on the go with GitHub Mobile for iOS [3] or; > Android [4].; > ; > Links:; > ------; > [1] https://github.com/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607:93,error,error,93,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607,1,['error'],['error']
Availability,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:876,Avail,Available,876,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467,1,['Avail'],['Available']
Availability,"Hm, I don't get these errors when building in a proper buildroot with only Python 3 installed...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1565#issuecomment-469254424:22,error,errors,22,https://psicode.org,https://github.com/psi4/psi4/issues/1565#issuecomment-469254424,1,['error'],['errors']
Availability,"Hm, I think a solution to allow this would be very messy. . We would have to: ; 1. check for molecule names that would cause syntax errors.; 2. Figure out some way to fix the name so that is is a valid identifier ; 3. Find any mention of the original name in the rest of the input file and apply the same translation to it. Doing something like prepending `mol_` to the molecule name would allow things like you mention `2xh20` to work fine `2xh20 `—>`mol_2xh20`, but I think it would be a difficult to deal with every possible thing that a user could possibly enter. . The [documentation](http://www.psicode.org/psi4manual/master/psithoninput.html) describes the few special cases that the ""psithon"" input parser is prepared to deal with like the `molecule <name> {…}` block. It might be a good idea to mention that `molecule name {…}` essentially gets converted to `name = psi4.geometry(…)` to drive home that ""name"" needs to be a valid Python identifier, but in my opinion the syntax error makes that pretty clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286904185:132,error,errors,132,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286904185,4,['error'],"['error', 'errors']"
Availability,"Hmm thats actually kind of interesting. So I think the misunderstanding here is when you make `Matrix( num_irreps, nao, nmopi )`, as we do not support different symmetries along different axises nao is replicated along the axis so you have a `([nao, nao, …]` by `[nmopi[0], nmopi[1], …])` matrix. So when you do the AOTOMO, MO_RDM, AOTOMO.T transformation what you should _should_ end up with is a (nirrep, nao, nao) matrix where the ao contribution of each irrep is in a subsequent `(nao, nao)` block. However, since AO_RDM only has one dimension that `gemm` will only collect the first dimension (irrep). What you need to do is change:; `AO_RDM = SharedMatrix( new Matrix( nao, nao ) );`. to; `AO_RDM = SharedMatrix( new Matrix( num_irreps, nao, nao ) );`. and then sum through the irreps of AO_RDM. I don’t think we currently have a built-in routine to collapse irreps like this. Im hard pressed to call this last part a bug since this follows through on the matrix algebra and automatically summing is probably not wise. The first part where calling `gemm` on different irrep matrices should probably throw an error because this only works where the LHS has less irreps than the RHS; however, if the RHS has more irreps it will seg fault. As I said before, this is an interesting error as its a strange mix of opaque code and a small bug. Hopefully this is both the truth and makes sense, coffee should kick in soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/274#issuecomment-187694715:1114,error,error,1114,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187694715,3,"['error', 'fault']","['error', 'fault']"
Availability,"Hmm, I got an ADIIS error in windows (on a pytest) for my tests. Is this to be expected?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2550#issuecomment-1104634251:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/pull/2550#issuecomment-1104634251,1,['error'],['error']
Availability,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:500,error,error,500,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769,1,['error'],['error']
Availability,"Hmm, I'm struggling to get my tests to give me a good agreement. From the [original publication](http://dx.doi.org/10.1007/s00214-005-0681-9) for the cc-pvdz-PP pseudopotentials for the Cu (and other) metals, the ionisation energy of Cu should be 165.26 kcal/mol with CCSD(T). In Gaussian 09, with the basis set downloaded from EMSL, I get an energy of 165.75 kcal/mol, which I suppose is reasonable. In Psi4, I get an energy of 166.02 kcal/mol. In case of Au ionisation energy, the difference (200.23 kcal/mol in the paper, 202.92 kcal/mol in Psi4) is more than 1%. I'm quite stumped. If anyone has any idea what's going on, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376531582:312,down,downloaded,312,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376531582,1,['down'],['downloaded']
Availability,"Hmm, looks like a libint failure?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1700#issuecomment-531489364:25,failure,failure,25,https://psicode.org,https://github.com/psi4/psi4/pull/1700#issuecomment-531489364,1,['failure'],['failure']
Availability,"Hmm, so either; - the case of running higher-order SAPT on heavy atoms was never considered, in which case the `DF_BASIS_ELST` code needs copying over; - the heavy atom failure mode doesn't appear in higher-order SAPT b/c higher-order terms compensate or because the larger basis-sets targeted do their job (RI > JK for higher-zeta basis sets). Actually, this may have been what @tparker36 was recalling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-197550795:169,failure,failure,169,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197550795,1,['failure'],['failure']
Availability,"Hmm, sounds like #1548, which I wasn't able to hunt down. Really should be installing to `<objdir>/stage/lib/${PYMOD_INSTALL_LIB}/`. Are you setting `CMAKE_INSTALL_PATH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1582#issuecomment-475242008:52,down,down,52,https://psicode.org,https://github.com/psi4/psi4/issues/1582#issuecomment-475242008,1,['down'],['down']
Availability,"Hmm, the build with internal Boost failed for other reasons. Nothing was printed to STDOUT, but the `$build-dir/CMakeFiles/CmakeError.log` file contains:. ```; Determining if the function MKL_Free_Buffers exists failed with the following output:; Change Dir: /scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp. Run Build Command:""/usr/bin/gmake"" ""cmTC_13b4e/fast""; /usr/bin/gmake -f CMakeFiles/cmTC_13b4e.dir/build.make CMakeFiles/cmTC_13b4e.dir/build; gmake[1]: Entering directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers -o CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -c /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/share/cmake-3.5/Modules/CheckFunctionExists.c; Linking C executable cmTC_13b4e; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/bin/cmake -E cmake_link_script CMakeFiles/cmTC_13b4e.dir/link.txt --verbose=1; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -o cmTC_13b4e -rdynamic; CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o: In function `main':; CheckFunctionExists.c:(.text+0x15): undefined reference to `MKL_Free_Buffers'; collect2: error: ld returned 1 exit status; gmake[1]: *** [cmTC_13b4e] Error 1; gmake[1]: Leaving directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; gmake: *** [cmTC_13b4e/fast] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226015782:1674,error,error,1674,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226015782,3,"['Error', 'error']","['Error', 'error']"
Availability,"Hmm, tricky issues from Travis. We downcast to Wavefunction so we loose things like `cphf_solve` and `semicanonicalize` and we need to remove symmetry from not only the orbital, but also the density fitted basis sets as well. We may need to add `c1_deep_copy` to the SCF-level Wavefunctions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/737#issuecomment-312405533:35,down,downcast,35,https://psicode.org,https://github.com/psi4/psi4/pull/737#issuecomment-312405533,1,['down'],['downcast']
Availability,"Hmmm. Just looked at my implementation and saw this gem; ```; if(H->nirrep() > 1 || H->rowdim() != H->coldim() || H->rowdim() != 3*molecule->natom()); throw PSIEXCEPTION(""Molecule::symmetrize_hessian: Matrix cannot be symmetrized."");; ```; The routine is just to clean up an already symmetric Hessian, not to apply symmetry (years since I wrote it, so I'm having to trawl through code to put things back in RAM). It should be easy to use the CDSalc class to apply symmetry to the Hessian. I remember chatting with @loriab about that, btu can't find the code snippet. Will ping back when I find it. There's no reason I can think of for the cleanup code being restricted to C1 symmetry; it should only need small tweaks to work for all point groups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760#issuecomment-314470850:572,ping,ping,572,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-314470850,1,['ping'],['ping']
Availability,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235102762:679,fault,fault,679,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762,1,['fault'],['fault']
Availability,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:390,toler,tolerance,390,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277,3,"['down', 'toler']","['down', 'downhill', 'tolerance']"
Availability,How awful would it be if did DF SCF iterations with a direct gradient evaluation? I poured over the range-separated gradient code a few times and have not figured out the error.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-396931668:171,error,error,171,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-396931668,1,['error'],['error']
Availability,How would one do a complicated custom extrapolation with DFT? Ie selecting what is happening at what `component` stage.; E.g. `fctl/cc-pv[dt]z` + `dh/aug-cc-pvdz` . Is this available?; I checkout the PR out locally and playing around with it.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-965455289:173,avail,available,173,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-965455289,1,['avail'],['available']
Availability,"However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would still only need 143MB of storage. All the jobs smaller than above run succesfully, and all the jobs l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464:1074,Error,Error,1074,https://psicode.org,https://github.com/psi4/psi4/issues/464,3,['Error'],['Error']
Availability,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:801,Error,Error,801,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255,5,"['Error', 'error']","['Error', 'error']"
Availability,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:1330,failure,failure,1330,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866,6,"['error', 'failure', 'ping']","['error', 'failure', 'ping']"
Availability,"I added full Sphinx documentation for both the FCHK writer and for GDMA, in commit f2aca76, @CDSherrill. I heard back from Prof. Stone and he has kindly agreed to allow us to use GDMA in the way that we want to, so this PR is ready to go. In his message, he raised the issue of our output providing only kcal/mol units, and mentioned that he would like to have kJ/mol units too, in line with IUPAC guidelines. We certainly should make the hartree to kJ/mol available directly in physconst (instead of having to go through kcal/mol), but what do think about having both units available in the SAPT output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201394449:457,avail,available,457,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201394449,4,['avail'],['available']
Availability,"I added some documentation so I think this PR is close to being ready for a commit. I am curious: are there any ideas on how to make normal modes available via Python? From what I have seen in findif, it might be necessary to store this information somewhere. Exactly where, I don't know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-285769962:146,avail,available,146,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-285769962,1,['avail'],['available']
Availability,I added various error statistics over the S22 benchmark set.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-495132122:16,error,error,16,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495132122,1,['error'],['error']
Availability,I admit i always skipped the orientation/symmetry handling in the cubature code. The warning is here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L3505. Such an error in concerning.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647#issuecomment-1196968300:193,error,error,193,https://psicode.org,https://github.com/psi4/psi4/issues/2647#issuecomment-1196968300,1,['error'],['error']
Availability,"I agree on modern basis sets as far as research. But for education, we want to support large swaths of the periodic table for hundreds of undergrads running the same calcs on a server, hence Pople. And yes, Karlsruhe fitting basis sets are the plan, both for adding them to the library and for defaulting to them (per-atom) when a fitting basis isn't defined for the orbital basis. On Mar 13, 2014, at 3:46 PM, Susi Lehtola notifications@github.com wrote:. > The Karlsruhe basis sets should have pretty good fitting basis sets as well.; > ; > AFAIK Pople basis sets are not really trustworthy (major deficiencies with two-electron completeness). You get better results with fewer functions with newer basis sets, and so IMHO one should play them down...; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/44#issuecomment-37579173:746,down,down,746,https://psicode.org,https://github.com/psi4/psi4/issues/44#issuecomment-37579173,1,['down'],['down']
Availability,"I agree that `ROBUST` should be the default. We might want to leave the default to no pruning and then make an issue reviewing the timings, accuracy, and change log notes before switching the default over. Whenever we change the results the DFT code obtains even if minor I do get a little nervous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-495416288:14,ROBUST,ROBUST,14,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495416288,1,['ROBUST'],['ROBUST']
Availability,I agree that a CMake Libint1 build failed to be least common denominator for downstream on two fronts: (1) no `.pc` files and (2) no `libr12` library. I've fixed the first one Libint-side. Second I don't particularly have time for and can't do anyways until someone volunteers to test the resulting `libr12`. The one-line patch on the packager side to use the libtool build with Psi4 is above. Closing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282:77,down,downstream,77,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282,1,['down'],['downstream']
Availability,"I agree that option B is the best. The effect of the fix will be very minor. This can be easily tested by comparing to DCT code with conventional integrals (and we have done this in the past). Also, current version of the code should recover the exact DCT energy and gradient when using a very large auxiliary basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373:234,recover,recover,234,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373,1,['recover'],['recover']
Availability,"I agree that we don't want properties computations done internally --- we; want them done in a unified way through OEProp. However, we do (I guess?); want the user syntax properties = [ ... ] or whatever Daniel C. cooked up.; My understanding is that the CC properties user input syntax only works for; CC modules, which is not good. Here's an example from cc52:. property('ccsd',properties=['roa_tensor']). The reason Daniel developed this is because different modules need to be; run depending on the requested property. This is not usually the case for; non-CC codes, but it is confusing to users to have this mechanism available; for CC properties but not for other properties. I am fine with moving this over to some other more unified github issue, so; long as it is tracked somewhere. On Fri, Feb 26, 2016 at 11:01 AM, Daniel Smith notifications@github.com; wrote:. > Effectively we have quite a few tickets relating to properties and OEProp.; > I would very much like to consolidate most of these tickets into one so we; > can figure out what actually needs to be done. In many ways we probably; > should not propagate the current way the cc codes are handling the; > properties internally (the syntax is great), especially with regard to; > properties through OEProp.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/40#issuecomment-189340270.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-189349922:623,avail,available,623,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-189349922,1,['avail'],['available']
Availability,"I agree with Andy about merge-as-is. Also more people than just the listed reviewers looked at (parts of) the code according to github. Before we merge, just wanting to confirm if the right `conda install libint2 -c psi4/label/dev` is available?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-730193219:235,avail,available,235,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-730193219,1,['avail'],['available']
Availability,"I agree with the point that the code should go through and report zeros, so; we can do database stuff, etc. I think the thermo code can easily be fixed for this (in fact Brandon has a; new version that has already been tested for atoms). Looks like the first; failure we're hitting is in finite differences. @psi-rking should give; that some thought. David. On Thu, Mar 31, 2016 at 11:31 PM, drhaney notifications@github.com wrote:. > Mac's Beer & Wine confirms that they will happily reserve gift cards for; > you at the register, and you developers need to do better if you want that; > beer.; > ; > Usually, a QC app 'fails' gracefully on atomic systems.; > By 'fail', I mean that it should: _handle stupid requests gracefully._; > ; > In practice, the app returns ZPE, Ethermal, Hthermal = 0.0,0.0,0.0, and a; > reasonable total entropy 30 < S <40 cal/mol-K. Granted, Stotal = Strans and; > may be of little value. The user adds in some Boltzmann kT multiples to; > internal E,H as needed.; > ; > Total energies and enthalpies of atoms are needed for calculating; > molecular enthalpies of formation by the atomization method. I want this; > because I'm writing composite method modules for Psi4 with the goal of; > replicating Gaussian and GAMESS results.; > ; > It may be invidious to point out that Gaussian, GAMESS, and Nwchem are all; > well-behaved on the atomic cases, but those applications are why I'm here.; > [rant on egregious software licenses and general dislike of Fortran; > redacted]; > ; > Next up: CCSD(T) and the H2 molecule, MP2 correlation energy of the; > hydrogen atom. (joke!); > Thanks to all.; > -drh; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204230882",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204388708:260,failure,failure,260,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204388708,1,['failure'],['failure']
Availability,"I agree, but not going to debug this bizarre case in the C++ code. And if; you're going to catch the absurd geometry, then psi4 should never compute; the gradient. On Fri, Jul 8, 2022 at 12:24 PM Jonathon Misiewicz ***@***.***>; wrote:. > Given the reporter, the geometry they input is probably garbage.; >; > While I agree attempts to optimize from this are in vain, there should be; > a proper error message instead of just crashing with an obscure C error; > code.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TAGYFNA3TVUXXSR7DLVTBP4VANCNFSM53A6YHNQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978:396,error,error,396,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978,2,['error'],['error']
Availability,"I also don't know exactly where the error array is coming from. The numbers in the README seem very few compared to the length of the error matrix. The ASCII way is still possible. But Rob was no fool when it came to optimizing the right parts. It only gets run once per SAPT, so I don't see the block of a text file, but I'm ready to believe he had a reason to go binary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451997357:36,error,error,36,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451997357,2,['error'],['error']
Availability,I also tried building an external Boost version 1.57.0 but that build failed for some reason and I don't feel like tracking it down.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226016541:127,down,down,127,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226016541,1,['down'],['down']
Availability,"I also tried reinstalling via executing the .exe file in my downloads directory and the same error pops up . ""C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875174721:60,down,downloads,60,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875174721,2,"['down', 'error']","['downloads', 'error']"
Availability,"I am actually performing these calculations on Google Colab. (It is for a future workshop.) You can access a Colab notebook exemplifying the error [here](https://colab.research.google.com/drive/1uTsmVcFJY5xArRbo4sQ0RGgPiT406xdM?usp=sharing). Additionally, here is the output from `conda list`. . ```; # packages in environment at /usr/local:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 1_gnu conda-forge; alsa-lib 1.2.3 h516909a_0 conda-forge; ambit 0.5.1 hbe8a562_1 psi4; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py37h5e8e339_1 conda-forge; attrs 21.4.0 pyhd3eb1b0_0 ; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; beautifulsoup4 4.10.0 pyha770c72_0 conda-forge; blas 1.0 mkl ; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; boost 1.74.0 py37h6dcda5c_3 conda-forge; boost-cpp 1.74.0 h312852a_4 conda-forge; bottleneck 1.3.4 py37hce1f21e_0 ; brotli 1.0.9 he6710b0_2 ; brotlipy 0.7.0 py37h5e8e339_1001 conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.17.1 h7f98852_1 conda-forge; ca-certificates 2021.10.8 ha878542_0 conda-forge; cairo 1.16.0 hf32fb01_1 ; certifi 2021.10.8 py37h89c1867_1 conda-forge; cffi 1.15.0 py37h036bc23_0 conda-forge; chardet 4.0.0 py37h89c1867_1 conda-forge; chemps2 1.8.10 hbe8a562_0 psi4; conda 4.12.0 py37h89c1867_0 conda-forge; conda-package-handling 1.7.2 py37hb5d75c8_0 conda-forge; cryptography 3.4.5 py37h5d9358c_1 conda-forge; cudatoolkit 11.1.1 h6406543_8 conda-forge; cycler 0.11.0 pyhd3eb1b0_0 ; dbus 1.13.6 h5008d03_3 conda-forge; debtcollector 2.5.0 pyhd8ed1ab_0 conda-forge; debugpy 1.5.1 py37hcd2ae1e_0 conda-forge; decorator 5.1.1 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; expat 2.4.7 h27087fc_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; fontconfig 2.13.1 h6c099",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693:141,error,error,141,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693,1,['error'],['error']
Availability,I am adding intel ib into the PATH and it is running flawlessly right now. I am checking dkh running and will report here. //////This error happens after installing a fresh PSI4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126183761:134,error,error,134,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126183761,1,['error'],['error']
Availability,"I am aiming at the grid-based evaluation of molecular electrostatic fields/potentials as depicted in the input example [props4](https://github.com/psi4/psi4/blob/master/samples/props4/input.dat). Running Psi4 1.1, the input example fails with the message; `AttributeError: 'builtin_function_or_method' object has no attribute 'Vvals'`.; Calling `Exvals`, `Eyvals` or `Ezvals` results in the same error. Furthermore, I experienced the saving of `grid_field.dat` and `grid_esp.dat`, which follows after calling `prop()`, to be extremely slow (~1 MB per 5 minutes). In conclusion, I kindly ask for responses to the following questions:; - What is going wrong with the direct capturing of one-electron properties as Python arrays?; - How could the saving of the `.dat` files be sped up?; - Is there a way to change the output file names to something different than `grid_field.dat`/ `grid_esp.dat`?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1614:396,error,error,396,https://psicode.org,https://github.com/psi4/psi4/issues/1614,1,['error'],['error']
Availability,"I am also being re-directed from search engines. The top site shows psicode.org but will redirect if I click on it. Typing psicode.org into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:596,error,errors,596,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['error'],['errors']
Availability,"I am attempting run a frequency calculation with Psi4 (version 1.5) and Python 3.7.10. All other calculations (optimization, single point energy, etc.) work well. However, when I attempt to run a frequency calculation with the command `psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient')`, I get the following error. From [what I've seen on Stack Overflow](https://stackoverflow.com/questions/69564817/typeerror-load-missing-1-required-positional-argument-loader-in-google-col), this may be an issue with psi4 compatibility. How can I navigate this issue? . ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); [<ipython-input-13-13c5f85efa27>](https://localhost:8080/#) in <module>(); 4 ; 5 psi4.set_output_file(F'{molecule_name}_frequency_analysis.dat', False); ----> 6 psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient'); 7 correction_g = parse_free_energy(F'{molecule_name}_frequency_analysis.dat'); 8 print(""Correction G: "", correction_g). 21 frames; [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in frequency(name, **kwargs); 1772 ; 1773 # Compute the hessian; -> 1774 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); 1775 ; 1776 # Project final frequencies?. [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in hessian(name, **kwargs); 1493 # Check if this is a CBS extrapolation; 1494 elif gradient_type == ""cbs_gufunc"":; -> 1495 return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); 1496 elif gradient_type == ""cbs_wrapper"":; 1497 return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""). [/usr/local/lib/python3.7/site-packages/psi4/driver/driver_cbs.py](https://localhost:8080/#) in _cbs_gufunc(func, total_method_name, **kwargs); 1963 optstash = p4util.OptionsState(['BASIS']); 1964 core.set_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:350,error,error,350,https://psicode.org,https://github.com/psi4/psi4/issues/2510,1,['error'],['error']
Availability,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182861777:706,down,downside,706,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777,1,['down'],['downside']
Availability,"I am getting `forrtl: error (76): Abort trap signal` error. Is that from that line?; It stops while printing the internal coordinate overview after printing the last angle value.; Presumably it tries to print a 4-center angle, there are 4 atoms after all, but no out-of-plane angle is found in the `intco` file. In C1 symmetry there should an out-of-plane angle coordinate.; The input works for a symmetrized Cs (planar) molecule that eliminates the out-of-plane mode. I cannot track it down further for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079,3,"['down', 'error']","['down', 'error']"
Availability,"I am getting a series of compilation errors:. ```; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:116:1: error: use of undeclared identifier 'LibFragDriver'; did you mean; 'psi::LibFrag::LibFragDriver'?; LibFragDriver::LibFragDriver(const std::string& MethodName){; ^~~~~~~~~~~~~; psi::LibFrag::LibFragDriver; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.h:34:7: note: 'psi::LibFrag::LibFragDriver' declared here; class LibFragDriver{; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:121:4: error: unknown type name 'SharedMol'; SharedMol AMol=psi::Process::environment.molecule();; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:116:49: warning: unused parameter 'MethodName' [-Wunused-parameter]; LibFragDriver::LibFragDriver(const std::string& MethodName){; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:183:9: error: no template named 'MPITask'; did you mean 'psi::MPITask'?; typedef MPITask<SharedFrag> Task_t;; ^~~~~~~; psi::MPITask; /Users/francesco/Source/psi4/src/lib/libparallel2/TaskJobGuts/../MPITask.h:50:7: note: 'psi::MPITask' declared here; class MPITask{; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:183:17: error: use of undeclared identifier 'SharedFrag'; typedef MPITask<SharedFrag> Task_t;; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:184:76: error: unknown type name 'SharedFrags'; static std::vector<Task_t> MakeTasks(const int Start, const int Stop,const SharedFrags& Frags_){; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:186:4: error: unknown type name 'FragItr'; FragItr MonoI,MonoEnd;; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:188:7: error: use of undeclared identifier 'MonoEnd'; MonoEnd=Frags_->end(i);; ^; /Users/francesco/Source/psi4/src/lib/libfrag/LibFragDriver.cc:189:43: error: use of undeclared identifier 'MonoEnd'; did you mean 'MonoI'?; for (MonoI=Frags_->begin(i); MonoI!=MonoEnd; ++MonoI); ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/206:37,error,errors,37,https://psicode.org,https://github.com/psi4/psi4/issues/206,4,['error'],"['error', 'errors']"
Availability,"I am getting an error in Psi4 1.5 that I believe is a bug. Here is a minimal script to reproduce it. ```python; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'follow'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97M-D3BJ/def2-TZVPPD', molecule=mol); ```. It throws the exception. ```; psi4.driver.p4util.exceptions.ValidationError: Stability analysis root following is only available for UHF; ```. Since the script does use UHF, the error doesn't make sense.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577:16,error,error,16,https://psicode.org,https://github.com/psi4/psi4/issues/2577,3,"['avail', 'error']","['available', 'error']"
Availability,"I am glad you were able to get it running: I failed in my attempt. I added the orbital basis sets from Grant Hill's site to your input, but there do not appear to be any auxiliary basis sets available for the density fitting procedure that's used in the SCF and, I believe, the SAPT parts. Please check your output to make sure that a reasonable auxiliary basis set is being used for the density fitting calculations: the aux basis should normally be about a factor of 3 larger than the orbital basis, but it's possible that a slightly smaller one will suffice for something as large as aug-cc-pV5Z. There is an [effort underway](https://github.com/MolSSI-BSE/basis_set_exchange) at MolSSI to curate basis sets in a more organized way and we will almost certainly be using that to update the library when it is ready to go, so I don't think a PR is needed at this time, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467169919:191,avail,available,191,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467169919,1,['avail'],['available']
Availability,I am going to need to revise the docstrings now that we just error out instead of returning the closest match,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064156997:61,error,error,61,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064156997,1,['error'],['error']
Availability,"I am having trouble compiling these changes, @dgasmith. . I did not modify core.cc, but I am getting these errors due to PyBind11. Any idea what went wrong? . /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {; ~~~~~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-265223311:107,error,errors,107,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265223311,5,['error'],"['error', 'errors']"
Availability,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2157:63,avail,available,63,https://psicode.org,https://github.com/psi4/psi4/issues/2157,4,"['avail', 'error']","['available', 'error']"
Availability,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:180,Down,Down,180,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739,1,['Down'],['Down']
Availability,"I am not aware of an area that we have made branching options like this before. @loriab may have a location. Barring any prior art I think the current layout makes plenty of sense. Apologies for being MIA a bit on this PR. I am **very** happy that someone is looking into the grid files! All of the changes look good at cursory glance. Please do ping me if something specific comes up, I think these kinds of changes are very important to the future of the DFT code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494392367:346,ping,ping,346,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494392367,1,['ping'],['ping']
Availability,"I am only doing DFT for now Susi, thanks for the tip about those basis sets. . I've determined that the bug was definitely introduced in the libint2 PR (#1721). Prior to that PR, `INTS_TOLERANCE` worked as expected: a value of 1e-12 led to a minor speed up and a negligible change in the energy. I further narrowed the problem down to the `engine_precision` parameter passed to the libint2 engine:. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/eri.cc#L182. If I instead set `engine_precision` to `max_precision`, the SCF calculation proceeds normally. This suggests that the current value of `engine_precision` is too loose. Does anyone know more about what this parameter is, and where the current formula comes from? I assume the `-4` is for the four indexes of an ERI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-782463778:327,down,down,327,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-782463778,1,['down'],['down']
Availability,"I am pretty sure this is a false failure in travis due to a server being down (see log below). Can someone from @psi4/p4pub-rw restart the travis tests? I don't think I should need to push a commit just to get the build to run. . ```; $ git checkout -qf FETCH_HEAD; Adding APT Sources (BETA); $ export DEBIAN_FRONTEND=noninteractive; 0.18s$ curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -; gpg: no valid OpenPGP data found.; The command ""curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -"" failed and exited with 2 during .; Your build has been stopped. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/395#issuecomment-222983339:33,failure,failure,33,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-222983339,2,"['down', 'failure']","['down', 'failure']"
Availability,"I am reasonably sure that Azure failed due to the issue with libxc download location (while tddft.org was down), and it wasn't a problem with the `with ... as ` way. Anyway, merging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1687#issuecomment-520571901:67,down,download,67,https://psicode.org,https://github.com/psi4/psi4/pull/1687#issuecomment-520571901,2,['down'],"['down', 'download']"
Availability,"I am running some psi4 jobs which involve modifying the parameters DFT_VV10_B and DFT_VV10_C for various benzene dimer configurations. For several dimer configurations and several values of (b,c), I get an error telling me that ADIIS minimization failed, and asking me to file a bug report. I've prepared an example and put my input and output files below. Any help I could get would be wonderful—and please let me know if I can provide any more information that would be helpful! . Input file:; ```; set num_frozen_docc 12; set {; dft_vv10_b 0.06022547162926983; dft_vv10_c 0.7450476605857299; }; set {; basis def2-tzvppd; guess sad; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; set {; wcombine False; }; molecule mol {; 0 1; C -0.260781259973 -0.714012941782 1.022641061033; C 0.448798235138 -0.584866555587 1.116392879147; C 0.671191593804 0.158609920222 1.104026912627; C 0.177969561551 0.681404978559 1.093307893756; C -0.560580808895 0.542719215332 1.056079456761; C -0.776583606603 -0.133446136243 1.103859872549; H -0.442720873003 -1.244238976392 0.982141695030; H 0.874512929539 -0.960390442589 1.119149924166; H 1.217460053606 0.336381670040 1.046181387539; H 0.335297687566 1.281777775821 0.982193856028; H -0.948519039798 0.925731991759 1.117846063269; H -1.420111450991 -0.227880344246 1.099752848840; C -0.431336419082 -0.578608087844 -1.006105897774; C -0.616450380987 0.164556718463 -1.058443190817; C -0.158086394624 0.730699386222 -0.889727187104; C 0.484942144607 0.574229834356 -0.649010141458; C 0.688355917017 -0.142302467208 -0.581381981865; C 0.242793965654 -0.737031769438 -0.731596272801; H -0.732074019279 -1.008555512000 -1.147218404188; H -1.164258386631 0.206232540657 -1.161273694869; H -0.258581893650 1.331482152944 -0.817970826130; H 0.882404676284 0.994103603000 -0.554927857467; H 1.180331932734 -0.274347490367 -0.3724813932",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:206,error,error,206,https://psicode.org,https://github.com/psi4/psi4/issues/2641,2,"['error', 'robust']","['error', 'robust']"
Availability,"I am running the following input on Ubuntu : ; ---------------; memory 12 Gb. molecule ab { ; 0 1; Cu 0.00000 0.00000 0.00000; Cu 2.35000 0.00000 0.00000; units ang; }. set basis aug-cc-pvtz ; set scf_type df; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set frozen_uocc [5,5,5,5,5,5,5,5]; set freeze_core true; set roots_per_irrep [2,2,2,2,2,2,2,2]; set maxiter 100000; ccsd_energy, wfn = properties('eom-ccsd', properties=['oscillator_strength'],return_wfn=True). ------------------------. and I get the following error : . 	Projections for excited state, irrep Ag, root 1:; 	<0|Le^(-T)|0><0|Re^T|0> = 0.0000000000; 	<0|Le^(-T)|S><S|Re^T|0> = 0.9021404202; 	<0|Le^(-T)|D><D|Re^T|0> = 0.0978595968; 	Sum of above = 1.0000000170; 	Approx. excitation level = 1.0978596138; PSIO_ERROR: Attempt to write into next entry: 121, LIJAB; PSIO_ERROR: unit = 121, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: PSIO Error; Error occurred in file: /home/luca/Desktop/psi4_max/psi4-master/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). ./bash.sh: line 7: 10101 Aborted (core dumped) /home/luca/Desktop/psi4_max/psi4-master/bi/stage/usr/local/psi4/bin/psi4 cu2.dat cu2.out; ------------------------------------------------------------------------------------------------------------------. I have no idea what's going wrong. LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/786:566,error,error,566,https://psicode.org,https://github.com/psi4/psi4/issues/786,5,"['Error', 'error']","['Error', 'error']"
Availability,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279:626,error,error,626,https://psicode.org,https://github.com/psi4/psi4/issues/2279,1,['error'],['error']
Availability,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775:69,error,error,69,https://psicode.org,https://github.com/psi4/psi4/issues/775,3,"['Error', 'error']","['Error', 'error']"
Availability,"I am trying to build psi4 using Intel 2017 compilers, gcc=5.4 on an Ubuntu system. - Tried with python version 2.7.2 as well as 3.5. (Following is with Python 3.5) **The error with Python 2.7 is same as following.** . - Also, tried gcc/g++ 4.9.3 version. Same problem persists. I have run this before starting to build;; ```; source /opt/intel/bin/compilervars.sh intel64; export MATH_ROOT=$MKLROOT; export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/lib/intel64/libiomp5.so. ```; The Error logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Proble",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:170,error,error,170,https://psicode.org,https://github.com/psi4/psi4/issues/629,2,"['Error', 'error']","['Error', 'error']"
Availability,"I am trying to do constrained geometry optimizations using the PsiAPI, however this results in a segmentation fault. Here's an example:; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""). psi4.set_options({""frozen_distance"": ""0 1""}); psi4.optimize(""HF/6-31G"", molecule=h2o); ```; I am using psi4 1.2a1.dev1159 installed from source with Anaconda Python 3.6 on macOS 10.13.4.; Thanks for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989:110,fault,fault,110,https://psicode.org,https://github.com/psi4/psi4/issues/989,1,['fault'],['fault']
Availability,"I am trying to install Psi4 with Conda on a Linux machine with Python 3.11. However, it does not seem like Python 3.11 is supported at this time despite the README badge showing 3.11. Are there plans to add a Python 3.11 Conda build in the near future?; ; ```; conda create --name psi4 python=3.11; conda activate psi4; conda install psi4 -c psi4; ```. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.10,<3.11.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.6,<3.7.0a0|>=3.5,<3.6.0a0']. Your python: python=3.11. If python is on the left-most side of the chain, that's the version you've asked for.; When python appears to the right, that indicates that the thing on the left is somehow; not available for the python version you are constrained to. Note that conda will not; change your python version to a different minor version unless you explicitly specify; that. The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.35=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']; - python=3.11 -> libgcc-ng[version='>=11.2.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.35; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031:1406,avail,available,1406,https://psicode.org,https://github.com/psi4/psi4/issues/3031,1,['avail'],['available']
Availability,"I am trying to install the package using conda/mamba in a fresh environment, I get the following error using `mamba install -c psi4 psi4`:. `nothing provides mpc 1.0.1 needed by gcc-5-mp-5.2.0-0`. Am I doing something wrong or does the feedstock need updating?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898:97,error,error,97,https://psicode.org,https://github.com/psi4/psi4/issues/2898,1,['error'],['error']
Availability,"I am trying to run a porphyrin radical calculation with 1700 basis functions. I call dferi->compute() in my plugin and it seems that during the generation of the MO DF integrals, there is some sort of segmentation fault. I generate all of the MO integrals using density fitting. . I have a minimal plugin available to test this input. . The input is given below: . ```; memory 100 gb; molecule {; 0 1; C 0.68541667 0.00000000 4.17724008; C -0.68541667 0.00000000 4.17724008; C -1.07715949 0.00000000 2.85236290; C 1.07715949 0.00000000 2.85236290; N 0.00000000 0.00000000 2.03366350; C 2.35903958 0.00000000 2.45806358; C 2.81721573 0.00000000 1.05258796; N 2.05486054 0.00000000 0.01405448; C 2.88740001 0.00000000 -1.13057937; C 4.23537365 0.00000000 0.67022148; C 4.27600326 0.00000000 -0.70111647; C 2.48623109 0.00000000 -2.40919453; C 1.07657777 0.00000000 -2.84029441; N 0.00000000 0.00000000 -2.02366514; C -0.68542522 0.00000000 -4.16299454; C 0.68542522 0.00000000 -4.16299454; C -2.88740001 0.00000000 -1.13057937; N -2.05486054 0.00000000 0.01405448; C -2.81721573 0.00000000 1.05258796; C -4.23537365 0.00000000 0.67022148; C -4.27600326 0.00000000 -0.70111647; C -2.35903958 0.00000000 2.45806358; C -2.48623109 0.00000000 -2.40919453; C -1.07657777 0.00000000 -2.84029441; H 1.32705735 0.00000000 5.04949752; H -1.32705735 0.00000000 5.04949752; H 3.13133350 0.00000000 3.22359766; H 5.09358852 0.00000000 1.32905912; H 5.16675318 0.00000000 -1.31569036; H 3.24762417 0.00000000 -3.18492574; H -1.32960963 0.00000000 -5.03269392; H 1.32960963 0.00000000 -5.03269392; H -5.09358852 0.00000000 1.32905912; H -5.16675318 0.00000000 -1.31569036; H -3.13133350 0.00000000 3.22359766; H -3.24762417 0.00000000 -3.18492574; units angstrom; }. set {; reference rhf; scf_type DF; guess SAD; d_convergence 4; e_convergence 4; basis cc-pvqz; df_basis_mp2 cc-pvqz-ri; }. set dfmp2 {; print 1; }. energy('dfmp2'). dfmp2.exampleFN(); ```. My plugin is given below:. ```; /*; *@BEGIN LICENSE; *; * dfm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157:214,fault,fault,214,https://psicode.org,https://github.com/psi4/psi4/issues/157,2,"['avail', 'fault']","['available', 'fault']"
Availability,"I am trying to set `DF_INTS_NUM_THREAD` since https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc might be eating too much memory during DFMP2. However when I try to set it in my input file as in:. ```; memory 393GB; set_num_threads(64); psi4_io.set_default_path(""BWILEYtest/psi4/Psi4-Alpelisib""); set df_ints_num_thread = 16; ```. I get:; ```; ! Fatal Error: DF_INTS_NUM_THREAD is not a valid option. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1638121835567/work/psi4/src/psi4/liboptions/liboptions. !; ! h on line: 55 !; ! The most recent 5 function calls were: !; ! psi::Options::use(std::__cxx11::basic_string<char, std::char_traits<char>, !; ! std::allocator<char> >&); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2603:369,Error,Error,369,https://psicode.org,https://github.com/psi4/psi4/issues/2603,2,['Error'],['Error']
Availability,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117:468,error,errors,468,https://psicode.org,https://github.com/psi4/psi4/issues/2117,1,['error'],['errors']
Availability,"I apologize, maybe I'm fiddling with something different that leads to the same error message. Perhaps it's better to keep the 100% reproducible case. My point was that it was still happening, even with psi 1.2 non-dev.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442904288:80,error,error,80,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442904288,1,['error'],['error']
Availability,"I attempted to install Psi4 using Conda that used python3.8 and received the following error:. ```; UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']. Your python: python=3.8; ```. Install command: `conda install -c psi4 psi4`; Conda version: `4.8.3`; Python version: `3.8.3`; Linux: `Debian Buster`. Is there anything holding back psi4 from being used with python3.8? Does there even need to be an upper limit on the python version one can use?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979:87,error,error,87,https://psicode.org,https://github.com/psi4/psi4/issues/1979,1,['error'],['error']
Availability,I believe that the problems with -jN builds is now corrected. Other errors I'm seeing arise from another bug that I'll put up in a separate issue report.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219#issuecomment-173217907:68,error,errors,68,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173217907,1,['error'],['errors']
Availability,"I believe the problem here is not in the opening of the MO file (180) but in the attempt to write new MO energies into the existing checkpoint file. I'm looking at a possible fix that will simply delete the old checkpoint file in case the number of MOs changes, but this will likely break something else about the optimization...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-37134034:132,checkpoint,checkpoint,132,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37134034,4,['checkpoint'],['checkpoint']
Availability,"I believe we have had this problem in the past. Take a symmetric molecule who's optimal wavefunction should contain less symmetry:. ```python; import numpy as np. mol = psi4.geometry(""""""; 0 1; C 0.0 0.0 0.673055; C 0.0 0.0 -0.673055; H 0.0 0.934981 1.246807; H 0.0 -0.934981 1.246807; H 0.934981 0.0 -1.246807; H -0.934981 0.0 -1.246807; symmetry c1; """"""). # Set reference and guess.; psi4.set_options({; ""reference"": ""rhf"",; ""guess"": ""sad"",; ""basis"": ""DZP"",; ""soscf"": ""true"",; # ""sad_frac_occ"": ""true""; }). e_scf = energy('scf'); if np.allclose(e_scf, -77.87781349420317):; print(""Found non-symmetric minima! Success!""); elif np.allclose(e_scf, -77.84789770426966):; print(""Found symmetric minima... failure.""); else:; print(""You found something... wrong.""); ```. The `-77.847` result should be found when the molecule is constrained to symmetry. However, without that constraint there is a lower SCF result to be found. The kicker is even without the symmetry restraint (computation in `c1`) we fairly consistently end up with a symmetric wavefunction. Any ideas on how to avoid this?. Note 1: The stability analysis is showing that it is indeed finding the wrong answer and there are negative eigenvalues present. We should be able to follow these once the py-scf iterations are finished. Note 2: This is not deterministic for which result we land in (whoo!). Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find the correct energy. Really any noise lets the diagonalizer break out of its self-imposed symmetry constraints.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875:701,failure,failure,701,https://psicode.org,https://github.com/psi4/psi4/issues/875,1,['failure'],['failure']
Availability,"I bet this is an issue with mismatched `new`/`malloc` and `free`/`delete` in the legacy parts of the code. The newer code uses smart pointers to avoid this. The mismatched free and deletes can be tracked down using valgrind, which will also help to identify where the largest leaks are. Anybody who tackles this should consider replacing the various explicit allocations with smart pointers to avoid this mess. I'll take a pass through when I get chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1532#issuecomment-463195111:204,down,down,204,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-463195111,1,['down'],['down']
Availability,"I bet this is because of the calls to `exit()` in libpsio, combined with the lack of flushing of the error messages to the output. I have replaced the calls to `exit()` in #3118, which should solve this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205:101,error,error,101,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205,1,['error'],['error']
Availability,"I can build+link against my local install of boost successfully, using the modified conda recipe to build the static libs, but only if the hombrew boost is unlinked at setup, _and_ compile time.. . If the homebrew boost is linked at the time I run the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible ver",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-198164795:674,error,error,674,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795,2,['error'],"['error', 'errors']"
Availability,"I can confirm @robertodr's error. But it does away with CMake 3.3 (even though I can't see what the change was from the [release notes](https://cmake.org/cmake/help/v3.7/release/3.3.html)). I've sort of been wanting 3.3 because that detects the HDF5 version number, and I, at least, am susceptible to mixed 1.8.16 and 1.8.17 compilations, which the build system can now avoid. So shall we bump again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281106134:27,error,error,27,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281106134,1,['error'],['error']
Availability,"I can confirm that I can now build a freshly checked-out tree without needing to edit anything. (I did have to use -DOpenMP_LIBRARY_DIRS to point at the Intel version of libiomp5.so.). I did get:. `No such TARGET ""OpenMP::OpenMP_C""` and `No such TARGET ""OpenMP::OpenMP_Fortran""`. in the cmake output but it built and (the few tests before I killed it) ran fine. As a further test, I've also tried enabling lots of other optional bits (ambit, CheMPS2, dkh, libefp, simint, gdma, PCMSolver, and snsmp2) to check whether the fortran error caused any issues with them. It looks like everything builds apart from ambit (which looks like it was only just re-enabled and so probably needs tweaking somewhere). Building ambit bails out with the same lack of MathOpenMP that I was seeing before #1053:. ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=C;CXX;Fortran, C/CXX/Fortran=GNU/GNU/; -- Found TargetOpenMP: 1 ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:108 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); cmake/FindTargetLAPACK.cmake:30 (find_package); CMakeLists.txt:90 (find_package). -- Configuring incomplete, errors occurred!; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeError.log"".; external/upstream/ambit/CMakeFiles/ambit_external.dir/bu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280:530,error,error,530,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280,2,"['Error', 'error']","['Error', 'error']"
Availability,I can confirm that adding `${CMAKE_CURRENT_BINARY_DIR}/` before `__init__.py` in `objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/CMakeLists.txt` does the trick (I'd tracked down the location of `__init__.py` earlier on but had no clue how to tie that in properly!). I'll wait for your pull requests to filter through and then I'll recheck from scratch...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400814539:98,down,downstream,98,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400814539,2,['down'],"['down', 'downstream']"
Availability,"I can confirm this issue. The code seg faults only when calling gradient(df-mp2). If I run energy(dfmp2), it seems to work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/119#issuecomment-130327172:39,fault,faults,39,https://psicode.org,https://github.com/psi4/psi4/issues/119#issuecomment-130327172,1,['fault'],['faults']
Availability,"I can only strongly recommend to use a build system. I'm involved with [Easybuild](https://hpcugent.github.io/easybuild/) which has support for psi4. Building psi4 with the GCC 5 is reduced to a one line command: it will build everything, starting from binutils and gcc. It only requires a non-ancient version of gcc to be present (I think, no lower than 3.0 or so).; With the help of modules, you can easily support multiple versions of compilers (and software) Our HPC systems currently has 5 version of GCC available (4.6-5.1) and 11 versions of intel compiler (11-2015.1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105170511:510,avail,available,510,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105170511,1,['avail'],['available']
Availability,I can reproduce this and get an error message about frozen virtual DF-CCSD gradients not being implemented in `dfocc`. That is not consistent with a pb11 problem.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1912#issuecomment-635993245:32,error,error,32,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-635993245,1,['error'],['error']
Availability,"I can see how the Molden format is perhaps a good fit for this, as it; presents not only the desired quantity (AO basis density matrix) but also; the associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomme",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260397625:734,avail,available,734,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625,2,['avail'],['available']
Availability,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172192255:471,down,down,471,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255,1,['down'],['down']
Availability,"I can't reproduce this behavior on my linux installation of add49b95b6be2441c522f71bddb47f1371e16958 (icc 2017.2.050, mkl 2017.1.143, numpy is also linked to the same `libmkl_rt.so`). I turned down `thread = 20` to `threads = 4`, but regardless of the import order I see `Psi4@n1 : Psi4@n4 ratio (want ~4)` close to 4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312377598:193,down,down,193,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312377598,1,['down'],['down']
Availability,"I cannot install psi4 v1.8 from conda. I get the following error. I'm on Ubuntu 22.04. Is this a known issue? Workarounds?. ```sh; ❯ conda create --name psi4-2 --channel conda-forge 'psi4==1.8' 35s  base; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Package qcengine conflicts for:; psi4==1.8 -> qcengine[version='>=0.26.0,<0.27.0a0']; Package libint conflicts for:; psi4==1.8 -> libint=2.7.3dev1; Package _openmp_mutex conflicts for:; psi4==1.8 -> _openmp_mutex[version='*,>=4.5',build=*_llvm]; Package python_abi conflicts for:; psi4==1.8 -> python_abi[version='3.10.*|3.11.*|3.8.*|3.9.*',build='*_cp311|*_cp310|*_cp38|*_cp39']; Package libxc-c conflicts for:; psi4==1.8 -> libxc-c[version='>=6.1.0,<7.0a0',build=cpu_*]; Package qcelemental conflicts for:; psi4==1.8 -> qcelemental[version='>=0.25.1,<0.26.0a0']; Package python conflicts for:; psi4==1.8 -> python[version='>=3.10,<3.11.0a0|>=3.11,<3.12.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; Package pytest conflicts for:; psi4==1.8 -> pytest[version='>=7.0.1']; Package pyddx conflicts for:; psi4==1.8 -> pyddx[version='>=0.4.1']; Package pymdi conflicts for:; psi4==1.8 -> pymdi[version='>=1.2']; Package mkl conflicts for:; psi4==1.8 -> mkl[version='>=2022.2.1,<2023.0a0']; Package dkh conflicts for:; psi4==1.8 -> dkh[version='>=1.2,<1.3.0a0']; Package adcc conflicts for:; psi4==1.8 -> adcc[version='>=0.15.16']; Package networkx conflicts for:; psi4==1.8 -> networkx; Package numpy conflicts for:; psi4==1.8 -> numpy; Package libblas conflicts for:; psi4==1.8 -> libblas=[build=*mkl]; Package pybind11-abi conflicts for:; psi4==1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972:59,error,error,59,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972,1,['error'],['error']
Availability,"I checked `ctest -R sapt` because I was expecting sapt6 to fail, being the most thorough per-term and per-sapt-level test. However, the Ind30 fault doesn't show up at that level because (1) we check elst/exch/ind/disp components but not e.g., elst10, elst20 terms and (2) the deltaHF term by definition compensates for (read: hides) the induction term problem. So current test suite is ok, though that itself is a failure demanding more tests. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1803#issuecomment-582743062:142,fault,fault,142,https://psicode.org,https://github.com/psi4/psi4/pull/1803#issuecomment-582743062,2,"['failure', 'fault']","['failure', 'fault']"
Availability,"I checked with an earlier version of the code, before my changes were merged. Your example file dies at the same place, with the same error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/786#issuecomment-323533197:134,error,error,134,https://psicode.org,https://github.com/psi4/psi4/issues/786#issuecomment-323533197,1,['error'],['error']
Availability,"I compiled this PR with clang, ran `gibbs`, and still got the exact same error as Travis reports. ```; Structure for next step:; Cartesian Geometry (in Angstrom); C 0.0000000000 0.0000000000 0.0000000000; H 0.0000000000 0.8836649185 -0.6248454599; H 0.8836649185 0.0000000000 0.6248454599; H -0.8836649185 0.0000000000 0.6248454599; H 0.0000000000 -0.8836649185 -0.6248454599; ; Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; ```. This problem is not specific to gcc compilers, and it looks to be a bug in finding the highest point group. I'm puzzled how the original test didn't run into this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307,2,"['Error', 'error']","['Error', 'error']"
Availability,"I completely agree with @bgpeyton and @amjames that there are probably misuses of Z & mass in the code resulting from unclear or inconsistent definitions (I think there's even cases where the `Mol.property()` fn differs in behavior from the `Mol.fproperty()` fn (that includes dummy atoms). It would be great to survey the code and hunt these down. My trepidation comes in because Mol is delicate w/the two versions of ghosting (type A (not reversible): `@C`, type B (reversible): `extract_subset(1, 2)`) and I worry that changes would start an avalanche. In fact I definitely recommend _not_ ""fixing"" `Mol.Z()` the way I would like (`C` and `@C` both return 6) because lots of places in the Mol code depend on using that fn as a test for type A ghostedness. > I'm very unfamiliar with how masses and fragment identities are passed around. Is there a case in which having the ghost masses zero would keep you from making a properly-massed all-real-atoms copy of that molecule? That would definitely preclude any option of setting them zero permanently. What happens is that every atom at parse-time gets read into a CoordEntry object that holds Z, ghost, charge, mass, element symbol, coords, etc. If the atom is type-A ghost, then Z, ghost, and charge get set accordingly. There is no other info so type-A is not eligible to return to reality. The fragmentation pattern is also stored at parse-time with all-`Real`. For a trimer, when you `extract_subsets(1, 2)`, the `Mol.fragment_types_` gets reset to `[Real, Ghost, Absent]`. The CoordEntries don't change, but every function in Mol is trained to iterate over the frags, and handle Ghost or Absent differently, so that in the fn output, they _appear_ ghosted (type B) or absent. Because the mass, Z info in the CoordEntry is unchanged, this ghostedness is reversible. So in the type B sense, mass must not be set to 0 permanently b/c then type B would be irreversible. I suppose you're advocating zeroing mass for type A? That'd be more consistent",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363473061:343,down,down,343,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363473061,1,['down'],['down']
Availability,I completely agree. Which downstream packages should I check for usage of the functionality?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-966582267:26,down,downstream,26,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966582267,1,['down'],['downstream']
Availability,"I currently plan to combine the three geometry generators into one because their logic is so similar. Could you be more specific about the interface changes and desired new features _after_ the C++ code is moved over? If combining the geometry generators is obviously going to break something down the road, best to find out now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-360926158:293,down,down,293,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-360926158,1,['down'],['down']
Availability,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:87,error,error,87,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013,2,['error'],['error']
Availability,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:175,toler,tolerances,175,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110,1,['toler'],['tolerances']
Availability,"I didn't examine the code in detail; does it use aliasing? I think Neese and coworkers use it a lot, the idea is to make the integrand smoother so that the quadrature errors are smaller and one can get away with smaller grids.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1120063699:167,error,errors,167,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1120063699,1,['error'],['errors']
Availability,I didn't know psi5 already existed :laughing: . I do prefer to start with a version number that is clearly 'newer' then the previous ones (like 4.0b5). And 1.0 seems like a downgrade.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182947030:173,down,downgrade,173,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182947030,2,['down'],['downgrade']
Availability,"I didn't think of that, @loriab. These Hessians come in peace (although they could well impart the occasional seg fault). I was within epsilon of having the code done last week (literally; I screwed up some orbital energy scaling term somehow) so I came very close to beating `1.0`. Still, this code is almost useless until we get DF and KS terms in there, so no sense in hurrying it into a new release version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230548237:114,fault,fault,114,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230548237,1,['fault'],['fault']
Availability,"I do need to do H-by-E here. I wish there were analytic rohf gradients available. I'm not in need of a fix for this immediately, just something I came across and wanted to raise it as an issue. If this will get fixed by the aforementioned PR and future efforts, that sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632986963:71,avail,available,71,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632986963,1,['avail'],['available']
Availability,"I don't comment here all that often anymore, which is bittersweet (and I very much miss both my colleagues on PSI4 and the Vortex). We have gone through my old notes on CCA (sketch at best, we know), and many nested references therein. For Cartesian AOs, CCA matters - this lets you use a single normalization coefficient for everything, and tolerate non-normalized off-diagonal cartesian tensor components (i.e, xx is normalized in D, xy is not normalized in D, xxx is normalized in F, xxy or xyz is not normalized in F) - Jet taught me this and it is one of the coolest tricks in the book. For spherical AOs, as far as we can tell, there is *no* CCA convention except that everything be normalized (as literally all codes do). The one ""CCA"" paper we can find on this topic itself glancingly cites an older Schlegel / Frisch paper (I think before the big happening), which itself is outdated by about > two dozen articles on solid harmonics. Everyone who codes integrals deals with basis ordering - what you shudder about is weird normalization factors (particularly non-diagonal ones), not rigid permutations. . The message is this: I am not convinced there is a standard. So maybe not optimal to follow to follow an implied one. Show me a reference of a real, used standard, and Lightspeed and Tachyon will be there tomorrow. . [report (7).pdf](https://github.com/psi4/psi4/files/8746880/report.7.pdf); [jcc.20815.pdf](https://github.com/psi4/psi4/files/8746882/jcc.20815.pdf); [sh.pdf](https://github.com/psi4/psi4/files/8746881/sh.pdf)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537#issuecomment-1133519662:342,toler,tolerate,342,https://psicode.org,https://github.com/psi4/psi4/pull/2537#issuecomment-1133519662,1,['toler'],['tolerate']
Availability,"I don't have a chance to compile with icpc 18 right now, but we do have it; at NIH. One way to narrow this problem down is to wrap half of the; matrix.h functions in preprocessor pragmas to kill optimization (; https://software.intel.com/en-us/node/524550), leaving the rest compiled as; normal with -O2 or higher. By eliminating half of the functions'; optimization each time, it should be quite easy to figure out which; function is causing problems by bisection. On Mon, Feb 26, 2018 at 4:11 PM, Justin Turney <notifications@github.com>; wrote:. > I'm hitting a similar error message with dcft_gradient_UHF.cc but it; > reports that the error is in libmints/matrix.h. Reducing the optimization; > level was the only way I could get it to compile. Even compiling with -O2; > gives the error, -O1 is the only way to resolve it.; >; > I see no issue with the compiler- and file-specific flags for this.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/923#issuecomment-368651645>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAMUmdYwvJwuQd4BJz52tlrgzOg8dBWUks5tYx3YgaJpZM4SPiMy>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368659317:115,down,down,115,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368659317,4,"['down', 'error']","['down', 'error']"
Availability,"I don't know if it's relevant or not, but that error message was produced with the `psi4/linux-64::psi4-1.3.2+ecbda83-py37h31b3128_0` build from the `psi4` conda channel.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-759704666:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-759704666,1,['error'],['error']
Availability,"I don't know if this is the same problem, but how did you clone the repo? . In the manual, it says that you should do a git --recursive clone rather than just a git clone. We had trouble with pcm if we didn't do this, but the error appeared during compilation of pcm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-170788018:226,error,error,226,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170788018,1,['error'],['error']
Availability,"I don't know why clang was so slow here. When I was testing on a working branch, the clangs finished in 42 min or so (27 & 35). [This](https://anaconda.org/conda-forge/llvmdev/files) might be a 3.9 clang. It's hard to tell without downloading the packages. On the whole, I expect travis to have a more diverse compiler selection. Should we ultimately aim for:; - clang 3.6, python 2.7; - clang 3.9, python 3.5; - gcc 4.9, python 2.7; - gcc 6, python 3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/510#issuecomment-259565547:231,down,downloading,231,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259565547,1,['down'],['downloading']
Availability,"I don't know, but it should presumably download that tar file from the appropriate place (sourceforge?). Perhaps you can set up the tar file where it expects. I'm not a psi4 developer - I only use it for comparing energies occasionally. Perhaps someone else has sorted that error out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55#issuecomment-40240628:39,down,download,39,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40240628,2,"['down', 'error']","['download', 'error']"
Availability,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:17,error,error,17,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547,7,"['error', 'toler']","['error', 'tolerance']"
Availability,"I don't quite understand what the numbers in brackets mean; * 1 -0.972087 ( 0, 0) 2AX 3AA.; * 2 -0.165902 ( 2, 2) 3AA 4AX.; * 3 -0.165902 ( 4, 3) 3AA 5AX.; I'm also not sure that 3AA 4AX means 1-st up active space electron in 3-rd orbital, 2-nd up electron on 4-th orbital, 1-st down electron on 4-th orbital. This would explain the sign of the determinant, since in ORCA order is reversed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-439626447:279,down,down,279,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-439626447,1,['down'],['down']
Availability,I don't really see if the CI failures are related to my changes. @loriab Any ideas?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967#issuecomment-1560779360:29,failure,failures,29,https://psicode.org,https://github.com/psi4/psi4/pull/2967#issuecomment-1560779360,1,['failure'],['failures']
Availability,I don't reproduce a failure of `tests/pytests/test_standard_suite.py::test_mp2_hessian_module` on master. I don't have enough details to say more. `sapt7` is indeed unrelated to this PR. See #2327.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946763755:20,failure,failure,20,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946763755,1,['failure'],['failure']
Availability,I don't see a limitation for spherical functions? Only for cartesian where psi4 would throw an error.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-471974294:95,error,error,95,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-471974294,1,['error'],['error']
Availability,"I don't see any wB97X-D3/def2-TZVP energies from Psi4 1.4.1 in your data, just wB97X-D/def2-SVP. . Looking at the data you have from Psi4 1.4.1, the wB97X-D/def2-SVP energies relative to the minimum energy conformer for each molecule are similar to the relative energies from ORCA. Though some conformers have significant differences for the relative energy from ORCA vs from Psi4, most differences are around 1 kcal/mol or less. I would expect similar deviations between wB97X-D/def2-SVP and wB97X-D/def2-TZVP results that were both computed using the same software. The energy is sensitive to the quality of the basis set. Using a different dispersion correction than the 'reference' ORCA energies doesn't help either. The differences compound with different implementations of various algorithms between different software packages. For molecules with conformers that are all close in energy, these deviations will bring the r<sup>2</sup> way down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-974333804:946,down,down,946,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-974333804,1,['down'],['down']
Availability,"I don't think the ROHF orbital energies are incorrect, but they're [ambiguously defined](https://aip.scitation.org/doi/10.1063/1.4849615) due to an arbitrary choice of coupling between same-symmetry closed and open shell blocks. We do have [CUHF](https://aip.scitation.org/doi/full/10.1063/1.3503173) available, which gives an S^2 eigenfunction (i.e. ROHF) with the orbital energies emerging the same as what would come from semicanonicalization; either that or the default ROHF (followed by semicanonicalization) should be equally good references for SAPT, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975#issuecomment-675473265:301,avail,available,301,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-675473265,1,['avail'],['available']
Availability,"I don't think this has anything to do with the projection; but rather the use of the second-order convergence acceleration scheme. Orca's `FMatrix` guess also misses the core electrons (since they don't exist in the orbitals), but the first diagonalization should reintroduce them. Of course, a question is, how is the projection implemented in Orca? You can either project the full Fock matrix, in which case the null space will be zero, or you could just project the XC part in which case the null space will essentially be the core Hamiltonian. The latter scheme would restore the core orbitals, but they wouldn't be screened at all; you might also introduce spurious valence states which will ruin the performance of the guess... Probably the best scheme would be to do the mixed-basis version in which you compute the Fock matrix in the new basis by the orbitals in the old basis without any projection operators. However, this method requires the capability to compute mixed-basis integrals which is not available in Psi4; see equation 2 in [Chem. Phys. Lett. 531, 229 (2012)](https://doi.org/10.1016/j.cplett.2012.02.012).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-664972020:1010,avail,available,1010,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664972020,1,['avail'],['available']
Availability,"I don't think you've pulled from github since the plugin fix was added. As long as your `printmo.cc` has `Process::environment.wavefunction();` in it, you'll keep getting this error. This (https://github.com/psi4/psi4/blob/master/share/plugin/mointegrals.cc.template) is the corrected template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195795181:176,error,error,176,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195795181,1,['error'],['error']
Availability,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:875,down,download,875,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088,4,['down'],['download']
Availability,"I don't want to take more of your time.; I tried the input that you sent me and the calculation ends with the following error. ---. PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 23, in <module>; File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; run_conv_omp2(name, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in run_conv_omp2; psi4.occ(); RuntimeError: PSIO Error. ---. In the input you used some keywords that i'm not familiar with, so i have to study the manual a little more, to understand the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144750805:120,error,error,120,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144750805,3,"['Error', 'error']","['Error', 'error']"
Availability,I don't wholly trust the libint/libmints error messages to trigger when requested angmom too high. you've ruled out the libint compilation?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1992#issuecomment-681079304:41,error,error,41,https://psicode.org,https://github.com/psi4/psi4/issues/1992#issuecomment-681079304,1,['error'],['error']
Availability,"I echo Daniel on using the Wavefunction.variables map for storage of the pcm energy. Eventually, Wfn.variables will be primary and P::e dropped, but for now, make them mirror. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst seems a good place for all Psi4+PCMSolver documentation. And maybe mention on the CC page that CC+PCM is available if PCMSolver enabled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/683#issuecomment-296845920:2,echo,echo,2,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296845920,2,"['avail', 'echo']","['available', 'echo']"
Availability,"I figure this was probably caught already, but I thought I should submit a report just in case. I was running some test calculations in psi4 (v 0.4.0, Ubuntu) and I got the following error while trying to calculate Mulliken charges:. ```; [Screen output]. Traceback (most recent call last):; File ""<string>"", line 58, in <module>; File ""/home/kratz/bin/miniconda/share/psi4/python/p4util/util.py"", line 41, in oeprop; oe = psi4.OEProp(wfn); Boost.Python.ArgumentError: Python argument types in; OEProp.__init__(OEProp, str); did not match C++ signature:; __init__(P7_object, N5boost10shared_ptrIN3psi12WavefunctionEEE); ```. The DFT calculation that ran before the Mulliken charges completed. Just the oeprop command failed. This did not happen with an older copy on a different computer (PSI4 v 0.3.593, CentOS). As I was typing this report I tried to reinstall psi4 from conda on my CentOS machine, and I got a failure during the SAPT0 test calculations as well:. ```; [Conda output]. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32. Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/proc.py"", line 3072, in run_sapt; e_dimer = scf_helper('RHF', **kwargs); File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/proc.py"", line 1972, in scf_helper; e_scf = psi4.scf(precallback, postcallback); Boost.Python.ArgumentError: Python argument types in; psi4.scf(NoneType, NoneType); did not match C++ signature:; scf(N5boost10shared_ptrIN3psi12WavefunctionEEE, P7_object, P7_object); ```. -kratz",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240:183,error,error,183,https://psicode.org,https://github.com/psi4/psi4/issues/240,2,"['error', 'failure']","['error', 'failure']"
Availability,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/158#issuecomment-129556718:396,ERROR,ERROR,396,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718,25,['ERROR'],['ERROR']
Availability,"I follow the f-sapt example in https://psicode.org/psi4manual/master/fisapt.html#i-sapt-a-representative-example.; When I run the fsapt.py, it reported such error:; Traceback (most recent call last):; File ""fsapt.py"", line 1048, in <module>; stuff = compute_fsapt(dirname, False); File ""fsapt.py"", line 888, in compute_fsapt; order2 = extract_order2_fsapt(osapt, total_ws['A'], total_ws['B'], frags); File ""fsapt.py"", line 496, in extract_order2_fsapt; val = np.einsum('i,ij,j', valueA, value, valueB); File ""<__array_function__ internals>"", line 6, in einsum; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib/python3.7/site-packages/numpy/core/einsumfunc.py"", line 1361, in einsum; return c_einsum(*operands, **kwargs); ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (52,)->(52,newaxis) (51,51)->(51,51) (52,)->(52) ; So I wonder is this a bug in program or somthing other?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281:157,error,error,157,https://psicode.org,https://github.com/psi4/psi4/issues/2281,1,['error'],['error']
Availability,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:311,error,error,311,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['error'],['error']
Availability,"I found a typo, while reviewing the code for tdscf_excitations. I did not reproduce an issue. I found the typo before actually using the code (therefore no formal bug report). ; ""LEFT EIGENVECTOR ALPHA"" is exported wrong; it holds the value of ""LEFT EIGENVECTOR BETA"".; The correct value of ""LEFT EIGENVECTOR ALPHA"" is overwritten. The error should be in:; https://github.com/psi4/psi4/blob/75ae6967d25db377cce83524ae16b348685d50d0/psi4/driver/procrouting/response/scf_response.py#L785. The line should read BETA. I will send a pull request very soon, which fixes this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2452:336,error,error,336,https://psicode.org,https://github.com/psi4/psi4/issues/2452,1,['error'],['error']
Availability,"I found that in version=1.5 MintsHelper.ao_eri() does not work for multiple basis sets, such as MintsHelper.ao_eri(BasisA, BasisA, BasisB, BasisB).; In 1.5, I ran this:; ```python; print(""python=%s, \npsi4=%s""%(sys.version, psi4.__version__)); H = psi4.geometry(; """"""; nocom; noreorient; H -1 0 0; units bohr; symmetry c1""""""; ); O = psi4.geometry(; """"""; nocom; noreorient; O 1 0 0; units bohr; symmetry c1""""""; ); psi4.set_options({""reference"": ""uhf""}); EH, wfnH = psi4.energy(""scf/sto-3g"", molecule=H, return_wfn=True); EO, wfnO = psi4.energy(""scf/sto-3g"", molecule=O, return_wfn=True); mints = psi4.core.MintsHelper(wfnH.basisset()); aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); aoeriHO.shape; ```; ==>; ```; python=3.8.12 (default, Oct 12 2021, 13:49:34) ; [GCC 7.5.0], ; psi4=1.5; RuntimeError Traceback (most recent call last); /tmp/ipykernel_845/2933828549.py in <module>; ----> 1 aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); 2 aoeriHO.shape. RuntimeError: ; Fatal Error: Unexpected integral type (aa|bb) in setup_sieve(); Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1638121835567/work/psi4/src/psi4/libmints/twobody.cc on line: 249; The most recent 5 function calls were:. psi::TwoBodyAOInt::setup_sieve(); psi::IntegralFactory::eri(int, bool, bool); ```; But in 1.3.2, the same code gave me; ```; python=3.7.11 (default, Jul 27 2021, 14:32:16) ; [GCC 7.5.0], ; psi4=1.3.2; (5, 5, 1, 1); ```; I am not sure if this was an issue with my python or my WSL2 or psi4. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439:1084,Error,Error,1084,https://psicode.org,https://github.com/psi4/psi4/issues/2439,2,['Error'],['Error']
Availability,"I get the following error when building psi4. ```; Scanning dependencies of target pcmsolver; [ 53%] Creating directories for 'pcmsolver'; [ 53%] Performing download step for 'pcmsolver'. [ 53%] No patch step for 'pcmsolver'; [ 53%] No update step for 'pcmsolver'; [ 53%] Performing configure step for 'pcmsolver'; CMake Error: The source directory ""/Users/sternc1/src/python-lib/psi4public/interfaces/pcmsolver"" does not appear to contain CMakeLists.txt.; Specify --help for usage, or press the help button on the CMake GUI.; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-configure] Error 1; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I used the following setup command:; `./setup --cc /usr/local/bin/clang-omp --cxx /usr/local/bin/clang-omp --fc /usr/local/bin/gfortran`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/issues/199,6,"['Error', 'down', 'error']","['Error', 'download', 'error']"
Availability,"I get the following output with request to submit a bug report:; ```; Threads set to 4 by Python driver. Memory set to 11.176 GiB by Python driver.; Traceback (most recent call last):; File ""/var/lib/slurm/slurmd/job23834122/slurm_script"", line 16, in <module>; myener = psi4.energy(""WB97X/aug-cc-pvqz"", molecule=geom); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 429, in scf_iterate; self.form_C(); RuntimeError: ; Fatal Error: Count 8 alpha electrons, expected 7.; This is a bug. Please file a report.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libscf_solver/hf.cc on line: 482; ```; from this input; ```; #!/usr/bin/env python3; import psi4 as psi4; psi4.core.set_num_threads(4); psi4.set_memory(12000000000); psi4.core.set_output_file('Al.out', False); psi4_io = psi4.core.IOManager.shared_object(); psi4_io.set_default_path('/tmp/'); geometry= """"""; 0 2; Al 0 0 0; """"""; psi4.set_options({'reference': 'uhf'}); geom = psi4.geometry(geometry); myener = psi4.energy(""WB97X/aug-cc-pvqz"", molecule=geom); with open('atomization_energy.dat', 'w') as aefile:; aefile.write('Atomization energy %g\n' % myener); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2858:1220,Error,Error,1220,https://psicode.org,https://github.com/psi4/psi4/issues/2858,2,['Error'],['Error']
Availability,"I get this error when running `cmake -H. -Bobjdir_simint -DCMAKE_BUILD_TYPE=Debug -DENABLE_simint=ON` on my laptop with CMake 3.2.2; ```; CMake Error at /usr/share/cmake-3.2/Modules/ExternalProject.cmake:2027 (get_property):; INTERFACE_LIBRARY targets may only have whitelisted properties. The; property ""_EP_IS_EXTERNAL_PROJECT"" is not allowed.; Call Stack (most recent call first):; /usr/share/cmake-3.2/Modules/ExternalProject.cmake:2324 (_ep_add_configure_command); CMakeLists.txt:154 (ExternalProject_Add); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281017579:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281017579,2,"['Error', 'error']","['Error', 'error']"
Availability,"I get this error:; > OMP: Info #270: omp_set_nested routine deprecated, please use omp_set_max_active_levels instead. Using this as an input:. ```; molecule {; He 0 0 0; --; He 2 0 0; }; import snsmp2; energy('sns-mp2'); ```. I have installed it from conda channel of psi4:. > conda create -n psi4 psi4 snsmp2 -c psi4. I also did. > conda update psi4 -c psi4. as advised on the [psi4 website](http://www.psicode.org/psi4manual/master/build_obtaining.html#faq-binarypackage) . Package versions:; ```; >>> import psi4; >>> psi4.__version__; '1.3.2'; >>> snsmp2.__version__; '1.0.1.dev24'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/issues/1820,1,['error'],['error']
Availability,"I got a high AM version generated. It built all its files (some indiv files take 10h to compile) and then it failed on the link step. I've still got the directory, so I'm hoping to investigate more next week. The generated code is at [Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz](https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz) if you're feeling adventurous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1130271539:319,down,download,319,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1130271539,1,['down'],['download']
Availability,I got down to 11 test failures w/ py3.4.3.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160:6,down,down,6,https://psicode.org,https://github.com/psi4/psi4/pull/160,2,"['down', 'failure']","['down', 'failures']"
Availability,I got it. It is my fault. I comment out the wrong line):. @loriab,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/428#issuecomment-229627679:19,fault,fault,19,https://psicode.org,https://github.com/psi4/psi4/issues/428#issuecomment-229627679,1,['fault'],['fault']
Availability,"I got that appveyor py27 error, too. Rebasing to bring in #1278 fixed it. No urgency, just when you're ready.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-427007974:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-427007974,1,['error'],['error']
Availability,"I got the static_assert error again now. The file it's triggering on hasn't had recent changes, so I don't know why it's popping up now, unless it's an intermittant/brownout strategy to push upgrades. Anyways, switching the llvm version https://github.com/psi4/psi4/pull/2791/files#diff-9f5f8e4d87a7d1fbb0e8f30d1c680c5f42f6af10c04aa81d342c7dfa5af9a99fR10 at least gets the build started.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894:24,error,error,24,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894,1,['error'],['error']
Availability,"I had no problems with compilation on my laptop (clang 4.0.0) and on our cluster (gcc-4.9, g++-4.9). However, I am not able to generate plugins. This command gives the following error:. ```; $PSI4HOME --new-plugin-makefile psi4_inversion; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'; ```. If I create a blank input.dat file, it does not quit without an error, but it doesn't read the --new-plugin-makefile option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-254667012:178,error,error,178,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254667012,2,['error'],['error']
Availability,I had the following problem when trying to build Psi4 from current master branch. It seems like there was an issue extracting the Libint2-export-5-4-3-6-5-4_1.tgz archive. ```; CMake Error: Problem with archive_write_header(): Can't create 'export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h'; CMake Error: Current file: export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h; CMake Error: Problem extracting tar: ~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz; -- extracting... [error clean up]; CMake Error at libint2_external-stamp/extract-libint2_external.cmake:33 (message):; error: extract of; '~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz'; failed; ```. Relevant version numbers:; - Python: v3.6.3; - CMake: v3.19.2; - Intel C/C++ compiler: v18.0. Build instructions:; ```; cmake .. -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc; make -j 24; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2147:183,Error,Error,183,https://psicode.org,https://github.com/psi4/psi4/issues/2147,6,"['Error', 'error']","['Error', 'error']"
Availability,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-223730550:744,error,error,744,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550,2,"['Down', 'error']","['Downloads', 'error']"
Availability,I have a computer at work with openSUSE 13.2 (Newer version compared to your 12.3) I have recently compiled psi4 on it without this error. Maybe it's an issue with that version of ld? Your error message seems to indicate that ld knows this behavior is a bug. My version of ld is newer than yours also:; $ ld --version; GNU ld (GNU Binutils; openSUSE 13.2) 2.24.0.20140403-6.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/785#issuecomment-323494378:132,error,error,132,https://psicode.org,https://github.com/psi4/psi4/issues/785#issuecomment-323494378,2,['error'],['error']
Availability,"I have a noisy geometry of the formaldehyde molecule that I would like to symmetrize. This geometry is in point group `c1`, and we know the symmetrized geometry should be in point group `c2v`. When I symmetrize the molecule with tolerance <= 0.13, there is no change to the point group. tolerance >= 0.14 results in an error:. input:; ```; molecule mol {; 0 1 ; O 2.13230 0.38443 1.67788; C 2.15923 0.11704 2.84188; H 2.84348 -0.50524 3.23470; H 1.48424 0.56642 3.52551; }. tol = 0.13; #tol = 0.14; print(mol.schoenflies_symbol()); mol.symmetrize(tol); print(mol.schoenflies_symbol()); ```; stdout (0.13 tolerance):; ```; c1; c1; ```; stdout (0.14 tolerance):; ```; c1; Traceback (most recent call last):; File ""/scratch/glick/psi4/objdir/stage/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 31, in <module>. RuntimeError: ; Fatal Error: Broken Symmetry; Error occurred in file: /scratch/glick/psi4/psi4/src/psi4/libmints/petitelist.cc on line: 284; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::symmetrize(double, bool); psi::Molecule::symmetrize_to_abelian_group(double). Printing out the relevant lines from the Psithon --> Python processed input file:; ; ; """""",""mol""); core.IO.set_default_namespace(""mol""); print(mol.schoenflies_symbol()); --> mol.symmetrize(0.14); print(mol.schoenflies_symbol()). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Broken Symmetry !; ! Error occurred in file: /scratch/glick/psi4/psi4/src/psi4/libmints/petitelist.cc !; ! on line: 284 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Molecule::symmetrize(double, bool) !; ! psi::Molecule::symmetrize_to_abelian_group(double) !; ! !; !------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2579:229,toler,tolerance,229,https://psicode.org,https://github.com/psi4/psi4/issues/2579,7,"['Error', 'error', 'toler']","['Error', 'error', 'tolerance']"
Availability,"I have a system, where I'm interested in running sapt2+/aug-cc-pVDZ calculation. However, it quits after the start of SAPT2+. ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SAPT2+ //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. *** tstart() called on cnode3005; *** at Sat Feb 29 03:11:38 2020. SAPT2+ ; Ed Hohenstein; 6 June 2009. Orbital Information; --------------------------; NSO = 1061; NMO = 1061; NRI = 3161; NOCC A = 69; NOCC B = 56; FOCC A = 19; FOCC B = 15; NVIR A = 992; NVIR B = 1005. Estimated memory usage: 140951.0 MB. Natural Orbital Cutoff: 1.000E-06; Disp(T3) Truncation: Yes; CCD (vv|vv) Truncation: Yes; MBPT T2 Truncation: Yes. Monomer A: 486 virtual orbitals dropped; Monomer B: 598 virtual orbitals dropped; ```; This the end of the log file.; ```; /home/XXX/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00007F6CEC755A15 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC753637 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC66BF32 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC66BD86 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC63A38D Unknown Unknown Unknown; libpcm.so.1 00007F6CEC63D75D Unknown Unknown Unknown; libpthread.so.0 00000034CF00F710 Unknown Unknown Unknown; core.so 00007F6CF40872D2 Unknown Unknown Unknown; core.so 00007F6CF4087EDA Unknown Unknown Unknown; core.so 00007F6CF408927E Unknown Unknown Unknown; core.so 00007F6CF404A1F0 Unknown Unknown Unknown; core.so 00007F6CF3F6CDF7 Unknown Unknown Unknown; core.so 00007F6CF33B0027 Unknown Unknown Unknown; core.so 00007F6CF33F983F Unknown Unknown Unknown; core.so 00007F6CF33C3CEA Unknown Unknown Unknown; core.so 00007F6CF33C3BB4 Unknown Unknown Unknown; core.so 00007F6CF304A32C Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6B8FDD1 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C184A6 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C18FC9 Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828:902,fault,fault,902,https://psicode.org,https://github.com/psi4/psi4/issues/1828,1,['fault'],['fault']
Availability,"I have added a test case similar to the test case for the gradient. I do not know of other codes that have this capability but the test case enumerate all the necessary terms and check for the correct expansion formula for a trimer truncated at the two-body level. Without this PR, the many-body expansion terms for the Hessian are not summed up correctly if the VMFC basis set superposition error scheme is used. The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930:392,error,error,392,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930,1,['error'],['error']
Availability,"I have adjusted the case accordingly and I'm still encountering an error message: . ```; import psi4; import numpy as np. # Set Psi4 options for the calculation; psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [5, 0, 1, 1], # Doubly occupied orbitals; 'socc': [0, 0, 1, 0], # Singly occupied orbitals; 'restricted_docc': [5, 0, 0, 0], # Core orbitals; 'active': [0, 0, 2, 0], # Active orbitals; 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:67,error,error,67,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['error'],['error']
Availability,"I have also had trouble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/param",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232825635:226,error,errors,226,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635,4,['error'],"['error', 'errors']"
Availability,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-156910025:540,error,errors,540,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025,2,['error'],"['error', 'errors']"
Availability,"I have been modifying my gdma code so that it can handle h functions. It's a fairly straightforward change, but I found that I got errors in the multipoles when there were h functions in the basis. In particular, the total charge was always nonzero. Repeated checks found no errors in the gdma code. Finally I found that there is a bug in the treatment of h functions in Psi4, or at least an inconsistency with d, f and g. If the normalization factor for z^2 exp(-zeta r^2) is N, then the factor for xy exp(-zeta r^2) is \sqrt(3)N -- it needs the extra sqrt(3). Similarly z^5, xz^4, x^2z^3, xyz^3 and x^2y^2z cartesian h functions all need different normalization factors. If the gdma code takes account of these as it does for d, f and g, I get the errors. If however I treat them all as having the same normalization factor as z^5, I get sensible results -- total charges are now zero. Whether the results are correct, however, is doubtful, because the normalization error probably affects the wavefunction. Using an fchk file from Gaussian16 gives the same errors. Was the Psi4 fchk code derived from gaussian?. My revised version of gdma is available at https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574:131,error,errors,131,https://psicode.org,https://github.com/psi4/psi4/issues/1574,6,"['avail', 'error']","['available', 'error', 'errors']"
Availability,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:677,down,down,677,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,4,"['avail', 'down']","['available', 'down']"
Availability,"I have compiled psi4 on Linux (Centos) then I got the following run time error . ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so."". I have already sourced MKL and intel compilers as usual, with the following lines. ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/bin/compilervars.sh intel64; source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/mkl/bin/mklvars.sh intel64"". In old versions of psi4 I never encounter such a problem with the same intel package. Thanks,. @loriab @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/issues/552,2,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:751,error,error,751,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331,3,['error'],['error']
Availability,I have download the Psi4conda-1.3.2-py37-Linux-x86_64.sh and install it on a scientific Linux 6 computer with ldd (GNU libc) 2.12.; The installation finish without any error and I got a `Segmentation fault` when running `psi4 --test`. `conda list` gives. ```; # packages in environment at /users/grte2001/psi4conda:; #; # Name Version Build Channel; ambit 0.3 h137fa24_1 psi4; asn1crypto 0.24.0 py37_0 ; atomicwrites 1.3.0 py37_1 ; attrs 19.1.0 py37_1 ; blas 1.0 mkl ; ca-certificates 2019.1.23 0 ; certifi 2019.3.9 py37_0 ; cffi 1.12.3 py37h2e261b9_0 ; chardet 3.0.4 py37_1 ; chemps2 1.8.9 h8c3debe_0 psi4; conda 4.6.14 py37_0 ; cryptography 2.6.1 py37h1ba5d50_0 ; cvxopt 1.2.0 py37hfa32c7d_0 ; decorator 4.4.0 py37_1 ; deepdiff 3.3.0 py37_1 psi4; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; future 0.17.1 py37_0 ; gau2grid 1.3.1 h035aef0_0 psi4; gcp 2.0.2 h84218bc_1 psi4; gdma 2.2.6 h0e1e685_6 psi4; glpk 4.65 h3ceedfd_2 ; gmp 6.1.2 h6c8ec71_1 ; gsl 2.4 h14c3975_4 ; h5py 2.8.0 py37h989c5e5_3 ; hdf5 1.10.2 hba1933b_1 ; idna 2.8 py37_0 ; intel-openmp 2019.3 199 ; jsonpickle 0.9.6 py37_0 psi4; libedit 3.1.20181209 hc058e9b_0 ; libefp 1.5.0 h84097be_1 psi4; libffi 3.2.1 hd88cf55_4 ; libgcc-ng 8.2.0 hdf63c60_1 ; libgfortran-ng 7.3.0 hdf63c60_0 ; libint 1.2.1 hb4a4fd4_6 psi4; libstdcxx-ng 8.2.0 hdf63c60_1 ; libxc 4.3.4 h7b6447c_0 psi4; metis 5.1.0 hf484d3e_4 ; mkl 2019.3 199 ; mkl_fft 1.0.12 py37ha843d7b_0 ; mkl_random 1.0.2 py37hd81dba3_0 ; more-itertools 7.0.0 py37_0 ; ncurses 6.1 he6710b0_1 ; networkx 2.3 pypi_0 pypi; numpy 1.16.3 py37h7e9f1db_0 ; numpy-base 1.16.3 py37hde5b4d6_0 ; openfermion 0.9 py37hd763080_1 psi4; openfermionpsi4 0.4 py37h934b37d_0 psi4; openssl 1.1.1b h7b6447c_1 ; pcmsolver 1.2.1 py37h142c950_0 psi4; pint 0.9 py37_2 psi4; pip 19.1.1 py37_0 ; pluggy 0.11.0 pypi_0 pypi; psi4 1.3.2+ecbda83 py37h31b3128_0 psi4; psi4-rt 1.3.2 py37ha6b60c8_0 psi4; py 1.8.0 py37_0 ; pycosat 0.6.3 py37h14c3975_0 ; pycparser 2.19 py37_0 ; pydantic 0.23 py37_0 psi4; pylibefp ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792:7,down,download,7,https://psicode.org,https://github.com/psi4/psi4/issues/1792,3,"['down', 'error', 'fault']","['download', 'error', 'fault']"
Availability,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196087369:137,error,error,137,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369,1,['error'],['error']
Availability,"I have installed mkl-devel, but now I have a new issue:. ```; CMake Error at tests/fsapt-terms/CMakeLists.txt:4 (file):; file COPY cannot find; ""/server-home1/.../psi4/tests/fsapt-terms/../../psi4/share/psi4/fsapt/fsapt.py"". CMake Error at tests/fsapt-allterms/CMakeLists.txt:6 (file):; file COPY cannot find; ""/server-home1/.../psi4/tests/fsapt-allterms/../../psi4/share/psi4/fsapt/fsapt.py"".; ```. Is there a cmake comment I should look at in the psi4 documentation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-381277308:68,Error,Error,68,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-381277308,2,['Error'],['Error']
Availability,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:486,error,error,486,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['error'],['error']
Availability,"I have no horse in this race in terms of is the behavior of `Molecule.mass` or `Molecule.Z` acting strangely, but the inconstancy is a problem. If we took every property test in the suite and added a test where ghost atoms are involved I think we would turn up some failures since the way molecular weight is calculated in `optrot.cc` as @bgpeyton described does not properly ignore ghosted atoms and i wouldn't be surprised if there were others.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363463003:266,failure,failures,266,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363463003,1,['failure'],['failures']
Availability,"I have reap.py in tests/ now, and pywrap-db2 is working in addition to pywrap-freq-e-sowreap, but pywrap-opt-sowreap is still failing. That appears to be a bug or an error in the input file since I can't even run that one ""by-hand"". ; Error shown below:. ```; Traceback (most recent call last):; File ""<string>"", line 24, in <module>; File ""/home/ajay/psi4/source/lib/python/driver.py"", line 1191, in optimize; thisenergy = gradient(name, **kwargs); File ""/home/ajay/psi4/source/lib/python/driver.py"", line 824, in gradient; fmaster.write(p4util.format_options_for_input().encode('utf-8')); TypeError: format_options_for_input() takes exactly 1 argument (0 given); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/192#issuecomment-157864804:166,error,error,166,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157864804,2,"['Error', 'error']","['Error', 'error']"
Availability,"I have recently bought a new MacBook Air, and I have homebrew for my developing environment (on my old mac I had MacPorts: I never managed to compile and I finally gave up). I cloned the psi4 repo and went for the simplest build (./setup build; cd build; make -j). Once I had all required packages the setup worked smoothly.; Unfortunately, ""make -j"" gives me the following error:. > clang: error: unable to execute command: posix_spawn failed: Resource temporarily unavailable. which from a simple minded ""LMGTFY"" search seems to be a problem with too many child processes spawned by make. removing the ""-j"" seems to work: 70% done and running so far...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/396:374,error,error,374,https://psicode.org,https://github.com/psi4/psi4/issues/396,2,['error'],['error']
Availability,"I have revised the footnote. On Wed, Jul 8, 2015 at 11:53 PM, David Sherrill notifications@github.com; wrote:. > Footnote [2] of the capabilities table in the manual is a little unclear; > about what methods are available:; > ; > RHF and UHF reference are available, however the latter one should be; > requsted from DFOCC module. DF-MP2 is recommended as a faster; > alternative.; > ; > Update and revise manual. Check with Ugur about ROHF. Make appropriate; > defaults.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/106. ## . Assoc. Prof. Ugur Bozkaya; Department of Chemistry,; Ataturk University,; 25240 Erzurum, Turkey,; Tel: +90 442 231 41 14,; E-mail: ugrbzky@gmail.com,; ugur.bozkaya@atauni.edu.tr.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/106#issuecomment-119739035:212,avail,available,212,https://psicode.org,https://github.com/psi4/psi4/issues/106#issuecomment-119739035,2,['avail'],['available']
Availability,"I have reworked this PR to a general renovation of `toclen.cc`. All errors are now handled by calling `psio_error()`, OS-provided messages are decoded by a new fn that may be useful elsewhere later and the toclen fns now first check if the stream is ought to be open and error out early with a more specific error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1250060587:68,error,errors,68,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1250060587,3,['error'],"['error', 'errors']"
Availability,"I have the same issue:; ```; Python 3.6.4 |Anaconda custom (64-bit)| (default, Jan 16 2018, 18:10:19) ; [GCC 7.2.0] on linux. Ubuntu 16.04.2 LTS. python -c 'import psi4; print(psi4.__version__)'; 1.1; ```. It works under terminal and `ipython ` but crashes immediately in `jupyter notebook` with `bad_cast` error",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369560595:307,error,error,307,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369560595,1,['error'],['error']
Availability,I have tried the example you used and it also reported such error. Maybe it is the version of numpy that leads to this problem. Which version of numpy do you use. I use the 1.20.3.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902411466:60,error,error,60,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902411466,1,['error'],['error']
Availability,"I have tried to run the following input:. molecule no3 {; 0 2; N -0.000000289178 0.000000000000 -0.107371527464; O 0.000000787144 0.000000000000 1.265621161075; O 1.089067344013 0.000000000000 -0.585809671624; O -1.089067877991 0.000000000000 -0.585810897335; symmetry c1; }. set globals {; basis cc-pvtz; #df_basis_scf cc-pvtz-jkfit; #df_basis_cc cc-pvtz-ri; reference uhf; scf_type df; guess gwh; e_convergence 8; d_convergence 6; mo_maxiter 400; cepa_type df; qc_module occ; }; energy('cepa(0)'). Then, I get the following error:. PsiException: Error: cepa(0) requires ""reference rhf"". An error has occurred Py-side; Traceback:; <class 'p4xcpt.ValidationError'>: Error: cepa(0) requires ""reference rhf"".: File ""<string>"", line 37, in <module>. File ""/usr/local/programs/psi4intel/share/psi/python/driver.py"", line 629, in energy; procedures['energy'][lowername](lowername, **kwargs). File ""/usr/local/programs/psi4intel/share/psi/python/proc.py"", line 3783, in run_cepa; raise ValidationError(""Error: %s requires \""reference rhf\""."" % lowername). Something should be wrong in proc.py or I missed something. @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/273:526,error,error,526,https://psicode.org,https://github.com/psi4/psi4/issues/273,5,"['Error', 'error']","['Error', 'error']"
Availability,I have updated my psi4 program and still got the message BasisSetNotFound; How can I download and install new basis set list,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/917#issuecomment-364853728:85,down,download,85,https://psicode.org,https://github.com/psi4/psi4/issues/917#issuecomment-364853728,1,['down'],['download']
Availability,I have updated the body of the issue with details about the error message. Thanks in advance!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238:60,error,error,60,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238,1,['error'],['error']
Availability,I have updated the call points for the new signature of `triplet/doublet` and tests pass locally with warnings converted to errors. So this is ready for final review + merge. @psi4/maintainers,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-456894587:124,error,errors,124,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-456894587,1,['error'],['errors']
Availability,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:47,error,error,47,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767,1,['error'],['error']
Availability,"I haven't encountered this behavior myself, but it does sound faulty. Since there's the binary as fallback and more and more pieces are using c++11, I don't think we're avoiding it anymore. @robertodr was talking about the feasibility of using some advanced cmake features to handle this problem more logically (https://cmake.org/cmake/help/v3.1/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html). They will require bumping our required cmake version, but, for developers, that's not so bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-157058625:62,fault,faulty,62,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-157058625,1,['fault'],['faulty']
Availability,"I haven't had a chance to look into it, but yes, I suspect the version check isn't tight enough for libxc. We only recently added some that weren't available in v5. I've been using v6.2 fwiw. I'll figure out the right min pin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3099#issuecomment-1848408260:148,avail,available,148,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848408260,1,['avail'],['available']
Availability,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254#issuecomment-187310350:672,down,down,672,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350,2,['down'],['down']
Availability,"I haven't tested it, but one issues seems (as far as I read the traceback docs) that the exception message from the `SyntaxError` contains the offending line before the normal content, which is `ExceptionName: <text>`. . Though syntax errors usually crash for me like this:. ```; Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29; print '1'; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print('1')?. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 348, in <module>; suspect_lineno = traceback.extract_tb(exc_traceback)[1].lineno - 1 # -1 for 0 indexing; IndexError: list index out of range; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204:235,error,errors,235,https://psicode.org,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204,1,['error'],['errors']
Availability,I haven’t rebased in a few months but I’ve no reason not to think this is ready to go if only libxc would do a tag with the changes we need. Namespaced headers would also be nice since they think the changes are API breaking anyways. And that’d be a comparatively easy adjustment for their downstream.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-449589424:290,down,downstream,290,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-449589424,1,['down'],['downstream']
Availability,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349,3,"['avail', 'error', 'failure']","['available', 'error', 'failure']"
Availability,"I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706998523:162,robust,robust,162,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706998523,2,['robust'],['robust']
Availability,"I implemented OMP2.5 gradients with obsessively tight convergence criteria.; The fixed-Psi implementation agrees with Psi4Numpy OMP2.5 gradients within testing tolerance, but the current-Psi implementation does not. Note that `omp2p5-grad2` only has one independent gradient parameter, being a diatomic. The values the three implementations give for this parameter are:; ```; Psi4Num: 0.011650390674; New Psi: 0.011650262043; ^; Old Psi: 0.011614594883; ^; ```. My conclusion is that my fix is correct, and the reference values are not correct to within testing values, although close enough to correct to not have caused a problem for most users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808#issuecomment-584134023:160,toler,tolerance,160,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-584134023,1,['toler'],['tolerance']
Availability,"I incorrectly wrote that down, `property` was killed off in favor of `properties`. I do like the former better as well, but it messes with Python.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/934#issuecomment-371659678:25,down,down,25,https://psicode.org,https://github.com/psi4/psi4/issues/934#issuecomment-371659678,1,['down'],['down']
Availability,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084:207,error,error,207,https://psicode.org,https://github.com/psi4/psi4/issues/2084,3,"['Error', 'error']","['Error', 'error']"
Availability,"I installed the latest version of psi4 via conda using the following command: ; ```conda install psi4=1.2rc2 psi4-rt python=3.6 -c psi4/label/dev```. When I try to import psi4, I get the following error:; ```; In [1]: import psi4; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); ~/anaconda3/lib/python3.6/site-packages/psi4/__init__.py in <module>(); 53 try:; ---> 54 from . import core; 55 except ImportError as err:. ImportError: /home/chayas/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sincos4_l9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); <ipython-input-1-becb93fbd2ca> in <module>(); ----> 1 import psi4. ~/anaconda3/lib/python3.6/site-packages/psi4/__init__.py in <module>(); 57 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in [DY]LD_LIBRARY_PATH"".format(err)); 58 else:; ---> 59 raise ImportError(""{0}"".format(err)); 60 ; 61 from psi4.core import set_output_file, get_variable, set_variable, get_num_threads, set_num_threads. ImportError: /home/chayas/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sincos4_l9; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036:197,error,error,197,https://psicode.org,https://github.com/psi4/psi4/issues/1036,1,['error'],['error']
Availability,"I just compiled psi4 using Intel compilers 16.0.3 20160415 (icc icpc ifort). When I tested it with opt-irc-1 and opt-irc-2, the segmentation fault appeared. (System Ubuntu 14.04). Output for opt-irc-1: (It seems to be interrupted after the first SCF HESS). ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.0.54 Driver. Git: Rev {master} 8d4cec3 . J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, U. Bozkaya, A. Yu. Sokolov, D. G. A. Smith, R. Di Remigio,; R. M. Richard, J. F. Gonthier, H. R. McAlexander, M. Saitow, and; B. P. Pritchard; -----------------------------------------------------------------------. Psi4 started on: Mon Aug 22 01:48:05 2016. Process ID: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:141,fault,fault,141,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['fault'],['fault']
Availability,I just fixed the issue with xrange and the frozen MOs. Will go over some of @dgasmith's comments soon. I just realized I could access the spaces from ciwfn instead of mcscf_obj. I'll remove the python bindings that I added since they seem redundant now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304475473:239,redundant,redundant,239,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304475473,1,['redundant'],['redundant']
Availability,"I just had a look at the tests, I realise I had been using a string as the input for the solvent, but it should be float/int type! So this was indeed user error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119#issuecomment-1906149071:155,error,error,155,https://psicode.org,https://github.com/psi4/psi4/issues/3119#issuecomment-1906149071,1,['error'],['error']
Availability,"I just ran both ""source activate p4env"" and ""export LD_LIBRARY_PATH=/path/to/miniconda/envs/p4env/bin/../lib:$LD_LIBRARY_PATH"" to no avail, still get the symbol lookup error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-291267736:133,avail,avail,133,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291267736,2,"['avail', 'error']","['avail', 'error']"
Availability,"I just ran it another few times and I'm seeing the behavior you mentioned, including once where it failed with a convergence error (i.e. on the Python side).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385126008:125,error,error,125,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385126008,1,['error'],['error']
Availability,"I just ran the input, and it produces (admittedly unhelpful) error message `Fatal Error: UHF Density fitting NYI`. The CC3 code is not set up to use density fitting yet, unfortunately. If you remove the `cc_type` keyword, it runs correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/462#issuecomment-240188822:61,error,error,61,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240188822,2,"['Error', 'error']","['Error', 'error']"
Availability,I just tried 1.3 ```(Rev {HEAD} 20e5c7e)``` and get the same failures.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-479987948:61,failure,failures,61,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-479987948,1,['failure'],['failures']
Availability,"I just tried this with the very latest version of the code, and it works fine for me. The code will almost never have an I/O error after passing through a few iterations, unless your disk is full. Although this computation won't really require much scratch space, nevertheless, it's important to make sure an adequate scratch space has been set up (usually dedicated disks... not the default /tmp directory). http://www.psicode.org/psi4manual/master/external.html#scratch-files-psirc-file-and-elementary-restart",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170186608:125,error,error,125,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170186608,1,['error'],['error']
Availability,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/100#issuecomment-105456704:65,error,error,65,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704,5,"['Error', 'error']","['Error', 'error']"
Availability,"I know it takes a long time to track these things down, so thank you very much for the effort.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/719#issuecomment-303780789:50,down,down,50,https://psicode.org,https://github.com/psi4/psi4/issues/719#issuecomment-303780789,1,['down'],['down']
Availability,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:411,recover,recovering,411,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['recover'],['recovering']
Availability,"I looked at the original error and thought that the debugger was throwing on the wrong line, so this is a really great catch!. Yes, most of the CI code was overhauled last year; however, parts that deal with determinants have not been touched in awhile. I need to pull it down and double check, but I think this all looks great. Thanks for the contribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/607#issuecomment-277871699:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/pull/607#issuecomment-277871699,2,"['down', 'error']","['down', 'error']"
Availability,"I may have been unclear. It already works with multiple "":"" characters. Not sure if there is already such an error message somewhere. Format always seems: `<exception name>: <exception message>`, so the splitting the string at the first "":"" in 2 parts and then taking the second (=last) part should work well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611520933:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611520933,1,['error'],['error']
Availability,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:122,avail,available,122,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298,3,"['avail', 'down', 'failure']","['available', 'down', 'failure']"
Availability,"I modified the error message from being about ""core electrons"" to just ""electrons."" Aside from that, @susilehtola's comments addressed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600:15,error,error,15,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600,1,['error'],['error']
Availability,"I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. To get around this for now, I suggest simply running the two states in; separate jobs. -TDC. P.S. I removed the scf_type keyword and reproduced the error, so that's not; the problem. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Mar 9, 2016 at 12:40 PM, Andrew James notifications@github.com; wrote:. > @Konjkov https://github.com/Konjkov could you show some of the output; > above the PSIO_ERROR? I am not sure that DF integrals is the culprit; > here. It would be easier to track down if I could see where in the second; > exited state it is failing. I ran the input you posted but I don't see the; > same PSIO_ERROR.; > ; > It is strange that the first excited state would be able to run if the; > integrals were incompatible. Also, the file number 128 is a temporary file; > used by the CC codes to store things with a short lifetime. If the; > integrals were the source of the problem I would expect this kind of error; > to show up when trying to read some persistent quantity, which would then; > be used to compute the values that would go into file 128.; > ; > @kannon92 https://github.com/kannon92 do you have an input that will; > cause the PSIO_ERROR if DF is used? The driver should probably soft-fail; > with a warning to turn DF off in these cases. It would be very frustrating; > for a job to run this far just to fail.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/307#issuecomment-194417745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194423967:536,error,error,536,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194423967,6,"['down', 'error']","['down', 'error']"
Availability,"I noticed that https://github.com/psi4/psi4/blob/0c08c20596b0c9a278324a1ce77dd39e00434d6d/psi4/driver/inputparser.py#L705-L706 doesn't allow for hyphens or tildes (`[-~]`) in the molecule name? Is there any downstream purpose served by this restriction, or objection to adding those in as allowable characters in a name?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650:207,down,downstream,207,https://psicode.org,https://github.com/psi4/psi4/issues/650,1,['down'],['downstream']
Availability,I noticed that sapt8 test case is broken (no idea if it's because of me or not). It has 0.0 stored in `SAPT IND ENERGY` Psivar instead of the actual uncoupled value. I tried to modify sapt_util.py to make it compute the uncoupled induction energy for `SAPT IND ENERGY`but that did not fix the test case. I don't see where else `SAPT IND ENERGY` is set. Are the uncoupled energy values even available to sapt_util.py ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364643141:390,avail,available,390,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364643141,1,['avail'],['available']
Availability,"I noticed that there is some kind of overflow happening in the printing of the memory (see below).; Looks like all variables are doubles so idk why. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2493. The other thing is that this (and similar lines); `cost_ampAA = nocc2AA * nvir2AA;` should maybe be `cost_ampAA = naocc2AA * nvir2AA;`; Otherwise frozen-core is ignored for the memory consideration. Or I misunderstand something. If you could have a look @bozkaya ?. ```; DF-MP2.5 ; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ============================================================================== ; ============================================================================== ; ============================================================================== . MO spaces... . FC OCC VIR FV ; ----------------------; 19 49 827 0. Number of basis functions in the DF-CC basis: 2173. Available memory : 55313.11 MB ; Memory requirement for 3-index ints : 12050.26 MB ; Memory requirement for DF-CC int trans: 36889.52 MB ; Memory requirement for CC contractions: -34560.53 MB ; Total memory requirement for DF+CC int: -22510.28 MB ; Memory requirement for Wabef term : 39520.86 MB . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/898:941,Avail,Available,941,https://psicode.org,https://github.com/psi4/psi4/issues/898,1,['Avail'],['Available']
Availability,"I now have a version that compiles at home, though I'm not getting the narrowing warning-as-error that the auto-builder is. Still I've patched for it. This *should work* now...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1271938459:92,error,error,92,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1271938459,1,['error'],['error']
Availability,"I overlooked this when previously checking the documentation. The CI/MCSCF example from the following page does not work: http://www.psicode.org/psi4manual/1.3/molden.html. A minor issue is that `'ci'` is not a valid method. The second problem is that the `wfn.opdm` method should be replaced by `wfn.get_opdm`. (A useful example can be found in the source tree: `tests/molden2/input.dat`). I believe this is a correct example, but it would be nice if someone more familiar with the CI code could confirm and explain a few questions below. (I would be happy to make a PR with updated documentation.). ```; molecule {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; }. set basis cc-pVTZ; set opdm true. E, wfn = energy('fci', return_wfn=True); molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)); ```. Main questions:; - Is this example correct? It runs and seems to give sensible results.; - Which levels of theory (other than FCI and CASSCF) can be used? (CISD gives an error: `AttributeError: 'psi4.core.Wavefunction' object has no attribute 'get_opdm'`.); - How can one use the first two arguments to `get_opdm`? They are documented here in the source code: https://github.com/psi4/psi4/blob/880f87f5b2765ed00efaf6dd63c406b574c40157/psi4/src/psi4/detci/ciwave.h#L141 but setting anything else than `0, 0` for the first two arguments does not work: `Fatal Error: CIWavefunction::get_opdm: Requested OPDM was not formed!` I tried to add `set tdm true`, but this had no effect. (Also, I guess writing out a transition density matrix to a Molden file makes little sense.); - When the last argument is `True`, does this mean the frozen-core is included in the density matrix?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1638:979,error,error,979,https://psicode.org,https://github.com/psi4/psi4/issues/1638,2,"['Error', 'error']","['Error', 'error']"
Availability,"I presume I'm not the only one this happens to, but when CMake generates an error during setup, the error is often obscured and hidden in the wealth of output. Instead of simply printing: ""Error Occurred"" (or whatever it actually prints) and then having to scour the output I'm wondering if it would be possible to somehow re-echo the error at the bottom of the output. I'll look into this, but if one of the CMake gurus already knows how to do this, I'd appreciate any insight you can give.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/82:76,error,error,76,https://psicode.org,https://github.com/psi4/psi4/issues/82,5,"['Error', 'echo', 'error']","['Error', 'echo', 'error']"
Availability,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182874560:345,failure,failure,345,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560,3,"['error', 'failure', 'fault']","['error', 'failure', 'fault']"
Availability,I pretty much echo what AJ said. @amjames I see you have been reading `import this`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627#issuecomment-281991612:14,echo,echo,14,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-281991612,1,['echo'],['echo']
Availability,"I pushed changes to address the discussions on the original diffs. If you look through [this discussion](http://lists.llvm.org/pipermail/llvm-foundation/2016-May/000020.html) from the llvm mailing list. It looks like their servers are being overwhelmed with requests (which I suspect are originating from travis) so they have shut them down. Anyway, all travis builds using clang are going to fail until that gets resolved. . Whenever the clang builds are working again this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/395#issuecomment-223085146:336,down,down,336,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-223085146,1,['down'],['down']
Availability,"I put a patch to DF-MP2 code, so it computes the one-electron properties with property() function. I also added capability to use property() for the DETCI one-electron and transition properties. An example would be something like this:; property('cisd', properties=['transition_dipole']); As in the CC code, the properties=[] argument has to be specified, otherwise python throws an error. The list of properties for DETCI so far is limited to 'dipole', 'quadrupole', 'transition_dipole', and 'transition_quadrupole', but can be augmented easily if needed. Let me know if more functionality is needed. ; In the next few days I'll add support of property() for DCFT. I'll e-mail Ugur and ask if he can do the same. I'll also modify the manual and create a table with methods and references that can be used with property() function. But, besides that, we can probably close this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-38212166:383,error,error,383,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38212166,1,['error'],['error']
Availability,"I ran `sapt1` on an s390x box now and compared the output to `output.ref` and one thing is weird:. ```; - Geometry (in Bohr), charge = 0, multiplicity = 1:; + Geometry (in Bohr), charge = 0, multiplicity = 2:; ```. Nothing else much stands out besides `output.ref` being from an older version so having some other strings here and there. When SAPT would start. ```; - SAPT0 ; - Ed Hohenstein; - 6 June 2009; ```; I immediately get the backtrace:; ```; +Traceback (most recent call last):; + File ""/usr/bin/psi4"", line 269, in <module>; + exec(content); + File ""<string>"", line 53, in <module>; + File ""/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; + wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); + File ""/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; + e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn); +; +RuntimeError: ; +Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; ```. I checked and adding `DENOMINATOR_ALGORITHM CHOLESKY` to `input.dat` makes the test pass:. ```; Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst.......................................................PASSED; SAPT0 Eexch.......................................................PASSED; SAPT0 Eind........................................................PASSED; SAPT0 Edisp.......................................................PASSED; SAPT0 Etotal......................................................PASSED; ```. I'll try to step through the code first before I start recompiling with the patches you suggested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207:932,Error,Error,932,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207,1,['Error'],['Error']
Availability,"I ran a geometry optimization. Psi4 said the optimization converged in two steps, despite the delta E criterion not being met. . input file:; ```; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; -----------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:782,down,downloads,782,https://psicode.org,https://github.com/psi4/psi4/issues/1947,1,['down'],['downloads']
Availability,"I ran some tests to try to reproduce the error, and I found that the point where the error started _differed_ between runs. Sometimes, it ended after printing B(2, 1, 3), sometimes it printed *R(0,1) as infinity and said the optimization failed, sometimes it said it was generating an empirical Hessian for each fragment and failed after that... Is this what you're seeing?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385065247:41,error,error,41,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385065247,2,['error'],['error']
Availability,"I realized that having PSI4DATADIR set to """" causes this error. Instead, I had to make sure that PSI4DATADIR was not set at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271978256:57,error,error,57,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271978256,1,['error'],['error']
Availability,"I really agree those files are annoying because they also recompile when; you install. There's got to be a better way to do this. From what I; understand, and @loriab can correct me if I'm wrong, the idea is to keep; track of modifications to the source in the event that people obtained it; in some backwaters way (like a tar ball off GitHub, which apparently; doesn't include the .git files). That way we know how many changes since; the git hash have occurred for versioning purposes. If everyone obtained; it through normal manners, i.e. git clone, then you can just ask git how; many revisions have occurred since the hash and update the tag that way. On Wed, Aug 10, 2016 at 7:24 PM, Ben Pritchard notifications@github.com; wrote:. > In doing some development with the branch, I only have one more complaint; > (so far). Whenever I make a change to a file (in my case, in libmints),; > running make will compile several files before my changed file. This; > happens every time I make a change. The files are in versioned_code:; > ; > version.cc; > psi_start.cc; > python.cc; > ; > I know they have to be compiled every time, but it's annoying that they; > are compiled _before_ my changed files. Ie, these files are compiled; > before any self-induced compiler errors will surface. If you are fixing; > multiple errors, it's annoying (since some of them take a little while); > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-239034822, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8Tzhn7tnmOB6CZousGrZoVr20xrks5qel27gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239042342:1267,error,errors,1267,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239042342,2,['error'],['errors']
Availability,"I rebased the PR. In addition to eliminating the redundant argument, I did some `const` marking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2525#issuecomment-1087975547:49,redundant,redundant,49,https://psicode.org,https://github.com/psi4/psi4/pull/2525#issuecomment-1087975547,1,['redundant'],['redundant']
Availability,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971:156,error,errors,156,https://psicode.org,https://github.com/psi4/psi4/issues/971,2,['error'],"['error', 'errors']"
Availability,"I reinstalled with the rc2 installer and the same error persists. I am looking in the psi4 python module and the ""core"" file seems to not have been compiled correctly? I am guessing it should be a .py file but in my directory its a .pyd file and has a name ""core.cp38-win_amd64.pyd"". Can anyone confirm this and/or point me to where the corrrect file is here so I can download and replace?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875007336:50,error,error,50,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875007336,2,"['down', 'error']","['download', 'error']"
Availability,"I remarked at PsiCon that PSIO errors were public enemy no. 2, and I view this as further evidence. I'll investigate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1482#issuecomment-455580837:31,error,errors,31,https://psicode.org,https://github.com/psi4/psi4/issues/1482#issuecomment-455580837,1,['error'],['errors']
Availability,"I remember the episode but not the exact error (though it was in sapt and cubeprop tests). Something about pybind's behavior being less forgiving than boost's. Also psi4 modules behaved differently wrt how much control they took upon themselves vs giving to the AIOHandler lib. I think I standardized that aspect a bit. Good news is that I think you can adjust the synchronization again, so long as the tests pass (since it was broken test cases before that prompted the change). Or the inversion may have spontaneously healed the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277503822:41,error,error,41,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277503822,1,['error'],['error']
Availability,"I remove these two channels. But after running; `conda create --override-channels -n p4env psi4 python=3.9 -c psi4 -c defaults`. It remains the same...; ```. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; python=3.9; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> mkl-service[version='>=2.3.0,<3.0a0'] -> python[version='>=3.10,<3.11.0a0|>=3.7|>=3.6|>=3.5|>=3.6.0|>=3.6,<3.7']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113:655,Avail,Available,655,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113,1,['Avail'],['Available']
Availability,I saw one like that before. I'll try to track it down. I haven't tested this PR against py2 though. Do you have any idea if any custom from_python typemaps / convereters are registered currently registered?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130014713:49,down,down,49,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130014713,1,['down'],['down']
Availability,"I scale the DIIS B matrix diagonals based on the suggestion made by Pulay (JCP, 84, 5728, 1986). It is expected to improve convergence in problematic cases, where B matrix is not diagonally dominant. However, it slightly slow down the diis. @JonathonMisiewicz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1777#issuecomment-571630492:226,down,down,226,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-571630492,1,['down'],['down']
Availability,"I second combining the components as TDC suggests if possible. Comparing them is no problem -- `compare_values(ndarray_xptd, ndarray_cptd, ...` can handle the 3x3x3. Storing them c-side isn't perfectly straightforward b/c Wavefunctions.arrays only takes Matrix. So I think it'd have to be akin to octupole, as you anticipated. c-side, the tensor stays stacked into a 3x9. Then in python-helpers.py, the Matrix gets intercepted and reshaped into 3x3x3, and same on reverse. The qcvars so treated are a little different from the others in that they're only available as ndarrays, not Matrix _or_ ndarray, but no one's complained in practice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2508#issuecomment-1079731553:555,avail,available,555,https://psicode.org,https://github.com/psi4/psi4/pull/2508#issuecomment-1079731553,1,['avail'],['available']
Availability,"I see a segfault when running an SCF with some of the systems in L7 (in particular [circumcoronene](http://www.begdb.com/index.php?action=oneMolecule&state=show&id=4108)). I've traced the issue, at least in part, to integer sizing bug [in this check](https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L699) when the user requests less than Q^2 memory. This is due to a wraparound during subtraction, which results in the error condition [here](https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L761) erroneously evaluating to `false`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/716:476,error,error,476,https://psicode.org,https://github.com/psi4/psi4/issues/716,1,['error'],['error']
Availability,"I see that this goes a lot further than I was expecting it to; some day that will stop surprising me. It's a shame about the apparent necessity to keep the inconsistent definitions, but you're probably right when you say lots of downstream code is going to rely on the current behavior, whether or not we see it as ""correct."" The dual-identity of type-A and type-B ghosts only complicates matters further, though I definitely see the need for it. It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow, but this is likely more complicated then it sounds. Either way, the ability to go back-and-forth between real and ghost is absolutely necessary, and type-B is the only one that can consistently do that. . Fixing only type-A ghosts to return zero mass may only confuse things further. If nothing else, the functions should at least do the same thing for type-A and type-B ghosts. Consistency between `Molecule.mass` and `Molecule.Z` could be worked on later, though as you pointed out it's probably not a good idea to change `Molecule.Z`. . As for a new `Molecule` function to ensure the user knows what they're going to get, are you referring specifically to a `molecular_weight` function or more generally a function to return either the mass or Z val as either zero or real depending on input? I could get behind either of those, though with `molecular_weight` I would suggest simply setting a default for ghost atoms to return zero mass as I can't imagine anyone would want a molecular weight including ghost atom masses. . EDIT: I just saw what you said about ACS and DGAS nre edit in [#844](https://github.com/psi4/psi4/pull/844). That could work, requiring the argument c-side and giving a default py-side, though I wonder how many places we'd have to update c-side calls to conform to this. Might be the best answer with the least pain involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363495902:229,down,downstream,229,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363495902,2,['down'],['downstream']
Availability,"I see three different questions here:; 1. Is it possible to carry out MRCI in Psi?; 2. Can we get an error message better than a segfault, or for this not to segfault?; 3. Does the energy error indicate you've landed on the wrong electronic state? If so, how do you land on the right one?. My thoughts:. 1. Reading that paper, it looks like Sherrill and Piecuch did (as you suspected), a two-step computation. First, they did a CASSCF computation. Then they used the orbitals from that computation to do a RASCI computation. Then they fed those orbitals into a RAS computation to do their MRCI. That said, I cannot figure out what keywords they might have used to specify the right excitation levels. None of the keywords in the manual level.; 2. I would expect that the program should be able to accept orbitals this way. Unless another developer more experienced in detci sees otherwise, this looks to me a like a bug. I'll give some time for them to comment before investigating further myself.; 3. Just to be clear, do you have any reason to think that you landed on the C electronic state? If not, you may have landed on a different electronic state entirely. I recommend you look at the section of your SCF computation marked ""Final Occupation by Irrep"". Is that consistent with your desired electronic state? Is there any other low-lying electronic state that occupation could match?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517:101,error,error,101,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517,4,['error'],['error']
Availability,"I see we have a plugin error here https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=e678ab3d-f7fc-50f0-56d8-3349f4950165&l=9304 . That's very possibly pre-existing -- I should have retained skeletons in ctest when I deduplicated the ctest and pytest calls. The ""missing packages"" link doesn't work for me. What is the text? Does running the `test_sapt_dft1` test in particular work for you locally?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943:23,error,error,23,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943,1,['error'],['error']
Availability,"I see. Yes, you can forget the conda binary question. Interesting that you're using psi4 from the Ubuntu repository. I think you're the first report we've had of someone actually doing that. Unfortunately, it means you're using the beta5 version that's two years old and pre GnuMake --> CMake transition. And the plugin system I wouldn't expect to work from the Ubuntu repo. You see, the plugin Makefile relies on info about the build conditions and unless whoever packaged psi up for Ubuntu/Debian (not us) knew about that aspect and planned for it, that build condition info is not going to be in the distribution you've got. Your error involving ""MakeVars"" reflects this. I'd strongly recommend cloning from GitHub (you'll get a far newer version of the code), building psi4, and _then_ creating a new plugin. https://github.com/psi4/psi4/wiki/1_Obtaining#clone-from-public-github-repository. If you're not comfortable with compiling, there's another way that I know to work, but its a bit experimental.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194615624:633,error,error,633,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194615624,1,['error'],['error']
Availability,"I seemingly successfully commented out the inclusion of `libint/libint.h` in the following files. Is there any known reason that that's a Bad Idea?; - psi4/src/bin/ccenergy/ccenergy.cc; - psi4/src/bin/ccenergy/local.cc; - psi4/src/bin/cceom/local.cc; - psi4/src/bin/cclambda/local.cc; - psi4/src/bin/ccresponse/local.cc. That header is also included in `ccsort/local.cc` for at least the purpose of getting `LIBINT_MAX_AM`. If that is the sole purpose, is it better to continue including the header or to apply the compiler definitions that now ship with libint: `-USING_libint;-DMAX_AM_ERI=N` (`N` is value from linked lib, not value spec to psi4 cmake)?. That pair of compiler defs are not presently used by anything, so they can be tossed if you all turn against them. I'm still not sure if they pass the bar of ""requirements, not merely recommendations"" (https://cmake.org/cmake/help/v3.6/manual/cmake-buildsystem.7.html#build-specification-and-usage-requirements). The `USING_libint` I thought could be useful down the road as libmints interfaces to more integrals packages. The `USING_`s are replacing the double use of `ENABLE_` as cmake option and compile definition that was going on earlier. If you'd all like HAVE, WITH, ENABLED, or whatever, instead, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240423295:1015,down,down,1015,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240423295,1,['down'],['down']
Availability,"I should add that a 5 min search didn't find precedent or format for ECP info in cube files. But if anyone knows of any up/downstream software that writes/reads this info, we should follow that format. Maybe `Total core: 10 [e] from 1-indexed atoms (4, 8) electrons (6, 4)`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1136#issuecomment-412949138:123,down,downstream,123,https://psicode.org,https://github.com/psi4/psi4/issues/1136#issuecomment-412949138,1,['down'],['downstream']
Availability,I should have been clear. We want this tagged in the same BasisSet family even though there are no corresponding DF/RI basis for those particular atoms so that we get a better failure message.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/331#issuecomment-205812617:176,failure,failure,176,https://psicode.org,https://github.com/psi4/psi4/pull/331#issuecomment-205812617,2,['failure'],['failure']
Availability,"I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. Are any of these now available in v5.1 that I should be activating?. ```; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM05-D not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM06-D3 not in Psi4.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163:405,avail,available,405,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163,2,['avail'],['available']
Availability,"I still get an error entering 'conda create -n p4env python=3.8 psi4 -c psi4/label/dev' into anaconda prompt. does my computer being a windows have anything to do with this failed installation?. `(base) C:\Users\erikc>conda create -n p4env python=3.8 psi4 -c psi4/label/dev; WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; but it is not a conda environment.; Continue creating environment (y/[n])? y. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; python=3.8; psi4 -> python=3.8`. I would appreciate any help to get psi4 up and running. thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341:15,error,error,15,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341,2,"['Avail', 'error']","['Available', 'error']"
Availability,"I suspect that in several of these, the problem is that the downstream; codes need the (conventional or DF) integrals written to disk. This got; handled by some logic where necessary for scf_type = disk_df, apparently,; but did not get handled for mem_df. Works ok for ccenergy? It also needs conventional integrals written to; disk. Maybe that is getting intercepted correctly. On Mon, May 14, 2018 at 6:14 PM, Lori A. Burns <notifications@github.com>; wrote:. > Posting Dom's very nice summary for easier perusal and searchability.; > Effective scf_type df Testing: mem_df & disk_df; >; > All tests listed below examine calls to both energy() and gradient() when; > employing the scf_type mem_df and scf_type disk_df settings. Each test; > employs a different model chemistry (indicated in the test description); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:60,down,downstream,60,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['down'],['downstream']
Availability,"I suspect the fitting condition does not get passed down. ```; void DFTensor::build_metric() {; auto met = std::make_shared<FittingMetric>(auxiliary_, true);; met->form_eig_inverse(); ; metric_ = met->get_metric();. ```; without argument `form_eig_inverse()` does 1e-10. There are multiple occasions in psi4 where this is the case (sapt,DiskJK). I guess it was never meant to be changed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545#issuecomment-465267190:52,down,down,52,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465267190,1,['down'],['down']
Availability,"I suspect this has to do with the python3 fixes. Will take a look tomorrow. . Sent from my iPhone. > On Aug 20, 2015, at 5:08 PM, fevangelista notifications@github.com wrote:; > ; > Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py; > ; > ```; > future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); > temp = future_re.sub(future_replace, temp); > #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); > ```; > ; > but then I get this other error message (even with the newest commit):; > ; > Traceback (most recent call last):; > File ""<string>"", line 6, in <module>; > File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; > from wrappers import *; > File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; > from driver import *; > File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; > from interface_cfour import *; > File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; > import qcdb; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/**init**.py"", line 35, in <module>; > from .molecule import Molecule; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; > from .libmintsmolecule import *; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; > from oldpymodules import OrderedDict; > ImportError: No module named oldpymodules; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-133179959:590,error,error,590,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133179959,1,['error'],['error']
Availability,I suspect this was fixed in #1414 that made sure dftd3-using tests weren't run if dftd3 not available.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1418#issuecomment-451602694:92,avail,available,92,https://psicode.org,https://github.com/psi4/psi4/issues/1418#issuecomment-451602694,1,['avail'],['available']
Availability,"I suspect we just never got around to adapting the higher order codes. But; maybe @tparker36 has numerical evidence that it's not as big a deal as we; thought?. On Wednesday, March 16, 2016, Lori A. Burns notifications@github.com; wrote:. > Hmm, so either; > - the case of running higher-order SAPT on heavy atoms was never; > considered, in which case the DF_BASIS_ELST code needs copying over; > - the heavy atom failure mode doesn't appear in higher-order SAPT b/c; > higher-order terms compensate or because the larger basis-sets targeted do; > their job (RI > JK for higher-zeta basis sets). Actually, this may have; > been what @tparker36 https://github.com/tparker36 was recalling.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/317#issuecomment-197550795",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-197551790:415,failure,failure,415,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197551790,1,['failure'],['failure']
Availability,"I switched it to 1024 MiB so that numbers stay as they were _and_ numbers match units (already in this PR). My fault for falsely stating MB was the reporting convention in psi4 in the first place. RTG, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1097#issuecomment-406433677:111,fault,fault,111,https://psicode.org,https://github.com/psi4/psi4/pull/1097#issuecomment-406433677,1,['fault'],['fault']
Availability,"I tend to agree that turning off the projection in that case is the most sensible. The fock matrix projection in ORCA seems to 'work' in the sense that it convergences to the same result as the default guess (PModel) in some fewer iterations. The guess energy is quite far off, though. General robustness is thus questionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-664961848:294,robust,robustness,294,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664961848,1,['robust'],['robustness']
Availability,"I tested my code after rebasing, still looks just like it did before. I updated the timings and errors graphs based on the results of my rebased code (I used an intel compiler this time, rather than GCC)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-855159767:96,error,errors,96,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-855159767,1,['error'],['errors']
Availability,"I think ""symmetry tolerant"" is an odd description to apply to a method that; takes a symmetrical input and produces an asymmetrical output (e.g., the; DF-SCF gradient generating asymmetrical noise in the 9th decimal). If; numerical approximation is introducing the asymmetry, isn't the; symmetrization, if done evenly, likely to improve the accuracy of the; result, besides avoiding the risk of collateral damage? I appreciate; symmetrizing other types of objects may not be as simple. On Thu, Mar 3, 2016 at 2:47 PM, Justin Turney notifications@github.com; wrote:. > Yeah, the one in molecule used to be like the one in deriv when I; > originally wrote it 5 years ago. Then @psi-rking; > https://github.com/psi-rking expanded on it to assume non-standard; > orientation. A centralized one sounds good since I just found another on in; > matrix.cc.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191955685.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191991936:18,toler,tolerant,18,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191991936,2,['toler'],['tolerant']
Availability,"I think I would leave the `OptimizationResult` with `""success"": ""false""`. Adding something optking side would be better imo especially if the goal is just a comprehensible error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214:172,error,error,172,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214,1,['error'],['error']
Availability,I think I'm going to have a look at the mysterious segfault since I've been doing quite some libmints/libint2-related debugging for #2414 etc. It should not be too hard to track down (hopefully) 😄,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1307045497:178,down,down,178,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1307045497,1,['down'],['down']
Availability,"I think I've stumbled across this problem when trying to get hessians for comparison with finite difference code. The below input completes on our cluster in under a minute, operating on dev199. It took about 1.8 hours for jobs to finish when I didn't change the scf_type. Curiously, this is the same amount of time it took when I forgot to include the memory line. Could the bug be the DF code not using all the memory it has available? If so, then the bug OP saw wasn't the computation getting eternally stuck, but that trying to get an analytic hessian with around 1500 basis functions and only 500 MiB feels like an eternity. ```; #! SCF DZ finite difference frequencies by energies for C4NH4; memory 30gb. molecule c4nh4 {; units angstrom; -1 1; C 0.000000000000 0.000000000000 1.119905811674; N 0.000000000000 0.000000000000 2.310087277449; C 0.000000000000 0.000000000000 -0.231085072523; C -0.781617287494 0.000000000000 -1.483869398827; C 0.781617287494 0.000000000000 -1.483869398827; H -1.274488047821 -0.899961499592 -1.835960153318; H -1.274488047821 0.899961499592 -1.835960153318; H 1.274488047821 0.899961499592 -1.835960153318; H 1.274488047821 -0.899961499592 -1.835960153318; }. # *** Test all frequencies by 3-pt formula.; set {; basis dz; d_convergence 13; scf_type pk; }. scf_e, scf_wfn = frequencies('scf', dertype=2, return_wfn=True); fd_freqs = scf_wfn.frequencies(); clean(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1145#issuecomment-429553898:427,avail,available,427,https://psicode.org,https://github.com/psi4/psi4/issues/1145#issuecomment-429553898,1,['avail'],['available']
Availability,"I think downgrade OS before trying to solve Boost problems so as to avoid wasting more time on something that's nearly gone. Need a ""Kill the Boost!"" graphic a la Disney's ""Beauty and the Beast.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235151809:8,down,downgrade,8,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151809,1,['down'],['downgrade']
Availability,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:956,error,error,956,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['error'],['error']
Availability,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:102,error,error,102,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119,6,['error'],['error']
Availability,"I think it should be possible, provided the optimizer cooperates. Have you hit any errors yet? If the molecule gives trouble, you can define it within the loop like https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883 so that each step is independent. You could also try the geomeTRIC optimizers instead of default optking. Also note that OpenFF runs oodles of psi4/geomeTRIC torsion scans through QCArchive, if you need to scale up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391:83,error,errors,83,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391,1,['error'],['errors']
Availability,"I think it's a bad interaction between mixed-cart/zmat + counterpoise. The below triggers it, but it's fine w/o cp or with pure zmat frags. ```; molecule {; He 0 0 0; He 1 0 0; He 2 0 0; --; He 1 2.0 2 90.0 3 176.0; }. basis {; assign He def2-tzvpp; }. energy(""mp2"", bsse_type=""cp""); ```. A bug, but probably one to be warded off rather than hunted down?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-434799053:349,down,down,349,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-434799053,1,['down'],['down']
Availability,I think pull this in after 3rd review -- the Azure error has nothing to do with the PR,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1717#issuecomment-531880609:51,error,error,51,https://psicode.org,https://github.com/psi4/psi4/pull/1717#issuecomment-531880609,1,['error'],['error']
Availability,"I think someone would just need to make the code recalculate the number of alpha and beta electrons and set socc and docc accordingly. However, IMHO it doesn't make sense to do any kind of guess between different ECP settings. What the code should do instead is check whether the number of electrons in the guess and in the actual basis, and throw an error if they don't match. Otherwise, one would have to implement both; 1) delete deepest orbitals if guess has more electrons than full calculation and; 2) ???? if guess has less electrons than full calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439#issuecomment-455798830:351,error,error,351,https://psicode.org,https://github.com/psi4/psi4/issues/1439#issuecomment-455798830,1,['error'],['error']
Availability,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275138618:185,avail,available,185,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618,1,['avail'],['available']
Availability,I think that should have done the trick. (I ran the tdscf tests and then overwrote the respective output.ref files with the generated output.dat files.) I think the only differences are numerical errors during SCF and then formatting of the output. All final results should be unchanged.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605#issuecomment-1155599085:196,error,errors,196,https://psicode.org,https://github.com/psi4/psi4/pull/2605#issuecomment-1155599085,1,['error'],['errors']
Availability,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:177,error,error,177,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143,1,['error'],['error']
Availability,"I think the problem is the MOs appearing in the output file in addition to the FCHK file. Should be an easy one to track down, I hope.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-426246961:121,down,down,121,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-426246961,1,['down'],['down']
Availability,"I think the verbose output is ok here, @hokru , because pytest suppresses the output by default. If the test happens to fail, running that test with output enabled could help with debugging possibly. I totally agree that the CTests inputs should stay minimal because they ultimately get converted into sample inputs for users to have as starting points for job inputs. The Windows test failure looks like we need a `using_resp` like mechanism to conditionally activate resp; I'm sure you have it under control, Lori.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2065#issuecomment-744433410:386,failure,failure,386,https://psicode.org,https://github.com/psi4/psi4/pull/2065#issuecomment-744433410,1,['failure'],['failure']
Availability,"I think there's more variations and potential collisions, even within one user's environment, than can really be predicted and caught. In the inversion branch, we've started catching the gcc <4.9 error signature and printing a this-is-probably-what's-wrong message. Expanding that error catching and printing the customized path to the `link.txt` file is probably the best bet. [This](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/setenv.py) is a runtime env diagnosis script I wrote once. It didn't catch on, but it could be expanded for rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252942976:196,error,error,196,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252942976,2,['error'],['error']
Availability,"I think this PR is next on your list, since #2155 merge is imminent. Rebase, fix the merge conflicts, and ping me when this is ready for review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-973168059:106,ping,ping,106,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-973168059,1,['ping'],['ping']
Availability,I think this is ready. I assigned auxiliary basis sets that I deem reliable and which I used for calculations already.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346#issuecomment-439903848:67,reliab,reliable,67,https://psicode.org,https://github.com/psi4/psi4/pull/1346#issuecomment-439903848,1,['reliab'],['reliable']
Availability,"I think this may be similar to a recent issue. I can install psi4 into a new environment, but I would like to have rdkit available in the same env too. Is it possible to do a conda or mamba install psi4?. I obviously tried this and I am running into many conflicts. not sure if conda-forge or conda in general is getting tripped up because in the past I was able to install rdkit into a env with psi4 but not now apparently. from `mamba install psi4 psi4-rt python=3.6 -c psi4'; `. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4-rt', 'python=3.6']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912:121,avail,available,121,https://psicode.org,https://github.com/psi4/psi4/issues/2912,1,['avail'],['available']
Availability,"I think this must also be the default in The Code That Shall Not Be Mentioned. At least the 1999 paper by Rabuck and Scuseria, ""Improving self-consistent field convergence by varying occupation numbers"" states that. > The DIIS error factor is used to determine the status of the SCF iteration process and reaches zero at convergence. This factor is the maximum element in the commutator of the density matrix and the Fock matrix, (FPS-SPF), where F is the Fock matrix, P is the density matrix and S is the overlap matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460#issuecomment-453203727:227,error,error,227,https://psicode.org,https://github.com/psi4/psi4/pull/1460#issuecomment-453203727,1,['error'],['error']
Availability,I think we're on the same page (certainly for the headers). Installed changes:; - agreed; - `share/psi/* --> share/psi4/*`. Source changes:; - `top-source-dir/lib/* --> top-source-dir/share/psi4/*`. I'd like to have the two directory levels to keep the source and install tree similar could keep confusion down when setting `PSIDATADIR`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173961471:306,down,down,306,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173961471,1,['down'],['down']
Availability,"I thought this was fixed long ago, but upon testing, that must have been `gradient`, `hessian`, and `frequency`, as `optimize` is indeed faulty. @psi-rking, I can intercept this in the psi driver, but would you prefer to intercept in optking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965:137,fault,faulty,137,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965,1,['fault'],['faulty']
Availability,"I took a quick look at dfocc, and removing these lines; ```cpp; #include ""psi4/libciomr/libciomr.h""; #include ""psi4/libiwl/iwl.h""; #include ""psi4/libpsio/psio.hpp""; ```; from `array.h` doesn't cause any build failures. This was the only file I looked at, but reducing dependencies in that code should help to bring down the long build time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262108439:209,failure,failures,209,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262108439,2,"['down', 'failure']","['down', 'failures']"
Availability,"I tried `conda create -n p4env python=3.8 psi4 -c psi4` to no avail:. ```; UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']; psi4 -> networkx -> python[version='>=3.5|>=3.8,<3.9.0a0|>=3.6.0|>=3.6']; python=3.8; ```. I'm out of my depths here, but it seems that networkx already works in python3.8, so I'm not sure why that would show up as a conflict. A Python 3.8 build would be great, since it seems to be the default python in Conda now (and it will allow people to start arguing over walrus operators in their code). Installing with `python=3.7` works.; Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-671585693:62,avail,avail,62,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671585693,2,"['Avail', 'avail']","['Available', 'avail']"
Availability,"I tried it, but I got the following:. Ugurs-MacBook-Pro:psijob ugur$ lldb python /Users/ugur/psi4/objdir/stage/Users/ugur/psi4install/psi4cmake/bin/psi4 input.dat ; (lldb) target create ""python""; Current executable set to 'python' (x86_64).; (lldb) settings set -- target.run-args ""/Users/ugur/psi4/objdir/stage/Users/ugur/psi4install/psi4cmake/bin/psi4"" ""input.dat""; (lldb) r; error: process exited with status -1 (cannot attach to process due to System Integrity Protection); (lldb) . However, I can debug my old psi4. @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258441424:378,error,error,378,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258441424,1,['error'],['error']
Availability,"I tried running a CISD/STO-3G job on benzene (structure borrowed from the [psi4 input file samples](https://github.com/psi4/psi4/blob/master/samples/props3/input.dat)) using the following input:; ```; molecule benzene {; C 0.710500000000 0.000000000000 -1.230622098778; C 1.421000000000 0.000000000000 0.000000000000; C 0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828:895,error,error,895,https://psicode.org,https://github.com/psi4/psi4/issues/828,1,['error'],['error']
Availability,"I tried running it again with `opt_coordinates = cartesian` with a restrained dihedral and `dynamic_level = 1`. However, it crashed again, this time when it raises dynamic level to 3 it crashed when it tries to write the optimization data to binary file. [Here's](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831) the traceback:. ```; 	Writing optimization data to binary file.; 	; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); ```. Also, it still seems to be using internal coordinates (unless I'm not understanding the output file). ; Here is the new [input](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and [output](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344334581:486,Error,Error,486,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344334581,4,"['Error', 'error']","['Error', 'error']"
Availability,"I tried using this code to generate the potential energy curve for the CF molecule and I got this error message: . ```; import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:98,error,error,98,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['error'],['error']
Availability,"I trimmed this down as much as I could and played with the headers to kill off the files that took an extremely long time (30-50 seconds). Each file now takes 2-8 seconds to compile, but we simply have a lot of them. Without moving more into separate modules the compile time is not likely not going to come down much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-305371303:15,down,down,15,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-305371303,4,['down'],['down']
Availability,"I try to build psi4 from source code on my ubuntu system, and got this error when doing last step of make. > [ 99%] Built target sapt; [ 99%] Building CXX object src/CMakeFiles/core.dir/core.cc.o; [ 99%] Building CXX object src/CMakeFiles/core.dir/export_benchmarks.cc.o; [ 99%] Building CXX object src/CMakeFiles/core.dir/export_blas_lapack.cc.o; [ 99%] Building CXX object src/CMakeFiles/core.dir/export_cubeprop.cc.o; [ 99%] Building CXX object src/CMakeFiles/core.dir/export_dpd.cc.o; [ 99%] Building CXX object src/CMakeFiles/core.dir/export_fock.cc.o; [ 99%] Building CXX object src/CMakeFiles/core.dir/export_functional.cc.o; [100%] Building CXX object src/CMakeFiles/core.dir/export_misc.cc.o; [100%] Building CXX object src/CMakeFiles/core.dir/export_oeprop.cc.o; [100%] Building CXX object src/CMakeFiles/core.dir/export_pcm.cc.o; [100%] Building CXX object src/CMakeFiles/core.dir/export_plugins.cc.o; [100%] Building CXX object src/CMakeFiles/core.dir/export_psio.cc.o; [100%] Building CXX object src/CMakeFiles/core.dir/export_trans.cc.o; [100%] Building CXX object src/CMakeFiles/core.dir/export_wavefunction.cc.o; [100%] Building CXX object src/CMakeFiles/core.dir/export_options.cc.o; [100%] Building CXX object src/CMakeFiles/core.dir/create_new_plugin.cc.o; [100%] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; [100%] Building CXX object src/CMakeFiles/core.dir/python_data_type.cc.o; [100%] Linking CXX shared library core.cpython-310-x86_64-linux-gnu.so; /usr/bin/ld: cannot find -lMathOpenMP_LIBRARIES-NOTFOUND; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:417: src/core.cpython-310-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1028: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:136: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:86: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:10188: CMakeFiles/psi4-core.d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998:71,error,error,71,https://psicode.org,https://github.com/psi4/psi4/issues/2998,1,['error'],['error']
Availability,"I try to compile psi4 with gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) compiler. I got the following error:. Scanning dependencies of target mints; [ 59%] Building Fortran object src/lib/libmints/CMakeFiles/mints.dir/dkh2-dkh4_main.F90.o; [ 59%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/local.cc.o; In file included from /home/ubgroup/psi4/src/lib/libmints/mints.h:70,; from /home/ubgroup/psi4/src/lib/libmints/potentialint.h:31,; from /home/ubgroup/psi4/src/lib/libmints/mints.h:44,; from /home/ubgroup/psi4/src/lib/libmints/local.cc:30:; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids initialization of member ‘max_noon_’; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: making ‘max_noon_’ static; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids in-class initialization of non-const static member ‘max_noon_’; make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 1; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/404:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/issues/404,7,"['Error', 'error']","['Error', 'error']"
Availability,"I understand now. It's supposed to print something like the below, which is helpful and intelligible. (I think -- can change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:168,error,error,168,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723,3,['error'],['error']
Availability,"I use psi4 v1.7 to perform gradient calculations under the WB97M-D3BJ/DEF2-TZVPPD level. Most structures work fine, but I get the following error in some structures without a clear error message. ```; ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:140,error,error,140,https://psicode.org,https://github.com/psi4/psi4/issues/2970,3,['error'],['error']
Availability,"I used the PSI4 to run SAPT0-D3 calculation. I tested both D3 and D3mbj correction, however, they all have the errors. The error is the assertion error: pairwise sum = -0.17086444... ! =energy -0.17086561.; The key word i used in my script is the following : ; set {; scf_type DF; freeze_core True; basis jun-cc-pVDZ; soscf true; soscf_max_iter 30; }; energy(""sapt0-d3"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914:111,error,errors,111,https://psicode.org,https://github.com/psi4/psi4/issues/2914,3,['error'],"['error', 'errors']"
Availability,I want to download windows WSL,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478012648:10,down,download,10,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478012648,1,['down'],['download']
Availability,"I want to install psi4 on my openff environment since OpenFF Recharge requires it to generate electrostatic charges (https://docs.openforcefield.org/projects/recharge/en/stable/getting-started/installation.html). . I have used mamba to install openff, following steps 3 and 4 [https://docs.openforcefield.org/en/latest/install.html](here). I tried to install psi4 via mamba with the following commad:; `mamba install psi4=1.8.1 -c conda-forge/label/libint_dev -c conda-forge`. However, I got several warnings about incompatible packages:. `blas [2.4|2.5|2.6|2.7] would require; │ │ └─ libblas [3.8.0 4_openblas|3.8.0 5_openblas|3.8.0 6_openblas|3.8.0 7_openblas], which requires; │ │ └─ openblas 0.3.5.* , which does not exist (perhaps a missing channel);; `; and; ` psi4 1.8.1 would require; │ ├─ libblas * *mkl, which requires; │ │ └─ blas * mkl, which conflicts with any installable versions previously reported;; │ └─ mkl >=2022.2.1,<2023.0a0 , which conflicts with any installable versions previously reported;; `. I also attempted to install psi4=1.7, but this also led to a similar conflicts issue:. `psi4 1.7** is not installable because it requires; └─ blas 1.0 mkl, which conflicts with any installable versions previously reported.; `; I believe I need psi4 installed on my openff environment for it to be usable for openff's wrappers. I've tried installing the blas dependencies explicitly:. `mamba conda install -c conda-forge openblas` ; but this tells me the package is already installed. . and:. `mamba install 'libblas * *mkl' -c conda-forge -c defaults` which results in the same `openblas 0.3.5.* , which does not exist (perhaps a missing channel);` error. . Any ideas? I must admit I am relatively new to using mamba + managing environments, but I believe it is just a reimplementation of conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046:1669,error,error,1669,https://psicode.org,https://github.com/psi4/psi4/issues/3046,1,['error'],['error']
Availability,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1095:1085,fault,faulty,1085,https://psicode.org,https://github.com/psi4/psi4/issues/1095,1,['fault'],['faulty']
Availability,"I wanted Brandon to make sure that expected passes were passing, expected fails that we're ok with (e.g., matches Q-Chem exactly but matches Psi 1.1 with fewer decimals) were arranged to pass (back off on tolerance), and expected fails that we're not complacent to (i.e., wB97X-D3 and one other, iirc) were arranged to fail. . I think I'd rather this was pulled in with expected fails failing (to be fixed up later) than to have fake passes. But as soon as pass/fail is straightened out, lgtm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-369644222:205,toler,tolerance,205,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-369644222,1,['toler'],['tolerance']
Availability,I was able to get the json file down to 5MB. . It's a little challenging to get it smaller since I wanted a comprehensive test (up through d-orbitals) for four different two-electron integral tensors.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2502#issuecomment-1091841264:32,down,down,32,https://psicode.org,https://github.com/psi4/psi4/pull/2502#issuecomment-1091841264,1,['down'],['down']
Availability,"I was able to get the potential energy curve (PEC) for the ground state of the CF molecule but then once I include a method that could get the PEC for the excited state I kept getting an error. Then I wrote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:187,error,error,187,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,4,"['avail', 'error']","['available', 'error']"
Availability,"I was attempting to run an IRC, only to receive a rather confusing error message that `symm_matrix_inv : opt_symm_matrix_eig could not diagonalize`. After spending far too much time trying to figure out why various matrices were filled with NaN, I realized the problem was that I had supplied an energy minimum, not a transition state. (The SI that I was following put in a wrong geometry.) I've attached my input file. The IRC code saw the gradient was about zero and tried to follow the lowest mode... which was a translational mode. If the new PyOptking is given an initial hessian for an IRC, could it double-check that there's actually an imaginary mode?. [input.txt](https://github.com/psi4/psi4/files/2019016/input.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1025:67,error,error,67,https://psicode.org,https://github.com/psi4/psi4/issues/1025,1,['error'],['error']
Availability,"I was doing a calculation of eda of transition metal complex by FISAPT, with three-body partition. A fatal error ocurred as followed. But the fragment A (0 1) is simply phenylacetylene, how could the error happen? ; Actrually, I have successfully done the eda of the same complex with two-body partition. The basis sets were exactly the same. Thanks in advance. ```; RuntimeError: ; Fatal Error: FISAPT: Charge on A is incompatible with singlet; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1670993662927/work/psi4/src/psi4/fisapt/fisapt.cc on line: 393; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2870:107,error,error,107,https://psicode.org,https://github.com/psi4/psi4/issues/2870,4,"['Error', 'error']","['Error', 'error']"
Availability,"I was like ""what's a correct copy-paste error message"" until I read the change, and realized that this meant rectifying a copy-pasted error message in detci...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996:40,error,error,40,https://psicode.org,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996,2,['error'],['error']
Availability,"I was looking at the DIIS code to determine whether it properly handles the case of linear dependencies. For instance, the UHF code is; ```; if (initialized_diis_manager_ == false) {; diis_manager_ = std::make_shared<DIISManager>(max_diis_vectors, ""HF DIIS vector"", DIISManager::LargestError,; DIISManager::OnDisk);; diis_manager_->set_error_vector_size(2, DIISEntry::Matrix, gradient_a.get(), DIISEntry::Matrix,; gradient_b.get());; diis_manager_->set_vector_size(2, DIISEntry::Matrix, Fa_.get(), DIISEntry::Matrix, Fb_.get());; initialized_diis_manager_ = true;; }. diis_manager_->add_entry(4, gradient_a.get(), gradient_b.get(), Fa_.get(), Fb_.get());; ```; whereas extrapolation is handled by; ```; bool UHF::diis() { return diis_manager_->extrapolate(2, Fa_.get(), Fb_.get()); }; ```; To me, this looks like the code does **not** project linearly dependent eigenvectors out. This might certainly explain many SCF convergence problems seen with Psi4, in which the energy apparently converges but the DIIS error stagnates to a large value. Note that the fix was already in Pulay's original paper. In [Chem. Phys. Lett. 73, 393 (1980)](https://doi.org/10.1016/0009-2614(80)80396-4) he writes; > An even better choice is the use of Fock matrix elements transformed to an orthonormal basis, such as `S^-1/2 F S^-1/2` where `S` is the overlap matrix. This takes into account that a charge shift from a basis function to another is less important physically if the two functions overlap strongly. Obviously, `S^-1/2` is the orthogonalizing matrix `X`; alternatively, the molecular orbital coefficients `C` can also be used.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2217:1009,error,error,1009,https://psicode.org,https://github.com/psi4/psi4/issues/2217,1,['error'],['error']
Availability,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858:85,error,error,85,https://psicode.org,https://github.com/psi4/psi4/issues/858,6,"['Error', 'error']","['Error', 'error']"
Availability,"I was trying to compile psi4 using the Intel 14 compiler and I got an error:; PK_workers.cc(755): error: no instance of constructor ""psi::pk::PKWorker::PKWorker"" matches the argument list; argument types are: (boost::shared_ptrpsi::BasisSet, psi::pk::SharedSieve, long, int, size_t); PKWorker(primary,sieve, NULL,0,buf_size) {. I changed NULL to std:shared_ptr<AIOHandler>() and it fixed the compiler error. Do you think this may have a side effect?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/398:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/issues/398,3,['error'],['error']
Availability,"I was trying to do a 4-electron FCI using the DETCI code with a huge valence basis set but it seems Psi4 cannot handle CI calculations with more than 255 functions. The errors that I encountered are mentioned in [this forum thread](http://forum.psicode.org/t/increase-ioff-max/531). In short:. - If I use more than 255 orbitals I get a memory violation error from the system and ``(subgr_lex_addr): Impossible walk!`` message from Psi4.; - If I use 408 orbitals I get . ```; RuntimeError:; Fatal Error: error: IOFF_MAX not large enough!; Error occurred in file:path/devel/psi4/psi4/src/psi4/detci/get_mo_info.cc on line: 228; ```. It would be great if someone could create a patch fixing this issue, since it severely limits the capabilities of the DETCI code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/724:169,error,errors,169,https://psicode.org,https://github.com/psi4/psi4/issues/724,5,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"I was wondering about the status of computing gradients for VV10. I see this was planned for inclusion in #1233, but got put off until a later PR. I can't find any record that it was ever implemented. Is it available now? If not, are there any plans to implement it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2286:207,avail,available,207,https://psicode.org,https://github.com/psi4/psi4/issues/2286,1,['avail'],['available']
Availability,"I went ahead and resubmitted the PR from that other branch, so this one can just be closed down. That way we're not force pushing to your fork master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/386#issuecomment-225038318:91,down,down,91,https://psicode.org,https://github.com/psi4/psi4/pull/386#issuecomment-225038318,1,['down'],['down']
Availability,"I went to the link and typed ""which psi4"" in my terminal and got a return synonymous with the path being correct, I believe (so it said the code for the path should be redundant): [If you installed the Psi4conda distribution or installed the PSI4 conda package into the main environment of an Anaconda or Miniconda distribution and added that to your [PATH](https://psicode.org/psi4manual/master/external.html#envvar-PATH), as prompted, then which psi4 likely yields condadist/bin/psi4 and the PATH setting lines below are redundant.] . which psi4; /home/emkal/psi4conda/bin/psi4. Additionally, trying the two commands suggested also had errors in syntax I believe? I also tried psi4 --psiapi which gave me the path and pythonpath; I tried copying the output in substitution of the ""PYTHONPATH"" but it didn't make a difference. [1] export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; File ""/tmp/ipykernel_10582/3886179417.py"", line 1; export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; ^; SyntaxError: invalid syntax. [2] sys.path.append(<same>); File ""/tmp/ipykernel_10582/3391378744.py"", line 1; sys.path.append(<same>); ^; SyntaxError: invalid syntax",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996:168,redundant,redundant,168,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996,3,"['error', 'redundant']","['errors', 'redundant']"
Availability,"I will add some timings and check the gradient soon(TM).; The various dft gradient tests do generally _not_ pass with `ROBUST` pruning. Didn't check errors, but those tests are often very tight. Finally, pruning _on_ by default (`ROBUST` scheme)?? I'd argue that is what users expect since most (all?) big QM programs do this. Possibly wants more thorough testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118:119,ROBUST,ROBUST,119,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118,3,"['ROBUST', 'error']","['ROBUST', 'errors']"
Availability,I will run this a few times on my system to see if I can reproduce. The sporadic nature and the fact that happens at many different points could take a bit to track down.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-482109929:165,down,down,165,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482109929,1,['down'],['down']
Availability,"I wish there was a way to cut down the repetition in variable description, but from the user standpoint, that probably is the way to go... I'll get docs up and un-draft this (hopefully tonight) and save test pass for tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129511560:30,down,down,30,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129511560,1,['down'],['down']
Availability,"I wonder if it would be better if we moved the pre-iterations down so that it generated the one-electron quantities in the ""pre-iterations"" and then the the occupations. . We would have a `==> JK Setup <==` area where the JK builds would be moved down to after the occupation printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1713#issuecomment-528746372:62,down,down,62,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-528746372,2,['down'],['down']
Availability,"I would consider not making VV10 throw an error, since it has negligible effects on the electron density. Najibi and Goerigk write in [doi:10.1021/acs.jctc.8b00842](https://doi.org/10.1021/acs.jctc.8b00842). > While in a strictest sense, energy calculations with vdW-DFAs should be carried out fully self-consistently, we demonstrate conclusively for a total of 11 methods that such a strategy only increases the computational time eﬀort without having any signiﬁcant eﬀect on energetic properties, electron densities, or orbital-energy diﬀerences. The recent analytical frequencies study by Feng, Liang and Head-Gordon in [arXiv:2208.14639](https://arxiv.org/abs/2208.14639) states. > The contribution of VV10 to simulating harmonic frequencies is shown to be small for small molecules but important for systems where weak interactions are important, such as water clusters. That manuscript does have analytical second derivatives, so I guess one could extend it to TDDFT as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083:42,error,error,42,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083,1,['error'],['error']
Availability,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954:135,error,error,135,https://psicode.org,https://github.com/psi4/psi4/issues/954,3,"['Error', 'error']","['Error', 'error']"
Availability,"I would love to see an algorithm for trying to locate the global minimum of the SCF energy, preferably an automated one. This feature would be especially useful for using Psi4 as a backend for _ab-initio_ MD applications. The random orbital rotation scheme (described in [10.1021/acs.jctc.7b00011](https://dx.doi.org/10.1021/acs.jctc.7b00011)) seems like a simple and sensible approach, as it can nudge the SCF out of saddle points, as well as local minima.; This method might also be useful as a last-resort option for cases where the SCF seems impossible to converge: random rotations could be applied to the initial guess. A reference implementation is available at https://github.com/ReiherGroup/OrbitalPerturbation. (under LGPL3, so no worries there)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-352274531:656,avail,available,656,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-352274531,2,['avail'],['available']
Availability,I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature. Also please let the user know that LinK is active. At least I didn't see it in the test output files.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-976673987:112,avail,available,112,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-976673987,1,['avail'],['available']
Availability,I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1399466230:74,error,error,74,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1399466230,1,['error'],['error']
Availability,"I ~~started~~ finished rebuilding our stack (`gcp`, `dftd4`, `s-dftd3`, ...) for Windows on conda-forge (just recently rebuild the whole thing for OSX/Arm64). Executables as well as Python bindings available are now available for all platforms supported on conda-forge. If anyone can give me some pointers on https://github.com/MolSSI/QCEngine/issues/341 I can also make the first step to resolve https://github.com/psi4/psi4/issues/2360.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1019170409:198,avail,available,198,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1019170409,2,['avail'],['available']
Availability,"I'd also vote for catching and aborting with a descriptive error, as opposed to temporarily unsetting and carrying on. If the method is part-FC part-all electron, then FC shouldn't be touched in the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462905555:59,error,error,59,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462905555,1,['error'],['error']
Availability,"I'd love to have RKS GGA hessians for the 1.10 release next May (and I'd probably be the one who codes it). I'm currently tracking down some errors in integrals, which is higher priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243:131,down,down,131,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243,2,"['down', 'error']","['down', 'errors']"
Availability,"I'd prefer not needing to throw in a prefactor at all, but I suppose that's necessary given that `occ` and `dfocc` measure the ""residual"" as the size of the first order update, not the size of the residual proper. No issues there. My thoughts about the CEPA issue are unchanged from my previous comment; as best as I can tell, the energy being within convergence tolerance does not mean all of its spin components are. As for why this doesn't afflict other modules:; * `fnocc` and `occ` compute the energy differently. `fnocc` uses an energy functional that is variational in the amplitudes, where `occ` uses the normal CCD-like energy functional. They'll both agree at convergence, but not at other amplitudes. This difference seems to give `fnocc` its better behaved spin-components.; * There don't seem to be `dfocc` LCCD eneries in the standard suite, so of course those aren't raising errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339:363,toler,tolerance,363,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339,2,"['error', 'toler']","['errors', 'tolerance']"
Availability,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:318,down,downloading,318,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469,2,['down'],['downloading']
Availability,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697,4,['error'],['error']
Availability,"I'd trust sapt0 over ssapt0 in general. But the large difference btwn them and even btwn sapt0 and HF raises suspicion that the molecule or the distances involved aren't in the perturbation theory regime. SAPT0 should be around the HF and MP2 supermolecular interaction energies. Also, sapt0 is going to have better error cancelation with smaller double-zeta (like jun-cc-pvdz) so maybe svp.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2869#issuecomment-1411453257:316,error,error,316,https://psicode.org,https://github.com/psi4/psi4/issues/2869#issuecomment-1411453257,1,['error'],['error']
Availability,I'd try updating pydantic to v1.10 or downgrading typing_extensions to 4.5.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767177402:38,down,downgrading,38,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767177402,1,['down'],['downgrading']
Availability,"I'll review later today. For now, I'll just say that I'm vehemently opposed to opening the first DLPNO-CCSD PR in Psi. I would much prefer a publicly available Psi4Numpy implementation first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2851#issuecomment-1441901797:150,avail,available,150,https://psicode.org,https://github.com/psi4/psi4/pull/2851#issuecomment-1441901797,1,['avail'],['available']
Availability,"I'll review this once it passes tests. `test_cppe.py:test_cppe_tdscf_uhf` is currently failing. Based on the error message, this has nothing to do with CPPE but represents an indexing error in the code. For a first debug attempt, I would recommend removing both CPPE and the comparison against reference energies, and make sure the TDSCF completes in the first place. Let me know if you need assistance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605#issuecomment-1153836192:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/pull/2605#issuecomment-1153836192,2,['error'],['error']
Availability,"I'll work on that one. What needs to be done:; 1) All codes that have relaxed density available (DCFT, OCC, DF-MP2(RHF), others?) should be able to compute one-electron properties using property() function. This is easy, the relaxed one-particle density matrix should be stored on disk and OEPROP should then be called. OEPROP title needs to be updated.; 2) Manual needs to be updated. More description of property() capabilities needs to be written, the description of OEPROP should be only for developers.; 3) Methods that do not compute the one-particle density for the reference requested by the user should throw.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-37993139:86,avail,available,86,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-37993139,1,['avail'],['available']
Availability,"I'm a little worried about the 0 coefficient handling. The 0 coefficient means ""no local potential."" (See the discussion in #newdev on Nov. 9.) Replacing that with a ""really small but existing local potential"" just _sounds_ like it will create nasty surprises down the road. Good luck getting the tests passing!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-373309541:260,down,down,260,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-373309541,1,['down'],['down']
Availability,"I'm afraid I have a habit of finding obscure bugs! :-) I'd forgotten about needing the additional vectors for linear bends. I'll poke about a bit more to see if I can track it down a bit more. As an aside, is there any real advantage of ""multi"" mode over ""single"" mode, apart form the former appearing to be (in my mind!) more of a logical way of thinking? I'll do some more tests...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-295595920:176,down,down,176,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295595920,1,['down'],['down']
Availability,"I'm all for locking down permissions at top-level and specifying them per-job. Are the proposed edits taking into account that the write permission is needed not for this repo but for the docs one `psi4/psi4docs` that's governed by its own token, not the `GITHUB_TOKEN`? So perhaps only `read` needed for the per-job permissions. I don't understand tokens too well, so I'm wondering how specialized an analysis is behind the PR? Thanks for proposing it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2723#issuecomment-1252577899:20,down,down,20,https://psicode.org,https://github.com/psi4/psi4/pull/2723#issuecomment-1252577899,1,['down'],['down']
Availability,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1354:178,error,error,178,https://psicode.org,https://github.com/psi4/psi4/issues/1354,2,['error'],['error']
Availability,"I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737416449:52,error,error,52,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737416449,1,['error'],['error']
Availability,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118:1169,error,errors,1169,https://psicode.org,https://github.com/psi4/psi4/issues/1118,4,"['down', 'error']","['down', 'error', 'errors']"
Availability,"I'm closing this in favor of #1548. If anyone sees this, please stop and ping me to discuss your build environment, as I can't figure out how it's coming about.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1582#issuecomment-495759920:73,ping,ping,73,https://psicode.org,https://github.com/psi4/psi4/issues/1582#issuecomment-495759920,1,['ping'],['ping']
Availability,"I'm compiling everything by myself. I think the error might be because I got rid of the ```libstdc++``` flag, because I configured with:; ```-DCMAKE_CXX_FLAGS=""-march=native"" ```. This might be an issue related to:; https://stackoverflow.com/questions/35006614/what-does-symbol-not-found-expected-in-flat-namespace-actually-mean. But when I kept it I couldn't configure if I remember correctly. I will check this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614779248:48,error,error,48,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614779248,1,['error'],['error']
Availability,I'm compiling the latest master of Psi4. SNS-MP2 automatic download failed with ; ``Cloning into 'snsmp2_external'...; fatal: invalid reference: a035c27; CMake Error at /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/snsmp2/snsmp2_external-prefix/tmp/snsmp2_external-gitclone.cmake:75 (message):; Failed to checkout tag: 'a035c27'; ``; Looking up the SNS-MP2 Git I found the tag of the current release to be dd286d3. I replaced it in ``external/downstream/snsmp2/CMakeLists.txt`` and the compilation proceeded.; Is this actually the correct version for SNS-MP2? Should I submit a PR with this tiny change?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1425:59,down,download,59,https://psicode.org,https://github.com/psi4/psi4/issues/1425,4,"['Error', 'down']","['Error', 'download', 'downstream']"
Availability,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:641,error,error,641,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199,2,['error'],['error']
Availability,"I'm expecting C++ lgtm to fail for the foreseeable future b/c the additional analysis of libxc is exceeding the 4h time limit. Not sure why it's running out of disk space <3h, but probably not the fault of this PR. will merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092#issuecomment-769547918:197,fault,fault,197,https://psicode.org,https://github.com/psi4/psi4/pull/2092#issuecomment-769547918,1,['fault'],['fault']
Availability,"I'm fine defaulting it to `OFF`, to be honest! Probably safer that way, in regards to unforeseen errors/issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018359606:97,error,errors,97,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018359606,1,['error'],['errors']
Availability,"I'm getting one other error when I try to use `psi4==1.8.1` alongside some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,2,"['Error', 'error']","['Error', 'error']"
Availability,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262127128:175,redundant,redundant,175,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128,1,['redundant'],['redundant']
Availability,"I'm going to put together a psi-hosted libxc 4.0 + patch for psi to build from, in case that's helpful. Congrats for tracking that down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-379371277:131,down,down,131,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-379371277,1,['down'],['down']
Availability,"I'm having the same problem. I've tracked the problem down to the path of the library not being passed to. `external/common/lapack/FindMathOpenMP.cmake`. Setting `-DOpenMP_LIBRARY_DIRS` solves the issue, but I believe this is not the intended behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410307625:54,down,down,54,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410307625,1,['down'],['down']
Availability,"I'm hitting a similar error message with `dcft_gradient_UHF.cc` but it reports that the error is in `libmints/matrix.h`. Reducing the optimization level was the only way I could get it to compile. Even compiling with -O2 gives the error, -O1 is the only way to resolve it. I see no issue with the compiler- and file-specific flags for this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368651645:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368651645,3,['error'],['error']
Availability,I'm just referring to the overhead associated with setup & teardown of the calculation. It could slow things down if the calculations are fast (which might be the case with semiempirical methods or minimal basis sets).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615104789:109,down,down,109,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615104789,1,['down'],['down']
Availability,"I'm looking for anharmonic modes of vibration of complexes. Good point on the optimization and frequency, for testing purposes I bring the level of theory down to hartree-fock just to make it go faster. On production code runs, the level of theory and basis set are consistent. . I have been playing around with both `frequency()` and `hessian()`. I chose the hessian last night because of this:. https://psicode.org/psi4manual/master/api/psi4.driver.qcdb.vib.harmonic_analysis.html#psi4.driver.qcdb.vib.harmonic_analysis. https://psicode.org/psi4manual/master/freq.html. Where the harmonic analysis is documented showing the IR intensities. The first parameter was a hessian matrix so I went back to go look at how to produce that. Maybe I went down a different rabbit hole. . https://github.com/psi4/psi4/blob/821134f62396ba27f9bcb8fbfa93ea2c370b7616/tests/pytests/test_vibanalysis.py. Line 17-40 I kind of copied your guys test to get the code running. I was actually confused with dipole derivatives and how to produce them and pass them in appropriately. . Ah okay! the frequency has it built in and I can see it. I got confused on the docs. . ```python; theory = 'hf/6-31g*'; ; energy, wave_function = psi4.optimize(; theory,; return_wfn = 'yes',; molecule=universe; ). frequencies = psi4.frequencies(; theory,; ref_gradient=wave_function.gradient(),; molecule=universe. ); ```. Ouput:. ```python; Freq [cm^-1] 1557.5017 4053.2831 4197.9898 ; Irrep A1 A1 B2 ; Reduced mass [u] 1.0830 1.0449 1.0829 ; Force const [mDyne/A] 1.5478 10.1143 11.2435 ; Turning point v=0 [a0] 0.2672 0.1686 0.1627 ; RMS dev v=0 [a0 u^1/2] 0.1966 0.1219 0.1198 ; IR activ [km/mol] 92.6794 13.8599 85.5429 ; Char temp [K] 2240.8982 5831.7720 6039.9727 ; ----------------------------------------------------------------------------------; 1 O 0.00 -0.00 -0.07 0.00 -0.00 0.05 0.00 -0.07 -0.00 ; 2 H -0.00 0.43 0.56 0.00 0.59 -0.39 0.00 0.56 -0.43 ; 3 H 0.00 -0.43 0.56 0.00 -0.59 -0.39 0.00 0.56 0.43 ; ```. So I want to ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808:155,down,down,155,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808,2,['down'],['down']
Availability,"I'm not seeing any change in `compute_fcpi()` in 6 years -- https://github.com/psi4/psi4/blame/master/psi4/src/psi4/libscf_solver/hf.cc#L772-L801 . I also did a fresh clone and compile of master earlier today, and it was fine, so I'm not sure what circumstances could lead to your error. If you're rebuilding psi4 after a long interval, I'd suggest a new objdir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3185#issuecomment-2179665836:281,error,error,281,https://psicode.org,https://github.com/psi4/psi4/issues/3185#issuecomment-2179665836,1,['error'],['error']
Availability,"I'm not sure how big of an issue numpy/BLAS/LAPACK would be for windows, because it would appear that mkl-linked numpy, mkl, and mkl-dev packages for windows are all available on the intel conda channel. So if numpy is able to link correctly I'm sure we would be able to as well. . I think @TiborGY thoughts on I/O related code are spot on, but I don't think we would have that much code elsewhere that would be incompatible, maybe some assumptions are made in driver code about how paths are formatted and those would be fairly simple to find/fix. . I actually don't think it would be terribly difficult for us to get psi working at least with *some* compiler on windows, really the only serious obstacle I see is that none of the developers have windows hardware to do the necessary leg work to get things working. Once things are set up we can probably rely on CI testing for windows keeping things working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-381759781:166,avail,available,166,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-381759781,2,['avail'],['available']
Availability,"I'm not sure if it's related but I just ran a conda upgrade an a fresh, clean anaconda install, and this happened:; ```; QuickSilver:~ > conda update --prefix /Users/andysim/anaconda3 anaconda; Solving environment: done. ## Package Plan ##. environment location: /Users/andysim/anaconda3. added / updated specs: ; - anaconda. The following packages will be downloaded:. package | build; ---------------------------|-----------------; mkl-2018.0.3 | 1 149.2 MB. The following packages will be DOWNGRADED:. mkl: 2019.0-118 --> 2018.0.3-1; ```; Maybe this means that there's a known problem with mkl2019 and it's being rolled back?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1408#issuecomment-445278710:357,down,downloaded,357,https://psicode.org,https://github.com/psi4/psi4/pull/1408#issuecomment-445278710,2,"['DOWN', 'down']","['DOWNGRADED', 'downloaded']"
Availability,"I'm not sure if there are any Gaussian codes that have the Yukawa kernels. However, I do have the Yukawa kernels in HelFEM for atomic calculations, and for `hyb_gga_xc_camy_b3lyp` I get the following energies. | atom | energy |; |--------|-----------|; | He | -2.90309239 |; | N | -54.59195697 |; | Ne | -128.96948058 |. If you run the calculations in Psi4 with the AHGBS-9 basis (available from the BSE) and a large quadrature grid like (250, 590), you should be able to match these to sub-microhartree accuracy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386#issuecomment-997412944:381,avail,available,381,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997412944,1,['avail'],['available']
Availability,I'm not sure what's wrong with this. It works fine locally (gcc 9) with new l2. With old l2 I get other unrelated build errors. pausing investigation.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2429#issuecomment-1033094388:120,error,errors,120,https://psicode.org,https://github.com/psi4/psi4/pull/2429#issuecomment-1033094388,1,['error'],['errors']
Availability,"I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <module>; from .fcidump import *; stage/lib/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1244,error,error,1244,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342,1,['error'],['error']
Availability,"I'm of the opinion that we should either hunt it down or leave an error message describing how the input _should_ have been written. Given what the user is trying to do, the approach they took is the one I would have tried first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-434799841:49,down,down,49,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-434799841,2,"['down', 'error']","['down', 'error']"
Availability,"I'm ok with adding a throw for Cartesian auxiliary basis sets, although; post-PR I'd like work to continue on trying to track this down. On Sun, Apr 29, 2018 at 10:08 AM, Daniel Smith <notifications@github.com>; wrote:. > @loriab <https://github.com/loriab> @schiebermc; > <https://github.com/schiebermc> If you force a DISK_DFJK do you see this; > issue? Should tell us where the issue lies.; >; > @psi4/maintainers <https://github.com/orgs/psi4/teams/maintainers> I; > think this is good to go, the only remaining issue is the cartesian; > auxiliary basis set. For this I would like to just add a throw and; > additional if statements in the JK constructor to force DISK_DFJK for now; > and throw in the MEM_DFJK object.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/961#issuecomment-385254164>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdqoEE36eTVxnpwiSXLzRlMcsWKKBks5ttclxgaJpZM4TTiAA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-385255339:131,down,down,131,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-385255339,1,['down'],['down']
Availability,"I'm posting this for discussion before I start coding anything. I was hoping to have some more details on prefactors, but I've both fallen ill and been given a shift in priorities, so I'm posting what I have in the interests of not wasting more time. I'm hoping to have more to say on the prefactor problem when I've recovered. @kcpearce's plans for MP2 hessians are related, but not the part of the project that I'll be focusing on. ## Motivation; Several different groups of Psi developers are dissatisfied with Psi's current technology for correlated derivatives.; * At Emory, @fevangelista has recently implemented gradients for DSRG-PT2 via a standalone code interfaced to Psi. Getting those working required consulting three(!) other experienced Psi developers and borrowing code from a fourth because the assumptions of the `libmints/libtrans` machinery are undocumented and confusing.; * At University of Georgia, the DCT code currently has to go through several contortions to be compatible with the gradient code. It has to [rewrite part of libtrans for RHF gradients](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:317,recover,recovered,317,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['recover'],['recovered']
Availability,"I'm running psi4 via JSON inputs using `psi4.json_wrapper.run_json(json_data)`. The script I'm running is [here](https://github.com/ChayaSt/torsionfit_examples/blob/wbo/kinase_inhibitors/bond_order/run_psi4.py). ; I'm using psi4 version `1.2a1.dev781`. ; When I try to run this on the cluster I get the following error:; ```; Traceback (most recent call last):; File ""run_psi4.py"", line 14, in <module>; psi4.json_wrapper.run_json(json_data); File ""/home/chayas/miniconda3/envs/p4dev/lib/python3.6/site-packages/psi4/driver/json_wrapper.py"", line 234, in run_json; with open(outfile, 'r') as f:; FileNotFoundError: [Errno 2] No such file or directory: '817ec146-d766-49a6-828c-8758bd88af3d.json_out'; ```; I added `print(os.getcwd()), print(outfile)` after [this line](https://github.com/psi4/psi4/blob/master/psi4/driver/json_wrapper.py#L233) in `json_wrapper.py` and it printed out:; ```; current directory: /tmp/psi.50867..dftd3.a3e40a77; outfile: 9eab12bc-82e2-47aa-b29f-eb58db83bf22.json_out; ```; When I set `json_data[""scratch_location""]: ""absolute/path/to/current/directory""` where the current directory is the directory I launch psi4 from, I get the following print out:. ```; current directory: /lila/home/chayas/src/ChayaSt/torsionfit_examples/kinase_inhibitors/bond_order/Axitinib/psi.52714..dftd3.cb5f92ab; outfile: 45d87c61-c859-4e40-9a96-419f3b0888ad.json_out; ```; The tmp directory `psi.57214..dftd3.cb5f92ab` gets written to the directory I specified and some scratch files get written there too. But `45d87c61-c859-4e40-9a96-419f3b0888ad.json_out` is written to `/lila/home/chayas/src/ChayaSt/torsionfit_examples/kinase_inhibitors/bond_order/Axitinib/`, not to the tmp directory no matter if I specify where the scratch files should be written. . @dgasmith suggested I add `outfile = core.IOManager.shared_object().get_default_path() +str(uuid.uuid4()) + "".json_out""` to [here](https://github.com/psi4/psi4/blob/master/psi4/driver/json_wrapper.py#L188). When I do this, `json_wrappe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/944:313,error,error,313,https://psicode.org,https://github.com/psi4/psi4/issues/944,1,['error'],['error']
Availability,"I'm running this on my cluster. If your cluster returns additional error and output files other than the standard `output.dat`, could you check to see if those have any content?. Definitely let us know if the words ""Failed to converge"" show up. I have a suspicion as to what part of the code is the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640054780:67,error,error,67,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640054780,1,['error'],['error']
Availability,"I'm sure Stanton knows what he is talking about here, but I am not sure; there is a discrepancy between what he is saying and what I am saying.; Perhaps he never coded the minimal displacement approach, as we have never; coded it either. He may have decided the robustness and simplicity of +2/3; gradients was better than the complexity and complication of solving all; these little equations. I don't see a problem with you going ahead as you; are planning for pyvib2. We could revisit to try to reduce the; computational cost slightly at a later time. On Fri, Jan 19, 2018 at 12:43 PM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, my concern is your insistence; > that the rot SALCs *aren't* needed at non-stationary geometries (""3; > rotational degrees for which the energy is invariant"", ""don't have to do; > the extra displacements"") vs. Stanton's insistence that they *are* (""At a; > stationary point on the potential energy surface, both options will give; > equivalent harmonic force fields, but OFF [retains the rotational degrees; > of freedom] should be used at non-stationary points."" Since pyvib2 has to; > start from Cartesian Hessians (findif or anal.), I'm just trying to gauge; > what situations the former is valid for.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/884#issuecomment-359053844>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTPrMzI8UDltN7yLjOYyEfycGPrnAks5tMOJIgaJpZM4REtHr>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-359059459:262,robust,robustness,262,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-359059459,2,['robust'],['robustness']
Availability,I'm suspecting that also. One odd thing is that it only did it for me (and others) from a search engine. It's hijacking based on the referer in the header (no idea if this is common). compare:. ```; wget --referer www.google.com psicode.org; ```. vs. ```; wget psicode.org; ```. The first will download an html document that is just a redirect. The second gets me the real psicode.org,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210023458:294,down,download,294,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210023458,1,['down'],['download']
Availability,"I'm taking a look at this in pyoptking and hit the scf issue described above (after deactivating the torsion error). @loriab `""guess"" : ""read""` is being sent to psi4 in the `AtomicInput`. Is `read` expected to work with a standard energy call followed by a call through `run_qcschema`?. I get:; `Unable to find file 180, defaulting to SAD guess.` . If psi4 is looking in `$PSI_SCRATCH` I don't see file 180 there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-870088078:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-870088078,1,['error'],['error']
Availability,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:675,down,downstream,675,https://psicode.org,https://github.com/psi4/psi4/issues/1426,1,['down'],['downstream']
Availability,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235109795:1136,error,error,1136,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795,2,['error'],['error']
Availability,"I'm trying to optimize the geometry of ethylammonium cation using psi4. I have downloaded the latest version and an optimization of a smaller molecule ran with no trouble. This one fails with the error; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; The complete output file is attached. I don't understand the error message. Can anyone explain it to me, please?. Anthony Stone. [ethylammonium.txt](https://github.com/psi4/psi4/files/7090210/ethylammonium.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287:79,down,downloaded,79,https://psicode.org,https://github.com/psi4/psi4/issues/2287,3,"['down', 'error']","['downloaded', 'error']"
Availability,"I'm trying to perform SAPT calculations with the aug-cc-PV5Z bases set for the interaction between helium gas and ammonia. However, getting the error describe below. Memory set to 26.077 GiB by Python driver.; Threads set to 12 by Python driver. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 5 for key JKFIT among:; Shell Entries: ['HE']; Basis Sets: [('aug-cc-pv5z-jkfit', 'aug-cc-pv5z-jkfit', None)]; File Path: /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/miniconda3/envs/venv_psi4/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""run_GN_NH3_inter_var.py"", line 402, in <module>; eel = calcula_energia(metodo, base, dimero, fator_conv)[0]; File ""run_GN_NH3_inter_var.py"", line 73, in calcula_energia; psi4.energy(f'{metodo}/{base}'); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4394, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1576, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1231, in scf_wavefunction_factory; aux_basis = core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SCF"",; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 85, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989:144,error,error,144,https://psicode.org,https://github.com/psi4/psi4/issues/2989,1,['error'],['error']
Availability,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464:131,error,error,131,https://psicode.org,https://github.com/psi4/psi4/issues/464,2,['error'],['error']
Availability,"I'm trying to run a CI calculation within an active space to get a natural orbital guess for a smaller subspace CASSCF. However, when nat_orbs = true, the FNO code is triggered. In some cases I might want this to happen, but; a) I might want to get NOs with a canonical frozen core; b) the FNO code that insists on running currently crashes with; ```; ==> Build MP2 amplitudes, OPDM, and NOs <==. LIBDPD: Out-of-core algorithm not yet coded for rpqs sort.; Error in: buf4_sort; ```; on my system with roughly 300 basis functions. Frozen natural orbitals should only be triggered if the method explicitly specifies fno- or if a special keyword (I propose frz_nat_orbs) is specified. Normally I'd supply a pull request, but I still haven't figured out where the fno code is toggled in this case...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/598:457,Error,Error,457,https://psicode.org,https://github.com/psi4/psi4/issues/598,1,['Error'],['Error']
Availability,"I'm trying to run some FCI calculations without symmetry to ensure I land on the ground state. However, the SCF is sometimes very hard to do without symmetry, so I'd like to run SCF with symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eige",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/586:726,Error,Error,726,https://psicode.org,https://github.com/psi4/psi4/issues/586,2,['Error'],['Error']
Availability,"I'm using GCC 8.1.0 and system-provided pybind 2.2.3 on Arch Linux, with latest master (015c10a5581e70c507feb968e87f75954ae0e946).; ```; src_berquist/psi4/src/core.cc:1081:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1013:176,error,error,176,https://psicode.org,https://github.com/psi4/psi4/issues/1013,1,['error'],['error']
Availability,"I've PR'd to this PR a fix for all the recent ghost/ECP issues (https://github.com/PeterKraus/psi4/pull/2). This is all sidestepping the true problem, which is that we're overloading `mol->Z()` to be atomic number, ghostedness, and non-ECP charge. Errors downstream of libmints Molecule are going to keep popping up, methinks. In fact, I should probably check the mol->json procedure. Thoughts on a forward strategy?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109#issuecomment-409411582:248,Error,Errors,248,https://psicode.org,https://github.com/psi4/psi4/pull/1109#issuecomment-409411582,2,"['Error', 'down']","['Errors', 'downstream']"
Availability,I've added a test for UHF integral dumps. The tests are in both as PsiAPI _and_ as Psithon. The former is failing without any particularly informative error message. Suggestions on how to troubleshoot?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355999602:151,error,error,151,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355999602,1,['error'],['error']
Availability,"I've been able to reproduce a disagreement between Psi4 and PySCF integrals. I've reached out to the `libecpint` developer to figure out if this may be an issue of numerical tightness. As far as I can tell, there's no mechanism for Psi4 to tell `libecpint` that we want our integrals to within a certain tolerance. That may be the issue for the iron pentacarbonyl system. The disagreement for your second system is much more disturbing, but my policy with debugging is to start with the simple cases first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1157785855:304,toler,tolerance,304,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1157785855,2,['toler'],['tolerance']
Availability,"I've been fiddling about with fragment optimisations and (after a bit of tweaking intrafrag_step_limit and interfrag_step_limit), I can get something like a benzene dimer to run and optimise (blyp/cc-pVDZ with D3BJ empirical dispersion; I'm not worried what the actual structure is at the moment!). If I do the same with, e.g., a dimer of PhCN, i.e. something with linear bends present, I get a seg fault pretty much straight away in the optimisation during printing of the internal coordinates. The top of the debug stack is:; ```; (gdb) bt; #0 0x00002aaaadd9a2bd in opt::v3d::v3d_axpy (a=-1, X=0x3fee2b48e49e68d8, Y=0x55555d9b5c90, Z=0x7fffffffbc20); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/v3d.h:72; #1 0x00002aaaaddacf78 in opt::BEND::compute_axes (this=0x55555e408d20, geom=0x55555d874e30); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/bend.cc:82; #2 0x00002aaaaddad565 in opt::BEND::value (this=0x55555e408d20, geom=0x55555d874e30); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/bend.cc:141; #3 0x00002aaaaddae374 in opt::BEND::print (this=0x55555e408d20, psi_fp=..., qc_fp=0x0, geom=0x55555d874e30, ; off=0) at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/bend.cc:269; #4 0x00002aaaadd6cff2 in opt::FRAG::print_simples (this=0x55556b8407e0, psi_fp=..., qc_fp=0x0, atom_offset=0); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/frag_print.cc:123; #5 0x00002aaaadd8db62 in opt::MOLECULE::print_coords (this=0x55555e405dd0, psi_fp=..., qc_fp=0x0); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/molecule_print.cc:209; #6 0x00002aaaadd5abd5 in opt::optking (options=...); at /home/laz/build/psi4/psi4/psi4/src/psi4/optking/optking.cc:261; #7 0x00002aaaad0dd557 in py_psi_optking () at /home/laz/build/psi4/psi4/psi4/src/core.cc:239; #8 0x00002aaaad118e95 in pybind11::detail::argument_loader<>::call_impl<int, int (*&)()>(int (*&)(), pybind11::detail::index_sequence<>) (this=0x7fffffffc667, f=@0x5555560adc28: 0x2aaaad0dd4f4 <py_psi_optking()>); ... [Pythony bits ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680:399,fault,fault,399,https://psicode.org,https://github.com/psi4/psi4/issues/680,1,['fault'],['fault']
Availability,"I've been playing build bisect today on the conda package and narrowed this problem down to `-static-libstdc++`. Troublesome, since the build will have to become less static, but hardly the worst outcome. So by the time new conda packages are public again, this will be fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-379955622:84,down,down,84,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-379955622,1,['down'],['down']
Availability,"I've been trying to build a version of psi4 1.6 (based on the release from a day or so ago) with MAX_AM_ERI=7, and run into various issues. I think at this point I've solved all my issues, but wanted to document my steps here in case any of these can help others. **Overall**: Is MAX_AM_ERI=7 meant for use on 1.6? Is https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz the right file to use (with patches described below)?. **Problem 1**: psi4/external/upstream/libint2/CMakeLists.txt refers to a single libint2 file regardless of MAX_AM_ERI (https://github.com/psi4/psi4/blob/1.6.x/external/upstream/libint2/CMakeLists.txt#L63) . **Solution 1**: Grab https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz instead. **Problem 2**: The CMakeLists.txt in Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz has an incorrectly quoted macro, which results in a build error when trying to compile using header files from libint2. The original correct quoting appears commented out? Which makes me worried maybe it was that way for a Reason, but it would not build that way. **Solution 2**: Uncomment line 303 and remove line 304 of libint-2.7.1/CMakeLists.txt, then (re)build. (this makes it look like the CMakeLists.txt in the default https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586:360,down,download,360,https://psicode.org,https://github.com/psi4/psi4/issues/2586,4,"['down', 'error']","['download', 'error']"
Availability,"I've decided that this bugfix will require some discussion before we can act because changes to the number of MOs resulting from changing linear dependencies in the basis can yield a number of different errors. If nmo increases (as in this test case), then HF::dump_to_checkpoint() fails when it attempts to write too many orbital energies. However, if nmo decreases, then the use of the previous set of MOs will fail because they will be mis-read, producing an incorrect initial guess. We should put this down as a topic for discussion at the next hack-a-thon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-37137150:203,error,errors,203,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37137150,2,"['down', 'error']","['down', 'errors']"
Availability,"I've discussed this PR with Yi. This is just to confirm that we want to change the default exch-disp scaling scheme, as the new one appears to be more reliable. Apparently the previous test case didn't break because the exch-disp scheme was manually selected in the test case, rather than utilizing the (updated) default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067:151,reliab,reliable,151,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067,1,['reliab'],['reliable']
Availability,"I've fixed this, but the changes haven't been synched to psi4public yet. Will do that this week. . Sent from my iPhone. > On May 3, 2015, at 8:00 AM, wpoely86 notifications@github.com wrote:; > ; > psi4 --version gives:; > ; > (gdb) r; > Starting program: /home/ward/tmp/psi4release/build2/bin/psi4 --version; > [Thread debugging using libthread_db enabled]; > Using host libthread_db library ""/lib64/libthread_db.so.1"".; > ; > Program received signal SIGSEGV, Segmentation fault.; > std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > 51 if (__os.tie() && __os.good()); > Missing separate debuginfos, use: debuginfo-install python-libs-2.7.8-9.fc21.x86_64; > (gdb) bt; > #0 std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > #1 0x000000390e699869 in std::__ostream_insert<char, std::char_traits<char> > (__out=..., __s=__s@entry=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __n=76); > at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream_insert.h:82; > #2 0x0000000001e6bd18 in operator<< std::char_traits<char > (__s=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __out=...) at /usr/include/c++/4.9.2/ostream:535; > #3 Write2Buffer<char*> (Input=<synthetic pointer>, this=0x0) at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.h:157; > #4 psi::PsiOutStream::Printf (this=0x0, format=format@entry=0x204e9c0 "" "", '-' <repeats 71 times>, ""\n"") at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.cc:82; > #5 0x00000000008a79bf in psi::print_version () at /home/ward/tmp/psi4release/build2/src/bin/psi4/version.cc:38; > #6 0x00000000008e2d57 in psi::psi_start (argc=argc@entry=2, argv=argv@entry=0x7fffffffd798) at /home/ward/tmp/psi4release/src/bin/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98488186:474,fault,fault,474,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98488186,1,['fault'],['fault']
Availability,"I've got a branch that's only two days removed from master, and its smoke tests are clean. There is a problem with psi4 and qcng 0.28, but I'm sure you're on linux. After pulling tags, one does have to rebuild for the versioning to take effect. But if you're sure that's not it, go ahead and execute the results of `<objdir>/stage/bin/psi4 --psiapi`. It shouldn't be necessary for ctest, but considering those failures are those tests running the python command _and_ those that use qcengine, best to make sure of paths. Beyond that, see if `<objdir>/Testing/Temporary/LastTest.log` has some output clues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745:410,failure,failures,410,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745,1,['failure'],['failures']
Availability,"I've got all the parts that affect REMP ready. Final stage is to persuade dfocc to converge simple molecules to default tolerance under default conditions :-) . I'll update this PR as the amalgamation, then break off just `occ` changes for you and other to look over, @behnle. A couple easy questions:; * Do you want REMP controlled by `mp_type` (covers all MPn > 2 and ZAPT) or `cc_type` (covers CEPA and CC)? Either is sensible, so your call.; * Any need to future-proof QCVariables with `REMP2` (or `REMP2,3`!)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1198695727:120,toler,tolerance,120,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1198695727,2,['toler'],['tolerance']
Availability,"I've got trouble calculation H2:. ``` python; import numpy as np; memory 50 Gb. molecule H2 {; 0 1; H; H 1 R; units au; }. set {; SCF_TYPE PK; diag_method rsp; MAXITER 40; NUM_ROOTS 5; basis cc-pvdz; }. rlist = np.arange(1.00, 10.1, 0.1). for r in rlist:; H2.R = r; energy('fci'); ```. It calculates the first point and then I get:. ``` python; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""share/psi/python/driver.py"", line 576, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""share/psi/python/proc.py"", line 1969, in run_detci; psi4.detci(); RuntimeError: PSIO Error; ```. This is done with 14c78eab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/83:693,Error,Error,693,https://psicode.org,https://github.com/psi4/psi4/issues/83,1,['Error'],['Error']
Availability,"I've gotten that once today, too. Then I've gotten distracted by other matters. Even if a restart fixes it, another CI failure will crop up later on, so please rebase, and we'll see if this is a consistent issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1332827250:119,failure,failure,119,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332827250,1,['failure'],['failure']
Availability,"I've just noticed that this is meant for the 1.3 release. I'll have another look at it and will implement both `freeze_core True/False` and `freeze_core 0/-1/-2/-3` options, where `False == 0` witout FC, `True` is the ""smart handling"" (previous rare gas of each atom, taking into account charge), and `-1/-2/-3` would be ""strict"" N-th previous rare gas, ignoring charge but throwing a reasonable error when all electrons are frozen. I will have it done by Monday, if that's OK?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734:396,error,error,396,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734,1,['error'],['error']
Availability,"I've made a new PR #2743 to JUST fix the hang bug, and then we can keep bikeshedding here on what we actually want to do about `RadialGrid` and `SphericalGrid` but have a fix in the codebase that actually stops the nasty hang that took me down this rabbit hole in the first place. - @susilehtola this initializes with an initializer list like you requested; - @hokru this loses NO information over the prior state-of-the-world like you suggested was desirable (if I was reading correctly); - @JonathonMisiewicz I guess you won't like it because spaghetti didn't go away but it's short and sweet, at least. Obviously this patch would undo all of that patch but I think the scope of this discussion exceeded the original PR statement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1273725391:239,down,down,239,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1273725391,2,['down'],['down']
Availability,"I've made a nofortran py37 Mac build accessible through `conda create -n amber3 ambertools=20 blas=*=mkl psi4/label/dev::libxc psi4 -c conda-forge -c psi4/label/nofortran -c psi4/label/dev`. It won't get automatically updated regularly, but I can do so upon pinging. Hopefully this'll do for CI. lmk if a different python preferred.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-723231235:258,ping,pinging,258,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-723231235,1,['ping'],['pinging']
Availability,"I've rebased this so that dev psi4 is working with dev libxc (soon to be libxc v5). Haven't tried fixing up psi for xc changes in the last year+, so there are failing tests at present. * Libxc master is still labeled 4.3.4, which is the same as the very different release branch current psi is accustomed to. Probably the easiest way to work with clones of both projects and be sure of what you're getting is to build libxc master (`-DBUILD_SHARED_LIBS=ON`), install it, edit the `ConfigVersion.cmake` file to `4.4`, go to psi, force uninstall libxc conda package if libxc is in your active env, edit external/upstream/libxc/CM to 4.4, build psi passing `-DLibxc_DIR=/path/to/dir/of/ConfigVersion`, build psi, check you've got the right one with `ldd stage/lib/psi4/core`.; * Errors at present:; ```; 	158 - dft-grad-lr1 (Failed); 	159 - dft-grad-lr2 (Failed); 	160 - dft-grad-lr3 (Failed); 	175 - dft1 (Failed); 	177 - dft1-alt (Failed); 	179 - dft3 (Failed); 	180 - dft-omega (Failed); 	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:776,Error,Errors,776,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,1,['Error'],['Errors']
Availability,"I've reinstalled everything and indicated the path to the libstdc++, so this might fix the issue I had before (I'm running the tests now and I'll see). Just a small question. I did the ```otool -L``` as follows, does the output looks good to you ?. ```; otool -L /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. About numpy, I have something like this, does it look good as well ?; ```; otool -L /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so; /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so:; 	@loader_path/../.dylibs/libopenblasp-r0.3.7.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4); ```. Otherwise, do you advise me to download the INTEL distribution ? https://software.intel.com/en-us/distribution-for-python/choose-download",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614842621:1590,down,download,1590,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614842621,2,['down'],['download']
Availability,"I've removed the work-in-progress marker as this first step is reasonably complete. The `Tensor` class as storage object has an acceptable interface both on the C++ and the Python side (I think!) I can use this to work further on the `linalg` namespace, add BLAS/LAPACK wrappers, and eventually transition the SCF to xtensor. I have tried to fix Azure CI, to no avail. I can't quite figure out whether I need to change the xtensor source or the CI setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-484270023:362,avail,avail,362,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-484270023,1,['avail'],['avail']
Availability,"I've run full tests with both py27 & py36 and both report the following. The last two are b/c hungarian not installed – not a problem. The first two are b/c MemDFJK isn't handling Cartesian basis sets right. I'm not sure how those other errors you were seeing came about, @schiebermc. Was there a point in this branch where full tests was clean? There's been upheaval to `master`, so we could reason from there. ```; The following tests FAILED:; 	187 - fd-freq-energy-large (Failed); 	212 - mints8 (Failed); 	375 - pywrap-align (Failed); 	376 - pywrap-align-chiral (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384197920:237,error,errors,237,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384197920,1,['error'],['errors']
Availability,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203440132:114,error,error,114,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132,6,['error'],['error']
Availability,"I've seen similar errors when Python versions are mixed. Use which python and which python-config to check your shell versions. Use ldd bin/psi4 to check the linked version. Boost also could have been built against a diff Python. If there's any mismatch identified or possible, try passing --python to setup (setup --help for details) and letting psi4 build the packaged boost. No turning off Python for psi4, I'm afraid. It's integral to the executable. . Sent from my iPhone. > On May 11, 2015, at 12:11 AM, Vladimir notifications@github.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/94#issuecomment-100760375:18,error,errors,18,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375,1,['error'],['errors']
Availability,I've shut down the trac pages of sirius.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112#issuecomment-121439521:10,down,down,10,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121439521,1,['down'],['down']
Availability,"I've tracked this down to ""GGA_X_ITYH"", which is the range-separated GGA part - this exchange functional just doesn't converge for the above system, even when I run something like 100% X_ITYH + 100% C_VWN without range separation. @susilehtola, is there any reason the 3.0.0 version could be broken?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-379370522:18,down,down,18,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-379370522,1,['down'],['down']
Availability,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:335,error,errors,335,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348,2,['error'],['errors']
Availability,"I, too, am worried that dummy atoms and adjusted geometries weren't designed to work together, as none of the scanning examples use dummy atoms. (In which case we need an error message.) However, there is a workaround. You could define the molecule as a string, then instantiate the molecule anew for each step in the scan, like below. Would this help? Thanks for trying psi!. ```; sdimer = """"""; He; X 1 {R} ; He 2 1.0 1 180 ; """""". set basis 6-31G(d). Rvals = [1.4, 1.5]; ref_nre = {1.4: 0.8819620, 1.5: 0.8466835}. ### Compute; ecp = {}; nre = {}; for R in Rvals:; dimer = geometry(sdimer.format(R=R)); ene = energy(""mp2""); ecp[R] = ene; nre[R] = dimer.nuclear_repulsion_energy(); print(R, ene, dimer.nuclear_repulsion_energy()); ; for R in Rvals:; compare_values(ref_nre[R], nre[R], 5, f'nre {R}'). ```; ```; 1.4 -5.732454436415538 0.8819620177833327; 1.5 -5.7325858447838085 0.846683537072; nre 1.4...............................................................................PASSED; nre 1.5...............................................................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883:171,error,error,171,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883,1,['error'],['error']
Availability,"I, too, would like to see at least a token Mac build eventually. But when Mac and python3 get added to the build matrix, the number of builds starts to get really high, considering our compile time. So I slightly favor the thinning. Also, master is already a protected branch. After the closing down of private master into read-only, should we activate that we _can't_ merge PR w/o them passing CI?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182576134:295,down,down,295,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182576134,1,['down'],['down']
Availability,"IS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop]; ```. The other crash I saw was just the input/output from the conda install test. Let me know if you need more information.; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:9187,Error,Error,9187,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Error'],['Error']
Availability,"Ideally, the list of functionals in Psi4 would depend on the version of libxc available. And yes, it would be nice to be able to compile Psi4 without modifications against the distribution version of libint. The Fedora package supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451102082:78,avail,available,78,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451102082,1,['avail'],['available']
Availability,"Ideally, you should know what kind of basis set you're using, as you're presumably going to cite it in your work; the details about the number of core `e-`'s treated as effective potentials will be included there. There are also all-electron basis sets available for almost any element; some of them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an ECP in the `=> Loading Basis Set <=` section, and the details are printed later on under `==> Primary Basis <==`. As for the question of 28 vs 36 electrons: the first 28 electrons are the 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell. The additional 8 electrons you're thinking about are from the 4th period shells, where the 4d10 part is in your 5th valence shell - so you don't really want to replace any of those with a potential. (At least that's my rather limited understanding.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412880178:253,avail,available,253,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412880178,1,['avail'],['available']
Availability,If I build this PR locally it takes the (old) libxc header from `miniconda/include/` (Lapack include dir in CMakeCache) instead of the new from `stage/include`. See below. I suppose users would need to make sure there is no old libxc around in their conda env.; So maybe more of an Azure setup problem for now?. ```; [ 42%] Building CXX object src/psi4/libfunctional/CMakeFiles/functional.dir/LibXCfunctional.cc.o; cd /Users/kruse/qc/psi4/objdir_LIBXC/psi4-core-prefix/src/psi4-core-build/src/psi4/libfunctional && /Users/kruse/homebrew/bin/g++-9 -DUSING_LAPACK_MKL -DUSING_Libxc -I/Users/kruse/qc/psi4/psi4/include -I/Users/kruse/qc/psi4/psi4/src -isystem /Users/kruse/qc/miniconda3/include -isystem /Users/kruse/qc/psi4/objdir_LIBXC/stage/include -march=native -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk -fPIC -fvisibility=hidden -fvisibility-inlines-hidden -fopenmp -std=c++14 -o CMakeFiles/functional.dir/LibXCfunctional.cc.o -c /Users/kruse/qc/psi4/psi4/src/psi4/libfunctional/LibXCfunctional.cc; /Users/kruse/qc/psi4/psi4/src/psi4/libfunctional/LibXCfunctional.cc: In member function 'void psi::LibXCFunctional::set_tweak(std::vector<double>)':; /Users/kruse/qc/psi4/psi4/src/psi4/libfunctional/LibXCfunctional.cc:256:69: error: invalid conversion from 'const xc_func_info_type*' to 'xc_func_info_type*' [-fpermissive]; 256 | int npars = xc_func_info_get_n_ext_params(xc_functional_.get()->info);; | ~~~~~~~~~~~~~~~~~~~~~~^~~~; | |; | const xc_func_info_type*; In file included from /Users/kruse/qc/psi4/psi4/src/psi4/libfunctional/LibXCfunctional.cc:43:; /Users/kruse/qc/miniconda3/include/xc.h:124:54: note: initializing argument 1 of 'int xc_func_info_get_n_ext_params(xc_func_info_type*)'; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-621118524:1308,error,error,1308,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-621118524,1,['error'],['error']
Availability,"If Psi is built with debug symbols, I observe that the `cc53` test fails randomly. Failure rate seems to be somewhere between 50% and 80%. If Psi is not built with debug symbols, the test works perfectly. When the bug appears, the LLDB reports `malloc: *** error for object 0x100000000: pointer being freed was not allocated`. The most relevant part of the stack trace is ; ```; frame #5: 0x00000001050d3b64 core.cpython-36m-darwin.so`psi::DPD::free_dpd_block(this=0x000000011485c9c0, array=0x000000011485cb50, n=3, m=3) at block_matrix.cc:176; frame #6: 0x0000000105124f85 core.cpython-36m-darwin.so`psi::DPD::file2_mat_close(this=0x000000011485c9c0, File=0x00007ffeefbf7718) at file2_mat_close.cc:46; frame #7: 0x0000000103c092dc core.cpython-36m-darwin.so`psi::cctriples::EaT_RHF() at EaT_RHF.cc:247; frame #8: 0x0000000103c5477f core.cpython-36m-darwin.so`psi::cctriples::cctriples(reference_wavefunction=std::__1::shared_ptr<psi::Wavefunction>::element_type @ 0x0000000102a00e00 strong=7 weak=2, options=0x00000001067bf240) at triples.cc:154; frame #9: 0x0000000103b45e93 core.cpython-36m-darwin.so`psi::cclambda::CCLambdaWavefunction::compute_energy(this=0x00000001018f4e18) at cclambda.cc:324; ```. I'll leave this bug to somebody familiar with the CC code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1376:83,Failure,Failure,83,https://psicode.org,https://github.com/psi4/psi4/issues/1376,2,"['Failure', 'error']","['Failure', 'error']"
Availability,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2372:390,error,error,390,https://psicode.org,https://github.com/psi4/psi4/issues/2372,5,"['Error', 'error']","['Error', 'error']"
Availability,"If a user sets the symmetry explicitly and then attempts to perform a finite difference calculation, Psi raises `Fatal Error: User specified point group is not a subgroup of the highest detected point group.` This problem does not occur if the user does not explicitly provide the symmetry. The problem also occurs if `reset_point_group` is used. Example input below. I don't know enough about Psi's symmetry and molecule tech to tell if this is a problem that needs to be fixed findif side or molecule side. If this needs to be fixed findif side, I'll take it for obvious reasons. If not, then if this isn't fixed by the time findif is done, I'll take this anyways. I've had a vendetta against this bug since November. ```; molecule h2o {; symmetry c2v; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; }. set {; basis sto-3g; d_convergence 11; scf_type pk; }. frequencies('scf', dertype=1, return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1052:119,Error,Error,119,https://psicode.org,https://github.com/psi4/psi4/issues/1052,1,['Error'],['Error']
Availability,"If an error occurs, it occurs again when you call ""make"". So if you now call ""make VERBOSE=1"" instead, you should get the specific info you're looking for.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/82#issuecomment-95674415:6,error,error,6,https://psicode.org,https://github.com/psi4/psi4/issues/82#issuecomment-95674415,1,['error'],['error']
Availability,If conda is used you will likely need to run this:; `update psi4 libefp libint erd simint pcmsolver chemps2 gdma dkh libxc -c psi4/label/dev` or else; you will get this error: http://forum.psicode.org/t/psi4-error-after-upgrade/662/2. (I happend to run into this today morning),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373034538:169,error,error,169,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373034538,2,['error'],"['error', 'error-after-upgrade']"
Availability,"If during a BCCD(T) calculation CCENERGY errors out due to the CC iterations not converging, Psi4 crashes with an error due to a timer not being on. Cut down input that intentionally triggers the issue:; ```; memory 8 GiB; molecule {; 0 2; H 3.14661583 0.50221279 16.95640639; H -2.34237367 -1.18278602 -9.14879752; H -1.21364759 -0.97589031 -7.97279014; H -0.76962046 -0.48732090 -9.68891324; H -2.68966560 0.90001402 -8.13713011; O 3.52147514 -0.34931909 16.40682068; O -2.05471741 0.80770143 -8.67788722; C -1.63014171 -0.50652361 -8.79096870; symmetry c1; }. set basis aug-cc-pvdz; set reference rohf; set ints_tolerance 1e-14; set d_convergence 5e-9; set e_convergence 1e-10; set ccenergy maxiter 2. energy('BCCD(T)'); ```. Tail of the produced output:; ```; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -0.533075915819886 0.000e+00 0.006541 0.000000 0.000000 0.000000; 1 -0.556071307119493 7.982e-02 0.013677 0.000000 0.000000 0.000000; 2 -0.568751401183405 2.374e-02 0.014574 0.000000 0.000000 0.000000. ** Wave function not converged to 1.0e-07 ** . Traceback (most recent call last):; File ""/home/jzz/psi4conda/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2673, in run_bccd; ref_wfn = core.ccenergy(ref_wfn). RuntimeError: ; Fatal Error: Timer ccenergy is not on.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1584239292352/work/psi4/src/psi4/libqt/timer.cc on line: 1143; The most recent 5 function calls were:. psi::timer_off(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocato",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864:41,error,errors,41,https://psicode.org,https://github.com/psi4/psi4/issues/1864,3,"['down', 'error']","['down', 'error', 'errors']"
Availability,"If only. I added #include <tuple> to src/bin/detci/ciwave.h (and params), but I still get the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232855724:94,error,error,94,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232855724,1,['error'],['error']
Availability,"If the above works, and you think it'd be helpful, I can edit https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to something like. ``` python; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189441001:334,avail,available,334,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441001,1,['avail'],['available']
Availability,"If the name of the installation directory is over a certain threshold and you try to run gdma, it will crash. Probably just needs a longer string somewhere that my shallow explorations have not found. This will _not_ be fixed for 1.1, so just documenting the issue. Will add the error message when I hit it again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/667:279,error,error,279,https://psicode.org,https://github.com/psi4/psi4/issues/667,1,['error'],['error']
Availability,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262370710:406,fault,fault,406,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710,2,"['Failure', 'fault']","['Failures', 'fault']"
Availability,"If the user doesn't specify how a gradient or hessian is to be computed (difference of energies, difference of gradients, or analytically), Psi will choose to compute it by the most analytic method available to the general method. This leads to annoying crashes when that method isn't available for the more particular variant of the method requested. For instance, the following input file will crash:; ```; molecule {; O ; H 1 1.0 ; H 1 1.0 2 105 ; }. set {; reference rks ; basis sto-3g; }. gradient('wb97x-v'); ```. The error is that:; ```; Fatal Error: V: RKS cannot compute VV10 gradient contribution.; ```. But in that case, Psi shouldn't have tried to do an analytic gradient computation at all but just done finite difference of energies. I'm not familiar with how the method selection works, but I have a bad feeling that writing this would be rather painful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1149:198,avail,available,198,https://psicode.org,https://github.com/psi4/psi4/issues/1149,4,"['Error', 'avail', 'error']","['Error', 'available', 'error']"
Availability,"If the user wants to run DF-MP2 on a molecule containing an element like Li or He, we need to use the requested basis set for most of the atoms and then a more generic basis set for the tricky atom. It might be useful to let Python query basis set availability per atom --- apparently such queries are currently made C-side.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/46:248,avail,availability,248,https://psicode.org,https://github.com/psi4/psi4/issues/46,1,['avail'],['availability']
Availability,"If two atoms get within 0.5 Bohr of each other, psi4 crashes. I tracked this down to the overlap matrix having NAN in rows/columns involving AOs centered on the overlapping atom. This seems to be a problem in the part of the code that computes atom mappings, because when I change the tol in petitelist.h:62 to:; `int **compute_atom_map(const Molecule* mol, double tol = 0.1);`; (and the line above), the problem goes away. It seems the AO shells are not created for the overlapping atom, even though parts of the code expect them. Setting c1 symmetry does not help. Here's a small input deck that recreates the problem:. ```; #! H Ghost test. molecule h { ; -1 1; H 0.00000000 0.00000000 0.0; Gh(He) 0.0000000000 0.0000000000 0.2; }. set {; SCF_TYPE DIRECT; DF_SCF_GUESS FALSE; print 4; }. basis {; assign sto-3g; }; energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195:77,down,down,77,https://psicode.org,https://github.com/psi4/psi4/issues/195,1,['down'],['down']
Availability,"If we don't print the number of implied core electrons in the output; somewhere when using an ECP basis, it wouldn't be a bad idea to do so. On Tue, Aug 14, 2018 at 9:56 AM Peter Kraus <notifications@github.com>; wrote:. > Ideally, you should know what kind of basis set you're using, as you're; > presumably going to cite it in your work; the details about the number of; > core e-'s treated as effective potentials will be included there. There; > are also all-electron basis sets available for almost any element; some of; > them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an ECP; > in the => Loading Basis Set <= section, and the details are printed later; > on under ==> Primary Basis <==.; >; > As for the question of 28 vs 36 electrons: the first 28 electrons are the; > 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell.; > The additional 8 electrons you're thinking about are from the 4th period; > shells, where the 4d10 part is in your 5th valence shell - so you don't; > really want to replace any of those with a potential. (At least that's my; > rather limited understanding.); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1113#issuecomment-412880178>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdo2cyTQSSl9yOfKzl_lCPspYyi6jks5uQtbpgaJpZM4VoV4l>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412881311:483,avail,available,483,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412881311,1,['avail'],['available']
Availability,"If you go to psicode.org, downloads, then select “source”, it’ll give an example of using conda compilers. . Other person on this thread: I have an 6.7 system where at last check the binary worked fine. You’re on 6.5, so I’ll pursue that lead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-406323889:26,down,downloads,26,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-406323889,1,['down'],['downloads']
Availability,"If you haven't rebased recently, I wouldn't worry about the Windows error immediately, but Peter's right about tests. The test_psi4_qcschema.py is awkward to work with, so `tests/json/` is a good place to add tests. There's a lot of `run_json` in there to preserve backwards compatibility, but use `run_qcschema` instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126#issuecomment-790260786:68,error,error,68,https://psicode.org,https://github.com/psi4/psi4/pull/2126#issuecomment-790260786,1,['error'],['error']
Availability,"If you need some help working out what's going wrong, please send over the test output you're getting. I've just looked through your changes and I'm not seeing anything that looks out of place. . I remember there being one bug that I fixed in libecpint that will have been in the Psi4 code, but it will have only been noticeable with a specific class of ECPs (those that have an n=1 term (or n=-1 depending on your convention). The line is https://github.com/psi4/psi4/blob/d16d02e69238f1b0d90a2f1283f38e818873e748/psi4/src/psi4/libmints/ecpint.cc#L473 and should be changed to . ```tooSmall = tooSmall || ( intValues(l, i) < tolerance );```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802994469:626,toler,tolerance,626,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802994469,1,['toler'],['tolerance']
Availability,"If you're running py38 and you want an answer quickly, it's worth trying a py36 or py37 environment. There's an error in our use of pb11 binding that throws an error that looks like what you post that has to be corrected by inelegant python syntax. https://github.com/psi4/psi4/commit/8f2d9937b18ce4ad49067af3b762c7aa05653b66#diff-57fb1f3fea72e48dabd650189cf0fa94 Tends to show up for py38 and not earlier. More likely, it's a involved error. In either case, thanks for the report!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1912#issuecomment-635991349:112,error,error,112,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-635991349,3,['error'],['error']
Availability,"If, upon `conda list psi4` the hash-like build string ends in `_2`, then all's well. [linux-64/psi4-1.8.1-py39hd162a35_2.conda](https://anaconda.org/conda-forge/psi4/1.8.1/download/linux-64/psi4-1.8.1-py39hd162a35_2.conda) is one such. That's probably what you got since the solver tries hard to pick the most recent build and only won't if other constraints get in the way. If you wanted to specify it directly, it'd be `conda create ... 'psi4=1.8.1=*_2'` to specify the version exactly and the build ending in `_2`. I should have been clearer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644:172,down,download,172,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644,2,['down'],['download']
Availability,"Im actually getting the errors after make -j\`..\`. The output of make -j... is ; [make errors.txt](https://github.com/psi4/psi4/files/1159909/make.errors.txt). And the output of cmake is. ```; pc0108717:psi4 edq$ sudo cmake -H. -Bobjdir -DPYTHON_EXECUTABLE=/opt/local/bin/python -DPYTHON_LIBRARY=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib -DPYTHON_INCLUDE_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m; -- The C compiler identification is AppleClang 8.0.0.8000042; -- The CXX compiler identification is AppleClang 8.0.0.8000042; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, App",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:24,error,errors,24,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,3,['error'],['errors']
Availability,"Im guessing this is due to the fact that the DF JK algorithm runs in C1 symmetry. . It looks like the errors are exceedingly small, can we just resymmetrize the molecule using built in functions after a optking step to retain the symmetry?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191455202:102,error,errors,102,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191455202,1,['error'],['errors']
Availability,"Im still not completely sure that there is a way to bridge the two. Ultimately the modification in-place leads to quite a few errors; however, the Psithon API make the in-place a logical operation. It would be better to do something like:; ```; new_mol = molecule.update({""var1"": 5, ""var2"": 6}); ```; or something similar. Getting that across in something like Psithon would be difficult I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332298418:126,error,errors,126,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332298418,1,['error'],['errors']
Availability,Implement DIIS absolute error criterion,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460:24,error,error,24,https://psicode.org,https://github.com/psi4/psi4/pull/1460,1,['error'],['error']
Availability,Import error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036:7,error,error,7,https://psicode.org,https://github.com/psi4/psi4/issues/1036,1,['error'],['error']
Availability,Import error in Google Colab,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598:7,error,error,7,https://psicode.org,https://github.com/psi4/psi4/issues/2598,1,['error'],['error']
Availability,"Importantly the RKS/UKS Hessian vector products are available as well, so root following will be enabled for all SCF Wavefunctions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1005#issuecomment-396930932:52,avail,available,52,https://psicode.org,https://github.com/psi4/psi4/issues/1005#issuecomment-396930932,1,['avail'],['available']
Availability,"Improve PSIO error messages for READ, WRITE and LSEEK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756:13,error,error,13,https://psicode.org,https://github.com/psi4/psi4/pull/2756,1,['error'],['error']
Availability,Improve error handling after PSIO system calls,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2746:8,error,error,8,https://psicode.org,https://github.com/psi4/psi4/pull/2746,1,['error'],['error']
Availability,"In `intrinsics_sse.h` and `simint_eri.h` i get errors like: ; ` fatal error: simint/cpp_restrict.hpp: No such file or directory`. The file is located in my installation here:; `[..]/external/upstream/simint/simint_external-prefix/src/simint_external/simint/cpp_restrict.hpp`. For now I can hotfix this for myself by setting the correct path manually.; This issue suddenly appeared, it worked fine before.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890:47,error,errors,47,https://psicode.org,https://github.com/psi4/psi4/issues/890,2,['error'],"['error', 'errors']"
Availability,"In case we do ever switch to tarball+sha256 downloading in ExternalProject, here's a GH blogpost on accessing non-tagged versions. https://github.com/blog/651-annotated-downloads",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856#issuecomment-350826018:44,down,downloading,44,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-350826018,2,['down'],"['downloading', 'downloads']"
Availability,"In doing some development with the branch, I only have one more complaint (so far). Whenever I make a change to a file (in my case, in libmints), running `make` will compile several files before my changed file. This happens every time I make a change. The files are in versioned_code:. version.cc; psi_start.cc; python.cc. I know they have to be compiled every time, but it's annoying that they are compiled **before** my changed files. Ie, these files are compiled before any self-induced compiler errors will surface. If you are fixing multiple errors, it's annoying (since some of them take a little while)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239034822:500,error,errors,500,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239034822,2,['error'],['errors']
Availability,"In hindsight, I should have noticed this earlier:; OPTKING numbers atoms starting from 1, so the value in your options dict should be `1 2`, not `0 1`. Due to how the optimizer works, it will treat `1 2` and `1 3` as symmetry equivalent, so for actual code, you would need to manually specify Cs symmetry if you really wanted to fix only one bond. When I run the optimization with that change, it works just fine. I'm guessing that OPTKING doesn't know how to handle a request to process ""atom 0,"" which leads us to the choose-your-own-error-message adventure. This is definitely not the most graceful way to handle an invalid atom request, but I'll leave it to the core devs to decide what fix would be most appropriate, since OPTKING is scheduled to be replaced soon anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385130211:536,error,error-message,536,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385130211,1,['error'],['error-message']
Availability,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/130#issuecomment-121658832:751,error,error,751,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832,1,['error'],['error']
Availability,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252852440:565,failure,failures,565,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440,1,['failure'],['failures']
Availability,"In particular, 1.8.1 `_2` is pydantic v1/v2 tolerant . likewise qcel v0.26 and qcng v0.27 and v0.28 . qcf next is pinned to pydantic v1, iirc. There's a possibility that 1.8.2 will be pydantic v2 API if we can make a plan to do the whole qca stack at once. If that sounds appealing or alarming to anyone, please chime in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1698293203:44,toler,tolerant,44,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698293203,1,['toler'],['tolerant']
Availability,"In reply to @WDerricotte's last post. This runs on my laptop too. ```; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon; ```; but ; ```; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; ```; does not. The second version (not working) should be the preferred one because the non-DK basis are not meant to be used for relativistic computations. This is the error that I get and it looks like a problem with DF, since if I add the keyword `scf_type = pk` it runs.; ```; CHE-FEVANGE-01I:x2c-double-decontract fevange$ psi4; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4-fork-bin-Debug/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 2794, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1938, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 742, in construct; tmp.append(c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288840729:372,error,error,372,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288840729,1,['error'],['error']
Availability,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/81#issuecomment-119230390:782,checkpoint,checkpointing,782,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390,4,"['checkpoint', 'error']","['checkpointing', 'error']"
Availability,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238061055:814,down,down,814,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055,1,['down'],['down']
Availability,"Incidentally, an independent PR of mine just ran into this particular error message. I'm eager to get this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1251226972:70,error,error,70,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1251226972,1,['error'],['error']
Availability,"Including the _order of magnitude_ in a corner of the plot is highly non-standard and leads to the confusion I just went through. Choose units that are of the proper order of magnitude, and include any needed decimals on the axis directly. According to your axes, you have 2 hartree error, which is utterly unacceptable. 0.2 microhartree error is much more reasonable. What you're describing confirms that the error is small. That is different from confirming correctness. Are you able to compare the numbers to some other implementation and show agreement? Is there some rare property that the exact scheme has, which you can numerically reproduce?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821194121:283,error,error,283,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821194121,3,['error'],['error']
Availability,"Indeed it does, for both libint and erd. _Thank you._ (I'm still getting a `WARNING: string truncated` error when run through CTest, but that won't have anything to do with the code. I'll work on it. Just a warning that the CI may still fail.). Do you want to cherry-pick my commits over from #605? Or shall I cherry-pick this last fix over to there, and merge from there?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-277381511:103,error,error,103,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-277381511,1,['error'],['error']
Availability,"Indeed, @JonathonMisiewicz , the terms coming from the derivatives of two-electron integrals are not trivially available or easy to cast into one-body form. However, the total terms (Nuclear, Core, Coulomb...) should, and that would be enough to make me happy. I do think that accessing these terms can be useful for the userbase. . Exposing the one-electron terms for Overlap etc. should also be possible, but this is both silly and shaky as a feature (i.e. not consistent across levels of theory) and sometimes a picky user should have to differentiate like a grown-up!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-796719993:111,avail,available,111,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-796719993,1,['avail'],['available']
Availability,"Indeed, that's the question to ask 😄 ; Varying `scf_type`, I only get failures for `disk_df` (`mem_df` and `pk` are fine), but again, at least for TDSCF, the problem is triggered by system size ☹️ Seems like a rabbit hole to me...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1604#issuecomment-800490149:70,failure,failures,70,https://psicode.org,https://github.com/psi4/psi4/issues/1604#issuecomment-800490149,1,['failure'],['failures']
Availability,"Independent of the options issues -- should something be patched/changed such that if the user/a program/etc passes a nonsense `num_frozen_docc`, the program gives a sensible error rather than segfaulting?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1193156348:175,error,error,175,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1193156348,1,['error'],['error']
Availability,"Input below gives error below. Should this happen, @psi-rking?. ```. molecule innocentlookingwater {; O 0.00000000 0.00000000 0.00000000; H 0.16863830 0.60275550 -0.70533100; H -0.76265500 0.37866910 0.40513500; O -0.18467200 2.33422480 0.31265570; H 0.48244850 1.84992580 0.77377280; H -0.08271400 3.22838610 0.58596930; }. set basis 6-31g. optimize('scf'); ```. ```; TORS::compute_val: unable to compute torsion value; Optimizer: Optimization failed!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/231:18,error,error,18,https://psicode.org,https://github.com/psi4/psi4/issues/231,1,['error'],['error']
Availability,"Input file:; ```; molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }; set {; basis roos-ano-dz; relativistic x2c; }; energy('scf'); ```; Error Info:; ```; Traceback (most recent call last):; File ""bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1917, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1241, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""lib/psi4/driver/procedures/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""lib/psi4/driver/p4util/python_helpers.py"", line 62, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 753, in construct; filename = cls.make_filename(basgbs); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1292, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```; This happens not only with roos-ano-dz basis, but also when a user-defined basis is used.; This problem is actually caused by line 726~730 in lib/psi4/driver/qcdb/libmintsbasisset.py. After line 730: seek['basis'] = [item for item in tmp if item != (None, None, None)], seek['basis'] have only one entry (None, None, BasisSet.decontract), which will cause basgbs == None at line 753.; Actually, after line 730, seek['basis'] should have an entry ('roos-ano-dz-decon', 'roos-ano-dz', BasisSet.decontract) for the program to run correctly. One possible solution is that add a guard:; ```; if basgbs == None:; continue; ```; before line 753: filename = cls.make_filename(basgbs)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/617:135,Error,Error,135,https://psicode.org,https://github.com/psi4/psi4/issues/617,1,['Error'],['Error']
Availability,"Inspired by a recent [forum post](http://forum.psicode.org/t/psi4-run-time-error-module-exec-content/1064/2). If there's an error in the user's input file, the traceback could be much clearer. In particular:. -; ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 30, in <module>; ```; is not a good indicator that the problem is input file side.; - When the problem is input file side, we give the user the line number of the post-processed input file. To see the post-processed input file the line number corresponds to, the user needs to supply the -v flag.; - The line numbering doesn't match up, according to my demo. See the forum topic for details, but Psi told me I had a line 30 error when there was no line 30. (The error was instead by line 29.). This is a ""put this up so I don't forget about it"" issue, not a thorough detailing of what should be done. As I recall, this was brought up at WWDC last November, but an issue was never posted.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1196:75,error,error-module-exec-content,75,https://psicode.org,https://github.com/psi4/psi4/issues/1196,4,['error'],"['error', 'error-module-exec-content']"
Availability,"Installing `psi4` via `conda`/`mamba` with:. ```; $ mamba create -n psi4-env -c conda-forge -c conda-forge/label/libint_dev psi4; ```; when the env directory is in a symlinked directory, such as on an HPC cluster where `/home` is a symlink, gives something like the following when attempting to run `psi4`:. ```; $ mamba activate psi4-env; $ psi4 --version; Traceback (most recent call last):; File ""/lila/home/dotson/mambaforge/envs/psi4-env/bin/psi4"", line 205, in <module>; with (psi4_module_loc / ""metadata.py"").open() as fp: verline = fp.readline(); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/lila/home/dotson/mambaforge/envs/psi4-env/lib/python3.12/pathlib.py"", line 1014, in open; return io.open(self, mode, buffering, encoding, errors, newline); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; FileNotFoundError: [Errno 2] No such file or directory: '/lila/home/conda/feedstock_root/build_artifacts/psi4_1698452227439/work/build/stage/lib/python3.12/site-packages/psi4/metadata.py'; ```. Working with @bennybp to troubleshoot, it appears that adding use of `.resolve()` to [these Path constructions](https://github.com/psi4/psi4/blob/e3d46319d3a11d571c1c362eeaf7f6641978515c/psi4/run_psi4.py#L129-L131) solves this issue. This resolves (heh) the mismatch that otherwise happens between the paths that were `.resolve()`ed and these that weren't, which causes problems further down.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3084:742,error,errors,742,https://psicode.org,https://github.com/psi4/psi4/issues/3084,2,"['down', 'error']","['down', 'errors']"
Availability,"Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents shoul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:4520,error,errors,4520,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['error'],['errors']
Availability,Integrals threading error messages,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/issues/596,1,['error'],['error']
Availability,Intel 2016.1.150 for the compilation failure reported above.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288583765:37,failure,failure,37,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288583765,1,['failure'],['failure']
Availability,"Interesting on OMP v2, OMP v5 is coming out soonish with much needed changes. Does the current code cause errors? I usually try to be verbose even with defaults and does the `size_t` cause issues?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419078896:106,error,errors,106,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419078896,1,['error'],['errors']
Availability,"Inversion branch got rebased to master today. It's going in Monday, so this'll be after inversion but before history re-write. I foresee a few minor conflicts, esp. with the docs, wrt inversion, but nothing big. It pains me to mislabel things, but I think you're right about the ROHF unrelaxed induction. Thanks for surrounding it with warnings. I think this is a first for warding against errors caused by bypassing the driver. Thanks for preparing the PR. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/479#issuecomment-253109899:390,error,errors,390,https://psicode.org,https://github.com/psi4/psi4/pull/479#issuecomment-253109899,1,['error'],['errors']
Availability,"Investigate DIIS/SAD memory requirements at low memory ranges. cc44 (that sets memory artificially low for other reasons) segfaults in parallel apparently during SAD. The DIIS rewrite is a possible trigger, as test was ok under these conditions at ` 2c5b6e3 - (master) Merge pull request #2191 from loriab/libxc514 (11 months ago) <Andy Simmonett>`. This error is unlikely to be hit under normal running conditions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2576:355,error,error,355,https://psicode.org,https://github.com/psi4/psi4/issues/2576,1,['error'],['error']
Availability,"Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed. fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896:322,down,downstream,322,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896,1,['down'],['downstream']
Availability,Is `psimrcc-fd-freq2` failing due to the error reported in #1521?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1522#issuecomment-460737948:41,error,error,41,https://psicode.org,https://github.com/psi4/psi4/pull/1522#issuecomment-460737948,1,['error'],['error']
Availability,"Is anyone presently working on this? I see it's gotten moved from milestone to milestone, just curious what priority level this is (or isn't). I've gotten some dimer interaction energy mismatches of >0.1 kcal/mol due to this bug in CP-corrected dimer interaction energies, though these errors are still << the error of DFT vs a CCSD(T)-level method, so it's not a big deal, just a little obnoxious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227:286,error,errors,286,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227,2,['error'],"['error', 'errors']"
Availability,Is ccCA-PS3 composite method available in PSI4?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2157:29,avail,available,29,https://psicode.org,https://github.com/psi4/psi4/issues/2157,1,['avail'],['available']
Availability,"Is it enough to suppress the can't-find-library, etc. output from when faulty externals preload? Or is their failure actually crashing the psi4 run? I like the `subprocess` ""which"" b/c it's closer to what the real run does and I can modify the path, but I can switch if need be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/656#issuecomment-288185174:71,fault,faulty,71,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-288185174,2,"['failure', 'fault']","['failure', 'faulty']"
Availability,Is it likely that this would also affect SAPT calculations where an ECP is used? I'm seeing some very odd errors and trying to track down what the issue is. I'm using 1.8.2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1825642004:106,error,errors,106,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1825642004,2,"['down', 'error']","['down', 'errors']"
Availability,"Is it possible to use `options=None` in the class definition? Then the options are mostly not required at all in the current commits above. Yes, I implemented the Client so that you always can calculate the current energy/force of the initialised molecule, which enables testing of the passed on configuration. When ipi is available, it will also be used for communicating back to the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806:323,avail,available,323,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806,1,['avail'],['available']
Availability,"Is it possible to write the geometry of a molecule in python via a function?. For example, I want to take an SDF, chop down to only the coordinates of the atoms, then plug those coordinates into ""psi4.geometry(...)"" all without leaving python. Currently, it looks like ""psi4.geometry(...)"" only takes comments as an input, so it's impossible to write the coordinates via a function. I know I can work around this by writing in bash and running a calculation on a stand alone input file, but this makes life more difficult because if I want to run multiple calculations I would either collect 10^x in/output files or write over preceding ones limiting me to non-parallel computing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2553:119,down,down,119,https://psicode.org,https://github.com/psi4/psi4/issues/2553,1,['down'],['down']
Availability,"Is that file also empty if you exit at line 486 of cctransort.cc? It's populated by the code above there. I don't see any TOC errors in the Valgrind outputs from Travis, so I don't think it's the same problem. It looks like there's an illegal instruction in the Clang code that GCC doesn't generate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178810449:126,error,errors,126,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178810449,1,['error'],['errors']
Availability,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126180494:178,avail,available,178,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494,5,"['avail', 'down', 'error']","['available', 'download', 'downloaded', 'error', 'errors']"
Availability,Is the second block missing occupation numbers or is that a copy error?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/584#issuecomment-275674287:65,error,error,65,https://psicode.org,https://github.com/psi4/psi4/pull/584#issuecomment-275674287,1,['error'],['error']
Availability,Is there a performance benefit over running the program in the command line? Nuclear forces / hessians i/o is inconsequential compared to the quantum chemistry part. Any savings would come from reusing checkpoint information for the Fock / density matrices... right?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615084584:202,checkpoint,checkpoint,202,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615084584,1,['checkpoint'],['checkpoint']
Availability,"Is there an advantage to doing. gradient('b3lyp'). instead of. set reference rks; set dft_functional b3lyp; gradient('scf')?. I guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:277,avail,available,277,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['avail'],['available']
Availability,"Is there any way to compute analytical nuclear gradients with solvent models? If none, any future plan to implement it?. It would be great if I could optimize a molecular geometry in a solvent by psi4 which has lots of excellent methods available.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2862:237,avail,available,237,https://psicode.org,https://github.com/psi4/psi4/issues/2862,1,['avail'],['available']
Availability,Is this Windows native or Windows WSL?. > WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; > but it is not a conda environment. Does the error persists if you delete the old environment or directory first?; Or use a different name than `p4env`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874812821:186,error,error,186,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874812821,1,['error'],['error']
Availability,Issue #786 also has a PSIO error.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789#issuecomment-325218257:27,error,error,27,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325218257,1,['error'],['error']
Availability,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:388,error,error,388,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339,1,['error'],['error']
Availability,"It appears Psi4 includes a hardcoded list of libxc functional names and ids in psi4/driver/procrouting/dft_funcs/libxc_xc_funcs.py. This should be eliminated in favor of using libxc's own routines for parsing the functionals: ```XC(functional_get_name)(func_id)``` and ```XC(functional_get_number)(str)```. This will eliminate the need to maintain a functional list in psi4, making all newly added libxc functionals available in Psi4 as soon as the underlying libxc library is updated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793:416,avail,available,416,https://psicode.org,https://github.com/psi4/psi4/issues/793,1,['avail'],['available']
Availability,It appears that the (experimental) prune functions break the recently (PR #2743) introduced/re-activated lebedev_mapping:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5112 . The pruning with functions reduces the number of points arbitrarily and then the attempt to infer the order from the number of points fails. Technically no entry is found in the std::map and an error or segfault occurs. This does **not** happen with the 'TREUTLER' or 'ROBUST' pruning as these reduce use well-defined orders for different regions.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2754:400,error,error,400,https://psicode.org,https://github.com/psi4/psi4/issues/2754,2,"['ROBUST', 'error']","['ROBUST', 'error']"
Availability,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:615,avail,available,615,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087,1,['avail'],['available']
Availability,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:162,error,error,162,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426,5,"['Error', 'error']","['Error', 'error']"
Availability,"It doesnt look like there is a huge impetus to close this down so were just going to leave `psi4/psi4private` up. However, note that these branches are no longer valid due to the many changes and history rewriting since they have been edited. All history `psi4private` history (but not the dev branches) will be public [here](https://github.com/psi4/psi4archive).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/508#issuecomment-305370267:58,down,down,58,https://psicode.org,https://github.com/psi4/psi4/issues/508#issuecomment-305370267,1,['down'],['down']
Availability,"It gives the diagnosis semi-gracefully, `Fatal Error: ndocc must be less than nvirt`. If you're wanting to run detci, add `set qc_module detci`. What behaviour are you looking for?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/546#issuecomment-266516539:47,Error,Error,47,https://psicode.org,https://github.com/psi4/psi4/issues/546#issuecomment-266516539,1,['Error'],['Error']
Availability,"It hits the troublesome geometry a couple optimization iterations in, so not guaranteed. But given that this error hasn't popped up for 10 years, micro-wiggle is a good bet. btw, `conda install psi4 -c psi4/label/agg` will get you a working `-ng`-compiler package at the moment. Though that's my sandbox channel and so the latest package mayn't always be working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380151298:109,error,error,109,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380151298,1,['error'],['error']
Availability,"It is also worth noting that the SCF is wrong. Although, I cannot reproduce the SCF error on my machine. Can anyone else?. > On Jan 8, 2016, at 4:54 PM, ssh2 notifications@github.com wrote:; > ; > If really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; > (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/204#issuecomment-170138644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170140825:84,error,error,84,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170140825,2,['error'],['error']
Availability,"It is printed... I know which basis set I use, but would just like upfront; to make my chargemol job-control file ready for my basis set choise. Thank; you all!. On Tue, 14 Aug 2018, 15.59 David Sherrill, <notifications@github.com> wrote:. > If we don't print the number of implied core electrons in the output; > somewhere when using an ECP basis, it wouldn't be a bad idea to do so.; >; > On Tue, Aug 14, 2018 at 9:56 AM Peter Kraus <notifications@github.com>; > wrote:; >; > > Ideally, you should know what kind of basis set you're using, as you're; > > presumably going to cite it in your work; the details about the number of; > > core e-'s treated as effective potentials will be included there. There; > > are also all-electron basis sets available for almost any element; some; > of; > > them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an; > ECP; > > in the => Loading Basis Set <= section, and the details are printed later; > > on under ==> Primary Basis <==.; > >; > > As for the question of 28 vs 36 electrons: the first 28 electrons are the; > > 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell.; > > The additional 8 electrons you're thinking about are from the 4th period; > > shells, where the 4d10 part is in your 5th valence shell - so you don't; > > really want to replace any of those with a potential. (At least that's my; > > rather limited understanding.); > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/1113#issuecomment-412880178>, or; > mute; > > the thread; > > <; > https://github.com/notifications/unsubscribe-auth/AC9Qdo2cyTQSSl9yOfKzl_lCPspYyi6jks5uQtbpgaJpZM4VoV4l; > >; > > .; > >; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1113#issuecomment-412881311>, or mute; > the thread; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315:746,avail,available,746,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315,1,['avail'],['available']
Availability,It is running on my system as I write this. One thing to note is that the error can occur very early on on our system. With a fairly high variability. So I do not think it is memory creeping up. It looks more like a memory allocation amount that is overwritten by a wrong pointer operation or something like that.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481894673:74,error,error,74,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481894673,1,['error'],['error']
Availability,It is still gives an error:; ```; Error in atexit._run_exitfuncs:; PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pytest_output.dat'; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1276#issuecomment-430541097:21,error,error,21,https://psicode.org,https://github.com/psi4/psi4/pull/1276#issuecomment-430541097,2,"['Error', 'error']","['Error', 'error']"
Availability,"It is still possible to create the ""ADIIS minimization failed"" error with the input file below (only changes to the above are correcting the coordinates' units and changing VV10 parameters), but I imagine this is because the values for (b,c) are now so extreme that it's no longer physical. . ```; set num_frozen_docc 12; set {; dft_vv10_b 0.01; dft_vv10_c 0.01; }; set {; basis def2-tzvppd; guess sad; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; set {; wcombine False; }; molecule mol {; 0 1; C -0.49280516 -1.34928891 1.93251153; C 0.84810575 -1.10523761 2.10967679; C 1.26836829 0.29972931 2.0863085 ; C 0.33631373 1.28766879 2.06605249; C -1.0593442 1.02559068 1.99570094; C -1.46753033 -0.25217665 2.08599284; H -0.8366212 -2.3512709 1.85597882; H 1.65258993 -1.81487491 2.11488685; H 2.30066607 0.63566923 1.9769963 ; H 0.6336208 2.42220895 1.85607739; H -1.79244121 1.74937993 2.11242291; H -2.68362171 -0.43063144 2.07823169; C -0.8151077 -1.09341082 -1.9012646 ; C -1.16492239 0.31096713 -2.00016775; C -0.29873999 1.38082172 -1.68134071; C 0.91640784 1.08513712 -1.22645142; C 1.30080416 -0.26891269 -1.09865272; C 0.4588141 -1.39278819 -1.38251659; H -1.3834194 -1.9058937 -2.16792859; H -2.20012949 0.38972302 -2.19448924; H -0.48864896 2.51613661 -1.54574084; H 1.66750317 1.87858355 -1.04866167; H 2.23050409 -0.51844162 -0.70388782; H 0.9799473 -2.25156744 -1.27023577; units angstrom; no_reorient; no_com; symmetry c1; }; mol.update_geometry(); e, wf = energy('wb97m-v',return_wfn=True,); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192984871:63,error,error,63,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192984871,2,"['error', 'robust']","['error', 'robust']"
Availability,"It looks like I forgot to add `CMAKE_BUILD_PARALLEL_LEVEL=2` to the docs CI. I learned that when a Ninja build of Psi4 gives up in the early 200s of 1200 files, it's because it's out of memory on CI nodes when compiling libmints. Ninja automatically oversubscribes the available cores, so throttling down to allocated cores helps. Docs were recently converted to Ninja CMake generator (from Makefiles CMake generator).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634:269,avail,available,269,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634,4,"['avail', 'down']","['available', 'down']"
Availability,It looks like Psi is providing wrappers for `dtzrqf` but not actually using the function (unless some downstream plugins are using it). So shouldn't be too hard. Thanks for the notice!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547:102,down,downstream,102,https://psicode.org,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547,1,['down'],['downstream']
Availability,"It looks like an interesting optimization problem, and a memory error. I; will take a detailed look at it when I get back from vacation next week. On Thu, Jul 30, 2015 at 8:11 AM, Lori A. Burns notifications@github.com; wrote:. > Yes, I agree it looks messed up. Added the further info in last post for; > @psi-rking https://github.com/psi-rking; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-126342063.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-126509903:64,error,error,64,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126509903,1,['error'],['error']
Availability,"It looks like the entire `ERISieve` class is marked as `PSI_API`, so AFAIK that is giving downstream the permission to rely on both the object and all of its public members being a stable API, not just a few functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527938536:90,down,downstream,90,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527938536,1,['down'],['downstream']
Availability,"It looks like the numpy/scipy issue on Azure has healed with upstream packages without intervention here, so closing. otoh, GHA Linux just hit our old friend CFI error during compile ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2702#issuecomment-1227384055:162,error,error,162,https://psicode.org,https://github.com/psi4/psi4/pull/2702#issuecomment-1227384055,1,['error'],['error']
Availability,It looks like there's no error in Psi here. Happy to reopen if I'm mistaken.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-869220808:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-869220808,1,['error'],['error']
Availability,"It looks like those changes did the trick. The tests passed fairly quickly on travis, but i'm not sure what the timings were like before so i don't know how much impact the header refactoring had. When you think this one's good, could you ping us on Slack, please? The seg fault seems to be hitting a few people so it would be good to get it in quickly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444294885:239,ping,ping,239,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444294885,2,"['fault', 'ping']","['fault', 'ping']"
Availability,"It looks like yesterday's PR was intended to address only some of the reviewer comments. Ping me again when you've addressed everything, and I'll give it another look.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-938639822:89,Ping,Ping,89,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-938639822,1,['Ping'],['Ping']
Availability,It means part of the coordinate input is not understood.; In this case H6 misses a decimal point in the z coordinate. Not sure if the error could be made more explicit by highlighting the specific line(s).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910161049:134,error,error,134,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910161049,1,['error'],['error']
Availability,It might well be you've downloaded the stable version (psi4 version 1.1) and the mid-bond functionality might have been introduced afterwards (so it's available only in the dev releases). What does `psi4 --version` return?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373018664:24,down,downloaded,24,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373018664,2,"['avail', 'down']","['available', 'downloaded']"
Availability,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307875382:203,redundant,redundant,203,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382,1,['redundant'],['redundant']
Availability,"It seems like the kernel is not running in the env it is suposed to. When I run `jupyter kernelspec list`, I get; ```; File ""C:\Users\Usuario\AppData\Local\Temp/ipykernel_13636/728349862.py"", line 1; jupyter kernelspec list; ```; But when I check the jupyter kernel spec list, ; ```; (base) C:\Users\Usuario>jupyter kernelspec list; Available kernels:; p4env C:\Users\Usuario\AppData\Roaming\jupyter\kernels\p4env; python3 C:\Users\Usuario\miniconda3\share\jupyter\kernels\python3; ```; So the path to the kernel in the env should be pointing to `C:\Users\Usuario\AppData\Roaming\jupyter\kernels\p4env`, or something?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-948193452:333,Avail,Available,333,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-948193452,1,['Avail'],['Available']
Availability,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-261257394:1005,Error,Error,1005,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394,4,"['Error', 'error']","['Error', 'error']"
Availability,"It seems that the process of creating the geometry was at fault—in particular, in a production run, I created molecules with the ""units angstrom"" tag, and then called `molecule.set_full_geometry(xyzs)` on each of them. This seems to have had the effect of assuming that the coordinates were in bohr, then converting them to angstroms (dividing by 1.889). This, I think, produces the rough factor of 2 difference observed. I had missed that set_full_geometry assumes that the coordinates are in Bohr. I will try rerunning the fixed version in production to see if I end up with any similar errors. It takes a rather long time to converge (currently at 35 iterations; it's not converged yet), and it is quite low in energy—currently, -905 Hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192972026:58,fault,fault,58,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192972026,2,"['error', 'fault']","['errors', 'fault']"
Availability,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222313007:178,down,down,178,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007,1,['down'],['down']
Availability,"It seems unlikely a numpy interface would change. You might try running one of the tests that runs `fsapt.py` internally like `fsapt-terms`. You'll have to move the fsapt.py file to the launch directory or hardwire its path in the test. If your numpy error shows up there, I'd believe numpy or env problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397:251,error,error,251,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397,1,['error'],['error']
Availability,"It should be noted that the keywords did change slightly and all tests had to be tweaked. I am guessing that the Psi4 and ChemPS2 binary versions are out of sync at the moment. Ill look into this today. Cheers,; Daniel Smith. > On May 31, 2016, at 7:51 AM, Hassenky notifications@github.com wrote:; > ; > The DMRG-natural-orbital calculation also has the same error.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/issues/384#issuecomment-222666388, or mute the thread https://github.com/notifications/unsubscribe/ABsBcX6MG6G0p8O-MC63teMY64rE_uWKks5qHCDcgaJpZM4IjFna.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222667765:360,error,error,360,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222667765,1,['error'],['error']
Availability,"It shouldn't ""print a stern warning."" It should raise an error. You should never ever have two atoms that are at the same point in space within symmetry tolerance. As for qcdb, that's a @loriab question. I can never remember why we have both.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064048522:57,error,error,57,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064048522,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"It triggers just fine, but gives a python error because I did not handle the dict object.; The `if (name.lower() == 'hf'):` does not work then. I plan to fix it in about 2 weeks when going to a conference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1188#issuecomment-417863698:42,error,error,42,https://psicode.org,https://github.com/psi4/psi4/issues/1188#issuecomment-417863698,1,['error'],['error']
Availability,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194954608:1275,error,error,1275,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608,2,"['Error', 'error']","['Error', 'error']"
Availability,"It was revealed that single point can behave a little differently between `set basis bas; energy(mtd)` and `energy(mtd/bas)` calls. (copied from #2575). https://github.com/psi4/psi4/pull/2575#discussion_r876092414. Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. So after DDD, the two approaches behave the same. But psio errors aren't user friendly. Should we reconsider whether to auto clean after an energy() call? Advanced users would need to save more files explicitly. Maybe should clean() _before_ an energy() call.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2583:709,error,errors,709,https://psicode.org,https://github.com/psi4/psi4/issues/2583,2,['error'],['errors']
Availability,"It was tested with higher angular momentum, which is why I’m confused. Lori and I sat down at the last hackathon to try and find problem cases, but couldn’t reproduce the error. What I’m really struggling with is the origin of the importance of atom order in the test provided in #901. It’s probably related to the fact that I only take derivatives on center A and use translational invariance relations to get the rest, but my flu addled brain is failing me right now. For the same reason, yes, this took me a while to track down. Oh well, hopefully this is the last bug we ever have in the hessians. Or anywhere... > On Jan 27, 2018, at 8:16 PM, Daniel Smith <notifications@github.com> wrote:; > ; > @dgasmith commented on this pull request.; > ; > Awesome.; > ; > In psi4/src/psi4/libmints/overlap.cc:; > ; > > @@ -336,7 +336,7 @@ void OverlapInt::compute_pair_deriv2(const GaussianShell& s1, const GaussianShel; > buffer_[(0*size)+ao12] += (4.0*a1*a1*x[l1+2][l2]*y[m1][m2]*z[n1][n2] -; > 2.0*a1*(2*l1+1)*x[l1][l2]*y[m1][m2]*z[n1][n2]) * over_pf;; > if (l1 > 1); > Hmm, I think you just never tested anything beyond P orbitals. This if statement will not be hit without D or higher.; > ; > I wish we could put weights on commits so that we could crank this one up. Three lines changed, but I am sure quite a bit of time looking into it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361030347:86,down,down,86,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361030347,3,"['down', 'error']","['down', 'error']"
Availability,"It works for me locally, but you're right that the `==` doesn't make for a robust test. I'll improve that -- thanks for the notice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3014#issuecomment-1636633947:75,robust,robust,75,https://psicode.org,https://github.com/psi4/psi4/issues/3014#issuecomment-1636633947,1,['robust'],['robust']
Availability,"It would be nice if you could add the code. I don't need to show up as a contributor (as the changes are based on code in the autocmake github repo). But can you please wait before adding the code, until we could verify that the compilation with OpenBLAS works. After getting the error, I have run make a second time and then I did not get the error any more. I have therefore deleted the installation and redid it from scratch. This time, I am running make serially. The compilation is still ongoing. I will provide you an update once it finished and after having verified that the code is properly linked against OpenBLAS. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274828765:280,error,error,280,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274828765,2,['error'],['error']
Availability,"It's been noticed that a coefficient has changed in EMSL (a polarization D 6-311G(2d,p) for Fluorine from 2.396 to 3.5) since the psi basis library was formed. It would be good to know if there are others. 1) go to https://bse.pnl.gov/bse/portal and filter on ""polarization""; 2) for the 7 partial basis set starting ""6-31"" or ""Pople"", download them in Gaussian94 format (if their ""Last Modified"" date is after August 2010).; 3) For files in https://github.com/psi4/psi4/tree/master/psi4/share/psi4/basis/primitives starting with ""polarization-631"", find the analogous polarization pattern (e.g., EMSL ""6-311G* Polarization"" matches https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/primitives/polarization-6311g-_d_.gbs) and through `diff` or the script `diff_gbs.py`, check if there are any changes Psi4 needs to make.; - Note: there's more files in basis/primitives than from EMSL. Don't worry about the cross-terms like (3df, p).; - Note: because of how the files are structures, there may be differences of H/He present or absent. So long as exponents/coefficients aren't changing, don't worry about it.; 4) Report changed coeff/exp back here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1058:335,down,download,335,https://psicode.org,https://github.com/psi4/psi4/issues/1058,1,['down'],['download']
Availability,"It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`. There's some additional notes in #2965 in case helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430:315,avail,available,315,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430,1,['avail'],['available']
Availability,"It's not _really_ a Psi4 error message. Psi uses [QCElemental](https://github.com/MolSSI/QCElemental) for molecule parsing. It's QCElemental that raises the difficult error message, and it bubbles up through Psi. As such, I'm inclined to say this issue belongs on QCElemental's repo, not Psi's. @loriab is involved with both and is better equipped to judge where this belongs and whether it's even possible to identify the problematic line in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508,2,['error'],['error']
Availability,"It's not clear to me that ""re-request review"" did anything, so pinging @davpoolechem again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1031453049:63,ping,pinging,63,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1031453049,2,['ping'],['pinging']
Availability,"It's not much advertised, but the cc* modules can do some density fitting. In particular, it's found that:; * df-cc2 rhf gradients run and equal findif gradients. #2137; * df-ccsd rhf gradients run and differ from conventional by <1.e-6 . Jonathon finds that not all terms make use of DF and not hooked up to DF gradient tech.; * df-ccsd rhf energies run and differ from fnocc by 2e-7 for correlation energy (inconsistent ref energy so printing and qcvars differ more); * df-ccsd uhf energies print NYI msg; * df-ccsd rohf energies run and are plausible compared to conventional. But plumbing-wise, these aren't ready to activate:; * ccenergy vs. (fnocc, dfocc) choose a different reference. ccenergy uses CONV as the ints are needed anyways. others choose DF since that's the SCF_TYPE setting; * is DF used thoroughly enough to match DF-only implementations? if not, is it used in the expensive places so that it's worth calling instead of the reliable CONV?; * does df-rohf need validation and if so, from where?. Current state of accessibility for DF CCENERGY is that CCSD has been barred by it being a managed method, while CC2 could be accessed by turning on `cc_type=df`. Probably any DF in CCENERGY is accessible through `energy(""ccenergy"")` with a lot of manual option setting. When I converted CC2 to a managed method (locally), that broke the DF-CC2 gradient test https://github.com/psi4/psi4/blob/master/tests/pytests/test_gradients.py#L41 and reminded me that DF in CCENERGY was semi-active. For now, I plan to add an escape clause to the CC2 managed gradient so that the test can run but otherwise leave DF CCENERGY inaccessible and out of stdsuite and capabilities tables.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2710:945,reliab,reliable,945,https://psicode.org,https://github.com/psi4/psi4/issues/2710,1,['reliab'],['reliable']
Availability,"It's not too complicated. The below is equivalent and slightly preferred. ```; set {; basis sto-3g # minimal orbital basis set; df_scf_guess false # usually, psi4 saves time by doing most of the HF iterations using density fitting then only a few with the full integrals. Since fitting basis sets aren't available, this skips the density fitting iterations.; scf_type direct # selects a non-density-fitting algorithm for the HF; guess sad # a better guess to start the HF iterations; sad is nearly always the best guess; mp2_type conv # selects a non-density-fitting algorithm for the MP2; }; energy('mp2'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144769489:304,avail,available,304,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144769489,1,['avail'],['available']
Availability,"It's on master already, you can just clone from github. On Dec 17, 2017 16:38, ""João M. Damas"" <notifications@github.com> wrote:. > thanks @robertodr <https://github.com/robertodr> and all. In which; > version will this be available? @raimis <https://github.com/raimis>, we; > should change our code when it's available.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/818#issuecomment-352287559>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADiXEcgYF_RXeb88yNyaVqEJorcDgpuwks5tBYnJgaJpZM4PyztD>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-352470152:223,avail,available,223,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-352470152,2,['avail'],['available']
Availability,"It's possible recent changes have introduced errors with the v15 Intel compilers. See, e.g.,. https://testboard.org/cdash/buildSummary.php?buildid=24529. The overall dashboard is here, and you can see that all instances of the v15 builds have started dying in libscfsolver/hf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/155#issuecomment-126317935:45,error,errors,45,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-126317935,1,['error'],['errors']
Availability,"It's possible the problem is with the DNS servers. It happens pretty reliably if I google psi4 and click on the top hit. It happens on my desktop and mobile, including if I disconnect from the wireless and use T-Mobile's network.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-209994658:69,reliab,reliably,69,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-209994658,1,['reliab'],['reliably']
Availability,"It's sort of hard to follow the code. You should remove all the stuff about charges; the algorithm needs to do the memory estimate based on the actual occupied orbitals. You should separate the Coulomb and exchange bits, since Coulomb can be computed as a dot product, while exchange is a matrix multiplication. Range-separated exchange should be supported. You also can't assume that you can fit all the integrals into memory in a big system; you need to batch over the occupied orbitals based on the amount of memory that's available. . Please check Weigend's paper on how to do RI-HF optimally.; https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040#issuecomment-733280957:526,avail,available,526,https://psicode.org,https://github.com/psi4/psi4/pull/2040#issuecomment-733280957,1,['avail'],['available']
Availability,"It's very minor and does nothing else but dumping that JSON file. I set it to `ON` without introducing an option also because having the file always available might encourage use of `clang-tidy`. And to actually answer your question, the file is a little short of 1 megabyte. :sweat_smile:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1312#issuecomment-433149675:149,avail,available,149,https://psicode.org,https://github.com/psi4/psi4/pull/1312#issuecomment-433149675,1,['avail'],['available']
Availability,"It’s running compare_cubes in approx psi4/driver/p4utils/? . I think it’s doing a numpy value diff, so maybe print out and post. We just tightened down the tolerances last fall, so they may need loosening. If all the errors are at the top or bottom, that’s more concerning. . Can alternatively just command line diff wrt the reference cube.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404234491:147,down,down,147,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404234491,3,"['down', 'error', 'toler']","['down', 'errors', 'tolerances']"
Availability,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235144008:30,error,error,30,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008,2,"['error', 'failure']","['error', 'failure']"
Availability,Just a general git point: This one and #534 are tied to the same branch history so neither should be rebased. Its one of the downsides of a rebase team policy. Merges are fine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/527#issuecomment-263865276:125,down,downsides,125,https://psicode.org,https://github.com/psi4/psi4/pull/527#issuecomment-263865276,1,['down'],['downsides']
Availability,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278105814:89,error,error,89,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814,2,['error'],"['error', 'errors']"
Availability,"Just a note to confirm, that error looks like a mismatch between an old version of Psi4 and new version of the test. Midbonds were added fairly recently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373023252:29,error,error,29,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373023252,1,['error'],['error']
Availability,"Just a quick update - I'm making a little bit of progress. I hacked my local branch to get valgrind info from the test machines. Here's the pertinent section of the resulting error:. `vex amd64->IR: unhandled instruction bytes: 0xF 0xB 0x89 0xD1 0x48 0x89 0x45 0xC8; ==20864== valgrind: Unrecognised instruction at address 0x22fd55c.; ==20864== at 0x22FD55C: psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::string, std::string, char const*) (buf4_sort.cc:1977); ==20864== by 0x191AEB0: psi::cctransort::sort_tei_rhf(boost::shared_ptr<psi::PSIO>, int) (sort_tei_rhf.cc:35); ==20864== by 0x18F8C81: psi::cctransort::cctransort(psi::Options&) (cctransort.cc:472); ==20864== by 0x1434733: py_psi_cctransort() (python.cc:497); ==20864== by 0x144C47D: _object* boost::python::detail::invoke<boost::python::to_python_value<double const&>, double (*)()>(boost::python::detail::invoke_tag_<false, false>, boost::python::to_python_value<double const&> const&, double (*&)()) (invoke.hpp:75)`. I'm digging around now, because I can't see anything obviously wrong in those lines of code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178350753:175,error,error,175,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178350753,1,['error'],['error']
Availability,"Just be aware that there aren't fitting basis sets available for 6Z & 7Z orbital basis sets (https://github.com/psi4/psi4/issues/144), so switching to df-oo won't really work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-190770304:51,avail,available,51,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-190770304,1,['avail'],['available']
Availability,"Just like the error message warns, SCF is not set up to restart from a wavefunction because there's need-to-project?, need-to-orthogonalize?, etc. issues that have to be handled. The wavefunction passing is set up to the level that the old `bypass_scf` kwarg handled. That is, a _completed_ scf_wfn can be passed into CC, CI, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419#issuecomment-227828506:14,error,error,14,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227828506,1,['error'],['error']
Availability,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330583293:680,error,error,680,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293,2,['error'],['error']
Availability,"Just to document this here as well, there's no convergence issue with any of the guesses with the default SCF options: SAD converges in 1+16 iterations, Huckel in 18. However, SAD lands on a saddle point, Huckel does not. The problem is the SCF after the stability analysis in SAD: the DIIS error starts out small at 8e-4, dips down, but soon comes back up and plateaus at 6e-4 all the while the energy converges. My first bet would be that something screws up orbital orthonormality in the stability code for UHF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-548850482:291,error,error,291,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-548850482,2,"['down', 'error']","['down', 'error']"
Availability,"Just to make sure I understand how the library works:; During the installation procedure, there will be a `trex.json` file added. The contents of this file change the _groups_ and _variables available within each group_. (For Psi devs, this is equivalent to libpsio file and libpsio entry name.) So by editing the file and then re-compiling (`make`, `make check` and then `make install`?), we can edit the entries available to `trexio`. Is that all right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466:191,avail,available,191,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466,2,['avail'],['available']
Availability,"Just try typing `conda list` on the command line. If that gives you an error, show us the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3109#issuecomment-1856789682:71,error,error,71,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856789682,2,['error'],['error']
Availability,"Just watching Travis it looks like we get a mix of old and new nodes with a variety of computational loads. I kind of would like to do Python 3.5 across the board and then say gcc 4.9, Python 2.7. So that we can isolate between Python errors and compiler errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/510#issuecomment-259569411:235,error,errors,235,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259569411,2,['error'],['errors']
Availability,"Justin, can you send me the input where you disabled DKH? An SCF read of converged orbitals from the same molecule should never provide such a bad guess that you get an energy error on the order of Hartrees. Even if it's a naughty molecule like FeH. This points to an error in the way that PSI4 is reading orbitals for the set scf guess read procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899#issuecomment-360834609:176,error,error,176,https://psicode.org,https://github.com/psi4/psi4/issues/899#issuecomment-360834609,2,['error'],['error']
Availability,"KE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:1424,Error,Error,1424,https://psicode.org,https://github.com/psi4/psi4/issues/1426,1,['Error'],['Error']
Availability,Keep _default_psio_manager_ alive for Process::Environment,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1933:28,alive,alive,28,https://psicode.org,https://github.com/psi4/psi4/pull/1933,1,['alive'],['alive']
Availability,"Keep in mind that the optimizer (at least this one!) is not trying to; overcome any barriers except possibly one in the 'fixed coordinate'; direction. It's not an IRC computation or a global search. It's trying to; go downhill in all other directions, and it is subject to all the strange; behavior (discontinuities, etc.) present in scans by constrained; optimizations. If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. On Thu, Mar 23, 2017 at 7:25 PM, Andy Simmonett <notifications@github.com>; wrote:. > This <https://github.com/psi4/psi4/files/866534/torsion.pdf> is the sort; > of geometry I get, which is very reasonable looking. If you compare the; > 'good' and 'bad' geometries, is the different in the orientation of the; > methyl hydrogens? If so, it's likely that your starting guess has them; > oriented with steric clashes, but the barrier to rotation is too high for; > the optimizer to be able to overcome.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288899587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTEGE7UVrDtnMjCBGDwRX1AuB-aYZks5row2IgaJpZM4Mbq9X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288900538:218,down,downhill,218,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288900538,1,['down'],['downhill']
Availability,"Kicking out Boost and libint has substantially reduced our compile time. However, we're still running up against Travis-CI's 50 min max (~10 min of that are in tests). So, here's the facts. Any suggestions for reducing compile time welcome. There are thoughts in the air of moving `bin`s to external projects, where they can be tested separately, but less drastic suggestions preferred. ```; psi4 5216.132 100%; ---------------------------------; dfocc 490.372 9.4%; ccdensity 489.191 9.4%; mints 327.399 6.3%; dpd 321.392 6.2%; psimrcc 297.722 5.7%; core 285.259 5.5%; ccenergy 242.782 4.7%; occ 227.323 4.4%; cclambda 167.325 3.2%; dcft 156.295 3.0%; cceom 156.036 3.0%; ccresponse 137.6 2.6%; fock 136.653 2.6%; sapt_solver 125.653 2.4%; detci 123.652 2.4%; optking 118.63 2.3%; ccsort 118.255 2.3%; cchbar 107.15 2.1%; mcscf 106.969 2.1%; cctriple 91.443 1.8%; iwl 90.624 1.7%; fnocc 77.272 1.5%; qt 69.421 1.3%; functional 65.807 1.3%; psio 59.924 1.1%; scf_solver 57.751 1.1%; trans 51.991 1.0%; cctransort 49.189 0.9%; ciomr 47.597 0.9%; 3index 45.95 0.9%; fisapt 39.127 0.8%; adc 37.382 0.7%; transqt2 34.06 0.7%; thce 33.156 0.6%; findif 31.708 0.6%; scfgrad 30.889 0.6%; moinfo 26.539 0.5%; parallel 23.011 0.4%; dfmp2 19.045 0.4%; options 12.27 0.2%; psi4util 11.808 0.2%; plugin 10.044 0.2%; cubeprop 9.776 0.2%; efp_solver 9.012 0.2%; diis 7.406 0.1%; dmrg 7.377 0.1%; mrcc 6.772 0.1%; gdma_interface 4.447 0.1%; disp 4.221 0.1%; sapt 4.092 0.1%; cholesky 3.863 0.1%; thermo 3.677 0.1%; efp_interface 3.21 0.1%; filesystem 0.613 0.0%. ```. Note to future (http://stackoverflow.com/questions/5962285/cmake-compilation-statistics):. ```; >>> cat time-icpc; #!/bin/bash; { time /path/to/icpc ""$@""; } 2> >(cat <(echo ""/path/to/icpc $@"") - >> /path/to/timeresults.txt); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525:1721,echo,echo,1721,https://psicode.org,https://github.com/psi4/psi4/issues/525,1,['echo'],['echo']
Availability,"Kind of an interesting edge case, since the SOCC orbitals area always assumed to be of the same spin the sorting breaks the multiplicity. This could be widely considered a ""bug"" as the sorting *should* be aware of this in a perfect world. At the same time, CUHF for closed shell doesn't make a ton of sense so perhaps the other way to do it is have CUHF complain if a closed shell molecule is given? We can likely find similar errors when running UHF in singlet mode. Some logic to switch between RHF and UHF can be added if a user doesnt specify a reference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-307631551:427,error,errors,427,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307631551,1,['error'],['errors']
Availability,"Kind of looks like your convergence is getting tight enough that some sort of denominator is getting small enough for instabilities (not sure how this is solved, but alpha/beta in CG for examples). This is probably exacerbated by the very loose integral tolerance. @amjames Any comments?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-301266040:254,toler,tolerance,254,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-301266040,1,['toler'],['tolerance']
Availability,"LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_filesystem.so -DBoost_PYTHON_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_python.so -DBoost_REGEX_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_regex.so -DBoost_SERIALIZATION_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_serialization.so -DBoost_SYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_system.so -DBoost_THREAD_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_thread.so -DBoost_TIMER_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_timer.so /scratch/appssf/psi4-1.0. -- BLAS: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); -- LAPACK: using explit library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:6824,Error,Error,6824,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['Error'],['Error']
Availability,"LNK2019: 无法解析的外部符号 dggesx，该符号在函数 ""int __cdecl psi::C_DGGESX(char,char,char,char,int,double *,int,double *,int,int *,double *,double *,double *,double *,int,double *,int,double *,double *,double *,int,int *,int)"" (?C_DGGESX@psi@@YAHDDDDHPEANH0HPEAH0000H0H000H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggev，该符号在函数 ""int __cdecl psi::C_DGEGV(char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DGEGV@psi@@YAHDDHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggevx，该符号在函数 ""int __cdecl psi::C_DGGEVX(char,char,char,char,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,int *,int *,double *,double *,double *,double *,double *,double *,double *,int,int *)"" (?C_DGGEVX@psi@@YAHDDDDHPEANH0H0000H0HPEAH10000000H1@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggglm，该符号在函数 ""int __cdecl psi::C_DGGGLM(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGGLM@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgghrd，该符号在函数 ""int __cdecl psi::C_DGGHRD(char,char,int,int,int,double *,int,double *,int,double *,int,double *,int)"" (?C_DGGHRD@psi@@YAHDDHHHPEANH0H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgglse，该符号在函数 ""int __cdecl psi::C_DGGLSE(int,int,int,double *,int,double *,int,double *,double *,double *,double *,int)"" (?C_DGGLSE@psi@@YAHHHHPEANH0H0000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggqrf，该符号在函数 ""int __cdecl psi::C_DGGQRF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGQRF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dggrqf，该符号在函数 ""int __cdecl psi::C_DGGRQF(int,int,int,double *,int,double *,double *,int,double *,double *,int)"" (?C_DGGRQF@psi@@YAHHHHPEANH00H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : err",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:24554,error,error,24554,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"Last time we tried with py3.8 some dependencies were not yet available for python 3.8. Might be solved now. Adcc should not be a problem, since with pypi packages 3.8 is already supported.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598880741:61,avail,available,61,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598880741,1,['avail'],['available']
Availability,"Launching GDMA calculations from a python script or python interpreter causes a sudden crash. Ouptu files indicates that previous steps finish with no eroor and a GDMA input file is created, as well as a log file (fort.52, attached) with this message: `Could not open psi4 output for writing.unit = 51`. On the contrary, launching the same calculations with the psi4 executable does not produce any error. This bug was originally reported and discussed on the [psi4 forum](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126?u=flolangenfeld). The bug can be reproduce using the sample gdma h2o.dat file and its [python equivalent](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126/4?u=flolangenfeld)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1334:399,error,error,399,https://psicode.org,https://github.com/psi4/psi4/issues/1334,1,['error'],['error']
Availability,"Let me know if I can help here, it would be great to get something like this in. The iterations are now in Python so implementing a new solver should be much more accessible to new developers as well. This could be a fun project to tackle... . Feel free to ping someone to add occupation smearing to the density formation which would likely need to happen C side, should be very straightforward to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-492649900:257,ping,ping,257,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492649900,1,['ping'],['ping']
Availability,"Let me make sure I have this right: you're plotting energy errors on the order of 1e-7, but you only converged the energy to 1e-6? If so, then your plots are pure noise. If not, then what am I getting wrong?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821212583:59,error,errors,59,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821212583,1,['error'],['errors']
Availability,"Let me rephrase: I tried to make my own wavefunction file, but when I succeed in that, I get a different error when setting up the active space, likely because the number of MOs in the basis set I'm picking isn't consistent with the active space defined in the input file. Anyways, this bug is the result of the exact same deep design issue in the Wavefunction class that led to #1851. **I don't know what the Wavefunction ""contract"" is, and wavefunction serialization disagrees about what the contract is with every single module that's having these problems.**. #1851 : Some modules assume that every wavefunction must have a PSIO object. Wavefunction serialization disagrees.; bsenjean's original report : The JK object constructors force callers to pass in an auxiliary basis set, even when the JK object will never use it. `detci` responds by assuming that every reference wavefunction must have a `DF_BASIS_SCF` set. Wavefunction serialization disagrees. Holger's previous analysis is right on for the mechanism of this.; Holger's new report : The properties code [assumes that every wavefunction has a matrix factory](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L88) and uses that to create an [OperatorSymmetry object](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1256). Wavefunction serialization disagrees. It doesn't attach a matrix factory, so libmints is left trying to create matrices out of `nullptr`. That segmentation faults, unsurprisingly. I don't have time to deal with these, because I have the gradient code to worry about, and I'm sure nobody else has time because _getting 1.4 out soon is kind of important_. I will say that this is not a good state of affairs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041:105,error,error,105,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041,2,"['error', 'fault']","['error', 'faults']"
Availability,Libthce seg faults on generation of DF integrals for porphyrin radical calculation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157:12,fault,faults,12,https://psicode.org,https://github.com/psi4/psi4/issues/157,1,['fault'],['faults']
Availability,"Looking at the CI failure logs, it seems that the issue is with the package ""Pint"":. `ImportError: cannot import name 'quantity' from 'pint' (C:\Miniconda\envs\baseenv\lib\site-packages\pint\__init__.py). This particular error seems to commonly show up for the failed CI tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883:18,failure,failure,18,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883,2,"['error', 'failure']","['error', 'failure']"
Availability,"Looking at the Window's error message, I think libmint's integral.cc needs to use C++14, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298:24,error,error,24,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298,1,['error'],['error']
Availability,"Looking at the commit history, this was added by DGAS years ago as part of a commit that suffered scope creep and was never actually used for anything. Let's check to see if anybody uses it downstream, but if not, I say remove it until we have an actual use case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-966542107:190,down,downstream,190,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966542107,1,['down'],['downstream']
Availability,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:650,reliab,reliably,650,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475,4,['reliab'],"['reliable', 'reliably']"
Availability,"Looking great, @andysim! Gone from 1 pass, 1 fail w/normco errors in the tenths, and 3 radically fail to 4 pass and 1 fail with normco errors in the ten thousandths. Systems are formaldehyde, ammonia, methane, ethene, carbon dioxide. I think HOOH was the original suspicious one, so I'll dig that up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361037317:59,error,errors,59,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361037317,2,['error'],['errors']
Availability,"Looks fine to me. Thanks Lori!. -Rob. On Thu, Sep 22, 2016 at 8:32 PM, Lori A. Burns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:256,avail,available,256,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['avail'],['available']
Availability,"Looks good. This is background work, not ready-to-go method algorithm, right?. Sometimes the code in dfocc tends to repeat (e.g., below <10 lines of the 138 added really differ between newly added and existing member functions). Would you want to consider consolidating such functions in future for ease of maintenance? It might also help the module's build time. ``` cpp; 2c2; < // CD-WabefT2: ; ---; > // WabefT2 ; 4c4; < void DFOCC::ccsd_WabefT2_cd(); ---; > void DFOCC::ccsd_WabefT2(); 6,8d5; < ; < timer_on(""WabefT2"");; < ; 11c8; < SharedTensor2d V, Vs, Ts, Va, Ta, bQ;; ---; > SharedTensor2d V, Vs, Ts, Va, Ta;; 12a10; > timer_on(""WabefT2"");; 44,48c42,44; < bQ = SharedTensor2d(new Tensor2d(""L <Q|AB>"", nQ_cd, navirA, navirA));; < bQ->read(psio_, PSIF_DFOCC_INTS, true, true);; < K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ_cd));; < K = bQ->transpose();; < bQ.reset();; ---; > K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ));; > K = bQabA->transpose();; > bQabA.reset();; 65c61; < I->contract(false, true, navirA*nb, navirA, nQ_cd, K, K, 0, a*navirA*nQ_cd, 1.0, 0.0);; ---; > I->contract(false, true, navirA*nb, navirA, nQ, K, K, 0, a*navirA*nQ, 1.0, 0.0);; 134a131,134; > // Read B(Q,ab); > bQabA = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (Q|AB)"", nQ, navirA, navirA));; > bQabA->read(psio_, PSIF_DFOCC_INTS, true, true);; > ; 137c137; < }// end ccsd_WabefT2_cd; ---; > }// end ccsd_WabefT2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220406272:307,mainten,maintenance,307,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220406272,1,['mainten'],['maintenance']
Availability,"Looks like @jturney and @lothian picked up some frac faults just as I’ve managed to squelch all of mine. The problem is that the scf convergence goes haywire occasionally at different fractional occupations on different computers (sometimes just failing to converge, sometimes converging to wrong values). Fiddling with `frac_start` and `mom_start` around https://github.com/psi4/psi4public/blob/master/tests/frac/input.dat#L126 for different points usually helps. If you could identify which point is giving trouble (`grep electron.`) that’d help in devising an input file that works everywhere. Or in commenting out the points most likely to offend. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23176; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23168; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23173",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/129#issuecomment-124147126:53,fault,faults,53,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-124147126,1,['fault'],['faults']
Availability,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-297062748:651,error,error,651,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748,1,['error'],['error']
Availability,"Looks like Travis is still feeling ill: the failure is caused by; ```; > raise ResourceError(f""MP2D version '{self.get_version()}' too old. Please update to at least '1.1'.""); E qcengine.exceptions.ResourceError: MP2D version '' too old. Please update to at least '1.1'.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1665#issuecomment-503905741:44,failure,failure,44,https://psicode.org,https://github.com/psi4/psi4/pull/1665#issuecomment-503905741,1,['failure'],['failure']
Availability,Looks like mostly range-separated failures. @susilehtola any ideas on what may have changed?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601793342:34,failure,failures,34,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601793342,1,['failure'],['failures']
Availability,Looks like the MKL header is always being included:. ```; /psi4/psi4/src/psi4/libparallel/process.cc:36:17: fatal error: mkl.h: No such file or directory; #include <mkl.h>; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-278961359:114,error,error,114,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-278961359,1,['error'],['error']
Availability,"Looks like the azure failure was caused by something else in psi4, which has now been fixed by a rebase. Ready to merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-565795100:21,failure,failure,21,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-565795100,1,['failure'],['failure']
Availability,"Looks like the failure is a Distelli issue, so LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/486#issuecomment-258135820:15,failure,failure,15,https://psicode.org,https://github.com/psi4/psi4/pull/486#issuecomment-258135820,1,['failure'],['failure']
Availability,"Looks like the formatted checkpoints don't carry post-SCF densities, though, which would be nice. Also, it looks like psi4 spits out also spin-restricted checkpoints in spin-polarized form. For a more thorough study, I could try and check if the formatted checkpoints pass inspection through ERKALE, which I've checked in a previous life against the code that shall not be mentioned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/708#issuecomment-301913196:25,checkpoint,checkpoints,25,https://psicode.org,https://github.com/psi4/psi4/issues/708#issuecomment-301913196,3,['checkpoint'],['checkpoints']
Availability,"Looks like there are some unrelated test failures, but this one is ready to go. As shown by the changes in the pytest guess energies, the new code reaches a considerably lower SAD guess energy for the HF molecule: -100.02909951427 vs -99.63941801281894. Large improvements are expected especially for systems containing hydrogen atoms, since the existing code only includes 0.5 electrons on those atoms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3138#issuecomment-2149267707:41,failure,failures,41,https://psicode.org,https://github.com/psi4/psi4/pull/3138#issuecomment-2149267707,1,['failure'],['failures']
Availability,"Looks like this still doesn't quite work. We did not copy the point group originally because a molecule does not have a PG until `update_geometry` is called. This can cause a seg fault as is. Also, it appears we are missing some symmetry information. I think we are going to have to unlock the frame and allow for a full update to get this to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-196887129:179,fault,fault,179,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-196887129,1,['fault'],['fault']
Availability,"Lori and I had a discussion about this a while back. I _think_ my; conclusion was to remove ROHF MP4 as a listed capability. _Technically_; DETCI can run it, but it will fail for any but the very tiniest of systems,; and in my opinion this will cause more user grief than it would to say we; can't do it. I think the correct solution is to get rid of MP4 in the; Psi4Education module... which one was it?. David. On Fri, Feb 26, 2016 at 8:41 AM, Justin Turney notifications@github.com; wrote:. > One of our students has been working through the Psi4Education site and; > one of the labs requires the user to run MP4 on boron.; > ; > If I'm reading the managed method matrix; > http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods; > correctly then the user should specify an ROHF reference and Psi4 will use; > DETCI. However on we receive the following error:; > ; > Input file: h2o_mp4.txt; > https://github.com/psi4/psi4/files/148253/h2o_mp4.txt; > ; > An error has occurred Py-side; > Traceback:; > <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>; > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; > raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189282404:872,error,error,872,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189282404,3,"['avail', 'error']","['available', 'error']"
Availability,"Lori, This is a problem that I have long wished to solve. Perhaps we can do it together. I've scribbled down some notes on the attached pdf. The primary problem is that the transformation to the cartesian hessian is not a linear one at non-stationary points. However, given the constraint that the energy is independent of rotations and translations, we don't have to do the extra displacements. The bad news is that it is not trivial. We need the 'derivative B matrix' or the second derivative of the external coordinates wrt cartesian displacements. Perhaps these are 0 for the COM coordinates, and your scheme will therefore work out of the box. But they are not for rotations. However, if we can find them or figure them out, then we can construct the Cartesian Hessian from a minimal number of displacements. Solving a 6x6 for each element is a good tradeoff I would say. The only real pain I forsee might be accommodating the linear molecules. In those cases one might be able to revert to not projecting the rotations at all as you planned. My notation is an inconsistent compromise between what I'm used to and the notation in WDA, JCP, 98, 1993. [cartesian hessians.pdf](https://github.com/psi4/psi4/files/1644627/cartesian.hessians.pdf)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-358800415:104,down,down,104,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-358800415,1,['down'],['down']
Availability,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276161205:239,robust,robust,239,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205,2,['robust'],['robust']
Availability,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122476853:281,down,down,281,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853,2,"['down', 'error']","['down', 'error']"
Availability,"Lovely. @dgasmith do you have an outfile? Would be also interested to see; the eigenspectrum of the DF metric from the failing case. -Rob. On Fri, Apr 29, 2016 at 3:04 PM, Lori A. Burns notifications@github.com; wrote:. > Ok, curious. Ours are 15.0.3. @dgasmith https://github.com/dgasmith; > tried it on a couple architectures and executables, but good to know the; > error isn't seen everywhere. May have to wait for a calmer development; > environment here to examine again.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371#issuecomment-215894127",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215894587:369,error,error,369,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215894587,1,['error'],['error']
Availability,"MBIS is Georgia Tech's department, so obligatory @loriab ping - I'm not sure who has taken over MBIS now that Jeff has left. Is there a legitimate reason for us not to support MBIS for iodine? It looks to me like we just need to extend the `get_mbis_params` table one more row of the periodic table and then update the `mA` setting. If so, this is an easy project for one of your developers who is still learning Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053:57,ping,ping,57,https://psicode.org,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053,2,['ping'],['ping']
Availability,MP4 open-shell method not available,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282:26,avail,available,26,https://psicode.org,https://github.com/psi4/psi4/issues/282,1,['avail'],['available']
Availability,"MRCC-related CTests pass with an older version (2019 with some unknown patches) of MRCC, but the 2022 release broke the interface (again?).; For what its worth, it also no longer works with Molpro 2015. ```; (p4dev) gytibor@CRD-MILAN-3:~/psi4/objdir$ ctest -L mrcc -j`getconf _NPROCESSORS_ONLN` --rerun-failed --output-on-failure; Test project /home/gytibor/psi4/objdir; Start 499: mrcc-ccsdt; Start 500: mrcc-ccsd_t_; Start 501: mrcc-ccsdt_q_; Start 502: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'N",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497:322,failure,failure,322,https://psicode.org,https://github.com/psi4/psi4/issues/2497,1,['failure'],['failure']
Availability,"Main thing to watch for mol-wise is that if atoms are near and all the tolerances aren't even, internal molecule processing will take in all your coordinates, then effectively zero them without warning, so `geometry()` is an array of zeros, and downstream is right to protest that atoms are overlapping.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595911780:71,toler,tolerances,71,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595911780,2,"['down', 'toler']","['downstream', 'tolerances']"
Availability,Major bugfix! Parallelization error in DF gradients,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2193:30,error,error,30,https://psicode.org,https://github.com/psi4/psi4/pull/2193,1,['error'],['error']
Availability,"Make sure you install. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 25, 2016 7:40 PM, ""Andy Simmonett"" notifications@github.com wrote:. > The patch I just pushed allows it to compile. The tests all fail instantly; > on my laptop, so I still have some more work to do, but that's almost; > certainly user error.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-235119557, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi08tfysGPjLLYYwmAXVcqfjyQ7CVks5qZUlygaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235119690:337,error,error,337,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119690,1,['error'],['error']
Availability,"Make sure you're making a new object directory, not reusing the py27 one. And post everything from `cmake` command through error, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316433982:123,error,error,123,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433982,1,['error'],['error']
Availability,Makes sense since it's finding the conda mkl_rt. Will look into where the `mkl.h` ever actually came from. The distelli fault is hdf5 – altered reasoning too late at night. Looking at that now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-278965098:120,fault,fault,120,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-278965098,1,['fault'],['fault']
Availability,"Many tests fail: 143 failed, 576 warnings, 282 errors",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3099:47,error,errors,47,https://psicode.org,https://github.com/psi4/psi4/issues/3099,1,['error'],['errors']
Availability,"Many thanks for your answers and support. We basically want to export the two-electron integrals, and use them with other programs. So the integrals will be written to a binary file together with other 1el matrices. The code snippet that is working at the moment:. ``` c++; MintsHelper mints(ref_wfn->basisset(), options, 0);; auto intFactory = mints.integral();; auto basis = mints.basisset();; auto tBO = intFactory->eri();; AOShellCombinationsIterator shellIter = intFactory->shells_iterator();. std::vector<double> intval;; std::vector<int> intnums;. for (shellIter.first(); shellIter.is_done() == false; shellIter.next()) {; tBO->compute_shell(shellIter.p(),shellIter.q(),shellIter.r(),shellIter.s());; double cutOff = 1E-12;; auto aoIter = intFactory->integrals_iterator(shellIter.p(),shellIter.q(),shellIter.r(),shellIter.s());; for (aoIter.first(); aoIter.is_done() == false; aoIter.next()) {; int i = aoIter.i();; int j = aoIter.j();; int k = aoIter.k();; int l = aoIter.l();. if (fabs(tBO->buffer()[aoIter.index()])>cutOff){; intval.push_back(tBO->buffer()[aoIter.index()]);; intnums.push_back(i); ; intnums.push_back(j);; intnums.push_back(k);; intnums.push_back(l);. }. }; // Continue Sorting + Exporting; ````. If we use the conda install, we get an error that the symbol cannot be found. Compiling with modified integral.h works as expected. Thanks again!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876632135:1263,error,error,1263,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876632135,1,['error'],['error']
Availability,Matrix::gemm was not reporting error for matrices with different number of irreps,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/276:31,error,error,31,https://psicode.org,https://github.com/psi4/psi4/pull/276,1,['error'],['error']
Availability,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79#issuecomment-94352477:113,error,error,113,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477,3,['error'],['error']
Availability,"Maybe the TOC data is read into memory before the O_TRUNC bit?. -Rob. On Fri, Jan 17, 2014 at 4:23 PM, David Sherrill notifications@github.comwrote:. > Err, that's confusing, the orbital file is already opened using the; > PSIO_OPEN_NEW flag, which should blow away the previous contents. The; > O_TRUNC flag is passed to ::open() inside PSIO::open, which is supposed to; > ""Delete any prior file content"". So, I don't get how we are getting an; > error about overwriting TOC entries in PSIO, etc.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4release/issues/32#issuecomment-32648789; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-32649241:448,error,error,448,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-32649241,1,['error'],['error']
Availability,"Maybe:; - Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes.; - Create another layer of defaulting so that aug-cc-pvdz orbital uses aug-cc-pvdz-ri/jkfit when available (as at present), then def2-tzvp-ri/jkfit (not at present), then the ultimate default def2-qzvpp-ri/jkfit (as at present). This way don't get high AM cost on supposedly cheap orbital basis sets.; - Disqualify default for 5Z and 6Z basis sets. if aug-cc-pv5/6Z-ri/jkfit aren't defined for a certain element, we've nothing to put in their place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/144#issuecomment-163827788:246,avail,available,246,https://psicode.org,https://github.com/psi4/psi4/issues/144#issuecomment-163827788,1,['avail'],['available']
Availability,"Might get past the PSIO error if second basis is smaller than first, but that's not the likely case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1329#issuecomment-451559368:24,error,error,24,https://psicode.org,https://github.com/psi4/psi4/issues/1329#issuecomment-451559368,1,['error'],['error']
Availability,Mild reminder to throw in an [extra Windows test](https://github.com/psi4/psi4/pull/1760#issuecomment-568071614) to debug what I hope is a borderline tolerance instability.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-571203823:150,toler,tolerance,150,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571203823,1,['toler'],['tolerance']
Availability,"Minimal example; ```; molecule {; 0 1; Ne; }. my_pbe = {; ""name"": ""my pbe functional"",; ""x_functionals"" : {; ""GGA_X_PBE"" : {}; },; ""c_functionals"" : {; ""GGA_C_PBE"" : {}; }; }. set basis pcseg-1; set basis_guess pcseg-0 # Works	without	this line; energy('scf', dft_functional=my_pbe); ```. The error I get in psi4 1.3.2 is; ```; Traceback (most recent call last):; File ""/usr/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/usr/lib64/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 1272, in scf_helper; p4util.banner(name.upper()). AttributeError: 'dict' object has no attribute 'upper'. Printing out the relevant lines from the Psithon --> Python processed input file:; ""GGA_C_PBE"" : {}; }; }; core.set_global_option(""BASIS"", ""pcseg-1""); core.set_global_option(""BASIS_GUESS"", ""pcseg-0""); --> energy('scf', dft_functional=my_pbe); ```; and the same issue is also present in `master`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1876:293,error,error,293,https://psicode.org,https://github.com/psi4/psi4/issues/1876,1,['error'],['error']
Availability,"Mmh, how many parallel processes do you have ? aio_handler.cc spawns a new thread that is specifically for writing the integrals to disk. When there is no writing left to do, the thread should die, and a new one is generated when further writing is needed. Here it looks like it's trying to generate the thread when it already exists... Or maybe the threads are not properly dying, and it gets to the maximum number of threads. Does your computation seem to proceed normally in spite of the error message ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277489656:491,error,error,491,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277489656,1,['error'],['error']
Availability,Molecule::symmetrize() error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2579:23,error,error,23,https://psicode.org,https://github.com/psi4/psi4/issues/2579,1,['error'],['error']
Availability,More Robust SOSCF Tech.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2212:5,Robust,Robust,5,https://psicode.org,https://github.com/psi4/psi4/issues/2212,1,['Robust'],['Robust']
Availability,"More details:; ```; ==10585==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000319fd8 at pc 0x7f3580353a82 bp 0x7fffa79ccfc0 sp 0x7fffa79cc778; READ of size 72 at 0x603000319fd8 thread T0; #0 0x7f3580353a81 in __interceptor_write /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1036; #1 0x7f356f2bdc52 in psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int) /home/raimis/prj/psi4.git/psi4/src/psi4/libpsio/rw.cc:86; #2 0x7f356f2c10b7 in psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*) /home/raimis/prj/psi4.git/psi4/src/psi4/libpsio/write.cc:137; #3 0x7f356f2c1324 in psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long) /home/raimis/prj/psi4.git/psi4/src/psi4/libpsio/write_entry.cc:46; #4 0x7f356f2c13bd in psi::psio_write_entry(unsigned long, char const*, char*, unsigned long) /home/raimis/prj/psi4.git/psi4/src/psi4/libpsio/write_entry.cc:56; #5 0x7f356cf5301c in psi::ccresponse::roa() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/ccresponse/roa.cc:238; #6 0x7f356cf2a1e3 in psi::ccresponse::ccresponse(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/psi4/src/psi4/cc/ccresponse/ccresponse.cc:136; #7 0x7f356cac7528 in py_psi_ccresponse(std::shared_ptr<psi::Wavefunction>) /home/raimis/prj/psi4.git/psi4/src/core.cc:396; #8 0x7f356cb7fe9a in double pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<double, double (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(double (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/cast.h:1870; #9 0x7f356cb726e6 in std::enable_if<!std::is_void<double>::value, double>::type pybind11::detail::argument_loader<st",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133:29,ERROR,ERROR,29,https://psicode.org,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133,1,['ERROR'],['ERROR']
Availability,"More errors if I continue. In file included from /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/Timer.cc:29:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:147: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, int, int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected ‘)’ before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘,’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:221: error: expected constructor, destructor, or type conversion before ‘+’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In member function ‘std::string psi::Table<T, Args>::PrintOut(int) const’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:228: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: In constructor ‘psi::Table<T, Args>::Table(int, const T&, Args& ...)’:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: sorry, unimplemented: cannot expand ‘Args ...’ into a fixed-length argument list; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h:235: error: expected ‘{’ before ‘(’ token; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Table.h: At global scope:; /home/ubgroup/psi4/src/lib/libPsiUtil/Implementations/../Tab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/404#issuecomment-224865906:5,error,errors,5,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224865906,3,['error'],"['error', 'errors']"
Availability,"More playing with the same issue: [this](https://gist.github.com/JonathonMisiewicz/d7b294c34f3200c3150b1a43812e9d54) input file fails as written, but it works fine if I comment the assign line at the bottom and uncomment the lines in the basis block. I can't imagine why one case works but the other doesn't. This may be related to the failure initially reported [here](http://forum.psicode.org/t/problems-with-dkh-calculations/915/5)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1332#issuecomment-435695580:336,failure,failure,336,https://psicode.org,https://github.com/psi4/psi4/issues/1332#issuecomment-435695580,1,['failure'],['failure']
Availability,"Most errors appear to be related to formatting, which is likely caused by a mismatch of formatters used by Psi4 upstream and FreeBSD. The latter could have an older version, for example. There are errors related to missing functionals in Libxc. Looks like FreeBSD only has Libxc 6.0.0 released over a year ago. E.g. HYB_GGA_XC_R2SCAN0 was only added in Libxc 6.1.0. Is the version check in Psi4 not stringent enough or was it disabled in the FreeBSD build?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400:5,error,errors,5,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400,2,['error'],['errors']
Availability,"Most of tests include well-behaved molecules such as H2O. However, cd-omp2-2 includes the NO molecule, which has a problematic electronic structure. I tried it both on may mac and linux cluster (centos 6.3). In linux I used intel compiler and MKL. It is difficult to guess the source problem unless debugging the source code. I would debug the code but I can not reproduce the error on my machines. Therefore, I suspect that it might be related to the blas library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-222317064:377,error,error,377,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222317064,1,['error'],['error']
Availability,"Moved from #476 so as to not clutter issues.; - [ ] Here lie uses for general Cholesky machinery.; - [ ] Fock-type terms in DF-SAPT, particularly higher-order, see #317 ; - [ ] If you care about 6-zeta accuracy, you probably oughtn't to be using density fitting. Nevertheless, having orbital basis sets for which _no_ auxiliary is appropriate (even as overkill, like QZ for sto-3g) is troubling for the auxiliary defaulting machinery. On-the-fly construction could help. Maybe a more plausible case is when auxiliary basis sets aren't available for a particular element or for tight functions. Moreover, Susi Lehtola comments:. Well, you could do compact atomic Cholesky to construct a fitting basis for an arbitrary orbital basis set on-the-fly. [doi 10.1063/1.3116784]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-251571266:535,avail,available,535,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-251571266,1,['avail'],['available']
Availability,"My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232716913:239,error,error,239,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232716913,2,['error'],['error']
Availability,"My collaborators are trying to compute the SCF energy with an external one-electron potential added to the Fock matrix (this potential does NOT result from a set of point charges). We were trying to use the `wfn.push_back_external_potential()` functionality to accomplish this, but the external potential is ignored. I tracked down the issue to [this line in `scf_iterator.py`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L312) which erases the provided external potential, resulting in only potentials from `PCM/DDX/PE`, added immediately afterwards, being allowed. The problem is completely fixed (at least in our case) by commenting out the aforementioned line of code. I will submit a one-liner PR to do this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3227:327,down,down,327,https://psicode.org,https://github.com/psi4/psi4/issues/3227,1,['down'],['down']
Availability,"My errors appeared before the code even loads – at the Python stage – and; happens on both my laptop and desktop Macs. I'm going to grab a fresh; clone and try it again (though I doubt that will fix the problem, given; that the error also occurs on my nightly test builds). But first I have to; land in Atlanta. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:18 PM, Justin Turney notifications@github.com; wrote:. > Yup, that was our problem. The test cases are passing.; > ; > Not sure if @lothian https://github.com/lothian is doing something; > similar.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178825893.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178826938:3,error,errors,3,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178826938,2,['error'],"['error', 'errors']"
Availability,"My fault for not realizing you had only seen one half of the `PSI_API` additions. Yes, please add any you need psi-side and PR 'em all. [Here's](https://github.com/psi4/psi4/pull/955/files) more examples.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971#issuecomment-384378754:3,fault,fault,3,https://psicode.org,https://github.com/psi4/psi4/issues/971#issuecomment-384378754,1,['fault'],['fault']
Availability,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:168,error,errors,168,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,6,"['avail', 'error']","['available', 'error', 'errors']"
Availability,"My first try on Ubuntu with clang-3.7 wasn't able to reproduce the errors. My valgrind output was clean, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-180494377:67,error,errors,67,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180494377,1,['error'],['errors']
Availability,"My issue was trying to use a `psi4` executable built inside a container from the `psi4` python client from my host machine--i.e., to treat the `psi4` executable as an external executable I could call from `python`; however, the `psi4` python client requires close coupling to the executable (access to shared files) so this separation was not possible because the client has to access files shared with the executable, which are only available inside the container :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126#issuecomment-1915917267:434,avail,available,434,https://psicode.org,https://github.com/psi4/psi4/issues/3126#issuecomment-1915917267,1,['avail'],['available']
Availability,"My only concern was that symmetrize uses atom_map, and optking uses symmetrize to remove numerical noise. However, since the tolerance is passed through as an optional argument, I have no objection.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195#issuecomment-189390629:125,toler,tolerance,125,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189390629,1,['toler'],['tolerance']
Availability,"My original issue was for a mac, but I see the same error on linux with intel18 compilers:. deprince_root@ed7:~/does_jk_work$ psi4; Attention! This SCF may be density-fitted.; /usr/bin/python3: symbol lookup error: /edfs/users/deprince/does_jk_work/does_jk_work.so: undefined symbol: _ZN3psi4PKJKC1ESt10shared_ptrINS_8BasisSetEERNS_7OptionsE. I don't understand what is going on. For previously functioning plugins, symbols are missing for only certain classes. I've noticed this for PK/DFJK and VBase so far.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971#issuecomment-384319120:52,error,error,52,https://psicode.org,https://github.com/psi4/psi4/issues/971#issuecomment-384319120,2,['error'],['error']
Availability,"My pybind11 package was accepted in Fedora, so I started updating the psi4 package (which was at rc1!). It built fine on the released versions, but failed in the development version that has the newest GCC. The error(s) I get is. ```; cd /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/objdir-x86_64-redhat-linux-gnu/psi4-core-prefix/src/psi4-core-build/src/psi4/libpsio && /usr/bin/g++ -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/include -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631:211,error,error,211,https://psicode.org,https://github.com/psi4/psi4/issues/631,1,['error'],['error']
Availability,My setup options. ```; ./setup --cc icc --cxx icpc --fc ifort --pcmsolver on --chemps2 on --hdf5-dir /usr psi4build; ```. with boost 1.55. The error is reproducible on my end.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463#issuecomment-241330989:143,error,error,143,https://psicode.org,https://github.com/psi4/psi4/issues/463#issuecomment-241330989,1,['error'],['error']
Availability,"My sincerest apologies to the Psi4 community, I didn't even begin to fathom that these timers were going to be such a fiasco. I dropped the sampling down to 1 point per timer so I expect they should be invisible now, but I can't confirm this at the moment. If someone wants to check this and close the issue if it's been resolved I would appreciate it. In the meantime I'll have to look into VTune as it appears to do everything I was making these timers do, but with a pretty GUI interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98518253:149,down,down,149,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98518253,1,['down'],['down']
Availability,"NH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormlq，该符号在函数 ""int __cdecl psi::C_DORMLQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMLQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormql，该符号在函数 ""int __cdecl psi::C_DORMQL(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQL@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormqr，该符号在函数 ""int __cdecl psi::C_DORMQR(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMQR@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:31415,error,error,31415,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"NH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormr3，该符号在函数 ""int __cdecl psi::C_DORMR3(char,char,int,int,int,int,double *,int,double *,double *,int,double *)"" (?C_DORMR3@psi@@YAHDDHHHHPEANH00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrq，该符号在函数 ""int __cdecl psi::C_DORMRQ(char,char,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRQ@psi@@YAHDDHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormrz，该符号在函数 ""int __cdecl psi::C_DORMRZ(char,char,int,int,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMRZ@psi@@YAHDDHHHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dormtr，该符号在函数 ""int __cdecl psi::C_DORMTR(char,char,char,int,int,double *,int,double *,double *,int,double *,int)"" (?C_DORMTR@psi@@YAHDDDHHPEANH00H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbcon，该符号在函数 ""int __cdecl psi::C_DPBCON(char,int,int,double *,int,double,double *,double *,int *)"" (?C_DPBCON@psi@@YAHDHHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbequ，该符号在函数 ""int __cdecl psi::C_DPBEQU(char,int,int,double *,int,double *,double *,double *)"" (?C_DPBEQU@psi@@YAHDHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbrfs，该符号在函数 ""int __cdecl psi::C_DPBRFS(char,int,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPBRFS@psi@@YAHDHHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbstf，该符号在函数 ""int __cdecl psi::C_DPBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:32066,error,error,32066,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"NK2019: 无法解析的外部符号 dsyevx，该符号在函数 ""int __cdecl psi::C_DSYEVX(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYEVX@psi@@YAHDDDHPEANHNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH0H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvd，该符号在函数 ""int __cdecl psi::C_DSYGVD(int,char,char,int,double *,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYGVD@psi@@YAHHDDHPEANH0H00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvx，该符号在函数 ""int __cdecl psi::C_DSYGVX(int,char,char,char,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYGVX@psi@@YAHHDDDHPEANH0HNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrfs，该符号在函数 ""int __cdecl psi::C_DSYRFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DSYRFS@psi@@YAHDHHPEANH0HPEAH0H0H0001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysv，该符号在函数 ""int __cdecl psi::C_DSYSV(char,int,int,double *,int,int *,double *,int,double *,int)"" (?C_DSYSV@psi@@YAHDHHPEANHPEAH0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsysvx，该符号在函数 ""int __cdecl psi::C_DSYSVX(char,char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *)"" (?C_DSYSVX@psi@@YAHDDHHPEANH0HPEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsytrd，该符号在函数 ""int __cdecl psi::C_DSYTRD(char,int,double *,int,double *,double *,double *,double *,int)"" (?C_DSYTRD@psi@@Y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:47436,error,error,47436,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"NK2019: 无法解析的外部符号 dsyev，该符号在函数 ""int __cdecl psi::C_DSYEV(char,char,int,double *,int,double *,double *,int)"" (?C_DSYEV@psi@@YAHDDHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevd，该符号在函数 ""int __cdecl psi::C_DSYEVD(char,char,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYEVD@psi@@YAHDDHPEANH00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevr，该符号在函数 ""int __cdecl psi::C_DSYEVR(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,int *,double *,int,int *,int)"" (?C_DSYEVR@psi@@YAHDDDHPEANHNNHHNPEAH00H10H1H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyevx，该符号在函数 ""int __cdecl psi::C_DSYEVX(char,char,char,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYEVX@psi@@YAHDDDHPEANHNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygst，该符号在函数 ""int __cdecl psi::C_DSYGST(int,char,int,double *,int,double *,int)"" (?C_DSYGST@psi@@YAHHDHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygv，该符号在函数 ""int __cdecl psi::C_DSYGV(int,char,char,int,double *,int,double *,int,double *,double *,int)"" (?C_DSYGV@psi@@YAHHDDHPEANH0H00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvd，该符号在函数 ""int __cdecl psi::C_DSYGVD(int,char,char,int,double *,int,double *,int,double *,double *,int,int *,int)"" (?C_DSYGVD@psi@@YAHHDDHPEANH0H00HPEAHH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsygvx，该符号在函数 ""int __cdecl psi::C_DSYGVX(int,char,char,char,int,double *,int,double *,int,double,double,int,int,double,int *,double *,double *,int,double *,int,int *,int *)"" (?C_DSYGVX@psi@@YAHHDDDHPEANH0HNNHHNPEAH00H0H11@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dsyrfs，该符号在函数 ""int __cdecl psi::C_DSYRFS(char,int,int,double *,int,double *,int,int *,double *,int,double *,int,double *,double *,double *,int *)"" (",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:46825,error,error,46825,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"Nevermind, possibly. I had tried one increase of user memory and it still failed but when I double it, it works fine. So this test can be easily fixed. But the real question is are we willing to have more jobs pass through the in-core/disk choice stage with a false negative and instead hit the error further on. I'm thinking that's not good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-428756860:295,error,error,295,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-428756860,1,['error'],['error']
Availability,New Error Printing Bungles Newlines,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867:4,Error,Error,4,https://psicode.org,https://github.com/psi4/psi4/issues/1867,1,['Error'],['Error']
Availability,New SCF types unrecognized by several downstream modules,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021:38,down,downstream,38,https://psicode.org,https://github.com/psi4/psi4/issues/1021,1,['down'],['downstream']
Availability,New page for downloading DFTD3 is located at:. https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1084#issuecomment-403753049:13,down,downloading,13,https://psicode.org,https://github.com/psi4/psi4/issues/1084#issuecomment-403753049,1,['down'],['downloading']
Availability,New page for downloading gCP source code:. https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. wrong link listed in. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/gcp.rst,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1084#issuecomment-403774285:13,down,downloading,13,https://psicode.org,https://github.com/psi4/psi4/issues/1084#issuecomment-403774285,1,['down'],['downloading']
Availability,"Nice job tracking this one down, everyone. David. On Sun, Feb 21, 2016 at 3:53 PM, Daniel Smith notifications@github.com; wrote:. > Closed #244 https://github.com/psi4/psi4/issues/244 via fc721a2; > https://github.com/psi4/psi4/commit/fc721a29611cee4de7dfa4d96cf9707317191860; > .; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#event-558642745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-187302588:27,down,down,27,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-187302588,1,['down'],['down']
Availability,"No errors building with ambit enabled when I add those two lines to external/upstream/ambit/CMakeLists.txt (with just ambit added as an extra option). Adding gpu_dfcc into the build (and restarting from scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/down",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:3,error,errors,3,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,3,"['Error', 'down', 'error']","['Error', 'downstream', 'errors']"
Availability,"No idea what is causing DSYEV to fail, but before I implemented the new wrapper this would have gone undetected, so if anyone tried to `git bisect` it crash/no crash would not be a good indicator. The old wrapper ignored the info value from LAPACK and let execution continue despite the diagonalization failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085:303,failure,failure,303,https://psicode.org,https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085,1,['failure'],['failure']
Availability,No kidding. A 2k diff is tolerable. 15k libmints was trying. I don't know if I can face 40k cctriples.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1201#issuecomment-419286789:25,toler,tolerable,25,https://psicode.org,https://github.com/psi4/psi4/pull/1201#issuecomment-419286789,1,['toler'],['tolerable']
Availability,"No need, @susilehtola, as the azure error has to do with azure, clang-cl, and gau2grid, not SAP.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1700#issuecomment-531648876:36,error,error,36,https://psicode.org,https://github.com/psi4/psi4/pull/1700#issuecomment-531648876,1,['error'],['error']
Availability,"No problem with `conda install psi4`, but the standalone psi4 installers (psi4conda button and curl from vergil in attached screenshot) are temporarily down due to facilities issues. <img width=""751"" alt=""Screenshot 2024-07-26 at 12 17 42 PM"" src=""https://github.com/user-attachments/assets/5a0c462c-895e-4d8e-a7f5-e233ec737aac"">",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3199:152,down,down,152,https://psicode.org,https://github.com/psi4/psi4/issues/3199,1,['down'],['down']
Availability,"No reason you should know this, but `gcc-5-mp` is sign that the solver can't install a recent psi4 into the existing environment and so is instead going back 5+ years to a time when packages were less defensively pinned and conda only had gcc v4 available on defaults channel. I'd suggest creating a new env and specifying the python. If needed, you can specify the psi4 version. And if you've got your setup pulling from conda-forge at higher priority than defaults, you can clobber that, too. So something along the lines of the below, to be over-explicit. Also see https://psicode.org/installs/v17/ if you haven't already. If that works, but you really don't want a separate environment, then try the more explicit install into your working env and/or post back here with your `conda list`, and I'll try to see if there's any red flags. ```; conda create -n p4env python=3.9 psi4=1.7 -c defaults -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746:246,avail,available,246,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746,1,['avail'],['available']
Availability,"Nope, I don't know of any reference implementation for these. LC-wPBE08 is available in Q-Chem, though, and it matched my new libxc implementation. LC-wPBE is just way too common of a name, since several versions have been published in the literature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260#issuecomment-424384308:75,avail,available,75,https://psicode.org,https://github.com/psi4/psi4/pull/1260#issuecomment-424384308,1,['avail'],['available']
Availability,"Nope, just an oversight on my part. Good catch. Most of the changes to the tests that I made were a result of high precision checks failing (3 point f.d. vs. analytic can be a little noisy), so I was just doing trial and error to figure out where things needed to be updated. I must have missed this one, because I just saw that it timed out on my machine. Sorry about that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-235365542:221,error,error,221,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235365542,1,['error'],['error']
Availability,"Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message. ```; Traceback (most recent call last):; File ""<string>"", line 59, in <module>; Boost.Python.ArgumentError: Python argument types in; psi4.scf(str); did not match C++ signature:; scf(void); scf(P7_object, P7_object); ```. Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange. ```; #methane test. molecule {; #charge multiplicity; 0 1; C0 0.000000 0.000000 0.000000; H0 1.092199 0.000000 -0.000001; H0 -0.364063 0.138497 1.020380; H0 -0.364067 -0.952923 -0.390247; H0 -0.364068 0.814425 -0.630132; }. set globals {; reference RHF; maxiter 999; }. basis {; assign C0 C0bas; assign H0 H0bas; #C 3-21G; [ C0bas ]; cartesian; ****; C 0 ; S 3 1.00; 172.2560000 0.0617669 ; 25.9109000 0.3587940 ; 5.5333500 0.7007130 ; SP 2 1.00; 3.6649800 -0.3958970 0.2364600 ; 0.7705450 1.2158400 0.8606190 ; SP 1 1.00; 0.1958570 1.0000000 1.0000000 ; ****; #H 3-21G; [ H0bas ]; cartesian; ****; H 0 ; S 2 1.00; 5.4471780 0.1562850 ; 0.8245470 0.9046910 ; S 1 1.00; 0.1831920 1.0000000 ; ****; }. scf('energy'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79:31,error,error,31,https://psicode.org,https://github.com/psi4/psi4/issues/79,1,['error'],['error']
Availability,"Not a big deal. My preference would be to produce an equivalent file to; CFOUR. For example, the Crawford group has some chiroptical scripts; related to ROA that use second derivatives (file15-like) or dipole moment; derivatives (file17-like) but the headers vary slightly between PSI and; CFOUR, and this causes headaches, or worse, incorrect results if errors; aren't thrown. On Sun, Apr 15, 2018 at 10:03 PM, Lori A. Burns <notifications@github.com>; wrote:. > Origin aside, do I gather correctly that optking (or its successors;; > optking being the only visible consumer of the .hess file) isn't; > dependent on the 6 and if I could absorb the format into FCMFINAL, it'd; > be ok with your code, @psi-rking <https://github.com/psi-rking>?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/953#issuecomment-381467223>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTLfdpPdF-9uBf3JwnOPE52-M4vmYks5tpAoPgaJpZM4TPKkE>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381624417:355,error,errors,355,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381624417,1,['error'],['errors']
Availability,"Not a fluke, but not your fault either. Ask again when [Lori's patch](https://github.com/psi4/psi4/pull/2815) is merged in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1332748782:26,fault,fault,26,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1332748782,1,['fault'],['fault']
Availability,"Not a major issue per-say since I currently run Psi4 on a Linux system, but I wanted to try it on WSL for fun. However, I kept getting curl 404s when I went to download 1.3.2. It turns out there are currently no binaries for 1.3.2 on the [download page](https://admiring-tesla-08529a.netlify.com/installs/v132/) for WSL. . Not sure if this version is broken on WSL or it's just been overlooked, figure you'd like to know!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1658:160,down,download,160,https://psicode.org,https://github.com/psi4/psi4/issues/1658,2,['down'],['download']
Availability,"Not completely sure this is fixable besides using a different basis or tuning the overlap tolerance in the SCF. You can suggest a user changing the `s_tolerance`, but beyond that we cannot really reproduce or do much about it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-515269174:90,toler,tolerance,90,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515269174,1,['toler'],['tolerance']
Availability,"Not looking good for a compatible patch at [GL 61](https://gitlab.com/libxc/libxc/issues/61). Sounds like best hope would be static library as discussed around https://gitlab.com/libxc/libxc/issues/59#note_84144469 . If by ""libxc included in tarball"" you mean any copying of libxc code into psi4 repo as code or tarball such that the source download produced by github has libxc, @mbanck, then that's not likely. But if you mean a special hand-constructed psi4 release tarball that includes req'd deps, then that's possible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451262059:341,down,download,341,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451262059,1,['down'],['download']
Availability,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/866#issuecomment-350503264:380,avail,available,380,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264,1,['avail'],['available']
Availability,"Not sure what you exactly mean. Setting vv10_b in the superfunctional is straightforward. I followed what was done for the LRC omega. . Ideally the user has not do anything for the pre-defined functionals once I get the -nl dashparam to work. The manual setting is more for developers who want to fit the vv10_b for a new functional. Using DFT-NL should be like using DFT-D. Having the vv10 integrator exposed to python and supplying a user-defined density would be nice. And for a post-scf VV10 correction that is probably the way to go for the scfitertopy implementation. Though this pybind is currently a level too much for me, i dont even understand the errors i get. Small steps for me ;-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-364091920:658,error,errors,658,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-364091920,1,['error'],['errors']
Availability,Not sure what's going on. In your `/Users/crawdad/psi4/bin/psi4` do you have lines like https://github.com/psi4/psi4/blob/master/psi4/run_psi4.py#L142-L144 in there? The `KeyError` that's being raised is handled in the lines following. Could you also add a `print(args)` before the error and paste the results in (from your error message above the KeyError is raised near line 110)?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258684467:282,error,error,282,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258684467,2,['error'],['error']
Availability,"Not surprising that DETCI leaks as it was created before the days of RAII and the DETCI module was expected to be run as a system process so all small leaks were non-issues then. I moved some of it to RAII, but there is a lot there and it is unlikely it will have a complete overhaul in the near future. I remember this was an issue before and we cleaned at least the most egregious leaks we can likely continue cleaning up leaks to meet an ""acceptable"" tolerance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1532#issuecomment-463724464:454,toler,tolerance,454,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-463724464,1,['toler'],['tolerance']
Availability,Not tagged PSI_API and not exported means there's no risk of breaking downstream.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2348#issuecomment-964161630:70,down,downstream,70,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964161630,1,['down'],['downstream']
Availability,"Not too helpful: https://testboard.org/cdash/testDetails.php?test=1588753&build=22769 https://testboard.org/cdash/testDetails.php?test=1588753&build=22769. And when I run it outright (not nightly build) it passes. End of output file from nightly build below. But it’s not showing up as timed out. **\* tstart() called on psinet; **\* at Tue Jul 21 03:07:41 2015. ```; *******************************************************; * *; * QCISD(T) *; * *; *******************************************************. num_threads: 1; available memory: 244.14 mb; memory requirements: 0.52 mb. Number of ijk combinations: 20. Computing (T) correction... % complete total time; ```. > On Jul 21, 2015, at 12:08 PM, Eugene DePrince notifications@github.com wrote:; > ; > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/121#issuecomment-123386880.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/121#issuecomment-123394642:522,avail,available,522,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123394642,2,"['avail', 'error']","['available', 'errors']"
Availability,"Note that I have no doubt Mol was thoroughly tested for all these things in its development and was in pristine working order. But we didn't have the notion of preserving those unit tests for a future refactoring. So I'm just trying to convey that downstream may rely on the inconsistency and changes that in class development may have been a ""fix"" are now a ""refactoring"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363476390:248,down,downstream,248,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363476390,1,['down'],['downstream']
Availability,"Note that I've done parts of this (but by no means all) in another branch, so ping me if you'd like to take this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883#issuecomment-376539966:78,ping,ping,78,https://psicode.org,https://github.com/psi4/psi4/issues/883#issuecomment-376539966,1,['ping'],['ping']
Availability,"Note that the SAD guess in Psi4 is not the best one possible, as it is not symmetry aware. Such a SAD guess is available in PySCF, and it is also directly accessible from Python. I have planned to rectify the situation in Psi4 in the future, but I have some other projects to finish before that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467564524:111,avail,available,111,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467564524,1,['avail'],['available']
Availability,"Note to Self: Optimizations do not play nicely with this. It sets the orbital guess type to read, so it displays the following error message...; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```. ...even though it should not have been set at the driver level! Within the assumption that we have no way to cast orbitals between symmetries, the best option seems to be to have the big basis read from the projected orbitals while the small basis uses a core guess during any findif computations and reads during optimizations. Thoughts? This will probably end with a lot of poking at the driver code. EDIT: I thought this error message was exclusively post this fix, but I was able to get the error message pre this fix on the cluster. Investigate after I get this SCF finally converged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149:127,error,error,127,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149,3,['error'],['error']
Availability,"Now I also get it :). Incremental Fock builds can show numerical error accumulation. Adding a reset frequency is sensible, e.g. after 20 incremental builds do a full Fock build from scratch. The actual number should be a (expert) user option. The incremental Fock build can be compared against a standard build. They have to agree.; Comparing density screening to other programs can probably only be done for HF calculations and even then I would expect that one can only see 'similar errors' and no exact number agreement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821200775:65,error,error,65,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821200775,2,['error'],"['error', 'errors']"
Availability,"Now nothings works anymore. I update psi4 using conda update psi4 libefp libint erd simint pcmsolver chemps2 gdma dkh libxc -c psi4/label/dev it finish ok, but when I try to run psi4 I got the following error:. File ""/opt/psi4/bin/psi4"", line 158, in <module>; import psi4; File ""/opt/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/opt/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /opt/psi4/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZNK3psi12Wavefunction26tpdm_gradient_contributionEv; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1514132855674/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 51; The most recent 5 function calls were:. psi::plugin_load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&); py_psi_plugin_load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >); pybind11::cpp_function::dispatcher(_object*, _object*, _object*). forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002AC3069B82CD Unknown Unknown Unknown; libpthread.so.0 00002AC301BBD1F0 Unknown Unknown Unknown; ld-linux-x86-64.s 00002AC30148A0D1 Unknown Unknown Unknown; ld-linux-x86-64.s 00002AC3014847A6 Unknown Unknown Unknown; libdl.so.2 00002AC301DCB5EC Unknown Unknown Unknown; libdl.so.2 00002AC301DCB10F Unknown Unknown Unknown; core.so 00002AC303C6DC02 Unknown Unknown Unknown; core.so 00002AC303DC58E2 Unknown Unknown Unknown; core.so 00002AC303DE4A13 Unknown Unknown Unknown; core.so 00002AC303955DEC Unknown Unknown Unknown; libpython3.6m.so. 00002AC30175D1C9 Unknown Unknown Unknown; libpython3.6m.so. 0000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373052900:203,error,error,203,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373052900,3,"['Error', 'error']","['Error', 'error']"
Availability,"Now that Psi4 uses LIBINT2, one can enable support for the Yukawa kernel for range-separated functionals from Libxc, such as CAMY-B3LYP. The code needs to be generalized so that in addition to the error function kernel, `erf_coulomb`, one can also use the Yukawa kernel, `yukawa`, in the LIBINT2 call.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2374:197,error,error,197,https://psicode.org,https://github.com/psi4/psi4/issues/2374,1,['error'],['error']
Availability,"Now that all the tests pass (travis working again), I think this can be merged. ping @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-528733056:80,ping,ping,80,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-528733056,1,['ping'],['ping']
Availability,"Now that the Linux binary is now available, I'm comfortable having stronger; C++11 requirements. David. On Wed, Nov 18, 2015 at 12:50 PM, Roberto Di Remigio <; notifications@github.com> wrote:. > @jturney https://github.com/jturney could you post a small example of; > using target_compile_features?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/188#issuecomment-157798532.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-157802143:33,avail,available,33,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-157802143,1,['avail'],['available']
Availability,"Now throws `ValidationError: Inconsistent or unspecified chg/mult: sys chg: -2.0, frag chg: [None, None], sys mult: 1, frag mult: [None, None]` at parse-time rather than mysterious SCF error at Runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/114#issuecomment-381460426:185,error,error,185,https://psicode.org,https://github.com/psi4/psi4/issues/114#issuecomment-381460426,1,['error'],['error']
Availability,"O install it last week, so I should be using de last version. I download the script version py3.6.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373016592:64,down,download,64,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373016592,1,['down'],['download']
Availability,OEProp error on Mac,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260:7,error,error,7,https://psicode.org,https://github.com/psi4/psi4/issues/260,1,['error'],['error']
Availability,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:151,error,error,151,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677,5,"['Error', 'error']","['Error', 'error']"
Availability,"OK, I had a copy-paste error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1477#issuecomment-498268278:23,error,error,23,https://psicode.org,https://github.com/psi4/psi4/pull/1477#issuecomment-498268278,1,['error'],['error']
Availability,"OK, I had only run the default 50 steps. On Wed, Mar 30, 2016 at 9:53 AM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Thats very odd, I get a failure; > at a large number of steps for both SCF and DFT. I guess you can consider; > that this doesn't identify the TS, but it should still fail with a; > understandable error message.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203471756",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203487706:187,failure,failure,187,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203487706,2,"['error', 'failure']","['error', 'failure']"
Availability,"OK, I have finally managed to get a pair of builds (current master and this PR's branch) that do not entirely swallow the exception messages for write errors in the PK integral calculation. For me, it took building Psi4 entirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:151,error,errors,151,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857,5,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"OK, another change of plan. The only reason to symmetrize the response terms is to be able to use JK instances that use symmetry under the hood (which, AFAIK, is only `OUT_OF_CORE`). I'm half way through doing this, but it makes the code very messy and I only just realized that `OUT_OF_CORE` can't even handle non-symmetric density matrices. I think the best plan at this point is for me to abandon the symmetrization, clean the code up, squash the last few commits and add a py-side error message if `OUT_OF_CORE` is requested. Does anybody disagree? If more important integral technologies were affected, I'd say we go ahead an symmetrize. As it is, we'd be introducing a lot of messy code, just to cover an unimportant corner case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-234048374:485,error,error,485,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234048374,1,['error'],['error']
Availability,"OK, downloading the full log file I see that the error in ```mp2-module``` is on the line; ```--> compare_matrices(mp2totg, retG, 6, theme) ```. and the largest error is actually 1.91e-6, and 2.76e-6 to what I get on my workstation with ```master```. Looks like the numerical tolerance is just set too tight for the finite-difference algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-447944642:4,down,downloading,4,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-447944642,4,"['down', 'error', 'toler']","['downloading', 'error', 'tolerance']"
Availability,"OK, switched to python 2.7 and all is fine.; -Rollin. On Mon, Mar 14, 2016 at 9:48 AM, Lori A. Burns notifications@github.com; wrote:. > Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated; > qcdb within the last couple weeks with accumulated improvements and python; > 3.5 prep.; > ; > It doesn't look like I use dictionary comprehensions all that much, so you; > can try the following, then report any subsequent errors.; > ; > ```; > return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; > return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; > ```; > ; > Or, would you like to give python 2.7 a try? Do the binary instructions (; > http://psicode.org/psi4manual/master/conda.html#quick-installation); > through the conda update step (replace ""Linux"" with ""MacOSX"" in installer; > file name, if on Mac), be sure your which python points to 2.7, then; > compile psi4 with --python $MINICONDA/bin/python. When we get around to; > supporting python3.5, python2.6 support may go.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196346044.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196569625:435,error,errors,435,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196569625,1,['error'],['errors']
Availability,"OK, thanks I tracked it down it was a stray copy of forte. Thanks for the replies, appreciate it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010#issuecomment-1631582263:24,down,down,24,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631582263,1,['down'],['down']
Availability,"OK... I managed to get gpu_dfcc built as a separate tree using gcc/g++ 5.5.0 by adding; `-DCMAKE_PREFIX_PATH` (pointing at `psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK`); and; `-DOpenMP_LIBRARY_DIRS=/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin` ; to the do-configure script. (I'm not sure how that would translate into building it within the psi4 build.). gcc/g++-4.9 gave me compile errors about missing symbols and gcc/g++-6 triggers a known bug with the version of CUDA I have on Debian (9.1.85). (If I had gcc/g++-6 installed and told it to use 4.9, cmake still tried to pull in a load of headers from V6!). It's built, installed into my installed psi4 tree and the gpu_dfcc test jobs run happily with reasonable looking bits about the GPU in the output file. I suspect I'll need to try a bigger job to see what it's really doing, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333:430,error,errors,430,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333,1,['error'],['errors']
Availability,OPTKING PSIO error: optimization data write failure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789:13,error,error,13,https://psicode.org,https://github.com/psi4/psi4/issues/789,2,"['error', 'failure']","['error', 'failure']"
Availability,OPTKING: Optimization failure not throwing PsiException,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/800:22,failure,failure,22,https://psicode.org,https://github.com/psi4/psi4/issues/800,1,['failure'],['failure']
Availability,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236:18,down,downloaded,18,https://psicode.org,https://github.com/psi4/psi4/issues/2236,2,"['down', 'error']","['downloaded', 'error']"
Availability,Obligatory @andysim ping. @ymshi449 : Can I ask what you're trying to get? It looks like you want to get just the integrals on a certain block of atoms of a single molecule. There may be a better way to do this.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439#issuecomment-1038487993:20,ping,ping,20,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1038487993,1,['ping'],['ping']
Availability,Obligatory @hokru ping.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1452015040:18,ping,ping,18,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1452015040,1,['ping'],['ping']
Availability,"Obligatory @susilehtola and @hokru pings. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Improved UKS gradient parallelization. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Commented LSDA gradients; - [x] Synchronizing of RKS and UKS gradient code is **deferred** to a separate PR. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2839:35,ping,pings,35,https://psicode.org,https://github.com/psi4/psi4/pull/2839,1,['ping'],['pings']
Availability,Obligatory ping to @fevangelista on things Forte.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1837151573:11,ping,ping,11,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837151573,1,['ping'],['ping']
Availability,"Of the dozen or so headers on my computer by that name, only the ones supplied by the conda clang compilers (which I'm not using) have that set. So error makes some sense. Only thing I can think of is I haven't done a simint build on this machine since the default switched from `sse` to `avx`, though, as that happened 9 months ago, shows that I've been _really_ linux or mac-psinet bound of late. ##### psi4 cmake; ```; -- Setting (unspecified) option SIMINT_VECTOR: avx; ```. ##### simint cmake; ```; -- Maximum AM: 6; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=native; -- CMAKE_CXX_FLAGS: -stdlib=libc++ -march=native; -- SIMINT_C_INCLUDES: /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-mavx; -- SIMINT_LINK_FLAGS: ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356761851:148,error,error,148,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356761851,1,['error'],['error']
Availability,"Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated qcdb within the last couple weeks with accumulated improvements and python 3.5 prep. It doesn't look like I use dictionary comprehensions all that much, so you can try the following, then report any subsequent errors. ```; return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; ```. Or, would you like to give python 2.7 a try? Do the binary instructions (http://psicode.org/psi4manual/master/conda.html#quick-installation) through the `conda update` step (replace ""Linux"" with ""MacOSX"" in installer file name, if on Mac), be sure your `which python` points to 2.7, then compile psi4 with `--python $MINICONDA/bin/python`. When we get around to supporting python3.5, python2.6 support may go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196346044:282,error,errors,282,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196346044,1,['error'],['errors']
Availability,"Oh dear, it looks like this PR has been contaminated by non-you commits. See if you can follow the healing advice here https://github.com/psi4/psi4/pull/1490#issuecomment-457765390 . Ping if there are any problems. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328#issuecomment-1040547746:183,Ping,Ping,183,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1040547746,1,['Ping'],['Ping']
Availability,"Oh look at that; I wonder how I've managed to miss that. However, the documentation states ""MP2 natural orbitals only available for DF-RHF reference"". Does the fno code have these restrictions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/829#issuecomment-339624297:118,avail,available,118,https://psicode.org,https://github.com/psi4/psi4/issues/829#issuecomment-339624297,1,['avail'],['available']
Availability,Oh that's right. But shouldn't psi4 throw an error if both basis_guess and guess read have been set?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/612#issuecomment-278718646:45,error,error,45,https://psicode.org,https://github.com/psi4/psi4/issues/612#issuecomment-278718646,1,['error'],['error']
Availability,"Oh wow, I haven't experienced this error before. It detected the xz- and yz- mirror plane and nothing else. It should probably gracefully report the issue and then find a point group that best matches it. Even though you told Psi4 to use C1 symmetry it still attempts to detect the highest point group for reporting purposes. I'll see what I can do to fix this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380139496:35,error,error,35,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380139496,1,['error'],['error']
Availability,"Oh, and I meant to add that docs should say whether un-mass-weighted vs. mass-weighted and normalized vs. unnormalized normal coordinates are printed to the molden file. Pretty sure that it's the former on both choices. On the Python accessibility issue, there's some discussion [here](https://github.com/psi4/psi4/issues/347) (start in the paragraph above ""Future""). Findif's vibrational analysis capabilities have to be moved out of that module because it's organized on the assumption the psi4 has _no_ analytic Hessians available. Some of the shift to py-side is already in the works (@bwb314), and I expect this molden-writing can be moved py-side, too, once the data is accessible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286431537:524,avail,available,524,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286431537,1,['avail'],['available']
Availability,"Oh, sorry I missed the message about the TOCLEN. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Apr 4, 2016 at 10:21 AM, Daniel Smith notifications@github.com; wrote:. > The job did not have enough memory and failed due to a TOCLEN error. I; > shot you a gchat about this awhile back, but did not receive a response and; > consequently forgot about it.; > ; > > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford <; > > notifications@github.com> wrote:; > > ; > > What was the bug in cc5?; > > ; > > ## ; > > ; > > Prof. T. Daniel Crawford; > > crawdad@vt.edu; > > ; > > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5; > > > now; > > > runs, passes, and the output.ref is updated.; > > > ; > > > —; > > > You are receiving this because you were mentioned.; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > > ; > > > —; > > > You are receiving this because you authored the thread.; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205307609>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205318258",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205319180:240,error,error,240,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205319180,1,['error'],['error']
Availability,"Oh, the things you find on [the forums](http://forum.psicode.org/t/sapt2-calculation-stops-with-a-segmentation-fault-error/1138)!. User reported a segfault in a SAPT2 computation. I attempted to run the input file they provided, in serial. ```; memory 100 gb. molecule AP_BMIMBF4; {; 0 1; C 2.71424 3.35160 2.17047; C 2.61539 3.07721 0.69258; C 3.27155 1.81549 0.13150; C 3.01216 0.53303 0.90532; C 3.45716 -0.78046 0.26355; C 3.05053 -0.99330 -1.18650; C 3.20741 -2.40360 -1.74586; C 2.55026 -3.52443 -0.96032; F 3.17228 4.13514 -0.00592; F 1.27554 3.06932 0.32664; F 3.66787 0.59838 2.12267; F 1.67182 0.43073 1.22024; F 3.82500 -0.17529 -1.99644; F 1.75160 -0.57213 -1.38634; F 3.25533 -3.78096 0.19399; F 1.27730 -3.18683 -0.58308; H 2.25306 4.32050 2.37079; H 3.76241 3.37061 2.47326; H 2.19469 2.57073 2.72526; H 4.35180 1.97066 0.10411; H 2.92157 1.70418 -0.89385; H 4.54579 -0.84429 0.31346; H 3.04476 -1.57689 0.88214; H 4.27328 -2.63006 -1.82364; H 2.78870 -2.38708 -2.75512; H 2.50060 -4.45608 -1.52780; --; 0 1; C -3.87349 2.91061 -1.65876; N -2.75856 1.99410 -1.41455; C -1.50263 2.33407 -0.94691; C -0.83120 1.17172 -0.73344; C -2.84151 0.66484 -1.47790; N -1.68346 0.14262 -1.07953; C -1.46679 -1.28577 -0.78728; C -1.38542 -1.51827 0.72247; C -1.59684 -2.99357 1.06458; C -1.46598 -3.24276 2.56923; H -3.87594 3.66326 -0.86989; H -3.76218 3.38868 -2.63477; H -4.79884 2.33892 -1.60023; H -1.20045 3.35521 -0.79404; H 0.15181 0.98994 -0.34830; H -3.72834 0.10789 -1.72147; H -0.55449 -1.60196 -1.29485; H -2.32462 -1.81798 -1.19641; H -0.41387 -1.17340 1.09480; H -2.16763 -0.92438 1.19970; H -0.87575 -3.61428 0.52075; H -2.59984 -3.27619 0.72873; H -0.46552 -2.96983 2.92459; H -2.19613 -2.64103 3.11964; H -1.63860 -4.29508 2.81528; B -4.99249 -0.20013 0.53015; F -4.36607 -1.36290 -0.02014; F -5.60912 0.50296 -0.55477; F -3.96502 0.63394 1.05703; F -5.91416 -0.53978 1.49939. units angstrom; no_reorient; symmetry c1; }. set{ basis 6-311+G(d,p); scf_type df. DF_BASIS_SAPT 6-311+G(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1361:111,fault,fault-error,111,https://psicode.org,https://github.com/psi4/psi4/issues/1361,1,['fault'],['fault-error']
Availability,"Ok I got the following test failures:. ```; 252:nbody-convergence; 306:psimrcc-ccsd_t-4; 420:psi4numpy-cphf; 421:psi4numpy-dfmp2; 422:psi4numpy-rhf; 423:psi4numpy-rhf-gradient; 424:psi4numpy-rhf-hessian; 425:psi4numpy-fci; 429:python-energy; 430:python-curve; 431:python-pubchem; 432:python-mints9; 433:python-mints2; 434:python-cc54; 435:python-3-index-transforms; 436:python-mints13; 437:python-cc_amps; 438:json-schema-1-energy; 439:json-schema-1-ghost; 440:json-schema-1-orient; 441:json-schema-1-throws; 442:json-schema-1-gradient; 443:json-schema-1-properties; 444:gcp-pbeh3c; 445:gcp-hf3c; 446:gcp-hf3c-gradient; 447:gcp-hf3c-hessian; 448:gcp-dft-custom-hybrid; ```. And now my problem is on the import psi4. I tried adding the correct PYTHONPATH as follows:. ```; export PATH=/usr/local/bin:$PATH # python interpreter; export PATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin:$PATH # psi4 executable; export PYTHONPATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib//:$PYTHONPATH # psi4 pymodule; ```. But I get a new kind of error. Any idea how to fix it? :. ```; >>> import psi4; Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Expected in: flat namespace; in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); Im",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796:28,failure,failures,28,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796,1,['failure'],['failures']
Availability,"Ok so I think we are reading garbage from `PSIDATADIR/quadratures/1_x/R_avail.bin`:. On amd64 (my notebook):. ```; 588	 R_avail_file.read((char *)R_availp, nR * sizeof(double));; (gdb) ; 590	 auto err_table = std::make_shared<Matrix>(""Error Table (nR x nk)"", nR, nk);; (gdb) p *R_availp; $8 = 2; ```. And on s390x:. ```; 588 R_avail_file.read((char *)R_availp, nR * sizeof(double));; (gdb) ; 590 auto err_table = std::make_shared<Matrix>(""Error Table (nR x nk)"", nR, nk);; (gdb) p *R_availp; $21 = 3.1620201333839779e-322; ```. Not sure how this results in the exception (`indR` is optimized out), but there surely is a problem here. Is there anything odd with the way it is reading that? This looks a bit fragile to me:. ```; R_avail_file.read((char *)R_availp, nR * sizeof(double));; ```. OK, I guess the problem is that we are reading binary data, but there's no provision for big/little endian conversion, so it just gets garbage on other-endian architectures. Those two `*.bin` files in `quadratures/` are rather small, couldn't they be converted to text or what is their purpose?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451697801:235,Error,Error,235,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451697801,2,['Error'],['Error']
Availability,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332340271:936,error,errors,936,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271,1,['error'],['errors']
Availability,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:204,error,errors,204,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611,4,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"Ok yes Daniel was right, it was an error writing to file 32 not file 180 (I was misled because the last thing in output.dat was a line about file 180). If nmo increases, the problem can be fixed by just replacing file32 each time SCF finishes. I've implemented this and all test cases pass. If nmo decreases, the scf guess might fail, but in a couple of test cases it seems ok. I'm checking in these changes and adding a new test case that checks what happens when nmo increases during a geometry optimization. Pushing this to the psiworkweek branch but will incorporate into public branch in a few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-38125711:35,error,error,35,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-38125711,1,['error'],['error']
Availability,"Ok, @andysim and @rmcgibbo, try out a mkl-built psi4 for Mac and see if it fixes both, either, or none of your problems. This is a minimal build with libint (am4) and libxc as internal dylibs. Install into a new env with. ```; >>> conda create -n idp35 psi4test python=3 -c intel -c psi4; >>> source activate idp35; ```. ```; >>> otool -L lib/python3.5/site-packages/psi4/core.so ; lib/python3.5/site-packages/psi4/core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```. The env should look like this. Note that py36 is _not_ avail. Also, do _not_ install this into the main env of an anaconda or miniconda – subenvs only.; ```; >>> conda list; # packages in environment at /Users/loriab/linux/miniconda3/envs/idp35:; #; icc_rt 16.0.3 intel_6 [intel] intel; intelpython 2017.0.3 4 intel; mkl 2017.0.3 intel_6 [intel] intel; numpy 1.12.1 py35_intel_8 [intel] intel; openmp 2017.0.3 intel_8 intel; openssl 1.0.2k intel_3 [intel] intel; pip 9.0.1 py35_intel_0 [intel] intel; psi4test 1.2a1.dev370+d9c89ae py35_6 psi4; py 1.4.34 py35_0 defaults; pytest 3.1.2 py35_0 defaults; python 3.5.3 intel_1 [intel] intel; setuptools 27.2.0 py35_intel_0 [intel] intel; sqlite 3.13.0 intel_14 [intel] intel; tcl 8.6.4 intel_16 [intel] intel; tk 8.6.4 intel_26 [intel] intel; wheel 0.29.0 py35_intel_5 [intel] intel; xz 5.2.2 intel_15 [intel] intel; zlib 1.2.11 intel_2 [intel] intel; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311866695:1026,avail,avail,1026,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311866695,1,['avail'],['avail']
Availability,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:195,down,down,195,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,4,['down'],"['down', 'downloaded']"
Availability,"Ok, I checked the wrong repo. Sorry, miscommunication my fault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534#issuecomment-265801248:57,fault,fault,57,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265801248,1,['fault'],['fault']
Availability,"Ok, I have a [fix](https://github.com/raimis/psi4/pull/4) that works. The problem is that a new(ish) constructor was added [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform.cc#L112-L193), which expects the frozen occ, active occ, active vir, and frozen vir orbitals to be passed in that order. The DETCI code passes spaces (constructed [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ints.cc#L84-L87)) that are not consistent with this; the second space holds all the active orbitals in the `cisd-h2o+-0` test, while the third is empty:; ```; Irrep: 0 Space1: 1 Space2: 11 Space3: 0 Space4: 0; Irrep: 1 Space1: 0 Space2: 2 Space3: 0 Space4: 0; Irrep: 2 Space1: 0 Space2: 4 Space3: 0 Space4: 0; Irrep: 3 Space1: 0 Space2: 7 Space3: 0 Space4: 0; ```; The number of occupied per irrep is computed from the dimensions of these things, leading to an incorrect distribution of electrons. I tried to pass in different spaces from [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L171-L257) but couldn't find a set of spaces that didn't break at least one DETCI test. The occupation info is used to build the density matrix (from which the Fock matrix is built) during presorting of the integrals, which is where the seg fault happens. This Fock build is really vestigial code that was only ever there to make sure libtrans did the same thing as the Psi3 code it replaced at the time, so I decided to simply make the Fock build optional. It's clear that DETCI doesn't use the Fock matrix from Libtrans because it gets the right answer despite having bad occupation info. The frozen core density is correct; this seems to be all that DETCI uses, so I think this fix is good. Requesting reviews from @CDSherrill and @dgasmith to make sure this is reasonable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-454523627:1301,fault,fault,1301,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-454523627,2,['fault'],['fault']
Availability,"Ok, I see. 1.1a1 should do nicely for you. Tagged versions _are_ static once pushed to the repo. On the main repo, we'll probably change `1.0 to 1.0approx` and clear out the old ones, since the history re-write has rendered them defunct. But the history rewrite was a once-in-many-years event that cut our download size by 90%, so tags hereafter should be stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273811816:306,down,download,306,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273811816,2,['down'],['download']
Availability,"Ok, I think the RHF code is ready to go now. It can run out of core, and is symmetry tolerant. Adding UHF will take a quite a bit of time to debug. Density fitting should be quite fast to code up, as it's only really needed in the second derivatives and the G terms in the response code. Per the above discussion, we can save those tasks for another day. I will let these tests run, then you can merge whenever is most convenient for the new CMake infrastructure. Also, let me know if you'd rather me squash all these commits, which go back all the way to November 2015 and could cause some issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-231160542:85,toler,tolerant,85,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231160542,1,['toler'],['tolerant']
Availability,"Ok, I've cleared up the last two missing items.; - [x] user dft dicts `dft_functional={..., 'dispersion': {...}}` now work. they go through the same route, but the pieces are treated a little differently. ""params"" are the final say -- the user option `DFT_DISPERSION_PARAMETERS` has no effect. ""name"" and ""citation"" aren't ""blessed"" like the official ones, so they're not going to get printed unless they match official ones. I think that's reasonable -- don't want to be printing citations unquestioned.; - [x] now tracing citations again. see below for examples. always printing the disp level citation. printing the dash param citation if available (not listed for many common functionals. No opportunity for user-defined citation. It can be put it, but I didn't see the point of trusting unverified values.; - [x] put in a few more checks that'll catch some problems when adding new official fctl dictionaries.; - [x] renamed some files based on slack discussion. ```; ================================================================================; => DLDF+D09: Empirical Dispersion <=. Podeszwa and Szalewicz Dispersion Correction; Pernal, K.; Podeszwa, R.; Patkowski, K.; Szalewicz, K. (2009), Phys. Rev. Lett., 103: 263201. s6 = 1.000000. ================================================================================; => OTPSS-D: Empirical Dispersion <=. Grimme's -D2 Dispersion Correction; Grimme, S. (2006), J. Comp. Chem., 27: 1787-1799; Parametrisation from: L. Goerigk, S. Grimme, J. Chem. Theory. Comput. 6, 107-126, 2010. s6 = 1.000000; alpha6 = 20.000000; sr6 = 1.150000. ================================================================================; => Custom: Empirical Dispersion <=. Grimme's -D2 Dispersion Correction; Grimme, S. (2006), J. Comp. Chem., 27: 1787-1799. s6 = 2.750000; alpha6 = 20.000000; sr6 = 1.100000. ================================================================================; ```. Also been rebased. Windows is failing b/c it's downloading py27. I'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151#issuecomment-426866307:642,avail,available,642,https://psicode.org,https://github.com/psi4/psi4/pull/1151#issuecomment-426866307,2,['avail'],['available']
Availability,"Ok, Nov 2014 (around https://github.com/psi4/psi4private/commit/986b28fdeabeabf43a79b08de5b5e79141719d84 ), the new basis set handling went in. When an auxiliary basis set isn't explicitly specified by the user (in fact explicitly setting is not reccommended as the internal defaults are superior), it looks on a per-atom basis (other def.) for the correct auxiliary basis for that orbital basis (e.g., `aug-cc-pvdz-ri` for `aug-cc-pvdz` and `cc-pvdz-ri` for `sto-3g`), then failing that uses ~ `def2-qzvpp` fitting basis sets. The def2's are defined through Kr w/o ECPs (psi4 has no ECPs), so you should never get an ""auxilliary basis not available"" for elements <=Kr. I think that's fulfilling our educational obligation. You still can get some oddities (see https://github.com/psi4/psi4public/issues/144), but the intent of this ticket is met.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/44#issuecomment-182604995:640,avail,available,640,https://psicode.org,https://github.com/psi4/psi4/issues/44#issuecomment-182604995,1,['avail'],['available']
Availability,"Ok, as promised, the QC deps for Psi4 are now available on conda-forge natively for `osx-arm64`. Note that these are cross-compiled on regular `osx-64`, so don't get tested. I'd be glad to hear if/how they're working. You can either build psi4 master and still provide your own libint or use the libint package and build a special branch of psi4. There's a c-f tracker for osx-arm64 packages at https://github.com/orgs/psi4/projects/2/views/5. #### psi4 master; `conda install gau2grid libxc-c optking qcengine -c conda-forge`; #### psi4 with #2861 ; * `conda install gau2grid libxc-c optking qcengine conda-forge/label/libint_dev::libint -c conda-forge`; * or `conda install gau2grid libxc-c optking qcengine libint -c conda-forge/label/libint_dev -c conda-forge` (channel order matters)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603:46,avail,available,46,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603,1,['avail'],['available']
Availability,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240647129:997,error,error,997,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129,2,['error'],['error']
Availability,"Ok, curious. Ours are 15.0.3. @dgasmith tried it on a couple architectures and executables, but good to know the error isn't seen everywhere. May have to wait for a calmer development environment here to examine again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215894127:113,error,error,113,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215894127,1,['error'],['error']
Availability,"Ok, four failures:. ```; The following tests FAILED:; 	269 - props2 (Failed); 	270 - props3 (Failed); 	324 - soscf-dft (Failed); 	349 - scf-coverage (Failed); ```. props3 and scf-coverage could be healed by slight relaxation:; ```; TestComparisonError: 	Lithium anion stability: computed value (-7.4168185) does not match (-7.4168196) to 6 digits.; ```. ```; TestComparisonError: 	64-pole ZZZZZZ: computed value (-20544.12046) does not match (-20544.12057) to 4 digits.; ```. But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773#issuecomment-321913106:9,failure,failures,9,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106,1,['failure'],['failures']
Availability,"Ok, hopefully the latest commit has made Psi4 safe for Accelerate again. I wasn't able to recreate the missing symbol error on Linux, but I think these workarounds will suffice. I at least got the CMake to find the MKL fns and then not find them under a different name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541:118,error,error,118,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541,1,['error'],['error']
Availability,"Ok, relevant PR is in. And I tried an internal gpu_dfcc build, hit your cannot find TargetLAPACK error, and fixed it by passing CMAKE_PREFIX_PATH to the external project. gpu_Dfcc built correctly, but of course I can't run it. So I'm hopeful that it'll work for you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400824451:97,error,error,97,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400824451,1,['error'],['error']
Availability,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:273,down,downstream,273,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447,1,['down'],['downstream']
Availability,"Ok, so in the `ijij` case I see this difference between s390 and amd64 when parsing the third character, also note the different length and content of `labels`:. amd64:. ```; Breakpoint 3, get_combined_dims_view (labels=0x7fffffffcd20 ""ij\376\376"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114	 int label = (signed char)labels[idim];; (gdb) n; 2116	 if (label < 0) {; (gdb) p label; $43 = -2; (gdb) p idim; $44 = 3; (gdb) p labels[idim]; $45 = -2 '\376'; (gdb) p labels; $46 = 0x7fffffffcd20 ""ij\376\376""; ```. s390x:. ```; Breakpoint 7, get_combined_dims_view (labels=0x3ffffffcdf8 ""ij\376\377\375\377\061\340"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114 int label = (signed char)labels[idim];; (gdb) n; 2116 if (label < 0) {; (gdb) p label; $278 = -1; (gdb) p idim; $279 = 3; (gdb) p labels[idim]; $280 = 255 '\377'; (gdb) p labels ; $281 = 0x3ffffffcdf8 ""ij\376\377\375\377\061\340""; ```. If I then go on on s390 by mangling the `label` variable, it exits fine. ```; (gdb) set variable label = -2; (gdb) c; Continuing.; 47.048397425357216; [Inferior 1 (process 26977) exited normally]; ```. So I guess the `int label = (signed char)labels[idim];` is to fault here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263:1228,fault,fault,1228,https://psicode.org,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263,1,['fault'],['fault']
Availability,"Ok, thank you Susi. @loriab I see that you have added a synchronization step in AIOHandler::write, see former commit id c205621. Do you remember the reason for that ? As far as I can remember, the way AIOHandler is designed we should never need a synchronization here. @jturney From the git history, the error message Susi is seeing was added by you during KTB. Do you remember why you put it there ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277502940:304,error,error,304,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277502940,1,['error'],['error']
Availability,"Ok, thanks to your very detailed examples, I was able to track down the problem(s). If you pull the latest version of the code, it should be fixed. There's a new test case, extern1, that confirms the correctness of the gradients by finite differences. The PBE results don't seem to match the Gaussian results that you posted; I don't have access to Gaussian so I can't investigate that any further, I'm afraid. A good place to start would be an SCF calculation, because DFT grids are not uniform between packages. It's also a good idea to manually specify the basis set (Psi4 uses the G94 standard) to ensure that both packages are using the exact same functions. With these changes, the energies and gradients should match exactly; if not it's probably confusion between A/Bohr in the Gaussian input for the TIP3P fragment. Until these fixes, Psi4 assumed that the external potential was always in Bohr, but now the code will assume the same units as those used to specify the QM molecule. Good luck!. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184#issuecomment-156220388:63,down,down,63,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156220388,1,['down'],['down']
Availability,"Ok, thanks. Should I open a different issue for the sapt4 error?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260#issuecomment-184839252:58,error,error,58,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184839252,1,['error'],['error']
Availability,"Ok, that makes sense. I got Psi4 by cloning the repo as usual, and it seems like I'm pulling CheMPS2 from the Miniconda p4dev (Psi4 development) environment. Using `conda update chemps2` doesn't show any available updates; the button on the CheMPS2 page says the most recent version is 1.8.4, but the Conda site says it's 1.8.3. I'll try pulling from GitHub and see if that fixes anything. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347979916:204,avail,available,204,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347979916,1,['avail'],['available']
Availability,"Ok, the big merge is in. If you'd like to work on Py3/conda, that'd be great. Note that the python bindings are now through pybind11 and there is (this issue)[https://github.com/pybind/pybind11/pull/227] that I haven't looked into. The existing conda recipes for psi4 are (here)[https://github.com/psi4/psi4meta/tree/master/conda-recipes] and though they were in pristine shape at the beginning of July, they haven't had CMakeRewrite/KillTheBoost applied to them yet. And ignore the `LIBC_INTERJECT` business. Basically, if you'd like to work on this, wonderful, and if you have any problems, ping me. But in any case, I will get to this eventually (see, #111).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-249032322:593,ping,ping,593,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-249032322,1,['ping'],['ping']
Availability,"Ok, the error is a combination of utc & snowflake. Nothing to worry about, I think. Python 3.12 changed some things and Ben replaced some utc commands in the last couple of days. _But_ there was a snowflake bug that he also fixed, and we're grabbing inconsistent qcportal and fractal pieces: https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml#L234 @bennybp's doing a v0.52 release in the next couple days that should fix all this. Fine to merge with these errors until then. ```; E --> snowflake = FractalSnowflake(); E client = snowflake.client(); E h2o = geometry(""""""; E O; E H 1 1.0; E H 1 1.0 2 104.5; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! cannot import name 'now_at_utc' from 'qcportal.utils' !; E ! (/usr/share/miniconda3/envs/p4build/lib/python3.12/site- !; E ! packages/qcportal/utils.py) !; E ! !; E !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563:8,error,error,8,https://psicode.org,https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563,2,['error'],"['error', 'errors']"
Availability,"Ok, the test case error is fixed in #1495; this one's ready IMHO",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-457265162:18,error,error,18,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-457265162,1,['error'],['error']
Availability,"Ok, tracked down the whole DFHelper metric error in cartesian basis sets. Turns out that this was not an error after all in DFHelper and had to do with the fact that DiskDFJK never passed in it's metric condition tolerance to the FittingHelper. This *was* a bug. This lead to quite a few other changes in the past 5 commits and quite a bit of time to track down. This does mean we have a decision to make DFJK has been using a `1.e-10` tolerance for about two years now rather than a `1.e-12` tolerance. Should we consider changing these tolerances at all?. @loriab Yup, patched up opt13.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446#issuecomment-449669501:12,down,down,12,https://psicode.org,https://github.com/psi4/psi4/pull/1446#issuecomment-449669501,8,"['down', 'error', 'toler']","['down', 'error', 'tolerance', 'tolerances']"
Availability,"Ok, we're up on c-f at https://anaconda.org/conda-forge/psi4/files . For now, you'll need `conda install psi4 -c conda-forge -c conda-forge/label/libint_dev -c conda-forge/label/psi4_dev`. After the v1.8 release, you can drop the `psi4_dev` but not the `libint_dev`. It'll be changing often as I need to add osx_arm64 and py311. And there's stuff in master it doesn't have, and stuff in it that master doesn't have. But all the main functionality should be fine. ### Please report *any* problems or oddities. None of the docs reflect new build/install procedures yet. I'll be making a list of where folks go awry. First one (that's bitten me and Jonathon):; * To start an environment with conda compilers from c-f, don't use `conda create -n mydev gxx_linux-64 ... -c conda-forge` as the c-f analog to the usual procedure. That will work to form the env, but if you look in `conda list`, there's some deep pieces like the sysroot still present from `defaults`. When you start compiling, it will give you obscure C++ errors outside your code. Instead, use `conda create -n mydev cxx-compiler ... -c conda-forge` (same for all platforms) which will give a cohesive compiler stack.; * (Added 28 Apr) If you use the c-f dep packages to _compile_ psi4, remember to mind libints: `master` + `psi4/label/dev::libint2` or `cf_iterations` + `conda_forge/label/libint_dev::libint` (also note `libint2` vs `libint`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384:1016,error,errors,1016,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384,1,['error'],['errors']
Availability,"Okay thanks! I will close :). On Fri, Jan 29, 2021 at 10:54 AM Lori A. Burns <notifications@github.com>; wrote:. > Those comments aren't always 1:1 with the contents.; >; > But what's happening for 6-311+G* in particular is that 3 partial basis; > sets are getting merged: the 6-311 defined through Kr, the polarization; > defined through Kr, and the diffuse only defined through Ca. Only elements; > with partial basis sets available for all three pieces show up in the full; > basis file, so Kr, etc. are missing. Looking at 6-311+G* at; > https://www.basissetexchange.org/, that ends at Ca, too, so nothing to; > update. Does this clear up what's going on?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2097#issuecomment-769922422>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKNB26P7KNIQBAOTKDLTCETS4LR4DANCNFSM4WZDDXEA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2097#issuecomment-769932213:425,avail,available,425,https://psicode.org,https://github.com/psi4/psi4/issues/2097#issuecomment-769932213,2,['avail'],['available']
Availability,"Okay, I got something to run, but it's getting inf's and nan's. Looks like built-in basis sets cause errors, while with custom ones the calculation runs, but something weird happens. The matrices look alright: the Cholesky procedure builds MOs, the Fock matrix is built and looks fine, but in the next iteration the density and Fock matrices are full of NaNs....; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.05,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.05]); activate(mol); set s_orthogonalization partialcholesky; set df_scf_guess false; set scf_type direct; set basis ugbs; #set basis cc-pvdz # fails with SOBasis: shell changed; #set basis cc-pvdz-decon # fails with SOBasis: shell changed; set debug 10; set guess core; energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595998279:101,error,errors,101,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595998279,1,['error'],['errors']
Availability,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/290#issuecomment-189916188:145,robust,robust,145,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188,1,['robust'],['robust']
Availability,"Okay, I was able to build after I updated to the latest Psi4 master and changed the git tag in `external/downstream/v2rdm_casscf/CMakeLists.txt`. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426#issuecomment-451784852:105,down,downstream,105,https://psicode.org,https://github.com/psi4/psi4/issues/1426#issuecomment-451784852,1,['down'],['downstream']
Availability,"Okay, I'll report back any failures I have.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130115735:27,failure,failures,27,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130115735,1,['failure'],['failures']
Availability,"Okay, so I think the problem is that i did not have ```gcc``` in the ```/home/artfin/miniconda/envs/psi4-env/bin```. So I installed it with ```conda install -c anaconda gcc=4.8.5``` in the ```psi4-env``` environment. ; After rerunning ```psi4``` I still get:. ```psi4: symbol lookup error: psi4: undefined symbol:```; ```_ZTTSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE```. ```export LD_LIBRARY_PATH=/home/artfin/miniconda/envs/psi4-env/lib:$LD_LIBRARY_PATH``` does not change anything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-297042835:283,error,error,283,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297042835,1,['error'],['error']
Availability,"Okay, so this is not built in a conda environment, but using system compiler etc. In that case, libtensorlight is downloaded and put into ~/.local, as the compiler flags suggest, too. Hard to debug for me, but concerning this PR, there is no harm in bumping the reqd adcc version. Please merge this if you agree @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785#issuecomment-1322484515:114,down,downloaded,114,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322484515,1,['down'],['downloaded']
Availability,"Okey dokey, I pushed a downgrade to 3.7, which will hopefully fix it. A bit off topic, but I don't think props4 is running, which has the `quicktests` label. Any idea why that might be the case? The are a number of tests, including props1-3, that have the `shorttests` label, but not `quicktests`. Now we're all Travisified we should look over those and see which ones are quick enough to run for every PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235152988:23,down,downgrade,23,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235152988,1,['down'],['downgrade']
Availability,"On ECP front, input:; ```; memory 12 gb. set basis def2-qzvp; set basis_guess def2-svp. database('b3lyp-d2', 'heavy28'); ```; yields:; ```; ==> Requested Energy <==. --------------------------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2 Reagent 3; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt [Eh] Wt; --------------------------------------------------------------------------------------------------------------------------; HEAVY28-1 1.2900 0.1427 -1.1473 -4.8005 -432.98126591 -1 -216.49051929 2; HEAVY28-2 2.4200 2.6044 0.1844 0.7717 -292.96755189 -1 -216.49051929 1 -76.47288217 1; HEAVY28-3 1.4000 0.7130 -0.6870 -2.8744 -615.93287983 -1 -216.49051929 1 -399.44122431 1; HEAVY28-4 0.8500 0.2787 -0.5713 -2.3904 -677.34282211 -1 -216.49051929 1 -460.85185870 1; HEAVY28-5 1.1600 0.5208 -0.6392 -2.6745 -2791.33529091 -1 -216.49051929 1 -2574.84394169 1; HEAVY28-6 1.4200 0.3997 -1.0203 -4.2690 -514.89833461 -1 -216.49051929 1 -298.40717839 1; HEAVY28-7 0.6900 0.3720 -0.3180 -1.3306 -273.08491143 -1 -216.49051929 1 -56.59379936 1; HEAVY28-8 1.3200 0.0652 -1.2548 -5.2502 -390.55270102 -1 -195.27629857 2; HEAVY28-9 0.6800 -0.0169 -0.6969 -2.9160 -411.76679086 -1 -195.27629857 1 -216.49051929 1; HEAVY28-10 0.4400 0.1562 -0.2838 -1.1876 -271.74942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.121",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/795#issuecomment-326351281:324,Error,Error,324,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281,1,['Error'],['Error']
Availability,"On RDR's point 2,. * Looks like CMake has the following hash algorithms available `file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)`; * And ExternalProject has `URL_HASH ALGO=value` to specify them; * `conda install openssl -c conda-forge` followed by `openssl sha256 your_sdist.tar.gz` to compute them. Only problem is that I suspect that's a tarball (single file) procedure, not the GH hash we usually do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856#issuecomment-344288297:72,avail,available,72,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-344288297,1,['avail'],['available']
Availability,"On further thought, I am not sure this is an error. In UHF there's no guarantee that the orbitals are spin-paired; the beta spatial orbitals are allowed to differ from the alpha ones. This naturally leads to spin contamination, but that's a feature not a bug!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2476#issuecomment-1073334686:45,error,error,45,https://psicode.org,https://github.com/psi4/psi4/issues/2476#issuecomment-1073334686,1,['error'],['error']
Availability,"On issue #1861 , reading serialized wavefunctions for CASCI/detci computations was solved. However, I wonder if it was also solved for CASSCF calculations, as I get the following error when performing a CASSCF calculation with a given input wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:179,error,error,179,https://psicode.org,https://github.com/psi4/psi4/issues/1871,1,['error'],['error']
Availability,"On my HPC cluster compute nodes do not have access to a user's home directory. This makes dftd3 crash with the following error:. RuntimeError: [Errno 13] Permission denied: '/home/s/spoel/dftd3_d6f02c65'. I checked the source code dftd3.f and found; ```; call get_environment_variable(""HOME"", homedir); write (*,*) trim(homedir); write(dtmp,'(a,''/.dftd3par.'',a)')trim(homedir),trim(ftmp) ; inquire(file=dtmp,exist=ex); ```. Do I need to hack the fortran to make this run? I realize this is not strictly a Psi4 problem...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1960:121,error,error,121,https://psicode.org,https://github.com/psi4/psi4/issues/1960,1,['error'],['error']
Availability,"On my machine, the tests fail with a segfault. Using gdb it seems to originate somewhere in Python. Backtrace below for test case adc1, fails right after the SCF without errors, looks similar to Travis failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/387#issuecomment-222263701:170,error,errors,170,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222263701,2,"['error', 'failure']","['errors', 'failure']"
Availability,"On some architectures, the testsuite has errors like:. ```; 52/140 Test #191: fcidump ..........................***Failed 0.47 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 32, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 339, in compare_fcidumps; ref_energies = _energies_from_fcidump(ref_intdump); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 363, in _energies_from_fcidump; intdump['uhf']); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 379, in _scf_energy; exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); File ""/usr/lib/python3/dist-packages/numpy/core/einsumfunc.py"", line 1346, in einsum; return c_einsum(*operands, **kwargs). ValueError: dimensions in operand 0 for collapsing index 'þ' don't match (-168832168 != 5); Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. These are the lines, it is failing during the `exchange`:. ```; coulomb = np.einsum('iijj->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); ```. Now when I duplicate the `coulomb` line in place of the `exchange` line, it runs fine. Also, if I dump out something between the two, e.g. `print(occ_sl)`, it runs fine, so there is probably some subtle issue in NumPy's `einsum`. I was not able to produce a minimal test-case, mostly because my Python/NumPy-fu is not strong enough to figure out what `ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]` really is. Any idea what it could be and whether there's a robust was (some barrier?) to get around it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465:41,error,errors,41,https://psicode.org,https://github.com/psi4/psi4/issues/1465,2,"['error', 'robust']","['errors', 'robust']"
Availability,"On the SAPT wavefunction: right now, we do not know what SAPT should return. I see that you have added an error message reading ""SAPT incomplete wavefunction is only dimer SCF"", which is a bit confusing because at first I thought SAPT had a problem _reading_ the wavefunction in. Maybe a message reading ""SAPT returns incomplete wavefunction, only dimer SCF"" would be better. Also, I don't think SAPT can meaningfully return a wavefunction, at least not in its current state... Do you think it would be better if methods like that just returned an empty structure or the equivalent of a NULL pointer in Python ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-184846709:106,error,error,106,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184846709,1,['error'],['error']
Availability,"On the [install page](https://psicode.org/installs/v191/), for Linux > Conda > 3.11 > Stable, it returns. ```; conda install psi4 python=3.11 -c conda-forge ; ```. Should it not be using the conda-forge/label/libint_dev?. I should note that libint main just updated 12 hrs ago and seems to cause some seg faults in psi4 1.91.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3144:305,fault,faults,305,https://psicode.org,https://github.com/psi4/psi4/issues/3144,1,['fault'],['faults']
Availability,"On the `clean` issue, I don't see a change in behavior from your PR. The below (on master) also requires the intervening `clean()` to avoid a PSIO error. Maybe the rules of how much the user should need to call clean need rethinking, but at least they are steady (one used to have to call it after practically everything). ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 2 0 0; }. set basis cc-pvdz; sapt_global = energy(""sapt2+(3)"", molecule=ne2). clean() # PSIO error without this line. # these two calls are equivalent; #cbs_string = energy(""mp2/6-311++G** + D:ccsd/6-311+G""); cbs_string = energy(cbs, corl_wfn='mp2', corl_basis='6-311++G**', delta_wfn='ccsd', delta_basis='6-311+G'); compare_values(-257.50097969, cbs_string, 5, 'cbs'); ```. On the caspt2, runs fine for me, too. If you want to see the error try [looking in the testing log file](http://psicode.org/psi4manual/master/build_planning.html#faq-testsoutput). But it's certainly outside the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379830469:147,error,error,147,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379830469,3,['error'],['error']
Availability,"On the `exception.message`, change https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L3934 from `== False` to `is False`, then run cepa2. You should get an exception that doesn't have a message, so it throws another exception. On the Cons, yes, there are rather more kept errors than I would have expected. We can ignore them more broadly in `.flake8` if we choose, including all line lengths and imports not used. The noqa for things like VARH don't bother me too much. On the overriding a single error, yes, would have to insert to ignore code fairly promptly to keep getting good results. I've had the driver to within a few chosen exceptions of pep8 compliant, so maintaining it as such I don't think is too onerous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263290760:294,error,errors,294,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263290760,2,['error'],"['error', 'errors']"
Availability,"On the driver: Presently, `select_` methods (e.g., https://github.com/psi4/psi4/blob/master/share/python/procedures/proc.py#L127) are only used for post-scf, but it may be worthwhile to put such in for scf. Their purpose is to organize and filter availability based on reference (rhf, etc.), algorithm (conv, df, etc.), and module (irrelevant here- all scf). `gradient()` knows how to play nicely with `select_` methods, using analytic when avail. and falling back to findif if not. That's the behavior we want for hessian, too. Lines like https://github.com/psi4/psi4/blob/master/share/python/driver.py#L567 could also be absorbed into a `select_`. Basically, the procedures dict calls the `select_scf_grad/hess` and that passes along to `run_scf` which calls `scf_helper`. On the vibrational analysis/symm sorting:; Andy and I were chatting about this after your talk, @dgasmith. He found the libmints matrix to transform the Cart Hessian back to symmetry blocked. So then can readily classify. That should do for the Abelian PGs. @bwb314 has been commissioned. ```; mints = MintsHelper(wfn.basisset()); cdsalcs = mints.cdsalcs(15, True, True); that does it; U = cdsalcs.matrix(); well, the 15 should really be 0xF; Hsymm = U^T H U; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230652637:247,avail,availability,247,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230652637,2,['avail'],"['avail', 'availability']"
Availability,"On the first item, yes, that's what DFMP2 module does now, and that's what DFOCC will do when I get through with it. In effect yes, but there's enough combinations of scf_type/higher_type and variation among modules (some may be equipped to handle mixed df&conv) that I'm not going to reset the types bluntly. Let's see how mp2 goes first. Ok, good to know there's a plausible reason. Here's the magnitude of the error (for BH3+), if that helps, @CDSherrill . ```; mp2 rohf conv: 2 occ*.............................................PASSED # HF; mp2 rohf conv: 2 occ*: computed value (-0.0594063) does not match (-0.0609392) to 6 decimal places. # MP2 corl; mp2 rohf conv: 2 occ*: computed value (-26.0030128) does not match (-26.0045457) to 6 decimal places. # MP2 tot; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192951491:413,error,error,413,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192951491,1,['error'],['error']
Availability,"On the one hand, for cases like SAPT/auto-CP/etc, I'd be fine with just disabling `num_frozen_docc` -- it's clearly inappropriate in any supersystem calculation where the user knows at the `energy` call that it's going to run sub-systems. But going upthread back to the original issue, there's use-cases like `MBIS_VOLUME_RATIOS` that are an add-on to what would otherwise be a valid standalone calculation to use `num_frozen_docc` with (a monomer calc), and there's still the question of what should happen there. You can't just guess based on calc name, because you don't know if the user is going to call `oeprop` down-stream. Disabling `num_frozen_docc` for any calculation where this *could* happen would effectively ban the keyword. . A reasonableness check, or a good guess, could be inserted before any calculation done on a new mol if `num_frozen_docc` is set in the global scope -- with a warning. Or simply error out if a new mol is calculated without `num_frozen_docc` having been updated (not sure how reasonable that is?). . This is but one user's thoughts, of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916:617,down,down-stream,617,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916,4,"['down', 'error']","['down-stream', 'error']"
Availability,"On the test failures, can you find out why through http://psicode.org/psi4manual/master/build_planning.html#faq-testsoutput? Especially the ""align"" ones, it might just be something not installed. The ""cubeprop"" ones have a history of being compiler sensitive, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402524125:12,failure,failures,12,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402524125,1,['failure'],['failures']
Availability,"On the test suite error, it's a good idea to turn convergences way down (e.g., 10 or 12) to compute the reference values, then remove conv settings for the final test case and do the compare_values check to the number or fewer decimals than the default for the calc type (energy, gradient, etc.). You're checking the latter to 6, so probably better ref vals will do the trick.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346#issuecomment-437675136:18,error,error,18,https://psicode.org,https://github.com/psi4/psi4/pull/1346#issuecomment-437675136,2,"['down', 'error']","['down', 'error']"
Availability,"One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a bit more in the spirit of object orientation. I'm a little puzzled as to why it detected a new linear bend in Frag 2 (one that was already there!) but not in Frag 1, i.e. whether it found it but ignored it had distorted far enough away from being linear, in which case, surely it should have deleted it and replaced it with a normal bend! I'll keep on digging...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-296160675:1459,fault,fault,1459,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675,1,['fault'],['fault']
Availability,"One kicked down to future work, but all others applied.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2551#issuecomment-1105931246:11,down,down,11,https://psicode.org,https://github.com/psi4/psi4/pull/2551#issuecomment-1105931246,1,['down'],['down']
Availability,One more thing. I ran this with valgrind and no notable errors popped up. So no uninitialized memory use or buffer overflow here.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1228512946:56,error,errors,56,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1228512946,1,['error'],['errors']
Availability,"One of my runs had one of the fnocc's failing. I'm wondering if a run; through Valgrind is needed. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Tue, Jul 21, 2015 at 12:07 PM, Eugene DePrince notifications@github.com; wrote:. > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/120#issuecomment-123386691.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/120#issuecomment-123392969:258,error,errors,258,https://psicode.org,https://github.com/psi4/psi4/issues/120#issuecomment-123392969,1,['error'],['errors']
Availability,"One of our students has been working through the Psi4Education site and one of the labs requires the user to run MP4 on boron. If I'm reading the [managed method matrix](http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods) correctly then the user should specify an ROHF reference and Psi4 will use DETCI. However we receive the following error:. Input file: [h2o_mp4.txt](https://github.com/psi4/psi4/files/148253/h2o_mp4.txt). ```; An error has occurred Py-side; Traceback:; <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>. File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282:357,error,error,357,https://psicode.org,https://github.com/psi4/psi4/issues/282,3,"['avail', 'error']","['available', 'error']"
Availability,"One of the [limitations](https://psicode.org/psi4manual/master/tdscf.html#known-limitations) of Psi's TDSCF implementation is that it raises an error upon requesting TDDFT triplets from a restricted reference. To understand the problem, it's easiest to work with a toy system. I'm choosing the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. mtd = ""hf/sto-6g"". set tdscf_tda true; set reference uks ; set tdscf_states [0, 0, 2, 0]. energy(""td-"" + mtd). set reference rks ; set tdscf_states [0, 0, 1, 0]; energy(""td-"" + mtd). set tdscf_triplets only; energy(""td-"" + mtd); ```. Within the TDA approximation, we need to find the roots of a Hermitian matrix. This matrix has the structure J + V + X. J consists of _Coulomb integrals_, V consists of _the exchange correlation second derivative elements_, and X is everything else - it's not relevant for this problem. Because of the spin-properties of the Hamiltonian (and approximate DFT functionals), the matrix becomes block-diagonal upon transforming the basis states (i-a) α and (i-a) β into their normalized plus and minus combinations. The plus eigenvectors correspond to singlets, and the negative eigenvectors to triplets. Matrix elements take the form 1/2 * [(α|α) ± (α|β) ± (β|α) + (β|β)], where parentheses denote a spin-dependent matrix element. Upon exploiting spin-restriction, this reduces to [(α|α) ± (α|β)]. Now, J matrix elements are spinfree, i.e., the Coulomb integral (pq|pq) doesn't care whether the bra and the ket have the same spin-index or not, so long as p and q have the same spinindex. Therefore, the plus spin combination reduces to 2 * (pq|pq), and the minus spin combination reduces to 0. The V matrix elements are not spinfree. Whether you differentiate with respect to an alpha excitation twice or an alpha followed by a beta produces different integrals. The formula [(α|α) ± (α|β)] does not simplify. Unfortunately, Psi combines the V terms into the J terms. Psi currently computes the + case of the V ter",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2841:144,error,error,144,https://psicode.org,https://github.com/psi4/psi4/issues/2841,1,['error'],['error']
Availability,"One of the comments in this chain referred to unrelaxed densities. We should check with @lothian, but I think typically we want relaxed densities (where available) for the purposes of computing properties.... dipole moments, for example, should be more accurate when computed using relaxed densities. (There's an old Bartlett paper that does this comparison for CCSD, as I recall). On the other hand, I do not know that relaxed densities are the appropriate ones if we want to compute natural orbitals (which is more the context of the current discussion). For example, I'm not sure if relaxed densities satisfy Tr(\gamma) = N. Will we wind up needing to keep both relaxed and unrelaxed densities in wfn?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260131540:153,avail,available,153,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260131540,1,['avail'],['available']
Availability,"One thing that I would like to note is that prior to https://github.com/psi4/psi4/pull/2686 this DSYEV failure would not have been caught, and Psi4 would have carried on with whatever the failed diagonalization returned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1468114267:103,failure,failure,103,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468114267,1,['failure'],['failure']
Availability,"OpenBLAS and MKL can be easily switched out by the usual conda-forge mechanism, not sure about OpenMP. Is there Intel OpenMP available on conda-forge?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1898#issuecomment-785910480:125,avail,available,125,https://psicode.org,https://github.com/psi4/psi4/issues/1898#issuecomment-785910480,1,['avail'],['available']
Availability,"Opportunity to avoid Libxc5 surprises ourselves and help Libxc out by testing their new parameters interface: https://gitlab.com/libxc/libxc/-/merge_requests/284 . I'll get to it later this week, but if anyone wants to play with the p4/xc connection, go for testing. Ping me on any setup issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934:267,Ping,Ping,267,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934,1,['Ping'],['Ping']
Availability,"Optimization flags come from [another source](https://github.com/AnacondaRecipes/aggregate/blob/master/ctng-compilers-activation-feedstock/recipe/conda_build_config.cos6.x86_64.yaml#L46), but yes, I see what you mean that they look to be clobbered. I can rebuild openblas locally to see if that helps. But I'd be surprised if there were fundamental accuracy errors in the openblas package that weren't noticed by the whole conda-forge-dependent community (where openblas is their default blas_impl) or conda defaults (which still has `nomkl` options)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840:358,error,errors,358,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840,1,['error'],['errors']
Availability,"Or, an even simpler fix would be to store the ```R_avail``` and ```error``` arrays as ASCII, like the quadrature rules themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451995913:67,error,error,67,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451995913,2,['error'],['error']
Availability,"Other than seeing python test failures caused by psi4 being compiled with python3 not python2 assumed by the tests, nothing big comes out. dft-grad-meta is failing, but that might be due to me using a different version of libxc. Some tests are also failing for me due to the default libint parameters. If you have a setup that can run all tests, you might want to double check.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451606476:30,failure,failures,30,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451606476,1,['failure'],['failures']
Availability,"PBSTF(char,int,int,double *,int)"" (?C_DPBSTF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsv，该符号在函数 ""int __cdecl psi::C_DPBSV(char,int,int,int,double *,int,double *,int)"" (?C_DPBSV@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbsvx，该符号在函数 ""int __cdecl psi::C_DPBSVX(char,char,int,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPBSVX@psi@@YAHDDHHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrf，该符号在函数 ""int __cdecl psi::C_DPBTRF(char,int,int,double *,int)"" (?C_DPBTRF@psi@@YAHDHHPEANH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpbtrs，该符号在函数 ""int __cdecl psi::C_DPBTRS(char,int,int,int,double *,int,double *,int)"" (?C_DPBTRS@psi@@YAHDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpocon，该符号在函数 ""int __cdecl psi::C_DPOCON(char,int,double *,int,double,double *,double *,int *)"" (?C_DPOCON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dpoequ，该符号在函数 ""int __cdecl psi::C_DPOEQU(int,double *,int,double *,double *,double *)"" (?C_DPOEQU@psi@@YAHHPEANH000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dporfs，该符号在函数 ""int __cdecl psi::C_DPORFS(char,int,int,double *,int,double *,int,double *,int,double *,int,double *,double *,double *,int *)"" (?C_DPORFS@psi@@YAHDHHPEANH0H0H0H000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposv，该符号在函数 ""int __cdecl psi::C_DPOSV(char,int,int,double *,int,double *,int)"" (?C_DPOSV@psi@@YAHDHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dposvx，该符号在函数 ""int __cdecl psi::C_DPOSVX(char,char,int,int,double *,int,double *,int,char,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DPOSVX@psi@@YAHDDHHPEANH0HD00H0H0000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:33695,error,error,33695,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"PCM fails with symmetry group coordinates, need to add error message for this to help user",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1939:55,error,error,55,https://psicode.org,https://github.com/psi4/psi4/issues/1939,1,['error'],['error']
Availability,PCMSolver Error w/ B97-3c,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3202:10,Error,Error,10,https://psicode.org,https://github.com/psi4/psi4/issues/3202,1,['Error'],['Error']
Availability,"PEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbsvx，该符号在函数 ""int __cdecl psi::C_DGBSVX(char,char,int,int,int,int,double *,int,double *,int,int *,char,double *,double *,double *,int,double *,int,double *,double *,double *,double *,int *)"" (?C_DGBSVX@psi@@YAHDDHHHHPEANH0HPEAHD000H0H00001@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrf，该符号在函数 ""int __cdecl psi::C_DGBTRF(int,int,int,int,double *,int,int *)"" (?C_DGBTRF@psi@@YAHHHHHPEANHPEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgbtrs，该符号在函数 ""int __cdecl psi::C_DGBTRS(char,int,int,int,int,double *,int,int *,double *,int)"" (?C_DGBTRS@psi@@YAHDHHHHPEANHPEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebak，该符号在函数 ""int __cdecl psi::C_DGEBAK(char,char,int,int,int,double *,int,double *,int)"" (?C_DGEBAK@psi@@YAHDDHHHPEANH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebal，该符号在函数 ""int __cdecl psi::C_DGEBAL(char,int,double *,int,int *,int *,double *)"" (?C_DGEBAL@psi@@YAHDHPEANHPEAH10@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgebrd，该符号在函数 ""int __cdecl psi::C_DGEBRD(int,int,double *,int,double *,double *,double *,double *,double *,int)"" (?C_DGEBRD@psi@@YAHHHPEANH00000H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgecon，该符号在函数 ""int __cdecl psi::C_DGECON(char,int,double *,int,double,double *,double *,int *)"" (?C_DGECON@psi@@YAHDHPEANHN00PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeequ，该符号在函数 ""int __cdecl psi::C_DGEEQU(int,int,double *,int,double *,double *,double *,double *,double *)"" (?C_DGEEQU@psi@@YAHHHPEANH00000@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgees，该符号在函数 ""int __cdecl psi::C_DGEES(char,char,int,double *,int,int *,double *,double *,double *,int,double *,int)"" (?C_DGEES@psi@@YAHDDHPEANHPEAH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgeesx，该符号在函数 ""int __cdec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:17678,error,error,17678,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Internal code has been replaced by an external Python module, QCManyBody; - [x] Several n-body efficiency improvements and a new option `supersystem_ie_only` that computes the IE rather than MBE, useful for trimers and larger.; - [x] bug fix for gradient or Hessian vmfc for max_nbody >=3. ## Dev notes & details; * Unrelated; - [x] updated basis_set_exchange to v0.10 and probably fixed the internal build; - [x] switched internal build of optking to a tag that can work with py312; - [x] qcvar `GEOMETRY ITERATIONS` wasn't actually getting set. `OPTIMIZATION ITERATIONS` is actually listed in the docs glossary, so switched to that and set it.; - [x] added `resp` to the codedeps now that it's on c-f, and thus to the ecosystem testing; - [x] fixed previously excused docs links to qcfractal; - [x] added back dftd4 to ecosystem for py312; * QCManyBody: build; - [x] Adds a new pure-python required dependency, `qcmanybody`, available from c-f or pypi; * QCManyBody: BSSE efficiency improvements/bug fixes; - [x] `bsse_type=cp` + `return_total_data=True` (not default for energy) will now no longer do every species in both supersystem (for cp) and natural (for uncp) basis sets. It will do everything in the supersystem basis (since cp requested) and only monomers in the monomer basis (for rtd=T).; - [x] `driver=g/h` + `return_total_data=False`, an unlikely combination, won't just fail with syntax error; - [x] `bsse_type=vmfc` + `driver=g/h + `max_nbody`>2 are now computed correctly. Previously (at least since v1.6), only the two highest-body terms were getting summed into the contribution, so values were wrong for trimers and above (assuming max_nbody=fragment count).; - [x] `bsse_type=vmfc` + multilevel were running unnecessary calculations, so now more efficient; * QCManyBody output; - [x] the internal driver_nbody code had been setting a lot of terse qcvariables like ""2"", ""3CP"", ""GRADIENT 1"". ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3160:1374,avail,available,1374,https://psicode.org,https://github.com/psi4/psi4/pull/3160,1,['avail'],['available']
Availability,"PRs psi-rking/optking#24 and psi4/psi4#1335 are a pair. Together, they get most optimizations working for Psi. In particular have working:. - [x] ordinary, opt-is-full job optimizations; - [x] collecting all the psivars so psi can read them in. basically, collecting enough to generate a skeleton (mol, basis, psivars) that can be passed back from `psi4.optimize(..., return_wfn=True)`; - [x] inlining optking's logging output into the psi4 output file; - [x] resetting psi4's options on either side of the `optking.run_json_dict()` call. The trouble was that the psi4-s imported by optking were clearing and setting options (as is proper for indep json runs) such that the calling psi4 didn't have its original options in globals upon optking termination; - [x] starting to catch optking errors (str in json) and re-raising them as psi4 errors. Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped me for a while b/c I only got the final error (""dynamic level exceeded"") and I thought it was behaving differently btwn direct optking and psi4 initiated runs. To me it seems clear that if geom_maxiter is exceeded, then optimizer quits directly (though perhaps that's clearer when geom_maxiter=2 than =200). @psi-rking @AlexHeide",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436437450:789,error,errors,789,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436437450,6,['error'],"['error', 'errors']"
Availability,"PS: In #2997 I added the band-aid workaround of printing to `stderr` for PSIO errors, since those are quite common due to disks getting full and whatnot, but doing that globally in `PSIEXCEPTION` itself seems inelegant.; Users who are not affected by the missing error message would get the entire stack trace, etc. twice, which would make the already quite noisy error exits worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785:78,error,errors,78,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785,3,['error'],"['error', 'errors']"
Availability,PSIO Error During SAPT,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1328:5,Error,Error,5,https://psicode.org,https://github.com/psi4/psi4/issues/1328,1,['Error'],['Error']
Availability,PSIO Error Using ODC after OMP2/OLCCD on UHF Reference,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288:5,Error,Error,5,https://psicode.org,https://github.com/psi4/psi4/issues/1288,1,['Error'],['Error']
Availability,"PSIO error 12 means write error:; https://github.com/psi4/psi4/blob/58efb602ee9fdf3d774a3a6f073dbf47f2ac249b/psi4/src/psi4/libpsio/config.h#L55. Unfortunately your environment does not seem to give you the rest of the error message, so we dont actually know why a write has failed. Are you sure you have enough free disk space for the temporary files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915:5,error,error,5,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915,3,['error'],['error']
Availability,"PSIO error in ""make tests""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56:5,error,error,5,https://psicode.org,https://github.com/psi4/psi4/issues/56,1,['error'],['error']
Availability,PSIO error in dmrg calculation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464:5,error,error,5,https://psicode.org,https://github.com/psi4/psi4/issues/464,1,['error'],['error']
Availability,"PSIO errors are currently being written to `stderr`. (See [this line and the switch statement below](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/error.cc#L54).) Although the fact that there is a PSIO error is written to the output file, I'm semi-frequently encountering forum users who aren't familiar with `stderr`. It either takes longer than it should for me to get this information, or they can't provide it. For ease of debugging, this error information should be logged somewhere like the output file, where we can guarantee new users will keep it and be able to find it, so they can pass it on to developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2019:5,error,errors,5,https://psicode.org,https://github.com/psi4/psi4/issues/2019,4,['error'],"['error', 'errors']"
Availability,"PSIO errors are notoriously difficulty to understand, but my intuition is to say that this is a memory issue, if it's dependent on the size of the active space. What do you mean by ""I ask for 16gb memory on the cluster""? I'm not debugging your queuing system, but does that mean you're changing `psi4.set_memory(int(2e9))`? That looks closer to 1.6 than 16 GB.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900:5,error,errors,5,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900,2,['error'],['errors']
Availability,"Packages are ticking along steadily (follow graphs/views/labels at tracker above). If anyone wants to try out very early versions of the psi4 package, you can download artifacts from a commit that works at https://github.com/conda-forge/staged-recipes/pull/22328",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483659817:159,down,download,159,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483659817,1,['down'],['download']
Availability,"Pair energies computed by `fnocc` have some issues:. 1. They're not computed consistently across methods. DF-CCSD has them, but non-DF methods do not, for some reason.; 2. `fnocc` computes spin-summed pair energies. The convention we agreed upon at the conference call was to separate same-spin and opposite-spin pair energies.; 3. `fnocc` stores the pair energies with the convention that \sum_{ij} e_ij should equal the correlation energy. As agreed upon at the conference call, we want e_ij to be the total energy of the (i, j) pair. If i != j, the current convention is off by a factor of 2.; 4. The `fnocc` pair energies do not include the delta MP2 correction, so \sum_{ij} e_ij does not equal the correlation energy if FNOs are used. I'll be the one to deal with at least the three items on this list, but obligatory @edeprince3 ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2560:836,ping,ping,836,https://psicode.org,https://github.com/psi4/psi4/issues/2560,1,['ping'],['ping']
Availability,"Parts are arriving for an AMD server in our lab, so this may get more testing. But for now, OpenBLAS is going to go the way of Accelerate (on Mac) and just get a nice Use At Your Own Risk warning. I daresay Psi could use openblas directives better, but the stack of difficulties (wrong fctls, scaling, numpy compatibility, conda compatibility) is too high when there's a free, compatible, and working alternative in place. Glad to revisit periodically. P. S. There might be a further technical choice why the conda openblas package isn't building the Fortran/LAPACK code with optimizations (https://github.com/psi4/psi4/issues/1009#issuecomment-387075271), but an immediate technical reason is that conda gfortran 7.2.0 isn't distributing `omp_lib.[h|mod]`, so threading isn't avail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669:777,avail,avail,777,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669,1,['avail'],['avail']
Availability,Passes all tests but:; ```; The following tests FAILED:; 	370 - pywrap-align (Failed); 	371 - pywrap-align-chiral (Failed); ```; The two crash with import error; I guess that's just an environment issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-383096630:155,error,error,155,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-383096630,1,['error'],['error']
Availability,"Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; `PSIO_ERROR: 12 (error writing to file)` should in most cases be a disk space issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661786049:204,error,error,204,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661786049,1,['error'],['error']
Availability,Ping @loriab I think all showstoppers have been resolved,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-618303217:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-618303217,1,['Ping'],['Ping']
Availability,"Ping for @CDSherrill to weigh in, per DGAS recommendation. I can fix this issue myself if you have nothing to add.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1890#issuecomment-632034182:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/issues/1890#issuecomment-632034182,1,['Ping'],['Ping']
Availability,Ping me for review after Pt 1.5 gets merged in. I'm worried about possible merge conflicts.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1332351744:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332351744,1,['Ping'],['Ping']
Availability,Ping me for review after merge conflict resolve.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2670#issuecomment-1230399537:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/2670#issuecomment-1230399537,1,['Ping'],['Ping']
Availability,Ping me for review again when you have this passing tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1084556386:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1084556386,1,['Ping'],['Ping']
Availability,"Ping me when merge conflicts are fixed, and I'll review it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536#issuecomment-1092773416:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/2536#issuecomment-1092773416,1,['Ping'],['Ping']
Availability,"Ping me when this could use another review from me. From tests, it looks like there's a bug in the current code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-1027259299:0,Ping,Ping,0,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1027259299,1,['Ping'],['Ping']
Availability,"Pinging @loriab once again, requesting review",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3157#issuecomment-2091855931:0,Ping,Pinging,0,https://psicode.org,https://github.com/psi4/psi4/pull/3157#issuecomment-2091855931,1,['Ping'],['Pinging']
Availability,"Pinging @lothian, who said he'd look into the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-936911249:0,Ping,Pinging,0,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-936911249,1,['Ping'],['Pinging']
Availability,Pinging @msaitow in case he has time to help.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-511126630:0,Ping,Pinging,0,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-511126630,1,['Ping'],['Pinging']
Availability,Pinging @psi4/editors again. Please review!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-572037768:0,Ping,Pinging,0,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-572037768,1,['Ping'],['Pinging']
Availability,"Pinging... Well, @lothian?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1686#issuecomment-515268274:0,Ping,Pinging,0,https://psicode.org,https://github.com/psi4/psi4/issues/1686#issuecomment-515268274,1,['Ping'],['Pinging']
Availability,"Playing around with absolute errors between finite difference and analytical for a UKS water cation (mean/max):; ```; # Cation Water; B3LYP - 0.000005 / 0.000019; TPSS - 0.000259 / 0.001291; TPSS - 0.000264 / 0.001321 # (150, 434) ; M05 - 0.001182 / 0.006572; ```. Big kick from GGA -> MGGA as commented. Now what if we run UKS and RKS gradients on a neutral molecule:; ```; # Neutral Water; RKS TPSS - 0.000007 / 0.000024; UKS TPSS - 0.000007 / 0.000024; RKS M05 - 0.000020 / 0.000091; UKS M05 - 0.000012 / 0.000091; ```. So now we know pretty much that the XC input and output is correct, the integration of the XC data to gradient is correct, and that the normal XC data to AO gradient integration is correct. With this knowledge we are left with a single piece of code that could be [wrong](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/v.cc#L2477-L2496). We therefore spot the error (a good exercise before looking at the answer) and we now get the following:. ```; # Cation Water - fixed; RKS TPSS - 0.000007 / 0.000024; UKS TPSS - 0.000007 / 0.000028; RKS M05 - 0.000020 / 0.000091; UKS M05 - 0.000012 / 0.000050; ```. This makes me happy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-384487129:29,error,errors,29,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-384487129,2,['error'],"['error', 'errors']"
Availability,"Please guys, I am still battling with how I can generate potential energy curves for the CF molecule for at 5 excited states. Here's the code I am trying to debug it's error.; import numpy as np; import matplotlib.pyplot as plt; import psi4. def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'rohf',; 'maxiter': 500,; 'restricted_docc': [1, 0, 1, 0],; 'active': [3, 1, 2, 2],; 'mcscf_max_iter': 1000,; 'num_roots': 1,; 'avg_states': [0],; 'avg_weights': [1],; 'e_convergence': 1e-8,; 'd_convergence': 1e-8,; 'guess': 'sad'; }). try:; energy = psi4.energy('scf'); return energy; except Exception as e:; print(f""Error computing ground state energy at bond length {bond_length}: {str(e)}""); return float('nan'). def compute_energies(bond_length, num_states, methods_to_try):; psi4.core.set_output_file('output.dat', False); ; cf_molecule = psi4.geometry(f""""""; 0 2; C; F 1 {bond_length}; symmetry c1; units angstrom; """"""). psi4.set_options({; 'basis': 'cc-pvtz',; 'reference': 'uhf',; 'scf_type': 'pk',; 'e_convergence': 1e-8,; 'd_convergence': 1e-8,; 'maxiter': 500,; }). energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. try:; scf_e, scf_wfn = psi4.energy('scf', return_wfn=True). for method in methods_to_try:; psi4.set_options({f'{method.lower()}__nroots': num_states}); energy, wfn = psi4.energy(method, return_wfn=True); for state in range(1, num_states + 1):; if energy is not None: # Check if energy calculation was successful; energies[method][state].append(energy[state - 1]); wfns[method][state].append(wfn[state - 1]); else:; energies[method][state].append(float('nan')); wfns[method][state].append(None). except Exception as e:; print(f""Error computing energies at bond length {bo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:168,error,error,168,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,2,"['Error', 'error']","['Error', 'error']"
Availability,"Please let us know how you installed Psi4. In particular, we need to know the version number that should appear in the header of your input file. @loriab, I hate to keep pinging you on things, but I feel that the CFOUR interface is your department.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155129126:170,ping,pinging,170,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155129126,1,['ping'],['pinging']
Availability,Please ping me for review once Lori approves. She knows this part of the code better than I do.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1261118004:7,ping,ping,7,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1261118004,1,['ping'],['ping']
Availability,"Please post the other systems as well. For a normal organic molecule one should not need 0.0 tolerance. ; Looking at the `screen_zero.out.txt` output I see negative virtual orbital energies in the converged SCF, which tells me something is still wrong. Zwitterionic system?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-779484366:93,toler,tolerance,93,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-779484366,1,['toler'],['tolerance']
Availability,Please rebase and push again. The test failure (unrelated to this PR) should be fixed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2761#issuecomment-1302395632:39,failure,failure,39,https://psicode.org,https://github.com/psi4/psi4/pull/2761#issuecomment-1302395632,1,['failure'],['failure']
Availability,"Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553:18,error,error,18,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553,1,['error'],['error']
Availability,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369640226:919,error,error,919,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226,2,['error'],['error']
Availability,"Post 1.1 maintenance, mainly testing and MINAO",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/726:9,mainten,maintenance,9,https://psicode.org,https://github.com/psi4/psi4/pull/726,1,['mainten'],['maintenance']
Availability,"Posting Dom's very nice summary for easier perusal and searchability. Effective `scf_type df` Testing: `mem_df` & `disk_df`; =====================================================. All tests listed below examine calls to both `energy()` and `gradient()` when; employing the `scf_type mem_df` and `scf_type disk_df` settings. Each test; employs a different model chemistry (indicated in the test description) and the; Physicists' water molecule, unless otherwise indicated. 1. Physicists' water, HF/6-31G; - **TEST FAILED**; - Error message:; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); ; RuntimeError:; Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; The most recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:525,Error,Error,525,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['Error'],['Error']
Availability,"Pretty sure I'm using the homebrew boost, but that could still be the; problem. I upgraded homebrew a few days ago, but I didn't recompile PSI; since. The current homebrew boost is 1.60.0, and cmake sees it when it; configures. Everything compiles smoothly, but I get the following error; immediately on any attempt to execute with any input file:. Traceback (most recent call last):. File ""<string>"", line 6, in <module>. File ""/Users/crawdad/psi4/share/psi4/python/aliases.py"", line 39, in; <module>. ```; from wrappers import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/wrappers.py"", line 39, in; <module>. ```; from driver import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/driver.py"", line 265, in; <module>. ```; for ssuper in superfunctional_list():; ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 3365, in; superfunctional_list. ```; sup = superfunctionals[key](key, 1, 1); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1910, in; build_b3lypd1_superfunctional. ```; sup = build_b3lyp_superfunctional(name, npoints, deriv); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1224, in; build_b3lyp_superfunctional. ```; sup = psi4.SuperFunctional.blank(); ```. TypeError: No to_python (by-value) converter found for C++ type:; boost::shared_ptrpsi::SuperFunctional. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:39 PM, Andy Simmonett notifications@github.com; wrote:. > Messaging from 30000 feet, @lothian https://github.com/lothian . Fancy!; > I bet the problem you're seeing is due to some incompatibility between the; > way boost and psi4 are compiled. On the Mac I had a hard time getting a GCC; > version to compile. I had to compile boost with some modified settings to; > get the code to link, but it failed in the way that you described when it; > did link. I had no problems using the Homebrew (or the Psi4 bundled) Boost; > if I used clang.; > ; > —; > Reply to this emai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178853828:282,error,error,282,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178853828,1,['error'],['error']
Availability,Print full PSIO error message to cerr as well,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997:16,error,error,16,https://psicode.org,https://github.com/psi4/psi4/pull/2997,1,['error'],['error']
Availability,"Proposal for keyword reorganization, replacing `DFT_PRUNING_SCHEME` like so:. ```; DFT_PRUNING_SCHEME = 'FUNCTION' 'REGION'; DFT_PRUNING_FUNCTION = 'FLAT' 'P-SLATER' '...' ; DFT_PRUNING_REGION = 'ROBUST' 'TREUTLER'; ```. Maybe current `DFT_PRUNING_SCHEME` could handle both sub-options somehow? but I don't see an easy way to do it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494350678:196,ROBUST,ROBUST,196,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494350678,1,['ROBUST'],['ROBUST']
Availability,"Provided your `ldd -v /miniconda/envs/psi4-env/lib/python2.7/site-packages/psi4.so` is actually `ldd -v /home/artfin/miniconda/envs/psi4-env/lib/python2.7/site-packages/psi4.so`, then your `ldd` trace looks good. I'd like to see your `gcc --version` return the `/home/artfin/miniconda/envs/psi4-env/bin/gcc`, though. Could you `source activate psi4-env` and try running psi4 again. Failing that, try the `export LD_LIBRARY_PATH=/home/artfin/miniconda/envs/psi4-env/lib:$LD_LIBRARY_PATH`. And supply your exact error, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-296875163:510,error,error,510,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-296875163,1,['error'],['error']
Availability,"Psi currently can't project orbitals across different symmetries. Attempting gives you the error, `Cannot compute projection of different symmetries.` We should be able to project to the proper subgroups. This is a common problem in finite difference computations where read is enabled. For an example file. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. This issue is blocking the expected behavior upon fix of #1296. Even when reading orbitals from the original C2v geometry, the orbitals can't be projected to Cs symmetry. #1296 will address problems of poor read orbitals and switching from one proper subgroup of the reference symmetry to another proper subgroup that is not a subgroup of the previous proper subgroup. (Example: A C1 displacement and then a Cs displacement.). Although this causes similar _symptoms_ to #1296, its fix is beyond the scope of modifications to the finite difference code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1297:91,error,error,91,https://psicode.org,https://github.com/psi4/psi4/issues/1297,1,['error'],['error']
Availability,"Psi has a mechanism to make VV10 a post-iteration correction. How about allowing stability analysis / TDDFT if VV10 is post-iterative, and raising an error otherwise, directing users to make VV10 post-iterative?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849#issuecomment-1380313699:150,error,error,150,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380313699,1,['error'],['error']
Availability,"Psi's default behavior is to default to the LibXC density tolerance, although this can be overridden if the user supplies the `DFT_DENSITY_TOLERANCE` keyword. This is a large cutoff indeed, and I have not found any mention in DFT hessian papers of special recommendations for screening based on density, only recommendations for screening of AO-indexed quantities. (See Sec. IIIA [here](https://aip.scitation.org/doi/10.1063/1.466887). Sadly, I have found no record of Ref. 48 ever being published.) This seems large to me, but I'd rather not touch it too much without either an expert opinion or word from @dgasmith on what the impetus for this cutoff was.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2834#issuecomment-1351452556:58,toler,tolerance,58,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1351452556,1,['toler'],['tolerance']
Availability,Psi4 1.2 seg fault,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088:13,fault,fault,13,https://psicode.org,https://github.com/psi4/psi4/issues/1088,1,['fault'],['fault']
Availability,"Psi4 1.3.2 happily runs analytic derivatives when X2C is enabled, even though as confirmed by @fevangelista on Slack the gradient is not correct since it is missing the terms arising from X2C. The code should throw an error for analytic derivatives when X2C is employed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2197:218,error,error,218,https://psicode.org,https://github.com/psi4/psi4/issues/2197,1,['error'],['error']
Availability,Psi4 Run Time Error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552:14,Error,Error,14,https://psicode.org,https://github.com/psi4/psi4/issues/552,1,['Error'],['Error']
Availability,Psi4 Runtime Error inside Jupyter Notebook,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1794:13,Error,Error,13,https://psicode.org,https://github.com/psi4/psi4/issues/1794,1,['Error'],['Error']
Availability,"Psi4 doesn't seem to be initializing global variables in a way that can be accessed by plugins. One example is `psi::outfile`. Steps to recreate:; - Create a new plugin. Tested on the scf template.; - Configure with `psi4 --plugin-compile`; - Adding the `-DCMAKE_BUILD_TYPE=Debug` also causes this.; - Build with `cmake --build (directory)`; - Running gives a segmentation fault. Output from valgrind with the debug build type gives the following.; ```; ==98805== Memcheck, a memory error detector; ==98805== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.; ==98805== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info; ==98805== Command: /home/user/psi4/bin/psi4 input.dat; ==98805== ; ==98805== Invalid read of size 8; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:373,fault,fault,373,https://psicode.org,https://github.com/psi4/psi4/issues/3200,2,"['error', 'fault']","['error', 'fault']"
Availability,"Psi4 is really only safe to install with a defaults base, not a c-f base, on Linux. If you added `defaults` to the channel list or `anaconda::intel-openmp`, it'd likely solve, but I think you'd get a runtime error related to symbols and/or mkl- vs openblas-based environment. It's possible to get it working through a careful install order (iirc) or to run two conda envs at once (one defaults-based with psi4 and one c-f based with others) as the ecosystem GHA does. But on the whole, Linux psi4 in c-f env is not suggested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1164880108:208,error,error,208,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1164880108,1,['error'],['error']
Availability,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463:362,error,error,362,https://psicode.org,https://github.com/psi4/psi4/issues/2463,3,"['Error', 'error']","['Error', 'error']"
Availability,"Psi4 version 0.4.186 was installed using miniconda on Linux 4.4.5-200.fc22.x86_64 #1 SMP Thu Mar 10 17:54:17 UTC 2016 x86_64 x86_64. Parenthetical polarization qualifiers in Pople basis set names do not parse reliably. While 6-31G(d), 6-31G(d,p) names are accepted, more elaborately polarized basis set names fail unless [+,()] conversion to _underscore_ is already done. ""set basis **6-311G(2d,2p)**"" is in the attached example. ; Instead of seeking file **6- 311g_2d_2p_.gbs**, it aborts from the boost-python module (instead of from ./share/psi4/python/inputparser.py or similar):. > _An error has occurred. Traceback:; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > psi4.set_global_option(str, str, str); > did not match C++ signature:; > set_global_option(Ss, N5boost6python4listE); > set_global_option(Ss, N5boost6python4listE, PN3psi8DataTypeE); > set_global_option(Ss, i); > set_global_option(Ss, d); > set_global_option(Ss, Ss): File ""<string>"", line 28, in <module>_. [h2o.zip](https://github.com/psi4/psi4/files/190703/h2o.zip)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-201953614:209,reliab,reliably,209,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-201953614,2,"['error', 'reliab']","['error', 'reliably']"
Availability,"Psi4 was changing Libint2 requirements a good deal in mid-2021 through early-2022. So if your environment is from before, say, April 2022, but your psi4 src is newer, it's better to create a fresh psi4-dev env. At present you should be using one of. * [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2); * [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); * [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2). You can see what you've got with `conda list`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2879#issuecomment-1437802626:337,down,download,337,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437802626,3,['down'],['download']
Availability,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462:46,failure,failures,46,https://psicode.org,https://github.com/psi4/psi4/issues/1462,3,"['Error', 'failure']","['Error', 'failures']"
Availability,PsiUtil error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407:8,error,error,8,https://psicode.org,https://github.com/psi4/psi4/issues/407,1,['error'],['error']
Availability,"Py 3.6 is now available on anaconda as well, see #1827.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1825#issuecomment-594346555:14,avail,available,14,https://psicode.org,https://github.com/psi4/psi4/pull/1825#issuecomment-594346555,1,['avail'],['available']
Availability,Python argument types error with embedded basis set data,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/79,1,['error'],['error']
Availability,QCEngine wavefunction error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1987:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/issues/1987,1,['error'],['error']
Availability,QCFractal Causes Test Suite Failure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2873:28,Failure,Failure,28,https://psicode.org,https://github.com/psi4/psi4/issues/2873,1,['Failure'],['Failure']
Availability,"Quite right on the chicken/egg problem. One approach I considered was to get normal 3-round approval of this PR with the current scf-only changes. The re-rebase it, `c-f` it, and post it to psi4/psi4 as a branch. _Then_ ppl can make additional EFP/PCM/etc. PRs to that branch rather than master, so all the discussion will stay on psi4/psi4 but we won't have an enormous final PR that no one wants to review. For longer term, though, yes, if we had a stable, vetted, low-key release every couple months, there wouldn't be this considerable pressure to maintain master in top-notch working order. And if we wanted to deprecate something, wouldn't take 2 years to get through warning release, then error release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/847#issuecomment-347013624:696,error,error,696,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347013624,1,['error'],['error']
Availability,"R will be smoother, and CompositeJK development can continue parallel to the developments discussed in https://github.com/psi4/psi4/pull/2682. Additionally, this PR serves as a first step the to decomposition of https://github.com/psi4/psi4/pull/2682 as discussed in that PR's comments, allowing for the full standardization of IncFock among integral-direct JK subclasses. For reviewers, since this PR is the bottleneck for two different routes of JK development (CompositeJK and IncFock standardization), it should be considered the highest-priority JK development PR to merge into Psi4 at the moment. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Switches DFJLinK to using the incremental Fock build implementation used in DFJCOSK. This change standardizes the incremental Fock implementation between DFJLinK and DFJCOSK and improves the memory usage of DFJLinK in the process.; - [X] Changes LinK machinery to support new incremental Fock formalism. ## Questions; - [ ] Since this PR specifically focuses on changes to DFJLinK, there are still a couple of small differences in IncFock between DFJLinK and DFJCOSK, mainly, refactorings and the aforementioned bells and whistles that DFJLinK has that DFJCOSK doesn't. Would it be better to make adjustments to DFJCOSK in this PR as well, to further standardize the two; or is it preferrable to punt that down to the next CompositeJK PR, when DFJLinK and DFJCOSK are combined into the pilot CompositeJK implementation? If we decide to make the changes to DFJCOSK this PR, it would essentially consist of refactoring the DFJCOSK IncFock to match that of DFJLinK, and adding the bells and whistles that DFJLinK currently has.; - [ ] Should the relevant test outputs be updated?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792:3452,down,down,3452,https://psicode.org,https://github.com/psi4/psi4/pull/2792,1,['down'],['down']
Availability,"REENING` keywords available in Psi4. Of the currently-available JK tests, scf5 covers a wide variety of build methods, but only at a single screening type per method (density or csam, depending on the method). Meanwhile, `test_erisieve.py`, after the updates introduced in https://github.com/psi4/psi4/pull/2973, tests a wide variety of screening types, but with limited testing in conjunction with different JK builds (the only tests that don't use the Python interface of `TwoBodyAOInt` directly, use `SCF_TYPE=DIRECT` or `DF` as the JK method for screening comparisons). This leaves a lot of untested JK build+screening combos, which may be potentially broken and uncaught by the CI as a result. As a matter of fact, such cases actually do exist in the code currently (e.g., CompositeJK methods + no screening). This PR adds a new pytest module, `test_comprehensive_jk_screening.py`. It is effectively an expanded version of the scf5 test module, testing one of the scf5 systems (singlet oxygen) with the same basis set, but also including different screening methods and algorithmic subtypes available in Psi4. Screening is assumed to have an insignificant impact on energy within the tolerance used, so all screening types for a given method use the same reference energy. Some combinations of method and screening type throw an exception by design; this is accounted for in the test by testing that such combinations do indeed throw an exception as expected. Other combinations of method and algorithm are broken at the moment and error out; these are simply skipped for now. They are all logged in the same spot, and can and will be addressed in future PRs. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new pytest module to Psi4, `test_comprehensive_jk_screening.py` , to test different combinations of JK build algorithms and ERI screening methods. ## Questions; - [x] Would the test in `test_comprehensive_jk_screening.py` be better placed in `test_eris",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2978:1221,avail,available,1221,https://psicode.org,https://github.com/psi4/psi4/pull/2978,1,['avail'],['available']
Availability,RHF/ROHF stability analysis is already implemented but following instabilities (`STABILITY_ANALYSIS=FOLLOW`) is only available with UHF. Once we have the generalized Davidson solver (#886) it will be possible to:; - Add RHF/ROHF root following; - Move the UHF stability analysis code to use the solver and maintain a single interface; ; See #973 for some more information.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1005:117,avail,available,117,https://psicode.org,https://github.com/psi4/psi4/issues/1005,1,['avail'],['available']
Availability,"RT MDET; Title; multideterminant WFN generated from Psi4 output data. ! some title; ! empty string or ignored; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ1(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ4(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ4(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ5(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ5(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; ; PRomotion replace the specified orbital at its original position with the requested orbital.; ; Thus, if the MSCF calculation is performed for CASINO, it is necessary simultaneously with the molden file create correlation.data. If PSI4 using configuration state function (**CSF**), then group of determinants for each **CSF** should be labeled for simultaneous optimization like the 2nd and 3rd determinants in the example above. The opt-flag for all determinants except the first one should be equal to 1. PSI4 [output](https://github.com/user-attachme",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:1923,down,down-electrons,1923,https://psicode.org,https://github.com/psi4/psi4/issues/3235,1,['down'],['down-electrons']
Availability,Raise no-stability-check error early,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1337:25,error,error,25,https://psicode.org,https://github.com/psi4/psi4/pull/1337,1,['error'],['error']
Availability,"Raise the error that we can't do stability analysis on DFT ""wavefunctions"" before we bother to compute the (potentially very expensive) integrals necessary for this. The same error message is getting raised C-side under the same condition. This commit just raises it sooner, because spending the better part of an an hour computing integrals for no reason is annoying. ## Checklist; - [x] No tests run in addition to quicktests, since this is so simple and mirroring a C-side operation. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1337:10,error,error,10,https://psicode.org,https://github.com/psi4/psi4/pull/1337,2,['error'],['error']
Availability,"Ran into this issue myself a week ago. It turns out that you need to patch a few file in the MRCC tarball and recompile to make it work (and this has to be done independently of the Psi4 interface) I couldn't see this info advertised on the MRCC website, I happened to browse the ""Patches"" section in their download page and noticed that there were few patches more recent than the tarball I had just downloaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151:307,down,download,307,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151,2,['down'],"['download', 'downloaded']"
Availability,Re-pinging @bozkaya. Even an estimate on when you can look at this would be helpful.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1809#issuecomment-590992084:3,ping,pinging,3,https://psicode.org,https://github.com/psi4/psi4/pull/1809#issuecomment-590992084,1,['ping'],['pinging']
Availability,"Reaping and sowing seem to be broken for Hessians when using Psi4 compiled with Python 3. None of the following errors could be reproduced when using Psi4 compiled with Python 2. The following input file produces the following error:; ```memory 500 MB. molecule {; N ; H 1 R ; H 1 R 2 A ; H 1 R 2 A 3 D . R = 1.0043; A = 120 ; D = 180 ; }. set {; basis sto-3g; }. frequencies('ccsd(t)', dertype='gradient', mode='sow'); ```. ```Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1681, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1332, in hessian ; fmaster.write(p4util.format_options_for_input(moleculeclone, **kwargs)). TypeError: a bytes-like object is required, not 'str'; ```. The culprit is exactly what the traceback says: fmaster is opened in binary mode and format_options_for_input returns a string. Python 2 would let you write a string to a binary file, but Python 3 expects bytes. I can fix this locally by adding the required .encode('utf-8') calls to that line as well as several lines afterwards, starting around 1370. If that was all, I would just fix this myself, but sowing is useless without reaping, and the reaping bug is trickier. The displacement files include bytes encoded from UTF-8 and also bytes dumped from pickle (the gradient kwargs). In general, pickle bytes will not be intelligible in any text encoding scheme. Python 2's naive approach to bytes means this is not a problem. When you try to run one of those files with Python 3-compiled Psi4, however... ```Traceback (most recent cal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/833:112,error,errors,112,https://psicode.org,https://github.com/psi4/psi4/issues/833,2,['error'],"['error', 'errors']"
Availability,"Rebasing is not trivial for some reason, I am getting this error on force-push. > refusing to allow an OAuth App to create or update workflow `.github/workflows/ecosystem.yml` without `workflow` scope. Tried a few things to get a new token, etc. with no avail. I can work around this, but only a bit later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2813#issuecomment-1333565864:59,error,error,59,https://psicode.org,https://github.com/psi4/psi4/pull/2813#issuecomment-1333565864,2,"['avail', 'error']","['avail', 'error']"
Availability,Reboot - Density Screening Refactor Part 2: Implementation of shell_significant(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:0,Reboot,Reboot,0,https://psicode.org,https://github.com/psi4/psi4/pull/3098,1,['Reboot'],['Reboot']
Availability,"Rebuilding Psi4 1.3.2 in Fedora rawhide fails with; ```; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; error: Bad exit status from /var/tmp/rpm-tmp.sQzcRh (%build); ```; The issue here is that distutils was deprecated in Python 3.10 and marked for deletion in 3.12:; https://docs.python.org/3/whatsnew/3.10.html#distutils-deprecated. The file in master has been slightly updated, but still features the use of distutils, so this issue is likely present on the master branch as well.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020:164,Error,Error,164,https://psicode.org,https://github.com/psi4/psi4/issues/3020,4,"['Error', 'error', 'failure']","['Error', 'error', 'errors', 'failure']"
Availability,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/132#issuecomment-121991365:782,error,error,782,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365,1,['error'],['error']
Availability,"Recording all the reference values should cover the type-of-calc-being-run logic, as that won't be changing for a given infile. So it should be down to if-present-in-`ref_vals`-then-compare being sufficient. And thanks, @amjames, getting some cc* module psivars onto wfn, as opposed to `P::e` can be tricky, as I learned from cctriples.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376674410:144,down,down,144,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376674410,2,['down'],['down']
Availability,Reduced atom overlap tolerence to 0.1 to fix #195,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/283:21,toler,tolerence,21,https://psicode.org,https://github.com/psi4/psi4/pull/283,1,['toler'],['tolerence']
Availability,"Referring to; http://kojipkgs.fedoraproject.org//work/tasks/6231/5326231/build.log. PSI4 fails to build on the development version of Fedora. The error that occurs is. In file included from /builddir/build/BUILD/psi4.0b4/src/lib/libsmartptr/serialimpl.h:4:0,; from /builddir/build/BUILD/psi4.0b4/src/lib/libsmartptr/serialize.cc:2:; /builddir/build/BUILD/psi4.0b4/src/lib/libsmartptr/xmlarchive.h:241:14: error: 'void smartptr::XMLArchive::getAttribute(unsigned int&, const string&)' cannot be overloaded; void getAttribute(unsigned int& val, const std::string& attrname);; ^; /builddir/build/BUILD/psi4.0b4/src/lib/libsmartptr/xmlarchive.h:237:14: error: with 'void smartptr::XMLArchive::getAttribute(size_t&, const string&)'; void getAttribute(size_t& val, const std::string& attrname);; ^; /builddir/build/BUILD/psi4.0b4/src/lib/libsmartptr/xmlarchive.h:255:14: error: 'void smartptr::XMLArchive::setAttribute(unsigned int, const string&)' cannot be overloaded; void setAttribute(unsigned int val, const std::string& attrname);; ^; /builddir/build/BUILD/psi4.0b4/src/lib/libsmartptr/xmlarchive.h:251:14: error: with 'void smartptr::XMLArchive::setAttribute(size_t, const string&)'; void setAttribute(size_t val, const std::string& attrname);. Fedora 19 has GCC 4.8 and Boost 1.53.0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/4:146,error,error,146,https://psicode.org,https://github.com/psi4/psi4/issues/4,5,['error'],['error']
Availability,"Regarding the general case `MultipoleInt` vs. special routines like `DipoleInt`. Keep in mind that asking for `MultipoleInt`s with order=2 will give overlap, dipole, quadrupole. Asking for `QuadrupoleInt`s will only give quadrupoles. Computing the extra integrals isn't really a big deal in terms of efficiency, but it might be a little surprising for the user to find that the indexing doesn't start from zero. The current quadrupole integral implementation just calls Libint2 and picks out only the quadrupole components. Going with only MultipoleInts is better for maintenance, but changes the API and could lead to some surprises. However, there isn't really any efficiency penalty for doing that, so I don't really have a strong opinion either way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077806309:568,mainten,maintenance,568,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077806309,1,['mainten'],['maintenance']
Availability,"Regardless of the Python API failures, this merge is good to go...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260#issuecomment-425814786:29,failure,failures,29,https://psicode.org,https://github.com/psi4/psi4/pull/1260#issuecomment-425814786,1,['failure'],['failures']
Availability,"Regrettably, this is expected. From https://www.basissetexchange.org/ (choose role: JK-fitting and element He), you can see that there isn't a Dunning cc-pVNZ basis defined for Helium. Usually what psi4 does is use the universal def2-universal-JKFIT when there isn't a JKfit designed for the orbital basis. But this is turned off above quad-zeta b/c (1) the universal basis is quad-zeta itself and (2) if you're in 5-zeta territory you might not appreciate the density-fitting error anyways. You'll have to decide if you want the quad-zeta fitting basis anyways or want to turn off DF or downgrade the basis for He, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989#issuecomment-1606221049:477,error,error,477,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1606221049,2,"['down', 'error']","['downgrade', 'error']"
Availability,"Related issue: [2577](https://github.com/psi4/psi4/issues/2577). Using a similar script as the previous reporter (using Psi4 1.9.1 and this build; `conda install -n $VENV_PSI4 psi4 numpy scipy dftd3-python dftd4-python gcp-correction python=$PYTHON_VERSION -c conda-forge`); ```; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'check'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97X-D3BJ/def2-TZVPD', molecule=mol); ```. I get the NYI message:; `psi4.driver.p4util.exceptions.ValidationError: Stability analysis not yet supported for XC functionals.`. Is the implementation of stability check for DFT on the roadmap for the near future? This would be very helpful especially when running UKS as we have observed that open shell systems often have instabilities in the SCF. . I also tried with `PBE/6-31G` and still get this exception. However, this [merged PR](https://github.com/psi4/psi4/pull/2849) implemented stability check for GGA functionals - is this a bug? The NYI message looks like it's triggered for every DFT functional ([see this line](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L578)), whereas [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/subclass_methods.py#L129) the program only raises the error if the functional is meta or needs vv10.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236:1331,error,error,1331,https://psicode.org,https://github.com/psi4/psi4/issues/3236,1,['error'],['error']
Availability,"Release 0.3 fails to build with gcc 5.1.1, error is. /builddir/build/BUILD/psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libmints/basisset_parser.cc: In member function 'virtual std::vectorpsi::ShellInfo psi::Gaussian94BasisSetParser::parse(const string&, const std::vectorstd::basic_string<char >&)':; /builddir/build/BUILD/psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libmints/basisset_parser.cc:176:104: error: narrowing conversion of '-1' from 'int' to 'char' inside { } [-Wnarrowing]; char shell_to_am[] = {-1,-1,-1, 2,-1, 3, 4, 5, 6,-1, 7, 8, 9,10,11, 1,12,13, 0,14,15,16,17,18,19,20};; ^",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/177:43,error,error,43,https://psicode.org,https://github.com/psi4/psi4/issues/177,2,['error'],['error']
Availability,"Release 1.0, errors when running setup script",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:13,error,errors,13,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['error'],['errors']
Availability,Remove LGTM errors from libdpd. - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1625:12,error,errors,12,https://psicode.org,https://github.com/psi4/psi4/pull/1625,1,['error'],['errors']
Availability,Remove Redundant Dipole/Quadrupole Code,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485:7,Redundant,Redundant,7,https://psicode.org,https://github.com/psi4/psi4/pull/2485,1,['Redundant'],['Redundant']
Availability,Remove all LGTM errors in ccdensity. - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1632:16,error,errors,16,https://psicode.org,https://github.com/psi4/psi4/pull/1632,1,['error'],['errors']
Availability,Reports indicate that the in-core `MemDF+wcombine` algorithm is not working correctly.; This PR disables the options. MemDF does not longer turn the option on automatically and users setting the option directly will get an exception error. A note is added to the DFT manual. Issues: #2351 #2279 ; Related: #2283 . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2362:233,error,error,233,https://psicode.org,https://github.com/psi4/psi4/pull/2362,1,['error'],['error']
Availability,"Reposted from forum with modification. The following attempt at open-shell SAPT fails with segfault `forrtl: severe (174): SIGSEGV, segmentation fault occurred`. Original reporter concluded it was a problem with Calcium, as modifying it to Chlorine (along with the charges) resulted in a successful computation. The example molecule is reduced from the original report, for ease of reproduction. 40 GB is (hopefully) enough to indicate this is not a problem of needing more memory. ```memory 40 gb; molecule {; 0 1; H -0.803001 1.098737 0.000360; H -0.919454 -1.089722 0.000521; O -0.035537 -0.067631 0.000218; --; 2 1; Ca 2.281447 -0.004247 -0.000154; units angstrom; no_reorient; symmetry c1; }. set globals {; scf_type df; FREEZE_CORE true; }. basis {; assign aug-cc-pVTZ; assign Ca def2-TZVPP; }. df_basis_scf {; assign aug-cc-pVTZ-jkfit; assign Ca def2-TZVPP-jkfit; }. df_basis_sapt {; assign aug-cc-pVTZ-RI; assign Ca def2-TZVPP-ri; }. energy('sapt0')```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1271:145,fault,fault,145,https://psicode.org,https://github.com/psi4/psi4/issues/1271,1,['fault'],['fault']
Availability,"Reproach well deserved, @jgonthier. Info has been in [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L71), but that admittedly is an awful error message. I've figured out how to hit it locally (conda directory structure bypasses it all), and a fix will appear soon to a PR near you. Thanks for the report. @edeustua, `-DOpenMP_LIBRARY-DIRS` probably _is_ the intended solution. The usual case where this issue appears is you're building Psi with GCC compilers and MKL LAPACK. For a usual from-intel (as opposed to from-conda) MKL installation, libraries mkl_rt and iomp5 are in different locations. With GCC+MKL, Psi needs to explicitly use iomp5 to suppress the tenacious gomp. But unless the location of iomp5 is already known to CMake through another detection sequence, it can't find the library, hence the (poor) error message you got. `OpenMP_LIBRARY_DIRS` is the intended solution. If I'm misunderstanding your circumstance, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976:164,error,error,164,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976,2,['error'],['error']
Availability,"Reproduce with the below env.yml file:. ```yaml; channels:; - conda-forge; - psi4. dependencies:; - python =3.9; - datamol ; - numpy; - scikit-learn; - pytorch >=1.10.2; - tqdm; - jupyterlab; - openmm; - psi4 >=1.6; ```. then `mamba env create -n tmp_psi4 -f env.yml` and the error is. ```; conda-forge/linux-64 Using cache; conda-forge/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change. Looking for: ['python=3.10', 'datamol', 'numpy', 'scikit-learn', ""pytorch[version='>=1.10.2']"", 'tqdm', 'jupyterlab', 'openmm', ""psi4[version='>=1.6']""]. Encountered problems while solving:; - nothing provides intel-openmp needed by psi4-1.6+77475b5-py39hceaf722_0; ```. I tried multiple combination of python and psi4 versions without success. Note that the above has been only tested on a linux machine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621:276,error,error,276,https://psicode.org,https://github.com/psi4/psi4/issues/2621,1,['error'],['error']
Availability,Resolved potential syntax error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/495:26,error,error,26,https://psicode.org,https://github.com/psi4/psi4/pull/495,1,['error'],['error']
Availability,"Rethinking this, I think the MPI process ID would be a better labeling system than process ID. On a Linux box, the max process ID is 32,768 by default (although it can be made higher if you know your machine tolerates integers larger than 16-bit). Anyways, assuming each MPI process spawns on a separate node, and that the node determines the process ID independently of the other nodes, it's straightforward to show that given n nodes, the probability, p, of two MPI processes having the same process ID is given by: p=1-exp(-(n)(n-1)/65,536). Of note, 213 nodes lead to a 50% probability and 550 nodes lead to a 99% probability. Hence, if we are going to be massively parallel I think we have to be careful about our usage of process IDs, as they will not be as unique as we are used to thinking they are.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/81#issuecomment-104680424:208,toler,tolerates,208,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-104680424,1,['toler'],['tolerates']
Availability,"Revert ""smother CI linux ecosys assembly error""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2646:41,error,error,41,https://psicode.org,https://github.com/psi4/psi4/pull/2646,1,['error'],['error']
Availability,"Right, @jturney, this is just making the `save_natom`-enabled `save_xyz()` available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/518#issuecomment-260985650:75,avail,available,75,https://psicode.org,https://github.com/psi4/psi4/pull/518#issuecomment-260985650,1,['avail'],['available']
Availability,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:872,down,down,872,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955,6,"['down', 'robust']","['down', 'robust']"
Availability,"Right, the psi4 conda package is built to link to Mac native Accelerate blas/lapack, not MKL. The MKL is present in the conda env for numpy's benefit. The reason for this is that until very recently all the supporting language libraries and headers for MKL weren't available on conda – they seem to be now through packages on the Intel conda channel, but I haven't switched over. I was thinking that when psi4 is imported before numpy that the latter may be trying to match symbols in the already loaded Accelerate when it should instead be importing mkl.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311738398:265,avail,available,265,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738398,1,['avail'],['available']
Availability,"Right, without more information, the most I'm expecting is to update the error message with something that makes clear whether this is something the user can fix by changing settings as well as what the problem is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684:73,error,error,73,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684,2,['error'],['error']
Availability,"Run.log was a dirty hack that I came up with, to allow the test info to stream to stdout, but have a file to be able to parse to identify failures after the fact. The PIPE machinery in Python's subprocess will allow the same behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/247#issuecomment-183716956:138,failure,failures,138,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183716956,1,['failure'],['failures']
Availability,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023:1168,error,error,1168,https://psicode.org,https://github.com/psi4/psi4/issues/2023,4,"['Error', 'error']","['Error', 'error']"
Availability,Running a single point calc on a HCl dimer; [hcl2.zip](https://github.com/psi4/psi4/files/11093879/hcl2.zip); at the CCSD(T)/aug-cc-pvtz level of theory crashes with; ```; Total cached: 139345.9 kB; MRU = 31; LRU = 32; #LRU deletions = 0; #Low-priority deletions = 0; Core max size: 48000000.0 kB; Core used: 47999971.9 kB; Core available: 28.1 kB; Core cached: 139345.9 kB; Locked cached: 139345.9 kB; Most recent entry = 31; Least recent entry = 32; dpd_block_matrix: n = 18 m = 324; Error in: dpd_block_matrix: No memory left.; ```; The program gets allocated 48 Gb of memory and 16 cores. Cache level was set to 1. Any other suggestions?; Script is attached as a zip file.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2913:329,avail,available,329,https://psicode.org,https://github.com/psi4/psi4/issues/2913,2,"['Error', 'avail']","['Error', 'available']"
Availability,"Running e.g. `pcmsolver` calculations with symmetry will lead to a crash:; ```; File ""/Users/kruse/qc/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 300, in scf_iterate; upcm, Vpcm = self.get_PCM().compute_PCM_terms(Dt, calc_type). RuntimeError:; Fatal Error: Matrix::gemm error: Number of irreps do not equal.; Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1349; The most recent 3 function calls were:; ```. The PCM message suggests c1 symmetry is enforced:; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1520-L1522; but the `use_c1` option is for making post-SCF c1 wavefunction and not for the SCF itself.; Similar issue with the `cppe` addon for polarizable embedding. Either a graceful exist or actually making a c1 wfn object is desirable.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1978:284,Error,Error,284,https://psicode.org,https://github.com/psi4/psi4/issues/1978,3,"['Error', 'error']","['Error', 'error']"
Availability,"Running larger calculations with scf_type pk gives me lots and lots of error messages; ```; $ psi4; thread already exists.; thread already exists.; thread already exists.; ```; and so on. These seem to arise from src/psi4/libpsio/aio_handler.cc. I'm wondering if these really are errors, if they should be printed, and whether stdout instead of the log file is the right place to do it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596:71,error,error,71,https://psicode.org,https://github.com/psi4/psi4/issues/596,2,['error'],"['error', 'errors']"
Availability,"Running my example with a debug build and #2700 results in this log:; ```; LSEEK failed. Error description from the OS: : Bad file descriptor; Error in PSIO_WT_TOCLEN()! Cannot seek vol[0] to its beginning, unit 102. Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:89,Error,Error,89,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204,5,['Error'],['Error']
Availability,"Running the following input file; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }. set {; scf_type mem_df; basis cc-pvdz; num_frozen_uocc 4; mp2_type df; }. analytic = gradient(""mp2""); findif = gradient(""mp2"", dertype=0). compare_matrices(analytic, findif, 4, ""DF-MP2 Gradient""); ```. gives me. ```; Expected:; [[-0. 0.000000000003 -0.034538336725]; [ 0. -0.035340551119 0.017269168364]; [ 0. 0.035340551116 0.017269168361]]; Observed:; [[ 0. 0.000000000422 -0.029704789758]; [ 0. -0.030742173112 0.014852395042]; [ 0. 0.030742172689 0.014852394715]]; Difference (passed elements are zeroed):; [[ 0. 0. 0.004833546968]; [ 0. 0.004598378007 -0.002416773321]; [ 0. -0.004598378426 -0.002416773646]]; ```. So we have a third decimal place error(!) in DF-MP2 frozen virtual gradients. Frozen core gradients test fine. @loriab, take note of this during your standardization and testing pass. Core developers, assign this to me. If it's a simple fix, this will be part of DFGrad II. Otherwise, this will be DFGrad III. I'm also requesting, given the severity of this bug, that it be made a Psi 1.4 target.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1916:749,error,error,749,https://psicode.org,https://github.com/psi4/psi4/issues/1916,1,['error'],['error']
Availability,"Running the following input. ```; molecule mol {; 0 1; H 0.0 0.0 0.000000; H 0.0 0.0 0.700000; H 0.0 0.0 1.400000; H 0.0 0.0 2.100000; H 0.0 0.0 2.800000; H 0.0 0.0 3.500000; }. memory 3500 mb. set basis aug-cc-pVDZ; set reference rohf; set guess core; set scf_type df. scf_e, scf_wfn = energy('scf', return_wfn = True). set restricted_docc [ 0, 0, 0, 0, 0, 0, 0, 0 ]; set restricted_uocc [ 0, 0, 6, 6, 0, 0, 6, 6 ]; set qc_module detci; set nat_orbs true. ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); ```. crashes with; ```; RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; Error occurred in file: /builddir/build/BUILD/psi4-add49b95b6be2441c522f71bddb47f1371e16958/psi4/src/psi4/libmints/matrix.cc on line: 1517; ```. both in the Fedora package of Psi4 1.1 as well as the conda package. The script runs without errors in the up-to-date trunk. Could this issue be fixed in the conda package? Alternatively, is there a conda channel for the development version?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/764:572,Error,Error,572,https://psicode.org,https://github.com/psi4/psi4/issues/764,3,"['Error', 'error']","['Error', 'errors']"
Availability,"Running the input; ```; molecule {; -3 1; Mn -5.33522 1.82890 0.00000; C -6.70409 1.81768 0.00000; N -7.86182 1.80819 0.00000; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:546,fault,fault,546,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['fault'],['fault']
Availability,"Running this input results in a PSIO error in version 1.3.2.; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(h2o); set reference rhf; energy('b3lyp'). activate(ch3); set reference uhf; energy('b3lyp'); ```. However, if one switches the runs the other way around; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(ch3); set reference uhf; energy('b3lyp'). activate(h2o); set reference rhf; energy('b3lyp'); ```; the calculation succeeds.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2174:37,error,error,37,https://psicode.org,https://github.com/psi4/psi4/issues/2174,1,['error'],['error']
Availability,Runtime error while running DMRG calculation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2102:8,error,error,8,https://psicode.org,https://github.com/psi4/psi4/issues/2102,1,['error'],['error']
Availability,Runtime failures with numpy-1.24,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865:8,failure,failures,8,https://psicode.org,https://github.com/psi4/psi4/issues/2865,1,['failure'],['failures']
Availability,"Ryan has seen some test case failures because of IO issues from tests running in parallel. This is (T), so a possibility. I've set the nightly build script to run in serial tonight, so we'll see if this gets pinned down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/121#issuecomment-123504435:29,failure,failures,29,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123504435,2,"['down', 'failure']","['down', 'failures']"
Availability,"Ryzen 5 1600, but probably not from the faulty early batches. Anyway I see the same behaviour on an Intel E5-2667v4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366#issuecomment-441105852:40,fault,faulty,40,https://psicode.org,https://github.com/psi4/psi4/issues/1366#issuecomment-441105852,1,['fault'],['faulty']
Availability,"SAD is annoying :-(. Maybe it is best to keep printing zeros for SAD (somehow) and additional a note saying that no occupations are available yet. For difficult open-shell systems, where this table becomes interesting, people might switch the guess anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1711#issuecomment-528355257:132,avail,available,132,https://psicode.org,https://github.com/psi4/psi4/issues/1711#issuecomment-528355257,1,['avail'],['available']
Availability,SAPT test suite failures on big-endian architectures,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462:16,failure,failures,16,https://psicode.org,https://github.com/psi4/psi4/issues/1462,1,['failure'],['failures']
Availability,SAPT(DFT) : Units error in output,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/910:18,error,error,18,https://psicode.org,https://github.com/psi4/psi4/issues/910,1,['error'],['error']
Availability,SAPT(DFT) SCF Failure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1684:14,Failure,Failure,14,https://psicode.org,https://github.com/psi4/psi4/issues/1684,1,['Failure'],['Failure']
Availability,SCAN/libXC segmentation fault,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863:24,fault,fault,24,https://psicode.org,https://github.com/psi4/psi4/issues/863,1,['fault'],['fault']
Availability,SCF Convergence Failure: ECPs and ROHF-SOSCF,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716:16,Failure,Failure,16,https://psicode.org,https://github.com/psi4/psi4/issues/1716,1,['Failure'],['Failure']
Availability,SCF Count Failure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2594:10,Failure,Failure,10,https://psicode.org,https://github.com/psi4/psi4/issues/2594,1,['Failure'],['Failure']
Availability,SCF checkpointing update,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190:4,checkpoint,checkpointing,4,https://psicode.org,https://github.com/psi4/psi4/pull/2190,1,['checkpoint'],['checkpointing']
Availability,"SCF stability analysis with FOLLOW is currently only implemented for UHF. RHF and ROHF have stability analysis, but do not have the capability to follow the instability. This is not documented at all, as far as I can tell, and what is even worse is that if the user requests a FOLLOW with RHF, it ""fails"" silently.; That is, the SCF and the stability analysis is run, and even if there is an instability Psi4 just carries on. So I propose two short term solutions:; 1. Update the docs to make it clear that FOLLOW is currently an UHF only feature.; 2. Implement checks against the user requesting FOLLOW with RHF or ROHF. I think exiting with error is the reasonable action when the user requests an unavailable feature. Of course the long term solution would be to implement follow for R(O)HF, but that is probably more of a wishlist item, than anything else. I found these issues a while ago and planned to fix them myself, but never got around to actually do so, and will not have the time to work on them before the 1.2 release.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/973:643,error,error,643,https://psicode.org,https://github.com/psi4/psi4/issues/973,1,['error'],['error']
Availability,SCF: Add SCFConvergence Error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130:24,Error,Error,24,https://psicode.org,https://github.com/psi4/psi4/pull/1130,1,['Error'],['Error']
Availability,"SOSCF is not implemented for DFT as we do not have exact DFT Hessians yet. That's odd that it seg faults however, it should call the base HF SOSCF method and throw an error. I'll see if I can fix this. . -Daniel Smith; Sent from my iPhone. . > On Feb 16, 2016, at 05:21, Holger Kruse notifications@github.com wrote:; > ; > version: Rev {master} 0d10de8; > ; > After entering the SOSCF psi4 exists with a segmentation fault. It prints the soscf header if soscf_print true. Occurs e.g. when I run soscf1 test case with PBE instead of HF.; > ; > I don't know if SOSCF should work with DFT or not.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/256#issuecomment-184648840:98,fault,faults,98,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-184648840,3,"['error', 'fault']","['error', 'fault', 'faults']"
Availability,SOSCF: Now correctly throws an error for RKS/UKS SOSOCF updates,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/258:31,error,error,31,https://psicode.org,https://github.com/psi4/psi4/pull/258,1,['error'],['error']
Availability,"Same here, just ; /edfs/users/deprince/software/psi4/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. > On Feb 27, 2018, at 11:34 AM, Robert T. McGibbon <notifications@github.com> wrote:; > ; > Any error message on the crash?; > ; > No.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/923#issuecomment-368940098>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGpwnGu_Xbo1lZTU4IJZALbsctYGNks5tZC6bgaJpZM4SPiMy>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368940820:119,error,error,119,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368940820,2,['error'],['error']
Availability,Second Decimal Place Errors in ECP Analytic Gradients,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066:21,Error,Errors,21,https://psicode.org,https://github.com/psi4/psi4/issues/3066,1,['Error'],['Errors']
Availability,"See conversation at https://github.com/psi4/psi4public/issues/214 . If an experienced psi4 developer checks out a plugin from the binary, he can guess what modifications the Makefile will need and proceed. If an inexperience user checks out a plugin from the binary, he may not even have a compiler. So there needs to be at least one easy and documented way to get the plugin working. This ticket is to make that happen.; - [x] Implement the Makefile template reference in https://github.com/psi4/psi4/issues/214#issuecomment-172256746 . There's a cmake variable `-DENABLE_CONDA_DEST` that you can use to tell c-side if it's a conda build.; - [ ] Use that same cmake variable to print to the user a link to the manual on compiling plugins from conda; - [ ] at that manual page, talk about; - conda env w/`psi4`, `gcc`, `openblas`; - must _activate_ conda env; - register plugins at https://github.com/psi4/psi4public/blob/master/lib/python/aliases.py#L46; - place plugins a la https://github.com/psi4/psi4meta/blob/master/conda-recipes/csx4psi/build.sh. I'm not sure myself how `PYTHONPATH`/`PSIPATH` is picking up on where plugins located. Conda metapackage is still under assembly, so don't do too detailed docs yet. The first two bullets are ready, though.; - [ ] in doc/sphinxman/plugins.rst, review and update the available plugin flavors; - [ ] in doc/sphinxman/plugins.rst, remove reference to needing `--with-plugins`, as everything is fPIC these days",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216:1319,avail,available,1319,https://psicode.org,https://github.com/psi4/psi4/issues/216,1,['avail'],['available']
Availability,"Seems that every time we compare values in input (compare_values() function in test cases) and the comparison fails, we get a segfault. Program received signal SIGSEGV, Segmentation fault.; subtype_dealloc (self=0x55d9848) at Objects/typeobject.c:955; 955 ++ tstate->trash_delete_nesting;; Missing separate debuginfos, use: debuginfo-install glibc-2.17-55.el7_0.1.x86_64 keyutils-libs-1.5.8-3.el7.x86_64 krb5-libs-1.11.3-49.el7.x86_64 libcom_err-1.42.9-4.el7.x86_64 libgcc-4.8.2-16.2.el7_0.x86_64 libselinux-2.2.2-6.el7.x86_64 libstdc++-4.8.2-16.2.el7_0.x86_64 openssl-libs-1.0.1e-34.el7_0.6.x86_64 pcre-8.32-12.el7.x86_64 xz-libs-5.1.2-8alpha.el7.x86_64 zlib-1.2.7-13.el7.x86_64; (gdb) where; #0 subtype_dealloc (self=0x55d9848) at Objects/typeobject.c:955; #1 0x0000000003c5ab09 in boost::python::converter::shared_ptr_deleter::operator()(void const*) (); #2 0x0000000000ca0427 in boost::detail::sp_counted_impl_pd<void*, boost::python::converter::shared_ptr_deleter>::dispose (this=0x5000410). ```; at /theoryfs2/ds/sherrill/psi4/build-icpc-debug-rhel7/boost/boost_1_55_0/boost/smart_ptr/detail/sp_counted_impl.hpp:153; ```; #3 0x0000000000c22169 in boost::detail::sp_counted_base::release (. ```; this=0x5000410); at /theoryfs2/ds/sherrill/psi4/build-icpc-debug-rhel7/boost/boost_1_55_0/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp:146; ```; #4 0x0000000000c221ef in boost::detail::shared_count::~shared_count (. ```; this=0x49dbb88 <psi::Process::environment+72>); at /theoryfs2/ds/sherrill/psi4/build-icpc-debug-rhel7/boost/boost_1_55_0/boost/smart_ptr/detail/shared_count.hpp:371; ```; #5 0x0000000000cc4170 in boost::shared_ptrpsi::Molecule::~shared_ptr (. ```; this=0x49dbb80 <psi::Process::environment+64>); at /theoryfs2/ds/sherrill/psi4/build-icpc-debug-rhel7/boost/boost_1_55_0/boost/smart_ptr/shared_ptr.hpp:328; ```; #6 0x0000000000f17f9d in psi::Process::Environment::~Environment (. ```; this=0x49dbb40 <psi::Process::environment>); at /theoryfs2/ds/sherrill/psi4/include/proces",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/64:182,fault,fault,182,https://psicode.org,https://github.com/psi4/psi4/issues/64,1,['fault'],['fault']
Availability,Seems to be a numpy error.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465#issuecomment-452113236:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/issues/1465#issuecomment-452113236,1,['error'],['error']
Availability,"Seg fault in optking when ""frag_mode multi"" used with linear bends present",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680:4,fault,fault,4,https://psicode.org,https://github.com/psi4/psi4/issues/680,1,['fault'],['fault']
Availability,Segfault after mrcc-optfreq test case failure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/138:38,failure,failure,38,https://psicode.org,https://github.com/psi4/psi4/issues/138,1,['failure'],['failure']
Availability,Segmentation fault (core dumped) for v1.2 also on my cluster. v1.1 works well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405799617:13,fault,fault,13,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405799617,1,['fault'],['fault']
Availability,Segmentation fault after installation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792:13,fault,fault,13,https://psicode.org,https://github.com/psi4/psi4/issues/1792,1,['fault'],['fault']
Availability,Segmentation fault in CCSD for N and F atoms,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:13,fault,fault,13,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['fault'],['fault']
Availability,Segmentation fault in DF calculation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288:13,fault,fault,13,https://psicode.org,https://github.com/psi4/psi4/issues/2288,1,['fault'],['fault']
Availability,Segmentation fault in test opt-irc-1 and opt-irc-2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:13,fault,fault,13,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['fault'],['fault']
Availability,"Setting TargetLAPACK_DIR (as you suggested) didn't seem to help: it still couldn't find MathOpenMP. However, adding; `-DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}` to external/downstream/gpu_dfcc seems to do the trick and gpu_dfcc builds OK (within the psi4 tree). It does also need CMAKE_CUDA_COMPILER and CUDA_TOOLKIT_ROOT_DIR defining before it's happy (rather than having defaults). I added them to CMakeCache.txt but presumably they'd work if added to the original cmake command. Once built, it fails when trying to install gpu_dfcc within the tree:; ```; [ 64%] Performing build step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; [ 70%] Performing install step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/gpu_dfcc/gpu_dfcc.so; CMake Error at cmake_install.cmake:61 (file):; file INSTALL cannot find; ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/__init__.py"". Makefile:84: recipe for target 'install' failed; make[3]: *** [install] Error 1; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:73: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:176,down,downstream,176,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,3,"['Error', 'down']","['Error', 'downstream']"
Availability,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211:703,error,error,703,https://psicode.org,https://github.com/psi4/psi4/issues/2211,1,['error'],['error']
Availability,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021:8,down,downstream,8,https://psicode.org,https://github.com/psi4/psi4/issues/1021,6,"['down', 'error', 'failure']","['downstream', 'error', 'errors', 'failure']"
Availability,"Should be doable: in ERKALE I run an eigendecomposition of a 100x100 random matrix in sequential mode and repeat the calculation in a parallel OpenMP section. If the decompositions of the individual threads don’t match the sequential one, then LAPACK is not thread safe. Susi Lehtola; Sent from my phone so excuse my brevity. On 20 Jan 2019, at 15.03, Michael Banck <notifications@github.com<mailto:notifications@github.com>> wrote:. Couldn't you have a configure-time check for this (in case it can be broken down to a very small testcase), same as is usual in autoconf-world?. —; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1461#issuecomment-455864865>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AArOJ2QSkRaIyanSHwFBRQyrKH2-9W1_ks5vFGkggaJpZM4ZxGFP>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455865306:510,down,down,510,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455865306,1,['down'],['down']
Availability,Should we have a section about new features/improvements for users ?. # Changes since Psi4 1.0. High-spin open-shell SAPT0 computations are now available,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485#issuecomment-258077480:144,avail,available,144,https://psicode.org,https://github.com/psi4/psi4/issues/485#issuecomment-258077480,1,['avail'],['available']
Availability,Show file name in error message,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2801:18,error,error,18,https://psicode.org,https://github.com/psi4/psi4/pull/2801,1,['error'],['error']
Availability,"Show seg faults, buffer overflows, and doubly linked list errors: https://travis-ci.org/psi4/psi4/jobs/471402754. Azure Gibbs failure looks like:; ```; 2018-12-23T01:04:44.9842835Z 61/142 Test #210: gibbs ............................***Failed 33.09 sec; 2018-12-23T01:04:44.9843015Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843106Z 	N2 Gibbs Free Energy..............................................PASSED; 2018-12-23T01:04:44.9843160Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843216Z 	H2O Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843489Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843563Z 	NH3 Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843609Z Traceback (most recent call last):; 2018-12-23T01:04:44.9843656Z File ""D:/a/1/b/build/stage/bin/psi4"", line 287, in <module>; 2018-12-23T01:04:44.9843903Z exec(content); 2018-12-23T01:04:44.9843947Z File ""<string>"", line 71, in <module>; 2018-12-23T01:04:44.9843996Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 1096, in optimize; 2018-12-23T01:04:44.9844066Z moleculeclone.update_geometry(); 2018-12-23T01:04:44.9844095Z ; 2018-12-23T01:04:44.9844134Z RuntimeError: ; 2018-12-23T01:04:44.9844201Z Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; 2018-12-23T01:04:44.9844301Z Error occurred in file: D:\a\1\s\psi4\src\psi4\libmints\molecule.cc on line: 2016; 2018-12-23T01:04:44.9844337Z ; 2018-12-23T01:04:44.9844403Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. as shown in the logs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954:9,fault,faults,9,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954,5,"['Error', 'error', 'failure', 'fault']","['Error', 'errors', 'failure', 'faults']"
Availability,Simplify Input-File Side Error Info,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1196:25,Error,Error,25,https://psicode.org,https://github.com/psi4/psi4/issues/1196,1,['Error'],['Error']
Availability,"Since `cppe` has its own Python interface now (which it did not when I started this PR), I guess there is no reason to interface with psi4 on the C++ layer?. I guess it would be much simpler wrt maintenance of the code to refactor everything and use the `cppe` Python interface directly. What do you think, @loriab, @dgasmith, @robertodr ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596:195,mainten,maintenance,195,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596,2,['mainten'],['maintenance']
Availability,"Since ddLPB has the electric field as RHS, it may be that the error in the numerical derivatives (numerical Fock) is higher than in ddPCM/ddCOSMO. To be sure, you could try to lower the step size, you should observe a decreasing error in the analytical-numerical Fock comparison (at least until it hits the finite numerical precision), if it is not like that, there may be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2952#issuecomment-1537967934:62,error,error,62,https://psicode.org,https://github.com/psi4/psi4/pull/2952#issuecomment-1537967934,2,['error'],['error']
Availability,"Since the energy usually goes up from the SAD value in the first iteration, I would take the first update step from GDM; otherwise I'd use ADIIS/EDIIS+DIIS by default (see discussion in #2235). However, there should be also a setting that if the energy hasn't going down in N consecutive iterations (N=2 or N=3 are reasonable values) that the program should automatically switch to GDM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-874494530:266,down,down,266,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-874494530,1,['down'],['down']
Availability,"Since there are basically no reference data available for UHF, I guess the only thing one could do is to add Psi4-generated data for consistency tests...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2006#issuecomment-693506447:44,avail,available,44,https://psicode.org,https://github.com/psi4/psi4/pull/2006#issuecomment-693506447,1,['avail'],['available']
Availability,"Since we are only interested in the density with a SAD guess we can lower our expectations in terms of accuracy. So lets just do the easy solution: I trimmed `AM=5` out of the Weigend basis to make a `SAD-FIT` basis. While the energy of a given atom can deviate up to 1% (!) due to the errors in the fitting basis the densities look similar. For example, hydrobromic acid/aug-cc-pV5Z:. ```; SAD DF-basis aug-cc-pV5Z-jkfit; @DF-RHF iter 0: -2573.11546127243219 -2.57312e+03 1.30325e-02; @DF-RHF iter 6: -2573.05212026634626 -9.92310e-06 3.01845e-06 DIIS; ```. ```; SAD DF-basis SAD-FIT; @DF-RHF iter 0: -2572.77288633232229 -2.57277e+03 2.28224e-02; @DF-RHF iter 6: -2573.05212044674045 -2.02440e-07 7.83243e-07 DIIS; ```. This represents a worst-case example as the `SAD-FIT` basis is 10x smaller than `aug-cc-pV5Z-jkfit` for bromine. I think this represents a happy medium, 150 orbital basis functions on a single atom runs in about 3 seconds and we neatly circumvent the AM issues (Psi4 minimal AM is 4). As a note this optimization takes 11 iterations with a CORE guess to achieve the same level of convergence. Going to run with this for now. Unless someone has ideas of what went wrong with the CDJK spherical vs cartesian issue I'm just going to rip this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224644390:286,error,errors,286,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224644390,1,['error'],['errors']
Availability,"Since you got v1.7 from conda with `-c psi4`, you can get v1.8a1.dev37 (for Linux) from conda with `-c psi4/label/dev`. It will have Jonathon's fix. Thanks for the nicely prepared error report, btw.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916#issuecomment-1496078211:180,error,error,180,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1496078211,1,['error'],['error']
Availability,"So @loriab pointed this out initially (thank you for that!), and the CI seems to confirm that there's something suspect going on with the `test_gauxc_writer.py` test. I'll work on recreating the error locally on my end and fixing whatever is going on with the test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2304604794:195,error,error,195,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2304604794,1,['error'],['error']
Availability,"So after some digging, it seems that different CI runs on different hardware/compilers provide *slightly* different density/exchange matrix elements. I can only presume this is because `-march=native` is generally used in Psi4 builds. Since I set the `test_gauxc_writer.py` test tolerances to be pretty tight (literally no difference between the reference and actual density matrix), this slight deviation led the tests to fail. I didn't want to simply loosen the test tolerances without a good reason to do so, but now that I have said reason, I will just do that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2334026215:279,toler,tolerances,279,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2334026215,4,['toler'],['tolerances']
Availability,"So are we. We can see that it passed for Andy and failed for us. We cannot reproduce the issue with a icc or clang build. From travis:. ```; DLU 11 1 3 3.776E-06; DLU 12 1 4 2.292E-06; DLU 13 2 5 8.987E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.131403 ; Lowest UHF->UHF stability eigenvalues: ; B1 -0.131403 A2 -0.000000 A2 0.000000 A1 0.163530 ; B2 0.248212 A1 0.385029 B1 0.390496 B2 0.493736 ; ```. from master:. ```; DLU 11 1 3 3.776E-06; DLU 12 1 4 1.870E-06; DLU 13 2 5 7.332E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.131403; Lowest UHF->UHF stability eigenvalues:; B1 -0.131403 A2 0.000000 A1 0.163530 B2 0.248212; A1 0.385029 B1 0.390496 B2 0.493736 A2 0.523085; ```. Notice the last two iterations slightly diverge from each other. This seems to cause the A2 ordering to differ and causes a matrix comparison fail down the line. Could be a convergence issue, the way its dividing by a small number, or many things. Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. @jgonthier Tagging Jerome in so he can have a look.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182595256:982,down,down,982,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182595256,2,['down'],"['down', 'downside']"
Availability,"So as to not ping everybody in this thread every time I've done some little thing, I'm tracking my current progress on porting upstreams here: https://github.com/mattwthompson/mattwthompson/projects/1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-986950887:13,ping,ping,13,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-986950887,1,['ping'],['ping']
Availability,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:128,error,error,128,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874,6,"['Error', 'error']","['Error', 'error']"
Availability,"So the CI error here is... interesting. `FAILED: src/psi4/libdpd/CMakeFiles/dpd.dir/buf4_mat_irrep_wrt.cc.obj ; C:\PROGRA~1\LLVM\bin\clang-cl.exe /nologo -TP -DUSING_LAPACK_MKL -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_NONSTDC_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++17 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_wrt.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc; In file included from D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc:33:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\cstdio:9:; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(784,1): error: static_assert failed ""Error in C++ Standard Library usage.""; _EMIT_STL_ERROR(STL1000, ""Unexpected compiler version, expected Clang 14.0.0 or newer."");; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(456,5): note: expanded from macro '_EMIT_STL_ERROR'; static_assert(false, ""Error in C++ Standard Library usage.""); ^ ~~~~~; 1 error generated.`. Two overall errors on the Windows Psi4 build in this vein.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612:10,error,error,10,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612,6,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:9,error,error,9,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684,4,"['Error', 'error', 'failure']","['Error', 'error', 'errors', 'failure']"
Availability,"So, no look running it with GDB. ; I did find that there seems to be a problem with fread for this system. If fread is successful, it should return the size of the type that is read, but it is returning a value of 0. ; The error is happening on the loop that is started on line 720 of lreri.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157#issuecomment-128487955:223,error,error,223,https://psicode.org,https://github.com/psi4/psi4/issues/157#issuecomment-128487955,1,['error'],['error']
Availability,Some [large ints](https://dev.azure.com/psi4/psi4/_build/results?buildId=1567&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=168f406a-25eb-5f8a-7d4d-4c979d542d09&l=728) in the Cholesky decomp matrix that apparently the lower tolerances can manage but the 1e-6 can't,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-571243720:229,toler,tolerances,229,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571243720,1,['toler'],['tolerances']
Availability,"Something is ... not right. I'm looking into this now, but the basis guess gives a PBE energy of `-13988.27302270776818` Eh, both on my workstation and on our cluster ... trying to track this down now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432344773:192,down,down,192,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432344773,1,['down'],['down']
Availability,Something like this was also reported last summer where the t2 amplitude return was all zeros if string basis. I couldn't track it down in quarter hour. Thanks for harvesting report.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1604#issuecomment-800346857:131,down,down,131,https://psicode.org,https://github.com/psi4/psi4/issues/1604#issuecomment-800346857,1,['down'],['down']
Availability,"Sometime, could you take another look at `psi4 --test`, @robertodr? Whenever I run, I get the below, and it looks like it's happening outside the pcm_helper fn. That is, in c-side SCF where `@pcmsolver.inp` can't be read b/c the working dir wasn't left in the pcm subdir where `pcmsolver.inp`-->`@pcmsolver.inp`. . Note that the changes in this PR would have only influenced psiapi mode, not psithon, since most of the pcm_helper fn is just repeated from inputparser. I'm not sure whether @raimis is trying to run psithon or psiapi — looks like the latter in intent and the former in practice. Tracing back to [here](https://github.com/Acellera/htmd/pull/409#discussion_r139685402), I think they're still psithon, so this PR may have targeted the wrong approach. Or I may have all my pcmsolver input redirects quite confused. This being the fourth package that has conspired against conda, it may be one too many. ```; RHF-PCM, total algorithm; Error: Error: Getkw, line 33 in /scratch/psilocaluser/conda-builds/pcmsolver_1499412893611/work/src/utils/getkw/Getkw.cpp: Open failed: @pcmsolver.inp; ```. ```; print('RHF-PCM, total algorithm'); > energy_scf1, wfn1 = psi4.energy('scf', return_wfn=True). ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/tests/test_addons.py:425: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1996: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1271: in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFER",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-353769977:945,Error,Error,945,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-353769977,2,['Error'],['Error']
Availability,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-190956405:367,error,error,367,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405,1,['error'],['error']
Availability,"Sorry I realize my example was incomplete.; I used the following options:. ```; psi4.set_options({'basis': 'STO-3G-DECON',; 'reference': 'rohf',; 'scf_type': 'direct',; 'guess': 'sad',; 'puream':true}); ```. I then used @hokru 's trick to set the ```DF_BASIS_SCF``` object. I modified the active space (using ```RESTRICTED_DOCC``` instead of ```FROZEN_DOCC``` and only 4 active orbitals) and I also get the Segmentation Fault in the property section. But the energy is there, which is already good enough for me right now, so thanks for the tip !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871#issuecomment-615494761:420,Fault,Fault,420,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615494761,1,['Fault'],['Fault']
Availability,"Sorry about that, Brandon, it's my fault for closing out some of these PRs without paying attention to the order.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/514#issuecomment-260339449:35,fault,fault,35,https://psicode.org,https://github.com/psi4/psi4/pull/514#issuecomment-260339449,1,['fault'],['fault']
Availability,"Sorry for being late on this one - I've been doing taxes all day :( The original error comes from a negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also u",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:81,error,error,81,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393,1,['error'],['error']
Availability,"Sorry for taking such a long time on this. @loriab the `input.dat` in `pcmsolver/scf` now shows how to recover files from scratch:; ```python; pid = str(os.getpid()); scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver'); pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']])); filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save); ```; Maybe it's an interesting bit for `p4util/util.py`.; The `input.dat` for the `pcmsolver/dipole` test now uses the `perturb_h`, `perturb_with` and `perturb_dipole` parameters. Surprise, surprise, the test is **failing**. After checking the PCM set up, basis, SCF start guess and all other obvious culprits, I found out that the nuclear energy is **different** from the one in the reference file. Do you and/or @andysim and/or @dgasmith have any idea why this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/665#issuecomment-291492708:103,recover,recover,103,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291492708,1,['recover'],['recover']
Availability,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-225993854:91,down,down,91,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854,4,"['avail', 'down']","['available', 'down']"
Availability,Sorry for the delay - things slowed down around the holidays but we're back up and running now,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1432#issuecomment-451187125:36,down,down,36,https://psicode.org,https://github.com/psi4/psi4/pull/1432#issuecomment-451187125,1,['down'],['down']
Availability,"Sorry for the really slow response. No, haven't caught c-side errors before. You can see if catching general `Exception` works and if can scan traceback for text. Bu don't expend too much effort. It's the placement of driver logic that I'm more worried about breaking. Also, if you rebase, Azure should heal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719#issuecomment-534638677:62,error,errors,62,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-534638677,1,['error'],['errors']
Availability,"Sorry to get in on this kind of late, but that message:; >`...stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name typedef typename _Iterator::iterator_category iterator_category; ^`. Does seem vaguely familiar and I have not been able to get psi4 working on our clusters with intel-16.1. I have not tried recently though so if it would help you out at all @jgonthier I could try a build tonight and let you know what I see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288590352:94,error,error,94,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288590352,1,['error'],['error']
Availability,"Sorry to keep making you write, but is the ""big picture"" view of nbody documented _anywhere_? I can't follow what `energy_body_dict` means, or why the value of one of its entries is coupled to whether the total energy is available. I fear this is a case where there is a _lot_ of ""developer was only coding to be comprehensible to themselves"" code debt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221#issuecomment-871765509:221,avail,available,221,https://psicode.org,https://github.com/psi4/psi4/pull/2221#issuecomment-871765509,1,['avail'],['available']
Availability,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920:647,error,error,647,https://psicode.org,https://github.com/psi4/psi4/issues/1920,2,['error'],['error']
Availability,"Sorry, I have not stated clearly. I tried the F-SAPT example in https://psicode.org/psi4manual/master/fisapt.html#f-sapt-a-representative-example. And when I use [fsapy.py](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/fsapt/fsapt.py) to analyse the interaction between different fragment which was stated in fA.dat and fB.dat, it reported such error:; ```Traceback (most recent call last):; File ""fsapt.py"", line 1048, in; stuff = compute_fsapt(dirname, False); File ""fsapt.py"", line 888, in compute_fsapt; order2 = extract_order2_fsapt(osapt, total_ws['A'], total_ws['B'], frags); File ""fsapt.py"", line 496, in extract_order2_fsapt; val = np.einsum('i,ij,j', valueA, value, valueB); File ""<array_function internals>"", line 6, in einsum; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib/python3.7/site-packages/numpy/core/einsumfunc.py"", line 1361, in einsum; return c_einsum(*operands, **kwargs); ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (52,)->(52,newaxis) (51,51)->(51,51) (52,)->(52)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902404884:356,error,error,356,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902404884,2,['error'],['error']
Availability,"Sorry, I knew I should have merged this this afternoon. If you make this change https://github.com/psi4/psi4/pull/2895/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1R243 that should fix Linux Eco CI. And I think the Windows Azure error is a fluke.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2823#issuecomment-1469079358:259,error,error,259,https://psicode.org,https://github.com/psi4/psi4/pull/2823#issuecomment-1469079358,1,['error'],['error']
Availability,"Sorry, I wasn't paying attention; the error is earlier in the traceback. The compilation was picking my Psi4-installed non-conda copy, which is 2.0.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1013#issuecomment-388478956:38,error,error,38,https://psicode.org,https://github.com/psi4/psi4/issues/1013#issuecomment-388478956,1,['error'],['error']
Availability,"Sorry, I'll fix it in a couple days. For the moment, install an older version from before lastfriday. You can get a list of available versions on the anaconda.org/psi4 and directions for installing a particular version at the docs page.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-125036757:124,avail,available,124,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-125036757,1,['avail'],['available']
Availability,"Sorry, ```C:\Users\erikc\psi4conda\Scripts ``` was what was in my Path. I double checked via ```psi4 --test``` in cmd and the same error pops up. I also just reinstalled anaconda without adding it to my path and then reinstalling psi4. Nothing changed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875209656:131,error,error,131,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875209656,1,['error'],['error']
Availability,"Sorry, for (3), I meant how the code specifically tells you to file an; ADIIS bug if you get this, and looking through the history there's been a; number of (unrelated) bugs that also hit ADIIS issues (and, as you've; pointed out, often because something *else* went haywire). (2) seems reasonable to me. I'll play with some other settings, seeing if; turning off density-fitting or changing the grid prods things. I've run the; same calc in Orca which seems to go alright; both use LibXC for wb97M-V,; though Orca has its own VV10 impl. I'll see if non-self-consistent VV10; hits the same issue; if not, I'll play with the VV10 grid settings, too. I do have some other calculations in this dataset with perfectly reasonable; geometries which failed due to ""ADIIS"", which I'd like to sort out. I; suspect they may have a common cause in whatever *actually* caused this; failure, and I'll see what I can dig up. On Thu, Oct 5, 2023 at 9:44 AM Jonathon Misiewicz ***@***.***>; wrote:. > Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your; > patience. Between some life changes and issues compiling Psi4, I haven't; > been able to look at this issue previously.; >; > 1. Following Susi's suggestion, B3LYP converges straightforwardly. The; > SCF iterations takes one bad step early on, but this happens whether ADIIS; > is on or off.; > 2. If I disable ADIIS completely using your original functional, it; > *still* fails. Once the energy gets to around 284 Eh, it doesn't; > become negative again. *Contrary to the topic title, ADIIS is not at; > fault*.; > 3. The title suggests that you've had previous ADIIS issues; > previously. If so, please send me specific examples. My experience has been; > that ADIIS itself is fine, but can break when other parts of the code are; > badly behaved.; >; > I'll do some digging to see if I can suggest an alternate protocol that; > will actually converge.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476:870,failure,failure,870,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476,1,['failure'],['failure']
Availability,"Sorry, that #2861 link was an error. https://github.com/MolSSI/QCElemental/pull/230 was what I meant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2884#issuecomment-1442733037:30,error,error,30,https://psicode.org,https://github.com/psi4/psi4/issues/2884#issuecomment-1442733037,1,['error'],['error']
Availability,Sorry. The row/column discrepancy struck me as dpd having an unwritten convention that would be helped by writing it down somewhere prominent. My comment probably came across as more critical than intended.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435206306:117,down,down,117,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435206306,1,['down'],['down']
Availability,"Sounds good! @susilehtola's diagnosis of a badly behaved numerical functional sounds viable to me. He's more knowledgeable about how to treat such situations than I am. And yes, I'm starting to think I should amend the ADIIS/EDIIS error message to explicitly mention that something else is the usual culprit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748955323:231,error,error,231,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748955323,1,['error'],['error']
Availability,"Sounds good.; A bit more info on why I'm getting a seg fault that might help...I'm not expecting a quick solution but it might help with the process in the long run. The two fragments are detected properly and internal coords determined and printed out including one lin bend in each fragment (plus their complements) (listed as L/l(3,12,13) and L/l(18,25,26)). One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-296160675:55,fault,fault,55,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675,1,['fault'],['fault']
Availability,"Sounds like an uninviting $HOME. I think we can work around this in future. I could suggest some edits to manoeuvre around the problem for you now, but if you're psi4conda, then that's v1.3.x which has things in different places. I suggest your HOME aliasing workaround for now, and I'll ping when other is in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1724#issuecomment-534725448:288,ping,ping,288,https://psicode.org,https://github.com/psi4/psi4/issues/1724#issuecomment-534725448,1,['ping'],['ping']
Availability,"Sounds like some of these problems are hard to detect at compile time, but; perhaps they could be diagnosed by some simple little program that's; designed to look for these kinds of problems and prints out verbose output?. On Tue, Oct 11, 2016 at 10:24 AM, Lori A. Burns notifications@github.com; wrote:. > There's temporary build docs linked off README: ""Downloading and; > Installing"" on the main GH page.; > ; > It's not the specification of Python that's the problem– CMake detection; > and build are going just fine in these cases. CMake knows the exact,; > absolute path location to everything Psi4 or its build needs. The problem; > is conveying that info to the runtime environment. This is done by baking; > in all those absolute paths into the executable/library rpath. _But_,; > when a path (e.g., /usr/lib) has both a useful thing like libpython.so; > and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of; > knowing that it needs to place /usr/lib into rpath _behind_ the path to; > new gcc or new hdf5. Thus, we end up with runtime path problems, solvable; > only by LD_LIBRARY_PATH or rpath adjustment and relinking.; > ; > This problem is controllable with conda, because it isolates just what; > Psi4 needs into its own namespaced path and stuffs that into rpath. For the; > general developers CMake build, there's no robust solution that I can see.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252931820, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdh_-XGbfJiWX_fQ9cwjC-YYTBSTtks5qy5wGgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252934079:356,Down,Downloading,356,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252934079,3,"['Down', 'robust']","['Downloading', 'robust']"
Availability,"Sounds reasonable. On Thursday, December 10, 2015, Lori A. Burns notifications@github.com; wrote:. > Maybe:; > - Switch out Pople basis fitting bases to appropriate-zeta; > def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element; > holes.; > - Create another layer of defaulting so that aug-cc-pvdz orbital uses; > aug-cc-pvdz-ri/jkfit when available (as at present), then; > def2-tzvp-ri/jkfit (not at present), then the ultimate default; > def2-qzvpp-ri/jkfit (as at present). This way don't get high AM cost on; > supposedly cheap orbital basis sets.; > - Disqualify default for 5Z and 6Z basis sets. if; > aug-cc-pv5/6Z-ri/jkfit aren't defined for a certain element, we've nothing; > to put in their place.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/144#issuecomment-163827788.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/144#issuecomment-163943998:360,avail,available,360,https://psicode.org,https://github.com/psi4/psi4/issues/144#issuecomment-163943998,1,['avail'],['available']
Availability,"Stepping through, it seems it crashes in `DFHelper::transform()` when calling in `identify_order()`, in particular in this line:. ```; 1521	 op = (!(std::get<0>(transf_[*itr]).compare(str)) ? 1 : op);; ```. segfault seems to happen in C++ standard lib at. ```; /usr/include/c++/8/bits/stl_tree.h:1888; 1888		if (!_M_impl._M_key_compare(_S_key(__x), __k)); ```. This is C++ 8.2.0-13 (the -13 being Debian's revision). Will try to dig deeper. It seems the iterator `itr` gets bogus after the `itr--` on line 1537:. ```; 1536	 needs.erase(itr);; (gdb) ; 1537	 itr--;; (gdb) p itr; $124 = ""Aaa""; (gdb) n; 1519	 for (itr = needs.begin(), end = needs.end(); itr != end; ++itr) {; (gdb) p itr; $125 = <error: Cannot access memory at address 0x701040707070707>; (gdb) n; 1521	 op = (!(std::get<0>(transf_[*itr]).compare(str)) ? 1 : op);; (gdb) p itr; $126 = <error reading variable: Cannot access memory at address 0x207070007060505>; (gdb) n. Program received signal SIGSEGV, Segmentation fault.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1457#issuecomment-451645059:695,error,error,695,https://psicode.org,https://github.com/psi4/psi4/issues/1457#issuecomment-451645059,3,"['error', 'fault']","['error', 'fault']"
Availability,"Still a problem with new CI code. Full error:. ```; PSIO_ERROR: Can't find TOC Entry buffer_ 0; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 41, in <module>; File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/proc.py"", line 2797, in run_detci; psi4.detci(); RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/richard/SrcFiles/psi4clean/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/83#issuecomment-170686261:39,error,error,39,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-170686261,5,"['Error', 'error']","['Error', 'error']"
Availability,Still some sort of issue when 5.0 is found:; ```; -- Using Libxc: /home/vsts/work/1/s/build/stage/lib/libxc.a (version 5.0.0); ```. ```; /home/vsts/work/1/s/psi4/src/psi4/libfunctional/LibXCfunctional.cc: In member function ‘void psi::LibXCFunctional::set_tweak(std::vector<double>)’:; /home/vsts/work/1/s/psi4/src/psi4/libfunctional/LibXCfunctional.cc:256:69: error: invalid conversion from ‘const xc_func_info_type*’ to ‘xc_func_info_type*’ [-fpermissive]; int npars = xc_func_info_get_n_ext_params(xc_functional_.get()->info);; ^; In file included from /home/vsts/work/1/s/psi4/src/psi4/libfunctional/LibXCfunctional.cc:43:0:; /usr/share/miniconda/envs/p4env/include/xc.h:124:5: note: initializing argument 1 of ‘int xc_func_info_get_n_ext_params(xc_func_info_type*)’; int xc_func_info_get_n_ext_params(xc_func_info_type *info);; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-619572092:361,error,error,361,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-619572092,1,['error'],['error']
Availability,"Summing up discussion from the conference call on Wednesday:; * This is a non-trivial bug to fix. The easy fix of removing `psio_` from the wavefunction won't work from DFOCC, as that is how DFOCC gets some of its integrals.; * DGAS is generally uneasy with changes to the wavefunction specification. The current plan is to put actual error messages instead of segfaults for the four aforementioned modules and leave this aside, otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851#issuecomment-608613470:335,error,error,335,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-608613470,1,['error'],['error']
Availability,Supply Processed Input File in Response to Py-side Error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1214:51,Error,Error,51,https://psicode.org,https://github.com/psi4/psi4/pull/1214,1,['Error'],['Error']
Availability,"Sure thing, the link on this page [http://www.psicode.org/psi4manual/master/conda.html](url) points to 1.2, and the link here [http://www.psicode.org/psi4manual/master/build_obtaining.html#binary-installer](url) is also pointed at 1.2. (via a redirect from http://www.psicode.org/downloads.html)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1584#issuecomment-475855914:280,down,downloads,280,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855914,1,['down'],['downloads']
Availability,"Sure, I'm ok with that modification. On Fri, Feb 26, 2016 at 2:24 PM, Lori A. Burns notifications@github.com; wrote:. > If the above works, and you think it'd be helpful, I can edit; > https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to; > something like; > ; > ```; > elif reference == 'ROHF':; > if mtd_type == 'CONV':; > if module == 'DETCI': # no default for this case; > func = run_detci; > elif module in ['']:; > psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282#issuecomment-189441001.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189441755:471,avail,available,471,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441755,1,['avail'],['available']
Availability,"Sure, here is the script:. ```; import time; import sys; import os; import json. import psi4. def run_fxyz(fxyz, theory='wB97X-D3/def2-TZVP'):; '''; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad; }. with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); run_fxyz(args[1]). if __name__ == '__main__':; main(sys.argv); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100260046:1020,robust,robust,1020,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100260046,1,['robust'],['robust']
Availability,"Sure, we can add a failure just like SCF if DETCI does not converge. We can also increase the number of default iterations. At the same time, this is a fairly difficult CI case with the hydrogens very extended, I'm not sure we want defaults to cover this area as in many other cases 100 CI iterations would indicate some sort of failure. . In two-step MCSCF exact CI iterations are not really all that desirable. Unless a user loosens the MCSCF gradient threshold significantly this likely has no bearing on MCSCF computations as the previous guess CI vector is nearly exact with respect to energy near solution. Even then, delta energy convergence conditions should pick this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/394#issuecomment-222842020:19,failure,failure,19,https://psicode.org,https://github.com/psi4/psi4/issues/394#issuecomment-222842020,2,['failure'],['failure']
Availability,"Switched over Psi4 grid generation to `libgg`. Looks like about a 4x speedup in general for collocation generation. However, it spends ~65% of the time transposing the collocation matrices back to Psi4 order otherwise this would be killer (~12x faster). I can look at a few other transpose options in `libgg`, but it would be tough to spit them out correctly. Still helps dramatically for small molecules/bases and large grids. As a note I pinged TBLIS [here](https://github.com/devinamatthews/tblis/issues/13) seeing if they would implement the common grid operation `A_ij \epsilon_j B_jk -> C_ik`. Looks like they have thought about it, but not yet in. Could be a great use case to pull TBLIS in. I know @amjames or @schiebermc might need it soon. Updated the TODO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/869#issuecomment-349436402:440,ping,pinged,440,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-349436402,1,['ping'],['pinged']
Availability,Switches off Py35 Travis until the fail on PyTest exit bug can be tracked down. This bug does not appear to affect areas besides Travis as far as we know. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1245:74,down,down,74,https://psicode.org,https://github.com/psi4/psi4/pull/1245,1,['down'],['down']
Availability,"Switching to `sse` on my Mac, simint builds fine through p4. But then in mints, . ```; [ 10%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/integral.cc.o; In file included from /Users/loriab/linux/psihub/hrw-temp/psi4/src/psi4/libmints/integral.cc:55:; In file included from /Users/loriab/linux/psihub/hrw-temp/psi4/src/psi4/libmints/siminteri.h:34:; In file included from /Users/loriab/linux/miniconda3/envs/p4dev36/include/simint/simint.h:4:; In file included from /Users/loriab/linux/miniconda3/envs/p4dev36/include/simint/ostei/ostei_config.h:3:; In file included from /Users/loriab/linux/miniconda3/envs/p4dev36/include/simint/vectorization/vectorization.h:11:; /Users/loriab/linux/miniconda3/envs/p4dev36/include/simint/vectorization/intrinsics_avx.h:110:26: error: use of undeclared identifier; '_mm256_set_m128d'; __m256d t3 = _mm256_set_m128d( _mm256_extractf128_pd(t2, 0) + _mm256_extractf128_pd(t2, 1),; ^; /Users/loriab/linux/miniconda3/envs/p4dev36/include/simint/vectorization/intrinsics_avx.h:165:26: error: use of undeclared identifier; '_mm256_set_m128d'; __m256d t3 = _mm256_set_m128d( _mm256_extractf128_pd(t2, 0) + _mm256_extractf128_pd(t2, 1),; ^; In file included from /Users/loriab/linux/psihub/hrw-temp/psi4/src/psi4/libmints/integral.cc:55:; ```. Should those be hidden for `sse`? Or is my header set just too old for words and the problem should be considered wholly on my side. Sorry to have disrupted your issue, @hokru.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356782049:778,error,error,778,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356782049,2,['error'],['error']
Availability,Syntax error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1565:7,error,error,7,https://psicode.org,https://github.com/psi4/psi4/issues/1565,1,['error'],['error']
Availability,"TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data saved to CF_PEC_1_data.csv; Plot saved as CF_PEC_Psi4_1.png. And here's the script I ran to see the available methods and options: ; import psi4. # Test common methods to see if they are available; methods_to_test = ['scf', 'mp2', 'ccsd', 'eom-ccsd', 'td-dft']; available_methods = []. for method in methods_to_test:; try:; psi4.energy(method); available_methods.append(method); except Exception:; pass. print(""Available Methods:""); print(available_methods). # List available options; options = psi4.core.get_global_option_list(); print(""\nAvailable Options:""); print(options). # Check specific option; print(""\nIs 'tdscf_type' available?"", 'tdscf_type' in options). And here's the result I got when I ran the script:; (psi4_env) -bash-4.2# python3 CF_PEC_Project.py. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/; Available Methods:; []. Available Options:; ['ABCD', 'ACTIVE', 'ACTIVE_NAT_ORBS', 'ADD_AUXILIARY_BONDS', 'AIO_CPHF', 'AIO_DF_INTS', 'ALGORITHM', 'ANALYZE', 'AO_BASIS', 'AUXILIARY_BOND_FACTOR', 'AVG_STATES', 'AVG_WEIGHTS', 'A_RAS3_MAX', 'BASIS', 'BASIS_GUESS', 'BASIS_RELATIVISTIC', 'BCCD_MAXITER', 'BENCH', 'BENDAZZOLI', 'BORDER', 'BORDER_N_REDIST', 'BORDER_REDIST_ORDER', 'BORDER_REDIST_POL', 'BORDER_RMIN', 'BORDER_RMIN_UNIT', 'BORDER_TYPE', 'BRUECKNER_MAXITER', 'BRUECKNER_ORBS_R_CONVERGENCE', 'B_RAS3_MAX', 'CACHELEVEL', 'CACHETYPE', 'CALC_S_SQUARED', 'CANONICALIZE_ACTIVE_FAVG', 'CANONICALIZE_INACTIVE_FAVG', 'CARTESIAN_SYM_TOLERANCE', 'CART_HESS_READ', 'CC', 'CC3_FOLLOW_ROOT', 'CCD_E_CONVERGENCE', 'CCD_MAXITER', 'CCD",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:5932,avail,available,5932,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['avail'],['available']
Availability,"TSVX(char,char,int,int,double *,double *,double *,double *,double *,double *,double *,int *,double *,int,double *,int,double *)"" (?C_DGTSVX@psi@@YAHDDHHPEAN000000PEAH0H0H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrf，该符号在函数 ""int __cdecl psi::C_DGTTRF(int,double *,double *,double *,double *,int *)"" (?C_DGTTRF@psi@@YAHHPEAN000PEAH@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dgttrs，该符号在函数 ""int __cdecl psi::C_DGTTRS(char,int,int,double *,double *,double *,double *,int *,double *,int)"" (?C_DGTTRS@psi@@YAHDHHPEAN000PEAH0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhgeqz，该符号在函数 ""int __cdecl psi::C_DHGEQZ(char,char,char,int,int,int,double *,int,double *,int,double *,double *,double *,double *,int,double *,int,double *,int)"" (?C_DHGEQZ@psi@@YAHDDDHHHPEANH0H0000H0H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhsein，该符号在函数 ""int __cdecl psi::C_DHSEIN(char,char,char,int,double *,int,double *,double *,double *,int,double *,int,int,int *,double *,int *,int *)"" (?C_DHSEIN@psi@@YAHDDDHPEANH000H0HHPEAH011@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dhseqr，该符号在函数 ""int __cdecl psi::C_DHSEQR(char,char,int,int,int,double *,int,double *,double *,double *,int,double *,int)"" (?C_DHSEQR@psi@@YAHDDHHHPEANH000H0H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopgtr，该符号在函数 ""int __cdecl psi::C_DOPGTR(char,int,double *,double *,double *,int,double *)"" (?C_DOPGTR@psi@@YAHDHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dopmtr，该符号在函数 ""int __cdecl psi::C_DOPMTR(char,char,char,int,int,double *,double *,double *,int,double *)"" (?C_DOPMTR@psi@@YAHDDDHHPEAN00H0@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorgbr，该符号在函数 ""int __cdecl psi::C_DORGBR(char,int,int,int,double *,int,double *,double *,int)"" (?C_DORGBR@psi@@YAHDHHHPEANH00H@Z) 中被引用; F:\qt.lib(lapack_intfc.cc.obj) : error LNK2019: 无法解析的外部符号 dorghr，该符号在函数 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:27916,error,error,27916,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['error'],['error']
Availability,"TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data saved to CF_PEC_1_data.csv; Plot saved as CF_PEC_Psi4_1.png. And here's the script I ran to see the available methods and options: ; import psi4. # Test common methods to see if they are available; methods_to_test = ['scf', 'mp2', 'ccsd', 'eom-ccsd', 'td-dft']; available_methods = []. for method in methods_to_test:; try:; psi4.energy(method); available_methods.append(method); except Exception:; pass. print(""Available Methods:""); print(available_methods). # List available options; options = psi4.core.get_global_option_list(); print(""\nAvailable Options:""); print(options). # Check specific option; print(""\nIs 'tdscf_type' available?"", 'tdscf_type' in options). And here's the result I got when I ran the script:; (psi4_env) -bash-4.2# python3 CF_PEC_Project.py. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/; Available Methods:; []. Available Options:; ['ABCD', 'ACTIVE', 'ACTIVE_NAT_ORBS', 'ADD_AUXILIARY_BONDS', 'AIO_CPHF', 'AIO_DF_INTS', 'ALGORITHM', 'ANALYZE', 'AO_BASIS', 'AUXILIARY_BOND_FACTOR', 'AVG_STATES', 'AVG_WEIGHTS', 'A_RAS3_MAX', 'BASIS', 'BASIS_GUESS', 'BASIS_RELATIVISTIC', 'BCCD_MAXITER', 'BENCH', 'BENDAZZOLI', 'BORDER', 'BORDER_N_REDIST', 'BORDER_REDIST_ORDER', 'BORDER_REDIST_POL', 'BORDER_RMIN', 'BORDER_RMIN_UNIT', 'BORDER_TYPE', 'BRUECKNER_MAXITER', 'BRUECKNER_ORBS_R_CONVERGENCE', 'B_RAS3_MAX', 'CACHELEVEL', 'CACHETYPE', 'CALC_S_SQUARED', 'CANONICALIZE_ACTIVE_FAVG",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:5770,avail,available,5770,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['avail'],['available']
Availability,"Take the following input script:. ```; molecule mol {; He 0 0 4; --; He 0 0 0; }. mol.update_geometry(); mol.print_out(). new_mol = mol.clone(); new_mol.print_out(); ```. and examine the output:. ```; Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 2.000000000000 4.002603254150; HE 0.000000000000 0.000000000000 -2.000000000000 4.002603254150. Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 2.000000000000 4.002603254150; HE 0.000000000000 0.000000000000 -2.000000000000 4.002603254150; ```. The Molecule Point group does not get carried through, and some piece of data is missing so that `update_geometry` does not fix this either. In some circumstances this will cause a seg fault. Note that the clone function is somewhat awkward in molecule and causes both the copy and assignment constructors to be called. In the meantime we can use the following syntax:. ```; new_mol = psi4.Molecule.create_molecule_from_string(mol.create_psi4_string_from_molecule()); ```. Note, if you are running this on psi4/public you will probably notice that the `new_mol` does not have atoms, this bug has been fixed inside the wavefunction_pass update.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/235:1051,fault,fault,1051,https://psicode.org,https://github.com/psi4/psi4/issues/235,1,['fault'],['fault']
Availability,Tarballs downloaded from GitHub are not git repositories. We use them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358102176:9,down,downloaded,9,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358102176,1,['down'],['downloaded']
Availability,"Test ```tests/cc36``` fails when run with PyTest:. ```; =========================================================================================== ERRORS ===========================================================================================; _________________________________________________________________________ ERROR collecting tests/cc36/test_input.py __________________________________________________________________________; test_input.py:1: in <module>; from addons import *; ../pytests/addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:89: in get_version; with popen([which_prog, ""--version""]) as exc:; /usr/local/lib/python3.9/contextlib.py:119: in __enter__; return next(self.gen); /usr/local/lib/python3.9/site-packages/qcengine/util.py:304: in popen; ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}; /usr/local/lib/python3.9/subprocess.py:951: in __init__; self._execute_child(args, executable, preexec_fn, close_fds,; /usr/local/lib/python3.9/subprocess.py:1744: in _execute_child; executable = os.fsencode(executable); /usr/local/lib/python3.9/os.py:810: in fsencode; filename = fspath(filename) # Does type-checking of `filename`.; E TypeError: expected str, bytes or os.PathLike object, not NoneType; ================================================================================== short test summary info ===================================================================================; ERROR test_input.py - TypeError: expected str, bytes or os.PathLike object, not NoneType; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collectio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2802:148,ERROR,ERRORS,148,https://psicode.org,https://github.com/psi4/psi4/issues/2802,2,['ERROR'],"['ERROR', 'ERRORS']"
Availability,"Test case 32 from the FH51 subset of [GMTKN55](http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/FH51ref.html) computes the isomerization energy between H2C-C5-CH2 and heptatriyne. So as to not to bury the lede: very strange energies result when running H2C-C5-CH2 with wB97X-3c, which I suspect are tied to this message:. ```; !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!; ``` . The energy of H2C-C5-CH2 is computed to be -43.4074821405164926 Eh, and the energy of heptatriyne is computed to be -42.0459519798808898, leading to a predicted ∆E of -854 kcal/mol. The ""correct"" high-level value is -14.30 kcal/mol, and the authors of the wB97X-3c paper report an energy of -13.17 kcal/mol for this system. Similar results are seen when using B3LYP-D4/vDZP or r2SCAN-D4/vDZP, suggesting that vDZP is the common factor here. The orbital occupancies for H2C-C5-CH2 do seem a bit odd to me? I'm not used to seeing such low-energy virtual orbitals... ```; Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -1.094498 2A -1.062498 3A -1.041834 ; 4A -1.016695 5A -0.963137 6A -0.898331 ; 7A -0.834072 8A -0.703197 9A -0.700832 ; 10A -0.661618 11A -0.660116 12A -0.605235 ; 13A -0.596357 14A -0.526703 15A -0.507419 ; 16A -0.419207 . Virtual: . 17A -0.218606 18A -0.112811 19A -0.091525 ; 20A 0.037195 21A 0.048637 22A 0.051338 ; 23A 0.054059 24A 0.105612 25A 0.106004 ; 26A 0.174431 27A 0.193680 28A 0.196900 ; ```. Not sure what ECP factors could be driving these issues, or how to fix this, but thought I should raise an issue. Here's all the input and output files:. Input file for H2C-C5-CH2:; ```; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:82,down,downloads,82,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['down'],['downloads']
Availability,Test failure healed after fixing an unrelated bug.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2376#issuecomment-988106570:5,failure,failure,5,https://psicode.org,https://github.com/psi4/psi4/pull/2376#issuecomment-988106570,1,['failure'],['failure']
Availability,"Test failures are everywhere, even on master. I think the MKL constraints of some of the psi packages and adcc are interacting badly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799#issuecomment-597927326:5,failure,failures,5,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-597927326,1,['failure'],['failures']
Availability,Test failures are expected until #2750 is merged in.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2748#issuecomment-1279252713:5,failure,failures,5,https://psicode.org,https://github.com/psi4/psi4/pull/2748#issuecomment-1279252713,1,['failure'],['failures']
Availability,"Test failures here are some more references to n-pole components that need to be removed. I'll fix it, but it's slow-going as I need to sync up my local repo to L2-oei.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2479#issuecomment-1068050818:5,failure,failures,5,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1068050818,1,['failure'],['failures']
Availability,Testing different methods to see which properties are available.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-37977939:54,avail,available,54,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-37977939,1,['avail'],['available']
Availability,"Testing the gradients of dlDF/cc-pVDZ, I see similar differences between analytic and numerical gradients with modern Psi4 (1.2a1.dev829):. - Density fitting error <= 10^{-6}; - Differences b/t analytic & numerical as large as ~10^{-4}; - Nearly no difference between analytic gradients computed w/ standard and dense grids; numerical gradients differ by nearly 10^{-4} between dense and standard grids. For anyone interested, I've uploaded a file containing the raw gradients [here](https://github.com/psi4/psi4/files/1919924/dlDF_summary.txt) for perusal. These observations would seemingly point towards libXC kernel instabilities for meta-GGAs, instead of a more targeted problem with our M05-2X gradients in particular, exactly in line with @dgasmith's prediction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-381998886:158,error,error,158,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-381998886,1,['error'],['error']
Availability,Tests fail because of an unrelated error (https://github.com/psi4/psi4/issues/1943).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942#issuecomment-654045869:35,error,error,35,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-654045869,1,['error'],['error']
Availability,"Thank you @dgasmith for the quick feedback.; I just put the I-PI changes now in this PR/branch and tried to add also a small smoke test of the broker, when i-pi is not available on runtime in the unittests to show the concept here. The other CC changes and minor bug fixes will be put into a different PR then as those changes are indeed not required at this point, but only when also using the amplitudes as well later on in the broker.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-400979830:168,avail,available,168,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-400979830,2,['avail'],['available']
Availability,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195957592:440,error,error,440,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592,1,['error'],['error']
Availability,"Thank you for all the insights! With this info, I should be able to get it working (at least if the density matrix is available in some form.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-258839784:118,avail,available,118,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258839784,1,['avail'],['available']
Availability,"Thank you for looking into this!. So first and foremost, I have a question on this front. When I look at the [the Psi4 documentation](https://psicode.org/psi4manual/master/dft.html) on DFT grids in Psi4, it seems that an order of 7 maps to 26 spherical grid points, rather than the 86 that you mention. I won't pretend to be an expert on the DFTGrid class, but I assume this is because the orders that are referenced within the DFTGrid class pruning schemes (and I presume your comment) are different from the orders mentioned in the documentation?. Its further interesting because, by default, the initial grid that COSX uses has 50 spherical points in it, which maps to an order of 11 in the documentation (and I believe an order of 5 based on how your comment maps orders to spherical points). The COSX grids also use ROBUST pruning by default. With these settings, the COSX code should break with the default grid settings... but it doesn't seem to? To be fair, its possible that the current default settings for the initial COSX grid break the code by leading to a wonky grid rather than leading to a segfault/exception (though I would expect the latter, from my understanding of the pruning schemes). Also, as a report on my end, I made a slight modification to the code to allow for more control over how COSX grids are made - nuclear schemes, radial schemes, block schemes, etc. I then tried different combinations of grid parameters for COSX with 146 spherical points. Unfortunately, nothing I tried worked. Whatever bug we are dealing with here... it's insidious. And as a final comment, I suppose this brings up the question of, how do we want to handle this? You bring up a couple of possible solutions in your comment, none of which I have any qualms with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1460256518:821,ROBUST,ROBUST,821,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1460256518,1,['ROBUST'],['ROBUST']
Availability,"Thank you for suggesting the dev version. It worked without any further errors or warnings. Cheers!. That is a good point, David. In this case we just wanted to optimize the energy, not the structure, and we already had scripts to do so for larger molecules. Thank you for the heads-up!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682599493:72,error,errors,72,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682599493,1,['error'],['errors']
Availability,"Thank you for the info and recommendation, @hokru! Results are still not perfect, but much better. | Benzene Dimer | Min. Monomer Separation (Å) | Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points | Notes |; |---|---|---|---|---|---|---|---|; | 2mer+0-1 | 2.544 | -6.06459045 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -6.06828307 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -5.99965831 | Psi4 | | | | benchmark (CC) |; | 2mer+0-77 | 11.016 | -0.03793439 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -0.04297074 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -0.03186856 | Psi4 | | | | benchmark (CC) |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304#issuecomment-937245506:410,robust,robust,410,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-937245506,2,['robust'],['robust']
Availability,Thank you for the report. The issue persists with the current development version.; The faulty module is `fnocc`. ; I suspect the error is in the re-computation of the one-electron integrals in the DF-CCSD algorithm (https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L714),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1791#issuecomment-580181993:88,fault,faulty,88,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-580181993,2,"['error', 'fault']","['error', 'faulty']"
Availability,"Thank you very much for looking into this, @raimis - especially the detailed benchmarks. If my memories from way back (circa 2010) are correct, @robparrish and I were trying to write a prototype DF gradient code and hit a very strange error. The finite difference tests we did for hybrids all looked good, but for range-separated functionals we were getting quite large noise. The direct range-separated code worked fine, confirming that the derivative integrals were correct, and pointing the fact that we somehow messed up the chain rule in our haste. Since then Rob did a complete rewrite of the entire SCF machinery and made it infinitely better so, inspired by your detailed comments, I decided to revisit. This input. ```; memory 6Gb. molecule C4NH4 {; -1 1; C 0.00000000 0.00000000 2.13868804; N 0.00000000 0.00000000 4.42197911; C 0.00000000 0.00000000 -0.46134192; C -1.47758582 0.00000000 -2.82593059; C 1.47758582 0.00000000 -2.82593059; H -2.41269553 -1.74021190 -3.52915989; H -2.41269553 1.74021190 -3.52915989; H 2.41269553 1.74021190 -3.52915989; H 2.41269553 -1.74021190 -3.52915989; units bohr; }. set {; basis 6-31G; d_convergence 11; points 5; }. anl = gradient('scf', df_functional='wB97X-D', dertype=1); num = gradient('scf', df_functional='wB97X-D', dertype=0). anl.print_out(); num.print_out(); ```. Yields the following analytic/numerical grads for B3LYP:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 0.01448961501491; 2 0.00000000000000 0.00000000000000 0.00650495770571; 3 0.00000000000000 -0.00000000000000 -0.01465457276700; 4 -0.00257733094550 -0.00000000000000 -0.00299790291405; 5 0.00257733094550 0.00000000000000 -0.00299790291405; 6 -0.00015263631139 -0.00478910772840 -0.00008555938077; 7 -0.00015263631139 0.00478910772840 -0.00008555938077; 8 0.00015263631139 0.00478910772840 -0.00008555938077; 9 0.00015263631139 -0.00478910772840 -0.00008555938077. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351148891:235,error,error,235,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351148891,1,['error'],['error']
Availability,"Thank you very much for your comment. I looked at the code tried as you suggested (ab|ab); ```python; aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnH.basisset(), wfnO.basisset(), wfnH.basisset())); ```; and it returned this; ```; ---> 28 aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnH.basisset(), wfnO.basisset(), wfnH.basisset())); 29 aoeriHO.shape. RuntimeError: ; Fatal Error: If different basis sets exist in the bra, basis3 is expected to be dummy in setup_sieve(); Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1638121835567/work/psi4/src/psi4/libmints/twobody.cc on line: 256; The most recent 5 function calls were:. psi::TwoBodyAOInt::setup_sieve(); psi::IntegralFactory::eri(int, bool, bool); ```; May I ask what is the meaning of this error?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439#issuecomment-1038447736:386,Error,Error,386,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1038447736,3,"['Error', 'error']","['Error', 'error']"
Availability,"Thank you very much, @loriab. Is there a rough schedule whether and if yes, when this will make it into the master? We are currently preparing a paper which makes use of this code and it would be nice if it was available publicly in the not-too-far future :innocent:. Is there anything i can do for speeding up this progress?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1197787105:211,avail,available,211,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1197787105,1,['avail'],['available']
Availability,"Thank you, Ugur, for the detailed explanation. That really helps me understand what's going on in this case and in psi4/psi4private#48 . I gather that the situation we've got now is the following:. | `scf_type` | `mp2_type` | `qc_module` | outcome |; | --- | --- | --- | --- |; | conv | conv | occ | works |; | df | df | occ | works |; | df | df | dfmp2 | works |; | df | conv | occ | NYI error; psi4/psi4#48 (this); not too useful to implement |; | conv | df | dfmp2 | NYI error; psi4/psi4private#48; would be useful to implement |; | conv | df | occ | works or not?, @bozkaya |. Barring implementing many orbital response terms in this or psi4/psi4private#48, sounds like the above is fixed for the time being for when the user specifies `scf_type` and `mp2_type`. But when `scf_type` is only implied ""(df)"", I can add the below. | `scf_type` | `mp2_type` | `qc_module` | outcome |; | --- | --- | --- | --- |; | (df) --> conv | conv | occ | works as above |. If you _did_ implement cd-mp2 gradients, @bozkaya, do you anticipate them only working upon a cd-hf reference?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-184035189:389,error,error,389,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-184035189,2,['error'],['error']
Availability,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55#issuecomment-40186517:677,error,error,677,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517,3,"['Error', 'error']","['Error', 'error']"
Availability,"Thank you. I can see the following files already in the boost directory:. boost_1_55_0.tar.gz CMakeLists.txt Makefile.in. but I do not know why I got this error --- a bug in PSI4?? Anyway, I have managed to compile PSI4 using the GNU automake tools.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55#issuecomment-40244096:155,error,error,155,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40244096,1,['error'],['error']
Availability,Thank you. The input came from an xyz file sent to me and I hadn't thought to check it for errors.; But that psi4 error message would be much more helpful if translated into intelligible English.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910170283:91,error,errors,91,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910170283,2,['error'],"['error', 'errors']"
Availability,Thanks @andysim. Were you able to track down the fault?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/84#issuecomment-102086526:40,down,down,40,https://psicode.org,https://github.com/psi4/psi4/issues/84#issuecomment-102086526,2,"['down', 'fault']","['down', 'fault']"
Availability,"Thanks @loriab for looking into the CI failure!; I'll include all these edits in my next commits and I am also working on making some ctests as well. I haven't had a lot of time to to focus on computing just the diagonal elements of the F12 intermediates, so that's on the backburner.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-2018655214:39,failure,failure,39,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2018655214,1,['failure'],['failure']
Availability,"Thanks @loriab for your detailed answer. In fact, I would like to do focal-point analyses for small molecules (including HF, MP2, CC, DBOC, and relativistic corrections) in a somewhat automated form. Psi4, which is able to execute MRCC and CFOUR, seems to me an optimal frame for this purpose (I saw that certain FPA schemes are already implemented in it). . The Psi4/Cfour route looks simpler for me. Basically I will use Cartesian coordinates, but in some cases it would be useful to do CCSD(T) optimizations via CFOUR (requiring internal coordinates). How to execute the solution you posted with Psi4? I tried to put it into a file `test.dat` and run `psi4 test.dat`, but -- after correcting the possible typo [`atomic_result.dict()` instead of `atomicresult.dict()`], I received the following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:797,error,error,797,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,5,"['Error', 'error']","['Error', 'error']"
Availability,"Thanks Daniel! I looked at the changes and couldn't imagine what was; causing this. I'll follow your suggestion. Best,; Nick. On Wed, Nov 30, 2016 at 11:13 PM, Daniel Smith <notifications@github.com>; wrote:. > This is actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074858:247,error,error,247,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858,3,['error'],['error']
Availability,"Thanks a lot for the detailed bug report. I can reproduce your error and will look into it when I get time (probably not until next week, I'm afraid). The problem seems to occur when d functions are present as you indicated, but it's independent of whether spherical or Cartesian basis functions are used. It's also only an issue for molecules with degenerate modes, based on my 30 seconds of testing; that explains why my tests all passed when I wrote the code. I'll have to add a linear triatomic to the test suite when I get to the bottom of this mystery.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/791#issuecomment-324963359:63,error,error,63,https://psicode.org,https://github.com/psi4/psi4/issues/791#issuecomment-324963359,1,['error'],['error']
Availability,"Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together,. cheers,. Andy. On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote:. > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:291,fault,faults,291,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,6,"['avail', 'fault']","['avail', 'fault', 'faults']"
Availability,"Thanks a lot for you hard detective work to track this down. I'm happy to merge the PR, but I'd like to dig around and see if I can figure out why the off-diagonals appear in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292588286:55,down,down,55,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292588286,1,['down'],['down']
Availability,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185833831:170,error,error,170,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831,1,['error'],['error']
Availability,"Thanks again @edeprince3. I now get this compilation error when trying to get the skeleton example plugin built:; ```; [ 75%] Build skeleton example plugin; Traceback (most recent call last):; File ""../../../stage/usr/local/psi4/bin/psi4"", line 158, in <module>; import psi4; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: dgeev; ```; Has anybody encountered this before?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355344822:53,error,error,53,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355344822,2,"['Error', 'error']","['Error', 'error']"
Availability,"Thanks for [the PR](https://github.com/loriab/psi4/pull/8), @bozkaya. Unfortunately, it (1) contains commits from authors other than yourself, indicating that the branch isn't based off loriab:ugurfno and (2) the final commit, which should contain just your changes from this week, shows over 3k files and 1M LOC changed. This is seriously wrong and probably not worth trying to recover from. Perhaps start over with [these directions](https://github.com/psi4/psi4/pull/1390#issuecomment-444903155). Get my branch and add your changes. The commits tab in the PR to me should be one or a few commits solely by you from this week, and the LOC diffs should be in the hundreds (or low thousands if you add many tests). Psi uses ordinary git and the PR workflow, so internet resources and [our resources](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow) are available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-447379000:379,recover,recover,379,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-447379000,2,"['avail', 'recover']","['available', 'recover']"
Availability,Thanks for all the help. I will see if I can push the maintenance to install SL7.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607347442:54,mainten,maintenance,54,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607347442,1,['mainten'],['maintenance']
Availability,"Thanks for answers! After disabling SIP in the recovery mode, I can debug the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258681033:47,recover,recovery,47,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258681033,1,['recover'],['recovery']
Availability,"Thanks for bumping this. Unlike the osx-arm64 migration, I didn't know how to trigger aarch64-enabling PRs on c-f. It looks like https://conda-forge.org/docs/maintainer/knowledge_base/#using-arch_rebuildtxt is the answer. `libxc` is already available, but at least `libint` and `gau2grid` will need to be built before `psi4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3198#issuecomment-2285250860:241,avail,available,241,https://psicode.org,https://github.com/psi4/psi4/issues/3198#issuecomment-2285250860,1,['avail'],['available']
Availability,"Thanks for fixing that one! I have found another however which comes up when I request to save all wavefunction properties via QCEngine using the latest dev version of psi4, here is the error message.; ```; QCEngine Input Error: Traceback (most recent call last):; File ""/Users/joshua/miniconda3/envs/psi4/lib//python3.8/site-packages/psi4/driver/schema_wrapper.py"", line 410, in run_qcschema; ret = qcel.models.AtomicResult(**ret_data, stdout=_read_output(outfile)); File ""pydantic/main.py"", line 274, in pydantic.main.BaseModel.__init__\npydantic.error_wrappers.ValidationError: 1 validation error for AtomicResult\nwavefunction -> occupations_a; Return quantity scf_occupations_a does not exist in the values. (type=value_error); ```. I think this is related to the lines here which pulls out the occupations which have been commented out I am not sure if these simply need to be uncommented or if there is some formatting that needs to be worked out https://github.com/psi4/psi4/blob/670a85012a2864dd6673ac4a39243156205c500e/psi4/driver/schema_wrapper.py#L344. ccing @dgasmith in case he knows the status of this. @hokru could you please re-open this issue or should I make a new one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1987#issuecomment-719726946:186,error,error,186,https://psicode.org,https://github.com/psi4/psi4/issues/1987#issuecomment-719726946,5,"['Error', 'error']","['Error', 'error']"
Availability,"Thanks for handling this, Ashutosh. Libtrans is showing its age, so it's great to see it being modernized. There are many CI and CC tests that don't run on Travis, so as a sanity check it'd be great if you could run the full test suite from the build directory: `ctest -j 12` if you have 12 cores available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303894263:297,avail,available,297,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303894263,1,['avail'],['available']
Availability,"Thanks for joining in, @rmcgibbo and @tallakahath. The breaking API change is that we can now properly serialize and reconstitute wavefunction objects. What gets stored and an example [here](https://github.com/psi4/psi4/pull/1304/files). So after that, the `180.npz` storage structure doesn't have to be [written out explicitly](https://github.com/psi4/psi4/commit/e5b12a40c8c2d65a5e59f758df871407afdc544c#diff-dbf22cd80d16f6d8ef8250145a6d91bfR1410) and uses of the `180` file [can be much simpler](https://github.com/psi4/psi4/pull/1495/files#diff-ce55390d6b954c38f0c1fe9df10e0eceL87). The file also now has extension `180.npy`. This is a definite improvement psi-side, but the break to snsmp2 is definitely our fault, so we're willing to fix it. We'd probably do the minimal disruption that gets the code running again. I think that means switching to reading npy from npz, and dealing with Ca_occ by either pulling it from a reconstitued wfn, `Ca_occ = scf_wfn.Ca_subset(""SO"", ""OCC"")` or saving it in the array psivar slot `scf_wfn.set_array(""CA_OCC"", Ca_occ)`. If you'd like to try doing the fix yourselves, or do greater renovations after some of the bug workarounds or progress in psi, we'd be glad of it. I'm trying to get a psi4 v1.3rc1 out, which means conda pkg `psi4` (psi4 itself and optional compiled-in addons) and `psi4-rt` (optional run-time addons) need to be in working order. That's pretty much the case except for snsmp2 (I didn't realize the trouble was more than a `npz` --> `npy` switch until yesterday.) So I was going to drop snsmp2 from `psi4-rt` for the v1.3rc1 and expect to get it back by v1.3.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514#issuecomment-459735161:713,fault,fault,713,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459735161,2,['fault'],['fault']
Availability,"Thanks for looking into this! I now have a better understanding of the original error. . First, a note about the SCF restart technology: when you use the `wfn.to_file()` function in the first file, psi4 saves (1) the name of the basis set and (2) the matrix of orbital coefficients. The numbers contained in the orbital matrix aren't useful without knowing which basis they correspond to. In the second file, psi4 reconstructs the basis set using both the saved name and orbital coefficients. When a `basis` object is defined without a name, psi4 gives that object a [randomly generated name](https://github.com/psi4/psi4/blob/master/psi4/driver/inputparser.py#L273). This is a problem when you want to use the same `basis` object in a new file, since the same object defined in different files will receive different, random names. In the error you posted, the bit about `ANONYMOUS5AA41DFC` refers to the randomly generated name of the basis. Psi4 has no way of knowing what this basis set is. Your solution of using `basis this_basis { ... }` and `set basis this_basis` certainly works, but you actually don't even need the second line; all you need is `basis this_basis { ... }`. You asked about a more flexible syntax for reading SCF guesses. What about the current syntax is limiting?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1120579737:80,error,error,80,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1120579737,2,['error'],['error']
Availability,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:140,failure,failures,140,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462,2,['failure'],['failures']
Availability,Thanks for opening the BSE issue. It looks like the parser will pass on an angular momentum of -1 along and not complain.; https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L129-L130; Perhaps an error and the expected order of letters can be printed instead.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1992#issuecomment-681870761:229,error,error,229,https://psicode.org,https://github.com/psi4/psi4/issues/1992#issuecomment-681870761,1,['error'],['error']
Availability,"Thanks for starting this. I wonder if the tech is general enough to also save the lambda amplitudes - once there's a test, I'll pull down and tinker with it. @loriab will `psi4 --json` continue to be supported, or are we looking to deprecate it? if the latter, we may wish to either go through something besides `driver`, or see what the QCEl folks think about optionally storing wfn parameters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328#issuecomment-951101445:133,down,down,133,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-951101445,1,['down'],['down']
Availability,"Thanks for the bug report. What's _happening_ is that test 243 is testing an eigenvector compute routine. The phase is non-deterministic, so the test does postprocessing on the phase. Due to an error in the test itself, the phase postprocessing was not done on the first row, causing the incorrect sign. tl;dr: Your Psi compilation is fine. The test was buggy. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061:194,error,error,194,https://psicode.org,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061,1,['error'],['error']
Availability,Thanks for the clarification! Revising the error message should reduce confusion.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577#issuecomment-1126191477:43,error,error,43,https://psicode.org,https://github.com/psi4/psi4/issues/2577#issuecomment-1126191477,1,['error'],['error']
Availability,"Thanks for the content lines. I agree with Jonathon that the troublesome part arises from https://github.com/Qiskit/qiskit-aqua/blob/1f2c316c3a1aca1296f45241d14ad8ae5fbe2027/qiskit/chemistry/drivers/psi4d/psi4driver.py#L107-L117 so it'll need to be changed there. If you like, feel free to ping me when you open an issue there. I think I could help modernize/simplify how they call psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228#issuecomment-873004517:290,ping,ping,290,https://psicode.org,https://github.com/psi4/psi4/issues/2228#issuecomment-873004517,2,['ping'],['ping']
Availability,"Thanks for the detailed error report. You're building a circa 1.0 snapshot (as evinced by the `setup` script, which we don't use anymore). The build system has been entirely rewritten since then. Please try re-cloning (not just pulling, as there's also been a git history re-write) and building the current development head. Some of the developers use Intel 2017 compilers, so they shouldn't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629#issuecomment-282489363:24,error,error,24,https://psicode.org,https://github.com/psi4/psi4/issues/629#issuecomment-282489363,1,['error'],['error']
Availability,"Thanks for the explanation and digging. It's nice that there appears to be a possible path forward. After some tinkering, I don't think symlinking a partially-functional Psi4 build in the middle of a CI run is going to be the worth the downsides. We don't need this urgently, so it may be best to table this for a bit (unless somebody else happens to need it).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-723138199:236,down,downsides,236,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-723138199,1,['down'],['downsides']
Availability,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:334,avail,available,334,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520,2,['avail'],['available']
Availability,Thanks for the heads up! Ping @bast. Do you have an example for the nondeterministic behavior? Might be something that happens also to other codes using these math detection macros.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/767#issuecomment-316203705:25,Ping,Ping,25,https://psicode.org,https://github.com/psi4/psi4/pull/767#issuecomment-316203705,1,['Ping'],['Ping']
Availability,"Thanks for the help everyone. . I am actually running into an issue with 'ranged_dihedral'. Both `psi4.core.set_local_option(""OPTKING"", ""RANGED_DIHEDRAL"", dihedral_string)` and 'psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ` give an error. ```; Error: option RANGED_DIHEDRAL is not contained in the list of available options. Error: option RANGED_DIHEDRAL is not contained in the list of available options. Did you mean? . Did you mean? ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168:268,error,error,268,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168,5,"['Error', 'avail', 'error']","['Error', 'available', 'error']"
Availability,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:284,error,error,284,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,4,['error'],['error']
Availability,"Thanks for the inquiry. My impression has been that distributing a Py/C++ package through pypi was a bad idea b/c (1) if pip decided to compile rather than download, it'd take hours to build all the deps; (2) unless we vendor 1GB libraries, we'd have to maintain Libint2, gau2grid, Libxc all on pypi, all of which are C/C++; (3) no control of LAPACK implementations and no MKL, so unreliable performance. That said, I really haven't reassessed since the advent of wheels. Would your environment enable you to download the installer (an executable bash script like the Miniconda one)? Download, bash it, and psi4 is preinstalled. Or are docker or singularity images workable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035:156,down,download,156,https://psicode.org,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035,3,"['Down', 'down']","['Download', 'download']"
Availability,"Thanks for the ping. The install page cmdline is actually correct. Since late December Psi4 has been able to use upstream `-c conda-forge` libint, and there's no longer any need for `-c conda-forge/label/libint_dev`. The latest Psi4 v1.9.1 from February on c-f uses the main-channel libint and updated the install page cmdlines. You're quite right that the psi4 conda package is segfaulting at present. The new L2 main release is built with higher AM, and I forgot that those weren't hot-swappable. The new L2-v2.9.0-linked Psi4 v1.9.1 c-f packages are building now, and will be available w/i a couple hours. _Or_ you can `conda install psi4 libint=2.8.2 python=3.11 -c conda-forge` now, and that should run fine. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3144#issuecomment-1984272079:15,ping,ping,15,https://psicode.org,https://github.com/psi4/psi4/issues/3144#issuecomment-1984272079,2,"['avail', 'ping']","['available', 'ping']"
Availability,"Thanks for the pointers, I'll take a look. > You only need the `wfn` object?. Yes and no. To bootstrap the calculation in adcc that's all what is needed. Down the line we also need the `MintsHelper` (see our [psi4 backend code](https://github.com/adc-connect/adcc/blob/master/adcc/backends/psi4.py)) to get electronic dipoles and ERI integrals in MO. > The `scf_helper` can automatically convert an SCF calculation done with symmetry into C1. Most post-scf DF methods require this already. Perfect!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547402567:154,Down,Down,154,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547402567,1,['Down'],['Down']
Availability,"Thanks for the quick answer that is helpful. We recently switched all our internal codebase to conda-forge only since mixing default/anaconda and conda-forge were creating an infinite list of either dep solving issues or symbol errors. I still tried to add `anaconda::intel-openmp` or simply the `anaconda` channel to see if I could get it to work for this simple env at least but I got another dep issue: `package psi4-1.6+77475b5-py39hceaf722_0 requires libxc 5.1.5 h84b9e52_1, but none of the providers can be installed`. If you haven't built psi4 from conda-forge but with defaults I am not surprised I am having this kind of issues. Hopefully psi4 will hit conda forge soon xD. Thanks again (feel free to close)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1164884983:228,error,errors,228,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1164884983,2,['error'],['errors']
Availability,"Thanks for the quick replies/bug fixes!. @susilehtola - we have indeed had our eye on integrating libxc, but it's coming down to manpower/tech debt issues right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2206#issuecomment-870877291:121,down,down,121,https://psicode.org,https://github.com/psi4/psi4/issues/2206#issuecomment-870877291,1,['down'],['down']
Availability,"Thanks for the reminders. Even though the tests don't use `output.ref`, it can be handy for quickly diagnosing failures, so thanks for adding it, @PeterKraus .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1262#issuecomment-424378005:111,failure,failures,111,https://psicode.org,https://github.com/psi4/psi4/pull/1262#issuecomment-424378005,1,['failure'],['failures']
Availability,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:60,error,error,60,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909,2,['error'],['error']
Availability,"Thanks for the report, @GregorySchwing. Is there any chance you've got qcportal or qcfractal installed? I ask because psi4 itself should be pydantic v2-tolerant (that is, psi4 imports the v1 API from v2), while qcfractal won't be until the v0.52 release. But that's in theory. In practice, I haven't tested lately with v2, and pydantic is moving quickly and is widely used, so it might be safer to pin it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338:152,toler,tolerant,152,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338,1,['toler'],['tolerant']
Availability,"Thanks for the report. I imagine the problem is that we (@zachglick) [changed the relevant constructor a few months back to have a default boolean argument](https://github.com/psi4/psi4/commit/85ce7af9c23d0280946e2040967e12bcd6ab3f01#diff-c513bb8f4c4e0c8ba6348974ebff6db2L182-R182). objdump tells me Psi exposes a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double, bool)` symbol, and your error message is looking for a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double)` symbol. I'm surprised that adding a default argument would force other programs to supply a value, but I'll leave this to somebody more experienced in the ways of plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270:403,error,error,403,https://psicode.org,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270,1,['error'],['error']
Availability,"Thanks for the report. I think we've averting the warning in the linked issue. It was just a warning for you, not an error, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820#issuecomment-592740552:117,error,error,117,https://psicode.org,https://github.com/psi4/psi4/issues/1820#issuecomment-592740552,1,['error'],['error']
Availability,"Thanks for the report. We did some considerable infrastructure changes that show up in `0.4` (hence the tag, so it'd be easy to let people know how to avoid them if they went wrong). The nature of the errors you're getting indicates they're definitely infrastructure-related. Could you post the input file for the oeprop error?. In trying to revert, even the architecture independent files (the python driver) will be inconsistent between pre and post `0.4`. So maybe try installing a `0.3` afresh into a new conda environment. And make sure you don't have `PSIDATADIR` envvar defined anywhere, just in case you occasionally work from cloned/compiled copies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182649776:201,error,errors,201,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182649776,2,['error'],"['error', 'errors']"
Availability,"Thanks for the response. I will try out conda install again. . In the meantime, I want to explain why I turned to #2024. ; I encounter this issue while installing just normal psi4: (this is from mamba install); ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```. How I get to this point: ; First I used `conda install psi4 -c psi4`, but it will throw me this errors. (nothing is conflicting?) So I turned to `mamba` to help me with the conflicts. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions; ```. This is what mamba got back to me if I installed the normal build. `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires chemps2 >=1.8.10,<1.8.11.0a0, but none of the providers can be installed; ```. So then I tried to install `chemps2`, this can be installed normally. . Then I tried mamba to install psi4 again. . `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires libgfortran >=3.0.1,<4.0.0.a0, but none of the providers can be installed; ```. Lastly, I tried to install libgfortran, but resulted in the above message. ; ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496:432,error,errors,432,https://psicode.org,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496,2,"['Avail', 'error']","['Available', 'errors']"
Availability,"Thanks for the swift response from both of you. `set tpdm true` combined with the `get_tpdm` function gets the TPDM as a matrix into Python, which is what I need for my use case. (The map from matrix indices to orbital indices would also be nice, but I think I can dig that up myself.) So this isn't blocking me anymore, and there shouldn't be much ""digging into details"" of DETCI required!. I think the primary question is if we want to have a `detci` dirty mode or not, and if so, how much information it should keep. The other action item is to have an error message instead of the segfault, but I can do that myself, now that I have more context on expected DETCI operation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586435576:556,error,error,556,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586435576,1,['error'],['error']
Availability,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252802760:1811,error,error,1811,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760,1,['error'],['error']
Availability,"Thanks for this!. Mimicking is the right thing to do here. We encode irreducible representations into bitstring so that the nonzero blocks of our matrix are exactly those with the property `row_irrep ^ col_irrep ^ symmetry_ = 0`. As a consequence, `A ^ B = C`. The check itself looks correct to me, and this is a huge improvement. For the sake of debug information, I'm tempted to ask for calls to `rowspi().print()` and `colspi().print` on all three matrices involved before the error message appears. I'd also like if the error message included the symmetries of all three matrices and the particular Ha that created the problem. Susi, what do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1262315350:480,error,error,480,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1262315350,2,['error'],['error']
Availability,"Thanks for waiting. I've had a lot to do lately. Psi4 isn't interpreting your input file like you intended. Psi4 1.4 will contain an error message indicating something is an amiss. The first issue is that you never actually create a molecule in the input fragment you gave me. Maybe you account for this in the full script, but if you don't, supply your string to the function `psi4.geometry`. The second issue is a deeper one. Psi interprets all singly-occupied orbitals as alpha orbitals, so Psi sees your input file and thinks you want a singlet with two unpaired alpha electrons. That's physical nonsense, so Psi4 will (in an error message we added in 1.4) complain and refuse to proceed. In 1.3, it will not be smart enough to realize an issue, proceed, and potentially give nonsense. Of course, what you want is a singlet diradical ROHF state, with an unpaired alpha electron and an unpaired beta electron in each determinant in your linear combination. I know how to tell Psi you want a singlet, but I'm not aware of any way to further specify that you want a singlet diradical ROHF state. Is there a reason why you need the diradical to be the starting point for your CASSCF?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-641504469:133,error,error,133,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641504469,2,['error'],['error']
Availability,"Thanks for working on this!. The test fail isn't your fault. DETCI [isn't reset-able](https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R217), and that has looming consequences for pytest testing and QCA use. Does your test run ok in random order and w/o the cas test `pytest ... test_psi4.py -n2 -k ""not cas""`? You've correctly found all the clean statements, but it isn't necessary to include them explicitly b/c they're run before every test https://github.com/psi4/psi4/blob/master/tests/pytests/conftest.py#L9-L14",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855#issuecomment-606202256:54,fault,fault,54,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-606202256,1,['fault'],['fault']
Availability,"Thanks for your interest and the offer, @aizvorski. Looking back over this, the necessary QCEngine has now been released, so it looks like my first steps are updating that CI and limiting Libxc to v6 so the functional definitions can be simplified. Certainly intermolecular tests are desirable. There's some ref values here http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/functional/r2SCAN-3c.html but largely they need hunting down in either papers or an independent implementation. I like S22 but anything independent will do. Then Susi had some basis set comments that I haven't looked into yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854:359,down,downloads,359,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854,4,['down'],"['down', 'downloads']"
Availability,"Thanks for your interest in Psi4+BrianQC. The second forum post you linked was a little too optimistic, so there isn't a way I know to use a binary download of Psi4 with BrianQC, even with a license. I don't know for sure, but I think BrianQC is Linux only. At one point the BrianQC ppl had an cloud instance of Psi4+BrianQC, but that doesn't look active now. From their website, their Dec 2023 release works with Psi4 v1.6. If you're not accustomed to compiling code, you might ask the BrianQC people about a cloud setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3132#issuecomment-1936872813:148,down,download,148,https://psicode.org,https://github.com/psi4/psi4/issues/3132#issuecomment-1936872813,1,['down'],['download']
Availability,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/227#issuecomment-175470082:600,avail,available,600,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082,1,['avail'],['available']
Availability,"Thanks for your patience with the late response. Take this especially simple example with DF-OMP2; ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```. I have not found any alteration of `hess_type` lets me converge the maximum MO gradient below 1e-4. I am attempting to verify the correctness of my Psi4Numpy-type implementation of DF-OMP2, which converges to `-74.698372226179` in only 5 iterations using the exact MO hessian. This disagrees with Psi in the eighth decimal place, but the Psi answer's MO gradient is not adequately converged to determine if this is an error in my code. I have attempted swapping my guess orbitals for a few systems, and I have not once found that helpful in getting the MO gradient well converged. I'll be able to post some non-toy examples sometime in January.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1371#issuecomment-449754680:811,error,error,811,https://psicode.org,https://github.com/psi4/psi4/issues/1371#issuecomment-449754680,2,['error'],['error']
Availability,Thanks for your response. You are right. But I guess we need to download and use the basis for transition metal manually.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2866#issuecomment-1411434650:64,down,download,64,https://psicode.org,https://github.com/psi4/psi4/issues/2866#issuecomment-1411434650,1,['down'],['download']
Availability,"Thanks so much for the detailed error report. I can reproduce this error, and am getting closer to finding the culprit. In the meantime, if you add the option `wcombine=False` the error should disappear. If my initial tests are correct, it appears that the new in-memory algorithm that combines the omega exchange and conventional exchange terms into one calculation is incorrect if more than one thread is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-901391587:32,error,error,32,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-901391587,3,['error'],['error']
Availability,"Thanks to @andysim, we're very close to efp-scf energies in working order. Last remaining order of business is efp-scf with spherical basis sets. Once again, Andy fixed this, but now it's breaking later in the code. The tests/libefp/qmefp-moldomains part 5 should fail at compare_values (b/c the value is for puream false) but it should complete sucessfully instead of segfaulting as it does at present. Needs a gdb analysis to find where in the scf it's breaking, then repair from there. At one point, q-chem didn't do puream true basis sets with efp at all. If that limitation is no longer in place, would be great to get a comparison value from q-chem and add that test case.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/115:470,repair,repair,470,https://psicode.org,https://github.com/psi4/psi4/issues/115,1,['repair'],['repair']
Availability,"Thanks very much for the OpenBLAS patch. Do you want to submit it as a Pull Request so you show up as a contributor, or would you rather I just added it to the code?. That install error is bizarre. Make double sure of your permissions and disk space perhaps? We regularly build in parallel (up to `-j12`), so that shouldn't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274822045:180,error,error,180,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274822045,1,['error'],['error']
Availability,"Thanks very much for the report and problem localization. Were you able to test that editing those two lines led to a running psi4 (as opposed to revealing the next problem :-) )? I can understand if permissions on the hpc system don't allow editing. If those two lines are it, I can work on a v1.9.1 release. @coltonbh, I wonder if this is related to the psi4-in-docker error you were getting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126#issuecomment-1911023377:371,error,error,371,https://psicode.org,https://github.com/psi4/psi4/issues/3126#issuecomment-1911023377,1,['error'],['error']
Availability,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292#issuecomment-189992984:515,reliab,reliable,515,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984,1,['reliab'],['reliable']
Availability,"Thanks, @bozkaya, I'm glad you'll have a chance to work on it. You can use standard `git` to access the branch. From a local clone, make sure my fork is a remote (analogous to ""alex"" below). If not, then `git remote add loriab https://github.com/loriab/psi4.git`. Then pull down the branch with `git fetch loriab ugurfno`. Then check out the branch with `git checkout ugurfno`, and ""make dfocc fno defaults match fnocc"" should be the top commit in `git log`. Proceed with normal development, and push to your account `git push origin ugurfno`. You can either open a new PR to psi4 master from there (to replace this PR) or open a PR to loriab ugurfno (to continue this PR). ```; >>> git remote -v; alex	https://github.com/AlexHeide/psi4.git (fetch); alex	https://github.com/AlexHeide/psi4.git (push); origin	https://github.com/loriab/psi4.git (fetch); origin	https://github.com/loriab/psi4.git (push); upstream	https://github.com/psi4/psi4.git (fetch); upstream	https://github.com/psi4/psi4.git (push); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-444903155:274,down,down,274,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-444903155,1,['down'],['down']
Availability,"Thanks, @bozkaya, that's very useful information. I wasn't aware of it either, so we'll have to stuff your post into the docs so it's findable. The current standard suite pass is going through and making sure frozen core either works or prints a helpful error. I don't have ambitions to handle frozen virtual in this pass, but probing it should be a follow-up. For the particular DF-CCSD grad + frz virt, we can catch the case and error out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1912#issuecomment-636214829:254,error,error,254,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-636214829,2,['error'],['error']
Availability,"Thanks, @hadim, great to hear, and thanks for testing!. General update:; * I've downloaded one of the Linux packages and run full tests, and they all passed. Not much ecosystem activated, though.; * py311 packages are ready, but `osx_arm64` are not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765:80,down,downloaded,80,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765,1,['down'],['downloaded']
Availability,"Thanks, @hokru, any testing or comments would be welcome, either now or once merged. Btw, the doi link nearest your name on [the gCP page](http://www.thch.uni-bonn.de/tc/downloads/gcp/index.html) is broken, if that's a concern.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630#issuecomment-283240378:170,down,downloads,170,https://psicode.org,https://github.com/psi4/psi4/pull/630#issuecomment-283240378,1,['down'],['downloads']
Availability,"Thanks, @jgonthier. The gdb procedure these days is `gdb --args python stage/bin/psi4 input.dat`. It should work readily -- I've used it this year. Please ping me if it gives trouble. I think @zachglick is also interested. http://psicode.org/psi4manual/master/build_planning.html#how-to-use-gdb-and-lldb-with-psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830#issuecomment-600406166:155,ping,ping,155,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-600406166,1,['ping'],['ping']
Availability,"Thanks, @loriab. I have tried a number of things, including ensuring that MKL and libiomp5 from the native compilers are used instead of conda versions of those libs, and nothing seems to change the outcome of the unpatched code with multiple threads. It's worth noting that running on an non-AVX platform removes the Valgrind errors, but doesn't change the answer so I think they're probably just coming from AVX memmove somehow confusing Valgrind. At this point, my only guess is that perhaps some weird nested thread issue is maybe causing diagonalization issues, but I have no idea why that would be a problem for the unpatched code and not for the patched code. In case anybody wants to check the results, [here's a standalone code](https://github.com/andysim/DiagonalizationTest) that diagonalizes the exact same matrix, using the exact same LAPACK calls as the unpatched code. So far it looks like things are working in Psi4 after the fix, but I just wanted to document all of the suspicious behavior on this PR, in case we see similar problems in future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-905701855:327,error,errors,327,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-905701855,1,['error'],['errors']
Availability,"Thanks, @rmcgibbo, it actually is standard practice to make a conda package of ""endorsed plugins"". I haven't gotten to that, but if you pre-approve, that's very helpful. :-). I also have a plan that even optional run-time dependencies (e.g., plugins) can be built at CMake superbuild-time with `-DENABLE_rt_dep=ON`. This is purely user-convenience since they're downstream of psi. Are you good with either/both of these options for SNS-MP2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-344708105:362,down,downstream,362,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344708105,1,['down'],['downstream']
Availability,"Thanks, @ssh2. @tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by https://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122461767:31,down,down,31,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122461767,1,['down'],['down']
Availability,"Thanks, I can't believe I did such basic error. Now it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/938#issuecomment-373364950:41,error,error,41,https://psicode.org,https://github.com/psi4/psi4/issues/938#issuecomment-373364950,1,['error'],['error']
Availability,"Thanks, I successfully passed the arguments to connect to my python3.6. However, after the cmake I still get two errors that I don't understand... ```-- Configuring incomplete, errors occurred!; See also ""/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316433585:113,error,errors,113,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433585,5,"['Error', 'error']","['Error', 'errors']"
Availability,"Thanks, good to know. So do you query the remote computer's instruction sets and then send them the appropriate binary? That sounds like a process outside conda. Having hunted down the [Intel page](https://software.intel.com/en-us/node/522753) confirming GCC:Linux::Clang:Mac::MSVC::Win with respect to the compiler underlying Intel's icpc, I link it here so I don't lose it again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411780490:176,down,down,176,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411780490,1,['down'],['down']
Availability,"Thanks, will do in the future. Let me know if/when you hit snags using; this tool. It think it is far enough along that I should be able to solve; problems.; -Rollin. On Tue, Jul 5, 2016 at 1:42 PM, Daniel Smith notifications@github.com; wrote:. > Cool, this should give us a base to start playing around with automatic; > rigid body optimizations.; > ; > Also note you can do git pull --rebase upstream master to rebase in the; > master branch of upstream. This will help cut down on the number of merges; > that happen. You can always fall back to merging if needed of course.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/432#issuecomment-230565713, or mute; > the thread; > https://github.com/notifications/unsubscribe/ADguTBNCfxO8XJ3qFYJTy2GsyG5LBgPOks5qSqV4gaJpZM4JDw7x; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432#issuecomment-230573225:477,down,down,477,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230573225,1,['down'],['down']
Availability,"Thanks, will do. I ping when it's done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598840910:19,ping,ping,19,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598840910,1,['ping'],['ping']
Availability,"Thanks. That's great news!. Are you planning to support linux, osx and windows?. I am happy to test the package on my side. Do you know how I can download the conda forge artifacts from your PR on staged-recipes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483834881:146,down,download,146,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483834881,1,['down'],['download']
Availability,"Thanks.; Now I get the following error:. ```; [100%] Linking CXX executable ../../../bin/psi4; Undefined symbols for architecture x86_64:; ""__ZNKSt11logic_error4whatEv"", referenced from:; __ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorISt11logic_errorEEEE in create_new_plugin.cc.o; __ZTVN5boost16exception_detail19error_info_injectorISt11logic_errorEE in create_new_plugin.cc.o; __ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorISt16invalid_argumentEEEE in create_new_plugin.cc.o; __ZTVN5boost16exception_detail19error_info_injectorISt16invalid_argumentEE in create_new_plugin.cc.o; __ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorISt11logic_errorEEEE in libmints.a(basisset_parser.cc.o); __ZTVN5boost16exception_detail19error_info_injectorISt11logic_errorEE in libmints.a(basisset_parser.cc.o); __ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorISt16invalid_argumentEEEE in libmints.a(basisset_parser.cc.o); ...; ""__ZNKSt13bad_exception4whatEv"", referenced from:; __ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE in libpsio.a(filemanager.cc.o); __ZTVN5boost16exception_detail14bad_exception_E in libpsio.a(filemanager.cc.o); __ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE in libboost_thread-1_57.a(thread.o); __ZTVN5boost16exception_detail14bad_exception_E in libboost_thread-1_57.a(thread.o); ""__ZNKSt13runtime_error4whatEv"", referenced from:; __ZTVN5boost9xpressive11regex_errorE in create_new_plugin.cc.o; __ZTVN5boost16exception_detail10clone_implINS_9xpressive11regex_errorEEE in create_new_plugin.cc.o; __ZTVN5boost9xpressive11regex_errorE in libplugin.a(load_plugin.cc.o); __ZTVN5boost16exception_detail10clone_implINS_9xpressive11regex_errorEEE in libplugin.a(load_plugin.cc.o); __ZTVN5boost9xpressive11regex_errorE in libmints.a(basisset.cc.o); __ZTVN5boost16exception_detail10clone_implINS_9xpressive11regex_errorEEE in libmints.a(basisset.cc.o); __ZNK5boost6system12system",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199#issuecomment-169139808:33,error,error,33,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169139808,1,['error'],['error']
Availability,"That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?. > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > Traceback (most recent call last):; > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > raise KeyError(""The file %s does not exist."" % args[""input""]); > KeyError: 'The file input.dat does not exist.'; > ; > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258681166:5,error,error,5,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681166,1,['error'],['error']
Availability,"That helped. Now; ```; gmake[5]: *** [CMakeFiles/update_version.dir/build.make:71: CMakeFiles/update_version] Error 127; gmake[4]: *** [CMakeFiles/Makefile2:977: CMakeFiles/update_version.dir/all] Error 2; gmake[4]: *** Waiting for unfinished jobs....; ```; Going through the log, I find; ```; cd /builddir/build/BUILD/psi4-1.3.2/psi4 && versioner.py --metaout /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/psi4-core-prefix/src/psi4-core-build/metadata.py --cmakeout /builddir/b; uild/BUILD/psi4-1.3.2/redhat-linux-build/psi4-core-prefix/src/psi4-core-build/metadata.cmake; /bin/sh: line 1: versioner.py: command not found; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676494935:110,Error,Error,110,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676494935,2,['Error'],['Error']
Availability,That is fine. I have some test cases with chargemol where I believe it can be very useful. Please ping me on the PR,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1138#issuecomment-416927479:98,ping,ping,98,https://psicode.org,https://github.com/psi4/psi4/pull/1138#issuecomment-416927479,1,['ping'],['ping']
Availability,That looks more like a unicode parsing error. NumPy einsum does not handle unicode ([opt_einsum](https://github.com/dgasmith/opt_einsum) does however. I don't see a reason why this would happen however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465#issuecomment-451991776:39,error,error,39,https://psicode.org,https://github.com/psi4/psi4/issues/1465#issuecomment-451991776,1,['error'],['error']
Availability,That loop looks about as simple as it gets. What kills me is the loop structure ~10 lines above is nearly identical. Any error message on the crash?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368927971:121,error,error,121,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368927971,2,['error'],['error']
Availability,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:779,avail,available,779,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['avail'],['available']
Availability,"That test is DF, not direct, so this PR is innocent. I had observed some random ADIIS failures previously but thought I had fixed them. I recommend we rerun the failed test and save investigation into the ADIIS situation for a future PR. (Probably to be done by me.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2550#issuecomment-1104653717:86,failure,failures,86,https://psicode.org,https://github.com/psi4/psi4/pull/2550#issuecomment-1104653717,1,['failure'],['failures']
Availability,That was magical. Thank you so much! It's back down to 3 minutes now 😄,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031#issuecomment-1685431494:47,down,down,47,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685431494,1,['down'],['down']
Availability,That would likely do it. Pinging @fevangelista since this is relevant to #1770.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1791#issuecomment-580235446:25,Ping,Pinging,25,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-580235446,1,['Ping'],['Pinging']
Availability,"That's a great idea. Do you have an example of where pytest catches a _C-side_ error? The error handling in renamed options needs to be C-side, and I don't know how to refer to C's PsiException Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719#issuecomment-533099356:79,error,error,79,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-533099356,2,['error'],['error']
Availability,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:194,avail,available,194,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814,1,['avail'],['available']
Availability,"That's because there's no longer a py35 among the ""latest"" release. I'm retiring those docs. Please follow the commands at https://admiring-tesla-08529a.netlify.com/installs/v13/ (linked off ""Downloads"" from psicode.org). You'll want to select Linux/Installer/""Stable Release"". Thanks for pointing out ways we're leading people astray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478010534:192,Down,Downloads,192,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478010534,1,['Down'],['Downloads']
Availability,"That's going to be logic on values not readily accessible at ""select-function"" time when scf is not yet run. If someone was running a slew of molecules with cisd/sto-3g and wanted a single serial calc of them all to continue, then I can see the benefit, but sto-3g is so tentative a calc that I'm inclined to think the existing error msg suffices. Glad to do it if the consensus is it's wanted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/546#issuecomment-266559167:328,error,error,328,https://psicode.org,https://github.com/psi4/psi4/issues/546#issuecomment-266559167,1,['error'],['error']
Availability,"That's indeed what I had in mind (in my third ansatz). Add a `qc_module` and a `select_adc` branching between `adcc` and the builtin. I guess one can just use `psi4.addons` in `select_adc` to query the availability of `adcc` before going into the branching. That was at least my idea so for. --. > Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?. You mean because it's not parallel at the moment? Yes, that's indeed a problem and was a deal breaker for some of the things we wanted to try in the past ... I have already discussed this with @maxscheurer and he promised to have a look once we have gotten a few other things out of the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180:202,avail,availability,202,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180,1,['avail'],['availability']
Availability,"That's interesting, @amjames. I'm definitely familiar with the `GLIBCXX_X.X.XX` runtime error (https://github.com/psi4/psi4/wiki/8_FAQ_Contents#how-to-satisfy-the-gcc--49-requirement-without-updating-the-os). What I think is going on is that it is building and linking correctly to the >=4.9 `$GCC_LIB` libraries. But then at runtime, it doesn't know where to find them, as that particular aspect wasn't baked into `rpath`. `ldd -v psi4` will likewise show runtime environment incorrectly using system gcc. I hadn't ever tried manipulations of `CMAKE_PREFIX_PATH` for solving this. _Without recompiling_, can you turn your failing `GLIBCXX_X.X.XX not found` into a working compilation by just manipulating `LD_LIBRARY_PATH` as in the final line of that FAQ? That will help confirm we're talking about exactly the same issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249626595:88,error,error,88,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249626595,1,['error'],['error']
Availability,"That's still a bit disappointing; the sum of the Mulliken should be ```O(1e-15)```. But, I guess that's because Molden uses stupid fixed precision. For anything beyond visualization purposes, one should use the formatted checkpoint format which yields quasi-native precision.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485#issuecomment-456168086:221,checkpoint,checkpoint,221,https://psicode.org,https://github.com/psi4/psi4/issues/1485#issuecomment-456168086,1,['checkpoint'],['checkpoint']
Availability,"That's still only if you're just looking at the density itself. If you want properties, then a O(1e-12) error in the NO coefficients can still yield noticable errors in matrix elements, since those get weighted by exponents. E.g. tight core exponents will have huge kinetic energy elements T_{ij}, but very small expansion coefficients. Still, the product of the two may well be significant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485#issuecomment-456181584:104,error,error,104,https://psicode.org,https://github.com/psi4/psi4/issues/1485#issuecomment-456181584,2,['error'],"['error', 'errors']"
Availability,"That's strange, I'm showing it as 1.8.3 (https://anaconda.org/psi4/chemps2/files). But anyways, any chance this is a rebuild of a pre-Christmas version? That has a faint look of a pybind11 incompatibility. We've been stable at pybind11 2.0 since mid-Jan or so. But any pybind11 change just requires a full wipe out of the build. And CMake is insidious, so if there's even an old pybind11 to be found at the _install_ location, it'll hunt it down and compile bad things with it. So do blow away your builddir and point it to an empty `CMAKE_INSTALL_PREFIX` if there's the least likelihood. (This is why we're sticking with 2.0 for as long as we can.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288528850:441,down,down,441,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288528850,1,['down'],['down']
Availability,"That's the merge of @loriab's new printing / running machinery into the existing master, which we expect to pass. What we need to see is 9c5d3c3 of this PR. It's not running because of merge conflicts (I only just noticed that error message), so you'll need to pull the master branch in and add the conflict resolution to the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183790721:227,error,error,227,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183790721,1,['error'],['error']
Availability,"That's using `cmake` beyond my experience, as I blow away the objdir if changing cmake variables. @robertodr will have to comment if what you describe is intended behavior. Dial down angular momentum to 4 if you're rebuilding a lot. My thanks to whoever, years ago, fixed the parallel integrals build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161#issuecomment-130123186:178,down,down,178,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130123186,1,['down'],['down']
Availability,"Thats interesting, I actually used `out_of_core` for non-symmetric densities up until recently as PK could not handle these. Only recent changes by Jerome to the PK code allow this to work. . Looks like OOC still works for SOSCF, do you have time to investigate the error a little bit? Shouldn’t be happening. Cheers,; Daniel Smith. > On Jul 15, 2016, at 11:31 AM, Andy Simmonett notifications@github.com wrote:; > ; > Ah, yes, that out of core problem. It's a strange one that manifests itself in a seg fault for out of core calls to JK but, apparently, only when the L and R matrices are not the same (as is the case in CPHF). I'll just call PK instead, and add an error if out of core flags are requested. I'll squash this last flurry of commits and then this one is good to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/437#issuecomment-233001167, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcS5QrjHR4F1-9H61dpnsfQdJCePZks5qV7XvgaJpZM4JFTfJ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-233002997:266,error,error,266,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233002997,3,"['error', 'fault']","['error', 'fault']"
Availability,"The ""other"" lebedev_mapping_: That's just the declaration for it. The problem is that `SphericalGrid::build` is a _static_ method so the; constructor isn't called when that happens. Someone might yank out the; `new` there and still statically access `lebedev_mapping_` and we are back; where we started. There's no guarantee of construction, so I stapled it; into the one place it's actually used. (And, again, I don't understand why it's used at all as it never seems to; show up downstream). Even if it was in the constructor though (which would fire on the _new_) it; would still need the mutex to ensure it's initialized once as; lebedev_mapping_ is also (purposefully) static. No sense doing the rebuild; of the map on every single object instantiation. On Wed, Oct 5, 2022, 4:59 AM Susi Lehtola ***@***.***> wrote:. > lebedev_mapping_ is a member of SphericalGrid, so initialize_lebedev(); > should be called in the constructor of SphericalGrid. No need to add; > mutexes etc.; >; > More worryingly, I also see another lebedev_mapping_ in cubature.cc; >; > https://github.com/psi4/psi4/blob/ac8f87a1dd3fdda2aabc3318713d6e5ce00e2c70/psi4/src/psi4/libfock/cubature.cc#L5065; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2736#issuecomment-1268150804>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JCEAMFQBY2H6OKMPYLWBU7NRANCNFSM6AAAAAAQ5DTWOY>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268457086:481,down,downstream,481,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268457086,1,['down'],['downstream']
Availability,The 'unexpected indent' error in some samples,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3100:24,error,error,24,https://psicode.org,https://github.com/psi4/psi4/issues/3100,1,['error'],['error']
Availability,"The 4.0b5 issue was my fault, and I've fixed it now. That was my original attempt at a redirect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112#issuecomment-121394983:23,fault,fault,23,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121394983,1,['fault'],['fault']
Availability,"The Azure build log not available, so I can't see its exact problem, but I recall Windows to have very strict ideas about file handlers and closing files. So while I agree that `with open` constructs are better than `open`/`close`, I think go with the simple solution that pleases Windows. Plus, I hope to retire this function in the next few months when we switch over to the new MolSSI BSE. Thanks for following up on the slack question/fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1687#issuecomment-518364448:24,avail,available,24,https://psicode.org,https://github.com/psi4/psi4/pull/1687#issuecomment-518364448,2,['avail'],['available']
Availability,The B97-3c SRB correction is now available with the latest `gcp` version at https://github.com/grimme-lab/gcp and via the conda-forge package `gcp-correction`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1898#issuecomment-777604762:33,avail,available,33,https://psicode.org,https://github.com/psi4/psi4/issues/1898#issuecomment-777604762,1,['avail'],['available']
Availability,"The CMake variables were not the problem, the version number was. Apparently the one in `-c psi4/label/test` is 1.8.2 and not 1.8.3. But now, the compilation failed while building liboptions.cc with the following message: ; `cd /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/bin/icpc -DUSING_LAPACK_MKL -I/global/home/users/jgonthier/software/psi4/psi4/include -I/global/home/users/jgonthier/software/psi4/psi4/src -isystem /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/stage/usr/local/psi4/include -isystem /global/home/users/jgonthier/software/miniconda/include/python2.7 -isystem /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/mkl/include -xHost -qopenmp -O3 -DNDEBUG -fPIC -std=c++11 -o CMakeFiles/options.dir/liboptions.cc.o -c /global/home/users/jgonthier/software/psi4/psi4/src/psi4/liboptions/liboptions.cc; /global/home/users/jgonthier/software/miniconda/envs/gcc52/gcc/include/c++/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^`. As you can see I use Intel compilers 2016 with Intel MKL, in the GCC 5.2 conda environment. Could it be a problem with Intel compilers ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288525890:1090,error,error,1090,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288525890,1,['error'],['error']
Availability,The DFT failures are almost certainly because of Gau2Grid using the wrong ordering convention. Thankfully [CCA is supported](https://github.com/dgasmith/gau2grid/blob/master/docs/source/order.rst#spherical-order) so it should be fixable by a simple reconfiguration.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537#issuecomment-1092760393:8,failure,failures,8,https://psicode.org,https://github.com/psi4/psi4/pull/2537#issuecomment-1092760393,2,['failure'],['failures']
Availability,"The DFT section of the manual at http://www.psicode.org/psi4manual/master/dft.html as well as https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dft.rst contains references to RC1 in multiple places. Given that 1.0 has been released, I believe the manual should be updated in these parts..; ```; The spherical grids are rotated according to a common set of rules developed during the implementation of SG1. At the moment, the rules for tetrahedral, octohedral, and icosohedral systems are not complete, so there may be some ambiguity in the grid orientation for these systems. A complete grid orientation rule set will be available in RC1. Radial grid types are controlled by the DFT_RADIAL_SCHEME option, which at the moment may be either TREUTLER or BECKE, while the number of radial points are controlled by the DFT_RADIAL_POINTS option, which is any positive integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater radius of each atom, as described in Becke’s 1988 paper. If inaccurate integration is suspected in systems with anions or very diffuse basis functions, the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The MultiExp, Mura, and EM radial grids will be available in RC1. The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME option, which may be one of TREUTLER, BECKE, or NAIVE. The faster Stratmann weighting scheme is under development, and will be available in RC1.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/564:633,avail,available,633,https://psicode.org,https://github.com/psi4/psi4/issues/564,3,['avail'],['available']
Availability,"The DHDF analytic gradients are not implemented and thus the relaxed density is not readily available.; A scaled MP2 density from kohn-sham orbitals could perhaps be constructed through `psi4numpy` means, as an approximation. The contributions from the additional xc-coupling terms arising in DHDF gradient theory should be very small.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1236#issuecomment-420568298:92,avail,available,92,https://psicode.org,https://github.com/psi4/psi4/issues/1236#issuecomment-420568298,1,['avail'],['available']
Availability,"The DIIS solver is usually more robust than approx. SOSCF, at least ORCA's implementation had and still has troubles sometimes. Not sure if it is worth the time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/256#issuecomment-185103863:32,robust,robust,32,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-185103863,1,['robust'],['robust']
Availability,"The DMRG-natural-orbital calculation also has the same error. DMRC-SCF and DRG-CI (water, N2) are passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222666388:55,error,error,55,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222666388,1,['error'],['error']
Availability,"The Karlsruhe basis sets should have pretty good fitting basis sets as well. AFAIK Pople basis sets are not really trustworthy (major deficiencies with two-electron completeness). You get better results with fewer functions with newer basis sets, and so IMHO one should play them down...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/44#issuecomment-37578156:280,down,down,280,https://psicode.org,https://github.com/psi4/psi4/issues/44#issuecomment-37578156,1,['down'],['down']
Availability,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299:422,avail,available,422,https://psicode.org,https://github.com/psi4/psi4/issues/2299,3,['avail'],['available']
Availability,"The Mac Eco error is probably a fluke -- I don't see any recent changes to dftd4-python. What do you think of defaulting this to OFF for the protection of plugins? I don't quite understand how they're behaving now with this. See below that it's warning but not erroring. I do think the cmake is slightly in error in that i'm not setting CXX_EXTENSIONS=OFF in the inner psi4/CMakeLists.txt. ```; 2024-03-25T14:45:09.8381208Z [67/68] Building Fortran object CMakeFiles/v2rdm_casscf.dir/focas_interface.F90.o; 2024-03-25T14:45:09.8382362Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:274:53:; 2024-03-25T14:45:09.8383299Z ; 2024-03-25T14:45:09.8383512Z 274 | max_dim = max(size(integrals_1,dim=1),nnz_d1,maxval(nnz_int)); 2024-03-25T14:45:09.8383966Z | 1; 2024-03-25T14:45:09.8384366Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8385389Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:161:46:; 2024-03-25T14:45:09.8386144Z ; 2024-03-25T14:45:09.8386330Z 161 | max_dim = max(size(integrals_1,dim=1),maxval(nnz_int)); 2024-03-25T14:45:09.8386747Z | 1; 2024-03-25T14:45:09.8387135Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8387546Z [68/68] Linking CXX shared module v2rdm_casscf.so; 2024-03-25T14:45:09.8404861Z [17/19] Performing install step for 'v2rdm_casscf_external'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447:12,error,error,12,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447,5,"['down', 'error']","['downstream', 'error', 'erroring']"
Availability,"The Molden documentation is unclear, but based on the code snippets you posted, your understanding of Molden's behavior is in error, and Psi is correct. 1. `rdmodd` is proof-positive that `[5D]` is used. For historical reasons, it means ""use spherical D and F functions"". This is consistent with what the Molden documentation says: ""Use the keyword [5D] on a separate line to specify the use of 'spherical' D and F functions (5 D and 7 F functions)."" While I find the meaning of the keyword unintuitive and confusing, I see nothing to support your assessment that the use of `[5D]` is _incorrect_.; 2. `rdmodd` shows that `[7F]` uses spherical f-functions but makes no statement whatsoever about the `d` functions. While the documentation says that keywords such as `[7F]` enable the use of mixed spherical and cartesians for the d and f, the documentation does not specify whether `[7F]` does this by implicitly assuming `6D` or by not changing the `D` at all, which may well be in Cartesians.; 3. Your third bullet point seem to have been miswritten. You want ""spherical or Cartesian"" and not ""Cartesian or spherical"". By specifying [5D], [7F], and [9G], Psi gives Molden the following instructions:; * Use spherical D and F shells.; * Use spherical F shells. (This is redundant but harmless, and therefore, your issue is in error.); * Use spherical G shells. I'll leave the issue open in case you point out something I've overlooked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2612#issuecomment-1159340413:126,error,error,126,https://psicode.org,https://github.com/psi4/psi4/issues/2612#issuecomment-1159340413,3,"['error', 'redundant']","['error', 'redundant']"
Availability,The PSIDATADIR is not yet available when building these. Fix for #90,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/91:26,avail,available,26,https://psicode.org,https://github.com/psi4/psi4/pull/91,1,['avail'],['available']
Availability,The PSIO error can occur for running out of RAM? Is it writing to a virtual file (for the lack of better term)?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1361#issuecomment-517408888:9,error,error,9,https://psicode.org,https://github.com/psi4/psi4/issues/1361#issuecomment-517408888,1,['error'],['error']
Availability,"The Python_EXECUTABLE setting at the top level isn't being propagated down to the libint2 build.; libint2 finds a different Python version and uses it. Multiple Python versions can be installed concurrently, and it is important that the same Python version is used everywhere.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2796:70,down,down,70,https://psicode.org,https://github.com/psi4/psi4/issues/2796,1,['down'],['down']
Availability,The Python_EXECUTABLE variable should be passed down to all cmake invocations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2796:48,down,down,48,https://psicode.org,https://github.com/psi4/psi4/issues/2796,1,['down'],['down']
Availability,The ROHF guess==read error is indeed outdated,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1781#issuecomment-577251659:21,error,error,21,https://psicode.org,https://github.com/psi4/psi4/pull/1781#issuecomment-577251659,1,['error'],['error']
Availability,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/911:326,error,error,326,https://psicode.org,https://github.com/psi4/psi4/issues/911,2,['error'],['error']
Availability,"The TD-SCF code seems to work pretty well and comparably with other codes but the current level of output that appears in the output file by default is pretty minimal (energies, symmetries, oscillator strengths, etc.). A lot more info is available through various variables but they are pretty obscure and not the easiest to use. After a brief discussion on the forum [forum](http://forum.psicode.org/t/td-scf-excited-state-densities-and-or-contributing-excitations-available-yet/2109) I was encouraged to add this as a github issue. I'm happy to add these additions and, after a fair bit of fiddling, I think I have it mostly sussed. (And it's been a good learning experience: digging into RPA and TDA literature to some extent!). I have a few additions to scf_response.py to output the set of TDM vectors and the most important excitations (and deexcitations) contributing to each excited state, and I will submit a pull request once I've cleaned it up a bit. However it currently only works for C1, i.e no symmetry. One thing I have yet to get my head around is how to handle X and Y when symmetry is involved: comparing a calculation with C1 point group with the same molecule but using a higher point group, I can see the same coefficients within the sub-matrices for the different irreducible representations but I can't see how to unpick something like an ""A -> B"" single excitation that sees to appear only in the A representation sub-matrix. (If that makes sense!)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2153:238,avail,available,238,https://psicode.org,https://github.com/psi4/psi4/issues/2153,2,['avail'],"['available', 'available-yet']"
Availability,"The Win failures are the pydantic 1.10.7 + typing extensions 4.6 we were seeing yesterday. It should have cleared up, some I'm retriggering one to check.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967#issuecomment-1561294933:8,failure,failures,8,https://psicode.org,https://github.com/psi4/psi4/pull/2967#issuecomment-1561294933,2,['failure'],['failures']
Availability,"The `__END_NAMESPACE_STD` errors were caused by the presence of an intel compiler whose variables were sourced in Josja's `~/.bashrc` file. (So, if the recipe above does not work for you, try from scratch with a virgin `~/.bashrc`.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-438674406:26,error,errors,26,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-438674406,1,['error'],['errors']
Availability,"The `dct` module does not seem to like linear dependencies. Example 1:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; s_tolerance 1e-3; }. energy('dct'); ```. The computation runs to completion and gives energies that are at least _plausible_. But the output file is littered with; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```; and `stderr` receives several MKL errors. Example 2:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; dct_type df; s_tolerance 1e-3; }. energy('dct'); ```. Using the DF code triggers a segfault. There may well be more examples I haven't found yet as I venture into other parts of the module. Either way, I'm going to be fixing this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2231:457,error,errors,457,https://psicode.org,https://github.com/psi4/psi4/issues/2231,1,['error'],['errors']
Availability,"The `diis_min_vecs` option currently has no effect in Psi4. We [check that is at least 1](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L402), but we [already raise an error if it isn't](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L849). I've checked, and it was this way before I started tinkering with DIIS. This keyword accomplishes absolutely nothing besides giving the user a chance to raise errors. Do we want to _remove the keyword_, _add the intended feature_, or _deprecate and then remove the keyword_?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2401:212,error,error,212,https://psicode.org,https://github.com/psi4/psi4/issues/2401,2,['error'],"['error', 'errors']"
Availability,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474:106,down,down,106,https://psicode.org,https://github.com/psi4/psi4/issues/474,1,['down'],['down']
Availability,"The `pcg_convergence` behavior is a change for the better. Your analysis of the issue is right, but I'd rather couple `pcg_convergence` to `r_convergence`, how tightly the residual equations are satisfied. The CEPA is a touch trickier. My initial tests say that the energy convergence is working just fine. What isn't within convergence tolerance is the decomposition of correlation energy into same-spin and opposite-spin components. Is that what you're seeing? I can investigate, but this may not be an implementation issue, just a quirk of the equations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-676411057:337,toler,tolerance,337,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-676411057,1,['toler'],['tolerance']
Availability,"The `samples/example_psi4rc_file` file has. ```; psi4_io.set_default_path('/scratch/parrish/'); ```. as default, not commented out. Even though this is a sample file, it should maybe use `/tmp` or something generally available as default scratch directory, not a directory with a developer's name on it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/392:217,avail,available,217,https://psicode.org,https://github.com/psi4/psi4/issues/392,1,['avail'],['available']
Availability,"The actual error is somewhere in the ellipses, so we will need more info. The fact that make is reporting that the error occurred in `src/lib/libpsipcm` suggests to me that it may be a problem with finding the PCM repo on GitHub, but I need more info to be sure. Can you run:. ```; export VERBOSE=1; ```. (in Bash) or:. ```; setenv VERBOSE 1; ```. (in TCSH)? ; Rerun the build command and then post the full output here. If you are curious, `VERBOSE` is the environment variable that tells CMake to spit out more information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/183#issuecomment-144069231:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/issues/183#issuecomment-144069231,2,['error'],['error']
Availability,The artifacts are available on Azure if you click through the status checks,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483877327:18,avail,available,18,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483877327,1,['avail'],['available']
Availability,"The attached input uses basis_guess to specify a basis set for the initial guess: [sapt.zip](https://github.com/psi4/psi4/files/557209/sapt.zip). This worked with a previous PSI4 release. I guess that was 4.0b6 back then. With a recent development version of PSI4 (commit 7e4ecf968ec7920ab404cb357de827cf3785a254, Wed Oct 19 16:52:24 2016 -0400), I get the following error:. ```; toon@molmod49 ~/sapt> psi4 sapt.in . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""/home/toon/.local/bin/psi4"", line 161, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/home/toon/.local/bin/../lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 3133, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1199, in scf_helper; ref_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/.local/lib/psi4/driver/p4util/python_helpers.py"", line 60, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 805, in construct; (at + 1, role, text2)); psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/484:367,error,error,367,https://psicode.org,https://github.com/psi4/psi4/issues/484,1,['error'],['error']
Availability,"The basis block is anonymous, so the external following `set basis mysvp` doesn't have anything to hang onto. `basis mysvp {...}` is the preferred way to go. I agree on the fragility of the gbs reader. The current is a direct translation from C++, which isn't a great language for parsing and error trapping. It could use an overhaul [like mol got](https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_string.py) so we could do nice things like have a comment in a gbs file. I want to see what tools @bennybp has developed for the new Basis Set Exchange and also use schema as the medium of exchange between string and the psi4 nested dictionary that currently is the unit of basis set truth. EDIT: ""pickiness"", not ""fragility""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1332#issuecomment-435698851:293,error,error,293,https://psicode.org,https://github.com/psi4/psi4/issues/1332#issuecomment-435698851,1,['error'],['error']
Availability,"The basis sets are different in both examples? I wonder why this is exclusively for prop, can you post the full error, it would be good to track down the extra temps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379476694:112,error,error,112,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379476694,2,"['down', 'error']","['down', 'error']"
Availability,"The basis sets are specifically matched to ECPs, which is the appropriate ECPXXMDF for whichever row of the periodic table. I also note that these basis sets **are** available for alkali and alkaline earth too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2697#issuecomment-1259166197:166,avail,available,166,https://psicode.org,https://github.com/psi4/psi4/issues/2697#issuecomment-1259166197,1,['avail'],['available']
Availability,"The bug is now fixed in master Psi. Expect a v1.5.1 where this issue is also fixed. The reporter who brought this issue to our attention also claimed an issue in B3LYP (which we have tried and failed to reproduce) but did not provide a complete example of what they did to produce an issue, so the report may be in error. If the report can be verified, that will belong in a separate issue. This issue is very specifically about range-separated functionals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2431#issuecomment-1036166160:315,error,error,315,https://psicode.org,https://github.com/psi4/psi4/issues/2431#issuecomment-1036166160,1,['error'],['error']
Availability,"The build installs these files:; ```; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; Error: Orphaned: /usr/ports/science/psi4/work/.build/stage/usr/local/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; ```. Each one is already installed into the proper location, ex. ```; /usr/local/share/cmake/TargetHDF5/TargetHDF5Config.cmake```. For some reason, it installs duplicates copies into locations derived from the build directory path (?). @loriab Maybe you know how to fix it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855:38,Error,Error,38,https://psicode.org,https://github.com/psi4/psi4/issues/855,5,['Error'],['Error']
Availability,"The build of psi4 1.3.2 started failing in Fedora rawhide due to test failures. The test failures are caused by a failed import of core. I am able to reproduce this in the terminal; ```; $ python3; Python 3.11.0b5 (main, Jul 26 2022, 00:00:00) [GCC 12.1.1 20220628 (Red Hat 12.1.1-3)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import psi4; Traceback (most recent call last):; File ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.11/site-packages/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: cannot import name 'core' from partially initialized module 'psi4' (most likely due to a circular import) (/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.11/site-packages/psi4/__init__.py). During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.11/site-packages/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: cannot import name 'core' from partially initialized module 'psi4' (most likely due to a circular import) (/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.11/site-packages/psi4/__init__.py); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656:70,failure,failures,70,https://psicode.org,https://github.com/psi4/psi4/issues/2656,2,['failure'],['failures']
Availability,"The calculation does not run, but it does not report an error",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2900:56,error,error,56,https://psicode.org,https://github.com/psi4/psi4/issues/2900,1,['error'],['error']
Availability,The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1877048909:21,error,error,21,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877048909,1,['error'],['error']
Availability,"The cc-pVnZ-PP and aug-cc-pVnZ-PP series of basis sets, optimized for heavy elements are not available as built in basis sets.; These basis sets are available for most elements from Y to Rn, with the exceptions of alkali and alkaline earth metals, and lanthanides. They are optimized to be used with a small-core ECP that replaces only the inner core electrons, typically one from the Stuttgart-Köln ECP family. Beyond just adding the relevant basis set and ECP definitions there is also a question of ECP selection. Based on a quick look at the docs, currently ECP-optimized basis sets and ECPs are somewhat tied together. The (aug-)cc-pVnZ-PP series does not really fit into that picture, as there are multiple valid choices of ECP. So there should be some user-facing option for selecting the ECP. Also, many of the elements may not have appropriate auxiliary basis sets available, so if DF is the default for some methods, then they should probably switch to conventional/direct/incore instead of erroring out.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2697:93,avail,available,93,https://psicode.org,https://github.com/psi4/psi4/issues/2697,4,"['avail', 'error']","['available', 'erroring']"
Availability,"The cdash report indicates a PSIO error with the SO overlap integrals, but I can't reproduce it on any of my systems. The error happened so quickly (0.05 s) for your build, that I suspect the error was due to something other than the CC code (though most of the other test cases passed). Can you try it again? @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/130#issuecomment-121981133:34,error,error,34,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121981133,3,['error'],['error']
Availability,"The code checks the number of GPUs and throws an exception if there are none. Regarding the memory, the code in its current form requires at least as much CPU memory as the GPU has. For GP100, that is 16 GB. I’ll reduce this test case to 16 GB, but I need to think carefully how to reduce it safely to a “normal” amount. > On Jun 14, 2018, at 11:16 AM, Lori A. Burns <notifications@github.com> wrote:; > ; > @loriab commented on this pull request.; > ; > In tests/gpu_dfcc/gpu_dfcc1/input.dat <https://github.com/psi4/psi4/pull/997#discussion_r195463106>:; > ; > > @@ -0,0 +1,34 @@; > +#! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; > +; > +sys.path.insert(0,'../../../.'); > +; > +import gpu_dfcc; > +; > +molecule {; > + O 0.000000000000 0.000000000000 -0.068516219310 ; > + H 0.000000000000 -0.790689573744 0.543701060724 ; > + H 0.000000000000 0.790689573744 0.543701060724 ; > +}; > +; > +memory 32000 mb; > What happens on a computer with only CPUs? Do we need to disable if hardware not detected? Only import the plugin if num_gpus>1? Or is it just harmless or non-obliging if no GPUs to work with? Clearly I've just no experience with hardware-dependent tests.; > ; > In any case, I hope memory req. can be toned down?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/997#pullrequestreview-128837847>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGg6UFdaiUjSouvB5u5K8uNAWsj5mks5t8n5DgaJpZM4Tutpb>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-397334449:1221,down,down,1221,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-397334449,1,['down'],['down']
Availability,"The code is probably attempting to use an out-of-core algorithm for one of the contractions, because it thinks it only has the default of 500 Mb; increasing the number of frozen virtuals probably allows it to run in core, which is why that trick is successful. If you add `memory 10 Gb` (or however much you have available) to the top of your input, it should help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/523#issuecomment-261793389:313,avail,available,313,https://psicode.org,https://github.com/psi4/psi4/issues/523#issuecomment-261793389,1,['avail'],['available']
Availability,"The compilation of Psi4 wants to install qcengine, but it's trying to do it in the wrong target directory; ```; running install_scripts; Installing qcengine script to /usr/local/bin; error: [Errno 13] Permission denied: '/usr/local/bin/qcengine'; make[2]: *** [external/upstream/qcengine/CMakeFiles/qcengine_external.dir/build.make:74: external/upstream/qcengine/qcengine_external-prefix/src/qcengine_external-stamp/qcengine_external-install] Error 1; make[2]: Leaving directory '/home/work/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:1440: external/upstream/qcengine/CMakeFiles/qcengine_external.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1582:183,error,error,183,https://psicode.org,https://github.com/psi4/psi4/issues/1582,4,"['Error', 'error']","['Error', 'error']"
Availability,"The context of this issue is that I got a report from @bennybp that a number of QCArchive geometry optimizations were failing, in which geomeTRIC was used to optimize the geometry by calling Psi4 (through QCEngine) for single point energies and gradients. The optimizations are part of a dataset of transition metal complexes with initial structures taken from the CSD / ICSD and pre-minimized with a semiempirical model. . Ben sent the QCArchive job specification to my student @hjnpark who converted it to a Psi4 input file (see attached input.dat in data.zip). Using this I was able to reproduce the optimization failure using geomeTRIC's command line calling Psi4 directly. We weren't sure whether the issue was due to geomeTRIC's optimization algorithm or an inaccuracy in the gradient from Psi4, so I computed the numerical gradient using finite difference of the energy and compared it with the analytic gradient. I found several components of the gradient where the difference exceeds 3e-4 and the largest difference exceeds 1e-3. The result is consistent when I use two different step sizes for the finite difference (1e-3 and 1e-4 a.u., both using central (3-point) finite difference; see fd-ana-grad.txt file in attached data.zip). By contrast, for a different system (a water dimer calculated at HF/STO-3G), the max difference between numerical and analytic gradients using a 1e-3 step size is around 1e-6. I've attached a picture where the numerical gradient, analytic gradient, and the difference are visualized. The difference is mainly on the La and Br atoms, with smaller components on the other atoms. These forces do not appear to be purely translational/rotational, but I think there is a translational/rotational component because the ""trajectory"" of the optimization appears to include some translational/rotational motion as well as distortion (attached qce_optim.xyz in data.zip). ![1](https://github.com/psi4/psi4/assets/1441560/e3dea159-d922-40c8-bad9-868b20f710e3). Although",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066:616,failure,failure,616,https://psicode.org,https://github.com/psi4/psi4/issues/3066,1,['failure'],['failure']
Availability,"The correct detection of the D2h subgroup seems to depend on the orientation. In the attached input; are two different geometries at two different orienations, but both Oh symmetry. case 1 was symmetrized using the SYVA code after C1 optimization with DFT (https://www.sciencedirect.com/science/article/pii/S0010465517300310); case 2 was downloaded from a website about symmetry. (see input). input:; [oh.txt](https://github.com/psi4/psi4/files/2320825/oh.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1177:338,down,downloaded,338,https://psicode.org,https://github.com/psi4/psi4/issues/1177,1,['down'],['downloaded']
Availability,"The current master branch of libxc includes support for double hybrids, as well as functionals with several range-separation constants (e.g. the HISS functional). It would be great to have Psi4 as an early adopter, so that we could test whether the interface is sane and the implementations are correct. The direct libxc interface will also include functionals like wB97M(2) that aren't available in Psi4 at the moment.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1875:387,avail,available,387,https://psicode.org,https://github.com/psi4/psi4/issues/1875,1,['avail'],['available']
Availability,"The direct cause of the crash is trying to use an invalid file handle. I cannot tell if that is somehow the consequence of an allocation failure. If it _is_, then there is an allocation somewhere that is missing a failure check. Even then, AFAIK memory fragmentation is not _that_ much of an issue these days on modern Linux kernels. Glibc can sometimes hold on to `free()`'d memory for way too long and neglect giving it back to the kernel, but that should show up as a ""pseudo-leak"" where the process uses more and more memory despite not having any actual leaks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246032327:137,failure,failure,137,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246032327,2,['failure'],['failure']
Availability,"The direct link was initially problematic for me, but no longer. I suspect a DNS server got compromised, it was taken down, and now you're dealing with having to wait for the malicious information to clear out of all the various caches...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210019282:118,down,down,118,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210019282,2,['down'],['down']
Availability,"The disk space for the temporary file is about 245 GB. I don't know exactly how much space it requires. Could this kind of error raise a Python exception? I use `try...except` to mark failed points, and `core dumped` can not be caught within the Python script.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970#issuecomment-1565665594:123,error,error,123,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565665594,1,['error'],['error']
Availability,The dispersion refactoring apparently changes the way I need to turn of VV10 from libxc. Will need to track down the changes to make it work again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1320#issuecomment-434339694:108,down,down,108,https://psicode.org,https://github.com/psi4/psi4/pull/1320#issuecomment-434339694,1,['down'],['down']
Availability,"The documentation in the manual for detci; http://www.psicode.org/psi4manual/master/detci.html. states that the maximum number of iterations to diagonalize the Hamiltonian is set by MAXITER, the default of which is 12. However, if one sets maxiter to 5 in the runfile, psi4 crashes because SCF convergence wasn't attained in 5 iterations, and if one sets maxiter to 50, detci crashes due to non-convergence after 25 iterations. So, there are two problems:. 1) I think the keyword specified in the manual is incorrect, because plain MAXITER does not control DETCI but rather the SCF parameter. Increasing the value of CI_MAXITER (which I found by trial and error) I was able to get FCI to converge.; 2) The default value is not 12, but 25, as demonstrated by the trial.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/423:656,error,error,656,https://psicode.org,https://github.com/psi4/psi4/issues/423,1,['error'],['error']
Availability,"The driver has failed to trap unsupported workflows for linear response properties before, so you're probably right. I can write up a PR to trap unsupported `cc_property` workflows... I get a PSIO error when I try an ROHF linear response property. Is that another case of the driver failing to trap an unsupported workflow?. ```; PSIO_ERROR: Can't find TOC Entry WAbEi (Ei,Ab); PSIO_ERROR: unit = 112, errval = 13; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2310#issuecomment-1046320061:197,error,error,197,https://psicode.org,https://github.com/psi4/psi4/issues/2310#issuecomment-1046320061,1,['error'],['error']
Availability,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/588#issuecomment-275790678:4,error,error,4,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678,5,"['Error', 'error']","['Error', 'error']"
Availability,"The error can appear in form of various crashes (e.g. bad alloc, weird print outs) but it seems ultimately the problem is that ghost atoms do not have an atomic radius for pcmsolver. I finally got a proper error message:. ```; PCMSolver fatal error.; In function initMolecule at line 588 of file /Users/github/builds/conda-builds/pcmsolver_1532565726046/work/src/interface/Meddle.cpp; In the molecule:; Geometry (in Angstrom); Center X Y Z; ------------ ------------ ------------ ------------; N-5.29177e-11 -0.0550546 0; H-0.477098 0.254982 -0.826358; H-0.477098 0.254982 0.826358; H0.954196 0.254982 0; -5.29177e-11 -0.0550546 5.29177; -0.477098 0.254982 4.46541; -0.477098 0.254982 6.11813; 0.954196 0.254982 5.29177; Rotor type: Asymmetric; Some atoms do not have a radius attached.; Please specify a radius for all atoms!; ```. input for testing: [ghost_pcm.txt](https://github.com/psi4/psi4/files/3256204/ghost_pcm.txt). ---. A manual specification is possible as a work-around but automatic would be nice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1656:4,error,error,4,https://psicode.org,https://github.com/psi4/psi4/issues/1656,3,['error'],['error']
Availability,The error is unrelated to this memory fix - it's from our change in wfn serialization. I vote that we pull this one in now and I will make a new PR to fix the orbital rotation test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-457228213:4,error,error,4,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-457228213,1,['error'],['error']
Availability,"The extraction of the error message looks complicated, but I want to catch the case where the message contains other "":"" characters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611412812:22,error,error,22,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611412812,1,['error'],['error']
Availability,The failure is that somewhere in the cc-module test `SCF_TYPE` is not correctly restored to defaults. This is convolved with #1020 and Lori's comment. Lets get that in and come back to this.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1023#issuecomment-389233551:4,failure,failure,4,https://psicode.org,https://github.com/psi4/psi4/pull/1023#issuecomment-389233551,1,['failure'],['failure']
Availability,"The failures on the Travis tests systems are likely unrelated to the file closing error. Can you reproduce those problems on the CCQC cluster, @jturney? I haven't been able to reproduce the problem on any of our machines; the valgrind trace shows an illegal instruction, but that may just be something that Valgrind can't handle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178874533:4,failure,failures,4,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178874533,2,"['error', 'failure']","['error', 'failures']"
Availability,"The following either gives `NaN` energy or (positive) 60,000 [Eh] depending on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ seem to check out, did not try larger. Other guesses, `s_tolerence`, or fitting basis appear to have no effect on this error. UHF works fine. ```; molecule mol {; 0 2; C -2.83891 -0.84747 -0.20778; N -2.06959 -0.27604 0.77905; C -0.85937 -0.82512 0.74757; N -0.82980 -1.74677 -0.21226; C -2.05910 -1.77487 -0.83179; C -2.45490 0.86620 1.59959; C 0.35903 -2.49473 -0.61265; F -1.01767 1.46174 -1.11980; B 0.28985 1.63764 -0.63648; F 0.23738 1.82826 0.77419; F 0.89453 2.73957 -1.24020; F 1.05039 0.46734 -0.88673; H -0.02604 -0.54755 1.38339; H -2.27287 -2.45330 -1.64959; H -3.86751 -0.55086 -0.37733; H -3.45079 0.68580 2.01748; H -1.72185 0.98138 2.40249; H -2.44673 1.75972 0.96603; H 0.98379 -1.85263 -1.24323; H 0.91655 -2.78676 0.28358; H 0.03922 -3.39046 -1.15377; C 2.81822 0.12352 1.52490; C 3.26768 -0.78277 0.56145; H 3.28632 0.11977 2.50813; H 2.01109 0.81253 1.27433; N 3.64537 -1.55240 -0.23308; }. set {; basis aug-cc-pVQZ; scf_type df; guess gwh; reference rohf; }. energy('SCF'); ```. An example of initial convergence can be seen for UHF/aQZ:. ```; Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -716.29320215568873 -7.16293e+02 1.25967e-02; @DF-UHF iter 2: 27.48017620380119 7.43773e+02 1.97120e-02 DIIS; @DF-UHF iter 3: -561.81810445462588 -5.89298e+02 9.53326e-03 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371:271,error,error,271,https://psicode.org,https://github.com/psi4/psi4/issues/371,1,['error'],['error']
Availability,"The following input crashes with a Segfault:. ```; molecule HeLi {; 	0 1; 	He 0.000000000 0.000000000 0.000000000; 	--; 	1 1; 	Li 3.300000000 0.000000000 0.000000000. 	units angstrom; 	no_reorient; }. set globals {; 	basis aug-cc-pVDZ; 	df_basis_scf aug-cc-pVDZ; 	df_basis_sapt aug-cc-pVDZ; 	df_basis_mp2 aug-cc-pVDZ; }. set_memory(32000000000); energy('sapt2+3(ccd)dmp2'); ```. ```; /home/apps/psi/psi4conda/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002B46FE54BA15 Unknown Unknown Unknown; libpcm.so.1 00002B46FE549637 Unknown Unknown Unknown; ```; etcetera. Output stops suddenly:; ```; <snip>; ==> CCD Dispersion <==. Beginning Monomer A CCD. Iter Energy (H) dE (H) RMS (H); 1 -0.02083174 0.020831739 0.000000000; 2 -0.02587434 0.005042604 0.000504656; 3 -0.02710324 0.001228894 0.000126313; 4 -0.02740459 0.000301348 0.000031758; 5 -0.02747899 0.000074401 0.000008016 DIIS; 6 -0.02750358 0.000024596 0.000002027 DIIS; 7 -0.02750357 -0.000000016 0.000000004 DIIS; 8 -0.02750358 0.000000015 0.000000002 DIIS; 9 -0.02750358 0.000000001 0.000000000 DIIS. Beginning Monomer B CCD; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1564:519,fault,fault,519,https://psicode.org,https://github.com/psi4/psi4/issues/1564,1,['fault'],['fault']
Availability,"The following input fails with a segfault; ```; molecule {; 0 5; Fe; }. set basis pcseg-0; set reference rohf; set scf_type pk; set mcscf_type conv; # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]. # Ar core; set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; # spd active space; set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; cas_e, cas_wfn = energy('rasscf', return_wfn=True). # Dynamical correlation from Ar core; set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); ```. There's something wrong in the input or the code, since there's an error message in the log file; ```; ==> Setting up CI strings <==. There are 2730 alpha and 105 beta strings; (subgr_lex_addr): Impossible walk!; The CI space requires 18211 (1.82E+04) determinants and 44 blocks; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693:685,error,error,685,https://psicode.org,https://github.com/psi4/psi4/issues/1693,1,['error'],['error']
Availability,The following input file breaks `inputparser.py`. ```; $ cat input.dat; # ccansmi: O=C(C#C)C=O. molecule h2 {; H; H 1 0.9; }. set basis 6-31G**; energy('scf'); ```. The exception is. ```; $ psi4 input.dat; Input error: Unmatched (; ```. The error is specific to the fact that the comment appears on the first line of the file.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/86:212,error,error,212,https://psicode.org,https://github.com/psi4/psi4/pull/86,2,['error'],['error']
Availability,"The following input file demonstrates errors in the second decimal place:; ```; molecule {; La 1 -0.5 0; La 1 0.5 0; O 0 -1 0; O 0 0 0; O 0 1 0; }. set {; basis def2-svp; scf_type df; df_basis_sad def2-universal-jkfit; df_basis_scf def2-universal-jkfit; points 5; }. func = 'hf'; anal = gradient('scf', dft_functional=func, dertype=1); fndf = gradient('scf', dft_functional=func, dertype=0); anal.print_out(); fndf.print_out(); ```. The counterpart where La is replaced with B agrees to six decimal places. This is _strongly_ suggestive of an error in ECPs. Let's keep all discussion on this issue focused on this error. DFT integration is irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672:38,error,errors,38,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672,3,['error'],"['error', 'errors']"
Availability,The following input file for H10 runs but gives an energy that is not converged:. ```; molecule {; 0 1; H 0.000 0.000 0.0000; H 0.000 0.000 2.5001; H 0.000 0.000 5.0003; H 0.000 0.000 7.5006; H 0.000 0.000 10.0011; H 0.000 0.000 12.5015; H 0.000 0.000 15.0021; H 0.000 0.000 17.5023; H 0.000 0.000 20.0030; H 0.000 0.000 22.5040; symmetry c1; }. set globals {; reference rhf; basis sto-3g; }. energy('fci'); ```. with output. ```; Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors; Iter 0 Root 1 = -4.093847469 Delta_E -8.176E+00 Delta_C 5.250E-01; ...; Iter 10 Root 1 = -4.680023014 Delta_E -1.423E-05 Delta_C 4.880E-03; Iter 11 Root 1 = -4.680047623 Delta_E -2.461E-05 Delta_C 7.532E-03; Iter 12 Root 1 = -4.680121394 Delta_E -7.377E-05 Delta_C 1.166E-02. Maximum number of CI iterations reached. * ROOT 1 CI total energy = -4.6801213940684; ```. **Problem:**. The final energy is far from being converged but the user is not warned. The correct converged energy is about 0.0007 Eh below (-4.680868674 Eh). This value can be obtain by adding `set detci maxiter 100` to the input file. . **Feature requested:**; - [ ] Increase the maximum number of iterations in DETCI (currently 12); - [ ] Warn the user/do not print final energy if DETCI does not converge; - [ ] Confirm that failure to converge DETCI does not affect CASSCF computations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/394:1336,failure,failure,1336,https://psicode.org,https://github.com/psi4/psi4/issues/394,1,['failure'],['failure']
Availability,"The following input file from [forums](http://forum.psicode.org/t/error-in-psio-wt-toclen/2234/5) gives a PSIO error `Error in PSIO_WT_TOCLEN()!` in up-to-date master. Reported said they could also reproduce with CCSD, but I haven't tried this myself. Setting `cachelevel 0` was a workaround, but not one that should be necessary. ```memory 5 gb. molecule = {; 0 2; Cl; O 1 R1; O 2 R2 1 A; R1=2.03230554; R2=1.20810395; A=115.36876732. }. set {; reference rohf; basis aug-cc-pwcvqz; print_MOs true; print 2; scf_type pk; guess sad; freeze_core -2; }. energy(‘bccd’); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261:66,error,error-in-psio-wt-toclen,66,https://psicode.org,https://github.com/psi4/psi4/issues/2261,3,"['Error', 'error']","['Error', 'error', 'error-in-psio-wt-toclen']"
Availability,"The following input file raises the error: `Cannot set element 12 since there are only 12 elements.` Somewhere, Psi is trying to set a non-existing vector element. I'm very curious why tests didn't catch this. ```; memory 2 GB. molecule {; 0 1; C 1.741722 -1.200108 -0.733703; C 1.723351 -1.235440 0.673033; C 1.741208 -0.034341 1.406196; C 1.720430 1.201594 0.733472; C 1.738484 1.236058 -0.673301; C 1.720301 0.035400 -1.407211; H 1.811924 -2.125930 -1.299462; H 1.810840 -2.187236 1.191603; H 1.810814 -0.061176 2.490913; H 1.805598 2.126733 1.298598; H 1.806257 2.188975 -1.192470; H 1.805027 0.062415 -2.491005; --; 2 1; Ba -1.306490 -0.000406 0.000195; }; basis {; assign jun-cc-pVDZ; assign Ba GENECP. [GENECP]; cartesian; ****; Ba 0 ; S 3 1.00; 0.8699000 -2.2549747 ; 0.6676000 2.5145786 ; 0.1982000 0.5775184 ; S 4 1.00; 0.8699000 2.0391383 ; 0.6676000 -2.3717712 ; 0.1982000 -1.2758006 ; 0.0823000 1.1703346 ; S 1 1.00; 0.0231000 1.0000000 ; P 3 1.00; 1.6050000 -0.1626403 ; 0.4790000 0.6971289 ; 0.1818000 0.4505107 ; P 2 1.00; 0.1804000 -0.2642537 ; 0.0476000 1.1347212 ; P 1 1.00; 0.0192000 1.0000000 ; ****; }. energy('sapt0'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2853:36,error,error,36,https://psicode.org,https://github.com/psi4/psi4/issues/2853,1,['error'],['error']
Availability,"The following input file segfaults:; ```; molecule {; symmetry c1; H; H 1 1.0 ; }. set basis cc-pvdz; e, wfn = energy('fci', return_wfn=True); wfn.form_tpdm(); ```. The issue is that the driver [cleans up DETCI after every energy call](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579). That cleanup [frees the decode matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458). But `form_tpdm` works by [creating a new CI vector](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56), which is [set with the decode matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115), which the driver freed, giving rise to a bad access exception. So which code is supposed to be responsible for DETCI cleanup? If that's the responsibility of `procrouting`, then `form_tpdm` is always going to segfault, so `form_tpdm` shouldn't be exposed to Python at all, and the user should have the TPDM be formed and kept via `set tpdm true`. If cleanup is not the responsibility of `procrouting`, then which code is supposed to be responsible for it? Leave it to the destructor?. DETCI design decisions are above my pay grade, so I'm leaving this to DGAS and CDS. The 1.4 paper is of course higher priority, but I need this feature working very badly, so I will start pinging on Tuesday.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812:1350,ping,pinging,1350,https://psicode.org,https://github.com/psi4/psi4/issues/1812,1,['ping'],['pinging']
Availability,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288:304,error,error,304,https://psicode.org,https://github.com/psi4/psi4/issues/1288,8,"['Error', 'error']","['Error', 'error']"
Availability,"The following input file; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set solver_precondition subspace; set solver_n_guess 3. gradient('mp2/cc-pvdz'); ```; segfaults due to a bad access exception. While the segfault occurred on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L290), the real problem is earlier. The loop structure [assumes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L280-L285) that `x_` and `b_` have the same number of elements. But the last method we ran [was `setup`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L163-L164), which [clears `x_`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L276). Even then, `setup` appears to have its own, unrelated problem. The preconditioner submatrix `A_` is [populated using the results of a `products_x()` call](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L259-L272). But `x_` [consists of zero vectors](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L251), so the submatrix guess procedure is just an overcomplicated way to write zero at present. That is probably very bad for the algorithm. Making matters even worse, I have not been able to find a standard conjugate gradients preconditioner with a name similar to ""SUBSPACE,"" so I cannot figure out how this algorithm was supposed to work. In short, this code is broken, and I would say beyond repair. Can I eliminate all the code for the ""SUBSPACE"" preconditioner from the `CGRSolver`? We'd just fall back to the ""JACOBI"" preconditioner, which is the default anyways.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1918:1493,repair,repair,1493,https://psicode.org,https://github.com/psi4/psi4/issues/1918,1,['repair'],['repair']
Availability,"The following input runs a CISD computation and crashes with the current version of psi4 (fe3ab0d). ```; molecule {; O; H 1 R; H 1 R 2 A. R = .9; A = 104.5; symmetry c1; }. set basis sto-3g; energy('cisd'); ```. Here is the console output:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 946, in select_cisd; return func(name, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 3949, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /Users/francesco/Source/psi4-fork/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/546:930,Error,Error,930,https://psicode.org,https://github.com/psi4/psi4/issues/546,2,['Error'],['Error']
Availability,"The following input segfaults:. ```; memory 16GB; molecule{; 0 2; C -1.309749745 1.180176173 -0.025170341; O -0.725300438 2.155147669 0.452713346; C -2.816719340 1.155998649 -0.110605975; H -3.220628949 1.262541455 0.893082386; H -3.209427538 0.248634016 -0.561900090; H -3.143158132 2.016595633 -0.688893115. units angstrom; symmetry c1; }. set{; basis def2-svp; reference uhf; DFCC False; Freeze_core True; CACHELEVEL 0; scf_type direct; print 2; }; set_num_threads(32). properties('ccsd',properties=['polarizability']); ```. I've been able to reproduce this on a serial run. My initial `lldb` run isn't giving reliable information, because it's confusing the various `MOInfo` objects defined in different `cc` modules.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2310:613,reliab,reliable,613,https://psicode.org,https://github.com/psi4/psi4/issues/2310,1,['reliab'],['reliable']
Availability,"The following input, given to me via email, gives a 'bad' dMP2 correction for SAPT:; ```; delta HF,r (2) -18.53850185 [mEh] -11.63308554 [kcal/mol] -48.67282991 [kJ/mol]; delta MP2,r (2) 141.03839795 [mEh] 88.50293088 [kcal/mol] 370.29626281 [kJ/mol]; ```. ```; molecule {; 0 1; F 0.00000000 0.00000000 2.96216000; I 0.00000000 0.00000000 0.96704400; --; 0 1; C 0.00000000 0.00000000 -2.52999200; N 0.00000000 0.00000000 -1.35165800; Na 0.00000000 0.00000000 -4.84283500; units angstrom; no_reorient; symmetry c1; }; memory 20 GiB; set {; basis def2-TZVP; freeze_core true; }; energy('sapt2+dMP2'); energy('mp2',bsse_type=['nocp']); ```. The issue is reproducible for MP2/CCSD post-SCF methods. It is not directly `DF` nor `ghost` atom related. (besides a possibly small error due to https://github.com/psi4/psi4/issues/1968). And not a module specific issue. Using different ECPs (LANL2DZ) or an all electron basis (x2c-SVPall, no rel. effects.) with global `FC=on` seems to give 'better' results in the sense that MP2 interaction energy is negative. One, and perhaps only, issue is `frozen_core`.; Turning `FC = off` only for the supermolecular MP2 part gives OK results. For the NaCN fragment we are freezing 10 electrons, while e.g. ORCA is freezing only 3. ; At least for this case, freezing the Ne-shell by default for Na is not a good choice. Tagging @PeterKraus. `freeze_core -2` makes the SAPT part crash because sth goes wrong for the `IF` fragment (fragment A):; ```; FOCC A = 18446744073709551611; FOCC B = 1; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012:771,error,error,771,https://psicode.org,https://github.com/psi4/psi4/issues/2012,1,['error'],['error']
Availability,"The following input:. ```; import psi4. mol = psi4.geometry(""""""; He 0 0 0; """"""). wfn = psi4.properties('scf/sto-3g'); ```. fails with the following exception:; ```; Traceback (most recent call last):; File ""/Users/daniel/Gits/psi4/psi4/run_psi4.py"", line 259, in <module>; exec(content); File ""<string>"", line 23, in <module>; File ""/Users/daniel/Gits/psi4/psi4/driver/driver.py"", line 826, in properties; optstash = driver_util._set_convergence_criterion('properties', lowername, 6, 10, 6, 10, 8); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 78, in _set_convergence_criterion; _method_exists(ptype, method_name); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 50, in _method_exists; raise ValidationError('%s method ""%s"" is not available.%s' % (Cptype, method_name, alternatives)). ValidationError: Properties method ""scf/sto-3g"" is not available.; ```. How `frequency` uses the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1674) to overcome the issue. The `properties` call in Psi4 is located [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L754) and could use a similar fix (or a nice little function to prevent duplication with `frequency`).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/934:766,avail,available,766,https://psicode.org,https://github.com/psi4/psi4/issues/934,2,['avail'],['available']
Availability,The following smoketests are failing on the current master branch; ```; The following tests FAILED:; 	138 - dfmp2-1 (Failed); 	486 - ddd-deriv (Failed); 	491 - psi4numpy-rhf (Failed); 	493 - psi4numpy-rhf-hessian (Failed); 	498 - python-energy (Failed); 	513 - json-schema-1-gradient (Failed); ```; Are these failures reproducible?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3028:309,failure,failures,309,https://psicode.org,https://github.com/psi4/psi4/issues/3028,1,['failure'],['failures']
Availability,"The following snippet of code fails because of the extra space at the end of `'SCF_TYPE '`. ```python; import psi4; psi4.set_options({'SCF_TYPE ' : 'DIRECT'}); ```. This is an innocent error that should be fixed by psi4, or reported back to the user with a readable error message. Simply stripping the option label of left and right spaces would prevent this issue (with no potential side effects). If the option is not found, then psi4 should throw an exception saying something like ""Option `'...'` is not valid."". This is the error message:; ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-c64c7a4449ad> in <module>; 1 import psi4; 2 ; ----> 3 psi4.set_options({'SCF_TYPE ' : 'DIRECT'}). /usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py in set_options(options_dict, verbose); 444 for k, v, in options_dict.items():; 445 mobj = optionre.match(k); --> 446 module = mobj.group('module').upper()[:-2] if mobj.group('module') else None; 447 option = mobj.group('option').upper(); 448 . AttributeError: 'NoneType' object has no attribute 'group'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2004:185,error,error,185,https://psicode.org,https://github.com/psi4/psi4/issues/2004,3,['error'],['error']
Availability,"The following type of `set` block breaks inputparser in the `quotify` function:. ```; set {; myplugin 'a/c'; myplugin 'a\b'; }; ```. with errors like. ```; Traceback (most recent call last):; File ""<string>"", line 14, in <module>; TypeError: unsupported operand type(s) for /: 'str' and 'str'; ```. and . ```; File ""<string>"", line 15; psi4.set_global_option(""MYPLUGIN"", ""'a""\""b'""); ^; SyntaxError: unexpected character after line continuation character; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/87:138,error,errors,138,https://psicode.org,https://github.com/psi4/psi4/pull/87,1,['error'],['errors']
Availability,"The frozen orbitals are computed once by helper functions and then saved. You should never have to touch these. As far as I can tell, if you simply set frozen orbitals your code should work. Your error shows a SCF issue, which I cannot reproduce in the current master. Ill probably need a backtrace to figure it out. Also, please label all timers with the CIWave prefix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-261274886:196,error,error,196,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261274886,2,['error'],['error']
Availability,"The functions weren't exposed to plugins or Python, so the only downstreams we could possibly break are using locally modified Psi. I'm not worried about them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1766#issuecomment-565454511:64,down,downstreams,64,https://psicode.org,https://github.com/psi4/psi4/pull/1766#issuecomment-565454511,1,['down'],['downstreams']
Availability,"The git history is still a concern. If it's WIP, fine, but if you're having trouble, please ping me on slack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2043#issuecomment-740234595:92,ping,ping,92,https://psicode.org,https://github.com/psi4/psi4/pull/2043#issuecomment-740234595,1,['ping'],['ping']
Availability,"The github links (when clicking on them from a search) seem to work ok. It's the links to psicode.org. The two main possibilities are:. 1.) Hacked php file on psicode.org. (Involves multiple php files. The link to labs.php also redirects). 2.) Hacked godaddy server itself, causing redirects. I see other domains on that server have been compromised. That doesn't narrow the problem down at all, and it looks like the others are slightly different. Some have already been marked as malicious by google. (https://www.google.com/#q=scottwandersonphotography.com)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210189946:383,down,down,383,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210189946,1,['down'],['down']
Availability,"The handling for the user should be the same as for -D3/D3BJ etc. Add it to the functional name and psi4 handles finding the correct parameters or throws an error. I haven't gone through with it, but adding another case for the multiple -D options seems OK. So in the end the NL parameters are added to the list of D parameters here:; ```; dashcoeff = {; 'nl:{; 'tpss' : {nl_b: 1.23}; }; 'D2: ...; ```; [dashparam.py]( https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/dashparam.py; ); It could be an annoying extra case to avoid actually running dftd3, but the ""dash"" detection and general infrastructure is really nice. --; regarding doc, a simple link within http://psicode.org/psi4manual/master/dft.html#advanced-functional-use-and-manipulation would probably suffice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348251623:157,error,error,157,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348251623,2,['error'],['error']
Availability,"The history rewrite is complete, at this point please remove all forks and clones. The git repository was reduced from 740MiB down to about 66MiB. All large files are now external projects so that we should not have to do this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-254947891:126,down,down,126,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254947891,1,['down'],['down']
Availability,"The initial issue was that cclib looks for the first line of the header (""Psi4: An Open-Source Ab Initio Electronic Structure Package"") to decide which parser to use. I pasted this into one of the outputs and tried parsing it, but still threw an error. I just ran the same molecule with psithon and tried to parse the output, found the same error. Looks like adding the header text to the start of my output file would fix the issue. Would it be reasonable to add a `header=True` option to the `set_output_file()` function, such that the contents of `header.py` are automatically included?. As for the cclib issue, it looks like the structure of the Convergence Check section has changed since their code was written. I'll file an issue over there to fix that matter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2893#issuecomment-1460731784:246,error,error,246,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1460731784,2,['error'],['error']
Availability,"The input; ```; molecule {; 0 2; Li; }. set basis def2-SVP; set reference uhf; set freeze_core True; set scf_type df; set mp2_type df. energy('mp2'); ```; results in a crash:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: There are no occupied orbitals with beta spin. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1671346910751/work/psi4/src/psi4/dfmp2/mp2.cc on line: !; ! 206 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```; even though there are occupied orbitals with beta spin; ```; --------------------------------------------------------; DF-MP2 ; 2nd-Order Density-Fitted Moller-Plesset Theory ; UMP2 Wavefunction, 1 Threads ; ; Rob Parrish, Justin Turney, Andy Simmonett, ; Ed Hohenstein, and C. David Sherrill ; --------------------------------------------------------. --------------------------------------------------------; NBF = 9, NAUX = 25; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 1 2 1 7 7 0; BETA 1 1 0 8 8 0; --------------------------------------------------------. ```; A related issue is that the hydrogen also fails with the same error. For hydrogen (or any one-electron system), MP2 should return the HF energy.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2976:280,Error,Error,280,https://psicode.org,https://github.com/psi4/psi4/issues/2976,3,"['Error', 'error']","['Error', 'error']"
Availability,"The input; ```; molecule {; 0 5; Ar; }. set basis sto-3g; set reference rohf; energy('scf'); ```; gives a segfault in both Psi4 1.3.2 as well as the current master.; ```; Program terminated with signal SIGSEGV, Segmentation fault.; #0 0x00007fce90309923 in psi::scf::HF::find_occupation (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:463; 463	 for (int i = 0; i < nalpha_; ++i) nalphapi_[pairs_a[i].second]++;; (gdb) bt; #0 0x00007fce90309923 in psi::scf::HF::find_occupation (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:463; #1 0x00007fce903340b2 in psi::scf::ROHF::form_initial_C (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/rohf.cc:465; #2 0x00007fce9031193d in psi::scf::HF::guess (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:1157; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1981:224,fault,fault,224,https://psicode.org,https://github.com/psi4/psi4/issues/1981,1,['fault'],['fault']
Availability,"The input; ```; molecule {; H; H 1 0.60; }. set basis cc-pVDZ; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; # STO-3G active space; set active [1, 0, 0, 0, 0, 1, 0, 0 ]; energy('casscf'); ```; fails with the up-to-date master branch with the error message; ```; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 5483, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: DSYEV diagonalizer failed in DETCI SEM!; Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""cc-pVDZ""); core.set_global_option(""DOCC"", [ 1, 0, 0, 0, 0, 0, 0, 0 ]); core.set_global_option(""ACTIVE"", [1, 0, 0, 0, 0, 1, 0, 0 ]); --> energy('casscf'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: DSYEV diagonalizer failed in DETCI SEM! !; ! Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! !; !----------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3096:233,error,error,233,https://psicode.org,https://github.com/psi4/psi4/issues/3096,3,"['Error', 'error']","['Error', 'error']"
Availability,"The job did not have enough memory and failed due to a TOCLEN error. I shot you a gchat about this awhile back, but did not receive a response and consequently forgot about it. > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > What was the bug in cc5?; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawdad@vt.edu; > ; > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5 now; > > runs, passes, and the output.ref is updated.; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205307609",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205318258:62,error,error,62,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205318258,1,['error'],['error']
Availability,"The laboratory server cannot be connected to the network, so I downloaded Psi4conda-1.3.2-py36-Linux-x86_64.sh from the pis4 official website to install it:; ```; [chenh@Pauling programs]$ ./Psi4conda-1.3.2-py36-Linux-x86_64.sh . Welcome to Psi4conda 1.3.2. Psi4conda will now be installed into this location:; /home/chenh/psi4conda. - Press ENTER to confirm the location; - Press CTRL-C to abort the installation; - Or specify a different location below. [/home/chenh/psi4conda] >>> /home/chenh/ly/sourcefolders/psi4conda; PREFIX=/home/chenh/ly/sourcefolders/psi4conda; installing: python-3.6.8-h0371630_0 ...; Python 3.6.8 :: Anaconda, Inc.; installing: blas-1.0-mkl ...; installing: ca-certificates-2019.1.23-0 ...; installing: dftd3-3.2.1-h84218bc_2 ...; installing: dkh-1.2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:63,down,downloaded,63,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['down'],['downloaded']
Availability,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:65,error,errors,65,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817,3,['error'],"['error', 'errors']"
Availability,"The latest CMake fix worked, so Linux is in good shape now. Before we can merge this, we'll need to make sure we have conda L2 set up correctly. We don't need the high angular momentum multipoles - I have a different strategy in mind for those. We will need the second derivatives of the one electron ints though. The lack of those hessian ints is what's causing the remaining failures on Windows.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388#issuecomment-1013736955:377,failure,failures,377,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1013736955,1,['failure'],['failures']
Availability,The latest version of psi4 is giving errors when using pcmsolver: https://github.com/PCMSolver/pcmsolver/issues/206,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2903#issuecomment-1774302846:37,error,errors,37,https://psicode.org,https://github.com/psi4/psi4/pull/2903#issuecomment-1774302846,1,['error'],['errors']
Availability,"The log-file still looks like the error occurs before the build is even started, so I don't know if there is anything I can do about this. . It looks like this is an issue with all travis builds w/ clang they are aware of it, I don't know if we can do anything about that travis-ci/travis-ci#6120",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/395#issuecomment-223043529:34,error,error,34,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-223043529,1,['error'],['error']
Availability,"The main things worth looking at:; * psi4/driver/driver.py, psi4/src/core.cc; 	Do we have any recommended changes to the error messages? Any error messages I should add but didn't?; * Are there any files I didn't edit that I should have, just based on the fact that I am renaming an entire module?; * I also removed some options which the code stopped using. (The MO_RELAX and IGNORE_TAU options, both of which were marked to be used as debug tools.) Is there anything I should do for that other than remove mention of them in psi4/src/read_options.cc and anywhere they appeared in the DCT code?. Beyond that, the changes should be search and replace. Particularly zealous reviewers can double-check that the only instances of `dcft` left are those that refer to specific citations or say that `dcft` was the old name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719#issuecomment-532653590:121,error,error,121,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-532653590,2,['error'],['error']
Availability,The manual mentioned `ENABLE_CheMPS2` instead of `ENABLE_PCMSolver`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Fix error in the manual. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/819:199,error,error,199,https://psicode.org,https://github.com/psi4/psi4/pull/819,1,['error'],['error']
Availability,"The mathematical problem here is solving a matrix equation, not finding the lowest eigenpairs. As such, Davidson's algorithm is not relevant to the problem, and Psi uses preconditioned conjugate gradients in the SOSCF solver instead. PCG assumes the matrix (MO hessian) is positive semi-definite and can break down otherwise. How sure are you that the MO hessian is positive semi-definite across your iterations? That may be the cause of the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2183#issuecomment-843034642:310,down,down,310,https://psicode.org,https://github.com/psi4/psi4/issues/2183#issuecomment-843034642,1,['down'],['down']
Availability,"The new CMake system documentation is primarily in the comments within the top level CMakeLists.txt. I have noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /hom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:334,down,download,334,https://psicode.org,https://github.com/psi4/psi4/issues/516,2,"['down', 'error']","['download', 'errors']"
Availability,"The new basis sets are fine. Updates of the old basis sets are causing test failures associated with changing basis set parameters. For example, STO-3G hydrogen basis sets are changing in the ninth decimal place because we only _had_ eight decimal places previously, causing some ""check numbers to the ninth decimal place"" tests to fail. While I trust the numbers from the newer EMSL, we need to make sure full tests passes before merging this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2230#issuecomment-872519016:76,failure,failures,76,https://psicode.org,https://github.com/psi4/psi4/pull/2230#issuecomment-872519016,1,['failure'],['failures']
Availability,"The new error printing in #1862 seems to struggle when the message it's trying to print contains newlines. Consider the following input file. ```; molecule {; symmetry c1; N; N 1.500; }; set {; basis cc-pVD; }; energy('scf'); ```. This will raise a syntax error because I have a malformed Z-matrix. The new box will print out. ```; !----------------------------------------------------------------------------------!; ! !; ! Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]: symmetry c1 N !; ! N 1.500 !; ! !; !----------------------------------------------------------------------------------!; ```. where the original error message is the more readable. ```; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; symmetry c1; N; N 1.500; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867:8,error,error,8,https://psicode.org,https://github.com/psi4/psi4/issues/1867,3,['error'],['error']
Availability,"The newest release of ADF implements something called ""MESA"", which has been developed in http://dx.doi.org/10.14288/1.0372885 (pdf available at https://www.scm.com/wp-content/uploads/Thesis-MiguelGarciaChavez.pdf). It's basically a combination of several individual acceleration methods (in ADF: ADIIS, fDIIS, LISTb, LISTf, LISTi, and SDIIS), and the way it works is simply by forming trials of all the methods, and picking the one for which the extrapolated Fock matrix results in the least change of the density from the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-565805641:132,avail,available,132,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-565805641,2,['avail'],['available']
Availability,The newly built adcc conda packages (with the less strict dependency constraints) are now available in the [adcc/label/dev](https://anaconda.org/adcc/adcc/files) channel. Perhaps would be good to try them here and check they ease compatibility as expected.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598785196:90,avail,available,90,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598785196,1,['avail'],['available']
Availability,"The only other tests that fail are dft-grad-meta and dft-grad2, and those failures occur for the HCN+ doublet. Maybe the state is ill-described by DFT? @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451608591:74,failure,failures,74,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451608591,1,['failure'],['failures']
Availability,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461:30,failure,failure,30,https://psicode.org,https://github.com/psi4/psi4/issues/1461,1,['failure'],['failure']
Availability,"The only thing worth hanging onto might be the bakerjcc93. But if we've; got that database otherwise available, then deletion fine with me. On Fri, Apr 22, 2022 at 11:14 AM Lori A. Burns ***@***.***>; wrote:. > after #2549 <https://github.com/psi4/psi4/pull/2549>, the list from python; > tester.py looks like the below. Most of these are easily healed by; > figuring out if they're intended to be a test or not. Nots should be; > removed to an attic or deleted. Also related is #2234; > <https://github.com/psi4/psi4/issues/2234> . don't rely on the below --; > rerun tester.py as needed.; >; > @psi-rking <https://github.com/psi-rking>, do you prefer attic or; > deletion for the un-run optimizer tests?; > Complaints; >; > - 1. cc5: missing cmake directory registration. vi CMakeLists.txt; > - 2. cookbook/manual-sow-reap: missing cmake directory registration. vi; > cookbook/CMakeLists.txt; > - 3. cookbook/manual-sow-reap: missing CMakeLists. vi; > cookbook/manual-sow-reap/CMakeLists.txt; > - 4. dfmp2-freq1: missing cmake directory registration. vi; > CMakeLists.txt; > - 5. dfmp2-freq2: missing cmake directory registration. vi; > CMakeLists.txt; > - 6. dfomp2p5-1: missing ctest registration. vi; > dfomp2p5-1/CMakeLists.txt; > - 7. dfomp2p5-2: missing ctest registration. vi; > dfomp2p5-2/CMakeLists.txt; > - 8. dfomp2p5-grad1: missing ctest registration. vi; > dfomp2p5-grad1/CMakeLists.txt; > - 9. dfomp2p5-grad2: missing ctest registration. vi; > dfomp2p5-grad2/CMakeLists.txt; > - 10. dft-dldf: missing cmake directory registration. vi CMakeLists.txt; > - 11. dft-dsd: missing cmake directory registration. vi CMakeLists.txt; > - 12. dft-pbe0-2: missing cmake directory registration. vi; > CMakeLists.txt; > - 13. explicit-am-basis: mismatched directory (explicit-am-basis) and; > ctest registration name (explicit_am_basis). vi; > explicit-am-basis/CMakeLists.txt; > - 14. fsapt-diff1: missing cmake directory registration. vi; > CMakeLists.txt; > - 15. fsapt-diff1: missing CMakeLists.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:101,avail,available,101,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['avail'],['available']
Availability,"The overhead from density fitting can actually become detrimental for extended systems, especially for the exchange part.; (Newer DF algorithms improve here, but some also introduce larger errors). Direct conventional integrals or RI-J plus exact exchange work well extended systems. COSX is okay screening wise, too, and also coming to PSI4. Direct conventional integrals in PSI4; ```; scf_type direct; df_scf_guess false; ```. Our direct SCF is not the fastest (improvements also coming here) and `ints_tolerance 1e-12` and `d_convergence 1e-6` are also both conservative and can be tweaked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-911507913:189,error,errors,189,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911507913,1,['error'],['errors']
Availability,The page for [obtaining Psi4](https://psicode.org/psi4manual/master/build_obtaining.html) has a mixture of broken links and outdated information. Reported on [forums](https://github.com/psi4/psi4/issues/2125). Obligatory @hokru ping.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2125:228,ping,ping,228,https://psicode.org,https://github.com/psi4/psi4/issues/2125,1,['ping'],['ping']
Availability,The parallel test suite is a matter of adding `-n2` in 2-3 places. I really should make it an option. CI (that won't tell us how many threads are even available) hasn't been the best place for running a parallel suite.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2941#issuecomment-1531633439:151,avail,available,151,https://psicode.org,https://github.com/psi4/psi4/issues/2941#issuecomment-1531633439,1,['avail'],['available']
Availability,"The parallel work in Psi4 was in an Intel development environment, and with that `MKL` reference in your error, looks like that might have been hard-coded. If you don't have MKL to build against, you could also consider the binary that has high-quality math libs baked in (but does have processor optimizations turned off, which may or may not be relevant depending on the age/homogeneity of your HPC env).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226018652:105,error,error,105,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226018652,1,['error'],['error']
Availability,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:16,error,error,16,https://psicode.org,https://github.com/psi4/psi4/issues/2178,2,"['error', 'failure']","['error', 'failure']"
Availability,"The patch I just pushed allows it to compile. The tests all fail instantly on my laptop, so I still have some more work to do, but that's almost certainly user error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235119557:160,error,error,160,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119557,1,['error'],['error']
Availability,"The picture change transformation error should only be relevant in the nuclear region. If you have point charges in a QM/MM embedding fashion, these should be so far away from the QM regions that picture-change transforming that potential would have a negligible numerical effect. This is the approached used [here](https://pubs.acs.org/doi/10.1021/acs.jctc.7b00162) As far as I know, no one ever tested this assumption. The authors of this paper note:. > A note should be added regarding the use of X2C Hamiltonians. In this case, the one-electron part of the Fock matrix is transformed (see, e.g., ref 7 for details). Strictly, all external fields (including a field from a environment) should also be transformed. Currently, our PE-X2C-DFT implementation involves transformation only of the vacuum terms. Thus, the PE operator is left untransformed, and the untransformed operator is carried over to the linear response formalism described below (following the general implementation in the DIRAC program, all property operators are always transformed).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758#issuecomment-558530297:34,error,error,34,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558530297,1,['error'],['error']
Availability,"The planned functionality works and my code does no longer cause obvious trouble in the various tests. However, especially some of the modifications in`empirical_dispersion.py` seem not elegant. I force `return 0 `in the compute_energy/gradient/hessian parts. Otherwise I get errors like:; `AttributeError: 'NoneType' object has no attribute 'compute_energy`; Here I would need advice if the solution is not acceptable. I will come with questions in slacks soon enough ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-364430092:276,error,errors,276,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-364430092,1,['error'],['errors']
Availability,"The problem appears to be that, when the wave function is labelled ""ROHF"", MRCC it expects the orbitals to be truly spin restricted (which is reasonable behavior, in general). However, for open-shell systems, ROHF-B-CC naturally yields spin-unrestricted orbitals due to the fact that the alpha and beta T1 amplitudes are distinct. (This can be avoided using less conventional open-shell B-CC formulations, but Psi4 uses the ""standard"" approach.) However, given that the UHF- and ROHF-based algorithms yield the same results in Psi4 (apart from differences associated with using frozen core), the interface to MRCC should work correctly if the user chooses `reference uhf`. No changes to either Psi4 or MRCC appear to be necessary to avoid this problem. Kirk Peterson has confirmed that this corrects the interface failure he reported earlier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234:814,failure,failure,814,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234,1,['failure'],['failure']
Availability,"The problem here is related to the screening setup. The integral objects now compute diagonal elements of the integrals for screening purposes. When all four basis sets are the same, it's clear how this should be done. When there are different basis sets in the bra and ket, it's not obvious but it's also not a use case we had ever encountered so I chose to just raise an error. I think the best (and cleanest) approach for what you're trying to do is to make a basis set for the supermolecule, and have nested loops over the appropriate shells for molecules A and B. This is how the same problem is handled in SAPT and friends. If the two basis sets are really needed, we can revisit the way the Schwarz inequality list is constructed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439#issuecomment-1040499590:373,error,error,373,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1040499590,2,['error'],['error']
Availability,"The problem in more details:; ```; =================================================================; ==1078==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000823db8 at pc 0x7f7011cc8d52 bp 0x7ffcb2c573d0 sp 0x7ffcb2c56b88; READ of size 16 at 0x602000823db8 thread T0; #0 0x7f7011cc8d51 in __interceptor_memmove /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:720; #1 0x7f7003a3bf86 in int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_algobase.h:368; #2 0x7f700394d0ed in int* std::__copy_move_a<false, int const*, int*>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_algobase.h:386; #3 0x7f7004dea9e7 in int* std::__copy_move_a2<false, int const*, int*>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_algobase.h:424; #4 0x7f7004de92bf in int* std::copy<int const*, int*>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_algobase.h:456; #5 0x7f7004de75fd in int* std::__uninitialized_copy<true>::__uninit_copy<int const*, int*>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_uninitialized.h:101; #6 0x7f7004de6659 in int* std::uninitialized_copy<int const*, int*>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_uninitialized.h:134; #7 0x7f7004de56f0 in int* std::__uninitialized_copy_a<int const*, int*, int>(int const*, int const*, int*, std::allocator<int>&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gn",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:110,ERROR,ERROR,110,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418,1,['ERROR'],['ERROR']
Availability,"The problem in more details:; ```; =================================================================; ==16127==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61800027ffa0 at pc 0x7fb0ddf8cb89 bp 0x7fffaed096c0 sp 0x7fffaed096b8; READ of size 8 at 0x61800027ffa0 thread T0; #0 0x7fb0ddf8cb88 in psi::IntegralTransform::presort_so_tei() /home/raimis/psi4.git/psi4/src/psi4/libtrans/integraltransform_sort_so_tei.cc:209; #1 0x7fb0ddfad919 in psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>) /home/raimis/psi4.git/psi4/src/psi4/libtrans/integraltransform_tei_1st_half.cc:51; #2 0x7fb0ddfacf2f in psi::IntegralTransform::transform_tei(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>, psi::IntegralTransform::HalfTrans) /home/raimis/psi4.git/psi4/src/psi4/libtrans/integraltransform_tei.cc:55; #3 0x7fb0dc2d319c in psi::detci::CIWavefunction::transform_ci_integrals() /home/raimis/psi4.git/psi4/src/psi4/detci/ints.cc:118; #4 0x7fb0dc28643c in psi::detci::CIWavefunction::compute_energy() /home/raimis/psi4.git/psi4/src/psi4/detci/ciwave.cc:147; #5 0x7fb0dc2a8ddd in psi::detci::detci(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/psi4.git/psi4/src/psi4/detci/detci.cc:68; #6 0x7fb0db459af6 in py_psi_detci(std::shared_ptr<psi::Wavefunction>) /home/raimis/psi4.git/psi4/src/core.cc:348; #7 0x7fb0db511eae in std::shared_ptr<psi::Wavefunction> pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/cast.h:1870; #8 0x7fb0db5031f2 in std::enable_if<!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-452722861:111,ERROR,ERROR,111,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-452722861,1,['ERROR'],['ERROR']
Availability,"The problem in more details:; ```; =================================================================; ==17351==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60700011cc20 at pc 0x7fdb48ef15e4 bp 0x7ffd05c3edf0 sp 0x7ffd05c3ede8; READ of size 4 at 0x60700011cc20 thread T0; #0 0x7fdb48ef15e3 in psi::IntegralTransform::process_spaces() /home/raimis/prj/psi4.git/psi4/src/psi4/libtrans/integraltransform_moinfo.cc:210; #1 0x7fdb48eea827 in psi::IntegralTransform::initialize() /home/raimis/prj/psi4.git/psi4/src/psi4/libtrans/integraltransform.cc:271; #2 0x7fdb48ee65cf in psi::IntegralTransform::IntegralTransform(std::shared_ptr<psi::Wavefunction>, std::vector<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >, psi::IntegralTransform::TransformationType, psi::IntegralTransform::OutputType, psi::IntegralTransform::MOOrdering, psi::IntegralTransform::FrozenOrbitals, bool) /home/raimis/prj/psi4.git/psi4/src/psi4/libtrans/integraltransform.cc:110; #3 0x7fdb46dc8b1a in psi::cctransort::cctransort(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/psi4/src/psi4/cctransort/cctransort.cc:394; #4 0x7fdb463b036b in py_psi_cctransort(std::shared_ptr<psi::Wavefunction>) /home/raimis/prj/psi4.git/psi4/src/core.cc:322; #5 0x7fdb46464236 in void pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<void, void (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(void (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/cast.h:1870; #6 0x7fdb46444e2c in std::enable_if<std::is_void<void>::value, pybind11::detail::void_type>::type pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<void, pybind11::detail::void_type, void (*&)(std::shared_ptr<psi::Wavefunction>)>(void (*&)(std::shared_ptr<psi::Wavefunction>)) && /home/raimis/opt/con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-456410401:111,ERROR,ERROR,111,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-456410401,1,['ERROR'],['ERROR']
Availability,"The problem in more details:; ```; =================================================================; ==18335==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6030001fb1a8 at pc 0x7f7ba9740fc7 bp 0x7ffcccc3b1b0 sp 0x7ffcccc3b1a8; READ of size 8 at 0x6030001fb1a8 thread T0; #0 0x7f7ba9740fc6 in psi::scf::ROHF::Hx(std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix>) /home/raimis/prj/psi4.git/psi4/src/psi4/libscf_solver/rohf.cc:590; #1 0x7f7ba9748334 in psi::scf::ROHF::soscf_update(double, int, int, int) /home/raimis/prj/psi4.git/psi4/src/psi4/libscf_solver/rohf.cc:878; #2 0x7f7ba6a441e9 in pybind11::cpp_function::cpp_function<int, psi::scf::HF, double, int, int, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [36]>(int (psi::scf::HF::*)(double, int, int, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [36])::{lambda(psi::scf::HF*, double, int, int, int)#1}::operator()(psi::scf::HF*, double, int, int, int) const /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:72; #3 0x7f7ba6b2cde0 in int pybind11::detail::argument_loader<psi::scf::HF*, double, int, int, int>::call_impl<int, pybind11::cpp_function::cpp_function<int, psi::scf::HF, double, int, int, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [36]>(int (psi::scf::HF::*)(double, int, int, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [36])::{lambda(psi::scf::HF*, double, int, int, int)#1}&, 0ul, 1ul, 2ul, 3ul, 4ul, pybind11::detail::void_type>(pybind11::cpp_function::cpp_function<int, psi::scf::HF, double, int, int, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [36]>(int (psi::scf::HF::*)(double, int, int, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [36])::{lambda(psi::scf::HF*, double, int, int, int)#1}&, std::integer_sequence<unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul>, py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1489#issuecomment-456415881:111,ERROR,ERROR,111,https://psicode.org,https://github.com/psi4/psi4/pull/1489#issuecomment-456415881,1,['ERROR'],['ERROR']
Availability,"The problem is that the reference (UHF) is set only for the SCF reference wave function and not the CCSD wave function. If you change the input to use. set reference uhf. the code runs fine. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Aug 6, 2013, at 11:34 AM, andysim notifications@github.com wrote:. > Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together, ; > ; > cheers, ; > ; > Andy. ; > ; > On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote: ; > ; > > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:650,fault,faults,650,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,6,"['avail', 'fault']","['avail', 'fault', 'faults']"
Availability,"The problem was indeed boost. I've switched my testboard nightly builds to; use the boost we distribute with PSI, but at some point we'll have to; figure out why the interface to 1.60.0 isn't working properly. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 5:58 PM, Andy Simmonett notifications@github.com; wrote:. > The failures on the Travis tests systems are likely unrelated to the file; > closing error. Can you reproduce those problems on the CCQC cluster,; > @jturney https://github.com/jturney? I haven't been able to reproduce; > the problem on any of our machines; the valgrind trace shows an illegal; > instruction, but that may just be something that Valgrind can't handle.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178874533.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-179352477:350,failure,failures,350,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-179352477,2,"['error', 'failure']","['error', 'failures']"
Availability,"The problems are unrelated to this PR. Rebase and push, and the problems will be fixed. (Psi's ""grab the latest pydantic"" will use an updated pydantic, which won't raise the error.). I'll review this PR later today, since I know the TDSCF code the best, nowadays.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967#issuecomment-1560976633:174,error,error,174,https://psicode.org,https://github.com/psi4/psi4/pull/2967#issuecomment-1560976633,1,['error'],['error']
Availability,"The psi4 code unchanged since May 2019 has suddenly started throwing circular import errors?. Any changes to the dependency list? Particularly, is qcengine present?. Python 3.11 only? I've never tried a 3.11 prerelease.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1203208847:85,error,errors,85,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1203208847,1,['error'],['errors']
Availability,The readily available scf gradient terms can be found here: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L122. Not sure about the best way to expose them.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-796629840:12,avail,available,12,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-796629840,1,['avail'],['available']
Availability,"The reason I stumbled across this error is because I included in the same input file as some computations with other, less totalitarian methods. This particular method doesn't even allow the user to change the basis set, so by this logic, it should crash whenever the user specifies a basis set, too. My experience still has me in favor of run the computation but warn the user.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462918918:34,error,error,34,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462918918,1,['error'],['error']
Availability,The reason for docs build failure is unrelated to this PR. I've asked Lori to take a look.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982#issuecomment-1714499781:26,failure,failure,26,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714499781,1,['failure'],['failure']
Availability,"The reason its bouncing is we are not entirely sure the range-seperatated gradients are correct. This admittedly could use a better error message. On `psi4.gradient('scf/3-21g', df_functional='wb97x', dertype=1)` I think this shows a need to scan for valid `kwargs`. This could be difficult to do however.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-346668004:132,error,error,132,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346668004,1,['error'],['error']
Availability,"The reason this doesn't work in the beta branch is that scf_type direct does a few steps density-fitted, then switches over to the exact algorithm. The necessary auxiliary basis set (cc-pvdz-jkfit http://sirius.chem.vt.edu/psi4manual/master/basissets_byfamily.html) is not available for the atoms the original poster listed. In the development branch, there's a check that automatically turns off the density-fitting steps if the aux basis is not available. We'll be releasing the development branch fairly soon, so this shouldn't come up again. In the meantime, if you add `set df_scf_guess false` for atoms that are missing the aux set, it won't try the density-fitting steps and your inputs should work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7#issuecomment-19470973:273,avail,available,273,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470973,2,['avail'],['available']
Availability,"The relevant computer is switched on again, so installers downloadable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3199#issuecomment-2315403898:58,down,downloadable,58,https://psicode.org,https://github.com/psi4/psi4/issues/3199#issuecomment-2315403898,1,['down'],['downloadable']
Availability,"The result of test has changed:; ```; $ ctest --output-on-failure -R cookbook-rohf-orb-rot; Test project /home/raimis/psi4.git/linux_build; Start 401: cookbook-rohf-orb-rot; 1/1 Test #401: cookbook-rohf-orb-rot ............***Failed 22.19 sec; 	X SCF energy......................................................PASSED; 	X CCSD energy.....................................................PASSED; 	A SCF energy......................................................PASSED; 	A CCSD energy.....................................................PASSED; 	X SCF energy......................................................PASSED; 	X CCSD energy.....................................................PASSED; 	A SCF energy: computed value (-150.1081361) does not match (-150.0872987) to 6 digits.; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 84, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/p4util/util.py"", line 230, in compare_values; raise TestComparisonError(message). TestComparisonError: 	A SCF energy: computed value (-150.1081361) does not match (-150.0872987) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; cart = 22.19 sec*proc (1 test); cookbook = 22.19 sec*proc (1 test); psi = 22.19 sec*proc (1 test). Total Test time (real) = 22.35 sec. The following tests FAILED:; 	401 - cookbook-rohf-orb-rot (Failed); Errors while running CTest; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-457158095:58,failure,failure,58,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-457158095,2,"['Error', 'failure']","['Errors', 'failure']"
Availability,"The serial run is correct. I think your automatic nesting scheme is breaking down as some of the above can turn off/on before other pieces as each block is not a static amount of work. I wonder if we can create a region where we freeze nesting like `timer_nesting_freeze(true)`. We would loose the LSDA/GGA nesting, but I think thats ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-312735086:77,down,down,77,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-312735086,1,['down'],['down']
Availability,"The sowreap one is a failure of both the capability and the testing mechanics. It's been removed temporarily through wfn_pass PR. Sapt4 changes are due to actually turning on by default the nat orb tricks we always recommended. That test case has been modified to pass also in wfn_pass PR. The opt one sounds like an actual problem. . Sent from my iPhone. > On Feb 15, 2016, at 8:06 AM, Justin Turney notifications@github.com wrote:; > ; > Thank you for the detailed report. You're probably right about the firewall causing the pubchem\* tests to fail. I'll see what I can figure out about the others.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184200636:21,failure,failure,21,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184200636,1,['failure'],['failure']
Availability,"The stack traces shown indicate the issue is `clear_collection_cache` not `build`. Seems like this error is all over the place. Do you have SCF iterations before the crash?. I have a guess as to the error, I will make a PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366#issuecomment-443199779:99,error,error,99,https://psicode.org,https://github.com/psi4/psi4/issues/1366#issuecomment-443199779,2,['error'],['error']
Availability,"The symmetry detection does not try to symmetrize the geometry to my knowledge.; But there is a `symmetrize` function than can be explicitly called like this:. ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ; psi4.get_active_molecule().symmetrize(1e-2); # or <molecule_name>.symmetrize(1e-2) if a name was set; energy('scf'); ```. edit: Otherwise finding the point group with a lower tolerance can be done like this, I think. (Doesn't work in this case). ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ. mol = psi4.get_active_molecule(); tol = 1e-2; PG = mol.find_point_group(tol); print(PG.full_name()); mol.set_point_group(PG); energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003:396,toler,tolerance,396,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003,1,['toler'],['tolerance']
Availability,"The test `pywrap-opt-sowreap` is failing for me with the following error message:. ```; Performing finite difference calculations; 5 displacements needed ...; An error has occurred Py-side; Traceback:; <type 'exceptions.TypeError'>: 'float' object is not iterable: File ""<string>"", line 25, in <module>. File ""/home/avcopan/Documents/code/github/psi4/share/python/driver.py"", line 1158, in optimize; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs). ```. I did some poking around and it looks like the problem is that this code (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L1153)):. ```; def optimize(name, **kwargs):; # ...; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs); psi4.set_gradient(G); thisenergy = psi4.get_variable('CURRENT ENERGY'); ```. breaks when gradient is called in sow-reap mode because it returns `0.0` rather than a matrix-wavefunction tuple (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L843)):. ```; def gradient(name, **kwargs):; # ...; if dertype == 1:; # ...; else:; # ...; if (opt_mode.lower() == 'sow'):; optstash.restore(); return 0.0; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/291:67,error,error,67,https://psicode.org,https://github.com/psi4/psi4/issues/291,2,['error'],['error']
Availability,"The test failure is because of a 0.1 cm^-1 change in hessian frequencies due to the keyword change. I either need to adjust the screening value in the test, adjust the reference, or adjust the default screening value. Opinions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2834#issuecomment-1349562483:9,failure,failure,9,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1349562483,1,['failure'],['failure']
Availability,"The test failure looks completely random. I expect this will pass tests if it goes through again. I can't re-force tests, so the best solution I have is to amend the commit message and force push the PR. That'll force another run of tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856:9,failure,failure,9,https://psicode.org,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856,1,['failure'],['failure']
Availability,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2396:644,error,error,644,https://psicode.org,https://github.com/psi4/psi4/issues/2396,1,['error'],['error']
Availability,"The third Travis test is timing out too much. This can be traced to the painfully slow download time for the GCC compiler. We have plans to replace this test with some plugin validation, using native GCC compilers to avoid the timeouts. For now, we'll just nuke it to allow the backlog of PRs through. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1552:87,down,download,87,https://psicode.org,https://github.com/psi4/psi4/pull/1552,1,['down'],['download']
Availability,"The underlying [cmake cmd](https://cmake.org/cmake/help/latest/module/CheckCXXCompilerFlag.html) is checking for a compiler error code, not compilation failure. I'm confused as to why this is appearing now, as the `-x<lang>` has been in GCC for many years (at least since 4.8.5).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-717077836:124,error,error,124,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-717077836,2,"['error', 'failure']","['error', 'failure']"
Availability,"The up-to-date master branch fails to configure in Fedora; ```; $ cmake ..; CMake Error at CMakeLists.txt:5 (cmake_policy):; Policy ""CMP0144"" is not known to this version of CMake.; $ rpm -q cmake; cmake-3.27.7-1.fc39.x86_64; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3092:82,Error,Error,82,https://psicode.org,https://github.com/psi4/psi4/issues/3092,1,['Error'],['Error']
Availability,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1965:16,error,error,16,https://psicode.org,https://github.com/psi4/psi4/issues/1965,6,['error'],"['error', 'errors']"
Availability,"The value of the 'mem' option was conflated with that for the 'dboc' option, leading to a list directed I/O error at runtime when setting memory available to a 6 digit (or more) number. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix printout of `fort.56` file in `mrcc.cc`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1606:108,error,error,108,https://psicode.org,https://github.com/psi4/psi4/pull/1606,2,"['avail', 'error']","['available', 'error']"
Availability,"The warning is fine -- http://forum.psicode.org/t/numpy-ufunc-size-change-warning/1305?u=loriab . The dftd3 error is curious. May be related to https://github.com/MolSSI/QCEngine/issues/45 . Can probe later (most everyone Psi4 is away at a conference next week). Unless DFT-D3 was your target, you're installed, passing, and ready to run.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478034387:108,error,error,108,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478034387,1,['error'],['error']
Availability,"The way I understand SAD as described in DOI 10.1002/jcc.20393 is that one uses the SAD density matrix as input to a spin-restricted Fock build, and then uses those orbitals for whatever method. There's no reason SAD shouldn't work for ROHF or UHF, because orbitals are available. Another way to get orbitals for ROHF is to diagonalize the SAD matrix, but this is not as good as an approach because the density changes in the purification.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-223718861:270,avail,available,270,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223718861,1,['avail'],['available']
Availability,"Then may I also suggest turning off the cache entirely? It was a good idea in theory, but it leads to memory fragmentation and eventually calculations crash due to allocation errors. It's possible that this problem is manifested in the crash you're observing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246009485:175,error,errors,175,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246009485,1,['error'],['errors']
Availability,There are not many places internal to Psi4 that need to really know the ordering of our orbitals. So perhaps us changing to match default libint2 wouldn't be too big a hurdle. Do any of our up or downstream packages need to know the ordering?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926951158:196,down,downstream,196,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926951158,1,['down'],['downstream']
Availability,"There are some issues with the `liboptions` documentation. First, the source should mention that there's a whole page about the module in the docs. Most modules don't have their own page, so I completely missed it. Now for my more detailed grievances with the `liboptions` page:. I'm sure there are more grievances, but obvious ones:; - The overview uses the passive voice. ""The input is parsed for these options, and defaults are assigned for those keywords not specified by the user."" This would be much clearer written as ""When Psi parses the inputs, Psi assigns each option its user-specified value (if provided) and its default otherwise.""; - ""Array-type options are not available in python."" This is false.; - There's no mention of side effects of the getter functions. This was a major ""gotcha"" for me: getting an SCF option set that to be the active module and interfered with other modules.; - There's no mention of the currently active module mechanism. At all.; - Discussion about _when_ and _which_ options are added is vague. It sounds like the options object only has some options at a time, but it's not clear when these are added/removed.; - `read_globals` appears in a code snippet, but is not described.; - ""The way to do this is to isolate and nullify any changes to options made by the code, the difference between [a] and [c]. "" is unclear.; - ""C-side, there is no concern since options are essentially read-only within the modules."" This is false. DCT for sure changes options in the module.; - ""Py-side is another matter since the driver’s role is to take terse instructions from the user and translate those into instructions to the C++ modules, usually through manipulation of options."" This is vague. The previous two sentences being baffling doesn't help.; - ""In order to preserve effective definition [a]"" What does it mean to preserve a definition? ; - The paragraph containing that sentence needs to explain OptionState. Instead, that's done much later.; - The ""Reading O",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2405:676,avail,available,676,https://psicode.org,https://github.com/psi4/psi4/issues/2405,1,['avail'],['available']
Availability,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:403,down,downstream,403,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202,1,['down'],['downstream']
Availability,"There have been reports of troubled SCF optimizations from within @fevangelista's group. As an attempt to put these to rest, I'll be implementing [EDIIS](https://aip.scitation.org/doi/pdf/10.1063/1.1470195) and making DIIS + EDIIS the default. DIIS + EDIIS is a standard SCF convergence technique, used to great effect by a certain code I'm not going to name. Welcome to 2021, Psi4. Due to potential merge conflicts with #2225, that PR should come in first. Because [this week is the target for 1.4](https://github.com/psi4/psi4/pull/2154#issuecomment-870728272), this is slated for 1.5. Pinging @jturney and @susilehtola as other interested parties.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235:588,Ping,Pinging,588,https://psicode.org,https://github.com/psi4/psi4/issues/2235,1,['Ping'],['Pinging']
Availability,"There is a rohf-bccd test at https://github.com/psi4/psi4/blob/master/tests/cc16/input.dat#L28 . If it's any help, bccd and bccd(t) all-electron in psi4 match that in cfour. (Though I did have to turn on orbitals=1 for cfour bccd(t) for rhf/uhf to allow it to match psi4. After moderate effort, I couldn't get cfour bccd to run with frozen-core, but I wouldn't rule out user error.). > Would taking a look at https://psicode.org/psi4manual/master/cc.html be also in-scope for this PR? I think that page never mentions that gradients are restricted to all-electron. I agree documenting capability exceptions is weak across modules at the moment. I was hoping to fix that with the table above, which is autogenerated from calcs, not hand-assembled. Do you think more is needed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708#issuecomment-1243111522:375,error,error,375,https://psicode.org,https://github.com/psi4/psi4/pull/2708#issuecomment-1243111522,1,['error'],['error']
Availability,"There is no FCHK standard - the orbitals should be whatever the method gives. Even in TCTSNBN you can modify the orbitals in the checkpoint file e.g. with `Pop=SaveNBOs`, `Pop=SaveNLMOs` or `Pop=SaveMixed`...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-670518326:129,checkpoint,checkpoint,129,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670518326,1,['checkpoint'],['checkpoint']
Availability,There might still be more failures. I was seeing an infinite loop somewhere with a `__getattribute__` recursively calling itself in `libmintsmolecule.py` I think.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130115325:26,failure,failures,26,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130115325,1,['failure'],['failures']
Availability,"There's a comment line in the cube file that we use for units and property. It wouldn't be standard among all cube-reading software, but we can put the No. core electrons there, so downstream has a chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412899608:181,down,downstream,181,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412899608,1,['down'],['downstream']
Availability,"There's a large psi4 work day gathering tomorrow. So probably no comments on this PR until things settle down. But yes, PR is the best way for code review. And thanks for the lithium oddity report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-211552490:105,down,down,105,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-211552490,1,['down'],['down']
Availability,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:403,failure,failures,403,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015,3,"['avail', 'failure']","['available', 'failures']"
Availability,There's also an obvious error if `#` appears within a string literal. But that's for another day.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/87#issuecomment-98021606:24,error,error,24,https://psicode.org,https://github.com/psi4/psi4/pull/87#issuecomment-98021606,1,['error'],['error']
Availability,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:69,error,error,69,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491,6,"['Error', 'down', 'error']","['Error', 'downstream', 'error', 'errors']"
Availability,There's built psi4 packages available for testing. Details at https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-1529304309:28,avail,available,28,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1529304309,1,['avail'],['available']
Availability,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304462078:1250,Error,Error,1250,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078,1,['Error'],['Error']
Availability,"There's temporary build docs linked off README: ""Downloading and Installing"" on the main GH page. It's not the specification of Python that's the problem– CMake detection and build are going just fine in these cases. CMake knows the exact, absolute path location to everything Psi4 or its build needs. The problem is conveying that info to the runtime environment. This is done by baking in all those absolute paths into the executable/library rpath. _But_, when a path (e.g., `/usr/lib`) has both a useful thing like `libpython.so` and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of knowing that it needs to place /usr/lib into rpath _behind_ the path to new gcc or new hdf5. Thus, we end up with runtime path problems, solvable only by `LD_LIBRARY_PATH` or rpath adjustment and relinking. This problem is controllable with conda, because it isolates just what Psi4 needs into its own namespaced path and stuffs that into rpath. For the general developers CMake build, there's no robust solution that I can see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252931820:49,Down,Downloading,49,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252931820,2,"['Down', 'robust']","['Downloading', 'robust']"
Availability,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20545979:222,fault,faults,222,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979,1,['fault'],['faults']
Availability,"This PR addresses #2379 . All fsapt tests pass after refactoring (except fsapt-d) Any insights? This is the error message (Running test fsapt-d). ```; !----------------------------------------------------------------------------------!; ! !; ! Unsuccessful run. Check input, particularly geometry in [a0]. Model: !; ! Model(method='hf-d3', basis='(auto)') !; ! !; !----------------------------------------------------------------------------------!; ```. Additional information:; I compiled my code with gcc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877:108,error,error,108,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877,1,['error'],['error']
Availability,"This PR failed the auto-test suite. Looking at the logs, this appears to be a random error rather than an indicator of a fault in the PR itself. In event of a random error, there's nothing to do but re-run the tests. I recommend you rebase onto master and then force push the PR. Rebasing is always healthy, and that will force the tests to re-run.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-944359549:85,error,error,85,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-944359549,3,"['error', 'fault']","['error', 'fault']"
Availability,"This PR is good prep, but let's hold off on merge.; * In practice, qcf `master` is working as expected and `next` has quirks, so let's keep `master` option open.; * qcf `next` packages not yet available.; * anyone who wants to experiment with `next` need only copy the `task_base.py` file from this PR. (Other PR changes are docs/cosmetic.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645#issuecomment-1201423497:193,avail,available,193,https://psicode.org,https://github.com/psi4/psi4/pull/2645#issuecomment-1201423497,1,['avail'],['available']
Availability,"This adds a script to the test pywrap-freq-e-sowreap (re #168) which is executed by runtest.py. It runs the intermediate files created by the first psi4 invocation and the final file after appending the tests to it. The output is recorded in testresults.log; it will register the test as a failure if any of the intermediate psi4 invocations return an error code, or if any of the reference value-checks fail. For a new test to make use of the script the label `sowreap` should be added to `add_regression_test` macro in the CMakeLists.txt file and the script should be copied into that test's directory.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/192:290,failure,failure,290,https://psicode.org,https://github.com/psi4/psi4/pull/192,2,"['error', 'failure']","['error', 'failure']"
Availability,"This bug is surprisingly straightforward, but figuring out the correct fix requires a lot of deep Psi knowledge. The `psio_` object of `occ` is set by a call to [the shallow_copy function](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/occwave.cc#L50). This works fine when the reference wavefunction has a PSIO object. No part of the [`from_file` function](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L145-L221) gives the reference wavefunction a PSIO object. Unsurprisingly, you get a memory error when you try to use an uninitialized object. The other modules Holger tested don't have a problem because they don't use the reference wavefunction's PSIO. `fnocc` and `dfmp2`, for instance, make their own. Can anybody explain why we require the Wavefunction base class to have a PSIO object? It seems like something that a subclass can create if convenient, but we shouldn't assume will always be set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851#issuecomment-600719939:540,error,error,540,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-600719939,1,['error'],['error']
Availability,"This came to mind for failing SAPT tests: https://github.com/psi4/psi4/pull/1398/commits/05a8eacd9d3a1b34e008f4078787dc6f4cb2c64f . Main action is in the SAPT iterator destructor. Fixed a double free. Sorry for the formatting mixed in. But it doesn't look immediately relevant. Looks like someone intended to relax that error, https://github.com/psi4/psi4archive/blame/master/psi4/src/psi4/lib3index/denominator.cc#L197-L200. My notes for other back-port candidates if 1.2.2 materializes: #1364, #1303, #1387",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451690246:320,error,error,320,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451690246,1,['error'],['error']
Availability,This continues to look better and better IMO. Please do poke me if you need help on specific parts. For HF3C do you know the error here? Is it just a an issue with the correction dispersion.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370239589:125,error,error,125,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370239589,1,['error'],['error']
Availability,"This could be tidied up and merged for v1.9, but that would constrict pydantic to only v2. From https://github.com/MolSSI/QCElemental/issues/323, releases of qcfractal are only imminently even v2-tolerant. So I think it'd be safer to postpone and update the whole qca stack together. So not targeting v1.9. Any thoughts? @mattwthompson",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602:196,toler,tolerant,196,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602,1,['toler'],['tolerant']
Availability,"This could potentially be user error. However, hopefully through my minimal example you can replicate the behaviour I've been getting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119#issuecomment-1898203578:31,error,error,31,https://psicode.org,https://github.com/psi4/psi4/issues/3119#issuecomment-1898203578,1,['error'],['error']
Availability,"This doesn't fix #2012, since in that case it seems that the number of frozen core orbitals in the dimer is sum of the number of frozen core orbitals in each monomer (at least for `freeze_core -1`, an error is thrown with `freeze_core -2`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2271#issuecomment-896321286:201,error,error,201,https://psicode.org,https://github.com/psi4/psi4/pull/2271#issuecomment-896321286,1,['error'],['error']
Availability,"This erratic behavior is caused by several problems in the optimizer (one of which being the maximum step size getting needlessly scaled down). However, I believe I've solved all the problems and can now generate a nice, smooth torsional potential curve in C2 symmetry. I'll push the fix soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202110158:137,down,down,137,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202110158,1,['down'],['down']
Availability,This error may be of concern to @fevangelista.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-460654747:5,error,error,5,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460654747,1,['error'],['error']
Availability,"This example came up on the forum the other day: http://forum.psicode.org/t/spectrum-function-tddft-giving-error/2327. Just want to mention a few things in case someone sees this first. As mentioned in the comments of that thread, the keys for the dictionary in <code>res</code> appear to have changed:. * LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT → ELECTRIC DIPOLE TRANSITION MOMENT (LEN); * LENGTH-GAUGE ROTATORY STRENGTH → ROTATORY STRENGTH (LEN). those keys work for me with Psi4 1.4 (Git: Rev {HEAD} 9485035). The example also states that the function returns a pair of NumPy arrays. The <code>spectrum</code> function now returns a dictionary with the keys ""convolution"" and ""sticks"" for the different peak types. The values of these are dictionaries with keys ""x"" and ""y"" for ""convolution"", and ""poles"" and ""residues"" for ""sticks"". . The example shows squaring the norm of each dipole transition moment. However, the <code>spectrum</code> function appears to <a href=""https://github.com/psi4/psi4/blob/e06763b09cf3ffe047b18eed04d738711d5ef587/psi4/driver/p4util/spectrum.py#L375"">square the residues for <code>kind == ""opa""</code></a>. I don't think both squarings are necessary, but I'm not sure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2108#issuecomment-947293809:107,error,error,107,https://psicode.org,https://github.com/psi4/psi4/issues/2108#issuecomment-947293809,1,['error'],['error']
Availability,"This has compatible pcmsolver and snsmp2 versions now, so I'll merge it after CI unless there are concerns. There's still a problem sometimes running pcm by API and in parallel, `npz_save: header read error`, but this PR is still a step in the right direction, as one couldn't run sequential pcm by API before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037#issuecomment-748568654:201,error,error,201,https://psicode.org,https://github.com/psi4/psi4/pull/2037#issuecomment-748568654,1,['error'],['error']
Availability,"This is a Davidson error. Looks like as soon as the norm of the correction vector gets small enough an instability occurs causing a non-variational energy. Very hard to debug and/or fix. Dividing small numbers by small numbers is always tricky. If you are just after the energy (the only things the current CI code can do at the moment) the simplest option is to reduce your CI convergence threshold to something reasonable like `r_convergence 1.e-4` . You can also try setting `hd_avg hd_exact` in your settings. . Also, something like this really belongs on the [Psi forums](http://forum.psicode.org/latest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/448#issuecomment-235024888:19,error,error,19,https://psicode.org,https://github.com/psi4/psi4/issues/448#issuecomment-235024888,2,['error'],['error']
Availability,"This is a different error @ataube59. This is not a coded exception (planned fail) but a segmentation fault because of a bug. Those cannot be caught. The `optking` module responsible will be replaced with a python-based version ""soon"" (https://github.com/psi-rking/optking, already usable if you install it manually) where I think dimer optimisation should work better. Obligatory ping to @AlexHeide @psi-rking for a test case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-764476988:20,error,error,20,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-764476988,6,"['error', 'fault', 'ping']","['error', 'fault', 'ping']"
Availability,"This is a great upgrade in current and future use and robustness! My only suggestion is to moderate the requirement of an initial gradient before a frequency computation. I grant that the additional cost of a gradient is likely to be moderate-to-negligible (though if one were computing, e.g., only one irrep of displacements it could be significant). However, the workflow of ""opt + freq"" is so very common, that it's worth it to at least provide an easy way to avoid this extra computation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834#issuecomment-380206803:54,robust,robustness,54,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-380206803,1,['robust'],['robustness']
Availability,This is a known issue with the Intel compiler and gcc 5+ header files. Even the latest Intel version 16.0.1 is affected. NERSC advises loading in gcc 4.9.x series. References:; [Intel Forum](https://software.intel.com/en-us/forums/intel-c-compiler/topic/565143); [Intel Fourm](https://software.intel.com/en-us/forums/intel-c-compiler/topic/591174); [NERSC](https://www.nersc.gov/users/software/compilers/intel-fortran-c-and-c/intel-bug-reports/intel-c-compiler-error-stl-iterator-base-types-h/),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262#issuecomment-185230186:461,error,error-stl-iterator-base-types-h,461,https://psicode.org,https://github.com/psi4/psi4/issues/262#issuecomment-185230186,1,['error'],['error-stl-iterator-base-types-h']
Availability,"This is a pretty odd error. Examining the Hamiltonian built by RSP is fine; however, if you diagonalize it with Mac Accelerate I get your `RSP` result while using MKL DSYEV I get the `SEM` result. The eigenvalues are fine, just looks like something is going wrong with the eigenvectors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/558#issuecomment-271454361:21,error,error,21,https://psicode.org,https://github.com/psi4/psi4/issues/558#issuecomment-271454361,1,['error'],['error']
Availability,"This is a quick script exported from Jupyter to animate vibrational modes from Psi4. It uses py3Dmol and takes in dressed xyz files. The script shows how to turn psi4's exported results into the dressed xyz files. I should write something so the format is available directly. Or this’d be a nice opportunity for a jupyter widget, which @armcdona might try. And @fevangelista has a widget for vib vector arrows that could probably be animated. ```; #!/usr/bin/env python; # coding: utf-8; ​; # In[ ]:; ​; ​; # note the capital ""D"". obtain by `conda install py3dmol -c conda-forge`; import py3Dmol; print(py3Dmol.__version__); ​; ​; # In[ ]:; ​; ​; # run an optfreq calc and write the vibrational analysis to disk in a "".vibrec"" file; ​; # molecule h2odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; v",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:256,avail,available,256,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,1,['avail'],['available']
Availability,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333:361,avail,available,361,https://psicode.org,https://github.com/psi4/psi4/issues/2333,1,['avail'],['available']
Availability,"This is actually a PyBind11 version error. It doesn't appear that our CMake is detecting the discrepancy. Please blow away your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074419:36,error,error,36,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419,4,['error'],['error']
Availability,"This is also happens on Linux!. `master` (b51ecbca2dfef69d69d2fc4e7ebee54ed6859431) compiled with the address sanitizer (`-DENABLE_ASAN`) finds an overflow on the same line, while running `casscf-fzc-sp` and the others:; ```; $ LD_PRELOAD=/shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/sysroot/lib/libasan.so.4.0.0 ctest -R ""^casscf-fzc-sp$"" --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 3: casscf-fzc-sp; 1/1 Test #3: casscf-fzc-sp ....................***Failed 27.28 sec; =================================================================; ==10081==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6030003bc668 at pc 0x7f28e2c1b07c bp 0x7ffdf8287a00 sp 0x7ffdf82879f8; READ of size 4 at 0x6030003bc668 thread T0; #0 0x7f28e2c1b07b in psi::IntegralTransform::process_spaces() /home/raimis/psi4_2.git/psi4/src/psi4/libtrans/integraltransform_moinfo.cc:278; #1 0x7f28e2bc18ba in psi::IntegralTransform::initialize() /home/raimis/psi4_2.git/psi4/src/psi4/libtrans/integraltransform.cc:272; #2 0x7f28e2bdfa02 in psi::IntegralTransform::IntegralTransform(std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix>, std::vector<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >, psi::IntegralTransform::TransformationType, psi::IntegralTransform::OutputType, psi::IntegralTransform::MOOrdering, psi::IntegralTransform::FrozenOrbitals, bool) /home/raimis/psi4_2.git/psi4/src/psi4/libtrans/integraltransform.cc:195; #3 0x7f28dbecd5ad in psi::detci::CIWavefunction::setup_mcscf_ints() /home/raimis/psi4_2.git/psi4/src/psi4/detci/ints.cc:360; #4 0x7f28dbdc38d5 in psi::detci::CIWavefunction::init_mcscf_object() /home/raimis/psi4_2.git/psi4/src/psi4/detci/ciwave.cc:626; #5 0x7f28dbdceeff in psi::detci::CIWavefunction::mcscf_object() /home/raimis/psi4_2.git/psi4/src/psi4/detci/ciwave.cc:655; #6 0x7f28d97a0389 in pybind11::cpp_functio",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:374,failure,failure,374,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,2,"['ERROR', 'failure']","['ERROR', 'failure']"
Availability,"This is damping, not level shifting. This keyword should be renamed. To give you some perspective on how severe these convergence problems are, for the test case I gave, which is in the Psi test suite:; No damping: 16 iterations; 0.01 damping: 38 iterations; 0.02 damping (default): 53 iterations. So we've made convergence **three times harder** to achieve in this example. Have you seen many cases where this damping is necessary or helpful to converge? Otherwise, I agree with Lori about turning this off by default. For future reference:; Eq. 5 of the paper has a sign error: the - needs to be a + in order for minimizing to favor a solution where c_i^2 B_ii small, which should prevent individual c coefficients blowing up. The (1+d) rule in the paper is correct, as is the Psi implementation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1777#issuecomment-571668983:573,error,error,573,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-571668983,1,['error'],['error']
Availability,This is error after updating to PSi4 278:; error while loading shared libraries: libifport.so.5: cannot open shared object file: No such file or directory. But I think it can be overcome by adding intel lib into PATH. Thank you Loriab.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126179884:8,error,error,8,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126179884,2,['error'],['error']
Availability,"This is great; I really like that you've addressed the inconsistency between CI and CC, which I didn't notice before. The scheme in your last message looks good to me. I think that numbering the first excited state `1`, and the second `2`, _etc._ makes the most sense, for obvious reasons. Zero basing the excited states would lead to an off-by-one error in the cardinal and ordinal notation. LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260098726:349,error,error,349,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260098726,1,['error'],['error']
Availability,"This is not a psi4 issue, but users are affected by it. Something is off with the new single dynamic library from intel and gcc + mkl2017 building. Essentially, sometimes you can get over subscription (nested OpenMP+MKL threading), and sometimes threading does not work at all. Through trial and error I found the following env variables set the expected behavior:. ```; export MKL_THREADING_LAYER=GNU; export MKL_INTERFACE_LAYER=GNU; export OMP_NESTED=""FALSE"" <-- supposed to be libgomp default, but is not?; ```. Maybe not all 3 are needed, or there is some other flag. I was just happy to get the proper behavior. I tested gcc 4.9.4/6.3 and MKL2017 and MKL2017.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/671:296,error,error,296,https://psicode.org,https://github.com/psi4/psi4/issues/671,1,['error'],['error']
Availability,"This is ready for review. For our DLDF test case the overall timing went down from 52 to 28 seconds. We are still spending ~11 seconds transposing our grids, eliminating this could push the time down to ~17 seconds. Hybrid DFT K cost will swamp these changes at larger sizes, but for small computations or GGA you should see quite a bit of benefit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/869#issuecomment-350035658:73,down,down,73,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-350035658,2,['down'],['down']
Availability,"This is ready for review. I doubt I will get VV10 gradients in this PR as it will need a deep overhaul to the MolecularGrid class. Currently, if we can fit all of JK in memory everything else is given over to collocation blocks. Otherwise up to 10% of available memory is given to collocation block caching. Caching is likely more advantageous than more JK memory, but this is a hard line to find. I also removed the 80% overhead filter in DFHelper as I do not think it needs to be there after poking through the code and converted JK MB -> MiB to be a bit more canonical.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-419740905:252,avail,available,252,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-419740905,1,['avail'],['available']
Availability,"This is ready for review. With my latest changes:; - The user specifies a number of roots to seek to converge. If the system has symmetry, we spread them around among the irreps. For example, 10 roots in C2v means `[3, 3, 2, 2]` in whatever order the irreps are for the given system. To have more granular control over what symmetries to seek roots in, the user can pass a list: `[10, 0, 0, 0]` will seek the 10 roots in the totally symmetric irrep.; - Option for triplets is now passed down to the solver correctly. `""none""` is the default (singlet roots only); `""also""` will compute as many singlet roots as triplet roots, so this makes the calculation cost twice as much (at least). Notable limitations:; - restricted triplets: RPA or TDA, Hartree-Fock only. Notes in code state that the XC kernel is only spin-adapted for singlets.; - unresctricted: RPA or TDA, Hartre-Fock and LDA only. Notes in code state that there is a bug for UKS beyond LDA, but aren't more specific than that. I am waiting on #1885 to be in to write docs. An example of PsiAPI usage:; ```python; import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:487,down,down,487,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,2,['down'],['down']
Availability,"This is really not a very large calculation – even the <ab|cd> integrals only need 1.26GB of storage – so the apparent memory errors don't make sense. I can try to reproduce the error on my systems, but I wonder if the behavior would change if you asked for less memory – say 4GB?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1245993701:126,error,errors,126,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1245993701,2,['error'],"['error', 'errors']"
Availability,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/562:89,checkpoint,checkpoint,89,https://psicode.org,https://github.com/psi4/psi4/issues/562,1,['checkpoint'],['checkpoint']
Availability,"This is the first DFJKGrad after the first SCF. I just updated my branch to master, and still see the same error arising from line 461 in `jk_grad.cc`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010#issuecomment-697269086:107,error,error,107,https://psicode.org,https://github.com/psi4/psi4/issues/2010#issuecomment-697269086,1,['error'],['error']
Availability,"This is the list of issues tied into wavefunction_pass that should be cleared up before the 1.0 release.; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet (SCF methods can only take a molecule at the moment. `ref_wfn` supersedes `molecule` in all other methods.).; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] Will just pass through the reference wavefunction with a warning; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used (Thats fine, see above).; - [ ] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code. (Moved to another ticket); - [ ] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow. (Moved to another ticket); - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes (see #249).; - [x] DF and RI calls should soft fail with a proper error message.; - [x] Cubeprop, Molden, OEProp etc functions should fail better when not passed a wavefunction.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259:935,toler,tolerant,935,https://psicode.org,https://github.com/psi4/psi4/issues/259,2,"['error', 'toler']","['error', 'tolerant']"
Availability,This is the output of conda list with p4dev activated.; [listresult_p4dev.txt](https://github.com/psi4/psi4/files/2576467/listresult_p4dev.txt). The same errors occur when running the psi4-path-advisor without --gcc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-438271263:154,error,errors,154,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-438271263,1,['error'],['errors']
Availability,"This is what I do for my Catalina build with gcc9/mkl against conda python+libraries. . a) get `psi4-dev psi4-rt psi4 -c psi4/label/dev` from conda (conda psi4 binaries plus dependencies to build from source); (`conda remove -f v2rdm_casscf` because it gives symbol errors); b) `export PATH=/Users/kruse/homebrew/bin:$PATH` for my homebrew gcc-9; c) run the below script (This is what `psi4-path-advisor` gave me plus making sure the correct compilers are used, plus a custom installation dir. Since recently I also have to turn of 2 default plugins because of symbol problems `-DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF`, might not be necessary for everyone). ```; #!/bin/bash; export MKLROOT=/Users/kruse/qc/miniconda3; rm -rif objdir; /Users/kruse/qc/miniconda3/bin/cmake -H. -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsCache.cmake -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsMKLCache.cmake -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_Fortran_COMPILER=gfortran-9 -Bobjdir -DCMAKE_INSTALL_PREFIX=/Users/kruse/qc/psi4.bin -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317:266,error,errors,266,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317,1,['error'],['errors']
Availability,"This is... a complicated one. As far as I can tell, there are multiple issues here:. 1. Are there any other ways SAPT can detect non-SPD MO hessians? This would have caught the error with the SAP file.; 2. Why did the SAP_stability not detect an instability in the second case? If it's genuinely stable, there's not much we can do. This may be a failing in the Davidson solver.; 3. Instability following should be changed to use an exponentiation rather than Givens rotation.; 4. SAPT should detect disturbingly large delta HF energies and warn the user that the results are suspicious. The error message should also be clarified, but that's #1682.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604:177,error,error,177,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604,2,['error'],['error']
Availability,"This issue has a bit more to it than just removing the line Andy mentioned. The computation dies due to `'psi4.core.variable: Requested variable BRUECKNER CONVERGED was not set!\n'`, rather than the fact that convergence failed. Is there a standard way to represent a convergence error, C-side? `dct` and LMP2 in `cc` throw `ConvergenceError`, failure during an orbital-optimized `occ` computation gets you a generic `PSIEXCEPTION`, and I haven't checked other things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661:280,error,error,280,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661,2,"['error', 'failure']","['error', 'failure']"
Availability,"This issue is intended more as a discussion, than a real issue. At the moment it is not possible to call Psi4 under MPI with more than one process per node because of [this](https://github.com/psi4/psi4/blob/fe3ab0d351e05276185ad838f3bcf2c0321be2fe/psi4/driver/procedures/proc.py#L1340). Basically this creates a file that has a non-unique name on each process and then when it goes to delete the file each process deletes the same file leading to an error for every process after the first one. Although this could be fixed easily (either only write to some master process or ensure that the filename is unique. The latter is easily done [in python](http://stackoverflow.com/questions/2961509/python-how-to-create-a-unique-file-name) and [in C++](http://en.cppreference.com/w/cpp/io/c/tmpnam), or by using the process ID) this has been a problem before and is likely to be a problem again, hence I am hoping to reach a more permanent solution. To me the most obvious solution is to make a file writer (stream writer is even better as it then also works for printing, in turn killing two birds with one stone) object/library that handles all read/writes and does so in a way that will not interfere with MPI. In theory `libpsio` could be used for this, but it would have to be extended to writing other types of files aside from binary (I'm under the impression that it only writes binary files). Thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548:451,error,error,451,https://psicode.org,https://github.com/psi4/psi4/issues/548,1,['error'],['error']
Availability,"This issue is similar to #3084. For psi4 installed via conda/mamba (both 4.18.2 and 4.19) on an hpc system that has a symlink for the /home directory (the same hpc system in the prior issue), psi4 has trouble resolving paths that don't call `.resolve()`. while the changes made in response to #3084 mostly fix the issue, there appears to be two other places `.resolve()` should be added:. https://github.com/psi4/psi4/blob/e105cc2346fba36ccacb77bf8944a3dcf6c097f2/psi4/__init__.py#L47-L48. The full error is below:; ```; [2024-01-25 07:17:41 EST] INFO: qcfractalcompute.config: Reading configuration data from configs/config.3049902-1.yaml; Traceback (most recent call last):; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <module>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <dictcomp>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/lila/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental va",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126:499,error,error,499,https://psicode.org,https://github.com/psi4/psi4/issues/3126,1,['error'],['error']
Availability,"This looks fantastic - great work! I am fully in favor of pulling it in, as long as we're certain it's not the source of the seg fault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/387#issuecomment-222883780:129,fault,fault,129,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222883780,1,['fault'],['fault']
Availability,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-201451437:34,toler,tolerance,34,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437,4,['toler'],['tolerance']
Availability,This might actually be our fault. While @xwang862 was coding up DF-ODC12 method he ran into issues with the libtrans file being left around and I added code to delete it in the destructor. I'll comment my changes and see if that fixes it and then I'll have @xwang862 modify his code accordingly. I never intended this to stay in our local version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178821679:27,fault,fault,27,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178821679,1,['fault'],['fault']
Availability,"This might be a holdover from some tests Rob Parrish did? If I recall; correctly, the biggest holdup to pseudospectral implementation is that one; needs special grids, which are not generally publicly available. On Sat, Feb 22, 2020 at 1:15 AM Susi Lehtola <notifications@github.com>; wrote:. > I'm looking at; >; > https://github.com/psi4/psi4/blob/31219187caa9e8736b3323b078324f85d8c9cd6f/psi4/src/read_options.cc#L1612; >; > which indicates the pseudospectral method is implemented, but only for; > CPHF. However, although I can find the integrals in libmints, I'm unable; > to see where the code is called.; >; > I was thinking that if one-electron integrals are now faster (related to; > PCM?), implementing a seminumerical exchange algorithm should be relatively; > straightforward. It might be really beneficial in Psi4 since although RI is; > really fast, exact integrals are quite slow at present, which is a problem; > for e.g. benchmark calculations that would be feasible with a seminumerical; > approach.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1818?email_source=notifications&email_token=AAXVA5W3GNAG3GBCVIBKXCDREC7JNA5CNFSM4KZO5AEKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPOVMXA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5UHRR5HOSMLNRKHRBTREC7JNANCNFSM4KZO5AEA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1818#issuecomment-590391052:201,avail,available,201,https://psicode.org,https://github.com/psi4/psi4/issues/1818#issuecomment-590391052,1,['avail'],['available']
Availability,"This might be rather an issue for https://github.com/piecuch-group/cct3 but will affect psi4 users nonetheless. The following is a minimal input:; ```; import cct3. set {; basis cc-pVDZ; ints_tolerance 1e-11; }. molecule eins {; units bohr; symmetry c1; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. molecule zwei {; units bohr; symmetry c1; h -2.514213562373 -1.000000000000 0.000000000000; h -2.514213562373 1.000000000000 0.000000000000; h 2.514213562373 -1.000000000000 0.000000000000; h 2.514213562373 1.000000000000 0.000000000000; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. energy(""cr-cc(2,3)"",molecule=eins); clean(); energy(""cr-cc(2,3)"",momlecule=zwei); ```. The error is:; ```; (base) kruse@sphinx1 /scratch/kruse/CCT3 $ psi4.git -v -s . -n 16 input.dat; forrtl: severe (104): incorrect RECL= specifier value for connected file, unit 250, file /scratch/kruse/CCT3/PA; Image PC Routine Line Source; libifcoremt.so.5 00002AD86592CE75 for__io_return Unknown Unknown; libifcoremt.so.5 00002AD8659522E0 for_open Unknown Unknown; cct3.so 00002AD865620EDF integrals_mp_load Unknown Unknown; cct3.so 00002AD86562C3EB solver_mp_solve_c Unknown Unknown; cct3.so 00002AD8655F75A6 driver_mp_run_cc_ Unknown Unknown; cct3.so 00002AD86563683E cc_ Unknown Unknown; cct3.so 00002AD85AD0AAE1 cct3 Unknown Unknown; ```. The `PA` file is opened for _writing_ with a record length `recl` using orbital dimensions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009:981,error,error,981,https://psicode.org,https://github.com/psi4/psi4/issues/2009,1,['error'],['error']
Availability,"This problem was already mentioned in passing here: https://github.com/psi4/psi4/issues/662#issuecomment-475861476. This is a simple example input file showing the problem:. ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); ```. I have set my `$PSIPATH` to a directory containing the basis set file (downloaded from EMSL):. ```bash; ll $PSIPATH; total 2.1M; drwxr-xr-x. 2 toon toon 4.0K Apr 29 17:13 .; drwxr-xr-x. 7 toon toon 4.0K Apr 29 16:34 ..; -rw-r--r--. 1 toon toon 2.1M Apr 29 15:49 ano-rcc.gbs; ```. When running Psi4 on this input, I get the following error message:. ```; Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filename(basgbs); File ""/home/toon/miniconda3/envs/p4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613:358,down,downloaded,358,https://psicode.org,https://github.com/psi4/psi4/issues/1613,2,"['down', 'error']","['downloaded', 'error']"
Availability,This pull request **fixes 1 alert** when merging 2b7850eeeb1dc8d025e15d68ea6b2349acc8cbad into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d2be110d7ae94dbcc4973fbdc5a098a0880f12e9). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-633650674:272,Redundant,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633650674,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 1 alert** when merging 2d2c8cd002229f90176b3d930e2c28714de7e079 into c9b79fb016d8e3b09e8dd980093da576d06ce03d - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-254cf1d1e2f779ca42d4f2d520a4a6cad494a4eb). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-633934735:272,Redundant,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633934735,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 1 alert** when merging 643451ec8104ee345521b0675147a520ee43629b into 58d3bc0ae55d3affca9c75c80126be08d610915c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0b919987994ea1b1be45839c560908e938a58255). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-638313947:272,Redundant,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-638313947,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 1 alert** when merging 748bae92d70cf0e19af497f556068be7c3721f34 into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5beb9c3620c1b55e8eb5ef7829a2c59d0d407612). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632829864:272,Redundant,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632829864,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 1 alert** when merging ae77767cd65e9001c9e56fcde7c5bf4abab27e9a into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c491159b4fb95f1b6ad5ec2471c7b5a6e28e9015). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-634678153:272,Redundant,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634678153,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 1 alert** when merging d232b91fae696c3e5ff52e092ac2bc3b19dfe35b into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a1910976e51a18d568b90d9aca9fd67f7b151905). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-641954616:272,Redundant,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-641954616,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 1 alert** when merging e82cd637a7bbb2a0ab9613f5df07b79d5fe14555 into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ce8ad6faf1c1497dbd02ae59bfe7b34ffe12cffa). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-634552573:272,Redundant,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634552573,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 1 alert** when merging eb0938024a80785ce5a99f1491a2be2f0a5548dd into 66da0fea4b3dbab319b6b517fca0a3983256781f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d746dd3b769b758b7085d20f4fd85ed38912269d). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-635267517:272,Redundant,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-635267517,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 1 alert** when merging f55573bde60e561ca64f5e5aeddb5f61dd41d371 into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e3da07fa43c3dda1694d8fb758216fe82b3a6579). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-633024058:272,Redundant,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633024058,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 1 alert** when merging f715e11e174760f3415ced1b6fff154ed5d9ce3c into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-66d8003b5900a07ff0545b9c739c7ba5c7a56ea1). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632722306:272,Redundant,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632722306,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging 0949406d24c3a58b269c260eef7307c4a3fa0ecb into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-408feb738b27e0191da3dcc7821bc3329b691950). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging 0a831d55b0279a3994e266e8be57b0c40282afdc into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35d47f355c035e2c7831af16a00367c164707166). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging 26dd489b730d6192edaec19d716bd118288b2761 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3e243df6c568db8e3fb5c827f875da7df7629608). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging 2e4489cc2418b61564026101d6565950833492d9 into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0426279eb5b6e50edb1b6f56ac45cccedd202f76). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging 319e8ae23f1af15a0e12b22aa2f3c59f4763fd28 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-494b3553ec0f3442315c9d0f11847e9f40d0f7f3). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging 59f9232b2dcdb5b83df6e799aab9781dc7400ec0 into 9a2de04698459b23e55df5f582873fcff9b9a320 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b10a9d0172ee67a707b5e4730ed0a64843867e5a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging 886f6f2c3bb882a600f22d42fe55683417408405 into 5f1a24a8b6b77b0d368cd434c0584f027a28d975 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e817128cb8d64d1e00edc7bd75efa82e352418d). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging 90d1421addd3d748d40a0d2ca5d603c4e00ee439 into 2b2c8bc97d85ca42187ce33555c58a1a281213ca - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8b0108d7532de3a536fd291df05b83ed13f5e8a2). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging a2046e3cf4e86590471f2507d714a9e713e47ffa into 1cf7468090b1e0432811ff55811a380ea9469cb3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-10e94c75ac5916bddaeb30d709d3e42401046033). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging b907a23b7fc19b0f53df66237412be4ffa936d38 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-14201e7d5a09c3b6d04c364e80720d8cae55b372). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging c04bf332addc72cf7d17f710b9ebf9046e67745d into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cd35c8eb5ac96c8f187051a362c86e3042b4139a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging e8a99524a098b99c215ea9c9fd0d9f2b81fd5f9b into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-485d0633a6e802d5dead0de11395e4fd055349fb). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799,1,['Redundant'],['Redundant']
Availability,This pull request **fixes 3 alerts** when merging ebe0f4e9884c91bd725e8bcdb4b49447bb18b85f into 90403ec0e424a296679aa5533afec8b8cbd4d1af - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-010d589fd9aa17b4699886375c9ee1ac5e7ce0cd). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861:304,Redundant,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861,1,['Redundant'],['Redundant']
Availability,This pull request **introduces 1 alert** and **fixes 1** when merging bbaeafca76f0b8f0657f63704be6c24c774151d2 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af9d090bb28f72b3456f9ecc4bacbd1194bf0e45). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323:341,Redundant,Redundant,341,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323,1,['Redundant'],['Redundant']
Availability,This pull request **introduces 1 alert** and **fixes 2** when merging 29961b2d54eba96b9cc3688900e512db98e834a6 into c05d38b04dc8500c1cd9f92e5f313bebac15e219 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f2d58b3d379a82a33b29490be79a38a91a155f49). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449:341,Redundant,Redundant,341,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449,1,['Redundant'],['Redundant']
Availability,This pull request **introduces 1 alert** and **fixes 2** when merging 7c8a11e8026796d6beb1437a7a6ae831d41b75d8 into 958c81a54c7ca5e6277622694258ca9db8b07f48 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5db3262e4803037cc6c2295e50baa99c3de7fa5b). **new alerts:**. * 1 for Syntax error. **fixed alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1951#issuecomment-656736060:298,error,error,298,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656736060,1,['error'],['error']
Availability,This pull request **introduces 1 alert** and **fixes 2** when merging ee3a8859e70fc6da96a6e2af833b11956aa85a97 into e0b780daa5e75cb07e1b44c47db560a3f4c6474c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-268701b010d44f775457db29bf9e88aa6e935f53). **new alerts:**. * 1 for Syntax error. **fixed alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1951#issuecomment-656856825:298,error,error,298,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656856825,1,['error'],['error']
Availability,This pull request **introduces 1 alert** when merging 00c99bedcaa1ba87381865f428c43f1c44f7002d into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5247ab5369215bab32e5264252af3c7482cf66ad). **new alerts:**. * 1 for Redundant assignment,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942#issuecomment-653934319:275,Redundant,Redundant,275,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-653934319,1,['Redundant'],['Redundant']
Availability,This pull request **introduces 1 alert** when merging bbd3aa3412ea20ff2ef9d729e5d2e26409416b36 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2458a2c1817707b15be6f2e2b716336bb481d859). **new alerts:**. * 1 for Redundant assignment,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942#issuecomment-653816223:275,Redundant,Redundant,275,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-653816223,1,['Redundant'],['Redundant']
Availability,This pull request **introduces 10 alerts** and **fixes 13** when merging 9365dbd41720e192dbe03ab0e9474902891183bd into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b55a2cb86c8654bc9e7edabc9f99d1cf47a6fac9). **new alerts:**. * 6 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-553714229:332,error,error,332,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-553714229,1,['error'],['error']
Availability,This pull request **introduces 13 alerts** and **fixes 13** when merging 5e2c48cd569e99f6d69c602d505bcf0c22d0a38d into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-038c4af8cc842894db7a66841ed9c33b811a8944). **new alerts:**. * 7 for Unused local variable; * 3 for Unused import; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-552755151:355,error,error,355,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-552755151,1,['error'],['error']
Availability,This pull request **introduces 2 alerts** and **fixes 1** when merging 1b5210dbe737c9ac457492d53ff84b354cfc7f7a into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c14a24ebff769e8beefb4fd5c8030e03aa18477c). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458:342,Redundant,Redundant,342,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458,1,['Redundant'],['Redundant']
Availability,This pull request **introduces 2 alerts** and **fixes 1** when merging 9b95c9a47cfe0cf8c58856d9dac9438954f03aa6 into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a6422872aa19929786271260d5be4c41a2b6237f). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335:342,Redundant,Redundant,342,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335,1,['Redundant'],['Redundant']
Availability,This pull request **introduces 2 alerts** when merging 47c3cc1af0158385df55f18aeb7b51bce90d2c34 into 51199f8b721b607e35bfae37de94dce9582b4f8b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-dd4848330cf26f526f6c00dfbd180989cd4eb579). **new alerts:**. * 1 for Unused import; * 1 for Syntax error,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-571963453:306,error,error,306,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-571963453,1,['error'],['error']
Availability,This pull request **introduces 23 alerts** and **fixes 14** when merging 5c73c7429782f5bd5c917a5f5a3a6c13d4135db8 into 2edf6b752ba5f8052af7cc2347052e681e16a7ab - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f3e6464c14983b28d46a1154ee3932155223883e). **new alerts:**. * 14 for Unused import; * 7 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;. ---. *Comment posted by [LGTM.com](https://lgtm.com)*,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-495811312:410,error,error,410,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-495811312,1,['error'],['error']
Availability,This pull request **introduces 23 alerts** and **fixes 14** when merging e11bb214d47c01c61b0b73aa4e50471b82fa9ca4 into d4681c9689cd58006f656c083401283a539a61f4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0953359b6cba1590b435ecea0707064602a0dc59). **new alerts:**. * 14 for Unused import; * 7 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-505652250:410,error,error,410,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-505652250,1,['error'],['error']
Availability,This pull request **introduces 24 alerts** and **fixes 14** when merging 7483ceb56b8da355509dba28c43cb8a3e41786fe into d7529df57c2815cfb43a88d9b739c94c3a2322c4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-11c2650bf34ba516f9ddee5a91923598ad4a617e). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-525543922:410,error,error,410,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-525543922,1,['error'],['error']
Availability,This pull request **introduces 24 alerts** and **fixes 14** when merging 8c0afe6ba300b94768102920f9a57dfefb496186 into 6e6752949022c5cc61953a9cff384220ae80feda - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-28eeb05962093199f3c0e2dae6e3773b48edb740). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-512959967:410,error,error,410,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-512959967,1,['error'],['error']
Availability,This pull request **introduces 24 alerts** and **fixes 14** when merging ad8546ed1e2e7385542e9c2f32ab37f7fe8ae5de into d7529df57c2815cfb43a88d9b739c94c3a2322c4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d2f047dc32def206d8265b7cfe1f8042f534899c). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-524469488:410,error,error,410,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-524469488,1,['error'],['error']
Availability,This pull request **introduces 24 alerts** and **fixes 14** when merging d31ce07cd88b218a003bb4bd62feb27e8fdb5d6c into b789aa3986441f7f0875f39ace6618e54437a4aa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-86ce69b1d0cf35d95348cc61bfb35da2158b42ed). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-520681717:410,error,error,410,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-520681717,1,['error'],['error']
Availability,This pull request **introduces 28 alerts** and **fixes 13** when merging bc9009a38f14c7bf07d3954c8e6733996c7183cc into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b8ef5304b94a59fe306f4bb821fe5bb601aecefc). **new alerts:**. * 17 for Unused import; * 8 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-552054076:356,error,error,356,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-552054076,1,['error'],['error']
Availability,This pull request **introduces 3 alerts** and **fixes 35** when merging 5cdb0aac52477b199271a52a1e269fd1bc7587ba into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a92e22e7909909388abb7b6c40655cb128965e2e). **new alerts:**. * 1 for Unused local variable; * 1 for Syntax error; * 1 for Variable defined multiple times. **fixed alerts:**. * 29 for Module\-level cyclic import; * 4 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import; * 1 for Unreachable code,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1738#issuecomment-545163931:331,error,error,331,https://psicode.org,https://github.com/psi4/psi4/pull/1738#issuecomment-545163931,1,['error'],['error']
Availability,This pull request **introduces 4 alerts** and **fixes 13** when merging 079713754ba1bea52958d5ae051c110d66aad4c0 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ccf27b30dc1cde3841ea61e115ee6ea17b1b6962). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-565668634:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-565668634,1,['error'],['error']
Availability,This pull request **introduces 4 alerts** and **fixes 13** when merging 3f44f26065b607a11b59752c6aa75a728983e1e9 into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-09189b6f38daf16b3d19b91cfa42540df2c87ad1). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-556940111:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-556940111,1,['error'],['error']
Availability,This pull request **introduces 4 alerts** and **fixes 13** when merging 510ffb12356a90c20c40095e1825c0d2417ce48a into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e8e53c6a12f721f07019f8d8807397848b17e183). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-556468532:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-556468532,1,['error'],['error']
Availability,This pull request **introduces 4 alerts** and **fixes 13** when merging 541118f85c6de69318c6d69dab97c6fe6b33e6c5 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3d3b5f159a7cf84416a30ddf0e4adb8f963fb49e). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566045322:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566045322,1,['error'],['error']
Availability,This pull request **introduces 4 alerts** and **fixes 13** when merging 5ef316e99d35fb201d64d8cafdf8e1b89c7ad1b3 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f5c2513aa7e0109b3faa0fd1710bc759b30973df). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-565868980:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-565868980,1,['error'],['error']
Availability,This pull request **introduces 4 alerts** and **fixes 13** when merging 5f20f7c0f99ea4fe89892aca1e1f6cfc1b5b8aae into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-070f5ed99b121820cfcbad1c600f61e49f5a51c3). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-557379531:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-557379531,1,['error'],['error']
Availability,This pull request **introduces 4 alerts** and **fixes 13** when merging 97263dcf4d1c37b0cffac76321b0f89d28e8ada1 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-80a81ff67f598b9106331cdf03cbc5ca0daa53d9). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-565842567:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-565842567,1,['error'],['error']
Availability,This pull request **introduces 4 alerts** and **fixes 13** when merging bfbc7a55ba07fc0d09177988a8b3cde45001af39 into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5b8e0e5be109138b62bee49d348217be2a41e695). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-557205930:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-557205930,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging 0a8cf8bea7a5b64c7c5de9f1f130a8e7d7e08233 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2b65dc92e25fb18ef5b4e365b6f0582ec8db392f). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566297630:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566297630,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging 324bd969bf69170c4983693ea82883cbbcc9c9d7 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0a791152ab53f3b656ffb2ec8d71822021a63831). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566876000:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566876000,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging 45f19943f3b7b98ba0e75d13e417b22802220502 into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7fc19e6a1deeabc659c9a784e6ad3d09a50c570d). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567273376:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567273376,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging 56def841cb756b5b8491722bf01e151ae3fad3f9 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3bf89b9ceb2797cd0fee9e548f4b3a06fedc0f1a). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567069654:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567069654,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging 61fa6f4ec5198b93be03e537b86cccbce12fe4f8 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35141f06d7ab9bc69dab347f0f36d8e50fa5e040). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566354046:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566354046,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging 646483f880e1b74d4c81ddd451d7ff913fd5b607 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d502d1e834edd3b680de16233a9dd8167ec070e5). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566848867:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566848867,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging 6c6fab442411f922ddd3e3dcdeb58e74ee5b5742 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-192dfec46bd41967ba8208516e1a61a4c038ba5c). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567153929:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567153929,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging 741a531854eb567bbe06b664979bd0e7a139e8af into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-eba4b70f38cb6e74ef599f35aa11e7dceb5ce69e). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566797894:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566797894,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging 7a9386b6a37aceb5ae41eb98dd85d41bed1f4164 into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d1fd0455c7fe0a2642848c7f142c9c5468716a01). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567759589:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567759589,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging 7cf1d6742cf4a9aca2fa1de828f4993e8b8d331d into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2e1756429a66f786987d4b6b63826bfb4904e665). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566425536:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566425536,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging 89f07b89989685cfa258db7c81b3bcccb58e57ec into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-4af42a016ee83f37da910b36571de45eaeec254f). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567281883:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567281883,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging c050e6c2615a139510bebad5602d21b1c87655a7 into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-369b730fc0dd348d910e30e2b7d9ceaebfbaae89). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567340678:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567340678,1,['error'],['error']
Availability,This pull request **introduces 5 alerts** and **fixes 13** when merging c118c3c4bc2648a145776ef2591e0a099f36b48d into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-30533b536131e08a97135b0ba71eed277a0899a3). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566213689:300,error,error,300,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566213689,1,['error'],['error']
Availability,This pull request **introduces 8 alerts** and **fixes 13** when merging 0738f376f41981e12d7e5dd7c0d27b5975e607bc into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b08dc1a4d799c67b2ee234db2e6c3aa98cfe55a1). **new alerts:**. * 4 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-554120132:331,error,error,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-554120132,1,['error'],['error']
Availability,This pull request **introduces 8 alerts** and **fixes 13** when merging affe266aee566fd56755c634c48aae6fa38f02bf into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9b52a4fc96a47dee0570700aa866c21662334088). **new alerts:**. * 4 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-556252967:331,error,error,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-556252967,1,['error'],['error']
Availability,This pull request **introduces 9 alerts** and **fixes 13** when merging 350a7109410f4f0dfab6888f83d5a4d93a8829d2 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-75650ec2427c70a4f54c63b915f8ac152a63fc6f). **new alerts:**. * 5 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-553093319:331,error,error,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-553093319,1,['error'],['error']
Availability,"This reminds me, there *is* a technique to avoid recomputing every `N` iterations. Namely, I think Ahlrichs(?) described a procedure where one keeps track of the change of the density matrix from the reference one by setting `D_0=0` and `D_i = D_{i-1} + max{|Duv|}` where `Duv` is the difference density matrix at iteration `i` and `D_i` tracks the changes. Instead of doing the reset every `N` iterations, one does a full rebuild when `D_i >= eps` because by then sufficient numerical error may have creeped into the calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1337111281:486,error,error,486,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1337111281,1,['error'],['error']
Availability,"This should be fixed in #903 (the comment in that PR was supposed to close this ticket, but didn't for some reason). Please ping back if you have any more problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901#issuecomment-361268770:124,ping,ping,124,https://psicode.org,https://github.com/psi4/psi4/issues/901#issuecomment-361268770,1,['ping'],['ping']
Availability,This simple run fails to converge in Psi4 1.3.2; ```; molecule {; pubchem:methimazole; }. set basis pcseg-0; optimize('wb97x-d'); ```; The error is; ```. Back-transformation to cartesian coordinates...; The INTCO_EXCEPTion handler:; TORS::compute_val: unable to compute torsion value; Dynamic level is 0.; exc.g_really_quit() is 0. **** Optimization has failed! (in 1 steps) ****; --------------------------; OPTKING Finished Execution ; --------------------------; Removing binary optimization data file.; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 0 iterations.; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208:139,error,error,139,https://psicode.org,https://github.com/psi4/psi4/issues/2208,1,['error'],['error']
Availability,"This sort of worked for me i.e. if the job was killed in the CC equations the restart would take a lot of steps but if the job was killed in the (T) then it could pick up nicely from the old T1 and T2 amplitudes, which is helpful for me as one of our users reports his job failing at the start of the triples. My question is whether there is a bare minimum of scratch files that we can copy over from transient scratch to enable the restart or do we need all of them? Also, it looks as though the scratch files (including amplitudes?) are deleted at the end of a successful run so we can't do the ccsd and (T) as separate runs? It takes 80 hours to get to the point of failure so ideally I'd just like to take a look at the (T) failure to see if it is a problem on our side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-54103423:669,failure,failure,669,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-54103423,2,['failure'],['failure']
Availability,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:571,error,error,571,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885,5,"['down', 'error', 'recover']","['downwards', 'error', 'recover']"
Availability,"This sounds reasonable to me. On Fri, Oct 9, 2020 at 7:49 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > PSIO errors are currently being written to stderr. (See this line and the; > switch statement below; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/error.cc#L54>.); > Although the fact that there is a PSIO error is written to the output file,; > I'm semi-frequently encountering forum users who aren't familiar with; > stderr. It either takes longer than it should for me to get this; > information, or they can't provide it.; >; > For ease of debugging, this error information should be logged somewhere; > like the output file, where we can guarantee new users will keep it and be; > able to find it, so they can pass it on to developers.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2019>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5V46EUBGLKYCGYKKADSJ32DTANCNFSM4SJ7HNMQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2019#issuecomment-706322628:123,error,errors,123,https://psicode.org,https://github.com/psi4/psi4/issues/2019#issuecomment-706322628,4,['error'],"['error', 'errors']"
Availability,This sounds similar to the issue I ran into with the first version of the SAD guess rewrite: CH4 switched symmetry and the program crashed due to memory errors.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1474#issuecomment-453868040:153,error,errors,153,https://psicode.org,https://github.com/psi4/psi4/issues/1474#issuecomment-453868040,1,['error'],['errors']
Availability,This test case uses analytic frequencies and requests that a three and five point finite-difference calculation is run. The original comparisons were a bit tight (0.1 and 0.001 cm^-1). I switched the reference data to finite difference values and loosened the tolerance check to a wavenumber. 903bb0e380ecf8304875409b73fb19d69c6f393a,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/123#issuecomment-121730465:260,toler,tolerance,260,https://psicode.org,https://github.com/psi4/psi4/issues/123#issuecomment-121730465,1,['toler'],['tolerance']
Availability,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56#issuecomment-40206429:184,echo,echo,184,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429,1,['echo'],['echo']
Availability,"This whole thread was very useful. I was able to create a conda environment with the latest psi4, openff-toolkit, and openff-recharge using this yml. The only thing not really mentioned in this thread, or the psicode latest installation is pinning pydantic version 1.x. I was getting this error ; ```; `; __pydantic_self__.__pydantic_validator__.validate_python(data, self_instance=__pydantic_self__) TypeError: Array.validate_type() takes 2 positional arguments but 3 were given`; ```. from this line of code in my example ( i believe it, recharge may need to pin pydantic 1.x). ```; from openff.recharge.esp.storage import MoleculeESPRecord; qc_data_record = MoleculeESPRecord.from_molecule(; openff_mol_3D, conformer=conformer, grid_coordinates=grid, esp=esp, electric_field=None, esp_settings=qc_data_settings; ); ```. ```. name: psi4; channels:; - conda-forge; - conda-forge/label/libint_dev; dependencies:; - conda-forge::psi4>=1.8.2; - conda-forge::openff-toolkit; - conda-forge::openff-recharge; - conda-forge::pydantic<2. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752:289,error,error,289,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752,1,['error'],['error']
Availability,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7#issuecomment-19470461:691,error,error,691,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461,1,['error'],['error']
Availability,"Those comments aren't always 1:1 with the contents. But what's happening for 6-311+G* in particular is that 3 partial basis sets are getting merged: the 6-311 defined through Kr, the polarization defined through Kr, and the diffuse only defined through Ca. Only elements with partial basis sets available for all three pieces show up in the full basis file, so Kr, etc. are missing. Looking at 6-311+G* at https://www.basissetexchange.org/, that ends at Ca, too, so nothing to update. Does this clear up what's going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2097#issuecomment-769922422:295,avail,available,295,https://psicode.org,https://github.com/psi4/psi4/issues/2097#issuecomment-769922422,2,['avail'],['available']
Availability,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-170794065:517,Error,Error,517,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065,6,['Error'],['Error']
Availability,"Time to start working on the Psi4 1.0 release notes, #hype! Please read through and update as needed @psi4/p4manage. Loosely organized at the moment, feel free to re-do. These notes span from the Psi4 beta5 release to the official Psi4 1.0 release.; ## User improvements; - Created binary linux distribution of Psi4 for users through conda; - Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - Al",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:818,error,error,818,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['error'],['error']
Availability,"To answer your first question: `set guess read` does fix this problem. . I can not pass a wavefunction to a second scf call. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf', ref_wfn=refwfn) ; ```. I get an error that scf_helper can not take a wavefunction. Not sure if this is what you wanted me to do. If I run two scf calls. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf'); ```. This works fine. This has the same effect as set guess read, so I guess there is a check to see if a previous scf has ran. . So it seems that there is no problem with reading the orbitals, but passing them seems to be off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419#issuecomment-227802600:226,error,error,226,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227802600,1,['error'],['error']
Availability,"To cut down on the printing, you could use `core.be_quiet()` and `core.reopen_outfile()` depending on the print level",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791590947:7,down,down,7,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791590947,1,['down'],['down']
Availability,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:35,failure,failure,35,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598,2,['failure'],['failure']
Availability,"To give my 2 cents to the questions above:; - `freeze_core True` should be a best-effort solution, always freezing as much as possible, but ensuring there are valence electrons (ie. for Ca2+, [Ne] core is frozen instead of [Ar], while for Ca0, [Ar] is frozen; similarly for Ar- the whole [Ar] shell should be frozen). This one is charge aware. This option should never crash the code.; - `freeze_core N` where `N = [1,2,3...]` will always freeze the N-th previous full shell, ie for `N=1` the current behaviour in master. Validation error when no valence electrons remain, to avoid the non-helpful segfault in #1271.; - @JonathonMisiewicz's idea of per-atom frozen cores (or in my view even better: per-fragment frozen orbitals) is a good one, and I'd be keen to get that sorted, but it'd probably need changes to `molecule {}` or somewhere else.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950:533,error,error,533,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950,1,['error'],['error']
Availability,"To save on cpu-time, I went down to cc-pv[dt]z + cc-pvdz (as opposed to [tq] + [dt] extrapolations).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1123#issuecomment-410693460:28,down,down,28,https://psicode.org,https://github.com/psi4/psi4/pull/1123#issuecomment-410693460,1,['down'],['down']
Availability,"To sum up the discussion so far:; * The original geometry was malformed. Not a Psi4 problem.; * We've noticed large changes in energy in the early iterations, with the malformed geometry and a SAD guess. Not a Psi4 problem. (See https://github.com/psi4/psi4/issues/2641#issuecomment-1192909620); * There's been some discussion over how appropriate custom setting DFT VV10 c parameters is. Not a Psi4 problem.; * It's still possible to cause A/EDIIS failure with a sufficiently non-physical Hamiltonian, whether due to DFT VV10 parameters or a compressed geometry. **This is a Psi4 problem.**. I'll see what I can do about the last one, but I suspect that my options will be very limited.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194129799:449,failure,failure,449,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194129799,1,['failure'],['failure']
Availability,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175#issuecomment-217275131:13,down,down,13,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131,2,['down'],['down']
Availability,"Transferred from [forums](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471). Awaiting a more complete report from user, but we can say some things already. A user is told that one of their matrices is not ""SPD"" during an open-shell SAPT0 computation, and the computation quits. The relevant lines in the code are [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libsapt_solver/usapt0.cc#L1462-L1466). I assume SPD is short for semi-positive definite. Action Items:; First, we need SAPT developers to translate the error message. Without that, the fix could be anything from writing an error message that tells the user what if anything they can do, or it could involve a change in the USAPT logic.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682:59,error,error-a-matrix-is-not-spd,59,https://psicode.org,https://github.com/psi4/psi4/issues/1682,3,['error'],"['error', 'error-a-matrix-is-not-spd']"
Availability,"Transferred from the [forums](http://forum.psicode.org/t/regarding-cisd-calculation/1474). A user reported a CISD computation on a system with 190 orbitals and C2v symmetry that quit after ""Setting up CI strings"" with absolutely no error message. I reproduced this with a post-1.3.2 dev version of Psi on my cluster, in serial with 30 GB. (The original reporter is using an antique version of Psi.). @dgasmith pointed out that DETCI may have problems with a system of this size, but I'm not familiar enough with DETCI's computational costs to know if those problems would crash DETCI. At minimum, there should be an error message printed out. If there is an actual DETCI bug, that should ideally be fixed. My apologies to the person who has to do that.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1685:232,error,error,232,https://psicode.org,https://github.com/psi4/psi4/issues/1685,2,['error'],['error']
Availability,"Transferred from the [forums](http://forum.psicode.org/t/sapt-dft-issues/1444). A user reports an SCF convergence failure during a SAPT(DFT) computation. While this _could_ be an example of a routine SCF convergence failure, the fact that it appears during SAPT(DFT) combined with how spectacular the convergence failure _is_ have me suspecting it's something more. When I run the user's input file on 1.3.2 release (see forum post), the failing SCF has iterations like this:; ```; @DF-RKS iter SAD: -2.88905500214392 -2.88906e+00 0.00000e+00 ; @DF-RKS iter 1: 0.79355642730661 3.68261e+00 8.89827e-02 DIIS ; @DF-RKS iter 2: -2.69913194172793 -3.49269e+00 1.70278e-02 DIIS ; @DF-RKS iter 3: 0.05174993763519 2.75088e+00 1.04154e-02 DIIS ; @DF-RKS iter 4: 4.56710002468099 4.51535e+00 8.67682e-02 DIIS ; @DF-RKS iter 5: 4.56708994805846 -1.00766e-05 8.67628e-02 DIIS ; @DF-RKS iter 6: 4.56706596773139 -2.39803e-05 8.67500e-02 DIIS; ```. The usual convergence tricks - playing with DIIS settings and damping - still leave a problem. Notice that iterations 1, 3, and 4 are terrible, going up in energy by _multiple Hartrees_ even after what should be a decent guess. The user reports that they are observing such problems for more complicated systems, but can reduce the problem to this two atom problem. You'd need to ask them to get the original systems, but this seems like a good starting point.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1684:114,failure,failure,114,https://psicode.org,https://github.com/psi4/psi4/issues/1684,3,['failure'],['failure']
Availability,"Tried to run the following keywords, copied directly from examples except for the modification of basis sets & functionals (omitted lengthy molecule which is fine outside of using cubeprop):. `memory 8 Gb. set basis 6-31G; set scf_type df; set freeze_core True; set cubeprop_tasks ['frontier_orbitals']. E, wfn = optimize('b3lyp', return_wfn=True); cubeprop(wfn); `; The following error ensues post successful optimisation:. `Traceback (most recent call last):; File ""/usr/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 65, in <module>; File ""/usr/lib/psi4/driver/p4util/util.py"", line 101, in cubeprop; cp.compute_properties(). RuntimeError: ; Fatal Error: FRONTIER_ORBITALSis an unrecognized PROPERTY_TASKS value; Error occurred in file: /build/psi4-XGp1km/psi4-1.1/psi4/src/psi4/libcubeprop/cubeprop.cc on line: 196; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::CubeProperties::compute_properties(); pybind11::cpp_function::initialize<pybind11::cpp_function::initialize<void, psi::CubeProperties, , pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::CubeProperties::*)(), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::CubeProperties*)#1}, void, psi::CubeProperties*, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(pybind11::cpp_function::initialize<void, psi::CubeProperties, , pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::CubeProperties::*)(), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::CubeProperties*)#1}&&, void (*)(psi::CubeProperties*), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(pybind11::detail::function_record*, pybind11::handle, pybind11::detail::funct",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722:381,error,error,381,https://psicode.org,https://github.com/psi4/psi4/issues/1722,3,"['Error', 'error']","['Error', 'error']"
Availability,"Trying @pavankum's code. File ""C:/Users/vike/PycharmProjects/pythonProject/test.py"", line 28, in return_td_result; energies = list(result.final_energies.values()); AttributeError: 'FailedOperation' object has no attribute 'final_energies'. printing result ... FailedOperation(error=ComputeError(error_type='resource_error', error_message='QCEngine Resource Error: Procedure torsiondrive is registered with QCEngine, but cannot be found.')). do I need to do a special install to use this properly?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729:276,error,error,276,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729,2,"['Error', 'error']","['Error', 'error']"
Availability,"Trying `psi4 -t` gave this error:. ```; Git: Rev {master} b04cdf9 dirty; ...; Psi4 started on: Wed Feb 24 14:56:44 2016. Process ID: 2767; PSI4DATADIR: /home/eric/data/opt/apps/python/anaconda2/share/psi4; Memory level set to 256.000 MB; Traceback (most recent call last):; File ""/home/eric/data/opt/apps/python/anaconda2/share/psi4/python/interactive.py"", line 3, in <module>; import readline # optional, will allow Up/Down/History in the console; ImportError: libncursesw.so.5: cannot open shared object file: No such file or directory; ```. which was fixed by installing the latest ncurses package.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/289:27,error,error,27,https://psicode.org,https://github.com/psi4/psi4/issues/289,2,"['Down', 'error']","['Down', 'error']"
Availability,"Trying out the SCF plugin with the current master branch I get the error; ```; $ psi4 h2o.in; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/openorbital/openorbital/psi4/scf/myplugin/pymodule.py"", line 60, in run_myplugin; psi4.set_scalar_variable('CURRENT ENERGY', myplugin_wfn.energy()). AttributeError: module 'psi4' has no attribute 'set_scalar_variable'. Printing out the relevant lines from the Psithon --> Python processed input file:; H 0.866811766153153 0.601435735686679 0.000000000000000; H -0.866811766153153 0.601435735686679 0.000000000000000; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""pcseg-1""); --> energy('myplugin'). !-------------------------------------------------------!; ! !; ! module 'psi4' has no attribute 'set_scalar_variable' !; ! !; !-------------------------------------------------------!. Segmentation fault (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3093:67,error,error,67,https://psicode.org,https://github.com/psi4/psi4/issues/3093,2,"['error', 'fault']","['error', 'fault']"
Availability,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/452:314,error,error,314,https://psicode.org,https://github.com/psi4/psi4/issues/452,2,['error'],"['error', 'errors']"
Availability,"Trying to install psi4 on MacOS. . I looked at this issue as a starting point #2024. I used the following procedure to install psi4. `conda create -n psi4env python=3.7`; `mamba install ambit=0.5.1=h7778601_3 -c psi4`; `mamba install chemps2=1.8.9 -c psi4`; `mamba install libint=1.2.1 -c psi4`; `mamba install libxc=4.3.4 -c psi4`; `mamba install simint=0.7 -c psi4`; `mamba install psi4=1.4a2.dev1084+9b60184=py37h55c4972_2 -c psi4/label/nofortran`. Then, I tried to test the installation using `psi4 --test`; It gave me this error:. ```; Traceback (most recent call last):; File ""/Users/kianpu/miniconda3/envs/psi4env_37/lib//python3.7/site-packages/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/kianpu/miniconda3/envs/psi4env_37/lib//python3.7/site-packages/psi4/core.cpython-37m-darwin.so, 0x0002): Library not loaded: @rpath/libgg.1.dylib; Referenced from: /Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/core.cpython-37m-darwin.so; Reason: tried: '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/../../../libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/../../../libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/usr/local/lib/libgg.1.dylib' (no such file), '/usr/lib/libgg.1.dylib' (no such file). During handling of the above ex",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578:528,error,error,528,https://psicode.org,https://github.com/psi4/psi4/issues/2578,1,['error'],['error']
Availability,"Trying to run a fluorine-containing molecule (HF) with wB97X-3c in Psi4 1.9.1 results in the following error:. ```sh; psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['F']; Basis Sets: [('VDZP', 'VDZP', None)]; File Path: /private/var/folders/_v/ns6m8tr96_qfytmb7tz4gv8r0000gn/T/tmp3ruilqbj, /private/var/folders/_v/ns6m8tr96_qfytmb7tz4gv8r0000gn/T/tmp3ruilqbj, /Users/cwagen/.../share/psi4/basis; Input Blocks:; ```. Looking at where the vDZP basis set is defined in Psi4 ([link](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/vdzp.gbs)), there's a note at the top that fluorine was removed owing to a missing ECP projector:. ```; !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.9.1+53.gf8c059b.dirty; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: vDZP; ! Description: Small basis set used in wB97X-3c method; ! Role: orbital; ! Version: 1 (); ! From SuppMat of https://doi.org/10.1063/5.0133026; ! then converted with https://github.com/MolSSI-BSE/basis_set_exchange-historical/commit/f84314b31bc0e30e5a29c274684d6e9ff612466a#diff-7686a8c951e2392d87a59f8d89e5c75f18d2d35c60683ed5b52910076840569c; ! then removed Fluorine b/c the ECP lacks a projector; ! then added with basis_set_exchange.curate.add_basis(name=""vDZP"") to a local repo; ! then converted with `bse get-basis vDZP psi4`; !----------------------------------------------------------------------; ```. Marcel Muller (@marcelmbn), the original author of the wB97X-3c paper, wrote in [an analogous PySCF issue](https://github.com/pyscf/pyscf/pull/2085#issuecomment-1951321264) (pyscf/pyscf#2085) that this issue can be resolved:. > There are two ways to solve this problem (at least as far as I can see):; > Add a ""dummy"" d-type projector with coefficient 0.0, so that the ascending order of pr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3205:103,error,error,103,https://psicode.org,https://github.com/psi4/psi4/issues/3205,1,['error'],['error']
Availability,"Turns out @robertodr's original `_EP_IS_EXTERNAL_PROJECT` error [was because](http://public.kitware.com/pipermail/cmake-developers/2015-April/025035.html) I moved all the external_* dependencies from `ExternalProject_Add(psi4-core ...) add_dependencies(psi4-core chemps2_external ...)` to `ExternalProject_Add(psi4-core DEPENDS chemps2_external ...)`, and CMake didn't learn to accept interface libs in that role until 3.3. So, I still rather want 3.3 because the DEPENDS looks tidier and the HDF5 version thing, but I can make 3.2 work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281446113:58,error,error,58,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281446113,2,['error'],['error']
Availability,"Two questions:; - Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out; - Why not implement my above suggestion of forming two separate `X` matrices? This would be simple to do",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1499304044:117,toler,tolerance,117,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1499304044,2,['toler'],['tolerance']
Availability,"UPDATE: Above holds that Psi4 can be built against NumPy v1 _or_ v2, just be sure your runtime np is the same major version as your build-time numpy, or you'll get the ""atoms are too close"" error. _But_ I've learned a few more constraints and pitfalls since then:. * to use np v2, you must have `pybind11>=2.12` (right now the codedeps/psi4-path-advisor setup is constraining to 2.10 or 2.11 to avoid a docs issue; working on a resolution) (signature is ""atoms are too close""); * to use np v2, you must have `pint>=0.24.1` (v0.24.0 works for >=py310; v0.24.1 works for >=py39) (signature is something like sumprod not available in numpy); * to use np v2, you must have `qcelemental>=0.28.0` (fixed since last week; qcengine doesn't need changes); * on c-f, packages have ways or declaring what they're compatible with so that an env solves into a workable state. Those aren't in place at present for the numpy+pint and numpy+pybind11 combinations, so you need to check them yourself.; * even if your build env is np v2, beware of any pip installs that can surreptitiously sneak in a np v1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3184#issuecomment-2204639750:190,error,error,190,https://psicode.org,https://github.com/psi4/psi4/issues/3184#issuecomment-2204639750,4,"['avail', 'error']","['available', 'error']"
Availability,"UTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;FC_SYMBOL=2;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H; -- Configuring done; -- Generating done; -- Build files have been written to: /home/seba/software/psi4-0.5/objects; ```. Point where it fails:. ```; [ 45%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/basisset.cc.o; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instan",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:6211,error,error,6211,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['error'],['error']
Availability,"Ugg, Windows isn't even finding it to open, much less open-so-can't-close. ```; Start 419: json-schema-1-gradient; 141/142 Test #419: json-schema-1-gradient ...........***Failed 1.97 sec; Traceback (most recent call last):; File ""D:/a/1/s/tests/json/schema-1-gradient/input.py"", line 62, in <module>; json_ret = psi4.json_wrapper.run_json(json_data); File ""D:\a\1\b\build\stage\lib\psi4\driver\json_wrapper.py"", line 191, in run_json; core.set_output_file(outfile.name, False); RuntimeError: ; Fatal Error: PsiOutStream: Failed to open file.; Error occurred in file: D:\a\1\s\psi4\src\psi4\libpsi4util\PsiOutStream.cc on line: 46; ```; maybe it should be `core.set_output_file(outfile)` or `core.set_output_file(outfile.file)`. also what do you think of putting the whole 190--215 in a `with tempfile.NamedTemporaryFile as handle:` to try to clean up closing issues?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1576#issuecomment-473369615:500,Error,Error,500,https://psicode.org,https://github.com/psi4/psi4/pull/1576#issuecomment-473369615,2,['Error'],['Error']
Availability,"Um, I think the standard is that MOs are **always** printed to the checkpoint file, since the point is that they're needed to run calculations and analyses anyhow. I don't see any reason why they wouldn't be dumped to the checkpoint. I fully agree with points 1-3 though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-426190015:67,checkpoint,checkpoint,67,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-426190015,2,['checkpoint'],['checkpoint']
Availability,"Unclear if it is a related, but running `make test` then leads to the following error:. > Traceback (most recent call last):; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/bin/psi4"", line 140, in <module>; import psi4; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/lib//psi4/__init__.py"", line 59, in <module>; raise ImportError(""{0}"".format(err)); ImportError: To be able to register buffer protocol support for the type 'psi4.core.CIVector' the associated class<>(..) invocation must include the pybind11::buffer_protocol() annotation!. Maybe I manually rebuild pybind11 incorrectly in my attempts to get psi4 compiled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273485753:80,error,error,80,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273485753,1,['error'],['error']
Availability,Unexpected error when using basis set aug-cc-pv5z for He-NH3 interaction.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/issues/2989,1,['error'],['error']
Availability,Unexpected error when using basis_guess with basis set,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/484:11,error,error,11,https://psicode.org,https://github.com/psi4/psi4/issues/484,1,['error'],['error']
Availability,"Unfortunately, historically the reliability of the libxc testing hasn't been very good, the main reason being that the main developers aren't quantum chemists and haven't had access to a Gaussian basis program. Because most functionals have been trained with a Gaussian basis set, reference values are usually given. Unfortunately, very few paper actually give raw datapoints, and running e.g. G2 atomization energies to validate a single functional might not really make sense....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1266#issuecomment-425099115:32,reliab,reliability,32,https://psicode.org,https://github.com/psi4/psi4/issues/1266#issuecomment-425099115,1,['reliab'],['reliability']
Availability,"Unfortunately, that causes a crash. The `transqt2` starts but fails:. ```; Program received signal SIGSEGV, Segmentation fault.; 0x00000000012fd9df in psi::transqt2::get_moinfo (options=...) at /home/ward/tmp/psi4release/src/bin/transqt2/get_moinfo.cc:114; 114 moinfo.frdocc[h] = Process::environment.wavefunction()->frzcpi()[h];; ```. Seems like some things are not properly initialized when bypassing scf?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/102#issuecomment-107072636:121,fault,fault,121,https://psicode.org,https://github.com/psi4/psi4/issues/102#issuecomment-107072636,1,['fault'],['fault']
