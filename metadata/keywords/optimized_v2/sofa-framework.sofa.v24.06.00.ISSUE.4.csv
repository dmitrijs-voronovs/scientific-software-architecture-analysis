quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,Fix cuda compilation with new index types. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1551:142,message,message,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1551,1,['message'],['message']
Integrability,Fix cuda include compilation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1550:129,message,message,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1550,1,['message'],['message']
Integrability,Fix errors introduced in #1279 which I merged too quickly. Additional fixes:; - fix order warning; - fix unused warning; - fix hidden overload in clang; - fix two scenes of SOFA; - remove crashing (but working) scene due to use of shaders. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1289:339,message,message,339,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1289,1,['message'],['message']
Integrability,Fix following discussion on issue #871. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/924:139,message,message,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/924,1,['message'],['message']
Integrability,"Fix from @hugtalbot in #900 . Changes :; - decrease the damping,; - set a total mass to the rigid tori; - decrease the time step. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/987:229,message,message,229,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/987,1,['message'],['message']
Integrability,Fix gtest integration [WIP],MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/601:10,integrat,integration,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/601,1,['integrat'],['integration']
Integrability,Fix in DefaultCollisionGroupManager::createGroups the wrong search of deformable object nodes in collision group nodes already created. . The search was always failing and a new collision group was always created and added in the scene graph. This PR is supposed to explain the wrong behavior issue #994. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1060:404,message,message,404,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1060,1,['message'],['message']
Integrability,"Fix issue #7 . Summary: drawQuad needed a call to glBegin(GL_QUADS) to draw a quad, defeating the purpose to avoid to use explicitly OpenGL API. Same problem with drawTriangle and drawPoint,; I suppose that these functions, at the beginning, was just needed to factorize OpenGL code (but still you needed to use OpenGL with it). ; Now that we remove the explicit calls, those functions should not be accessible outside.; But a few code in Sofa (and maybe plugins?) are using those calls to draw one primitive. Finally, what have been done:; - remove public visibility to those functions and rename it to internalDrawXXXX (where XXXX is point, triangle, quad); - keep the old calls to keep compatibility; - add addLine to keep consistency with the other primitives. I am wondering if in the future (or just right now), the drawXXX (drawing ONE primitive) should be removed and force users to use the drawXXXXs with a vector (and oblige user to build a std::vector with ONE primitive. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/293:1082,message,message,1082,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/293,1,['message'],['message']
Integrability,Fix issue #749; https://github.com/sofa-framework/sofa/issues/749. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1020:166,message,message,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1020,1,['message'],['message']
Integrability,"Fix mess in *Config.cmake.in and some dependencies from modularization. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1570:38,depend,dependencies,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1570,1,['depend'],['dependencies']
Integrability,"Fix regression (appeared when boost was supposed to be removed from Sofa).; -> Plugins _not able to find Boost automatically_ failed to compile (because it needs boost to compile obviously); ; The problem was coming on Windows mainly, as boost are often installed in the system directories on Unix system. And few changes were added to make boost's CMake part more consistent. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/421:478,message,message,478,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/421,1,['message'],['message']
Integrability,Fix some the last SOFA-related warnings in option:. - fix hidden overload; - remove unused iterator; - Fix size_t int comparison; - add overrides; - fix CUDA collision models; - add override on getTemplateName function . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1316:320,message,message,320,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1316,1,['message'],['message']
Integrability,Fix tests further to #1323 . - SofaExporter_test was expecting to export Hexa while option computeHexa was false in RGrid; - RegularGridTopology_test was expecting the wrong number of edges since the computation is now under the condition whether the triangles are used or not to compute the edges. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1335:398,message,message,398,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1335,1,['message'],['message']
Integrability,Fix the example scenes and fix #926 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1355:137,message,message,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1355,1,['message'],['message']
Integrability,Fix the failing test in; - MeshROI_test ; - PluginManager_test; - in TestMessageHandler remove un-used attribute that was causing a compilation warning in clang; - in image_test do some cosmetic cleaning to find why it fails... but in fact the problem should be fixed on the CI by installing convert & gm.exe on the VM. (this is done since this morning); - Improve the tests in FixedConstraint_test.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/279:500,message,message,500,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279,1,['message'],['message']
Integrability,Fix the scene as reported in issue #681. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/716:140,message,message,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/716,1,['message'],['message']
Integrability,"Fix the script, now ready to in service :100: !. Examples:; - warning message, example in [Discussion #4076](https://github.com/sofa-framework/sofa/discussions/4076#discussioncomment-7819845); - soon closed message, example in [Discussion #4188](https://github.com/sofa-framework/sofa/discussions/4188#discussioncomment-7819844). To be discussed at the SOFA dev meeting; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4348:70,message,message,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4348,2,['message'],['message']
Integrability,"Fix two issues, #1148 and #1213 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1217:133,message,message,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1217,1,['message'],['message']
Integrability,Fix warning for ; - SphereCollisionModel ; - RegularGridTopology; - EulerExplicitSolver ; - RungeKutta4Solver . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1279:211,message,message,211,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1279,1,['message'],['message']
Integrability,Fix warnings in Demos/ scenes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1021:130,message,message,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1021,1,['message'],['message']
Integrability,Fix: ; - Dll export + Add config file; - Stop scheduler only if thread has successfully started. Enhancements:; - Add: specific method to handle tool buttons; - Add: send script event when button are used.; - Add: option to not automatically start tool at init but manually start it through a method call. (start at init by default); - Update: m_errorDevice is not anymore a bool but store the HD_DEVICE_ERROR. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/786:510,message,message,510,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/786,1,['message'],['message']
Integrability,Fixed ... a long time ago while working on dependencies.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/246#issuecomment-1499860175:43,depend,dependencies,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/246#issuecomment-1499860175,1,['depend'],['dependencies']
Integrability,Fixed Vertex2Frame (deleted a _return_ which prevented the component to work properly). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/398:187,message,message,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398,1,['message'],['message']
Integrability,"Fixed this error while trying to configure a out-of-tree compilation of a plugin depending on SofaGuiQt. `CMake Error at sofa/install/lib/cmake/SofaGuiQt/SofaGuiQtConfig.cmake:49 (find_package):; Found package configuration file:. sofa/install/plugins/SofaMiscForceField/lib/cmake/SofaMiscForceField/SofaMiscForceFieldConfig.cmake. but it set SofaMiscForceField_FOUND to FALSE so package; ""SofaMiscForceField"" is considered to be NOT FOUND. Reason given by; package:. The following imported targets are referenced, but are missing:; SofaBaseMechanics`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2707:81,depend,depending,81,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2707,1,['depend'],['depending']
Integrability,"FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: fix principal values ordering with input matrix is diagonal + uninitialized value warning; - VisualModelImpl: fix wrong object (triangles) called when adding quads in handleTopologyChange(); - VoxelGridLoader: `std::unique` result was not used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218:2424,message,messages,2424,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218,2,['message'],"['message', 'messages']"
Integrability,FixedConstraint dependency on topology,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/246:16,depend,dependency,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/246,1,['depend'],['dependency']
Integrability,"Fixes #308 with initialization of SparseGridTopology with a mesh. Before, a 1% scaling was automatically applied on the grid bounding an input mesh. Removing the scaling was leading a crash since vertices could be exactly on the boundary surface (surface of the BBox of the mesh).; Now a safety check is done and a final check is done to alert if a vertex is not found. Minor cleans of the msg API are also added. @epernod @fredroy your feedback using your own scenes involving the SparseGrid would be useful. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/670:609,message,message,609,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670,1,['message'],['message']
Integrability,Fixes #33.; Remove deprecated miniBoost dependency. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/273:40,depend,dependency,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/273,2,"['depend', 'message']","['dependency', 'message']"
Integrability,Fixes #464 . Changelog: http://libqglviewer.com/changeLog.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/545:163,message,message,163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/545,1,['message'],['message']
Integrability,Fixes #493 . Every Laparoscopic related code has been removed.; The ImageBMP dependency has been removed and replaced by the FactoryImage stuff. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/499:77,depend,dependency,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/499,2,"['depend', 'message']","['dependency', 'message']"
Integrability,Fixes #561 . This PR does the same work as #564 but using the existing `Utils::getSofaPathPrefix()` function and avoiding heavy macro creation in root CMakelists.; I also removed all the PluginRepository and DataRepository re-inits. Sorry @ErwanDouaille I did not know this function before :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/568:394,message,message,394,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/568,1,['message'],['message']
Integrability,Fixes #717 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/722:112,message,message,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/722,1,['message'],['message']
Integrability,Fixes #992; Old version was just creating an object in the ctor... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1083:166,message,message,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1083,1,['message'],['message']
Integrability,Fixes `error: chosen constructor is explicit in copy-initialization`; see https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/6311/console. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/483:241,message,message,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/483,1,['message'],['message']
Integrability,"Fixes the verbosity introduced in #3053. ; These messages should be associated with the solver object, so that they are only printed if `printLog` is set to true. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3232:49,message,messages,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3232,1,['message'],['messages']
Integrability,Fixing some components linkage on Windows; Needed for ModelOrderReduction plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/910:181,message,message,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/910,1,['message'],['message']
Integrability,"Follow issue #495 , implements the removal. Changelog:; - Remove SOFA_FLOAT specific code everywhere.; - Remove all template instantiation based on double type.; - All types now have strict version eg: Vec3f, Vec3d and well as an un-defined precision one Vec3. This is implemented without #ifdef ; - All the component registred to the ObjectFactory are now only using the un-defined precision version of their template. ; - Add a mechanism to TemplateAlias.cpp so we can print a warning ; - In sofa scenes, both xxtypexxf and xxtypexxd are translated into xxtypexx using the TemplateAlias mechanisme. If the conversion involve a precision change a warning is emitted. ; - Clean a sources by removing commented code.; - Deprecate the use of #include <sofa/defaulttype/Vec3Types.h> and use #include <sofa/defaulttype/VecTypes.h> (because using two files pointing to the same thing is only adding noise). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/853:1001,message,message,1001,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853,1,['message'],['message']
Integrability,"Following #1237 , some error messages were not expected in some unit tests; triggering a FAILED status.; This PR fixes that, and add two more (real) unit tests for RandomPointDistributionInSurface and JoinPoints engines.; Moreover, it fixes also an example of the ExtrudeEngine scene and adds a example scene for RandomPointDistributionInSurface . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1280:29,message,messages,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1280,2,['message'],"['message', 'messages']"
Integrability,"Following #4876 (but not depending on it) this PR proposes to define a gravity-inheritance from the parent node when the data gravity is not set. A test is added but does not work due to SimpleAPI not taking into account data set in nodes.; Currently under investigation (this is why I draft this PR). ---. Suggestion : **TODO after this PR**; - Remove the class Gravity and use one single way to play with gravity : the associated data in the nodes; - Apply the change in all scenes using the Gravity component. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4910:25,depend,depending,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4910,1,['depend'],['depending']
Integrability,Following discussions with @fjourdes in #502 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/518:146,message,message,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518,1,['message'],['message']
Integrability,"Following https://github.com/sofa-framework/sofa/pull/4764 . [ci-depends-on https://github.com/sofa-framework/Regression/pull/66]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4769:65,depend,depends-on,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4769,1,['depend'],['depends-on']
Integrability,Following other components let's apply the updateInternal API to DiagonalMass. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1150:178,message,message,178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1150,1,['message'],['message']
Integrability,Following the ConstantForceField let's apply the updateInternal API to UniformMass. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1149:183,message,message,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1149,1,['message'],['message']
Integrability,"Following the PR #2300 here is a new version of the scene TriangleSurfaceCutting.scn with a texture. See picture in PR #2300. For the Regression program I had to add in the scene:; CImgPlugin as requiredPlugin to be able to use this line:; ```<OglModel name=""Visual"" texcoords=""@../meshLoader.texcoords"" texturename=""textures/colorMap.png"" />```. [ci-depends-on https://github.com/sofa-framework/Regression/pull/19]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2381:351,depend,depends-on,351,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2381,1,['depend'],['depends-on']
Integrability,"Following the issue #183 , this is a proposed solution since the issue is starting to date and is still present on OS X. Don't hesitate to refuse it if you prefer to go with another solution. At least now this fix will be publicly seen by people who wish to get a fast fix for the bug. This is a small change that forces the GUI to use the Qt menu instead of the native one for Mac OS X. This feature is available for other operating system by disabling a new cmake option named ""SOFAGUI_ENABLE_NATIVE_MENU"" (the name matches the other gui related cmake options). This cmake option is true by default on every OSes except Mac OS X (Darwin). . Since I think that many people execute runSofa directly in the build directory instead of a bundled mac application (.app), this should fix the unresponsive menu bug. Note that the menu will be displayed directly onto the GUI instead of the native menus of OS X GUI. Note also that I didn't test this feature on Windows since I don't own a license. It does work well on Gnome shell based linux distro last time I checked. But anyway, the feature is disabled on other OSes than OS X, so it shouldn't change anything for those who use Windows or Linux. If some people could help me by testing this feature on Windows and some Linux desktop environments, that would be great and bullet proofing the feature for people who wish to use the Qt menus even if they are not with OS X.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/366:1519,message,message,1519,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/366,1,['message'],['message']
Integrability,"Following the remarks we got from the SOFA conda package PR on conda-forge (https://github.com/conda-forge/staged-recipes/pull/23085), we have some problems regarding some external libraries that are embedded in SOFA code. ; Here is a try to sum up all of these embedded libraries:; | Lib name | Type | Location in code | License | Status |; | --- | --- | --- | --- | --- |; | difflib | header-only | `extlibs` | MIT | OK |; | json nlohmann | header-only | `extlibs` | MIT ~~**(should be in a separate file)**~~ | OK. Fixed in #4272 |; | stb | header-only | `extlibs` | MIT | OK |; | TinyXML | static | `extlibs` | zlib **(should be in a separate file)** | Externalize tinyxml dependency: #4240 (waiting for merge) |; | miniFlowVR | static | `applications/plugins/SofaDistanceGrid/extlibs` | LGPL (version ?) **(should be in a separate file)** | Not built by default. TODO: plugin to be externalized (#1442 ) |; | newmat | static | `applications/plugins/SofaNewmat/extlibs` | type inconnu | Not built by default. TODO: plugin to be externalized (#1442 ) |; | CImg | header-only | `applications/plugins/CImgPlugin/extlibs` | CeCILL-C / CeCILL | OK |; | csparse | static | `Sofa/Component/LinearSolver/Direct/extlibs` | **no license file** | Plugin to be externalized. WIP : #4258 |; | metis | static | `Sofa/Component/LinearSolver/Direct/extlibs` | Apache v2 | Externalize metis dependency : #4266 (waiting for merge) |; | gtest | shared | `Sofa/framework/Testing/extlibs` | BSD-3-Clause | Externalize ? |; | cxxopts | header-only | `Sofa/GUI/Common (fetched from GitHub)` | MIT | Add to possibility to use external dependency and prevent from fetching: Fixed in #4273 |; | libQGLViewer | shared | `Sofa/GUI/Qt` | GPL | Find or use embedded code (find module being fixed in #4290) |. The actions we should take to make our code compatible for the conda package on conda-forge are:; 1. Fix the missing licenses files (points in bold); 2. Avoid all static libraries. For point 2, we are not concerned by ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4221:677,depend,dependency,677,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4221,1,['depend'],['dependency']
Integrability,"Following the rise of discussions about further using Eigen inside SOFA, this PR aims at standardizing its inclusion in the framework. Right now, SOFA automatically pulls a fixed version of Eigen (3.2). It also install it along with SOFA, which is a big problem when an external program or library tries to compile with both SOFA and another version of Eigen. . This PR removes the automatic pull of Eigen, and instead rely on the standard find_package(Eigen3) which is available in almost all distributions via the system package manager (apt, dnf, pacman, etc), for instance:. <table>; <tr><td>Debian 9</td><td>Eigen 3.3.2</td></tr>; <tr><td>Debian 10</td><td>Eigen 3.3.7</td></tr>; <tr><td>Ubuntu 18.04</td><td>Eigen 3.3.4</td></tr>; <tr><td>Ubuntu 19.10</td><td>Eigen 3.3.7</td></tr>; <tr><td>Fedora 29</td><td>Eigen 3.3.5</td></tr>; <tr><td>Fedora 30-31</td><td>Eigen 3.3.7</td></tr>; </table>; ; Right now, this PR compiles with all of the previous distributions (I've tested it with Docker by simply installing eigen3-devel and compiling Sofa). ~~However, there is a faulty test with Eigen > 3.2: the **compliant_test** from the Compliant plugin. It seems to come from the Assembly visitor of the plugin, which relies a lot on Eigen to build the system matrices. I'll have a look at it in the next days, but if someone have an idea...~~ ; Found the nasty bug at 53dd4f5 - memcopy is _dangerous_ !. Everything ~~else~~ seems to be fine with recent versions of Eigen. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1281:1574,message,message,1574,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1281,1,['message'],['message']
Integrability,"Following work with @ChristianDuriez at STC6, here is a way to fix the geomagic plugin scenes and recover behavior from before the PR on freeAnimationLoop and lambda function. . Also add:. - a second RigidSkull.scn example to show another way to map the haptic tool.; - A small bool to know if the haptic tool is in contact with an object. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/858:439,message,message,439,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/858,1,['message'],['message']
Integrability,"Follows #2073 and then #2081. PickParticlePerformer has a hard dependency on OBBModel & CapsuleModel to compute where it sets its constraint with the mouse while picking.; So this forces the modules SofaUserInteraction to know those classes before hand. This design is not that good, as it is not possible for someone creating a new CollisionModel (in a plugin, etc) and use the PickParticlePerformer. This PR adds a (static) registration system, similar to the ObjectFactory and co., so if anybody wants to add a new collision model to pick on, it just has to register its model, along a callable (lambda, std::function, etc) on how to get the points on this model.; PickParticlePerformer registers by itself the triangle, sphere and rigidsphere models.; SofaMiscCollision (where OBB&Capsule are) registers the obb and capsule model functions. Fix #1624 ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2084:63,depend,dependency,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2084,1,['depend'],['dependency']
Integrability,"For Regression-Test to be able to test scenes with name like: EulerExplicitSolver-diagonal.scn . Solves error:; ```; [ FATAL ] /data/Softwares/sofa/src/master/extlibs/gtest/include/gtest/internal/gtest-param-util.h:569:: Condition IsValidParamName(param_name) failed. Parameterized test name 'EulerExplicitSolver-diagonal' is invalid, in /data/Softwares/sofa/src/master/applications/projects/Regression/Regression_test/Regression_test.cpp line 224; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1265:553,message,message,553,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1265,1,['message'],['message']
Integrability,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639:204,message,message,204,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639,2,['message'],['message']
Integrability,"For me there is no more color, neither gtest's or sofa's. The `Fatal` messages should also be considered as failures by default.; Can you see why it is annoying to copy default behaviors to each test? Now we have to modify every of them rather than only a the default place...; If we let deprecated and warning messages on the side for now, but we want to activate them later, it is the same story.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026:70,message,messages,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026,2,['message'],['messages']
Integrability,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:97,depend,dependency,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404,2,['depend'],['dependency']
Integrability,For those that are curious about the current status on this branch..you can see the inclusion dependencies in:; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_2017_12_18.html. And the same for the current master; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/542:94,depend,dependencies,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/542,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"For whatever reason, MSVC19 does not compile anymore because of streams in fixed_array (maybe an update in the stl code); And after further tries, it is not really possible to just deal with iosfwd.h and the implementation in a cpp file (because of templates). ; Anyway, everything is including iostream so it wont hurt more the compilation time.⏳. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1426:448,message,message,448,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1426,1,['message'],['message']
Integrability,"Force the constraint force to zero or restPosition. As @damienmarchal said, this is a new version of what Christian proposed in PR #1022 the only difference is that Damien propose to change all the for loops (inside the getConstraintViolation function) by one lambda function. And I will complete this PR next weeks by doing this in all constraints component. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1027:461,message,message,461,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1027,1,['message'],['message']
Integrability,"Forward declare a class, so that avcodecs headers are only required when compiling the cpp.; That way, this header can be included even if FFmpeg headers are not in context (which lead to compilation failure). --> Can this change be also backported to 18.06 branch ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/752:367,message,message,367,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/752,1,['message'],['message']
Integrability,"Found out that Eigen3 in Fedora 29 installs a `FindEigen3.cmake` that do not set the imported target **Eigen3::Eigen**, resulting in CMake failure when compiling SOFA or linking against it. ```; $ dnf locates /usr/share/cmake/Modules/FindEigen3.cmake; eigen3-devel-3.3.5-2.fc29.noarch : A lightweight C++ template library for vector and matrix math; Repo : fedora; Matched from:; Filename : /usr/share/cmake/Modules/FindEigen3.cmake; ```. There is also third party software that install their own, such as CGAL:. ```; $ dnf locates /usr/lib64/cmake/CGAL/FindEigen3.cmake; CGAL-devel-4.13-0.2.beta1.fc29.x86_64 : Development files and tools for CGAL applications; Repo : fedora; Matched from:; Filename : /usr/lib64/cmake/CGAL/FindEigen3.cmake; ```. Hence to avoid any of those, it is safer to set the NO_MODULE options to `find_package(Eigen3)` to look for **Eigen3Config.cmake** instead, which always define the imported target. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1348:1029,message,message,1029,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348,1,['message'],['message']
Integrability,"From the forum (https://www.sofa-framework.org/community/forum/topic/still-license-issues-with-sofa-plugins/):. I noticed that there was a pull request targeting license stuff not long ago (v16.12), which is nice, but I still found some delicate license issues, which potentially can cause trouble for users of SOFA and the SOFA-devs. Just from a first look into the plugin folder for all plugins, that do NOT contain the string “LGPL”, I found conflicting license information. I didn’t yet check the “LGPL”-plugins or SOFA in general for potential transitive license issues (conflicting with licenses of third-party dependencies). It’s also hard to make a pull request for this issues as it is something that the SOFA devs have to decide. 1. BulletCollisionDetection; – getModuleLicence() returns “Private”; – text file with information “LICENCE: Private”; – initBulletCollisionDetection.cpp has LGPL 2.1 header; – other source files don’t have a license header; – depends on BulletPhysics, which is licensed under zlib (with exceptions!). 2. ExternalBehaviorModel; – getModuleLicence() returns “???”; – source files have LGPL 2.1 header. 3. Haption; – getModuleLicence() not defined; – text file with information “LICENCE: None”; – source files have LGPL 2.1 header. 4. ManifoldTopologies; – getModuleLicence() returns “?”; – text file with information “LICENCE: ??”. 5. OpenCTMPlugin; – getModuleLicence() returns “Licence ZLIB”; – text file with information “LICENCE: OpenCTM library is an Open source, with a very liberal license (zlib/libpng license).”; – source files have LGPL 2.1 header. 6. Registration; – getModuleLicence() returns “QPL”; – has a file LICENCE.txt (should be LICENSE.txt), which states QPL; – Source files have LGPL 2.1 header. 7. SofaHAPI; – getModuleLicence() returns “GPL”; – text file with information “LICENCE: GPL”; – source files have LGPL 2.1 header. 8. SofaPML; – getModuleLicence() returns empty string; – no text file with license information; – source files have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368:617,depend,dependencies,617,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368,2,['depend'],"['dependencies', 'depends']"
Integrability,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:64,depend,dependencies,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700,4,"['depend', 'message']","['dependencies', 'message']"
Integrability,"From what I understand, you want to grab images from a sofa scene wihtout the GUI and without the QT gui ? If yes, the headlessRecorder might be a good solution. > I know the old GUI is destined to dissapear slowly, but the issue will be the same in sofaqtquick. It would be really interesting to be able to grab a specific opengl context from a widget for instance, or directly from the sofa scene. I don´t know how the current gui works so I can´t help :/; In my opinion. it depends of QT. QGLWidget + QGLFrameBuffer might be the trick. . From your idea, I like the ""component"" design. Be able to grab opengl context from any QWidget doesn´t make sense to me. In this case the only canvas you want is the canvas which display the sofa´s scene",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/600#issuecomment-368613474:477,depend,depends,477,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/600#issuecomment-368613474,1,['depend'],['depends']
Integrability,Further to #1397 fix compilation in :; - Geomagic; - VolumetricRendering. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1428:173,message,message,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1428,1,['message'],['message']
Integrability,Further to #2607 it would be nice to improve the message in topologies when creating topologies.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2636:49,message,message,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2636,1,['message'],['message']
Integrability,Further to PR #1269 warnings were added in the core of SOFA.; This PR fixes these warnings due to deprecated formats and unused variables. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1329:238,message,message,238,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1329,1,['message'],['message']
Integrability,"Further to https://github.com/sofa-framework/sofa/discussions/5030 I thought it would be good to have some regression on RK4. [ci-depends-on https://github.com/sofa-framework/Regression/pull/71]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5036:130,depend,depends-on,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5036,1,['depend'],['depends-on']
Integrability,"GLDouble is defined in SolidTypes. ; I assume this is because of the writeOpenGLMatrix method. . But, such design is wrong because we don't want and shouldn't have a dependency to opengl.; So either we need to really know GLdouble to implement writeOpenGLMatrix... in that case writeOpenGLMatrix; should become a free function moved to some ogl packager which do the proper include to Opengl.h. . Or we don't care so much about GLdouble and in that case we juste use ""double"" instead. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3060:166,depend,dependency,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3060,1,['depend'],['dependency']
Integrability,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:1289,message,message,1289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515,2,['message'],['message']
Integrability,"Glut is a deprecated library and in my opinion, should be not used anymore. (not compatible with newer version of OpenGL, etc); It can be replaced with GLFW to create quick graphical applications. This first PR is moving the SofaGuiGlut to the applications directory, in case any people are still using it.; Actually, the code was not compatible with the current SofaGui API and was not compiling.; The code is now compilable and launchable anyway. Any reference to Glut are removed from the SofaFramework (header, CMake) and from runSofa. Lastly, a replacement using gflw will be pushed in the near future, for people wishing to have a simple GUI without the heavy-duty Qt Framework. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/598:784,message,message,784,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/598,1,['message'],['message']
Integrability,"Good afternoon!; This PR proposes a fix for a crash when loading a vtk file that was generated by Gmsh. `; myNode.createObject('MeshVTKLoader', name='loader', filename='gmshMesh.vtk'); myNode.createObject('TetrahedronSetTopologyContainer', src=""@loader""); `. The mesh generated by default with Gmsh gives a list of edges and triangles that is incomplete and contains only edges and triangles on the boundary of the mesh. However the list of Tetrahedra is complete. This leads to a crash when using a TetrahedronSetTopologyContainer.; This PR tries to address this problem. Cheers!; Olivier. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1008:690,message,message,690,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1008,1,['message'],['message']
Integrability,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:193,depend,dependencies,193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928,2,['depend'],"['depend', 'dependencies']"
Integrability,"Got some crashes on some simulations, when trying to unload them.; Here's the fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1445:182,message,message,182,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1445,1,['message'],['message']
Integrability,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:329,depend,dependency,329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790,2,['depend'],['dependency']
Integrability,"Great contribution, . I fully support any step toward smoother integration of Sofa with Python and this PR is one.; I also like the cleaning & factoring work with stuff like get_base function. . Really minor details: ; In SOFA we have plenty of TODOs forgotten since years that no one is responsible for, without any idea when this was added and when this will be done. To avoid that I suggest replacing things like; ```cpp; // TODO FIXME self is commented; ```; With one with more details; ```cpp; //TODO(mtournier 2017-05-30) Self, is commented there is possibly a problem (if not done in two years, you can remove this comment); ``` ; Or; ```cpp; //DEFECT(mtournier 2017-05-30) Self, is commented there is a problem when...; ``` ; To help general code maintenance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456:63,integrat,integration,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456,1,['integrat'],['integration']
Integrability,"Greetings,. 	I am experiencing a problem with Geomagic plugin. Actually it does work fine on its own, but the problem begins when I add the SofaPython3 plugin. After that, the first 3 angle values (first 3 joints from the base) of the simulation model of geomagic haptic device does not work. However, last 3 passive joints works fine. And in neither case I get an error message.; 	I was wondering if anyone else experience the same problem? Or is there a solution?. 	Also is there any way to use the haptic device with a python code for Sofa. Because our aim is to use geomagic haptic devices as the masters for a soft robot that is simulated via SoftRobots plugin.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3185:371,message,message,371,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3185,1,['message'],['message']
Integrability,Handles here only one type Eigen. Double/Float compatibility depending on SOFA compiling options (adjust with template).; Is there no way to have a more generic way for other Eigen types (like MatrixXf)? @Younesssss ; @jnbrunet @fredroy,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-704803455:61,depend,depending,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-704803455,1,['depend'],['depending']
Integrability,Happened after migration to Let's Encrypt SSL certificate on sofa-framework.org. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/236:180,message,message,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/236,1,['message'],['message']
Integrability,Haptic scenes behavior has been changed by PR #1369 ; Modify them to match the old behavior. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1435:192,message,message,192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1435,1,['message'],['message']
Integrability,"Hard coding interaction in core component is not a good software design as it couple the behavior of a component and how it is used in the context of a specific interactive scene. . This PR remove this behavior and warns users. To avoid re-implementing things no one use, it is requested in the deprecation message that user need to report if they miss the feature so so we can restore it but with the proper software design. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4163:307,message,message,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4163,1,['message'],['message']
Integrability,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. https://github.com/sofa-framework/sofa/issues/537. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538:305,message,message,305,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538,1,['message'],['message']
Integrability,Hello @Camille-K and @chhas thanks for very well done and helpfull analysis. . At first sight I would say that this change has nothing to do with the vector3 to vec3 change so it must be removed asap.; I will do that. That says the change is in fact this change was for a separated PR fixing this issue ttps://github.com/sofa-framework/sofa/issues/3384 ; But as the fix was breaking it was not supposed to be integrated that way;,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1339023892:409,integrat,integrated,409,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1339023892,1,['integrat'],['integrated']
Integrability,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:174,integrat,integrate,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705,2,['integrat'],['integrate']
Integrability,"Hello @alxbilger,. Thank for the careful review, I will integrate that if the feature is considered worth for inclusion. . About the ""addTargetName"" question. . The initial version proposed was using automatic registration of the target name and I can revert back to this one. ; But I proposed a second, explicit, approach for two reasons:; - the automatic mecanism force the deployement of the new approach for all the sofa code components at once... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder i",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:56,integrat,integrate,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615,2,['integrat'],['integrate']
Integrability,"Hello @alxbilger,. Thanks for the PR, removing that ""verbose"" looks fine to. ; As a deprecation worklfow I recommand:; - deprecate the data field (as done in the PR); - updates all call points that are using d_verbose: either replace them with msg_info or remove the message depending on the situation ? ; - in the parse method () (or init() method), detect that the verbose argument is used and print a deprecation indicating to the user that the field is either removed or replace by ""printLog"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1556707923:267,message,message,267,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1556707923,2,"['depend', 'message']","['depending', 'message']"
Integrability,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:131,message,message,131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951,2,['message'],['message']
Integrability,"Hello @flm8620 . It is very interesting, I didn't even knew that stuff in a pair of "" "" could cause compilation problem. ; I'm also surprised that our Continuous integration system is compiling sofa with VS2015 but didn't reported a problem. Maybe something related with the language you use on your system ? . Anyway, thank you very much for your report. If you have time maybe you can submit a pull-request to fix that otherwise I will do it. . Regards,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/323#issuecomment-313322372:162,integrat,integration,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323#issuecomment-313322372,1,['integrat'],['integration']
Integrability,Hello @fredroy . Thanks for the review.; Removing glew everywhere is in PR #1071 ; I will add right now two deprecation message for the two data field that have been removed. [DONE]. If you agree can you pass it to ready & merge ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392999:120,message,message,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392999,1,['message'],['message']
Integrability,"Hello @jnbrunet ; Thanks a lot of the PR. Lot of interesting things. ; Few comments:; - one that repeat a lot about error/exception's message. ; - the other is about wether SofaPython is the proper place to put Simulation and GUIManager's manager binding. My feeling is that we should have second module like SofaApplication/SofaRuntimewhich exposes those, application specific bindings. . Please tell us your opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745:134,message,message,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745,1,['message'],['message']
Integrability,"Hello @sofa-framework/reviewers . Yes, we are taking SOFA-NG project up again :tada: ; Thanks to @fredroy we now have at least 1 engineer working on this project every day :+1:; This issue is meant to be the main follow-up of the project, complementary to #543 (still a good read). ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the modules we want; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users; - cleaning the applications/plugins repository. ## Tasks. Here are the main steps of the project.; Tasks NG1 and NG2 can be done in parallel if we work ""bottom->top"" in NG1 and ""top->bottom"" in NG2.; Task NG3 can also be started in parallel. We need to iterate on the architecture proposal to refine it as much as possible before steps NG1 and NG2 are over.; Task NG4 cleaning the applications/plugins repository in order to better handle code lifecycle. ### NG1: Simplify headers dependency graph by removing un-needed includes. 1. SofaKernel; - clean/rewrite/reorganize SofaHelper and SofaDefaulttype #1521 ; - remove completely useless files. <img src=""https://user-images.githubusercontent.com/11028016/106575747-b3910180-653c-11eb-8f43-6ec65390ce2f.png"" width=""350"" > &nbsp; <img src=""https://user-images.githubusercontent.com/11028016/106575725-ae33b700-653c-11eb-89e3-4bdeae912a94.png"" width=""350"" >. 2. Other modules (SofaGeneral, etc); - clean deps (useless includes, use lower level objects, etc), linked with the following NG2 actually. SOFA modules dependency (library link) graph: https://www.sofa-framework.org/graph/. *clang tools?*; *include-what-you-need?*. ### NG2: Pluginize all SOFA modules; Pluginizing a module = making it a [CMake Package](https://cmake.org/cmake/help/latest/manual/cmake-pac",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1527:498,depend,dependencies,498,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527,1,['depend'],['dependencies']
Integrability,"Hello Bruno,. Functional programming is very standard and part of the language:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value);",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:217,rout,routines,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819,2,['rout'],['routines']
Integrability,"Hello Damien, and thanks for your feedback. Let met address your points one by one:. ## Invasiveness. That depends on the use cases for `Data` embedded in a component. From the code in `Base.h`, it seems that components essentially should be able to:; - Enumerate all its `Data`; - Associate a name to a `Data`; - Adding/removing `Data`. Assuming it's all there is to `Data` management in a component, then the following changes could enable opt-in, class-based data management when needed:; 1. Make all the associated methods virtual: `Base::findData, Base::addData, Base::removeData, Base::getDataFields`, possibly changing return type in the case of `Base::getDataFields` from `const VecData&` to `VecData`. In the latter case it would probably be even better to change the iteration strategy altogether, for instance by using:; ; ``` c++; virtual void Base::getDataFields(VecData& out) const = 0;; ```; ; ...to leave allocation to the caller. Grepping `getDataFields` on the whole SOFA codebase yields around 10 hits (python bindings, generateDoc, GUI and modeler, solver merger) so it should be manageable.; 2. Provide a protected `BaseData` constructor that does not initialize links/owner datas. Obviously we do not want to silently break existing code, so this behavior should be opt-in, for instance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:107,depend,depends,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923,2,['depend'],['depends']
Integrability,Hello Erwan & @guparan . Was zmq installed on the CI ? ; I installed it on centos3 and ubuntu but not on macos & windows. ; It seems there is also a dependency on liboscpack that also needs to be installed Am I wrong ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307:149,depend,dependency,149,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307,1,['depend'],['dependency']
Integrability,"Hello Eulalie,. - `isRequired()` should be true by default [OK]; - `hasDefaultValue()` should be true by default as well [OK]; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false ; To me this is independant; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that... ; Same here, the two things are separated I don't see why we should couple them. . - in BaseObject::init() print a warning/error message...; I was more thinking for `if (data->isRequired() && !(data->hasDefaultValue() || data->isSet()) )`; So the message prints if the field is required (i.e not optional) and there is neither a default value nor a user provided data. . - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; actually in my tests I tried with a ""light gray text"" showing something like: ""<optional, type to set>""; ; I think one PR could be done to implement the described behavior in Data.h including tests for then ; then a second one update the runSofa widgets so they can take profit of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475:482,message,message,482,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475,2,['message'],['message']
Integrability,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:771,depend,dependencies,771,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552,4,['depend'],"['dependencies', 'dependency']"
Integrability,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:124,depend,dependency,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814,12,"['depend', 'integrat']","['dependency', 'integrate']"
Integrability,"Hello Guillaume,. Maybe we should use PUBLIC/PRIVATE/INTERFACE keyword in the target_link_libraries, target_compiler_definition, target_include_directory to control how the parameters are exposed. . More specifically, in CImgPlugin/CMakeLists.txt I think we should replace; ```; set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""${CIMG_CFLAGS} -DSOFA_BUILD_CIMGPLUGIN""); ```; by ; ```; target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_CIMGPLUGIN""); ```. By doing this we can totally remove the CImgPlugins_CFLAGS and only do:; ```; find_package(CImgPlugin REQUIRED); target_link_libraries(MyLib CImgPlugin); ```; The target_link_libraries will handle the dependencies of the public part of the included package in the right way and transitively. . All that is new to me so if you try and if this work please confirm.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323:53,INTERFACE,INTERFACE,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323,2,"['INTERFACE', 'depend']","['INTERFACE', 'dependencies']"
Integrability,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:127,interface,interface,127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041,4,"['interface', 'message']","['interface', 'message']"
Integrability,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:216,depend,dependency,216,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498,2,['depend'],['dependency']
Integrability,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:1897,Message,MessageDispatcher,1897,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333,1,['Message'],['MessageDispatcher']
Integrability,"Hello all,. This PR adds (hopefully) proper GIL handling to `SofaPython`, so that it is possible to run python threads concurrently with the main Sofa program. It enables the following scene to run concurrently with the main program: . ```python; def createScene(node):. from threading import Thread; import time; ; def target():; while True:; time.sleep(1); print(""it's aliiive!""); ; thread = Thread(target = target); thread.daemon = True; thread.start(). time.sleep(2); ```. This is achieved through the RAII class `PythonEnvironment::gil`, which is meant to protect the boundaries between c++ and python code as follows:. ```c++; // some function called from the c++ side; {; PythonEnvironment::gil lock;; // safely call python functions here: the GIL ; // is acquired and released automatically; }; ```. The trick is that the GIL should also be released prior to the first lock so that the last object to unlock the GIL gives an opportunity to python threads to run, if any. Otherwise, the main thread still holds the GIL after the last lock is destroyed, and python threads never get to run. This is a work in progress, but should be pretty harmless and easy to disable if something goes wrong. EDIT: it does not work on this branch :-/; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/326:1339,message,message,1339,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326,1,['message'],['message']
Integrability,"Hello all,. This PR somewhat simplifies the creation and handling of `PythonScriptControllers` from python scenes. Here's the TL;DR version:. ```python; import Sofa ; class Script(Sofa.PythonScriptController): pass. def createScene(node):; # now you can do; script = Script(node, 'bar', egg = 'spam'). # the old behavior still works:; old = node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```. Now for the details:. ## Existing approach; The current approach is to use ; ```python; node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```; which has several drawbacks:; - The returned object does not point to the control object, but to the component wrapper. This makes it complicated to pass data around at scene creation (people generally resort to `global` variables for this purpose).; - If `filename` is non-empty, the corresponding file is (re)loaded, causing all sorts of *interesting* side-effects. If you ever had to struggle with these, you know what I mean.; - If `filename` is empty, the control class has to lie in the `__main__` namespace; - It is quite verbose; - It just feels plain wrong *not* to create python objects directly when called from python. It does have a few advantages though:; - It does not require any `PythonScriptController`-specific code for object creation,; - It enables the creation of `PythonScriptController` instances from XML scenes . ## Current workaround; There is a workaround class `SofaPython.script.Controller` that somewhat fixes some of the issues by implementing `__new__` in a derived Python class, intercepting and returning the control instance and optional initialization arguments, but overall it feels more like a hack. ## This PR. This PR simply provides a clean binding for instance creation. You need to provide a node as a first argument, but otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283:714,wrap,wrapper,714,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283,1,['wrap'],['wrapper']
Integrability,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417:150,depend,depends,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417,2,['depend'],"['depend', 'depends']"
Integrability,"Hello everyone,. I'm still not sure I fully understand the problem, but I'll describe it and PR a solution for discussion. When SofaCUDA is required as a dependency in an in-tree build, the CMake configure step is unable to locate `SofaCUDANvccFlags.cmake`. To reproduce the issue you may choose a dummy plugin (eg, [MyAwesomeComponents](https://github.com/sofa-framework/MyAwesomeComponents)), add to `CMakeLists.txt` and `*Config.cmake.in`:; ```; find_package(SofaCUDA REQUIRED); ```; And compile it in-tree.; I haven't tested how this goes in out-of-tree compilation. A really simple fix (PR ready) is to update the installation path SofaCUDANvccFlags.cmake to `build/lib/cmake` where it is surely found.; So in `SofaCUDA/CMakeLists.txt`:; ```; configure_file(SofaCUDANvccFlags.cmake ${CMAKE_BINARY_DIR}/lib/cmake/SofaCUDANvccFlags.cmake COPYONLY); ```. I understand though cmake config files should be placed and found on `build/cmake` and I do not know why it does not happen. Every insight will be much appreciated. Pedro",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2021:154,depend,dependency,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2021,1,['depend'],['dependency']
Integrability,"Hello everyone,. I'm using operations of type `dst_transform *= src_transform` and noticed multiple debug messages on the terminal output:. ```; [INFO] [Transform] SolidTypes<R>::Transform::operator *=; ```. I made a small fix suppressing the line which I'll PR soon.; I'm using a modified version of the latest release v20.12 - but the issue seems to exist as well in master. Please let me know if there's any deeper meaning to this message or anything else to clean up,. Cheers,. Pedro",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1731:106,message,messages,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1731,2,['message'],"['message', 'messages']"
Integrability,"Hello thank you for the feedback,. I'm strongly reluctant to hard code in c++ trivial keyboard controller because there is a lot of boilerplate code and because this also encourage software obesity by having all the application specific's user interfaces in Sofa Core, think about just changing the keypress ""a"" to ""b"" without recompiling sofa. . But I'm ok to implement that in a python controllers, does it would be ok ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587:244,interface,interfaces,244,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587,2,['interface'],['interfaces']
Integrability,"Hello, ; so after a quick look at the class the fix to do is not in MechanicalObject but probably in Quater.inl, when the quaternion is converted from string to quaternion:; ```cpp; /// write to an output stream; inline friend std::ostream& operator << ( std::ostream& out, const Quater& v ); {; out<<v._q[0]<<"" ""<<v._q[1]<<"" ""<<v._q[2]<<"" ""<<v._q[3];; return out;; }; /// read from an input stream; inline friend std::istream& operator >> ( std::istream& in, Quater& v ); {; in>>v._q[0]>>v._q[1]>>v._q[2]>>v._q[3];; return in;; }; ```; This is sloppy code that should be made much more robust regarding the input. Instead of reading directly the value, they should be buffered in double, then passed to a function like; this->setFromRawValue(); ; The checking code and normalization should be in this function. Doing that in Quater.inl has the advantage that all quaternion read from string will always be checked and valided. . The drawback (but this is a general drawback in how we handle error with message instead of using exception is how do we report error messages so that user can fix their scene.)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273:1003,message,message,1003,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273,2,['message'],"['message', 'messages']"
Integrability,"Hello, ; yes sorry I messed up with my git client.; I cherry picked the right modifications, but I integrated many older commits somehow.; I guess we can close this PR, and pull Matthieu's one instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263826376:99,integrat,integrated,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263826376,1,['integrat'],['integrated']
Integrability,"Hello, I copied the 3 instruments on the Beam Adapter plug-in_ collis. The scn xml format is converted to the python format, and then it can be opened normally through SOFA, but it is stuck when you click animate. What is the reason?; import sys; import Sofa. def createScene(rootNode):; rootNode.addObject('RequiredPlugin',; pluginName='BeamAdapter SofaMeshCollision SofaBoundaryCondition SofaConstraint SofaMiscCollision SofaDeformable SofaGeneralLinearSolver SofaImplicitOdeSolver SofaLoader SofaOpenglVisual SofaTopologyMapping'); rootNode.addObject('VisualStyle', displayFlags='showVisualModels showBehaviorModels showCollisionModels hideMappings hideForceFields'). rootNode.addObject('DefaultVisualManagerLoop'); rootNode.addObject('FreeMotionAnimationLoop'). rootNode.addObject('LCPConstraintSolver',mu='0.1',tolerance='1e-10',maxIt='1000',build_lcp='false'); rootNode.addObject('DefaultPipeline', draw='0', depth='6', verbose='1'); rootNode.addObject('BruteForceBroadPhase'); rootNode.addObject('BVHNarrowPhase'); rootNode.addObject('LocalMinDistance',name='localmindistance',alarmDistance='2',contactDistance='1',angleCone='0.8',coneFactor='0.8'); rootNode.addObject('DefaultContactManager',name='Response',response='FrictionContact'); rootNode.addObject('DefaultCollisionGroupManager',name='Group'). topoLines_cath = rootNode.addChild('topoLines_cath'); topoLines_cath.addObject('WireRestShape',name='catheterRestShape',template='Rigid3d',printLog='0',length=1000.0, straightLength=600,spireDiameter=4000.0,spireHeight=0.0,densityOfBeams=[40,10],numEdges=200, numEdgesCollis=[40,20],youngModulus=10000 ,youngModulusExtremity=10000); topoLines_cath.addObject('EdgeSetTopologyContainer',name='meshLinesCath'); topoLines_cath.addObject('EdgeSetTopologyModifier', name='Modifier'); topoLines_cath.addObject('EdgeSetGeometryAlgorithms',name='GeomAlgo',template='Rigid3d'); topoLines_cath.addObject('MechanicalObject',template='Rigid3d',name='dofTopo1'). topoLines_guide = rootNode.addChild('topoL",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:46,Adapter,Adapter,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,1,['Adapter'],['Adapter']
Integrability,"Hello, it could also mean that one of CGALPlugin's dll dependencies were not found as well (namely gmp or mpfr).; Add [Where your cgal install is]\auxiliary\gmp\lib to your system PATH.; Or copy paste those dlls alongside CGALPlugin.dll (not recommended)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636457829:55,depend,dependencies,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636457829,1,['depend'],['dependencies']
Integrability,"Hello, thank you for good simulator. I'm using sofa framework with sofapython in python 3.8.19, Ubuntu 20.04.6 LTS and making an environment of catheter in vessel.; I want to make some objects in the simulator which interact with catheter. Therefore, I made a sphere, but it doesn't interact with the catheter.; When the catheter contact with the sphere, it doesn't react, but some notice appears on the prompt. How can I ensure interaction between the catheter and the sphere?. 1. The video when the catheter touches the sphere.; The catheter interacts well with the vessel. https://github.com/sofa-framework/sofa/assets/144453949/d2a36d11-ffee-4ff8-9898-c25817227aad. 2. The message when the catheter touches the sphere.; ```; 184; [WARNING] [LCPConstraintSolver(LCPConstraintSolver)] No convergence in unbuilt nlcp gaussseidel function : error =5.62447e-05 after 1000 iterations; 185; 186; 187; 188; 189; 190; 191; 192; 193; 194; 195; 196; 197; 198; 199; 200; 201; 202; 203; 204; 205; 206; 207; [WARNING] [IntersectorMap] Element Intersector SphereCollisionModel<StdRigidTypes<3u,double>>-LineCollisionModel<StdVectorTypes<Vec<3u,double>,Vec<3u,double>,double>> NOT FOUND within : RayCollisionModel-LineCollisionModel<StdVectorTypes<Vec<3u,double>,Vec<3u,double>,double>> nullptr ; RayCollisionModel-PointCollisionModel<StdVectorTypes<Vec<3u,double>,Vec<3u,double>,double>> nullptr ; RayCollisionModel-SphereCollisionModel<StdRigidTypes<3u,double>> Ray-TSphere<StdRigidTypes<3u,double>> ; RayCollisionModel-SphereCollisionModel<StdVectorTypes<Vec<3u,double>,Vec<3u,double>,double>> Ray-TSphere<StdVectorTypes<Vec<3u,double>,Vec<3u,double>,double>> ; RayCollisionModel-TriangleCollisionModel<StdVectorTypes<Vec<3u,double>,Vec<3u,double>,double>> Ray-TTriangle<StdVectorTypes<Vec<3u,double>,Vec<3u,double>,double>> ; RayCollisionModel-TetrahedronCollisionModel Ray-Tetrahedron ; CubeCollisionModel-CubeCollisionModel Cube-Cube ; LineCollisionModel<StdVectorTypes<Vec<3u,double>,Vec<3u,double>,double>",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4636:677,message,message,677,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4636,1,['message'],['message']
Integrability,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:265,depend,dependent,265,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748,2,"['depend', 'integrat']","['dependent', 'integrations']"
Integrability,"Hello,. I have been trying to run the CGAL Plugin with sofa, my aim is to create a tetrahedral mesh from a surface mesh, and then experiment that for Haptic Rendering within Sofa. I followed the page here: https://www.sofa-framework.org/community/doc/plugins/usual-plugins/cgal-library/. Although it does not tell what version of CGAL to use, or boost as well. Finally, I have been successful to build with the following versions of dependencies.; **Environment:**; Visual Studio 2017 vc 14.1; Sofa Master: commit 9d9100aa1b0acb9363c8ec7c9b5e4b470821bfc1; Boost: 1.71.0; CGAL: CGAL-4.13.2; QT: 5.12.0. ```; INFO] [runSofa] PluginRepository paths = C:/open_prj/sofa/build/mmaster/plugins;C:/open_prj/sofa/build/mmaster/bin/Release; [INFO] [runSofa] DataRepository paths = C:/open_prj/sofa/src/share;C:/open_prj/sofa/src/examples; [INFO] [runSofa] GuiDataRepository paths = C:/open_prj/sofa/src/applications/projects/runSofa/resources;C:/open_prj/sofa/src/applications/sofa/gui/qt/resources; [INFO] [runSofa] Loading automatically plugin list in C:\open_prj\sofa\build\mmaster\applications\projects\runSofa/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaDenseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaNonUniformFem.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402:433,depend,dependencies,433,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402,1,['depend'],['dependencies']
Integrability,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517:280,integrat,integration,280,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517,3,"['integrat', 'message']","['integrated', 'integration', 'message']"
Integrability,"Hello,. I'm a new user of SOFA. I've been trying to compile the stable version under Ubuntu 20. ; I'm using nvidia cuda 11.2 , gcc and g++ (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0; Compilation were done using ninja as recommended in the video. I might missed to install a dependencies. Please find below the error message:. Thanks in advance for your help.; Best,; Valéry. -----------------------------------------. [50/441] Building CXX object modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglAttribute.cpp.o; FAILED: modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglAttribute.cpp.o ; /usr/bin/clang++ -DNDEBUG -DSOFA_BUILD_OPENGL_VISUAL -DSOFA_BUILD_SOFAOPENGLVISUAL -DSofaOpenglVisual_EXPORTS -I/home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src -Iinclude/SofaOpenglVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseVisual/src -Iinclude/SofaBaseVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseTopology/src -Iinclude/SofaBaseTopology -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCommon/.. -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaCore/src -Iinclude/GTest -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCore/src -isystem /home/vozenne/Dev/sofa/src/SofaKernel/extlibs/json -isystem /home/vozenne/Dev/sofa/src/extlibs/gtest/include -isystem /usr/include/eigen3 -Wall -W -Wno-padded -O3 -DNDEBUG -fPIC -DFRAMEWORK_TEST_RESOURCES_DIR=\""/home/vozenne/Dev/sofa/src/SofaKernel/SofaFramework/resources/tests\"" -pthread -DGTEST_LINKED_AS_SHARED_LIBRAR",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1864:268,depend,dependencies,268,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"Hello,. PR of a small fix to #1731. I simply removed the debug message which seems to be left behind at the code. It should be compatible to both master branch and the latest release. Please let me know if I should create a PR to master instead. Cheers,. Pedro. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1732:63,message,message,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1732,1,['message'],['message']
Integrability,"Hello,. Since we talked about it during the SofaDev meeting,; Here's our QuickNDirty answer to the make install fail for CImgPlugin.; Of course as-is it is not acceptable or mergeable but it's here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/609:298,message,message,298,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609,1,['message'],['message']
Integrability,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:327,interface,interface,327,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920,2,['interface'],['interface']
Integrability,"Hello,. There seem to be an issue in template recognition when creating mappings involving Rigid3d DoFs. Namely, when creating a BarycentricMapping or a BeamLinearMapping between a mechanical model and a collision model of connected beam elements, I receive the following error messages:. `[ERROR] [InfoComponent(Not created (BarycentricMapping))] Object type BarycentricMapping<Vec3d,Rigid3d> was not created; The object is in the factory but cannot be created.; Requested template: Vec3d,Rigid3d(Vec3d,Rigid3d); Available templates: Vec3d,ExtVec3d, Vec3d,Rigid3d, Vec3d,Vec3d,`; `[ERROR] [SceneLoaderXML] Node initialization failed.`. `[ERROR] [InfoComponent(Not created (BeamLinearMapping))] Object type BeamLinearMapping<Rigid3d,Vec3d> was not created; The object is in the factory but cannot be created.; Requested template: Rigid3d,Vec3d(Rigid3d,Vec3d); Available templates: Rigid3d,ExtVec3d, Rigid3d,Vec3d,`; `[ERROR] [SceneLoaderXML] Node initialization failed.`. The template specialisation in BarycentricMapping.cpp suggests that the component is actually not specialised for <Vec3d,Rigid3d>, which could partly explain the error. Nevertheless the BeamLinearMapping component seems to be specialised for <Rigid3d,Vec3d>. I attached to this issue an example scene file, reproducing the errors. I commented the lines corresponding to the different scenarios mentioned above.; NB: the ""floor2b.obj"" object I use for collisions is directly taken from Sofa sources. [Rigid3d_Mapping.zip](https://github.com/sofa-framework/sofa/files/3127090/Rigid3d_Mapping.zip). NB: the related forum topic is [Beam collision mapping](https://www.sofa-framework.org/community/forum/topic/beam-collision-mapping/); ______________________________________________________. Suggested labels: bug (minor)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1014:278,message,messages,278,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014,1,['message'],['messages']
Integrability,"Hello,; A very small PR to perform a check at the start of the doUpdate function to make sure the rest-position is defined and avoid a crash when it is not the case. This typically happens when calling init() on a boxROI in the SOFA scene without calling init() on the associated mesh loader for example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1031:404,message,message,404,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1031,1,['message'],['message']
Integrability,"Hello,; For the case of Rigid Mechanical Object (thus with position marked by the combination of a Vec3D and a quaternion for rotations), this PR adds a check if the quaternion is of unit 1 and normalizes it, if it is not. ; This PR does not handle the case when the user changes the value of the quaternion in the GUI. Cheerio. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/790:428,message,message,428,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790,1,['message'],['message']
Integrability,"Hello.; I have removed the margins around QLabel that present parameters names to make the size of components smaller.; Anyway, answering to your questions I could mark these issues.; 1. Unfortunately, I am not an expert in Qt. But I guess some rather tricky manipulations with layouts should be done to make the rendering absolutely the same.; 2. On different systems the rendering is different. I have a notebook with DebianStretch and desktop with Ubuntu 16.04 and I can say that Sofa GUI differs. The changes I've made, unfortunately, affect GUI differently. So, I guess it depends also on how QtWidgets are rendered on different platforms. Thus, if rendering structure is critical, may be it is better not to touch it at all. P.S. I have changed my nickname to make it more reasonable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324309298:578,depend,depends,578,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324309298,1,['depend'],['depends']
Integrability,"Hello.; Thank you for your comments, guys. @Younesssss , answering to your questions:. > 1. First the reference (paper where you got this force equation from) of the equation 1. It is a general spring equation. You could find it for example here: Nealen A. et al ""Physically Based Deformable Models in Computer Graphics"" ; https://matthias-research.github.io/pages/publications/egstar2005.pdf or in StiffSpringForceField SOFA component.; A spring force contains two parts: value and direction. Compared with linear spring the value now is computed like a result of polynomial. The computation of direction remains the same. The S (cross-section area) technically has to describe the characteristics of material, but since it depends on sample shape we are trying to simulate, finally we could say that we compute force intensity instead of object force and, thus, have to recompute it based on sample shape and amount of springs we are using for simulation. > 2. In the first image why you have absolute value on the current length (∆l) if this is a length it probably positif rigth?. Yes, the length is always positive. I added absolute value since square root, in general, might also mean negative value. . > 3. Why current length ∆l = (∆x^2 + ∆y^2 +∆z^2 )^(1/2) it looks more like the formula of the displacement right ?. Yes, it is a displacement, but this displacement describes a distance between spring endpoints (actually, p1 - p2), not the displacement between the object and its rest shape. Therefore, I marked these displacements with notation ∆. Spring length is a norm of this distance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-617800918:725,depend,depends,725,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-617800918,1,['depend'],['depends']
Integrability,"Hello @alxbilger,. Thanks for the PR. . I looked at the implementation and I'm not sure the Observer/Observable mechanism is needed.; At current time is seem to be used to notify that, when a mass change, the component using the mass need to be updated. . Tracking component and data changes can already be done using the Directed Dependency Graph (DDG) mechanisms. . When I want a component (B) to track component (A) and detect it changes I connect A.componentState (the observable) by adding B as a DDG output of A.componentState (so B is the obsever). By using the DDG machinery you can have the choice of when the updates is done... when A.componentState is changed or when B is needed ... (thanks the lazy DDG update mechanism). Finally if using the DDG it too heavy, it is also possible to use the DataTracker, this allows to detect data change (eg: A.componentState has changed) when you need to invalidate the cache.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042182871:331,Depend,Dependency,331,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042182871,1,['Depend'],['Dependency']
Integrability,Here are a few tests about following components :; - IndicesFromValues; - MergePoints. They should not disturb any others functionality of SOFA.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/268:245,message,message,245,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/268,1,['message'],['message']
Integrability,Here are all the changes made for v18.12 release.; Mostly CMake and CPack stuff. :warning: Notice the removal of all deprecated components [as planned in Changelog](https://github.com/sofa-framework/sofa/blob/master/CHANGELOG.md#deprecated). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/905:341,message,message,341,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/905,1,['message'],['message']
Integrability,"Here are all the changes that were pushed directly to v20.12 to accelerate its delivery.; Mostly changes in packaging steps (CPack and postinstall scripts) for dependencies and RPATH management. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1804:160,depend,dependencies,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1804,1,['depend'],['dependencies']
Integrability,"Here are the changes I made for v19.06, mostly cleans and fixes. Important changes:; - [[SofaMacros] ADD version to each target properties](https://github.com/sofa-framework/sofa/pull/1114/files#diff-c271701edce37b698b29020065753857) ; - [[CMake] ADD post-install script for Linux](https://github.com/sofa-framework/sofa/pull/1114/files#diff-16510636c780c3f88d6aaeb73dc3a80d). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1114:476,message,message,476,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1114,1,['message'],['message']
Integrability,"Here are the latest changes done directly in v20.06 branch to finalize the release. Main changes:; - [CMake] ADD SOFA_ENABLE_SOFT_DEPS_TO_SOFAPYTHON option (default is ON); When OFF, SofaPython will be added later during CMake generate so that all soft dependencies to SofaPython will be unsatisfied.; This is useful to generate binaries with at least SofaPython dependencies as possible.; - [CMake] FIX postinstall-fixup scripts call order; postinstall-fixup scripts are now in tools/postinstall-fixup and are included after all other parts of SOFA (even external directories); - [SofaMacros] FIX install dir for plugins with no INCLUDE_SOURCE_DIR; There was an issue with installed include directories introduced by #1397 ; - Backport #1428 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1432:253,depend,dependencies,253,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1432,3,"['depend', 'message']","['dependencies', 'message']"
Integrability,"Here is a fix for issue: https://github.com/sofa-framework/sofa/issues/512. # Objectives; - add optional short argument ☑; - add more flexibility. We don't want to edit the main.cpp each time we want to add new arguments ☑; - simplifcation of ArgumentParser. We will use the boost program option ☑. # Changelog. - `ArgumentParser` completely changed. It's now using boost program option. It's better using existing things rather than creating our own implementation and maintain it; - `SceneCreatorBenchmarks.cpp ` use the new ArgumentParser; - `runSofa/Main.cpp` use the new ArgumentParser; - `BaseGUI.h` use the new ArgumentParser, and changed the way we can parse arguments.; - `BatchGUI` use the new ArgumentParser, and add argument registration; - `GUIManager.cpp` changed the api, removed initGUI (useless most of the time); - `gui/Main.cpp` use the new GUIManager function (replace the GUIManager); - `MultithreadGUI` use the new ArgumentParser and GUIManager; - `SimpleGUI` use the new ArgumentParser and GUIManager; - `RealGUI` use the new ArgumentParser and GUIManager. ## API Breaking. - `ArgumentParser` everything changed; - `BaseGUI` use the new ArgumentParser, and changed the way we can parse arguments.; - `GUIManager` changed the api, removed initGUI (useless most of the time). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/513:1396,message,message,1396,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513,1,['message'],['message']
Integrability,Here is a fix for the VideoRecorder broken since #1121 due to change in API and in CMakeLists. - Add findPackagae for ffmpeg since add_definitions does not propagate SOFA_HAVE_FFMPEG_EXEC above the caller project; - Change function initRecorder including both code extension and code name. Here you are @fspadoni ;). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1138:416,message,message,416,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1138,1,['message'],['message']
Integrability,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:555,interface,interface,555,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360,2,['interface'],['interface']
Integrability,"Here is a new plugin which implements a beam force field component with plastic behaviour (to model nonlinear and permanent deformation). The general structure is inspired from the BeamFEMForceField component. At the moment, I kept the new component in a dedicated plugin (BeamPlastic), but I guess it could be moved to where the BeamFEMFF component already is (providing the PR is mergeable). Two pull-requested files (in applications/plugins/BeamPlastic/quadrature) were implemented by someone else and published under the open source Boost Software License 1.0 (BSL-1.0). I mentioned this in both files headers, but I don't know if the BSL-1.0 is compatible with the SOFA license. If not, these files can be removed and I can re-implement the corresponding methods (for reduced gaussian integration). The code compiles on my side, and the two provided example files work fine, but there are quiet a few things that could/should be improved (including unit tests). I have already noted some of them, but as this is my first PR I'm not familiar with how or where these should be discussed.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1618:790,integrat,integration,790,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618,1,['integrat'],['integration']
Integrability,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534:294,protocol,protocol,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534,2,"['message', 'protocol']","['message', 'protocol']"
Integrability,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:610,depend,dependency,610,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598,1,['depend'],['dependency']
Integrability,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:547,depend,depend,547,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792,2,['depend'],['depend']
Integrability,Here is a very simple implementation that enable extra printing to help in understanding why some scenes are failing/crashing. . I also add few scenes with single solvers because those components where not tested anywhere in our CI. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/667:334,message,message,334,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667,1,['message'],['message']
Integrability,Here is an update of PluginExample to clarify how to create a deploy-and-share friendly plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1053:195,message,message,195,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1053,1,['message'],['message']
Integrability,"Here is an update on our efforts to perform an automatic parallelization on Sofa. **Parallelism at the Visitor level :** . **General idea :**; Some visitors execute functions on multiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:349,depend,depending,349,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289,1,['depend'],['depending']
Integrability,"Here is another proposal to fix ExtVec warnings issue. When building with GCC:; - Deprecation warnings were displayed at every #include<sofa/defaulttype/VecTypes.h>; - They are now emitted only when using the ExtVec* typedefs (ExtVec3dTypes, ExtVec3fTypes, ExtVec3Types, ...); - Using directly ExtVectorTypes will not trigger any warning. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1140:438,message,message,438,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1140,1,['message'],['message']
Integrability,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/541:536,message,message,536,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541,1,['message'],['message']
Integrability,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/741:247,Integrat,Integrate,247,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741,3,"['Integrat', 'integrat', 'message']","['Integrate', 'integrate', 'message']"
Integrability,"Here we go as promised:. This PR stores within a SOFA Object (inheriting Base) links to the owners that given object in a vector, that can be accessed by calling getDDGLinkOwners(). Currently, pointers are stored within a vector of const Base*, but we could imagine using a map, that would store the link owners according to a CATEGORY, (ForceField, Mass, MO, Topo...), or having a multimap with the component names..? I don't know, I guess it depends on the use case.; @jnbrunet @epernod that PR is specifically for you, so you probably have a better idea of how you'd like to manipulate that list. let me know what you think!. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1228:444,depend,depends,444,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1228,2,"['depend', 'message']","['depends', 'message']"
Integrability,"Here's a bunch of fixes for the HAPI plugin:. * `config.h` was not generated --> added automatic generation to the cmake and fix the template to use cmake variable replacement. * there is some broken code in CMakeLists, not sure what was used for but it's not even a valid cmake code (broken if clause). For the moment I just commented out, I'm open to advices... * updated the code with recent member renaming in main sofa code (`indice` --> `d_indice`). * fix for `findH3D.cmake` to find the module without relying on non-default installation path (i.e. if you install H3D into a given directory, that is the root path from which `include` and `lib` can be easily found ). * fixes for `findHAPI.cmake` --> using `hapi_ROOT` to easily find the module (instead of relying on the mutual position of HAPI and H3DUtils). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1189:917,message,message,917,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1189,1,['message'],['message']
Integrability,Here's a simpler implementation of sofa::core::DataEngine. This implementation hides the code related to updating datafields and calling cleanDirty() in an attempt to reduce human errors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/760:287,message,message,287,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760,1,['message'],['message']
Integrability,"Hey @JaggerYu928 . For the RequiredPlugin, please see : https://www.sofa-framework.org/community/doc/using-sofa/sofa-ng-migration/; For the other errors, please make sure to carefully read the deprecation / warning messages. If you do not successfully solve them, please list the error output down here; Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1916555314:215,message,messages,215,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1916555314,1,['message'],['messages']
Integrability,Hey @Younesssss only some small last fixes are to bring to your PR in order to compile with options. Just grep all codes depending FixedConstraint to make sure about your PR. You're almost there!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/288#issuecomment-326613658:121,depend,depending,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-326613658,1,['depend'],['depending']
Integrability,"Hey @guparan ,. Sorry for the late response, I'm having a slow week. Yeah I agree with your solution 2, if SofaValidation and SofaNonUniformFem are hard dependencies of core libraries, they becomes almost ""core"" libraries themselves and should be in ""lib"" (""bin"" on Windows). . Will this be in your big cmake refactoring branch (aka #1397)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825:153,depend,dependencies,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825,1,['depend'],['dependencies']
Integrability,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:932,Message,Message,932,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592,1,['Message'],['Message']
Integrability,"Hey @guparan, sorry for the delay. It looks much better now. The only thing that bugs me is, why make the ffmpeg option dependant on compilation checks if only the ffmpeg executable is needed. I would remove completely the compilation checks for ffmpeg, and always show the option in the GUI, with a textbox to specify the ffmpeg path. If no path are specified, check the INI file if it has one, if not then gray-out the options for ffmpeg output. If it is a valid path (checked during runtime), then save that path in the INI file. I think this would make much more sense and would not restrict the user if he have ffmpeg somewhere on his computer that was not found during compilation or if he downloaded a compiled version of Sofa with ffmpeg support but his ffmpeg path doesn't match the one used for compilation. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-547846519:120,depend,dependant,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-547846519,1,['depend'],['dependant']
Integrability,"Hey @hugtalbot , would you mind elaborate a little bit more on this? What was the problem? . We definitely need some doc on those integrating factors...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625124639:130,integrat,integrating,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625124639,1,['integrat'],['integrating']
Integrability,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:303,protocol,protocols,303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533,2,['protocol'],"['protocol', 'protocols']"
Integrability,"Hey @maxime-tournier ,. You bring valuable points here. You are absolutely right, it is not that trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. Ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:659,message,message,659,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525,2,"['Message', 'message']","['MessageDispatcher', 'message']"
Integrability,"Hey I hope I got this one right...:. To me the APIVersion component is used to specify the latest version of SOFA we can guarantee compatibility with. Thus when it is already present in an existing scene, the tag is set explicitely in the scene file.; When creating and saving a scene from a modeler for instance though, an APIVersion should be created, and the level should be the level of the version of SOFA the user is running. By default, an APIVersion without a version number was automatically setting the level to 17.12, which to me makes no sense, because we can't guarantee compatibility with 17.12 on a scene that doesn't have an APIVersion set.; Also, somewhere in SceneCheckAPIChange, a 20.06 was hardcoded in a variable `m_selectedApiLevel`. This PR takes the SOFA_VERSION_STR, set by CMake in <sofa/version.h>, and uses this value to replace the default level value in APIVersion, and the selectedAPILevel in SceneCheckAPIChange. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1473:1044,message,message,1044,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1473,1,['message'],['message']
Integrability,Hey dear reviewers... I'd like you to pay close attention to the `size()` and `size(const DataType & /*data*/)` functions... To me both the documentation in DataTypeInfo.h is incorrect. Depending on your answers correct the doc in DataTypeInfo.h in this PR. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1373:186,Depend,Depending,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1373,2,"['Depend', 'message']","['Depending', 'message']"
Integrability,"Hey guys,. Sorry I took so long to join the party, busy weeks !. To me, a force-**field** intrinsically means a discrete geometrical representation of a domain from a topology (it could even be meshless having the field discretized with point-cloud neighbourhood topologies). To me, a forcefield could even **inherits** the topology class itself! . But then you find components such as **ConstantForcefield** or **LinearForcefield**, which contradicts my previous statement :-( They are however useful when you are computing the nodal forces externally and fill in the values in sofa. Therefore, the solution of @damienmarchal seems good to me, as it does not prevent forcefields without topological fields. It will however restrict the forcefield to one topology link only (which makes sense to me...but we never know). Or you could also add an additional **MultipleTopologicalLink** class in addition to the **TopologicalLink**, or make the **TopologicalLink** handles the ""0 to many"" dependency link. Another solution could be to add this ""0 to many"" data-link directly in the ForceField base class. Forcefields could fill this data in their respective **init** stage in the case the user didn't provide any and make proper checks to validate that the topology objects contains the right type of elements needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316:987,depend,dependency,987,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316,1,['depend'],['dependency']
Integrability,"Hey!. First PR with a POC of Object links that aren't based on SingleLinks. Here, a new template class (with its base class) is introduced: DDGLink.; Just like BaseDatas, DDGLink inherits DDGNode.; A DDGLink thus benefits from the whole dirty flag propagation thingy, and implements the update() function to clean its dirty flag, and update from its inputs.; Just like Datas, a DDGLink also possesses a counter, that is incremented when the link value changes. Just like BaseLinks, and SPtrs, to retrieve the object linked with a DDGLink, you need to call the get() method. The set() method will set the link. When a link is set within a DDGLink, the componentState of the linked object is set as input to that DDGLink. It's up to you to connect your DDGLink to some datas to connect your dependency graph. Contrary to the current link implementation in SOFA, these links, can be very easily manipulated as their base class (BaseDDGLink), or as DDGNodes even. DDGLinks are parsed in Base::parseField just like BaseLinks and BaseDatas, which makes them usable with the BaseObjectDescriptions. (they really mirror the behavior of all other field types.). A very simple test case is present in this PR to show you how it's used. You can reference your links with their pathnames, just like normal datas or links, by calling the getPathName() method. There's not bi-directionality implemented in this PR, (because I didn't have time in the end...) but it's not rocket science:; - all there is to do is add a vector of Base* in Base with helper methods to add, remove retrieve the list of link owners. Then in DDGLink::set(), call the add() method of your link to register`this`. (maybe in another PR...) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scen",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1226:789,depend,dependency,789,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226,1,['depend'],['dependency']
Integrability,"Hey, . Waiting for FOSDEM to start...so let's make a small cleaning PR. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915:173,message,message,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915,1,['message'],['message']
Integrability,"Hey,. In the context of the workgroup SOFA NG, it has been noticed ( @fredroy ) that the MechanicalObject presents dependencies on TopologyData.inl, itself having dependencies to all topologies in SOFA (containers etc.). For SOFA NG, it is intended to provide a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. We already know that the MechanicalObject does depend on GridTopology (see issue #162 ), but this is a new dependency that should also be avoided. Any suggestions?. This could be of interest for @fredroy @epernod @damienmarchal @fjourdes @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242:115,depend,dependencies,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242,5,['depend'],"['depend', 'dependencies', 'dependency']"
Integrability,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:183,message,messages,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464,4,['message'],['messages']
Integrability,"Hi @ScheiklP, sorry to bother you again. I am trying to install sofa from source so that i can use a =>3.9 version of python as you suggested. I'm facing some problems though. when i compile sofa with cmake i get this error ; 'Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.18"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package)'",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1761148804:340,message,message,340,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1761148804,1,['message'],['message']
Integrability,"Hi @WilkGardariki, sorry for the late answer. The dependency packs have been updated.; Thank you for the report !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/295#issuecomment-312637459:50,depend,dependency,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/295#issuecomment-312637459,1,['depend'],['dependency']
Integrability,"Hi @alxbilger . I think that what compiler's developers consider as ""default"" shouldn't have any consequence in our code architecture and thus, I'm 100% convinced it is way better to set the properly the compilation parameters to cope with a default compiler option compare to increase the dependency graph (#include) or code complexity.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3334#issuecomment-1265179521:290,depend,dependency,290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3334#issuecomment-1265179521,1,['depend'],['dependency']
Integrability,"Hi @courtecuisse , thanks for your PR. Concerning the DataCallback, it seems to me that it is a very similar to the DataTrackerFunctor class in SOFA.; Functors would allow you to trigger a call to your component's method, or any other object that you pass to your functor's ctor. You could also assign multiple functors to a single input data, just like you do with the DataCallback::addCallback() method, or assign only one functor, that then uses a vector of std::functions internally, called successively in its operator().; Sure it requires to wrap your callback method in a struct or class, but the cost is not very high IMHO, compared to adding a new Data tracking class in SOFA, where multiple tracking methods already exist, and aren't well known, nor very used by most users, as this PR, or a quick search in SOFA's codebase proves (DataTrackerCallback, DataTracker, DataTrackerDDGNode, DataTrackerEngine, DataTrackerFunctor, DataEngine.......). Maybe a better alternative would be to provide in SOFA a default functor for the DataTrackerFunctor, taking advantage of C++11's `std::function` function (as @damienmarchal mentioned) to store methods & call them in its operator()?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-460209030:548,wrap,wrap,548,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-460209030,1,['wrap'],['wrap']
Integrability,"Hi @damienmarchal ,. So point by point,; - _totalMass is set as readOnly in DiagonalMass while it is not in UniformMass_ : This should be implemented in a uniform way. On my opinion, mass components can (should) be initialized either with a massDensity or a totalMass (so not readOnly).; - _readOnly flag_ : I never really used this flag. But readOnly is not a bad thing, but it should be working !; - _no error message associated to readOnly_ : a warning should indeed be notified; - _totalMass parameter is re-computed in the un-specialized implementation of the reinit function_ sounds ok to me, but indeed, the specialization for rigid/vec should forward to this implementation; - _data f_mass_ : I consider the name of this data pretty bad, it denotes the computed nodal mass. So readOnly can have a sense. What do you mean exactly with ""not tagged in the same way as totalMass"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257833518:412,message,message,412,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257833518,1,['message'],['message']
Integrability,"Hi @damienmarchal ,. Yes, the main idea is to have more control over the simulation. My work will allow to use Sofa as a real python module, in contrast to launching a binary executable that than execute a python script. It's really not a big feature since it only needs a valid entry point in the dynamic library so that python can initialise the module. After that, the wrappers will work the same way as now. The work will then be more around expending the current wrappers to have more control over Sofa's components.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-338945427:372,wrap,wrappers,372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-338945427,2,['wrap'],['wrappers']
Integrability,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:904,interface,interface,904,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780,2,['interface'],['interface']
Integrability,"Hi @fbridault ; Did you give a try to the latest v19.12 ?; If you face any issue, please poke me directly. I want to make sure your integration is working fine.; Best.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-592187497:132,integrat,integration,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-592187497,1,['integrat'],['integration']
Integrability,Hi @fredroy . Several questions: ; - shouldn't we drop the dependency to SceneCreator (as discussed (https://github.com/sofa-framework/sofa/issues/417) ? ; - why not defining the test in Sofa.component.ODESolver.tests in place of Sofa.component.ODESolver_test ? To me this looks more consistant and coherent with our naming scheme as well as having the tests in a child directory of ODESolver. ; - why centralizing the testing.tools which breaks modularity instead of letting them at their right logical location ? ; To me having something like; ```console; SofaDeformable.testing.tools/MassSpringSystemCreation ; ``` ; Is much better than; ```console; Sofa.testing.tools/MassSpringSystemCreation ; ``` ; Because the latter creates a dependency from package SofaDeformable to package Sofa.testing.toos. ; While the First has only a dependency from SofaDeformable to SofaDeformable.testing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040482854:59,depend,dependency,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040482854,3,['depend'],['dependency']
Integrability,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:43,depend,dependency,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882,4,['depend'],['dependency']
Integrability,"Hi @fredroy,. I have an update concerning this issue. I tried compiling SOFA with SofaPython3 in Debug mode and I encountered the issue again.; Firstly, in Visual Studio, I had to add the Python3 libs folder as additional library reference to the python3 related projects. (Otherwise python39.lib was not found). In `PythonEnvironment::Init()`, the line `py::module::import(""SofaRuntime"");` causes the crash. So apparently the import fails. . I think the cause could be that the .pyd files make reference to unreachable dependencies. So I ran Dependencies and did not notice anything wrong :; ![image](https://user-images.githubusercontent.com/24836743/108839575-87195400-75d5-11eb-8438-1cbf28fe8bb2.png). I precise that I installed the Python Debug binairies (so python39_d.dll exists).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337:520,depend,dependencies,520,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337,2,"['Depend', 'depend']","['Dependencies', 'dependencies']"
Integrability,"Hi @hdeling,; Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581:107,integrat,integration,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581,2,['integrat'],['integration']
Integrability,"Hi @hugtalbot,. Thank you for your response. I've reviewed the CMakeLists.txt file in the SofaTearing plugin and noticed that the first two lines are:. find_package(SofaFramework REQUIRED); find_package(SofaGui REQUIRED). However, I couldn't find SofaFramework and SofaGui mentioned in the SOFA-NG transition list you provided. It's possible that I've misunderstood the process for integrating a v21.06 plugin with SOFA v23.06. Could you please clarify this for me or offer further guidance?. Thank you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009:382,integrat,integrating,382,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009,2,['integrat'],['integrating']
Integrability,"Hi @jjcasmar . MultiMapping need both an 'input' and 'output' data attributes pointing to valid mechanical objects. With your example:; `final.addObject(""CPFMapping"", template=""Vec3"", input=""path/to/mo1"", output=""path/to/mo2"" )`. We are working on better diagnostic message for such failed object creation, see #1266 and #1294",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1293#issuecomment-605432979:266,message,message,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1293#issuecomment-605432979,1,['message'],['message']
Integrability,Hi @jnbrunet ; Did you integrate what was done by @courtecuisse in #1549 or is it is still worth having a look at 1549 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-752008983:23,integrat,integrate,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-752008983,1,['integrat'],['integrate']
Integrability,Hi @lakehanne . I have the impression that dependency tracking between plugins with only cmake external repo is hard. . This is why I released a sofa package manager called sofa-spm: https://github.com/SofaDefrost/SPM,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805:43,depend,dependency,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805,1,['depend'],['dependency']
Integrability,"Hi @lujaindong . Thanks for reporting this issue. . As far as I know SofaMiscForceFieldDev not part of Sofa and I bet it is a private plugin that implements the missing component ""RotatioNFinder"" and ""ShapeMatchingForceField"". . Having an example base on private plugin is problematic and we should either provide a different example with only public components or ask the author of RotationFinder & ShapeMatchingForceField to have them publicaly release and have them integrated into Sofa. I think @hugtalbot can say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631:469,integrat,integrated,469,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631,1,['integrat'],['integrated']
Integrability,"Hi @raphaeldeimel,; Thank you for your PR. I just rebased it to remove the empty commit with duplicated message.; [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328519306:104,message,message,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328519306,1,['message'],['message']
Integrability,"Hi @sofa-framework/reviewers,. As you may know, we participate to Google Summer of Code this year. We proposed [3 projects](https://www.sofa-framework.org/community/google-summer-of-code/):; - **SOFA + Pulse**, mentored by @hugtalbot and Kitware: bringing Pulse into SOFA (as a plugin).; - **Emscriptening SOFA**, mentored by @damienmarchal: adapt the core of the SOFA so that it can be compiled with Emscripten allowing SOFA to run in a web browser.; - **Communication plugin**, mentored by @ErwanDouaille: improve the communication plugin (implement new protocols). Google granted us **2 slots** so we have to choose. We have promising candidates for every project so **we need your opinion**. Please **vote for the 2 projects** that you think would fit best. ; - For **SOFA + Pulse**, react with :+1: ; - For **Emscriptening SOFA**, react with :tada: ; - For **Communication plugin**, react with :heart: . Arguments in favor of a project can be ""I need it"", ""It would be very helpful for the community"", ""I think it fits well GSoC type of projects"", ... Do not hesitate to comment/discuss. ; Mentors (@hugtalbot, @damienmarchal, @ErwanDouaille) are also welcome to add a comment to detail a bit more the projects. **We have until Tuesday, April 17th at 16:00 UTC to decide.**. Thanks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/633:556,protocol,protocols,556,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633,1,['protocol'],['protocols']
Integrability,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for June.; Only a few news for this month. ## STC#5; I presented you the evolution of SOFA-NG and the future steps.; You can retrieve the presentation [here](https://drive.google.com/file/d/1ig-VoMDSVVg22YQDdZBP62kUYPF283FZ/view?usp=sharing). ## Modularization; Two SOFA modules have been pluginized by Damien: [SofaSparseSolver and SofaPreconditioner](https://github.com/sofa-framework/sofa/pull/668).; The idea is to make existing modules really modular: can be disabled, clean dependencies.; This work joins NG work but starting from the top - the ""leafs"" - of SOFA. ## NG version of SofaFramework; No notable evolution on this task. Unfortunately my time has been taken on other purposes. _____________________________________________________. Next month will hopefully be way more NG-oriented for me so don't worry, it's still alive!; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059:542,depend,dependencies,542,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059,1,['depend'],['dependencies']
Integrability,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:272,depend,dependencies,272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223,2,['depend'],['dependencies']
Integrability,"Hi @tgaugry ; I think I fixed the issue:; - first, I added a condition checking before resizing constraintReleased; - second, a beginEdit() on d_constraintFactor was actually forcing the d_constraintFactor.isSet() function to return true (since the the beginEdit is considered as ""setting"" the data); Let me know if it suits you, I tested your scene it works with or without specifying the constraintFactor; - third, use of bwdInit() function: when AttachedContraint focuses on subnodes (these might not be initialized yet) and the initialization of AttachedContraint requires MO size info. With the work on Data dependencies bwdInit() should be later removed. Thanks for noticing the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/650#issuecomment-447334444:613,depend,dependencies,613,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650#issuecomment-447334444,1,['depend'],['dependencies']
Integrability,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:261,message,messages,261,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162,11,"['Message', 'message']","['Message', 'message', 'messages']"
Integrability,Hi @untereiner could you point us some examples scenes to run with your integration work ?; Cheers,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400257762:72,integrat,integration,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400257762,1,['integrat'],['integration']
Integrability,"Hi Adrien,. Thank for the PR, and the detailed description. Few comments at first glance:; - are the class Callback & CallbackImpl not equivalent to the std::function and std::bind that are in the c++11 STL ? ; - about the ""if(m_updating)"" in the update function. I think it is there to avoid loops. Does it make sense to add a message warning if this happens ? ; - we don't use #pragma once in SOFA as this is not part of the standard . But I think the decision make sense 10 years ago but as the compiler support is now rather bit maybe we should switch to use it as managing the #include SOFA_SUPPER_LONG_NAME_H..is error prone. @guparan, do you think we can make a script to convert the complete code base for pragma once ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168:328,message,message,328,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168,1,['message'],['message']
Integrability,"Hi Benjamin, . Maybe I'm wrong but it seems to integrate a lot of commit touching a lot of different sofa part (SofaKernel, SofaOpenGL) which does not precisely match the pull-request description. Wouldn't it be better to separate that into several more specific pull-request ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263724660:47,integrat,integrate,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263724660,1,['integrat'],['integrate']
Integrability,"Hi Bruno,. Thanks a lot for this PR that is really needed and made in a nice way. I will have a look if it complex to add a deprecation message in the binding so that when the user is using the ""old"" convention something is printed and replacement string is suggested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/740#issuecomment-409846505:136,message,message,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/740#issuecomment-409846505,1,['message'],['message']
Integrability,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:1060,depend,depend,1060,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574,2,['depend'],['depend']
Integrability,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:527,message,message,527,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657,2,['message'],['message']
Integrability,Hi Damien. Are there certain categories of components that tend to have more dependencies than others?; How much of this mess could be solved by reducing even further the functionalities of SOFA-NG? ; I'd like to help with this issue if I can.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372495482:77,depend,dependencies,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372495482,1,['depend'],['dependencies']
Integrability,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:221,message,message,221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578,4,['message'],"['message', 'messages']"
Integrability,"Hi Erik,. Thanks for reporting this bug. . I looked into BaseContext and found the following:; ```cpp; core::topology::Topology* BaseContext::getTopology() const; core::topology::BaseMeshTopology* BaseContext::getMeshTopology() const; core::topology::BaseMeshTopology* BaseContext::getLocalMeshTopology() const; core::topology::BaseMeshTopology* BaseContext::getActiveMeshTopology() const; ```; All of them only returns the ""first"" topology found which can cause a lot of trouble to users. . I think your suggestion to provide warning message using the scene checker is a good idea unless there is good reasons for ppl to have multiple topologies in the same node (I don't know if this is the case). I can give it a try.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/744#issuecomment-410395436:535,message,message,535,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/744#issuecomment-410395436,1,['message'],['message']
Integrability,"Hi Eulalie, . The template instantiation part (in the .cpp) is not synchronized with the extern template part (in MechanicalMatrixMapper.h). ; But we can update that in a separate PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1703#issuecomment-758491994:67,synchroniz,synchronized,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1703#issuecomment-758491994,1,['synchroniz'],['synchronized']
Integrability,"Hi Francois,; thank you for the feedback. Hopefully for the common good, this non-zero default value will disappear!; I did not know the historical explanation of the ForceField/Mass API. On my opinion, no matter how many scenes will be broken: hidden numerical damping is worse than anything else. Finally about making them clearly time dependent, I don't really see the point but whatever, this can be done in a second stage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855:338,depend,dependent,338,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855,2,['depend'],['dependent']
Integrability,"Hi François . Thanks for reporting. ; As we recently started moving things into plugin, cutting ""un-needed"" dependencies and relaxed the code coupling I'm not surprised this can happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228:108,depend,dependencies,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228,1,['depend'],['dependencies']
Integrability,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:421,depend,dependency,421,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406,3,"['depend', 'message']","['dependencies', 'dependency', 'messages']"
Integrability,"Hi Fred, . The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. ; Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818:58,depend,dependency,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818,4,['depend'],['dependency']
Integrability,"Hi Guillaume,. After a quick look in the mesVTKLoader class you are totally right there is bug theres. This is related to the fact the that the VTKLoader is parsing the ""scale"" argumente using atoi/atof. These functions depends on the LC_LANG/LANG environment variables. . Using 0,001 is not valid but does not generate an error.; We should fix that. As this is code that I'm cleaning on I can probably fix that unless someone else want to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038:220,depend,depends,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038,1,['depend'],['depends']
Integrability,"Hi Hugo,. The incompatibility I was talking about few days ago were because of issimo changes integrated in master.; So I don't think there is a need to wait for merge. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395358419:94,integrat,integrated,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395358419,1,['integrat'],['integrated']
Integrability,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:157,integrat,integration,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246,2,['integrat'],['integration']
Integrability,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:134,message,messages,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290,7,"['Message', 'message']","['Message', 'MessageAsTestFailure', 'messages']"
Integrability,"Hi Mathieu,. Thanks for the tick reporting ;). . FlowVR is currently used in DistanceField.cpp to load .fmesh files. We can probably refine the dependency to FlowVR to allow DistanceField object to work but without the fmesh support. This seems easy and I will try to do that. Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254765592:144,depend,dependency,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254765592,1,['depend'],['dependency']
Integrability,"Hi Maxime . Very glad that you are interest on those question. On our side we are actively working on this kind of things (deprecating, disable components, remove the no-needed includes in .h, remove the code in .h transforming module into plugin,... ). . We also noticed the problem with SceneCreator and I think that your suggestion is nice. So let's do that ;) . If you are willing to do it please tell us so we wait your PR and we don't duplicate your effort. Otherwise we will do it in the next week (if it does not take too much time). . More generally we would like to make a big effort in this direction during the STC's coding-sprint to end in a cleaner Sofa. . Our approach now is to look at the leaves of the include dependency graph to remove the component that are not part of sofaNG and make PR with that. . Maybe we should all synchronize with other SofaNG guys (@fredroy) so that all our efforts can be merged in the easiest possible way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289:728,depend,dependency,728,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289,2,"['depend', 'synchroniz']","['dependency', 'synchronize']"
Integrability,"Hi Thomas,. I made a small PR #371 trying to implement that. As you said a message is send if duplicated names exists.The name checking is done either on the node or on the object lists. The PR also contains basic tests to validate thee behavior. But, as usual, things are a bit more complex in the details...so I have several question.; - do we really want to have a test of linear complexity for each add to the scene graph ? ; To face this issue I have two solution one is to only activate the tests when there is #define WITH_SOFA_DEVTOOLS so that when we are using runSofa to make or debug ""scenes"". Once the scene is done it can be executed with improved performances on a runSofa (or any other scene runner) compiled without the DEVTOOLS enabled. ; The other approach would be to have an implicit extra param to the addChild(..., warnOnDuplicates) ;. - Second issue is that it is unclear to me if we have to check that all the time. Isn't there cases in which we have duplicate name (ie when adding object either with an""undefined"") that are then fixed ""later"". There is a lot of test (in simulation) that are now emitting a warning because of that so I assume the ""old"" behavior usage was quite common. . So guys (@jeremieallard, @thomas-lemaire, @matthieu-nesme, @maxime-tournier , @bcarrez , @fredroy ...) ...what design do we want ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167:75,message,message,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167,1,['message'],['message']
Integrability,"Hi Vlad. We have discussed your PR during the sofa dev meeting. And this is what came out : ; This is of interest but would require an example/context (plugin using it) of use to see how you use it. More over, it still need a lot to do to integrate it in a more standardized way to be more generic regarding the type of element. And finally, and we could help you for this, this feature would need unit tests. This pr is currently set to WIP, waiting for further comment from you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1757148121:239,integrat,integrate,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1757148121,1,['integrat'],['integrate']
Integrability,"Hi all, . BaseLoader was implemented in .h. ; This is bad so I splitted it into BaseLoader.cpp/h ; Then I removed the un-needed includes; Then I updated all the codebase that were missing specific includes. In case your code does not compile... after this PR then you need to add the include you are missing ; (probably fstream or sofa::helper::system::FileRepository) ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/393:470,message,message,470,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/393,1,['message'],['message']
Integrability,"Hi all, . I'm not sure SOFA_SUPPORT_MAPPED_MATRIX is used anymore. ; It is based on defines and there is no way to activate it from CMakeLists.txt. ; I suspect it is connected to some SOFA_DEV repository. Anyhow, as it does not seems used anymore I remove it. In case this is important to you please; contact us so we can find a better design than using ifdef's. . This one is based on stc5 branch (not master). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/819:513,message,message,513,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/819,1,['message'],['message']
Integrability,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:940,Depend,Dependency,940,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336,3,"['Depend', 'depend']","['Dependency', 'dependency']"
Integrability,"Hi all, . Thanks for the PR. . In the past it was consider that draw tools was a rendering abstraction layer to be used for debugging/inspection or GUI helpers. The recommendation was to use drawTools in the Base::visual() overrides. The main ideas was to allow component developpers to have rendering tools without having a dependency to opengl. On its side, OglXXX component in Sofa.GL exists to hold compoennts that, for whatever reason (performance, lack of time), are still implemented using the opengl api. Up to now, the evolution guidelines was something like:; - replace in the complete code base ogl call by drawTools calls into xxx::draw() ; - move every component for which ogl call remains (mostly in xxxx:drawVisual) into the Sofa.GL.XXX. This PR does something else, as it replace opengl calls from Sofa.GL.OglXXX by drawTools's ones. Implementing component rendering using drawTools instead of ogl calls is probably desirable (if there is no performance cost)... but it cannot be in Sofa.GL. . I recommand to create a new component in Sofa.Component.Visual, for the component using drawTools and if needed in Sofa.GL.Component have the ogl version subclassing it (if needed).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481:325,depend,dependency,325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481,2,['depend'],['dependency']
Integrability,"Hi all, . There has been quite a lot of discussion recently about how the to implement update mecanisms. ; There is of course the DataTracker, but we are quite a lot to implement complementary mecanism in our respectives plugins so it may be a good idea to see what can be factorized into SofaCore. To do that it would be nice to have examples / snippets / draft of the different approaches we have tested or in mind so that we can evaluate the code impact and interoperability. @bruno-marques, @hugtalbot, @epernod, @jnbrunet feel free to add your ideas. ______________________________________________________; Dedicated Gitter room : https://gitter.im/sofa-framework/data-update?utm_source=share-link&utm_medium=link&utm_campaign=share-link",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597:461,interoperab,interoperability,461,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597,1,['interoperab'],['interoperability']
Integrability,"Hi all, ; I installed Sofa (v=17.06, with the Sofapython, Compliant, Image and Flexible pluggins) in a conda environment (conda 4.3.30 with python 2.7.11, numpy 1.13.3) on my computer (macOs 10.13.1). The installation apparently worked fine but when I run a python file it crashes while importing numpy.; More specifically, the crash happens as the framework tries to import the first C++-based module of numpy (=multiarray) see joined file below. I checked the dependency paths and they all point toward the /lib repository of the specific conda env in used.; I also tried to recompile numpy locally and the same problem happened... Does anyone has a clue on what's happening with my setup ?; Thx. PS: numpy works fine in the same conda env in ipython; PPS: I did not use cmake-gui for the compilation but the regular cmake. I used the following compilation flags but I might have missed something : . -DSOFAGUI_QGLVIEWER:BOOL=ON ; -DPLUGIN_FLEXIBLE:BOOL=ON ; -DPLUGIN_COMPLIANT:BOOL=ON ; -DPLUGIN_IMAGE:BOOL=ON ; -DPLUGIN_SOFAPYTHON:BOOL=ON ; -DBoost_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libGLEW.dylib ; -DJPEG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DJPEG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libjpeg.dylib ; -DPNG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libpng.dylib ; -DPNG_PNG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DTIFF_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libtiff.dylib ; -DTIFF_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include . ![screen shot 2017-11-27 at 14 58 33](https://us",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531:462,depend,dependency,462,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531,1,['depend'],['dependency']
Integrability,"Hi all, ; after some thinking, would it be possible to have this PR merged for release 19.06. ; Because some of the componets it contains have been tagged as ""to be removed"" ; for 18.12 and are still there and generates a warning each time we use them so having everything in a real plugin for 19.06 seems a better move that these messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583:331,message,messages,331,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583,1,['message'],['messages']
Integrability,"Hi all,. As there was big changes in the Sofa code base (see https://github.com/sofa-framework/sofa/pull/853).; Making these changes were not possible without breaking the API and changing some computation results. Nevertheless we did our best to have the changes done in an as smooth as possible. . Among possible problems:; - your plugin is not compiling anymore with recent version of Sofa (or fail to link). ; - some scenes are not working as they used to. ; - there is a lot of warning/depercation messages when running a scene. . In case you encounter an issue please report it so we can fix that quickly. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/893:503,message,messages,503,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/893,1,['message'],['messages']
Integrability,"Hi all,. At DEFROST we are working on adding new features to SofaVolumetricData & CGAL. . But currently SofaVolumetricData is not a plugin and is poorly organized so we are considering that it may be a good opportunity to clean it and tranform it into several plugins. If you are using it...please join the effort so that the end result match yours need & expectation. . Currently we have done the following:; - move SofaVolumetricData into a plugin named SofaVolumetricData ; - copy DistanceGrid specific elements from SofaVolumetricData into a new plugin named SofaDistanceGrid; - copy ImplicitField specific elements from SofaVolumetricData into a new plugin name SofaImplicitField; - remove *.cpp from SofaVolumetricData and forward the old *.h to the corresponding .h in SofaDistanceGrid & SofaImplicitField. (So that #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/388:1087,message,message,1087,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388,1,['message'],['message']
Integrability,"Hi all,. For the next STC we are planning active coding sprint sessions to boost small tasks and have the pleasure to be working togther. . Feel free to propose any task in the comments!. Current task list (last update 2017-09-29):; - Deprecation: https://github.com/sofa-framework/sofa/issues/426; - Pluginization + SceneCreator dependencies (must be done AFTER deprecation): https://github.com/sofa-framework/sofa/issues/427; - `issofa_*` merges: https://github.com/sofa-framework/sofa/issues/428; - Code cleaning; - Doc. TODO List before the sprint:; - [x] finish to add the set management into the CMakeLists.txt (Damien & Bruno Carrez); - [x] make the list of component to deprecate (Fred, Stéphane, Guillaume); - [x] create a simple example of deprecation with the WashingMachineForceField (Damien); - [x] if needed make a list of ""advices"" we could add to the SceneChecker to warn user on how they can improve their scene (the StaticSolver thing) (Stéphane ?); - ~~add an attribute to BaseObjects to attach component quality info ?~~. Feel free to add whatever I mis-understood or forgot. ; ________________________________________; ping @sofa-framework/reviewers",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413:330,depend,dependencies,330,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413,1,['depend'],['dependencies']
Integrability,"Hi all,. Here is a proposal PR to remove Aspects from the core of Sofa. ; The rational behind this PR is that:; - they are very rarely used, ; - they are often mis-understood by most developpers and thus are mis-used.; - they introduce a lot of noise at the core of our code base for near to zero benefit,. Removing them is in fact easy and should not be breaking as the code actually compile with 1 Aspect...so it should behave exactly the same with or without aspects. @JeremieA, @epernod, @fredroy . EDIT: this topic was discussed in https://github.com/sofa-framework/sofa/issues/1147; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1269:688,message,message,688,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269,1,['message'],['message']
Integrability,"Hi all,. I'm from elementary school doing an internship at DEFROST. ; I was asked to update the serr into msg_error(). ; And I was asked to update the sout into msg_info(). Here is the result of my work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/916:303,message,message,303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916,1,['message'],['message']
Integrability,"Hi all,. This PR is implementing what was discussed in in #362 . CHANGELOG:; - refactor the SceneChecker object for more modularity. Adding new checks should be easier. ; - add a SceneCheckDuplicateName that warns user if the scene contains duplicated names. ; - add the corresponding tests. ; - use the new version in runSofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/392:429,message,message,429,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/392,1,['message'],['message']
Integrability,"Hi all,. When crawling into sofa code I often found line like that:; ```cpp; /** A class that define topological Data general methods; DEPRECATED; */; template < class T = void* >; class BaseTopologyData : public sofa::core::objectmodel::Data <T>; {...}; ```; This kind of comment is problematic as I have no idea what to do and it rise a lot of questions. Each time we want to deprecate something we should make efforts on documenting that properly to manage the changes. ; To me this means at least answering the following questions in the source code & in a github Issue: ; - why the code is deprecated and what is the replacement approach; - when it have been deprecated; - when can we remove deprecated class; - who is supposed to do the update...and if it is not the person that deprecate the code what is the implemented approach to notified calling code they are using deprecated code and that they have to be fixed. A good idea is to use dmsg_deprecated() messages for that. ; - how are we supposed to update thing that make use of the deprecated function; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/272:965,message,messages,965,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/272,1,['message'],['messages']
Integrability,"Hi all,. as earlier, I'm making PR on several 'simple' behavior that I implemented a long time ago but could make user of runSofa happier. Here is one that allows to drag & drop data or scene from the gui into and external text editor to have the data serialized. This feature is very useful if you like editing your scene in runSofa and need to transfer the results into sofa. . As GUI stuff are nicer with image... I will make a small video to show it in use. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/373:563,message,message,563,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/373,1,['message'],['message']
Integrability,"Hi all,. in SphereModel.cpp it is unclear to me why the functions . ``` cpp; Vector3 TSphere<defaulttype::getContactPointByNormal( const Vector3& );; Vector3 TSphere<defaulttype::getContactPointWithSurfacePoint(...);; ```. Are specialized on Vec3fd to return the center only. . Second question is why do the message says that SphereModel only work with a Vec3 while it seems to also accept Rigid3 types. . Anyone can explain ?. Thank,; DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/47:308,message,message,308,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/47,1,['message'],['message']
Integrability,"Hi all,; +1 to Igor and I add @olivier-goury to the discussion as he is very interested by the topic. . 1) Having SparseLDL crashing is a shame (or a joke) that was during since too long. The good news is that the issue was fixed last week in this PR: ; - https://github.com/sofa-framework/sofa/pull/655 (it shouldn't crash that much :)). 2) About the lack of get messages... I discovered there is a #define MULTIMATRIX_VERBOSE that can be changed and this is actually really helpfull to get a minimal amount of understanding of what is happening. https://github.com/sofa-framework/sofa/pull/660/commits/90f413eb2b79ba45fbc742e9777691203ca33886. Now having to change a #define in some obscure .h file is also a shame so as a first step we should replace this #define with a real variable that users can activate/deactivate at run time (without recompiling). This is easy to do. . 3) At Defrost those aspects are under heavy investigation and we are probably willing to help anyone that comes with a road map to improve the situation. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702:364,message,messages,364,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702,1,['message'],['messages']
Integrability,"Hi damien,; I was looking at the DigaongalMass and I saw you already committed the change about the init(). Thanks !. A general initialization process based on either mass or totalMass should still be implemented.; However, the DiagonalMass is not the most important mass to consider, the MeshMatrixMass is instead. Remaining (but a bit wider topics) : readOnly flags and readOnly messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268264030:381,message,messages,381,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268264030,1,['message'],['messages']
Integrability,"Hi erik,. You are totally right, . As far as i know there is no well defined error management pattern on sofa. Without using exceptions or changing function signature my current approch is, for each detected error, to emit an error messages with the msg_error() macro and set the componentState to invalid. Then in each function that needs a valid object...check it and exit if it is not.; Not perfect and rather invasive but at least the component does not crash sofa anymore.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067:232,message,messages,232,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067,1,['message'],['messages']
Integrability,"Hi everybody, ; a couple of days ago I had this error : **TypeError: bad argument type for built-in operation**, referring to this line of code:; _tool.createObject('LinearMotionStateController', indices='0 1 2 3 4 5 6 7 8', keyTimes='0.0 200.0', keyDisplacements='0 0 0 0.0 0.04 0')_. Eventually, I found out that the plugin with the _LinearMotionStateController_ component was missing.; I think that a different error message would have been more helpful. Thank you everybody. Have a nice day.; Raffa. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/333:420,message,message,420,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333,1,['message'],['message']
Integrability,"Hi everybody, I'm trying to work on this PR, but I'm quite busy with my PhD in this moment and I don't think I will be able to finish it within a short delay.; As suggested by Francois, I added the error message in Quater_test.cpp.; Now is failing, as with the old-code (without my commit) NaN values may appear. ; In Quater.inl (function toEulerVector) I went back to the old code commenting the modifications I made with my commit. This way, if someone else takes the hands on this PR, he will better know what to do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-346567483:204,message,message,204,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-346567483,1,['message'],['message']
Integrability,"Hi everyone!; I'm trying to develop a nodule detection exercise on SOFA v22.12. To do this I made a patch of skin: the behavior model is a box with a tetrahedral internal structure, the collision model is generated by making a topological mapping from those tetrahedra to triangles, and finally the visual model is defined as an identity mapping from the collision model. I want to create a sphere inside with a different stiffness's value so that a surgeon can feel the harder sphere inside the skin. The problem is that, although I feel the haptic feedback of both the skin and the sphere, it is very difficult to perceive the transition from the skin to the sphere, and it is impossible to perceive the size of the sphere. What can I do? Is there a way to manage the interface between two objects with different properties?. Thank you for your report.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4318:770,interface,interface,770,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4318,1,['interface'],['interface']
Integrability,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:147,depend,depend,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277,2,['depend'],['depend']
Integrability,"Hi guys,. Actually I think this PR should not be merged in this state. It is a proof of concept to show the possibilities.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topolo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:467,wrap,wrapper,467,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583,1,['wrap'],['wrapper']
Integrability,"Hi guys,. I coded a component a few months ago that was designed to grab the OpenGL window of Sofa. It was pretty simple, a glReadPixels on the GL_VIEWPORT, and it was working fine.; Today though, I ran a scene that was using this component, and noticed that it isn't only grabbing the sofa scene, but also the whole user interface. I know the old GUI is destined to dissapear slowly, but the issue will be the same in sofaqtquick. It would be really interesting to be able to grab a specific opengl context from a widget for instance, or directly from the sofa scene. I don't think the way I'm doing so is a great idea, and to be honest I don't know what would be a clean way of doing so, especially give how slow a glReadPixels() is... It might be a very similar topic as the Headless recorder from @ErwanDouaille ? Except that I don't want to lose the GUI just to capture images. Any ideas?; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/600:322,interface,interface,322,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/600,1,['interface'],['interface']
Integrability,"Hi guys,. Interesting points indeed.; I wanted to add that topological changes are not of interest of everyone in the community. It actually does not represent the major use case. I therefore think that strong dependencies (to TopologyData for instance) and code optimizations for topological changes only should be avoided. Do you agree?. Today, we often have either one version of a component (supporting or not the topological changes). Would there be a nice design allowing for having the possibility to have the two behaviors for each component ?. Personal reminder: this issue is about the MechanicalObject. I think it can be closed as soon as the dependency of MechanicalObject on TopologyData is removed. We should later continue this discussion in a specific/dedicated thread. Agreed ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703:210,depend,dependencies,210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Hi guys,. This PR is a proof of concept to show an alternative implementation dynamic topologies and meshes using the CGOGN library. If you never heard about, CGOGN is a topological modeling kernel (see https://cgogn.github.io) implementing efficiently combinatorial maps to encode the topology and geometrical informations. . The current implementation is based on implementing new topology into new components. The PR introduce the following components: ; - VolumeTopologyContainer ; - CMTetrahedralCorotationalFEMForceField ; - MapTetrahedronSetTopologyContainer (wrapper that allows to use ""classical"" sofa components). The PR is not supposed to be merged in this state and we welcome any feedback on how to improve and generalize this work. EDIT: I (damien) changed the description of the PR trying to summary the discussion. . EDIT 2: ; Steps to compile:; - checkout the branch with a modularized version from [ (https://github.com/mimesis-inria/sofa/tree/cmtopology_module)](https://github.com/mimesis-inria/sofa/tree/cmtopology_module); - checkout CGoGN in a folder sofa/modules/SofaCombinatorialMaps/cgogn2; Compile and run the examples in sofa/modules/SofaCombinatorialMaps/examples. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700:567,wrap,wrapper,567,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700,2,"['message', 'wrap']","['message', 'wrapper']"
Integrability,"Hi mathieu,. The provided code force a reload of the dependencies *each* time the runFile function is called. . I see two problem with this approach: ; - there is a large 'un-needed' overhead that will be linear with the number of PythonScriptController in the scene as well as in the amount of modules to reload (the depth of import dependency graph). . - there is *possibly* memory problems here. Let's me explain, normally all PythonScriptController are binded to functions that are from the same module set (the groupe of imported modules), this is made possible because python is caching the imported modules. In the PR we flush the module set at each runFile so each PythonScriptController will be binded to its own reloaded (""private"") version of the module. . So for the moment I think that adding a single PythonEnvironment object automatically in a scene with a cleanup function to unload the module will be either conceptually cleaner and more efficient. . EDIT: What do you think about the idea of having the PythonEnvironment as an object in the scene ? I can easily code that but if you don't think it good I don't want to waste time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286119842:53,depend,dependencies,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286119842,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Hi matt, . Can you have a look at my last version...the one that mimic the gtest API. ; It is not solving the point you are addressing but I see good things in this solution as it makes everything looking very consistant and in a test, no one complain there is a lot of EXPECT_ ... so adding few more to check the message behavior looks very fine to me. ; In addition it also report correctly where the problem arise instead of reporting that the problem happens in the base class. . Now about your suggestion... I like it because it is more like saying that everything that is not explicitely allowed is a failure and I really support that. I'm not yet sure how to mix the two things but we will find that ;). PS: have you noticed that if we makes warning a failure by default we will have +30 test failure in the current sofa (which is fine to me because these failures a either showing a problem or a not precise enough test). . EDIT: I may have a drafted mix between the two approach soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167:314,message,message,314,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167,1,['message'],['message']
Integrability,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:535,message,message,535,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008,2,['message'],['message']
Integrability,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:343,message,messages,343,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439,4,['message'],['messages']
Integrability,"Hi thomas,. Maybe the use of 'printLog' in my example was ambiuous sorry... . To me the 'error', 'warning', 'info' specifiers is the message 'type' and the set of types is un-ordred so it cannot be controlled via a single level. ; Eg of valid pattern: ; ```cpp; msg_info_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; msg_info_when( msgInfoVerbosity >= HIGH ) << ""This is printed not so often"";; ``` . Eg of in-valid pattern (should be rejected in the PR :)): ; ```cpp; msg_error_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; ``` . 'msgInfoVerbosity' only control the amount of info messages emitted so is nothing related to ; error/warning. . Instead of level we may also have a 'verbosityMask' to control precisely which message are emitted ; Eg:; ```cpp; msg_info_when( verbosityMask & INFO ) << ""blabha"";; ```; but I think *we shouldn't do that*. About the 'msg_debug'...it is problematic because there is also a different set of macro for developers that are called dmsg_info, dmsg_warning, dmsg_error()...these dmsg_* macros leads to NO-op when compiled in RELEASE. So my thinking is that we should remove the msg_debug macro and use their dmsg_* ones instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429:133,message,message,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429,3,['message'],"['message', 'messages']"
Integrability,"Hi!. OptionsGroup in Sofa are currently created in 2 steps:. - in ctor: every option are created, from strings, usually by calling ""setNames()"". A default value is set, usually to 0 by calling setSelectedItem(0); - during parsing of the scene file: user value is taken into account. This is working great, except in one case:; What if my OptionsGroup is supposed to contain a list of values retrieved from another sofa::Data (let's say a vector of strings..)?; - In the Ctor, the string data is not yet initialized, so setNames cannot be called; - in parse() I don't know about the other data so I cannot retrieve the list of values. This also means that when calling setSelectedItem with the value passed in the scene file, I will get an error message as the entry does not exist ; - at init(), my list of values is set, so I can finally call setNames, but I'll lose my default user value from the scene file. To fix this, I modified the OptionsGroup class to store the user value in readFromString(), and added a public method: setSelectedItemToDefault() that calls setSelectedItem() with that stored user value. This solved the issue, but only for OptionsGroup (any sofa::Data that relies on another data for its initialization will have the problem), and it's maybe not in the cleanest way..; Some would argue that listing the values to feed the OptionsGroup with is a task for SofaPython, before calling CreateObject, but I'd like to have this feature even when using XML scene files. Do you have suggestions on how to solve this problem in a better way, and for all data? Do you think my way is clean enough to be PRed in SOFA?. @damienmarchal, maybe you have good ideas on the topic ? . Looking forward to your feedback,; - Bruno Marques; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/363:745,message,message,745,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363,1,['message'],['message']
Integrability,"Hi!. When building plugins as standalone projects, the SofaFramework package doesn't expose the cmake config options used to build SOFA.; In the SoftRobots plugin (among others), tests are performed to know if SOFA has been built using the required options (such as SOFA_BUILD_METIS, MODULE_SOFASPARSESOLVER, PLUGIN_SOFAPYTHON, SOFA_BUILD_TESTS etc.) and out-of-tree configurations require to re-specify those options, even though they are only defined in the SOFA build. I've modified the SofaFrameworkConfig.cmake.in to expose those options to whoever does a find_package(SofaFramework), although that might not be the smartest way to do it (the list is non exhausive and it would be best if options were added in a smarter way.; I think that modules such as SOFASPARSESOLVER should export the MODULE_SOFASPARSESOLVER themselves for instance, and so should the plugins.; But then there's also a long list of options that would be worth exposing, such as:; - SOFA_BUILD_TESTS; - SOFA_BUILD_METIS; - SOFA_BUILD_TUTORIALS; - SOFA_WITH_DEPRECATED_COMPONENTS; - SOFA_WITH_THREADING; - SOFA_WITH_DEVTOOLS; - SOFA_USE_MASK; - .... And I don't know where those should be exposed.. So I'm looking fwd to your opinion on the question!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/927:1327,message,message,1327,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/927,1,['message'],['message']
Integrability,"Hi, . This PR follows the changes made in BarycentricMapping (i.e use of spatial hashing to find the nearest points instead of an exhaustive search). This new PR:. 1. Handle cases of several grid cells having the same h index. In such case, the distance between two points, that have the same h index, should be computed only if the points are in the same grid cell. This PR add this implementation. Each element is now stored in the hash table with its corresponding grid cell indices. 2. The nearest point, in a shared grid cell, may not be the global nearest point. To improve that, we detect when neighboring cells may contain a better solution, and do the check. These additional computations are still far better than the exhaustive search. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/896:848,message,message,848,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/896,1,['message'],['message']
Integrability,"Hi, ; I'm implementing a code to simulate the needle insertion inside of a solf tissue. I am still at a rough version of the model.; My problem is that when I animate the simulation I get the following warning message form the command window:. > [WARNING] [CGLinearSolver(CGLinearSolver)] den = 0.0, break the iterations. And then the simulation doesn't move anymore.; My code is reported below. `; from turtle import position; from splib3.objectmodel import SofaPrefab; from splib3.numerics import getOrientedBoxFromTransform; import Sofa. def createScene(rootNode):. pluginNameList = [""Sofa.Component.Engine.Select"",; ""Sofa.Component.IO.Mesh"",; ""Sofa.Component.LinearSolver.Direct"",; ""Sofa.Component.Mass"",; ""Sofa.Component.ODESolver.Backward"",; ""Sofa.Component.SolidMechanics.FEM.Elastic"",; ""Sofa.Component.SolidMechanics.Spring"",; ""Sofa.Component.StateContainer"",; ""Sofa.Component.Topology.Container.Dynamic"",; ""Sofa.Component.Visual"",; ""Sofa.Component.Engine.Select"",; ""Sofa.GL.Component.Rendering3D"",; ""Sofa.GUI.Component"",; ""Sofa.Component.Constraint.Projective"",; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ""Sofa.Component.Collision.Response.Contact"",; ""Sofa.Component.Setting"",; ""Sofa.Component.AnimationLoop"",; ""Sofa.Component.Collision.Geometry"",; ""Sofa.Component.Constraint.Lagrangian.Correction"",; ""Sofa.Component.LinearSolver.Iterative"",; ""Sofa.Component.Constraint.Lagrangian.Solver"",; ""Sofa.Component.Topology.Container.Constant""]. rootNode.findData('gravity').value=[0,0,-10];; rootNode.findData('dt').value=0.01; ; # Plugin loading; rootNode.addObject('RequiredPlugin', pluginName=pluginNameList, ; printLog='0'). # Rootnode attributes; rootNode.addObject('FreeMotionAnimationLoop'); rootNode.addObject('DefaultVisualManagerLoop'); rootNode.addObject('GenericConstraintSolver', maxIterations='2000', tolerance='1e-9') ; rootNode.addObject('BackgroundSetting', color='0 0.168627 0.211765'). # Scene settings; confignode = root",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3810:210,message,message,210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3810,1,['message'],['message']
Integrability,"Hi, @Namdhari, ; as @fredroy mentioned, the error message could mean one of the dll used by CGALPlugin.dll is not present. If you are using the compiled version of CGAL, be sure to put the lib directy of CGAL into your env. paths or to copy the dll of CGAL inside the bin directory of SOFA where the CGALPlugin.dll is located. Anyway, if the header verison is working fine I think you can close this issue. thanks,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-637383460:50,message,message,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-637383460,1,['message'],['message']
Integrability,"Hi, @polyakovkrylo! Thank you for your reply. When I run the scene with lindhd.so.3, there were no errors, but there was a warning; `Gtk-Message: 16:20:05.799: GtkDialog mapped without a transient parent. This is discouraged.; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [WARNING] [SceneCheckUsingAlias] This scene is using hard coded aliases. Aliases can be very confusing, use with caution. ; - DefaultContactManager: 1 created with alias ""CollisionResponse"" ; - DefaultPipeline: 1 created with alias ""CollisionPipeline"" ; - EulerImplicitSolver: 1 created with alias ""EulerImplicit""; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; `. I was able to use the ForceDimension SDK examples as normal, and when I run the scene， the device was already connected but couldn't do anything, which confused me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1328008865:137,Message,Message,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1328008865,1,['Message'],['Message']
Integrability,"Hi, I am an university student trying to use sofa for my simulation work. When I try to configure SOFA master with Cmake a ""CMake Deprecation Warning at SofaAdvanced/CMakeLists.txt:15 (message):; SofaAdvanced is deprecated.; You should now explicitely find (find_package) and link (target_link_library) each module you need within: ; SofaNonUniformFem. CMake Deprecation Warning at SofaMisc/CMakeLists.txt:21 (message):; SofaMisc is deprecated.; You should now explicitely find (find_package) and link (target_link_library) each module you need within: ; SofaMiscExtra;SofaMiscEngine;SofaMiscFem;SofaMiscForceField;SofaMiscMapping;SofaMiscSolver;SofaMiscTopology""; warning is appearing. however, without crashing it get configured and generates the files. I have build the system on Visual Studio 2019 and it complies without any errors. However, when loading the RunSofa ""SofaPython"" and ""SofaExporter"" modules are not loading. I tried using the plugin manager and it reports erros that .dll file is not there. but it is there in the bin and could not add to the plugin manager. So my questions are as follows.; (1)I want to know whether do I have to change any configuration to avoid deprecation warning messages?; (2) loading the sofaphython to runSofa application ; My Cmake out put is as follows. Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19041.; Install prefix: C:/SOFA/build/master/install; Adding module SofaGeneralVisual; Adding module SofaGraphComponent; Adding module SofaGeneralMeshCollision; Adding module SofaBoundaryCondition; Adding module SofaGeneralAnimationLoop; Adding module SofaGeneralDeformable; Adding module SofaGeneralEngine; Adding module SofaGeneralExplicitOdeSolver; Adding module SofaGeneralImplicitOdeSolver; Adding module SofaGeneralLinearSolver; Adding module SofaGeneralRigid; Adding module SofaGeneralObjectInteraction; Adding module SofaGeneralSimpleFem; Adding module SofaGeneralTopology; Adding module SofaTopologyMapping; Adding module So",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1623:185,message,message,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1623,2,['message'],['message']
Integrability,"Hi, great work there!. Just to mention that since the python plugin got proper GIL handling, it is also possible to implement communication all on the python side: just start a python thread and do the message dispatch from there using the python package of your choice. From there it's fairly easy to exchange data using a `Queue` between the communication thread and e.g. a script controller (in fact that was the main reason behind implementing GIL handling).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977:202,message,message,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977,1,['message'],['message']
Integrability,"Hi, here is the content:. 1) [SofaKernel] FIX segfault in TetrahedronSetGeometryAlgorithms; The segfault happens when the component is located in a node without; a topology and a mechanical object. Then the 'draw' function is crashing. 2) [SofaKernel] ADD a link to manually set the topology in TetrahedronFEMForceField; The component was searching the topology in the context which was:; - implicit; - constraining the organization of components the scene graph. To solve this I added a SingleLink that allows to specify the topology.; If the link is not set then the existing behavior is used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/973:695,message,message,695,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/973,1,['message'],['message']
Integrability,"Hi, just wanted to add something here, I am now facing with a similar issue related Background setting object, with same error as above(object not in factory). I am using a .py file for scene creation. I can run it using runSofa, but not able to run it with python3 for integrating with gym. You can find the implementation here https://github.com/ScheiklP/sofa_env; the file I am trying to run : https://github.com/ScheiklP/sofa_env/blob/main/sofa_env/scenes/reach/reach_env.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3614#issuecomment-2263809050:270,integrat,integrating,270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3614#issuecomment-2263809050,1,['integrat'],['integrating']
Integrability,"Hi,. As discussed at Journées HPC INRIA in Lille, here is an initial nix package for sofa. It also include a flake (and its lock), which is not mandatory, but ease the use of the package, with commands like; - `nix build`, to compile the package in a sandbox; - `nix develop`, to provide a shell with an environment containing all required dependencies to build the project in the usual CMake way; - `nix run`, to start the software. All these commands take an optional path argument, defaulting to the current working directory, but we could also build / develop / run any commit / tag / branch / fork of the project with eg. `nix build github:sofa-framework/sofa`(for master) or `nix run github:nim65s/sofa/58ae0644d117aea880ed284f6cc0beb7e9802f96`. While here, this also setup some CI for this packaging, mostly to detect early:; - if anything new in the repo would break the nix packaging; - if any update from a dependency in upstream [nixpkgs](https://github.com/NixOS/nixpkgs/) would break sofa. But also, a nix binary cache can be set up with eg. https://www.cachix.org/, so that once a commit is build in CI, users & developers can directly use that cache instead of compiling themselves.; (it is also true in the other way: developers with write access to the cache can send their build result to it so that the CI will be instantaneous cache hit). Here is an example of CI build log: https://github.com/nim65s/sofa/actions/runs/11306279152/job/31446709649. PS: I did not test on macos yet, so this is probably a bit early to expect it work. It at least require darwin signatures I guess, I'll try to test that this week, when I can use an apple system. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059:340,depend,dependencies,340,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Hi,. Could you put your scene example here and the error message you get.; The Geomagic plugin just create SOFA components to be used in the scene graph so there should be no interference with the SofaPython3 mechanism.; But nothing is better than testing! 😄",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1327155580:57,message,message,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1327155580,1,['message'],['message']
Integrability,"Hi,. Here is our 'newtests' contributions for sofa this week. . It is very simple and consists in several new test for components:; - Light, LightManager, LocalMinDistance. One of them is tagged with OpenIssue because it shows a User Interface consistency problem; the ambient term of LightManager is a color but it does not accept string based color name as other sofa component do. To fix this we will need to unify the 'color' in all sofa. ; ; There is also a weird test called AllComponent that checks each sofa components if there is a corresponding example. Currently it fails because only 1/3 of them have one. . Finally Jérémie commited a script to convert the alias in a sofa scene to the real component name.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/69:234,Interface,Interface,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/69,1,['Interface'],['Interface']
Integrability,"Hi,. I found the usage of data alias more annoying than helpful. ; Currently data alias are used to provide backward compatibility with old scenes. The problem is that by doing so it does not indicate to the user that the data field name has changed and that it should change to fix his scenes. The consequence is that we have a lot of old scene that are still using differents name for the same data field. . I would advocate for a more helpful (to the user point of view) approach. This approach consists in saying that the field it is using is now deprecated and provide suggestions to fix his scene. In the following I provide a template of code (taken from the soft-robot plugin) to implement this kind of behavior. . ``` cpp; CableModel<DataTypes>::CableModel(MechanicalState* object); : InverseProblemConstraint<DataTypes>(object); , d_indexDeprecated(initData(&d_indexDeprecated, ""index"",; ""Deprecated, must be replaced by the field name 'indices'"")); , d_indices(initData(&d_indices, ""indices"",; ""List of points connected by the cable (from extremity to actuated point). \n""; ""If no indices are given, default value is 0. \n""; ""In case of multiple indices, one point will be actuated \n""; ""and the others will represent sliding points for the cable."")); {; d_indexDeprecated.setDisplayed(false);; }. template<class DataTypes>; void CableModel<DataTypes>::init(); if(d_indexDeprecated.isSet()) {; msg_warning(this) << ""The field of the Cable component named 'index' is now deprecated. ""; ""To remove this error message, the field 'index' should be replaced by the field 'indices'."" ;; .... depending on whether you want to force the user to fix his scene (so quitting the init with an error) or if you want a transition phase accepting the two field you just have to duplicate the content of d_indexDeprecated into d_indices. ; }; ```. If anyone has an opinion or other approach to the problem it is more than welcome. . D.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35:1518,message,message,1518,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35,2,"['depend', 'message']","['depending', 'message']"
Integrability,"Hi,. I love @sescaida's PythonScriptDataEngine, I find it extremely useful when you don't want to implement a whole component to perform very basic actions. Though I find it cumbersome to have to manually specify the type of the input/output datafields.; While I have no idea (yet) how to fix this for the component's outputs, I implemented a small method to try to derive the input type from the linked value. We could also add scalar types to this method, to be able to handle passing scalar parameters directly from python.; Also, I think it would make more sense to use directly the output of ; ```; datafield->getValueTypeInfo()->name(); ``` ; instead of an arbitrary __char__ when expliciting the datafield type in the PSDE factory. If you have any idea how I could do something similar for output fields, I'm taking any advice :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629:937,message,message,937,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629,1,['message'],['message']
Integrability,"Hi,. I'm working on the different TopologyGrid (cylinder/regular/... PR to come) and during my cleaning I found that some method of the RegularGrid are called directly in the mechanicalObject here:. ```; void MechanicalObject<DataTypes>::reinit(); {; Vector3 p0;; sofa::component::topology::RegularGridTopology *grid;; this->getContext()->get(grid, sofa::core::objectmodel::BaseContext::Local);; if (grid) p0 = grid->getP0();. if (scale.getValue() != Vector3(1.0,1.0,1.0)); {; this->applyScale(scale.getValue()[0],scale.getValue()[1],scale.getValue()[2]);; if (grid) p0 = p0.linearProduct(scale.getValue());; }; ... if (grid); grid->setP0(p0);; }; ```. I find the dependencies a ""bit dirty"". Any idea why this is here? can I move this code in the reinit of the RegularGrid instead. Erik",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/162:664,depend,dependencies,664,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162,1,['depend'],['dependencies']
Integrability,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/395:854,message,message,854,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395,1,['message'],['message']
Integrability,"Hi,. The message is located here: https://github.com/sofa-framework/sofa/blob/b5aefb456472e05579913a806ee88bd171457f7a/Sofa/Component/SolidMechanics/FEM/NonUniform/src/sofa/component/solidmechanics/fem/nonuniform/HexahedronCompositeFEMMapping.h#L105. I don't think that the message is true. @epernod Do you remember why you added this message in https://github.com/sofa-framework/sofa/commit/0170a07db4edefb9d82c3c90ca9aa48e09da4e20#diff-a123e50be73be01f8474ca9ef41fb5da89fecf57c07cde10d88cfb39ec8f0f2a?. This function is called even with a direct solver. [Here](https://github.com/sofa-framework/sofa/blob/43f2e77657a0fd387b6e210a43739d889c5b02f5/Sofa/Component/LinearSystem/src/sofa/component/linearsystem/MatrixProjectionMethod.inl#L294) for example. According to the history of this function in the component HexahedronCompositeFEMMapping, I would say that nobody took the time to implement it. Unfortunately, without this function, the mapping will not be able to map stiffness matrices. In the case of your example, the only contribution of a mapped stiffness matrix would come from the collision. It means that the collision forces don't contribute to the stiffness matrix, i.e. they are considered explicit. The scene may behave correctly even in this case, especially if you don't have collision. If the message bothers you, and if you build SOFA yourself, you can comment it as a temporary solution. Unfortunately, I don't know the components of your scene, so I don't know why it diverges with the liver. You can always try the usual tricks: decrease the time step size, increase the nb of CG iterations, increase the number of elements etc. Does it work with DefaultAnimationLoop? Perhaps the function `applyJT` is important after all?.. Alex",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006090673:9,message,message,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006090673,4,['message'],['message']
Integrability,"Hi,. This PR fix the live coding of python component. I found two problems. . One is a bug in the FileMonitor which prevent to monitor several files located in the same directory but given in a different manner as in: ; ```; ""./examples/Afile.txt""; ""/this/is/absolute/examples/Afile2.txt""; ```. The second problem is a missing PythonEnvironement::gil before calling python code. This PR fix the two. ; @guparan and @hugtalbot Could this PR be treated in fast-path please ? . @maxime-tournier I took me a while to understand that ; ```cpp; PythonEnvironment::gil lock(); ; ```; Is not doing anything useful. The problem is well known but in general it is quickly catched but here, as lock is a RAII, everything compile but just crash when calling python code. I'm quite sure this will happen to a lot of people so I wonder if we can make something more elegant that removing the default constructor and forcing to provide the *trace pointer (possibly nullptr). Any idea ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/414:1072,message,message,1072,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414,1,['message'],['message']
Integrability,"Hi,. seems like the tutorials are kind of destroyed : . - Some images don't appear anymore; - the UI is locked in a too small dimension (ie menus not completely visible) and brings too much orange light (possibly a question of color preferences); - closure of the scene launched in Sofa triggering an error messageBox; - some internal links between pages are broken; etc. maybe it would also be nice to check if all the tutorial scenes still work and are representative of the good usage of Sofa; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/445:307,message,messageBox,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/445,1,['message'],['messageBox']
Integrability,"Hi,. static const int solves the inheritance of enum class, but cannot really ; be used for the purpose of typing a categorical variable. For instance we can have this :. class NumericalIntegrationMethod { public : static const int methodOne=1;};. class NewNumericalIntegrationMethod : public NumericalIntegrationMethod  ; { public : static const int methodTwo=2; };. but the integration method has to be described as :. int method=NumericalIntegrationMethod::methodOne; or int ; method=NewNumericalIntegrationMethod ::methodTwo;. but not as : NumericalIntegrationMethod method; (which would be done ; with enum). Anyway, the use of string instead of enums is also motivated with the ; issue of having descriptive labels in python or xml files. See my previous comments below :. > Right now when specifying the type of numerical integration method in ; > python or xml scripts the user had to use for instance ; > numericalIntegrationMethod=""3"" which is not descriptive at all. It is ; > preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for ; > the maintenance of the code. Hervé. Le 13/03/2019 à 10:16, Guillaume Paran a écrit :; >; > Hi guys, what about replacing the enum by a class containing static ; > int members?; > see https://stackoverflow.com/a/644639; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/936#issuecomment-472340591>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ASgmq8xcftMg8X0iZv9ijlhfWBJGHFwCks5vWMHsgaJpZM4a_sTV>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359:376,integrat,integration,376,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359,2,['integrat'],['integration']
Integrability,"Hi,; ; Here's my fix for issue #1534. The problem was the use of `beginEdit()`, `endEdit()`... I'm not sure what was happening exactly,; but it looked like it was triggering extra callback... - I've replaced all `beginEdit()` with `getWriteOnlyAccessor()` and removed the `endEdit()` when there was any. I'm pretty sure `MeshGmshLoader` is also broken. I was about to fix it, but I came across another problem.; `MeshGmshLoader` uses calls to `addTriangle(...)`, `addEdge(...)`, `addQuad(...)`, etc., which are implemented in `MeshLoader`.; For the moment, `addTriangle` is the only one which has been duplicated to work with data returned by `getWriteOnlyAccessor()`.; I think we all agree that duplication of code should be avoided. I'm not sure what we should do here. Should we generalize the use of `getWriteOnlyAccessor()` in all loaders, and change all `addEdge(...)`, `addQuad(...)`, etc., signature once and for all (no duplication)?; Or should it be fine to use `beginEdit()`, and my fix doesn't solve the real problem? . Fixes #1534; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1554:1144,message,message,1144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554,1,['message'],['message']
Integrability,"Hi,; I suggest you give a look to this repository: https://github.com/InfinyTech3D/SofaUnity; You can also open an issue or a GH discussion on this repository related to SOFA-Unity integration.; Thank you",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4621#issuecomment-2438943844:181,integrat,integration,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4621#issuecomment-2438943844,1,['integrat'],['integration']
Integrability,"Hi,; In one of my scenes, I have once mis spelled 'src' in the line code adding a loader for the mesh of an object's collision model:; `collision.createObject('Mesh', name=""mesh"", scr=""@loader"")`.; As a result, when animating the scene, and at the moment when a collision is detected, Sofa shuts down while no error message is provided in the terminal.; I have attached the code file of a scene that reproduces the error, using the Sphere and the Floor prefabs of stlib.physics.rigid. ```python; from stlib.scene import ContactHeader, MainHeader; from stlib.physics.rigid import Floor; from stlib.solver import DefaultSolver. def createScene(rootNode):. 	MainHeader(rootNode, gravity=[0.0,-9810.0,0.0])	; 	ContactHeader(rootNode, alarmDistance=5, contactDistance=2). 	ball = rootNode.createChild(""Floor""). 	totalMass = 1.0; 	volume = 1.0; 	inertiaMatrix = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]. 	ball.createObject('MechanicalObject', name=""DOF"", template=""Rigid"", translation=[0.0,0.0,0.0], rotation=[0.0,0.0,0.0]); 	ball.createObject('UniformMass', name=""mass"", mass=[totalMass, volume, inertiaMatrix[:]]). 	ball.createObject('UncoupledConstraintCorrection'); 	ball.createObject('EulerImplicit', name='odesolver'); 	ball.createObject('CGLinearSolver', name='Solver'). 	visual = ball.createChild(""Floor Visual""); 	visual.createObject('OglModel', name=""Visual"", fileMesh=""ball.obj"", color=[0.1,0.0,1.0]); 	visual.createObject('RigidMapping'). 	# collision model for the ball. 	collision=ball.createChild(""FloorCollisionModel""); 	collision.createObject('MeshObjLoader', name='loader', filename=""ball.obj"", triangulate=""true""). 	#line code responsible for the crash (scr is mispelled); 	collision.createObject('Mesh', name=""mesh"", scr=""@loader""); 	# by writing src correctly, the scene works well . 	collision.createObject('MechanicalObject'). 	collision.createObject('Triangle'); 	collision.createObject('Line'); 	collision.createObject('Point'). 	collision.createObject('RigidMapping'); 	# end ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/746:316,message,message,316,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746,1,['message'],['message']
Integrability,"Hi,; When adding a MechanicalObject in a subnode of one containing a solver, its positions are taken into account by the solver (addKToMatrix) even if it is not mapped to the MechanicalObject in the solver's node. I am not sure that this makes sense, but if it does, a little warning message seems necessary to avoid spending time (hours in my case, as physics is not my strong suit...) searching for what goes wrong in the scene.; Looking fwd to your input on this topic!; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581:284,message,message,284,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581,1,['message'],['message']
Integrability,"Hi,; with @IPeterlik we noticed not so long ago that the pointers to the velocity, forces and positions of the mechanical object linked to the Monitor were not pointing at the same place before and after the call to init().; To show the issue I made this test scene for the monitor, but now the problem doesn't show up anymore. So it either has been corrected or the problem came from somewhere else. Anyway the test is coded now, so here's a PR for it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312:553,message,message,553,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312,1,['message'],['message']
Integrability,"Homogeneize the API for update.; A layer is added to avoid a direct access to the DataTracjer which is now private:; - in DataTrackerDDGNode: trackInputData, hasInputDataChanged, haveInputsDataChanged, cleanInputTracker; - in BaseObject: trackData, hasDataChanged. The name of the update function is:; - `doUpdate()` for Engines; - `doInternalUpdate()` for components inheriting from BaseObject. Update engines, and tests accordingly. Rename UpdateInternal(DataVisitor) into InternalUpdate(DataVisitor). Remove the DataTrackerFunctor and its test. TODO: update constantFF with new API. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1163:685,message,message,685,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1163,1,['message'],['message']
Integrability,"Hopefully this will fix our CI restart problems. We are now clamping the scene-test warnings file to 5000 warnings max.; If clamping is done, an error is reported in output and in scene-test errors summary. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/559:306,message,message,306,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/559,1,['message'],['message']
Integrability,"How does it break the scenes? In my opinion, it breaks only if you refer to a component that you did not name, relying only on the component class name. I don't think it's a good practice. If you refer to a component, you have to give it a name. But maybe we missed other cases.; Same thing when you rely on a warning message to detect duplicate names. This warning is here only when the user actually provided two equal names. But a user can put two same components in the same Node without naming them and it's a valid situation. In this case, no warning.; I am open to discuss about removing the 0 suffix, because in most cases, the component is the only one in its Node. But I would like to keep the following suffixes (1, 2, 3 etc). Note that removing the 0 would not discourage users to rely on the component class name of an unnamed component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1057829751:318,message,message,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1057829751,1,['message'],['message']
Integrability,How to perceive the interface between two objects with different stiffness,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4318:20,interface,interface,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4318,1,['interface'],['interface']
Integrability,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:398,message,message,398,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351,9,['message'],['message']
Integrability,"I agree with all the points :F and I think we need to have a bit more info about this component...; ; > ; > But it is unclear to me if the implementation proposed in the PR is enough because:; > ; > * having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"",. Did it to get the SOFA_ABSTRACT_CLASS mechanism (for the boiler-late code from Object, and to be able to do ::SPtr). > * using dynamic cast to detect the ""features"" in the ConstraintCorrection, ... (I will reply to this in my next answer to alxb). > * the implementation in BTD also looks highly suspicious with:; > ; > * plenty of ""debug/trace"" mapped to Datas as if the feature was ""not stable"" or only working in some case.; > * a boolean to control if we use the PartialLinearSolver part of the API or if we don't... and I wonder if the actually really work for full & partial solving or only for one of the two APIs. The lack of comments, and the fact that the ""partial_solve"" API seems to come from this class is a bit difficult to follow yeah :p.; As far as I could see, the BTDblabla/LinearSolverCC is only used for the beam-related stuff.; All in all, I guess we need more information about it @ChristianDuriez",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227871506:275,interface,interface,275,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227871506,1,['interface'],['interface']
Integrability,"I agree with this idea. ; The only drawback is that all current `setRequired(true)` would require an update... To sum up, if I get it right:. - `isRequired()` should be true by default; - `hasDefaultValue()` should be true by default as well; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that...; - in BaseObject::init() print a warning/error message `if (!data->hasDefaultValue() && !data->isSet())`; - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; ; Is that all, and what you had in mind?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198:488,message,message,488,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198,1,['message'],['message']
Integrability,"I also believe the find package integration is not part of cmake 3.22 for the fetch mechanism (so you can use the `FIND_PACKAGE_ARGS` option in `FetchContent_Declare`). Just trying to build the minimal example on this topic on [CMake documentation]( https://cmake.org/cmake/help/latest/module/FetchContent.html#integrating-with-find-package) will not succeed with 3.22 but won't with 3.24. With 3.22, you have no integration of this and you have to call explicitly the `find_package` manually before the fetch (as we do so far in SOFA), but this leads to the problem was citing Paul (dependence not available for all targets). Starting with 3.24, using this option solves the problem (and no need for the `find_package` call before the fetch anymore).; But I understand that we should stick to v3.22 as it is part of ubuntu22.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4586#issuecomment-2004426365:32,integrat,integration,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4586#issuecomment-2004426365,4,"['depend', 'integrat']","['dependence', 'integrating-with-find-package', 'integration']"
Integrability,I also would like to get rid of the failure in Utils:; https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/1522/testReport/. Here is the associated msg_warning:; [WARNING] [Utils::widenString()] Invalid or incomplete multibyte or wide character. Could it be because this one is changing the locale and depending on the system things goes wrong with the french character used in the string ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709:307,depend,depending,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709,1,['depend'],['depending']
Integrability,"I am not able to reproduce this issue. I close it for now, but if you have time @jnbrunet and @AndreaMendizabal test it again and re-open the issue if necessary. I tried to run the mentioned scene. Result: an error message without crash; ```; [ERROR] [SparseGridTopology(SparseGridTopology1)] vertex 0 not found in hexahedral topology; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531:215,message,message,215,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531,1,['message'],['message']
Integrability,I am not sure it is doable as things must depend on each other.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-312869368:42,depend,depend,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-312869368,1,['depend'],['depend']
Integrability,"I am not sure it is necessary to integrate the logger. It makes the code more complex, and IMO nobody will use it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1333575575:33,integrat,integrate,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1333575575,1,['integrat'],['integrate']
Integrability,"I am trying to add sofapython3 plugin using GUI, but the following error is showing up ; ![Capture_1](https://github.com/sofa-framework/sofa/assets/65168029/237e63a7-f0df-48f9-9935-e1985e084687); I have tried all other fixes (fixing sofa root, sofa python root, python home and so on), but no avail. I have even checked if its issue with .dll file, hence ran REGSVR32 using the .dll file, and Im getting the exact same error saying ""the specified module could not be found"". Kindly help me fix this. My OS is windows 10, and I have both python 3.8 and 3.9 on my system, and I have routed all sofapython related paths to python 3.8 only.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4493:581,rout,routed,581,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4493,1,['rout'],['routed']
Integrability,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168:560,Message,MessageDispatcher,560,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168,3,"['Message', 'message']","['MessageDispatcher', 'message']"
Integrability,"I assume that you use MeshMatrixMass. In MeshMatrixMass, the mass integration is distributed on vertices and edges. In a hexahedron, some vertices are not connected by edges. Therefore, this type of interaction is not taken into account in the mass matrix. And that is why, you see a lot more zeros in the matrix in SOFA. I guess you will have more accurate results with tetrahedra, where this situation does not happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4954#issuecomment-2324019674:66,integrat,integration,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4954#issuecomment-2324019674,1,['integrat'],['integration']
Integrability,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:127,depend,depend,127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,4,['depend'],"['depend', 'dependencies']"
Integrability,"I build sofa21.12 on Windows10, ; the complete cmake output is as follows. Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19043.; CMake Warning (dev) at D:/Program Files/CMake/share/cmake-3.22/Modules/CMakeDependentOption.cmake:84 (message):; Policy CMP0127 is not set: cmake_dependent_option() supports full Condition; Syntax. Run ""cmake --help-policy CMP0127"" for policy details. Use the; cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:45 (cmake_dependent_option); This warning is for project developers. Use -Wno-dev to suppress it. -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: J:/GitHub/sofa/build/install; CMake Deprecation Warning at SofaKernel/modules/Sofa.Config/CMakeLists.txt:74 (message):; Deprecated components are activated (SOFA_WITH_DEPRECATED_COMPONENTS; variable is ON). CMake Error at extlibs/CMakeLists.txt:28 (set_target_properties):; set_target_properties Can not find target to add properties to: tinyxml. CMake Error at extlibs/CMakeLists.txt:29 (set_target_properties):; set_target_properties Can not find target to add properties to: tinyxml. Using legacy headers is enabled.; Headers from v20.12 are usable, but it is advised to change your code to use the new headers introduced in v21.06.; Found Boost: E:/GitHub/vcpkg/installed/x64-windows/include (found version ""1.77.0"") ; Found Boost: E:/GitHub/vcpkg/installed/x64-windows/include (found version ""1.77.0"") found components: filesystem thread chrono atomic ; Adding module Sofa.GL; Adding plugin SofaSimpleFem; Adding plugin SofaRigid; Adding plugin SofaDeformable; Adding plugin SofaObjectInteraction; Adding plugin SofaMeshCollision; Adding plugin SofaEngine; Adding plugin SofaExplicitOdeSolver; Adding plugin SofaImplicitOdeSolver; Adding plugin SofaLoader; Adding plugin SofaGeneralVisual; Adding plugin SofaGraphComponent; Adding plugin SofaGeneralMeshCollision; ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2814:251,message,message,251,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2814,2,['message'],['message']
Integrability,"I can't add much more than this title. Fix #4202. [ci-depends-on https://github.com/SofaDefrost/SoftRobots/pull/247]; [ci-depends-on https://github.com/SofaDefrost/SoftRobots/pull/258]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205:54,depend,depends-on,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205,2,['depend'],['depends-on']
Integrability,I cannot test myself on window but:; - the tests is not failing anymore. ; - no new tests are failing. ; - I don't think the new boost dependency is a problem. . I let @matthieu-nesme (who made the issue #17) to make the final decision.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530:135,depend,dependency,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530,1,['depend'],['dependency']
Integrability,"I commented on #151 why I don't this this strategy is viable. An additional point related to this fix, is that `TemporaryLocale` is not a good solution, and needs to be banned for cases where Sofa is embedded within an application having multiple threads. Indeed, `setlocale` is ""MT-Unsafe"" according to the docs, and does affect the locale of the other threads that could run in parallel. It's like `setcwd`, but unlike the notion of the current directory that we can workaround (by having the notion of the current directory tracked within Sofa), there is no thread-safe and portable way to do the same for the locale (as far as I know).; Depending on the GUI framework in use, the order of initialization, the OS, the system language, ..., the current locale will be changed (hint: the current constructor/destructors of `TemporaryLocale` do have non-temporary consequences, as there is no real way to get back to the ""no-locale-default"" state once someone messed with it. There is no obvious solution to this, but I would vote for going back to the strategy of imposing ""C"" at the beginning of the programs we control (i.e. `runSofa`), and adding checks and outputting a warning when loading a scene if the external application did not set the locale correctly to this safe value, but either never messing with it, or making this externally-controllable from the application using Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466:641,Depend,Depending,641,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466,1,['Depend'],['Depending']
Integrability,I did not have a lot of time to progess here but still a reminder for later:; - in Flexible : BezierTetrahedron.scn should not be built anymore since it depends on SofaHighOrderTopologies; - CubeTopology : crashes since the CubeTopology does not implement the position (point) topology,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245:153,depend,depends,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245,1,['depend'],['depends']
Integrability,I didn't change anything else except in DataFilename the enum FILE is colliding with the FILE* defined in cstdio. ; So I used an enum class instead (which is a c++11 designed for that). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1460:285,message,message,285,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1460,1,['message'],['message']
Integrability,"I do not have cstringt.h on my system, and it does not seem to be a requirement to build; FileMonitor_windows.cpp ; Any thoughts about this ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/448:242,message,message,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/448,1,['message'],['message']
Integrability,I don't know how it was working before but we need double antislash in; regex-string. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1161:187,message,message,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1161,1,['message'],['message']
Integrability,"I don't think so because components are destroyed in the unload. On Fri, Sep 23, 2022, 16:43 Paul Scheikl ***@***.***> wrote:. > @alxbilger <https://github.com/alxbilger> Thanks!; >; > Before unload; > Total Base: 31970 31936 Diff: 34; > After unload; > Total Base: 31970 31939 Diff: 31; > Before unload; > Total Base: 32002 31968 Diff: 34; > After unload; > Total Base: 32002 31971 Diff: 31; > Before cleanup; > Total Base: 32002 32000 Diff: 2; > Total Base: 32002 32000 Diff: 2; > After cleanup; > Total Base: 32002 32001 Diff: 1; >; > So that looks ok, right? At least the difference is more or less constant.; > :D; > But the tracker only tracks actual objects, right? So Creators, Factories,; > and others that do not inherit from base are not tracked.; >; > Could it be a vector/map that constantly receives new values but is not; > cleanup up with reset/cleanup?; > Similar to what was happening in sofa-framework/SofaPython3#304; > <https://github.com/sofa-framework/SofaPython3/pull/304>; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256307109>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACQVHUANK4QVMDDWVFQIBHTV7W6ZRANCNFSM6AAAAAAQR3UB3M>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256312726:1319,Message,Message,1319,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256312726,1,['Message'],['Message']
Integrability,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:309,interface,interface,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698,1,['interface'],['interface']
Integrability,I don't understand this conflict because I have no conflict on my machine even when I took an update. I resolved then the conflict on github interface. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/288#issuecomment-323303622:141,interface,interface,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-323303622,1,['interface'],['interface']
Integrability,"I don't understand why this check was made:; Without invalidating the bbox, the node's bbox will only be sized up, and never down with this visitor, to my understanding.. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1268:270,message,message,270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1268,1,['message'],['message']
Integrability,"I dont think the fix is good ; the ""toMatrix()"" is available for Mat3x3 but not for Mat4x4 (there was a ` toMatrix` for Mat4x4 but it was deleted and replace with `toHomogenousMatrix()` ).; This RigidCoord::toMatrix() is templated on the Mat type actually, and is really ill-formed (no assert on the size of the given matrix, etc).; I think the solution is to either:; - test if the matrix is 3x3 or 4x4 (and failed to compile with a message with a static assert) and calling the respective ` toMatrix()` or ` toHomogenousMatrix ()` ; - or remove the template, force it to Mat3x3 and create an other `toHomogenousMatrix` in RigidCoord. Consisntent with Quat but duplicating code and breaking. I am more for the first solution. > Thanks for your contribution. I wonder how it was not detected before. I guess this was not detected before because nobody was calling RigidCoord::toMatrix with a Mat4x4 with the code compiled on the CI. Actually, nobody calls RigidCoord::toMatrix, either with mat3 or mat4 apparently.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3360#issuecomment-1267742881:434,message,message,434,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3360#issuecomment-1267742881,1,['message'],['message']
Integrability,"I encountered a problem which I think is related: on my setup (Windows, debug) runSofa_d.exe crashes because it expects to find zlibd.dll, and only finds zlib.dll in build/bin/Debug. I manually copied zlibd.dll to try a quick fix, but then CImgPlugin could not load. Going to see it's dependencies, it seems to link with the non debug version zlib (which I had replaced), instead of zlibd, in the same way as it does for libpng16.; Trying to investigate, I found in the CImgPlugin CMakeLists.txt two lines (74-75) which could explain this :; ```; # Always link dependency targets in Release to avoid a Zlib debug/release mix.; # Because tiff needs zlib and tiff is only in Release in WinDepPack.; sofa_set_targets_release_only(${DEP_TARGETS}); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}); ```; If someone can check, I'm not entirely sure it is the same issue though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198:285,depend,dependencies,285,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198,2,['depend'],"['dependencies', 'dependency']"
Integrability,"I encountered a situation where my code emitted a `dmsg_warning`. It triggers a Qt event to react, and change the component icon. However, something went wrong in the Qt side and a Qt error was emitted. Since we listen to Qt errors, it also emits a `msg_*`.; Therefore, a `msg_*` is called inside a `dmsg_warning` call. The problem is that a mutex protects each call when entering the message functions (`PUBLIC_API_ENTRY_POINT_MUTEX`). And if a mutex is locked twice in the same thread, it crashes.; To solve this situation, a `std::recursive_mutex` would help. But I think there is a design problem in the first place. To be discussed...",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3610:385,message,message,385,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3610,1,['message'],['message']
Integrability,"I flagged your message to have a look later. It does seem like a bug, however it is in a part of the code that was never finished (creating mechanical matrices including contributions below mappings), so is not currently used. As far as I know, for the same functionality within the Compliant/Flexible plugins they used a completely rewritten matrix construction code. This issue might be one reason why this version of the algorithm is not working, but there are probably other bugs in this code as well... Thanks for the notification !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545:15,message,message,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545,1,['message'],['message']
Integrability,"I forgot one file in #586, leading to the disappearance of 14 tests. You didn't see it? Me neither. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/675:199,message,message,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/675,1,['message'],['message']
Integrability,I forgot to include the version header ... :1st_place_medal: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1312:162,message,message,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1312,1,['message'],['message']
Integrability,I found a great wrapper around curl : https://github.com/libcpr/cpr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4648#issuecomment-2082298867:16,wrap,wrapper,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4648#issuecomment-2082298867,1,['wrap'],['wrapper']
Integrability,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/605:12,depend,dependency,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605,3,"['depend', 'message']","['dependencies', 'dependency', 'message']"
Integrability,"I found the problem: the binaries shipped with the dependencies packages are compiled with a version of VS which is not 2013 or 2015. ; And if you dont use the same CRT version between fopen/fread/.... , libpng will crash.; http://stackoverflow.com/questions/29208826/libpng-1-616-crashing-on-png-read-png-in-vs2012-c :. > ; > You are passing a (FILE*) to libpng, probably using png_init_io. Visual Studio crashes inside fread when it tries to access the underlying FILE structure.; > ; > This is because you created the FILE* using fopen from one Visual Studio runtime but libpng is linked against a different Visual Studio runtime (msvcrt or something like that); the two runtimes are incompatible. And it is currently wokring with the present ImagePNG because this class set its own read function() to libpng using ; `png_set_read_fn(PNG_reader, file, png_my_read_data);`; But CImg does not.; The solution is to built new version of the binaries for each supported Visual Studio version (2013 and 2015 in our case). Moreover, we need to ship as well the debug version of those libraries, as libpng is incompatible between release and debug configurations (e.g you compile Sofa in debug and load it with libpng.dll, it will crash if you use libpng ; and vice-versa)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546:51,depend,dependencies,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546,1,['depend'],['dependencies']
Integrability,I fully support this... I regularly see people asking me what is wrong because the find_package() reports very hard to understand message.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/607#issuecomment-372311048:130,message,message,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607#issuecomment-372311048,1,['message'],['message']
Integrability,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:1076,message,message,1076,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098,2,['message'],['message']
Integrability,I had nothing to do in the past 10 minutes...so I did harmless cleaning to relax. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/733:181,message,message,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/733,1,['message'],['message']
Integrability,"I have added #ifdef to activate/deactivate the mutex on demand. . @matthieu-nesme I measured the performance with the mutex. On my machine, the message API is handling around 900000 messages per seconds. I got no noticeable difference when the mutex is there or not. Can someone confirm that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/257#issuecomment-300826431:144,message,message,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257#issuecomment-300826431,2,['message'],"['message', 'messages']"
Integrability,"I have an implementation suggestion, but it depends on the update callback mechanism (that we haven't yet merged into SOFA:; - We could plug in callbacks in the sofa::simulation::Node methods to guarantee that all bboxes in child nodes and child objects are connected to the bounding box field of their parent nodes; - We could use isPersistent() instead of isSet() to check for user input override (because isSet() doesn't tell you whether the user wrote down a value or not, but just whether or not the datafield has been modified. ANY call to beginEdit() basically sets the isSet flag to true... ); - We could leave the updateBoundingBoxVisitor as-is (except for swapping the isSet check for a isPersistent). Here would be the code:. ```cpp; // Bounding box update system proposal based on the updateCallback trackerEngines API:; // Making use of the persistent flag, if the bbox is given at component's creation (through an addObject call for instance, or manually edited through runSofa2), the bbox won't recalculate. DAGNode::doRemoveChild(BaseNode* c); {; [...];; removeUpdateCallback(""bbox_"" + c->getName());; }. DAGNode::doAddChild(BaseNode* c); {; [...];; addUpdateCallback(""bbox_"" + c->getName(), {&(c->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; for (auto object : this->object); 	bbox->include(object->f_bbox.getValue());; f_bbox.endEdit();; return sofa::core::objectmodel::ComponentState::Valid;; }, {&(f_bbox)});; }. DAGNode::doRemoveObject(BaseObject* o); {; [...];; removeUpdateCallback(""bbox_"" + o->getName());; }. DAGNode::doAddObject(BaseObject* o); {; [...];; addUpdateCallback(""bbox_"" + o->getName(), {&(o->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183:44,depend,depends,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183,1,['depend'],['depends']
Integrability,"I have compiled and installed SOFA master branch with the CGAL plugin. In the compilation folder, under lib, I have libCGALPlugin.so, and if I do ldd libCGALPlugin.so, it founds all the dependencies. However, if I install SOFA, (`cmake --build . --target install`), libCGALPlugin.so is moved to a plugins folders, under `<install>/plugins/CGALPlugin/lib`, and ldd now shows that libCGALPlugin.so can't find all the dependencies. . Ive search a bit and apparently, the rpath is set to `$ORIGIN/../lib`, which is okay when the library is directly in the `<builddir>/lib` folder, but fails if the library is in `<installdir>/plugins/CGALPlugin/lib/`. . Due to this, its not possible to load the plugin. . This happens not only with with plugins, but for example also with `libSofaComponentAll.so`. It tries to load `libSofaOpenglVisual.so`. In the <builddir> works fine because both are under `<builddir>/lib`, but when installed, `libSofaOpenglVisual.so` is moved to `<installdir>/lib/SofaOpenglVisual/lib`, where `libSofaComponentAll.so` is not searching.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1560:186,depend,dependencies,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1560,2,['depend'],['dependencies']
Integrability,"I have created a pull request with an initial working solution to this problem. I have updated the references to the unknown library _std::filesystem_ and rewrite them as namespace _fs_. Additionally, I have include the old headers for this library from its experimental version at **gcc-8**, so there is a possibility to use the correct ones depending on the compiler version it is used. I have created a pull request [#3994](https://github.com/sofa-framework/sofa/pull/3944).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3943#issuecomment-1587255019:343,depend,depending,343,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3943#issuecomment-1587255019,1,['depend'],['depending']
Integrability,"I have installed via the souce code method of SOFA; All the build and compile process has successed but I can not open the runsofa test binary file successfully.; It always says that: the runsofa can not find its entry to link to the libpng16.dll ; ![image](https://user-images.githubusercontent.com/27597690/81058246-e78ea780-8e82-11ea-8cfc-2d698a2637dd.png); That is very weird because I don't know how is this .exe related to my anaconda 3 which include a python 3.7 (I have python 2.7 installed and my sofapython is built successfully). And then I find that the ""sofa-windows-dependency-pack"" include this .dll file so I replace it in the anaconda directory and it can find its entry but gives me another error like this:; ![image](https://user-images.githubusercontent.com/27597690/81058659-ba8ec480-8e83-11ea-8069-504741e99e43.png); I really don't know why sofa go to my anaconda directory to find that .dll and I don't know where I was wrong, I use vs2019 to generate the runsofa binary successfully. Hope to be reply!. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1364:580,depend,dependency-pack,580,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1364,1,['depend'],['dependency-pack']
Integrability,"I have tried it in runSofa2 and it work like a charm and is actually a very useful warning (maybe we should add a line saying: ""to remove this warning message you need to ....""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/702#issuecomment-400499077:151,message,message,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/702#issuecomment-400499077,1,['message'],['message']
Integrability,I integrated most of your changes @fredroy but changes in Data field of OmniDriver and others is really bigger work. I would like to keep the PR simple and do this in another PR later,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721:2,integrat,integrated,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721,2,['integrat'],['integrated']
Integrability,"I integrated the Tracy profiler (https://github.com/wolfpld/tracy). It adds a ton of new feature to our internal profiler. In particular, I like:; - Multithreaded timeline; - Statistics; - Messages; - Memory management (need more work, I could not test it); - See context switching; - Mutex profiling (not tested yet). I tried not to be invasive, but it will require a change on the way we define timers such as in https://github.com/sofa-framework/sofa/compare/master...alxbilger:sofa:scoped_timer (the demo runs with this branch). TODO: a dedicated MessageHandler. ![peek (1)](https://github.com/sofa-framework/sofa/assets/10572752/17714b7d-337e-43b2-9701-3ae20dd5f262). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4182:2,integrat,integrated,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4182,3,"['Message', 'integrat']","['MessageHandler', 'Messages', 'integrated']"
Integrability,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:569,Message,MessageFormatter,569,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121,2,['Message'],['MessageFormatter']
Integrability,"I just added the performances tests... not very significant on ""classical"" scenes. So for the moment I suggest keeping the two version of DataContentValue<> but merge de PR to remove the dependency to DataTypeInfo.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2285#issuecomment-910387440:187,depend,dependency,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2285#issuecomment-910387440,1,['depend'],['dependency']
Integrability,I just drop that here to remove warnings... (every thing is in the title). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1096:174,message,message,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1096,1,['message'],['message']
Integrability,"I just gave it a look and it seems easy to move up the whole code at CollisionModel level... so please do so, code will be cleaner, shorter and will offer a more consistent interface to users. . In addition I see no problem in breaking code that does not follows Sofa guidelines. So renaming activated() into isActive() and other stuff like that would be welcome to :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851:173,interface,interface,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851,2,['interface'],['interface']
Integrability,I just integrated your changes @epernod,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1522#issuecomment-712304971:7,integrat,integrated,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1522#issuecomment-712304971,1,['integrat'],['integrated']
Integrability,I just took the liberty to change the commit message. Hope you don't mind :-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/415#issuecomment-331914492:45,message,message,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/415#issuecomment-331914492,1,['message'],['message']
Integrability,"I know the QtGui is going to be deprecated soon but I wanted/needed this feature since so long. Basically allow to see the animation step duration (ms) in a graphView, then allow to navigate on the graph or on the sliders and see the different substeps exectuted during this animation step.; Substeps are displayed in a Tree, in the right order and with their respective time and percentage resp. to the full step duration. All the mechanism to parse data could be kept for future runSofa2. The windows is a ""little"" inspired from Unity3D profiler. ![image](https://user-images.githubusercontent.com/21199245/57310905-ecdbd980-70ea-11e9-823d-56007e52fa8b.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1028:760,message,message,760,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1028,1,['message'],['message']
Integrability,"I know we are planning to drop VS2015 support in a very near future (I'm actually working on it) but this ""unknown option"" warning bothers me at each compilation (yes, I'm still under VS2015 myself). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1192:299,message,message,299,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1192,1,['message'],['message']
Integrability,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:778,message,message,778,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722,2,['message'],['message']
Integrability,"I ment using assimp to avoid redondency. Of course we need to keep the formats not supported by assimp! ; I do not understand exactly the package dependency problem, cmake can try to find the package if not dowload / compile / install it ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369909286:146,depend,dependency,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369909286,1,['depend'],['dependency']
Integrability,I moved all changes related to `TopologicalMapping `into the PR #3428 for better clarity.; Therefor this one depends on this new PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3339#issuecomment-1291831058:109,depend,depends,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3339#issuecomment-1291831058,1,['depend'],['depends']
Integrability,I moved the checker code into RealGUI (to factorize code between all the viewers). ; One last small issue is that the message wont be raised on the CI...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346588377:118,message,message,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346588377,1,['message'],['message']
Integrability,I noticed several flaw (or hard to understand) with the way mass and totalMass interact in DiagonalMass compared to what is done in UniformMass. . eg: ; - totalMass is set as readOnly in DiagonalMass while it is not in UniformMass; - despite totalMass is readOnly the value can still be changed in the scene file (so I wonder that the readOnly flag should be renamed to something that reflect what is it used for :)); - despite totalMass is readOnly there is no error message indicating to the user that the value he gave in his scene is simply dropped and that he should not use this flag. ; - the totalMass parameter is re-computed in the un-specialized implementation of the reinit function... but the specialization for rigid/vec and so on are not forwarding to this un-specialized implementation but the to implementation in-herited from the parent. (Is this really what we want ? This look a very weird design to me and I suspect problems on this forwarding to the parent.). ; - f_mass data (mass) field also seems to be a readOnly component (it seems deduced from massDensity and volume of the elements) but it is not tagged in the same way as totalMass. Why ? . Any feedback or confirmation/or not on these topics would help me to write the correct test. . DM.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36:468,message,message,468,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36,1,['message'],['message']
Integrability,"I noticed that installed headers for SofaBaseMechanics aren't where they're supposed to be because the header's directory structure is not properly respected in SOFA's sofa_install_targets macro. This commit fixes the issue for the specific case of SofaBaseMechanics/BarycentricMappers/*.{h,inl} but doesn't offer a definitive fix. Additionally, it duplicates headers in SofaBaseMechanics/ since the sofa_install_targets is still in use. A definitive solution would be to embed the fix in the sofa_install_targets macro, but I wanted your input first. @damienmarchal @guparan ; . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/887:679,message,message,679,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/887,1,['message'],['message']
Integrability,"I noticed while trying to build SofaPython as out-of-tree that the build could not find <SofaExporter/OBJExporter.h>. It was because SofaExporter exposed its header files directly, instead of through a common folder named SofaExporter.; Thus this PR fixes the INCLUDE_INSTALL_DIR in SofaExporter/CMakeLists.txt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1089:411,message,message,411,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1089,1,['message'],['message']
Integrability,"I personally never used neither fwdInit() nor bwdInit() and with implementations such as; ```cpp; // CollisionModel.h; virtual void bwdInit() override; {; getColor4f(); //init the color to default value; }; ```; I'd say it's most likely optional in most cases :); Plus it makes it much less likely to get a clean init when creating a component on the fly, except if you do the traditional and cumbersome init() / reinit() / bwdInit() routine...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-417004521:434,rout,routine,434,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-417004521,1,['rout'],['routine']
Integrability,"I prefer `false`. ; So probably the component won't be created and the scene might crash at creation or init with your error message. ; Otherwise the crash might happened later. Or worse, it will run with a wrong behavior. The second option is harder to debug.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5075#issuecomment-2441068840:125,message,message,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5075#issuecomment-2441068840,1,['message'],['message']
Integrability,"I propagated SofaPython dep changes in more plugins.; I also added a few quick-cleans, see my nice commit messages to get the idea :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963:106,message,messages,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963,1,['message'],['messages']
Integrability,I really don't get the need for `nbOfMonomial` (Is not `listOfMonoMial.size()` sufficient?); It seems dangerous to keep them synchronized...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/442#issuecomment-334134062:125,synchroniz,synchronized,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442#issuecomment-334134062,1,['synchroniz'],['synchronized']
Integrability,"I recently had a small problem when a plugin was implicitly loading SofaConstraint from the SOFA's installation because its compilation was depending on it, but runSofa was launched from the build directory, hence loading SofaConstraint two times (one from the build directory, and one from the installation directory). This resulted in these output from the object manager:. ```; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class already registered: Vec2d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Default template for class SlidingConstraint already registered (Vec3d), do not register Vec3d as the default; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class already registered: Vec2d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class a",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1652:140,depend,depending,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1652,1,['depend'],['depending']
Integrability,I removed the [ci-depends] as this PR must provide a compat layer (already done actually) not to break SofaPython3.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2505#issuecomment-990764793:18,depend,depends,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2505#issuecomment-990764793,1,['depend'],['depends']
Integrability,"I removed the module from the `Sofa.Component.Mapping` dependencies. I also removed all the files from the module. And there is a warning message if someone uses the module. In conclusion, the module exists only to warn that it should not be used.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2434537570:55,depend,dependencies,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2434537570,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"I see the benefit of having generic msg_xyz_when(cond) message, maybe they should be more general and not tied to a ""this"" pointer, like msg_xyz_when(sender, cond). In the component itself, I would rather see; component_msg_info() if (printLog) msg_info(this); with ""printLog"" data name updated; I also think ""warning"" and above (error...) levels should not depend on a flag; And last, I would call that flag ""msgInfoVerbose"" to better match what is a boolean flag name. here my 2 cents ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017:55,message,message,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017,2,"['depend', 'message']","['depend', 'message']"
Integrability,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:986,depend,depending,986,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943,2,['depend'],['depending']
Integrability,"I suggest to add a message in GUI that a newer version of SOFA is available if an old version is used. I would look like:. ![image](https://github.com/sofa-framework/sofa/assets/10572752/4aeaabcf-ec81-4585-b53c-9a8f24ac68f1). I chose to rely on Qt because otherwise it requires a new lib for the http request, and Qt is already here. But having Qt is not enough. I have an error related to ssl (similar error to https://stackoverflow.com/questions/53805704/tls-initialization-failed-on-get-request). It requires additional components in the Qt installation. I did not try it myself because it changes the installation process of SOFA. So before going further, we need to conclude that this feature is desirable (and is not a gadget). If it is, we can decide to rely on Qt and its additional component, or to go with a simpler C++ library (https://github.com/JosephP91/curlcpp for example). The second solution would open the version checker to ImGui. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4648:19,message,message,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4648,1,['message'],['message']
Integrability,I suppose it is an old macro. Was not accesible from cmake config and always equal to true if compiled in debug mode. only a few code was using it and were already checking NDebug as well. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1232:288,message,message,288,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1232,1,['message'],['message']
Integrability,"I tested different scenarios:; If `ComponentA` is defined before `ComponentB`:. 1. A Data of `ComponentA` referring to a Data of `ComponentB` is not linked properly: the numeric value is not the right one, and Data that depends on the first Data are not updated accordingly.; 2. A Data of `ComponentB` referring to a Data that does not exist (and will not exist) does not warn the user. The link is created (pointing to nothing) with a default numeric value. Therefore, I suggest to restore the `else` statement with a warning to the user that the link does not have a parent. It seems that the case when a Data points to a Data that will be initialized later is not supported.; What do you think @damienmarchal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2211#issuecomment-872029650:220,depend,depends,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2211#issuecomment-872029650,1,['depend'],['depends']
Integrability,"I think ""_rotationIdx"" should have the size of the number of points.; The problem occured when using subtopology, i.e when the number of points is greater than nbElements*4... . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/341:277,message,message,277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/341,1,['message'],['message']
Integrability,"I think I have another sofa installation, but I have tested pointing CMAKE_PREFIX_PATH to /usr/local and also to /SOFA_DIR/build/install dependending on where I installed v20.06. In both cases failed. . Have u been able to replicate?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712:137,depend,dependending,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712,1,['depend'],['dependending']
Integrability,I think it's time to update our old icons for v18.12 :wink: . SOFA.png; ![SOFA](https://raw.githubusercontent.com/sofa-framework/sofa/43b71cf490996847a15f8fddf5e04db823b8d52d/share/icons/SOFA.png). MODELER.png; ![MODELER](https://raw.githubusercontent.com/sofa-framework/sofa/43b71cf490996847a15f8fddf5e04db823b8d52d/share/icons/MODELER.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/881:442,message,message,442,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/881,1,['message'],['message']
Integrability,"I think the [depend-on] is used in the wrong ""direction"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1239227595:13,depend,depend-on,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1239227595,1,['depend'],['depend-on']
Integrability,I think this PR also add a huge speedup in term of compilation time and fix the include dependency graph. Many thanks Erik.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1976#issuecomment-812429239:88,depend,dependency,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1976#issuecomment-812429239,1,['depend'],['dependency']
Integrability,"I think this has some benefits:; - the features are already merged in the master branch and *should* work without the hassle of merging different dev branches; - they are OFF by default, so they are not disturbing anyone. But we should take care of the following:; - they must be tested (at least ONE ci config should activate them); - they are not meant to stay ""experimental"" forever, so there is an implicit contract to move them to ""non-experimental"" as soon as they are ready and working. ""EXPERIMENTAL_FEATURES"" must not be the carpet above the decisions we don't make. Typically, an ""experimental"" feature in release N should be merged in release N+1.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607:411,contract,contract,411,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607,1,['contract'],['contract']
Integrability,"I totally agree with Damien.; Depending on the case, the comment should at least include the following informations:; - date of deprecation; - replacement method pointers. Furthermore, the deprecated method could issue a message on the console, to warn against its use.; In extreme cases, after a reasonable time delay, the method should not work anymore, just issue an error message with the previous informations. But as it is currently done in this example, nothing goes against its undiscontinued use in new pieces of code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233:30,Depend,Depending,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233,3,"['Depend', 'message']","['Depending', 'message']"
Integrability,"I totally agree with the idea to limit dependencies, as a general state of mind. (not only in this particular case); +1 to backport the commits that cut boost dependency, though I have no idea how simply doable it is... :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473:39,depend,dependencies,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473,4,['depend'],"['dependencies', 'dependency']"
Integrability,"I tried to at the Community Help:: Using Sofa, but I get this message. ![image](https://user-images.githubusercontent.com/5296582/83347681-2f9ad000-a344-11ea-972d-13af8256f792.png)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636437950:62,message,message,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636437950,1,['message'],['message']
Integrability,I updated (again) the CI jobs to ensure new dependency packs are installed.; I also launched a rebuild for Windows last builds.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292208317:44,depend,dependency,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292208317,1,['depend'],['dependency']
Integrability,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:22,message,message,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656,4,['message'],"['message', 'messages']"
Integrability,I was thinking again at this. It should definitively work...; Your BBox are overlapping such as the points on the interface are in both topology of the FEM ?; Are you sure TetrahedronHyperelasticityFEMForceField is using the edges? If yes could you try with a more commun TetrahedronFEMForceField with just diffrent your modulus.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2090328437:114,interface,interface,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2090328437,1,['interface'],['interface']
Integrability,I wonder if it will compile and succeed on the tests .; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/885:155,message,message,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/885,1,['message'],['message']
Integrability,"I would also recommand using a more ""reddish"" color for deprecation.; And move all deprecation warning as deprecation message :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1573759432:118,message,message,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1573759432,1,['message'],['message']
Integrability,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:57,synchroniz,synchronize,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576,2,['synchroniz'],['synchronize']
Integrability,I would not add a boolean because you would have a large number of tests in the case of a large mesh.; I would rather rename those functions and set them purely protected/private (then transforming them like utility methods for DrawToolGL). ; And then create other functions implementing the DrawTool interface (calling those private methods and glBegin(*)/glEnd calls),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/7#issuecomment-250756856:301,interface,interface,301,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/7#issuecomment-250756856,1,['interface'],['interface']
Integrability,"I would vote for yes too. This has been discussed for a long time now. Online documentation is already updated to ""use your own Boost"".; Cleaning as much as possible Boost dependencies that are redundant with C++11 features is another topic in my opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230:172,depend,dependencies,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230,1,['depend'],['dependencies']
Integrability,I'm ok with the renaming but please make sure to add a WARNING in your commit message as it may break some algos for MultiThreading users.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308430717:78,message,message,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308430717,1,['message'],['message']
Integrability,"I'm pretty sure it's not a bug and it's located in an external dependency, thus not related to SOFA.; EDIT: it may be a bug actually, could you have a look @fredroy ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2108#issuecomment-853171833:63,depend,dependency,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2108#issuecomment-853171833,1,['depend'],['dependency']
Integrability,I've had a problem combining OglViewport (which is using old openGL) with another component using modern OpenGL.; Here's a fix I did with the help of @fredroy.; We just needed OglViewport to update the visualparams with the new matrices. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1500:339,message,message,339,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1500,1,['message'],['message']
Integrability,"I've put this PR in wip to avoid overloading the CI while you integrate all the comments. Once you've finished all the review, you can change the tag back to to review and then trigger the CI with the usual comment.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4679#issuecomment-2083052979:62,integrat,integrate,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4679#issuecomment-2083052979,1,['integrat'],['integrate']
Integrability,"IMO it is dangerous to let UncoupledCC used without any compliance info given.; This PR adds a warning when it's the case. It's also slightly polishing all UCC messages in general. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3858:160,message,messages,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3858,1,['message'],['messages']
Integrability,"IMO it's pain to see and consider WARNINGS when they do not burn my retina from the console :eyeglasses: ; Yellow color for warning messages (as for deprecation) will help me sleeping at night . ![Screenshot_2023-06-02_15-39-17](https://github.com/sofa-framework/sofa/assets/17544719/81ad75c4-a272-4378-a2c5-a6012d19ef99). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3914:132,message,messages,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914,1,['message'],['messages']
Integrability,INFO MESSAGE: ; We are now updating the VS-2015 machine that are in charge of the the PRs. ; In case you detect any problem please report.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/186#issuecomment-283613384:5,MESSAGE,MESSAGE,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-283613384,1,['MESSAGE'],['MESSAGE']
Integrability,"If I understand well how AdvanceTimer is working (which I'm still not sure), this Begin(""animate"") command should not be there. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1029:227,message,message,227,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1029,1,['message'],['message']
Integrability,"If possible, it would be great to have a check for package dependencies at cmake stage.; right now cmake pass and compilation failed due to glew missing for example (30 mins later). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/807:59,depend,dependencies,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/807,1,['depend'],['dependencies']
Integrability,"If savingMatrixToFile is set to true, the system matrix is saved during each time step with the name ""MatrixInLDL_%04d"", where %d is the value of the time.; I added two new input data:. - savingFilename; 	The filename where the matrix is stored can be changed using the input data d_filename. ; 	If it contains ""%d"", it will keep the previously described behavior, else it will always save in the same file overwriting it. - savingPrecision; 	The second new input is d_precision. It is the precision with which the matrix will be stored. These options are useful to save the system matrix from SOFA and read it from another software. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/845:735,message,message,735,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/845,1,['message'],['message']
Integrability,"If the Data was simply renamed (but is having the same role as previously), it is not a big deal to have a alias. If the Data is no longer used, backward compatibility will have to be done in the 'parse' function (to fill others Data for instance), in that case, it is easy to add a deprecated message. Note that the initial Data should not exist anymore.; As an example, you can look at RigidMapping, where the Data 'repartition' was removed, but the 'parse' function still ensures backward compatibility and log a deprecated msg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823:294,message,message,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823,2,['message'],['message']
Integrability,"If the flag SOFA_NO_OPENGL is active, the plugin VolumetricRendering; cannot be compiled. Add the proper CMake warning and error message.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/110:129,message,message,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/110,1,['message'],['message']
Integrability,"If the user did not specify any sampling number for MSAA (by default), `viewerMSAANbSampling` was not set in getValueFromKey(), and as it was not initialized, it had some random number (usually huge).; Consequently, MSAA was always activated with the highest number of samples even if the user did not specify it.; (and got some bogus message like `[INFO] [RealGUI] Set multisampling anti-aliasing (MSAA) with 1538452832 samples.` ). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3220:335,message,message,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3220,1,['message'],['message']
Integrability,"If we don't set a template to SparseLDLSolver we get a warning message saying that it might be insteresting to set it to speedup the calculations. ; In my opinion this is an information. A warning should mean ""be careful if you don't solve this warning bad things might happen"". . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2969:63,message,message,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2969,1,['message'],['message']
Integrability,If you have a message saying that the texture cannot be loaded. ; This is probably because now image loading (png/jpg) is now done by a single plugin called CImgPlugin. So to load images you needs to compile CImgPlugin & load it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444:14,message,message,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444,1,['message'],['message']
Integrability,Image plugin add python plugin as a dependency even if we do not compile the plugin with python support,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/135:36,depend,dependency,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135,1,['depend'],['dependency']
Integrability,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/57:121,message,message,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57,9,"['Message', 'Rout', 'message']","['Message', 'RoutingMessageHandler', 'message']"
Integrability,"Implementation of http://developer.download.nvidia.com/presentations/2010/gdc/Direct3D_Effects.pdf. ![ezgif-6-9b93f0eae158](https://user-images.githubusercontent.com/11028016/67236511-afc19480-f449-11e9-9528-bf093f77e0d2.gif). Allows nice (?) renders without relying on surface reconstruction etc.; In this SPH simulation (10k particules) , the rendering takes <1% of the resources. Also tweak a bit the default Z planes with QGLViewer (it has a weird behavior with narrow BBox scenes). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1194:586,message,message,586,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1194,1,['message'],['message']
Integrability,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301:699,message,message,699,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301,1,['message'],['message']
Integrability,"Improve the message when a component is deprecated and removed, in order to mention GitHub issues :love_letter: . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3913:12,message,message,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3913,1,['message'],['message']
Integrability,"In BTDLinearSolver, a lot of functions needed ` Index bsize = Matrix::getSubMatrixDim(d_blockSize.getValue());` ; consequently, ` d_blockSize.getValue` was called a tremendous number of times (billions of time for 5000 steps in our case). It appeared that:; - getSubMatrixDim(Index) is only implemented by BTDMatrix and BlockFullMatrix; - it never really depended on its parameter (just returning BSIZE, which is a constant); - d_blockSize was never used in other cases. So this PR:; - reword getSubMatrixDim() without parameter, and make it compile-time constant; - replace its usage in BTDLinearSolver; - deprecate d_blockSize in BTDLinearSolver; - add the compat layer (macros & stuff). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3556:355,depend,depended,355,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3556,1,['depend'],['depended']
Integrability,In BaseData and BaseLink mainly. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1152:132,message,message,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1152,1,['message'],['message']
Integrability,"In ConstantForcefield, ; if the showForceField flag was not set, the draw() function was not restoring the visual state.; Consequently, some weird visual bugs could happen with some other components. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1017:299,message,message,299,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1017,1,['message'],['message']
Integrability,"In ImplicitSurfaceContainer:; Class name didn't match and also the namespace of DiscreteGridField. In applications/plugin/CMakeLists.txt:; SofaVolumetricData depends on SofaDistanceGrid and SofaImplicitField, so should be added first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/422:158,depend,depends,158,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/422,2,"['depend', 'message']","['depends', 'message']"
Integrability,In PR #1485 we introduce DataLink & AbstractDataLink; In PR #1490 we remove the duplicated SingleLink<> parentData in BaseData to ease further refactoring; In this PR we can now cleanly replace the use of the SingleLink<Data<T>> by a DataLink class in Data.h. Once that done:; - we will be able to finally remove from BaseData & Data the code that lay there just because of the use of SingleLink.; - then remove in Link & BaseLink all the code that lay there to support SingleLink<BaseData>. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1491:593,message,message,593,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1491,1,['message'],['message']
Integrability,"In RestShapeSpringsForceField the rest_shape is currently provided using a raw pointer which is really Bad. ; In this PR is change that to use SingleLink instead. . The PR imply a change by which the syntax of the external_rest_shape is provided. Adding an ""@"" as in the test examples/Components/forcefield/RestShapeSpringsForceField2.scn make it work. Editting: Damien. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/315:472,message,message,472,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/315,1,['message'],['message']
Integrability,"In SOFA not using an accessor is really bad (I mean really really bad), but the syntax is not really; friendly and thus discourage ppl to use it. . The PR adds few easing function smooth the syntax. ; So you can now type:; auto points = getReadAccessor(d_points);; in place of:; ReadAccessor<Data<Vec3> points = d_points;. In also make code update more manageable, as the whole code based does not need to be changed if the d_points type change. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1254:545,message,message,545,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1254,1,['message'],['message']
Integrability,In UncoupledConstraintCorrection class:; - Use PointData instead of handleTopologyChange method; - Small cleaning; - Remove duplicated constructor. Fix one of the component in #810 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1115:282,message,message,282,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1115,1,['message'],['message']
Integrability,"In an IDE (Visual Studio at least), tidy cozily all *_relocatable_install projects into a folder.; Before:; ![Capture1](https://user-images.githubusercontent.com/11028016/83787044-787bbd00-a693-11ea-8949-55a86b91b779.PNG); After:; ![Capture2](https://user-images.githubusercontent.com/11028016/83787136-a103b700-a693-11ea-9a7f-d2652e039bbd.PNG). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1405:445,message,message,445,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1405,1,['message'],['message']
Integrability,In case these SOFA_DEV were usefull to you please make PR in which the removed; code is properly engineered (i.e no #ifdef). If you don't think using #ifdef is bad don't hesitate to tell it to sofa-dev. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/835:302,message,message,302,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/835,1,['message'],['message']
Integrability,"In collisionModel createPrevious method, propagate value from parent; ```cpp; pmodel->f_listening.setValue(f_listening.getValue());; pmodel->f_printLog.setValue(f_printLog.getValue());; ```. Fix bad resize method in ```CubeModel::ddCube```. Buffers where resized using the member ```size``` instead of a fix variable, previous code behavior:; ```cpp; int i = size; // size == 0; this->core::CollisionModel::resize(size+1);	// resize(0+1) -> size == 1 ; elems.resize(size+1); // elems.resize (1+1) instead of 0+1; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1202:617,message,message,617,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1202,1,['message'],['message']
Integrability,In component FixeConstraint in function projectVelocity use Data flag instead of #define Flag to set velocity and free velocity to zero. ; @digitaltrainers and @matthieu-nesme . Suggested label enhance. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/288:302,message,message,302,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288,1,['message'],['message']
Integrability,"In createObject... When you given an object as argument instead of a string the binding convert it (with str). This is problematic in many cases eg. with a list it is converted with the bracket (ie: '[' ) and comma as separator. To resolve that I add a method that, if a list is passed as an argument, convert it as a string following the sofa style (without comma and bracket). CHANGELOG for @hugtalbot & @guparan :; [SofaPython]: change the way createObject() handle its arguments to simplify scene writing + batch of tests.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286:627,message,message,627,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286,1,['message'],['message']
Integrability,"In dynamic topology you need to add 4 components:. 1. TriangleSetTopologyContainer ///< contains all the buffers to define the topology structure; 2. TriangleSetTopologyModifier ///< friend class handling all low level operation on the topology container; 3. TriangleSetTopologyAlgorithms ///< class to store more complex algorithms base only on topology structure (will use Modifier and Container); 4. TriangleSetGeometryAlgorithms ///< class to store all complex algorithms involving topology and geometry (3D positions) structure (will use Modifier and Container). After quick investigation the 3rd one is often nearly empty or contains algorithms that in fact need geometry information such as edge length, direction, area, volume etc. So I propose to move all methods of xxxSetTopologyAlgorithms into the xxxSetTopologyModifier if it is really only topological operations or to xxxSetGeometryAlgorithms for better clarification of the code. This will concern:; - PointSetTopologyAlgorithms; - EdgeSetTopologyAlgorithms; - TriangleSetTopologyAlgorithms; - QuadSetTopologyAlgorithms; - TetrahedronSetTopologyAlgorithms; - HexahedronSetTopologyAlgorithms. Of curse I will add Deprecated component and I can also let the methods and forward to the new one with a deprecated message. ; And start to add tests on those methods...",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1538:1275,message,message,1275,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1538,1,['message'],['message']
Integrability,"In fact, we have to go down to the iterator protocol as some strings are initialized with proxies (e.g. `' '.join(...)`) and the Sequence protocol fails on getting the length/size. . The following conversion code passes all python tests in Compliant:. ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }. if( PyIter_Check(object) ) {; // TODO we should throw and abort createObject in case of error; std::stringstream ss;; bool first = true;. PyObject *iterator = PyObject_GetIter(object);; if(!iterator) {; msg_error(""createObject"") << ""error while creating iterator"";; }; ; while(PyObject* next = PyIter_Next(iterator)) {; if(first) first = false;; else ss << ' ';. ss << convert_string(next);; Py_DECREF(next);; }. Py_DECREF(iterator);; ; if (PyErr_Occurred()) {; msg_error(""createObject"") << ""error while iterating"";; }; ; return ss.str();; }. // link path conversion for baseobjects; if( PyObject_IsInstance(object, (PyObject*) &SP_SOFAPYTYPEOBJECT(BaseObject)) ) {; const std::string path_name = (((PySPtr<Base>*) object)->object->toBaseObject()->getPathName());; return '@' + path_name;; }. // fallback to python string conversion; return PyString_AsString(PyObject_Str(object));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921:44,protocol,protocol,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921,2,['protocol'],['protocol']
Integrability,In favor of a new sofa_generate_package function (with named arguments). It's never clear what the arguments passed to this function are for. Now you have to know to use it :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/909:276,message,message,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/909,1,['message'],['message']
Integrability,"In https://github.com/sofa-framework/sofa/pull/1605, https://github.com/sofa-framework/sofa/pull/1611 and https://github.com/sofa-framework/sofa/pull/1632 were layed-out typeInfo subsystem refactoring. The general objective was to remove the ""magic"" and ODR violation of existing code.; The migration to the new system was postpone while NG refactoring & cleaning was progressing. ; Now it is done, let's go to deploy it. So in this step we are starting to use the new subsystem for ""selected"" type while printing a deprecation message for type that have not been migrated; . The PR shoul'nt break anything. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3288:528,message,message,528,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3288,1,['message'],['message']
Integrability,"In https://github.com/sofa-framework/sofa/pull/3104, `DefaultCollisionGroupManager` is removed from the scenes. However, this component has aliases that were not removed. I noticed `CollisionGroup`, and `TreeCollisionGroupManager`. ```cpp; int DefaultCollisionGroupManagerClass = core::RegisterObject(""Responsible for gathering colliding objects in the same group, for consistent time integration""); .add< DefaultCollisionGroupManager >(); .addAlias( ""CollisionGroupManager"" ); .addAlias( ""CollisionGroup"" ); .addAlias( ""TreeCollisionGroupManager"" ) // for backward compatibility with old scene files but could be removed; ;; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3320:385,integrat,integration,385,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3320,1,['integrat'],['integration']
Integrability,"In issue #746 is reported a bug when trying trying to simulate; scenes while the underlying topology is containing empty data set. I narrowed the problem to be in LocalMinDistance::computeIntersection.; In this function we access the trianglesAroundVertex from a MeshTopology. with code like that:; ```cpp; if (m_edgesInTetrahedron.empty() || i > m_edgesInTetrahedron.size()-1); createEdgesInTetrahedronArray();; return m_edgesInTetrahedron[i];; ```. While if there is not ""nothing"" to create because there is no edges/triangles; it access in there is still a return of m_edgesInTetrahedron[i] with indice = 0. To avoid that I change the code for:; ```cpp; const MeshTopology::EdgesInTetrahedron& MeshTopology::getEdgesInTetrahedron(TetraID i); {; if (m_edgesInTetrahedron.empty() || i > m_edgesInTetrahedron.size()-1); createEdgesInTetrahedronArray();. if (i < m_edgesInTetrahedron.size()); return m_edgesInTetrahedron[i];. return InvalidEdgesInTetrahedron;; }; ```. So if there is nothing created we returns a valid object indicating either an; empty or one filled with invalid values. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/977:1187,message,message,1187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/977,1,['message'],['message']
Integrability,"In my program, when running the scene, ""dataVecInForce[0] is nullptr"" appears in the function applyJT. Is it possible that the pointer is empty?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1450:245,message,message,245,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450,1,['message'],['message']
Integrability,"In order for SofaGuiQt to find NodeEditor a custom FindNodeEditorConfig.cmake was created in cmake/Modules but this file was obfuscating the real NodeEditorConfig.cmake that is packaged with the NodeEditor library when trying to find_package it in external plugins. I modified the CMakeLists.txt in sofa/gui/qt/ to use the proper find_package and link correctly to the NodeEditor::nodes target. This PR also fixes some unintentional renamings that were causing compile issue when SOFAGUIQT_ENABLE_NODEGRAPH is set to ON (it would be nice to be able to test this on the CI, or at least to build with SOFAGUIQT_ENABLE_NODEGRAPH=ON so that this doesn't happen again. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1424:763,message,message,763,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1424,1,['message'],['message']
Integrability,"In order to implement damping behavior on a system, we can use rayleigh damping or we can use a more powerful feature, the dissipation potentials. These potentials implement a force that depends on the velocity. . https://par.nsf.gov/servlets/purl/10092361; http://gmrv.es/Publications/2018/SO18/EGauthorGuidelines-sca2018-sub.pdf. The first paper specifies how should these potentials be integrated into an optimization solver and the second one specifies how these potential should be to correctly damp the desired deformation modes. . In particular, we need to compute the dissipation rate, measures as the `dt * R(x, v)`. We also need to compute the damping forces (dR/dv) and the damping hessians (d2R/dvdx and d2R/dv2). With the current implementation of the ForceFields, we can implement the forces and the hessians, but we can't implement the dissipation rate because we don't have access to dt. . The `MechanicalParams` that is passed into the getPotentialEnergy function is the default instance, and that one doesn't have the dt set. . My proposal is to add a getDissipationRate function to the ForceField so we can pass the dt and separate the computation of the potential energy and the dissipation rate.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2335:187,depend,depends,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2335,2,"['depend', 'integrat']","['depends', 'integrated']"
Integrability,In past PR we have removed the use of a Link to store link between two data and we use DataLink instead. ; As Link cannot store anymore a link between Data the type traits code can be removed from Link.h and BaseLink.h. . This is what this PR does (removing the un-needed). . The next step will consist in refactoring the whole Link to separate SingleLink & MultiLink. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1503:470,message,message,470,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503,1,['message'],['message']
Integrability,"In removing the gravity in root node on caduceus.scn scene and then pressing button ""Reset Scene"" the snake disappears and computations falls down in infinite circle with message:. [WARNING] [MinProximityIntersection(Proximity)] WARNING: null distance between contact detected. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/571:171,message,message,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571,1,['message'],['message']
Integrability,"In some (very) rare cases, if the user links two libs (in which was included the header PythonScriptControllerHelper.h), compilation should throw an error of duplicate symbol for PythonScriptController_parametersToVector().; I got the problem while making static libraries. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1036:373,message,message,373,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1036,1,['message'],['message']
Integrability,"In that case why looking for '-' in `read`?; Note the `getUnsignedNumber` could have a signature imposing not to have a '-' in the input string. In `getUnsignedNumber`, the case where there is a '-' is the failing case, when we do not care about perfs (you create an error message , etc.), but in the good case, the one we should not disadvantage, I think it is preferable to check the strtoll sign rather than brassing strings.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302732797:273,message,message,273,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302732797,1,['message'],['message']
Integrability,"In the DEFROST team we need our constraints to provide the computed forces as outputs. These forces are now provided to the constraints using the method `storeLambda()`. . Our constraints node usually looks like this: ; ```; cavity = accordion.createChild('cavity'); cavity.createObject('MechanicalObject'); cavity.createObject('SurfacePressureConstraint'); cavity.createObject('BarycentricMapping', name='mapping', mapForces=False, mapMasses=False); ``` ; As no forces have to be mapped, we set `mapForces=False` to avoid unnecessary computations. Yet in the current code, this disables the call to `storeLambda()`. . This PR changes this behavior by overriding the method `stopAtMechanicalMapping()` of `ConstraintStoreLambdaVisitor`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/854:836,message,message,836,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/854,1,['message'],['message']
Integrability,"In the PR #484, the way of searching the ODESolver in GenericConstraintCorrection changed from ; `c->get(odesolver, core::objectmodel::BaseContext::SearchRoot);`; to; `c->get(odesolver, core::objectmodel::BaseContext::Local);`; In some of our simulations, the GenericConstraintCorrection is located in the root node. And so no ODE solver can be found, and the user can not set it manually. . In this PR: . - Added data d_ODESolverName, to allow user to specify the ODE solver as it is actually done for the linear solvers; - If no ODE solver found using d_ODESolverName, search in ""Local"", then in ""SearchRoot"".; - Some cleaning (including renaming). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/567:750,message,message,750,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567,1,['message'],['message']
Integrability,"In the case the template parameter is in the list of possible template, but is not compatible with the current context, the message said the template is not in the list.; A new message is introduced for this special case. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2262:124,message,message,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2262,2,['message'],['message']
Integrability,"In this PR I do only cleaning:; - replace a bunch of std::cerr, std::cout, prinf to use msg_* instead. ; - remove commented code. If I didn't made mistake nothing should break. CHANGELOG:; [all]:; - remove a lot of commented code. ; - replace std:cerr, std::cout and printf with msg_* . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/339:386,message,message,386,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/339,1,['message'],['message']
Integrability,"In this PR we:; - add difflib in extlibs, difflib is an header only library that allows to make approximated search for string. ; - add sofa::helper::DiffLib to wrap the header only into a sofa looking library. ; - use DiffLib to implement spelling suggestion when a component cannot be created by the ObjectFactory.; Example of output:; ```console; [ERROR] [SofaPython3::SceneLoader] Unable to completely load the scene from file 'toto.py'. ; Python exception: ValueError: Object type MechanicaObject<> was not created ; The object is not in the factory. ; But the following exits: ; : MechanicalObject (98% match); : MappedObject (54% match); : MechanicalStateController (53% match); ```; ; The DiffLib feature is extensively used to implement a much wider spelling suggestion mechanism in SofaPython3.; Have a look at all the examples and use cases in PR https://github.com/sofa-framework/SofaPython3/pull/314. . I'm not using xml scenes so I didn't implemented support for spelling suggestion there. If your are interested in doing such a thing, the SofaPython3 implementation is a good starting point for your PR. . ___________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3042:161,wrap,wrap,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3042,1,['wrap'],['wrap']
Integrability,"In this PR:; - add some pairwise algorithms on fixed_array<> instead of Vec<> so here is an implementation. To avoid adding to the fixed_array.h I use the stl approach of putting that in a separated ""algorithm.h"" file. ; - I then use these to implement an enlightening function in RGBAColor with its unittest. The uses of these will be done in a future PR. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1172:458,message,message,458,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1172,1,['message'],['message']
Integrability,"In this pull request I propose several improvements of the script scn2python.py: ; - Improved the structure of the output file, i.e. for both, the generation of .scn+.py and .py a class python script controller is introduced (before it was only the case for .scn+.py). For .py the function createScene then introduces an instance of the class. Moreover, the script now saves every node in self, s.t. it is not necessary to use getChild.; - In createScene, the command line arguments introduced in #356 are now forwarded to the class (not possible before); - If an xml scene includes another file, the script now locates this file and then introduces all its objects automatically; - In an insertion like the one mentioned in the last point, it can happen, that there are links like '@', are now dealt with the input of the user. I am open for any improvements!; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/387:961,message,message,961,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/387,1,['message'],['message']
Integrability,Including the Message API (Messaging.h) is needed in image so that the compilation can work independently from the activation of SofaPython. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1068:14,Message,Message,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1068,2,"['Message', 'message']","['Message', 'message']"
Integrability,"Info() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platf",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:2975,Message,Message,2975,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,1,['Message'],['Message']
Integrability,"Initially I wanted to fix issue #673 that prevents compilation with gcc > 8.1. But I was not able to prevent myself to refactore the class in the process. . CHANGELOG:; - Move the implementation from .h to .inl; - Move the definition of the inner class FCPHandler from the .h to .inl; - Group the class member according their visibility (public, protected, private) to avoid interleaving.; - Uniformize the source code comments; - Rename the class members (attributes) to make them consistent with the sofa coding style.; - Factorize the code that was ""duplicated"" in the .cpp between rigid3dtype, rigid3ftype, vec3d, vec3f (I welcome an alternative implementation). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/803:766,message,message,766,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/803,1,['message'],['message']
Integrability,"Inside the file defaulttype/CMakeLists.txt, the line; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/../.."")`; should be; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../..>"")`. This error makes IDE based on cmake bleed the symbol indexing since a relative path ""../.."" is wrongly added in the sofa's CMake installed filed:. ```; $ grep -nr ""INTERFACE.*\.\.\/\.\."" build/install/lib/cmake; ./SofaFramework/SofaFrameworkTargets.cmake:66: INTERFACE_INCLUDE_DIRECTORIES ""${_IMPORT_PREFIX}/include;/../..""; ```. If, for exemple, you create an external projet that depends on Sofa, and that this external project is placed inside ~/source/project, than any IDE based on cmake for symbol indexing such as CLion will try to parse ~/source/project/../.. which is the home directory. This will end up take a lot of resources just for symbol indexing of a small project.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/401:447,INTERFACE,INTERFACE,447,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/401,2,"['INTERFACE', 'depend']","['INTERFACE', 'depends']"
Integrability,"Instead of adding `libjpeg` as a dependency on the core of Sofa, I would support doing the opposite, i.e. removing `libpng+zlib` by only keeping the abstract `Image` class in `sofa::helper`, and including the derived classes in plugins, where we could only use by default the Qt-based implementation, so only for projects choosing not to include the Qt GUI they would have to enable the other implementations based on libpng/libjpeg, or CImg, or whatever is easier to integrate, given that it's a nearly trivial piece of code to implement to plug any image library. But it does require to be consistent in the resulting format (in particular whether the data is provided `TopDown` or `BottomUp`).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665:33,depend,dependency,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665,2,"['depend', 'integrat']","['dependency', 'integrate']"
Integrability,"Instead of suggesting to add the required plugins in the XML syntax, the goal is to use the scene loader to adapt the syntax to the type of file. For example, in Python, the message will be:. ```; [WARNING] [SceneCheckMissingRequiredPlugin] This scene is using component defined in plugins but is not importing the required plugins. ; Your scene may not work on a sofa environment with different pre-loaded plugins. ; To fix your scene and remove this warning you just need to cut & paste the following lines at the beginning of your scene: ; root.addObject('RequiredPlugin', name='Sofa.Component.AnimationLoop') # Needed to use components [FreeMotionAnimationLoop] ; root.addObject('RequiredPlugin', name='Sofa.Component.Collision.Detection.Algorithm') # Needed to use components [BVHNarrowPhase,BruteForceBroadPhase,BruteForceDetection,CollisionPipeline] ; root.addObject('RequiredPlugin', name='Sofa.Component.Collision.Detection.Intersection') # Needed to use components [LocalMinDistance] ; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3799:174,message,message,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3799,1,['message'],['message']
Integrability,"Introduce examples scenes for 4 cases of Euler explicit solver:; 1) Mass matrix is not diagonal and Euler is not symplectic: EulerExplicitSolver.scn; 2) Mass matrix is diagonal and Euler is not symplectic: EulerExplicitSolver_diagonal.scn; 3) Mass matrix is not diagonal and Euler is symplectic: EulerSymplecticSolver.scn; 4) Mass matrix is diagonal and Euler is symplectic: EulerSymplecticSolver_diagonal.scn. I did my best to create stable scenes, but it is not that simple with an Euler explicit solver. Especially if not symplectic. It comes at the price of very small time step sizes. This PR is based on #2163. It will need to be updated after #2165 is merged. [ci-depends-on https://github.com/sofa-framework/Regression/pull/15]",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2199:671,depend,depends-on,671,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2199,1,['depend'],['depends-on']
Integrability,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/319:130,interface,interfaces,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319,2,"['interface', 'message']","['interfaces', 'message']"
Integrability,"Introduction of wrappers, derived from `BaseMatrix` and `BaseVector`, to Eigen matrices. The wrappers are courtesy of @jnbrunet, from https://github.com/jnbrunet/caribou, and have been adapted to SOFA + missing functions for CGLinearSolver. `eigen::EigenMatrix` has the interface of `BaseMatrix`, so it can be used as a matrix storing the linear system, in a linear solver.; An example is provided in `CGLinearSolver`. Performances:. Tested on a cantilever beam from `examples/Components/linearsolver/FEMBAR-CGLinearSolver.scn`. **CompressedRowSparseMatrixMat3x3d**; [INFO] [BatchGUI] 1000 iterations done in 2.62389 s ( 381.113 FPS).; ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 2.23 5.32 2.59 0.21 2587.89 100 TOTAL; 1 0 1 2.23 5.31 2.59 0.21 2.59 99.97 .Simulation::animate; 2 0 1 0 0.02 0 0 0 0.04 ..BehaviorUpdatePositionVisitor; 2 0 1 0 0.01 0 0 0 0.05 ..UpdateInternalDataVisitor; 2 0 1 2.21 5.24 2.56 0.21 2.56 99.03 ..AnimateVisitor; 3 0.01 1 2.20 5.24 2.56 0.21 2.56 98.94 ...Mechanical; 4 0.01 1 0.06 0.21 0.07 0.01 0.07 2.60 ....ComputeForce; 4 0.08 1 0.05 0.14 0.05 0 0.05 1.98 ....ComputeRHTerm; 4 0.13 1 0.49 1.58 0.52 0.04 0.52 20.27 ....MBKBuild; 5 0.13 1 0.49 1.56 0.52 0.04 0.52 20.19 .....CG-setSystemMBKMatrix; 4 0.66 1 1.58 4.57 1.90 0.20 1.90 73.45 ....MBKSolve; 5 0.67 1 1.56 4.54 1.88 0.20 1.88 72.80 .....CG-Solve; ```. **CompressedRowSparseMatrixd**; [INFO] [BatchGUI] 1000 iterations done in 4.19299 s ( 238.493 FPS).; ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 3.74 8.41 4.16 0.27 4159.02 100 TOTAL; 1 0 1 3.74 8.40 4.16 0.27 4.16 99.98 .Simulation::animate; 2 0 1 0 0 0 0 0 0.02 ..BehaviorUpdatePositionVisitor; 2 0 1 0 0 0 0 0 0.03 ..UpdateInternalDataVisitor; 2 0 1 3.72 8.36 4.13 0.27 4.13 99.39 ..AnimateVisitor; 3 0.01 1 3.72 8.35 4.13 0.27 4.13 99.33 ...Mechanical; 4 0.01 1 0.06 0.18 0.07 0.01 0.07 1.59 ....ComputeForce; 4 0.08 1 0.05 0.14 0.05 0 0.05 1.21 ....ComputeRHTerm; 4 0.13 1 1.66 5.86 1.72 0.14 1.72 41.42 ....",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2794:16,wrap,wrappers,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2794,3,"['interface', 'wrap']","['interface', 'wrappers']"
Integrability,"Introduction; =========; This PR refactor the class reflection feature. . In this PR didn't removed functionalities but i reorganized, rename and refactor them. . To ease the transition, I have let the old function available with a deprecated message trying at best to preserve feature. When the transitional layer will be removed (in a few month so) you may encounter compilation failure because of function removing, so it is highly suggested to quickly update your code. A dedicated section at the end of this document gives you hints on how to update you code. . Changes:. Move name decoding apsect in a separated file called NameDecoder.h; -------------------------------------------------------------------------------------------; Currently name processing is done in Base. This is generating an not needed noise ; for developper. So I moved all that name's related code into a separated file NameDecoder.h. ; So to get typeName, className, shortName, etc...you can now do:; ```cpp; NameDecoder::getTemplateName<MyObject>();; ``` ; The mecanism to implement custom name or template was too complex than what it should requiring to implement several function (the virtual one and the static one). So I propose here a different implementation where, to customize the template or className you just needs to implement the CustomClassName()/CustomTemplateName() static function in your class ...and everthing will work out of the box. For curious people have look at the SFINAE used to implement that in NameDecoder. The NameDecoder class is now used by the BaseClass to decode names. Remove duplicated custom template name; -------------------------------------------------------; A complete mecanisme is now implemented in the NameDecoder & BaseClass to provide default templateName for sofa object. The underlying idea was to remove the needs to those kind of code ; ```cpp; MyClass : public BaseObject; virtual std::string getTemplateName() const { return ""CustomName""; } ; static std::string t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1283:243,message,message,243,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283,1,['message'],['message']
Integrability,Is it possible to update the glew version distributed in the windows dependencies?. We can get this problem with the actually distributed version 1.13: https://www.khronos.org/opengl/wiki/OpenGL_Loading_Library#Initialization_of_GLEW_1.13.0_and_earlier. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/466:69,depend,dependencies,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/466,1,['depend'],['dependencies']
Integrability,"Is there an Error message when loading the scene, telling that the mesh could not be found?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/746#issuecomment-445826285:18,message,message,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-445826285,1,['message'],['message']
Integrability,Issue #1363. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1365:112,message,message,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1365,1,['message'],['message']
Integrability,"Issue #2402. BarycentricMapping instanciates ""mappers"" according to the topology it is mapping from.; There are direct dependencies on *SetTopologyContainer, and Grids. Morever, it is using as well a few functions from *SetGeometryAlgorithms.; This PR:; - replace the direct usage of *SetTopologyContainer, and uses instead the abstraction TopologyContainer (test if a certain kind of element is present) which should be the same effect;; - move (copy from now) methods from GeometryAlgorithms, into Sofa.Geometry and Sofa.Topology. Those functions are designed to be the most generic possible (but not too much to not have huge/complex template predicates). This ""step-by-step"" process should be the way to convert *GeometryAlgorithms. (and remove this family of component in the future). This PR does not address the issue on the RegularGrid/SparseGrid dependency for now 😥. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2403:119,depend,dependencies,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2403,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Issue detected by @quentinfrancois0. This comes from a change in the Python configuration since the last High Sierra.; The line #include <Python/Python.h> involved a link ""Python"" to the python include, but this is no longer valid in High Sierra. This was causing a fail in the compilation (include not found). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/614:410,message,message,410,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/614,1,['message'],['message']
Integrability,"It allows to differentiate C/C++/CUDA/(maybe other) flags which are passed through dependencies. Fix compilation problem with ; - https://github.com/sofa-framework/sofa/pull/4878; where specific msvc flags are passed to nvcc (and raise errors). This should be propagated in a potential cleaning of SofaCUDA. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4990:83,depend,dependencies,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4990,1,['depend'],['dependencies']
Integrability,"It depends on your Qt version. The actual code is for Qt4 while removing QApplication::UnicodeUTF8 (like in your proposal) is for Qt5. A #ifdef should be added to check the Qt version. But what about renaming ""gridLayout"" in ""_14""?!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/48#issuecomment-261490351:3,depend,depends,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-261490351,1,['depend'],['depends']
Integrability,"It is always the same problem, ; to reduce dependency between software components (header included in header) you may want to use forward declaration.; Such forward declaration allows to write code manipulating pointer or reference to the forwarded declared object. Not doing that requires to include the full definition of the manipulated class. Reducing the amount of edges in the dependency graph favor a good separation between software components, reducing compilation speed and reducing the need to recompile when something change. . D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704962809:43,depend,dependency,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704962809,2,['depend'],['dependency']
Integrability,"It is needed to resolve dependencies when using binaries for dev on Windows. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1718:24,depend,dependencies,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1718,1,['depend'],['dependencies']
Integrability,It is not exporting the target properties and thus the include path. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1457:168,message,message,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1457,1,['message'],['message']
Integrability,"It is probably using the rest area since it is working with a Lagrangian formulation. This is also what we use in other FEM code (tetra and hexa) where the integral is computed on the rest (undeformed) domain. For linear elements (triangle, tetra), it will multiply the integrand with the initial volume (or area for triangle) to get the integral result over an element. For trilinear or higher degree elements, it will use Gauss integration points where derivatives of the shape function, and the determinant of the jacobian of the transformation matrix are computed at the initial (undeformed) domain. Kinematics quantities from the current state are transformed into the initial domain using a transformation matrix. . I would therefore think that the `TriangleFEMForceField ` is the ""good"" one in the sens that it is following the big majority of SOFA code with a Lagrangian formulation. . You could always compare the result against another FE software such as FEBio and FEnIcs which are free. I can help you with that if you want.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1063094133:430,integrat,integration,430,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1063094133,1,['integrat'],['integration']
Integrability,"It is useful to be able to load shaders directly from a std::string as it allows us to not need filesystem management. Consequently ""fixed"" shaders like shadows (or normal rendering when OpenGL Core profile will come) will be directly integrated into the libs (no more share/shaders directory to locate/find/read). [needed to solve #142 ]. Checklist to merge this PR: ; - [x] succeed on each compilation setup on the CI ; - [x] does not generates new warnings or test failure ; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] cleans stuff; - [x] have tests on the introduced features. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/158:235,integrat,integrated,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158,1,['integrat'],['integrated']
Integrability,"It is very useful to store and be able to retieve, for each object/node ; where it is implemented and where it was instanciated. This PR implements that. Having this allows to implement cool feature like in to jump from the selected object/node in scene graph straight in the scene file (python or xml) or to the implementation file (cpp or python). . We have such a feature in SofaQtQuick. We will backport this feature in a second PR soon. . The change in dmsg_* are a ""passager clandestin"" but a small one :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1012:612,message,message,612,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1012,1,['message'],['message']
Integrability,"It really appears as a proof of concept.This work will be very useful, especially regarding the recent discussion on matrix formats in SOFA relying on Eigen. Handles here only one type Eigen. Double/Float compatibility depending on SOFA compiling options (adjust with template): Vec3 or Real. Let’s make it explicitly only for double. A test is also needed here (e.g. AbstractTypeInfo). We need in a future.a more generic way for other Eigen types.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-708261022:219,depend,depending,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-708261022,1,['depend'],['depending']
Integrability,"It seems fine now.; Only the message does not appear yet, I get as long as the PR is not merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4079#issuecomment-1701791951:29,message,message,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4079#issuecomment-1701791951,1,['message'],['message']
Integrability,"It seems that Color has been deprecated a long time ago (git blame shows 03/2017 for the message). And some stuff (ctor/dtor/set()) are even not defined in the cpp. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4264:89,message,message,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4264,1,['message'],['message']
Integrability,"It seems that the dependency of SofaPhysicsAPI to SceneCreator needs to be fixed.; `; SofaPhysicsSimulation.cpp:49:10: fatal error: '../plugins/SceneCreator/SceneCreator.h' file not found; #include ""../plugins/SceneCreator/SceneCreator.h""`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731:18,depend,dependency,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731,1,['depend'],['dependency']
Integrability,"It should be zero by default in my opinion. ; There is also a little confusion because there are currently two ways to specify the rayleigh damping parameters. ; If you use `EulerImplicitSolver` rayleigh damping is specified at the solver level. ; However both the `ForceField` and `Mass` API in SofaCore also implements rayleigh damping... provided you use `kfactorIncludingRayleighDamping` instead of `kfactor` when assembling the stiffness and the mass. This changed was introduced quite a long time ago, because in the Compliant plugin, the solvers for time integration do not implement global Rayleigh damping, but a more ""local"" one, delegated to each of the `Mass` and `Forcefield` components. ; So short answer is : yes should be zero. But it could break a **lot** of scenes that extensively rely on the default damping values to actually work... which mostly happens when you do not pay attention about the unit system you want to use in your scene ( e.g meters and kilograms versus millimetres and grams ) . I would also like to have the opinion of someone knowledgeable in that particular area. Rayleigh stiffness factor, contrary to Rayleigh mass factor, is not unit less. It is s^-1 as far as I can remember. Would it be better to specify it as unit less factor instead (and then have it internally divided by the current time step value), so that the value has a sort of consistent meaning regardless of the time step chosen ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803:562,integrat,integration,562,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803,1,['integrat'],['integration']
Integrability,"It started from the case where SparseGrid could not open .OBJ files (because it is upper case 🐶 ); Now SparseGrid relies on the FactoryMesh mechanism for its extension management. BUT MeshOBJ is super deprecated, and the legacy helper::io::MeshLoader (not the one in sofa::core::loader) should be not used anymore.; BUT SparseGrid does not really handle src=""@loader"" syntax very well now, and it will be upgraded in the future. . I added some tests anyway 💛 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1231:560,message,message,560,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1231,1,['message'],['message']
Integrability,It took me time but I think I finally got the working of the collision responses stuff. As this PR change the way the component behave do you think it is possible to detect when a scene is using the old-style to print a warning message telling the users to update their scene ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/91#issuecomment-265487181:228,message,message,228,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/91#issuecomment-265487181,1,['message'],['message']
Integrability,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/337:623,message,messages,623,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337,4,['message'],"['message', 'messages']"
Integrability,"It was already marked deprecated but only in the documentation (comment).; It must be deprecated because it duplicates the functionality of two other visitors. It is clearer to call the two other visitors. In GenericConstraintSolver, `buildSystem_matrixAssembly` is divided into `parallelBuildSystem_matrixAssembly` and `sequentialBuildSystem_matrixAssembly` depending on the value of `d_multithreading`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3393:359,depend,depending,359,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3393,1,['depend'],['depending']
Integrability,"It was not possible to compile runSofa without activating SofaGuiQt, because GuiDataRepository was instantiated in SofaGuiQt library.; As GuiDataRepository seems to be rather generic and not tied to Qt, GuiDataRepository has been moved to SofaGuiCommon ; and allows runSofa to be compiled without enabling SOFA_GUI_QT. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599:418,message,message,418,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599,1,['message'],['message']
Integrability,"It was reported that include_guard(GLOBAL) is problematic with third-party plugins so let's go back to the ""normal"" version. Signed-off-by: Damien Marchal <damien.marchal@univ-lille1.fr>. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1467:287,message,message,287,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1467,1,['message'],['message']
Integrability,"It's not perfect. The progress bar interacts with console messages (`msg_info`, `std::cout` etc), but it behaves well when the message is longer than the progress bar. Otherwise, both are mixed on a single line. It still does not behave correctly after a ctrl+c in a infinite loop (`runSofa -n infinite`). I also made some threading experiment in the case of infinite loop but no success. I wanted to add a command line option to hide the progress bar if needed. I wanted to add it only for BatchGUI, but it seems that parsing crashes for unkown arguments (the loading of the gui is after the parse). Maybe the help of @fredroy would be needed here (if we decide to go on).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089:58,message,messages,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089,4,['message'],"['message', 'messages']"
Integrability,"Just a minor fix, as the `VecXTypes` are not visible without the explicit namespace. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1188:184,message,message,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1188,1,['message'],['message']
Integrability,Just a note for the reviewers: SubsetMultiMapping was moved to SofaBaseMechanics for dependency reasons (but the problem will be solved in the new sofang architecture a priori),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1034734654:85,depend,dependency,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1034734654,1,['depend'],['dependency']
Integrability,Just adding a small helper function I'm using in [PR #33](https://github.com/sofa-framework/SofaPython3/pull/33). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1436:213,message,message,213,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436,1,['message'],['message']
Integrability,Just backporting small changes made on our dev branch... Plz merge quickly :D. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1169:178,message,message,178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1169,1,['message'],['message']
Integrability,Just in case someone have doubts:. **BaseContext.cpp** (line 172); ```cpp; /// Mesh Topology (unified interface for both static and dynamic topologies); core::topology::BaseMeshTopology* BaseContext::getMeshTopology(SearchDirection dir) const; {; return this->get<sofa::core::topology::BaseMeshTopology>(dir);; }. core::topology::BaseMeshTopology* BaseContext::getMeshTopologyLink(SearchDirection dir) const; {; return this->get<sofa::core::topology::BaseMeshTopology>(dir);; } ; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605872827:102,interface,interface,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605872827,1,['interface'],['interface']
Integrability,Just not 100% sure for LCPcalc.h and OglModelPolicy.h ; Else we should get back to original warning number. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1421:207,message,message,207,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1421,1,['message'],['message']
Integrability,"Just passing by, I do not want to raise a flame war but actuall asin method has some documentation,; espcially when it comes to domain error:; http://www.cplusplus.com/reference/cmath/asin/; Just quoting; . > If a domain error occurs:; > - And math_errhandling has MATH_ERRNO set: the global variable errno is set to EDOM.; > - And math_errhandling has MATH_ERREXCEPT set: FE_INVALID is raised. Then looking at ; http://www.cplusplus.com/reference/cmath/math_errhandling/; The default behavior for math_errhandling is MATH_ERRNO, so as the doc suggest you can just check for the errno (thread-local) global variable value, and if it is set to EDOM after asin is called, then you can throw whatever error message you want. This is probably not relevant here, since I presume the checks are there because in theory when a quaternion is normalized the value of ; `Real(2.)*(q[3]*q[1] - q[2]*q[0])` ; should always belong to the range [-1;1]. The only reason it might not be is for some numerical drifting issues (?); Provided this assumption is correct you are indeed totally allowed to clamp the values there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942:704,message,message,704,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942,1,['message'],['message']
Integrability,Just removing unnecessary headers include inside header in sofa::core; No forward class or intelligent refactoring. any suggestion/remark is welcomed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/638:252,message,message,252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/638,1,['message'],['message']
Integrability,Just tested it on Windows and it's indeed a mess. | | QGLViewer | QtViewer |; | ----- | ----- | ----- |; | S key | - Opens a dialog to save a screenshot next to runSofa executable<br>- Opens a 2nd dialog for image settings<br>- Captures the viewer only<br>- Crashes if file exists | - Quietly saves a screenshot in the screenshots folder<br>- Captures the whole interface |; | Screenshot<br>button | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the whole interface<br>- Repeats 3 times | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the viewer only<br>- Repeats 2 times |. Which behavior is the right one? :laughing:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838:362,interface,interface,362,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838,2,['interface'],['interface']
Integrability,Just wanted to see how we could clean Quater. There is obviously a lot to do. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/842:179,message,message,179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/842,1,['message'],['message']
Integrability,"Last big one. #1527 . based on:; - #2790 . and needs :; - #2766 . Deprecates **_SofaBaseCollision_**, **_SofaMeshCollision_**, **_SofaGeneralMeshCollision_**, **_SofaObjectInteraction_**; Deprecates partially **_SofaConstraint_**, **_SofaUserInteraction_**. Split Collision-related components into 3 categories:; - ~~**Model**~~ **Geometry**: with all the collision models (sphere model, point model, triangle model....); - **Detection**: subdivided in 2 other categories: ; - **Algorithm**: narrow, broad phases implementation; - **Intersection**: how to compute intersections between models; - **Response**: subdivided in 2 other categories: ; - **Mapper**: how to map a contact between 2 objects (rigid, bary, etc); - **Contact**: how to handle a contact itself (create spring, constraint, etc). EDIT:; ~~[ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/239 ]~~. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2813:812,depend,depends-on,812,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2813,1,['depend'],['depends-on']
Integrability,Last but not least PR on SPH plugin to restore ParticleSink component.; - Move all code inside inl file; - Fix the extern template; - Add prefix d_ to data; - Fix global behavior; - Update the existing basic example scene ; - Add 2 others scenes using Topology changes and OglFluid rendering done in previous PR. ![ezgif com-crop](https://user-images.githubusercontent.com/21199245/67562701-8b063f00-f71f-11e9-9e0b-d72e2a0f347a.gif). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1195:533,message,message,533,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1195,1,['message'],['message']
Integrability,"Last soft dependencies (headers) in SofaCore:; - BaseContext just needs a forward declaration from Visitor (allowing removal of simulation/fwd.h); - ScriptEvent to use BaseNode from core instead of Node; - removing a large chunk of code in Pipeline (disabled with ```if 0``` since [a commit 14 (!) years ago](https://github.com/fredroy/sofa/commit/d29dc273dbf3c434a2de5434f39cfcee68ee8e24) whose goal was to do the same as this commit !); - some cleaning here and there. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1928:10,depend,dependencies,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1928,1,['depend'],['dependencies']
Integrability,"Last step to complete the task to unify the image importing process. Now that CImgPlugin is integrated, ImageBMP/ImagePNG and ImageQt can be removed from the trunk of Sofa. ; It lets all the responsibility of reading images to CImgPlugin (or any user custom plugin). (closes finally #9 and #51 ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/424:92,integrat,integrated,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424,2,"['integrat', 'message']","['integrated', 'message']"
Integrability,Last uses of variable manually defined 3.14... ( for #799 ); Now uniformly using M_PI. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1264:186,message,message,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1264,1,['message'],['message']
Integrability,Let's fix them all !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/773:121,message,message,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/773,1,['message'],['message']
Integrability,"Let's move modules to plugins!. As pluginizing is a big hard for a coding sprint, we will mainly do preparatory work for future pluginization.; This means:; - [x] Solve SceneCreator dependencies problem; - [x] Identify at least one module to pluginize; - [x] If we have time, pluginize a module",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/427:182,depend,dependencies,182,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427,1,['depend'],['dependencies']
Integrability,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106:77,message,messages,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106,9,"['Message', 'message']","['MessageHandler', 'message', 'messages']"
Integrability,"Let's try this small scene; ```xml; <?xml version=""1.0"" ?>; <Node name=""root"" >; <MergeVectors template=""tartempion"" name=""merge"" nbInputs=""2""/>; </Node>; ```; No error is triggered on the console, and obviously ""tartempion"" is not a valid template; However in debug, I can follow up to the line where a message is sent to object->serr in ObjectFactory.cpp around line 174; if (!usertemplatename.empty() && object->getTemplateName() != userresolved) {; object->serr << ""template <"" << usertemplatename << ""> incorrect, used <""; << object->getTemplateName() + "">"";; }. maybe s.t. related to logging not initialized in the object at that time ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/378:304,message,message,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378,1,['message'],['message']
Integrability,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/297:269,message,message,269,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297,1,['message'],['message']
Integrability,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/298:269,message,message,269,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298,1,['message'],['message']
Integrability,"Like the port salut, everything is in the title. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/764:150,message,message,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/764,1,['message'],['message']
Integrability,Linked to the #597 and all Data dependency and Data update topics.; A proof of concept of a visitor-less SOFA could ease a lot next steps on these topics. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1340:32,depend,dependency,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1340,1,['depend'],['dependency']
Integrability,"LocalMinDistance is printing a msg_warning when the lines are parallel.; This is a legitimate case that is properly handled in the rest of the code; so I and @EulalieCoevoet removed the message and document a bit the code while I was trying; to understand it. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2976:186,message,message,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2976,1,['message'],['message']
Integrability,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:572,message,message,572,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168,3,['message'],['message']
Integrability,"METIS and CSPARSE are used for sparse solvers. However, they can be better integrated. # METIS; - it could be useful to isolate METIS. Currently, it is an extlib in SofaSparseSolver. So, it is necessary to `find_package` SofaSparseSolver in order to link with METIS.; - The developer has the choice to use its own METIS library if it is in his PATH, or to use the one in extlib. For consistency between users, only one option could be considered.; - METIS library can be updated: a newer version of METIS is available on https://github.com/KarypisLab/METIS. # CSPARSE. - it could be useful to isolate CSPARSE. Currently, it is an extlib in SofaSparseSolver. So, it is necessary to `find_package` SofaSparseSolver in order to link with CSPARSE.; - CPARSE has been modified for our purpose. What are the changes? It prevents to update the lib. Would it be possible to keep the original CSPARSE library and isolate our modifications?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2767:75,integrat,integrated,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2767,1,['integrat'],['integrated']
Integrability,MacOS crashes in batch mode were due to FrameBufferObject constructor calls during simulation construction.; Fixed by moving those constructor calls to `initVisual()` using `std::unique_ptr`. WARNING: I changed VisualManagerPass::getFBO(). [See here](https://github.com/sofa-framework/sofa/commit/e910ec1e91e667ce213caeece639120598881940#diff-74e00cdcc25741750d2ed4f6b53398a7R93). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/646:480,message,message,480,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/646,1,['message'],['message']
Integrability,"Mainly add error messages when calling currentGUI. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4967:17,message,messages,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4967,1,['message'],['messages']
Integrability,"Manual merge to close PR #218 ; Only one commit was not integrated: (MechanicalMatrixVisitor and MechanicalOperations) fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node. -- Notes:. This PR will be further discussed during STC#3. ## issofa_bugfix. ### Cleans; - BaseObject: Output message in serr for required datas. Error word should be reserved for messages that will make the application fail.; - RayTriangleVisitor and SceneLoaderFactory: clean warnings; - ParticlesRepulsionForceField: Add empty implementation of addKToMatrix to get rid of console warnings. ### Bugfixes; - AttachConstraint: fix crash when indices are resized; - BTDLinearSolver: fix constant log + operator new [] vs operator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/756:56,integrat,integrated,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756,3,"['integrat', 'message']","['integrated', 'message', 'messages']"
Integrability,Many scenes were still using the deprecated: Rigid template/; Now use Rigid3d. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1295:178,message,message,178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1295,1,['message'],['message']
Integrability,Maybe warning and deprecated messages should not be seen as failure by default?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291901215:29,message,messages,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291901215,1,['message'],['messages']
Integrability,"Maybe we could:; - try to load CImgPlugin by default in runSofa and if it doesn't warn user that textures may not be loaded properly; - if the image factory is not able to load an image either print a warning message or ; try to automatically load the CImgPlugin, print a warning and retry.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263:209,message,message,209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263,1,['message'],['message']
Integrability,MechanicalObject : dependency to TopologyData,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242:19,depend,dependency,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242,1,['depend'],['dependency']
Integrability,MeshTopology doesn't load the topology from the mesh loader implicitely anymore. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1273:180,message,message,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1273,1,['message'],['message']
Integrability,"Message before was:; ```[INFO]    [TopologyHandler] Topology: lines is not dynamic, topology engine on Data 'indices' won't be registered.```. Now looks like:; ```[INFO]    [TopologyHandler] The TopologyDataHandler( FixedConstraint ) managing the TopologyData 'indices' won't be registered because linked topology 'lines' is not dynamic. Topological changes won't be supported by this Data.```. Also this message only pop up if component owner is not muted (printLog == true). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3142:0,Message,Message,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3142,2,"['Message', 'message']","['Message', 'message']"
Integrability,"Message before:; ```; CMake Warning at C:/projects/sofa-src/Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:454 (message):; Deprecated macro. Use 'sofa_add_subdirectory(plugin ...)' instead.; Call Stack (most recent call first):; C:/projects/sofa_plugins/CMakeLists.txt:19 (sofa_add_plugin); ```. Message after:; ```; CMake Warning at C:/projects/sofa-src/Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:454 (message):; Deprecated macro 'sofa_add_plugin'. Use 'sofa_add_subdirectory(plugin caribou caribou)' instead.; Call Stack (most recent call first):; C:/projects/sofa_plugins/CMakeLists.txt:19 (sofa_add_plugin); ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3611:0,Message,Message,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3611,4,"['Message', 'message']","['Message', 'message']"
Integrability,Message has been added by @marques-bruno looks good to me know.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666225397:0,Message,Message,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666225397,1,['Message'],['Message']
Integrability,"Message refers AsyncMatrixLinearSolver, but it's MatrixLinearSolver. And specifying the class name is not necessary with the msg_* API. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2781:0,Message,Message,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2781,1,['Message'],['Message']
Integrability,"Message was always saying that Sofa.GL was not found as the find_package() was done later; Set a STATUS/WARNING level in the same time. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3549:0,Message,Message,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3549,1,['Message'],['Message']
Integrability,MessageDispatcher creates a segfault on OSX when an error is dispatched on static call,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/636:0,Message,MessageDispatcher,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/636,1,['Message'],['MessageDispatcher']
Integrability,Method doCarve in CarcingManager should be called at AnimateEndEvent and not at CollisionEndEvent to avoid any topology synchronization error during step. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1532:120,synchroniz,synchronization,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1532,2,"['message', 'synchroniz']","['message', 'synchronization']"
Integrability,"Method initTopology was not called if the topology is empty at start. For example if we start with a cloud of points. . And initTopology methods are chained called to initialize topology from lower level. For example Tetrahedron initTopology will call triangle version, then edge and finally pointTpology. Each initTopology is used to initialize buffers and cross buffer only if the topology is not empty. Therefore in this special case the number of points was not well init for an empty topology. This fix #3211 . [ci-depends-on https://github.com/sofa-framework/Regression/pull/34]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3216:520,depend,depends-on,520,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3216,1,['depend'],['depends-on']
Integrability,"Metis and CSparse are always required by SofaSparseSolver, no need have their find_package in if blocks. Thanks @AlbanOdot for spotting the issue :beers: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1437:255,message,message,255,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1437,1,['message'],['message']
Integrability,"Metis is installed only in the folder of the first plugin fetching it. Making the other one fail to find it. Moving it into the main folder with CMake is not really meaningful. The plugin should not fix something that is at higher level in the CMake hierarchy as itself (aka, fix install issue when another target depends on one of its dependency)... . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4767:314,depend,depends,314,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4767,2,['depend'],"['dependency', 'depends']"
Integrability,Minor PR fixing some warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/739:130,message,message,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/739,1,['message'],['message']
Integrability,"Minor PR just allowing the messages (msg_info) of **VTKExporter** of being indeed outputed; To do this, I just activated the _printLog_ flag for msg_info. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/553:27,message,messages,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/553,2,['message'],"['message', 'messages']"
Integrability,Minor changes in RestShapeSpringsForceField. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1431:144,message,message,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1431,1,['message'],['message']
Integrability,"Minor commit to improve messaging when image cannot be loaded.; Before : no error, no message, no hints for available extensions to use. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/503:86,message,message,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503,2,['message'],['message']
Integrability,"Minor remaining change use pre processor #if condition instead of #ifdef (since it allows to detect more various cases: is defined and true, defined and false or undefined); CGAL : remove changes and integrate changes from #1308; → back to wip",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607121544:200,integrat,integrate,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607121544,1,['integrat'],['integrate']
Integrability,Minor warning fixes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1388:120,message,message,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1388,1,['message'],['message']
Integrability,Modify the mapper in tetra barycentric mapping in order to listen for topological changes and only compute the added points. Previously the behaviour was to call reinit and recompute all the barycentric coordinates for the entire mesh at each topological modification. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1203:368,message,message,368,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1203,1,['message'],['message']
Integrability,Module are systematically compiled which have a sensible impact to Sofa. ; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they ; don't need. In this PR I'm moving SofaMiscCollision & SofaSphFluid. ; I made the two because there is a dependency between them. ; There should be no big problem with this PR. ; But in the main CMakeList.txt I change the order of subdirectories so that plugins are before scenecreator. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/407:276,depend,dependency,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"Most of ForceFields relying on FEM need to access the topology. In SOFA, the codes often access the topology through the context (which hides the user the dependency). As in the PR #973 the link to the topology should be more explicit (through a Data available to the user), not only through the context. Should we need a intermediate layer ForceFieldOnTopology or ForceFieldFEM implementing this API ?; Let's discuss it. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/979:155,depend,dependency,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979,1,['depend'],['dependency']
Integrability,"Most probably another package is adding the includes for SofaBaseMechanics but not the library. . Actually, I have `SofaBaseMechanics` in my list of targets. ```; add_library(VNCS INTERFACE ${HEADERS}); target_link_libraries(VNCS INTERFACE; SofaCore; SofaBaseMechanics; SofaBaseTopology; Eigen3::Eigen; CGAL::CGAL; range-v3::range-v3; spdlog::spdlog; Eigen3::Eigen; nlohmann_json::nlohmann_json; ). add_library(VNCS2D SHARED ${SOURCES} ${HEADERS} ${PUBLIC_HEADERS}); set_target_properties(VNCS2D PROPERTIES PUBLIC_HEADER ""${PUBLIC_HEADERS}""); target_link_libraries(VNCS2D PUBLIC VNCS); ```. What I found when trying to workaround this is that the MechanicalObject was `extern` instantiated for the Vec2 and friends. I had to explciitely instantiate in my library.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1752#issuecomment-780759216:180,INTERFACE,INTERFACE,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1752#issuecomment-780759216,2,['INTERFACE'],['INTERFACE']
Integrability,"Mostly cleaning of the GUI `HeadlessRecorder`, but it also adds support for background color. In the future, I suggest to move `GLBackend` out of the qt namespace/folder, so it can be used in `HeadlessRecorder`. A lot of code can be shared between both, and `GLBackend` is not dependant on Qt. I'll create an issue. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2058:277,depend,dependant,277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2058,1,['depend'],['dependant']
Integrability,"Move Flexible code (and its history) to its own repository : https://github.com/sofa-framework/Flexible; And the same with Compliant: https://github.com/sofa-framework/Compliant. CI has been updated so it should fetch and enable those two plugins. EDIT: adding one more repo, RigidScale, as it is 100% depending on those two plugins. (#1527 , #1442); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1873:302,depend,depending,302,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1873,1,['depend'],['depending']
Integrability,"Move Material.h and PrimitiveGroup from SofaCore to SofaHelper. ; This move was needed as it was causing a backward dependency (ie. SofaHelper depending on SofaCore) ; I also removed the SofaDefaultType/Vector3Types... which was flagged for deprecation after 2018 :). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1686:116,depend,dependency,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1686,2,['depend'],"['dependency', 'depending']"
Integrability,Move TaskScheduler files from Multithreading plugin to Sofa Kernel. This change allows any plugins to use the TaskScheduler without adding the dependency on the MultiThreading plugin. The MultiThreading plugin will be a collection of components using the TaskScheduler to parallelize some computation. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/805:143,depend,dependency,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/805,2,"['depend', 'message']","['dependency', 'message']"
Integrability,Moved function definitions from .h to .inl. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/907:143,message,message,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907,1,['message'],['message']
Integrability,Multi-Mesh loader design (Assimp plugin integration),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/602:40,integrat,integration,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602,1,['integrat'],['integration']
Integrability,Multiple users complained about errors that actually are not errors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/607:168,message,message,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607,1,['message'],['message']
Integrability,Multithreading task scheduler interface,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/774:30,interface,interface,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/774,1,['interface'],['interface']
Integrability,"My bad for Windows error, the dependency pack was updated too soon. #566 needs to be merged. In the meantime I restart your build with the old dependency pack ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900:30,depend,dependency,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900,2,['depend'],['dependency']
Integrability,My biggest contrib' so far!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1475:128,message,message,128,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1475,1,['message'],['message']
Integrability,My most important PR so-far. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1519:128,message,message,128,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1519,1,['message'],['message']
Integrability,"My point is that the discussion is not whether or not a PR can be breaking or not...because on that everyone agrees...the conclusion is that of course a PR can be breaking.; ; The real discussion is more on:; - how do we manage breaking change to avoid messing others code base and activity because of a sudden change. On that, please have a look at PR #329 ; - what kind of integration & merge flow we can have to facilitate merging of complex/changing PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/318#issuecomment-315894097:375,integrat,integration,375,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-315894097,1,['integrat'],['integration']
Integrability,"My take on this:. The CG solver should stay what it is: a linear solver. It should be up to the one using it (ODE solver) to set up the equations, both in LHS/RHS assembly, and application of _mechanical_ projections such as fixed constraints. The only projection a linear solver should make itself, in my opinion, is one that only depends on the shape of the system matrix itself, such as numerical ordering projections (AMD, metis, ...). Anything else made from ""contextual"" decisions (for example, mechanical constraints) should not be made by a linear solver.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2074#issuecomment-842071573:332,depend,depends,332,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2074#issuecomment-842071573,1,['depend'],['depends']
Integrability,"NOTE: the **template=""NewMat""** for both CGLinearSolver CholeskyLinearSolver will now NEED the package SofaDenseSolver. #1298 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1299:227,message,message,227,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1299,1,['message'],['message']
Integrability,Name / link change : ; - from https://github.com/sofa-framework/plugin.HighOrder; - to https://github.com/sofa-framework/SofaHighOrder. More info: https://github.com/sofa-framework/plugin.HighOrder/issues/5. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1430:307,message,message,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1430,1,['message'],['message']
Integrability,"Naming components was not consistent:. - XML used a 'load-time' helper to name the components: the class name of the component + a counter for a unique name; - Python used the class name only; - C++ instantiations: either the class name or a hard-coded value. This is now unified using the singleton `sofa::core::NameHelper`. It applies the XML method: the class name + a counter. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/228]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631:385,depend,depends-on,385,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631,1,['depend'],['depends-on']
Integrability,"Necessitate to update the CI: see https://github.com/sofa-framework/ci/pull/19. [ci-depends-on https://github.com/SofaDefrost/STLIB/pull/106]; [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/354]; [ci-depends-on https://github.com/SofaDefrost/SoftRobots/pull/222]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882:84,depend,depends-on,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882,3,['depend'],['depends-on']
Integrability,Need to handle circular callback (cross-dependency),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2173:40,depend,dependency,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173,1,['depend'],['dependency']
Integrability,"Needed for binaries dependency management. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1720:20,depend,dependency,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1720,1,['depend'],['dependency']
Integrability,"Needs #1408 ; OglModel recomputes its internal data on topology change. There's 2 things I need review for here:; 1. which initialization methods should be called to properly update an OglModel? Currently, I'm calling more or less the whole thing: delete buffers, then init / reinit / initVisual & updateBuffers. Not sure all of them are necessary; 2. Which datafields should be taken into consideration for a total reinit:; Ideally I'd like to trigger the full update of the OglModel only when a change in the loader triggers the recomputation: positions can vary during simulation and shouldn't trigger a reload of the component.; Edges / triangles & other topological info change when the loader changes geometry, but could also change during a topological change for instance, and in that 2nd case shouldn't trigger a reload from the loader, whose topology isn't up-to-date anymore. This component needs heavy restructuring I believe if we want to handle proper data update using callbacks, and might be a good example for other components if we do it right. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1423:1162,message,message,1162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1423,1,['message'],['message']
Integrability,"Needs https://github.com/sofa-framework/sofa/pull/4917 to make all tests pass successfully. In the spirit of #3900 and following #3924, this PR applies the change on the MeshMatrixMass. To be noted:; - the `componentState` must be added to trigger the callback (done in `addMDx()`, `addMToMatrix`, `accFromF` and `buildMassMatrix`); - this PR does not solve the problem of circular dependency referred in #2173. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3928:382,depend,dependency,382,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3928,1,['depend'],['dependency']
Integrability,"New library to factorize the functions that will be called for the tests of BaseMatrix.; Need the INTERFACE CMakeMake keyword to compile a ""header-only library"". Did you intend to add any further features/functions/codes in the PR @alxbilger ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892494390:98,INTERFACE,INTERFACE,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892494390,1,['INTERFACE'],['INTERFACE']
Integrability,"Nice poll ! <3. I would like to add few details about the communication plugin. It´s not only adding new protocols in it. As you know, the communication plugin is in an experimental state and it´s not push into sofa-framework. . The purpose of this gsoc project is, of course, adding new protocols, but also polish it, fix bugs, make it works on CI (linux+windows+mac). And we hope it gonna be ready for merge after the gsoc event (in case if we are selected :p)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414:105,protocol,protocols,105,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414,2,['protocol'],['protocols']
Integrability,"Nice, . I'm happy someone make some proposal on this topic. I think we should factor the common messages, I don't think message.h/cpp is the right place for that. . I would put that either in separated place like containing only message: ; - SofaCore/MessageLoader.cpp/h; - SofaCore/MessageBaseObject.cpp/h ; Or in the source code in the base class for the loaders. . Alternative: use a real text-framework that is suppose to externalise all the texts from the source code (to internationalize Sofa...but this wuold be time consuming work). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232:96,message,messages,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232,5,"['Message', 'message']","['MessageBaseObject', 'MessageLoader', 'message', 'messages']"
Integrability,"No ""no-go"" message...so I assume this one is ok and will merge it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336393253:11,message,message,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336393253,1,['message'],['message']
Integrability,No idea if this header is really needed with OCC < 7.4. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1310:155,message,message,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1310,1,['message'],['message']
Integrability,"No idea why LMDNewProximityIntersection is in SofaConstraint. nothing to do with constraint but anyway. ~~This work started from the fact that {Point/Line/Triangle}CollisionModel have a dependency on {Point/Line/Triangle}LocalMinDistanceFilter.~~. ~~These filters are only used by LMDNewProximityIntersection, which has naturally NO example scene and no doc 😛; After creating a scene (inspired from TriangleModel.scn), LMDNewProximityIntersection :~~; - ~~is not checking at all if there is a filter for each collision model (crashes like a charm)~~; - ~~point/line filters cannot work (infinite loop)~~; - ~~displays a lot of debug for fun~~. ~~After fixing (totally randomly), I have finally implemented what I wanted from the start, which was lettingLMDNewProximityIntersection managing the filters, and not the CollisionModel themselves. ; Bonus point, it checks if there is a filter for each collision model and is set to Invalid if not (should not crash then)~~. ~~I really wondered whether or not simply deleting this Intersection (and the associated LMDFilter) as the latest meaningful commits were clearly stating it was a work in progress. But it seems to work so thats why I kept it (and by pity as well).~~. ~~@ChristianDuriez whats your opinion on this component ?~~. EDIT: After a meeting with other sofa-dev guys, it has been decided to totally remove this component from the code base, as there was no example, no test and it was even not working before this PR.; As such, I removed:; - LMDNewProximityIntersection ; - Point/Line/TriangleLocalMinDistanceFilter; - and the newly created example.; I let the headers to inform the eventual unfortunate user that these headers must not been used anymore, and update the ComponentChange list. I have squashed the first commit, so IF ONE DAY, people wants to resurrect this code (which was working in the end), one can just come back to the commit https://github.com/sofa-framework/sofa/pull/2272/commits/0d9a1af8d14b1fa508400b05b83588a9d704",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2272:186,depend,dependency,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2272,1,['depend'],['dependency']
Integrability,"No information is given when the initExternalModule entry point is called.; For 99.999% of the plugins, there is nothing special in it but some (SofaPython3, I am looking at you) is doing a lot of ""failable"" things when it is called.; This PR is a potential solution to this problem, by adding a (optional) entry point to check if the plugin reports by itself that it was loaded successfully. This allows SOFA to not crash if a problem arises in SofaPython3 when calling PythonEnvironment::Init() . It is not really necessary for the ""ci depends on"" as the two PR can compile without needing the other one; but it makes sense to merge them in the same time I think. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/210]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2425:538,depend,depends,538,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2425,2,['depend'],"['depends', 'depends-on']"
Integrability,No need to this PR anymore...because it was for integration into stc5 branch. I will re-open a new one against master.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/836#issuecomment-444484072:48,integrat,integration,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/836#issuecomment-444484072,1,['integrat'],['integration']
Integrability,"No problem, I just wanted to announce that I solved it, so devs don’t have ; to bother with it, I will add solution and close it when I get home. Have a nice day,; Michal. ---------- Původní e-mail ----------; Od: Alex Bilger ***@***.***>; Komu: sofa-framework/sofa ***@***.***>; Datum: 18.04.2024 09:38:09; Předmět: Re: [sofa-framework/sofa] Sofa compilation in provided docker ; (Issue ; #4656). "". Hey @majklost(https://github.com/majklost),. Could you add more details? Which target? Because it is already added here :; https://github.com/sofa-framework/sofa/blob/7ac489fdaaa782a0d3a86fd02cb046d; 59ca2d784/Sofa/GUI/Qt/CMakeLists.txt#L49; (https://github.com/sofa-framework/sofa/blob/7ac489fdaaa782a0d3a86fd02cb046d59ca2d784/Sofa/GUI/Qt/CMakeLists.txt#L49). Thanks. —; Reply to this email directly, view it on GitHub; (https://github.com/sofa-framework/sofa/issues/4656#issuecomment-2063222869); , or unsubscribe; (https://github.com/notifications/unsubscribe-auth/AO5ITU2OYXLGAPR3TOEC673Y55Z5VAVCNFSM6AAAAABGKDW75SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDANRTGIZDEOBWHE); .; You are receiving this because you were mentioned. Message ID: <sofa-; ***@***.***>. """,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4656#issuecomment-2063226493:1132,Message,Message,1132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4656#issuecomment-2063226493,1,['Message'],['Message']
Integrability,No support of thread local vars in mac_Clang 3.5 compiler.; This looks like a mac_Clang 3.5 compiler limitation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/727:212,message,message,212,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727,1,['message'],['message']
Integrability,"No there are two, I've modified my first message, this one and the next one, but the real improvement is in the one you pointed exactly !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4324#issuecomment-1836385306:41,message,message,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4324#issuecomment-1836385306,1,['message'],['message']
Integrability,"Nope, nothing planned. I trust you guys for the cmake side. On Wed., Aug. 4, 2021, 11:06 Hugo, ***@***.***> wrote:. > New library to factorize the functions that will be called for the tests; > of BaseMatrix.; > Need the INTERFACE CMakeMake keyword to compile a ""header-only library"".; >; > Did you intend to add any further features/functions/codes in the PR; > @alxbilger <https://github.com/alxbilger> ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892494390>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACQVHUH6LCJFLIWGUGITT3LT3D7J5ANCNFSM5BIERQAQ>; > .; > Triage notifications on the go with GitHub Mobile for iOS; > <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>; > or Android; > <https://play.google.com/store/apps/details?id=com.github.android&utm_campaign=notification-email>; > .; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892979761:221,INTERFACE,INTERFACE,221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892979761,1,['INTERFACE'],['INTERFACE']
Integrability,"Not possible to compile because I don't have opencascade, only rely on visual intellisense.... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/705:194,message,message,194,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/705,1,['message'],['message']
Integrability,"Not really, but only because of my lack of understanding of these integration factors :-). I'm sure this PR is fine, I was just curious. Really looking forward to our next white board meeting !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-626135738:66,integrat,integration,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-626135738,1,['integrat'],['integration']
Integrability,"Not significant, but towards a clean CI :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1206:143,message,message,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1206,1,['message'],['message']
Integrability,"Not sure if this is correct, but it seems that sofa uses the rt library (high resolution clock?) on unix, but does not explicitly specify the library when linking. Because of that, compilation may fail on some systems. This patch just makes dependency on the rt library explicit in cmake",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/19:241,depend,dependency,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/19,1,['depend'],['dependency']
Integrability,"Note to my future dummy-me: ; Dependency is present in CMakeLists but having it in Config.cmake.in propagates this dependency to downstream modules, unable to find tinyXML since it's linked privately :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4555#issuecomment-1976565138:30,Depend,Dependency,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4555#issuecomment-1976565138,2,"['Depend', 'depend']","['Dependency', 'dependency']"
Integrability,"Nothing important, just switch char* with std::string in the component BaseObjectDescription. @damienmarchal @guparan . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/980:219,message,message,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/980,1,['message'],['message']
Integrability,Noticed those files hanging around after the merge of #834. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/851:159,message,message,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/851,1,['message'],['message']
Integrability,Now 255 is merged I can write the CHANGELOG for @hugtalbot (thank for the reminder:)). CHANGELOG: ; Batch replacement of std::cout with msg_info or dmsg_info and some delete of commented lines in the following module:; [SofaBaseMechanic]; [SofaBaseTopology]; [SofaBoundaryCondition]; [SceneCreator] ; [SofaGeneralSimpleFEM]; [SofaConstraint]; [SofaGeneralVisual]; [SofaMisc]; [SofaMiscCollision]; [SofaMiscEngine]; [SofaMiscFEM]; [SofaMiscMapping]; [SofaMiscTopology]; [SofaOpenGLVisual] ; [SofaPrecontionner]; [SofaSparseSolver]; [SofaVolumetricData]; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/261:654,message,message,654,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/261,1,['message'],['message']
Integrability,"Now pretty much all overridden 'canCreate' found in the kernel or the modules behave as they should, which is, **always specify why a component with the given template cannot be created in the given context**. This is the continuation of the PR #1266. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1294:351,message,message,351,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1294,1,['message'],['message']
Integrability,"Now that https://github.com/sofa-framework/sofa/pull/2165 is merged, I could remove the Data `optimizedForDiagonalMatrix` from the scenes. I confirm that the code goes to the right branch depending on the diagonal property of the mass matrix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-872033233:188,depend,depending,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-872033233,1,['depend'],['depending']
Integrability,"Now that the v23.12 is getting stable, this PR applies the [lifecycle](https://www.sofa-framework.org/community/doc/contributing-to-sofa/lifecycle-mechanisms/) policy of SOFA for the v24.06 release. Note that :; - another PR follows this one removing the entire `Sofa/Component/Compat` layer #4533; - this PR depends on : . [ci-depends-on https://github.com/SofaDefrost/SoftRobots/pull/265]; [ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/139]; [ci-depends-on https://github.com/sofa-framework/CGALPlugin/pull/14]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4532:309,depend,depends,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4532,4,['depend'],"['depends', 'depends-on']"
Integrability,"Now we have a tool to list the deprecated components, we can build with `SOFA_WITH_DEPRECATED_COMPONENTS=OFF` + `APPLICATION_GETDEPRECATEDCOMPONENTS=ON` and ignore scenes using deprecated components during scene tests. I also added a function to ignore scenes using non-existent (because disabled) plugins. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/611:406,message,message,406,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/611,1,['message'],['message']
Integrability,"Now, each class has its own file. A unit test has been added. The error message is managed by a `Data<DisplayFlags>` (only if you include `Data[DisplayFlags].h`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1384992721:72,message,message,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1384992721,1,['message'],['message']
Integrability,"Now, each data field with a filename alias will show ""filename"" in the GUI.; The old names are now the aliases and are just keept for backward compatibility management. . I didn't do the change for data related to dumping/output filenames. Because I found that ambigious. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1024:373,message,message,373,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1024,1,['message'],['message']
Integrability,"O] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:14:09.408: Failed to load module ""canberra-gtk-module""; Gtk-Message: 22:14:09.409: Failed to load module ""canberra-gtk-module""; [INFO] [SofaPluginManager] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:12341,Message,Message,12341,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['Message'],['Message']
Integrability,"Ok now it works, but I also need to gil-protect any module initialization that does python stuff, otherwise we get the (righteous) following error:. `Fatal Python error: PyThreadState_Get: no current thread`. and a segfault ensues. . On a related note, there really should be no naked (as in ""not wrapped in a proper `PythonEnvironment` method"") python call apart from bindings methods.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313618145:297,wrap,wrapped,297,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313618145,1,['wrap'],['wrapped']
Integrability,Ok so if the pr is just about wrong messages no need for test :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329794045:36,message,messages,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329794045,1,['message'],['messages']
Integrability,"Ok sorry my message was not totally clear. I meant, you check the option in the Node and it propagate the printLog to all child Node and their components.; So if you want all the printLog, you activate it in the root Node.; Just suggesting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853:12,message,message,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853,2,['message'],['message']
Integrability,"Ok, CImg seems to do the job as well.; The dependency is already in plugin image, we just need to move it back to SOFA (licence is compatible).; And then this one-header-only include will allow us to read jpeg.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759:43,depend,dependency,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759,1,['depend'],['dependency']
Integrability,"Ok, very nasty...; So I agree with your PR, we should not impose the `find_package(FFMPEG_exec)` to dependencies.; But it is not enough. We should clean this hardcoded path by installing the executable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540045862:100,depend,dependencies,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540045862,1,['depend'],['dependencies']
Integrability,Ok... Do we all consider that numpy is mandatory when using SOFA with python ? . It is just a question so that people are aware of that dependency. But I agree to remove the new implementation if less performant . Erwan will do it,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/404#issuecomment-336471217:136,depend,dependency,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/404#issuecomment-336471217,1,['depend'],['dependency']
Integrability,"On 14/02/2017 09:29, erik pernod wrote:; >; > closed?; >; unmerged...because it is minor and I have no time to understand why it ; does not compile... I will open it again one day...; But if you are willing to you can make it work in the meantime :). > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/169#issuecomment-279639584>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/AMDyEmabTubGf2uk8Mg_N_ufzjqkfcLWks5rcWX-gaJpZM4L9dhW>.; >; > {""api_version"":""1.0"",""publisher"":{""api_key"":""05dde50f1d1a384dd78767c55493e4bb"",""name"":""GitHub""},""entity"":{""external_key"":""github/sofa-framework/sofa"",""title"":""sofa-framework/sofa"",""subtitle"":""GitHub ; > repository"",""main_image_url"":""https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png"",""avatar_image_url"":""https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png"",""action"":{""name"":""Open ; > in ; > GitHub"",""url"":""https://github.com/sofa-framework/sofa""}},""updates"":{""snippets"":[{""icon"":""PERSON"",""message"":""@epernod ; > in #169: closed?""}],""action"":{""name"":""View Pull ; > Request"",""url"":""https://github.com/sofa-framework/sofa/pull/169#issuecomment-279639584""}}}",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/169#issuecomment-279646432:1179,message,message,1179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/169#issuecomment-279646432,1,['message'],['message']
Integrability,"On MacOS, I experienced a big problem since my OS upgrade to Big Sur. ; runSofa viewport remaining blank, either with QGL viewer or OpenGL viewer, with the following error message in the terminal:; ```; qt.qpa.openglcontext: Could not create NSOpenGLContext with shared context, falling back to unshared context.; ```; I finally figured it out: My Qt version was 5.15.x (installed with brew or the Unified Installer) and there seems to be a problem here, at least with my configuration : Intel Mac, with ATI GPU, MacOS 11.2.3.; **Downgrading Qt to 5.12.5 is a workaround.** It's a dirty fix that works, where a complete reinstall of Xcode and dependencies did not. At least I have a working build of runSofa now :-). I really have no idea of the exact cause of the problem, maybe related to my Mac configuration, GPU drivers or use of deprecated API by SOFA, but I hope this could help someone with the same problem.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2028:172,message,message,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2028,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"On clang/g++ the visibility is not set (left blank). . This means that a sofa code using SOFA_EXPORT_DYNAMIC_LIBRARY but compiled with a command line setting the unspecified visibility to ""hidden"" will have linkage problems. . This fix the issue so now public code...are really public in clang/g++ . I'm not sure if there is non win32 compiler that does not understand this attribute. If this is the case,it is possible to add extra #ifdef GCC & CLANG & xxx. DM. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1410:562,message,message,562,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1410,1,['message'],['message']
Integrability,On desktop with multiple screen the existing code to dimmension the; windows is wrong as it report the largest size. This FIX the problem; by using the correct way to get he screen geometry associated with a; widget. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1010:316,message,message,316,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1010,1,['message'],['message']
Integrability,On my way to fix this issue https://github.com/sofa-framework/sofa/issues/895; I found that the Xsp code was duplicated with a C and a C++ version. . So I refactored the two and I added some tests to the files. ; On of the added test in ReadState_loadFailure is currently failing...wich is expected as it shows an existing problem for which fixing is outside the scope of the PR. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/918:481,message,message,481,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918,1,['message'],['message']
Integrability,On running the command: bin/runSofa -g batch -n infinite; infinite iterations will start and time computed after every 1000 iterations will be echoed.; Solving the issue #552 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613:276,message,message,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613,1,['message'],['message']
Integrability,One (new) scene is failing: `SceneTests.applications/plugins/LMConstraint/examples.DOFBlockerLMConstraint.scn`; The error message is: ` [ERROR] [UncoupledConstraintCorrection(default67)] Cannot remove the requested constraint solver` ; It is possible that the scene itself was wrong but it is highlighted here because you add a msg_error(),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-934166940:122,message,message,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-934166940,1,['message'],['message']
Integrability,"One component to rule them all, One component to find them, One component to bring them all, and in the printLog to flood the messaging system!. interesting remark @epernod : but could we be willing to have only the messages of the Node and not its content?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1193712985:216,message,messages,216,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1193712985,1,['message'],['messages']
Integrability,One good point about ignoring scenes with unmet `RequiredPlugin` dependencies is that we can see what scenes need some `RequiredPlugin`: they are the only left to crash trying to create unknown components. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/628:65,depend,dependencies,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/628,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"One memory leak was identified, use of size_t is added and fix in the init of cube; Fix #804 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/815:194,message,message,194,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/815,1,['message'],['message']
Integrability,One more plugin in Sofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/477:126,message,message,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477,1,['message'],['message']
Integrability,One more plugin in Sofa. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/486:124,message,message,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/486,1,['message'],['message']
Integrability,"One step towards continuous delivery in SOFA :tada: . This PR reworks/cleans CPack usage for release packaging and adds a new generator : [Qt Installer Framework](http://doc.qt.io/qtinstallerframework/ifw-overview.html). Very useful to unify packaging methods, it will be at first used to generate nice installers for Linux. This means no more .zip package for Linux binaries, unless you want to keep them?. Note: This PR also adds the opening of an URL after installation to ask the user to consider donating to the SOFA project. Do not hesitate to comment if you disagree with this idea. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/796:689,message,message,689,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/796,1,['message'],['message']
Integrability,"One type to rule them all... ©. Bigger than expected PR; made to harmonize index type for templated Vector/Mat type.; (some had int as index type, other unsigned int, or std::size_t, etc); ~Surprisingly not very breaking with MSVC, but GCC (and clang?) does break when templates declared as int.; (flexible/compliant was a PIA to fix)~ After a fuckton of commits, I regret this sentence 🙃. MAIN BREAKING POINT: VisualModelImpl needs indices to be int and not long (like std::size_t) so it cannot take directly the topology types (Triangle, Quad, etc) for its buffers. Thats why there are now VisualEdge, VisualTriangle, VisualQuad which still takes index as int.; (main reason is that graphical systems (OpenGL, etc) only can manage integers). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1453:843,message,message,843,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1453,1,['message'],['message']
Integrability,Only an optimal version based on the initial values of the; stiffness vector was implemented. Need to have updated stiffnesses. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/579:227,message,message,227,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/579,1,['message'],['message']
Integrability,Only did some base classes that were generating multiple warnings.; And also the topology containers. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/729:201,message,message,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/729,1,['message'],['message']
Integrability,Only minor typos etc in investigating the collision of SOFA. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1411:160,message,message,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1411,1,['message'],['message']
Integrability,Only small bug fixes according to release notes so it should not be breaking.... source taken from: https://sourceforge.net/projects/qwt/files/qwt/6.1.4/; release notes: https://sourceforge.net/p/qwt/news/. Fix #1134; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1136:317,message,message,317,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1136,1,['message'],['message']
Integrability,Only some cleaning in:; - Class define macro; - Data and member prefix; - Move code from header to inl or cpp files. Update several plugin demo scenes. ![SpatialGridContainer_00000001](https://user-images.githubusercontent.com/21199245/66745709-13632500-ee80-11e9-9cfe-94e1a9e4d27c.png); ![SPHFluidForceField_benchmarks_00000001](https://user-images.githubusercontent.com/21199245/66745711-13632500-ee80-11e9-8382-738a86b68c3c.png); ![SPHFluidSurfaceMapping_00000001](https://user-images.githubusercontent.com/21199245/66745713-13fbbb80-ee80-11e9-98a1-ea1386f91c19.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1186:670,message,message,670,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1186,1,['message'],['message']
Integrability,Open questions:; - do we set to activate by default (in classic mode or in interactive mode (-i option)); - any talented graphics designer could make a real button is welcome (but these ones are mine...so the license is DWYW => do waht you want) ; - do we want a better fix that do an in-depth cleaning that part of the code. There is a dependency to this rather harmless cleaning PR: https://github.com/sofa-framework/sofa/pull/3025,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3026#issuecomment-1162789750:337,depend,dependency,337,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3026#issuecomment-1162789750,1,['depend'],['dependency']
Integrability,"Originally, the goal was not really to go for ; - #4221. But more to upgrade the gtest version, as the one in SOFA is really old (1.7.0 , *Sep 19, 2013* :exclamation: ) and was throwing warnings for newer cmake.; So instead of simply update the source in extlibs, I took the liberty to go into the find/fetch mechanism. A bit difficult as the CMakefile in the embedded version was heavily customized, so I am not 100% sure the install/package process is working well. But it should 😅. Last note: it is adding a target `gtest_main` which is always activated in the gtest cmake file. It is not used by SOFA as we have our own main for gtest. [ci-depends-on https://github.com/sofa-framework/PluginExample/pull/5]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471:644,depend,depends-on,644,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471,1,['depend'],['depends-on']
Integrability,"Other significant singletons:; - message mechanism (dispatchers/handlers),; - idFactory from timers; - Factories (contact, intersectors); - scheduling (TaskScheduler, registry); - scene loaders",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3770#issuecomment-1562569604:33,message,message,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3770#issuecomment-1562569604,1,['message'],['message']
Integrability,"Otherwise the parsing is dependent on the locale in use on the system which; leads to problems with decimals numbers. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2200:25,depend,dependent,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2200,1,['depend'],['dependent']
Integrability,"PR #1028 added a getter for the records of the advanced timer that automatically assigns the string version of the record's **id** to a new field called **label**. There was a small problem with this, records can have different types of ids (IdTimer, IdStep, IdVal or IdObj). Casting a record id to a wrong type causes the wrong string version of the id to be assigned to the label. This PR fixes this. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1244:502,message,message,502,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1244,1,['message'],['message']
Integrability,PR #139 moved licence.txt into license.LGPL.txt. This changed has not been propagated in the cpack config. I didn't create a branch as only one line is modified. Hope it doesn't break the CI... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/194:293,message,message,293,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194,1,['message'],['message']
Integrability,PR #158 broke livecoding of shader. This PR restore it. @guparan and @hugtalbot Could this PR be treated in fast-path please ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/415:228,message,message,228,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/415,1,['message'],['message']
Integrability,"PR #1788 from @courtecuisse should address branch sofa/v20.12 instead of master. This PR is potentially breaking, since it replaces `getSizeX()` and `getSizeY()` which might be used in external CUDA plugins. I'll transform the other PR into a backport to master so we can discuss it on the next meeting. Original PR message:. > @courtecuisse:; > Change Naming in cudaMatrix with rowSize and colSize which are the standard names in sofa.; > This change enables to use CudaMatrix as template. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1805:316,message,message,316,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1805,1,['message'],['message']
Integrability,"PR #2036 rebased and to be merge inside topologyChanges PoC branch. Add mechanism of callbacks inside ```TopologyHandler``` instead of inheriting from it and override methods. - Callback have been added inside ```TopologyDat``` a to define specific method when creating/destroying element (call by remove/add). See ```TriangularFEMForceField``` for an example; - Map of Callback has been added inside TopologyHandler to set specific callback depending on the topology event. See ```TriangularBendingSprings``` as an example which handle Edge but also Triangle removing/adding. To discuss if this is better than inheriting from ```TopologyHandler```. ![image](https://user-images.githubusercontent.com/21199245/121326580-fa3f9f80-c912-11eb-9d89-0966330bbded.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2087:442,depend,depending,442,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2087,1,['depend'],['depending']
Integrability,PR #213 breaks api compatibility because it misspelled MessageAsTestFailure; by MesssageAsTestFailure (with three 's'). This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/269:55,Message,MessageAsTestFailure,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/269,2,"['Message', 'message']","['MessageAsTestFailure', 'message']"
Integrability,"PR 2419 restores the correct behavior of CGLinearSolver regarding the call-super-init; https://github.com/sofa-framework/sofa/pull/2419. But as some of its data are tagged as Required, this rise an error message when the value; is not set by the user. I'm not sure it is wise to set the required flag when data provides meaningful and usable default values. I recommand removing it and more generally keep the isRequired only for data field that really have no possibility to have a default value (eg: the filename for a loader). . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2498:204,message,message,204,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2498,1,['message'],['message']
Integrability,"PR adds a first implementation of the augmented lagrangian collision (see [A Surface-to-Surface Finite Element Algorithm for Large Deformation Frictional Contact](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6056201/pdf/bio-17-1579_081013.pdf)). . To do so, because it is very close to the classical Unilateral constraint, I've tried to factorize code by adding a virtualization layer for both the constraints and the associated contact responses (see added class BaseContactLagrangianConstraint and BaseUnilateralContactResponse). It rely on a contact param template which is the only thing that differs in term of data and of course the type of ConstraintResolution used. . An example scene is introduced in the Demo folder, simply copying the falling beam example and replacing the response by the augmented lagrangian one. . There are still one todo for the future, even if this PR is already working on its own : adding the per-contact-point penalty modulation. This should be done by going back to the collision element using the DetectionOutput.elem attribute. This allows to go back to the topology. The only unknown is how to compute the element volume when the colliding topology is mapped to the simulated one. . [ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/142]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5003:1233,depend,depends-on,1233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5003,1,['depend'],['depends-on']
Integrability,"PR on topologyGrid:. - Add new component: SphereGridTopology to create sphere topo. using grid (similar to CylinderGridTopology) with an example: SphereGridTopology.scn; - Clean the API GridTopology and its children: RegularGridTopology/SphereGridTopology/CylinderGridTopology, move several methods into mother class GridTopology.; - Add doxygen doc for the 4 classes; - Add tests for Cylinder and SphereGridTopology; - Add method addSphere/addRigidSphere in sceneCreator + tests + example. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/164:534,message,message,534,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164,1,['message'],['message']
Integrability,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603:25,integrat,integration,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603,2,"['integrat', 'message']","['integration', 'message']"
Integrability,Paper submitted yesterday => perfect time to blow off some steam and kill some warnings. Before:; ![image](https://user-images.githubusercontent.com/6951981/75091097-02cb6580-556a-11ea-8e30-c2fe6ef641c4.png). After:; ![image](https://user-images.githubusercontent.com/6951981/75091104-0eb72780-556a-11ea-92df-437ec225f34b.png). P.S.: Let's wait for the CI before merging :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1258:475,message,message,475,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1258,1,['message'],['message']
Integrability,"Parent modules must always interface the same libraries.; e.g. Sofa.Component.dll must always be the same. Thus, if some of its child modules are disabled, parent module will not generate a library. This PR creates and uses a new macro `sofa_add_subdirectory_modules`.; This macro is meant for parent modules to easily add their child modules and sets a variable with all added targets.; If a child module is missing or disabled, a message will be shown (not an error) and the library will not be created. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3225:27,interface,interface,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3225,2,"['interface', 'message']","['interface', 'message']"
Integrability,Part 1 of #629 This PR creates more Sofa Types in the PSDEFactory and uses a cpp-style typename convention . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/740:208,message,message,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/740,1,['message'],['message']
Integrability,"Pass extra command-line arguments for python scenes loading in a more high-level function call. Knowing that SofaQtQuick uses a different argument parser, the underlying objective of this commit is to be able to pass command-line extra args using QCommandLineParser. This feature is ready on the side of SofaQtQuick and it works (i.e. attached patch). Note that the added input parameter 'sceneArgs' in the 'load' functions is an optional parameter. [patch_pyargs_support.txt](https://github.com/sofa-framework/sofa/files/3073394/patch_pyargs_support.txt). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/992:656,message,message,656,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992,1,['message'],['message']
Integrability,"Please gently welcome this first NG pull-request :blush: . The base idea was to remove the SofaComponent* packages from modules and to put them in their own place instead.; Doing this, I realized that SofaComponentBase contains actual components (it's not only a basic package as it should be).; Thus, it permitted me to introduce the first NG module Sofa.Component.Utils and fill it with SofaComponentBase intruders (MakeAliasComponent, MakeDataAliasComponent, MessageHandlerComponent, InfoComponent). NG architecture is based on the discussions in #543.; Transition headers are also provided (in deprecated_layout folder) to ensure old includes. I am also working with @damienmarchal on a way to cleanly automatize this kind of NG refactoring with python: see https://github.com/guparan/sofa2ng. Feedback is more than welcome!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/620:462,Message,MessageHandlerComponent,462,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620,2,"['Message', 'message']","['MessageHandlerComponent', 'message']"
Integrability,"Please review carefully, this PR could be breaking (but should not). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/782:168,message,message,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/782,1,['message'],['message']
Integrability,Please try it on the CI before merging ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/431:143,message,message,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/431,1,['message'],['message']
Integrability,Plugin = to be loaded by PluginManager (via `<RequiredPlugin/>` or plugin_list.conf).; Classic library = does not contain any Component. sofa2ng has been modified accordingly. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/872:275,message,message,275,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/872,1,['message'],['message']
Integrability,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:337,depend,depend,337,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769,3,['depend'],"['depend', 'dependencies']"
Integrability,"PointConstraint is removed.; serr/sout/sendl are removed.; A lot of headers will now trigger the SOFA_DISABLED_HEADER error if included. Please review, I may have done bad/brutal things. [ci-depends-on https://github.com/sofa-framework/Registration/pull/3]; [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/268]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090:191,depend,depends-on,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090,2,['depend'],['depends-on']
Integrability,"Poisson's ratio should be in [0,0.5[. This PR adds an error message if it's not the case. ; A value outside [0,0.5[ just leads to an odd behavior. . **EDIT**: a warning message (not error). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2908:60,message,message,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2908,2,['message'],['message']
Integrability,Port the headless recoder to use helper/gl/VideoRecorderFFMPEG.h instead of its own implementation of it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/919:205,message,message,205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/919,1,['message'],['message']
Integrability,"Prelude to moving vector & co to Sofa.Type. helper::vector is a bit complicated (defined in vector_device.h but standard,main code is in vector.h with some trick on templates).; But vector_device, the ""main"" implementation of vector has a dependency on defaulttype/dataypeinfo.h (needs some flags from it). Some ways to remove it:; - change the whole mess of vector, vector_device (used only for SofaCUDA and SofaOpenCL) -> **breaking** -> _Nope_; - remove the use of those dataypeinfo flags -> **change in behavior** -> _Nope_; - move the dependency of datatypeinfo using the template mechanism. Purpose of the PR.; It adds a new template parameter to vector (but is set to an empty, unused class so hamrless) and is compatible with standard code.; And SofaCUDA and SofaOpenCL can pass dataypeinfo (along their own MemoryManager actually) so they can use the flags. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1797:239,depend,dependency,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1797,2,['depend'],['dependency']
Integrability,Previous PR #1034 deprecating the naming in scenes and in C++ of XxxxxModel into XxxxxCollisionModel for clarity. This PR fixes all generated warnings in the code related to this deprecation. All scenes in SOFA were already updated in #1292. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1301:341,message,message,341,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301,1,['message'],['message']
Integrability,"Previously, the default mode was NOTICE, which print the message in red. The doc says ""Important message printed to stderr to attract user's attention."". The consequence was that almost all the CMake log was written in red, and it was difficult to find the true important messages. This commit change the type of message so it is written in black. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3381:57,message,message,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3381,4,['message'],"['message', 'messages']"
Integrability,Problem of convergence of the StandardTetrahedralFEMForceField. Quick solution = decrease force applied and highlight the data of the new version of StaticSolver; But we should check since when / due to which commit this error occured (check #950 ). NOT to merge before answering below points; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1207:393,message,message,393,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1207,1,['message'],['message']
Integrability,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:107,message,messages,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,3,"['Message', 'message']","['MessageAsTestFailure', 'message', 'messages']"
Integrability,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/306:926,message,message,926,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306,1,['message'],['message']
Integrability,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/257:10,Message,MessageDispatcher,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257,4,"['Message', 'message']","['MessageDispatcher', 'message', 'messages']"
Integrability,Problem:; The implementation of getRelativePath is broken as it returns the current; value which can be either a relative or an absolute path. Solution:; The new implementation is building a real relative path against the path contained; in the DataRepository. I also added few test for DataFileName to valide the different behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/250:434,message,message,434,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250,1,['message'],['message']
Integrability,Project Continuous Integration : general discussion,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/186:19,Integrat,Integration,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186,1,['Integrat'],['Integration']
Integrability,"ProjectToLineConstraint is crashing when trying to do projectResponse() because its jacobian matrix member is not synchronized with its respective mechanical object (especially its size).; This problem was raised from the scene: ProjectToLineConstraint_RemovingMeshTest.scn; And it seems to be detectable only in Debug mode as the CI does not complain very often. One first fix was trying to call a method to update the Jacobian while catching the fact that a topology change event was triggered, but various problems arrived with the fact that the MechanicalObject data is not connected to the ""Data"" update mechanism. (a first draft on how to change this behavior here #1489 but stalled) . A second fix (less subtle) checks every time if the jacobian size is correct wrt to the mechanical object : #2241; Less desirable because it will check at each call but fix the problem for now. I let this issue to remember to trigger the jacobian update when detecting a topological change, once the topological change mechanism is finished.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2242:114,synchroniz,synchronized,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2242,1,['synchroniz'],['synchronized']
Integrability,Python 2.7 is not compatible with C++17 and later. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1284:150,message,message,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1284,1,['message'],['message']
Integrability,Quick PR to fix the SofaPhysicsApi project; - Remove deprecated code regarding OpenGL tetrahedron. ; - FIX some bad path in cpack installation; - Change some class declaration to allow inheritance. . <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/167:243,message,message,243,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/167,1,['message'],['message']
Integrability,Quick and simple!; Will fix Base_test.testComponentState. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1204:157,message,message,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1204,1,['message'],['message']
Integrability,Quick commit to fix [build error](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/325/console) after #370 merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/380:227,message,message,227,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380,1,['message'],['message']
Integrability,Quick fix as glut has been removed from Sofa.; remove the glutInit which has nothing to be there. Moreover I don't think someone is using this project with useGui ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/659:265,message,message,265,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/659,1,['message'],['message']
Integrability,"Quick fix of compile error, quite self-explanatory I guess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/680:159,message,message,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/680,1,['message'],['message']
Integrability,"Quick summary:; Problem 1: ; Quaternion (when unnormalized) can be used to encode more than juste R3 orientation so we shouldn't force the normalization in the Quaternion operator>>().; We should have normalization detection and renormalization done only on object that we know for sure are R3 orientation. So to me the proper fix should be done in the operator>> of Rigid3Type. Problem 2:; About reporting warning to the users. This cannot be done in the Quater::normalize function. Because normalization is a perfectly valid operation to apply on an un-normalized quaternion and thus there is no meaning to report a warning. Actually it is like printing a warning when we are doing exactly what the function is supposed to do. . Now, the problem goes far beyond this PR as reporting error/exception is a complex issue in Sofa as we rely on 'message' instead of exception and C-style error handling vs exception vs printing (as in sofa) is an as old problem as c++ and in our code base all the approaches have been used.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085:843,message,message,843,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085,1,['message'],['message']
Integrability,"Quick update of the MechanicalMatrixMapper so that when the user interacts on the simulated object with the mouse, the StiffSpringForceField that is dynamically added to the scene graph gets included in the forcefield link list of the MMMApper. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/772:344,message,message,344,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772,1,['message'],['message']
Integrability,"R https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190:978,message,message,978,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190,6,['message'],['message']
Integrability,"RayTraceDetection is deprecated. Use BruteForceBroadPhase and RayTraceNarrowPhase instead.; A message warns the user and it keeps compatibility with scenes using RayTraceDetection. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2212:94,message,message,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2212,1,['message'],['message']
Integrability,Re-investigate the use of Integration Factors when solving constraints,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2123:26,Integrat,Integration,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2123,1,['Integrat'],['Integration']
Integrability,"Reading a JPEG file is implemented by ImageQt, which obviously depends on Qt.; It means that Qt is needed to load any JPEG image (actually, also gif, and other exotic formats). 1) I think we should be able to read JPEG files without Qt ; perhaps using libjpeg ?; 2) Moreover, we need to have a Qt Gui to activate ImageQt ; then it could be an idea to move this class to a plugin ? Which will be able to read all image formats the Qt library can read ?; 3) (BUG) JPEG files read by ImageQt seem to be upside-down, if we compare it with the same image converted in the PNG format (I will write a test to confirm that)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51:63,depend,depends,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51,1,['depend'],['depends']
Integrability,"Ready, merge if CI validates it. An issue should be open to point the dependency on the deprecated SofaGraphComponent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3302#issuecomment-1253446110:70,depend,dependency,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3302#issuecomment-1253446110,1,['depend'],['dependency']
Integrability,Really not sure about the change in Distances. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1441:146,message,message,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1441,1,['message'],['message']
Integrability,Recover a commit in is_sofa_multithreading branch (3da9e50752d6aead487f0b5f8897bfc4249f9404) to allow OdeSolver concurrent execution:. A new data<bool> is added (d_threadsafevisitor) to disable allocation and writing in the mechanical object component used by the OdeSolver ; The same change is applied to all the OdeSolver derived class and it doesn't affect the default behavior and the scenes.; EulerSolver; EulerImplicitSolver; StaticSolver; CentralDifferenceSolver; VariationalSymplecticSolver; NewmarkImplicitSolver. Task Scheduler refactoring;; - improve task stealing between worker threads.; - add worker thread name to make the debugging and profiling easier.; - group and move the initialization tasks in a dedicated file. New component and scene to show off the performance improvement of multithreading execution.; - MeanComputation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/745:946,message,message,946,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/745,1,['message'],['message']
Integrability,"Ref: #1521, #1527. ### Description; All the previous PR/commits (#1521 should list all the main ones) allow now the fact that each module of SofaFramework can be its own cmake package/configuration.; - No more dependency checks in the SofaFrameworkConfig.cmake.in, etc; they are now in their own *Config.cmake.in; - No more weird cross-dependencies between headers (no more add_include_dir in SofaHelper!): a change in SofaCore will not trigger a new compilation of SofaHelper for example...; - clearer and more logical use of packages: if you want SofaHelper you do:; ```cmake; find_package(SofaHelper); ....; target_link_libraries(${target} SofaHelper); ```. - SofaFramework is now a ""meta-package"" or collection like SofaBase. Obviously it will stay like that for compatibility reason. ### Note; - The removal of the cross-includes paths in SofaHelper pointed to an error I made in the Sofa.Topo/Sofa.Geo PR #1912 , which is a good demonstration of the cross-include path madness 🤡.; - I successfully compiled SofaPython3 out-of-tree with an install of SOFA so the *Config.cmake.in should be okay. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1990:210,depend,dependency,210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1990,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/562:49,depend,depend,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562,2,"['depend', 'message']","['depend', 'message']"
Integrability,Refactor of DetectionOutputVector interface and its implementation TDetectionOutputVector. . The goal is to force all components to use the only functions provided by the DetectionOutputVector interface to interact with the DetectionOutput data that stores the contacts. One advantage of accessing the DetectonOutput data through an interface is to make a concurrent modification of contacts easier. The current implementation allows direct access to the DetectionOutput vector by casting the TDetectionOutputVector class to the helper::vector<DetectionOutput> Vector due to a double inheritance. ; This makes the DetectionOutputVector interface useless because easy to bypass. Current implementation of the DetectionOutputVector interface. ```; class TDetectionOutputVector : public DetectionOutputVector : public helper::vector<DetectionOutput>; {; public:; override of DetectionOutputVector pure virtual functions to modify the helper::vector<DetectionOutput>. }; ```. New implementation of of the DetectionOutputVector interface. ```; class TDetectionOutputVector : public DetectionOutputVector; {; public:; override of DetectionOutputVector pure virtual functions to modify the helper::vector<DetectionOutput>. private:; 	helper::vector<DetectionOutput>; }. ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/965:34,interface,interface,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965,7,"['interface', 'message']","['interface', 'message']"
Integrability,"Referee: @IPeterlik . Members: @IPeterlik @remibessard @hdeling @damienmarchal @fredroy @epernod Jeremie . Main objective: provide a continuous support for validation of SOFA. Subtasks and estimated duration; - using python, based on Method for Manufactured Solutions (MMS), static linear elasticity with linear FEM in (compression and torsion with < 5% deformation); ex: TensorMassFEMForceField; - TensorMassFEMForceField : addKToMatrix, vector of E; - extend it to beams (BeamAdapter); - implement engine : plugged to compute stress data in all FEM in SOFA. Future; - write article; - contact Stefan Suwelack for integration into CAEML.org. ---. Validation solution:; - analytical; - software comparison (Abaqus); - tests; - experimental setup. cases:; - dynamic vs static; - linear elasticity with linear FEM; - metrics : displacement, stress+strain tensors",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/25:615,integrat,integration,615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25,1,['integrat'],['integration']
Integrability,"Referee: @faichele. Members: @faichele , @fjourdes , @ChristianDuriez , @thomas-lemaire , @IPeterlik , @courtecuisse , @hdeling . Main objective: bring TaskScheduler within SofaKernel. Subtasks and estimated duration:; - merge the branch _issofa_multithreading_ involving the MultiThreading plugin into master (fixes); - remove dependencies to boost (might face issue in the lock implementation); - create trivial examples describing the API; - add documentation, and examples of Intel; - migration into SofaKernel. Non-requisite:; - no maintenance guarantees for the plugin Multithreading. Future; - nice feature : experiment the definition of a pointer to the Scheduler into ExecParams; - anyone interested can join!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24:328,depend,dependencies,328,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24,1,['depend'],['dependencies']
Integrability,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26:527,depend,depending,527,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26,1,['depend'],['depending']
Integrability,"Reflect change in CMake which added a dependency on LinearSystem in #2777. It will fix out-of-tree builds based on the current master. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3840:38,depend,dependency,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3840,1,['depend'],['dependency']
Integrability,Regarding last review comments (as I'm not sure to be there for the next review):. - I would like to remove those header directly... do we have to go through the 6 months of deprecated before... ?; - Do you want me to put keep empty headers with the SOFA_DEPRECATED_HEADER macro? ; - I would keep the xxxSetGeometryAlgorithms and not put everything inside xxxSetTopologyXXX because the name Geometry make sense here to indicate we depend on the type of dof (aka mechanicalObject). Tests and scenes have been updated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633:431,depend,depend,431,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633,1,['depend'],['depend']
Integrability,RegularGridTopology dependency in MechanicalObject,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/162:20,depend,dependency,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162,1,['depend'],['dependency']
Integrability,"Relevant for those compiling out-of-tree (e.g SofaPython3 😙); Some dependencies were missing in the *cmake.in. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1679:67,depend,dependencies,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1679,1,['depend'],['dependencies']
Integrability,"Remove ColladaSceneLoader plugin and its embedded old version of assimp. ; - Move class, doc and examples inside SofaAssimp plugin.; - Merge the CMakeLists and update the findAssimp with a the version provided by Assimp 5.0.; - Ensure scenes of both plugins are working with up to date version of assimp. SofaAssimp plugin still need the pluginization refresh. To be done in another PR. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1360:486,message,message,486,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360,1,['message'],['message']
Integrability,Remove FFMPEG_exec target from the dependencies of SofaFramework,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1177:35,depend,dependencies,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177,1,['depend'],['dependencies']
Integrability,Remove SOFA direct dependencies on CSparse and Newmat,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1309:19,depend,dependencies,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1309,1,['depend'],['dependencies']
Integrability,"Remove a really annoying ""unused variable"" warning. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1325:151,message,message,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1325,1,['message'],['message']
Integrability,"Remove as much as possible the dependencies on SofaCommon, SofaSimulation, SofaGeneral, SofaAdvanced and SofaMisc to remove the warning ""You must now explicitely find (find_package) and link (target_link_library) the modules you need within: ..."". Fixes #1623. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1883:31,depend,dependencies,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1883,1,['depend'],['dependencies']
Integrability,"Remove damping correction to the RHS because it is already added in the computeForce. In a Euler implicit integration scheme, the right hand side expression only contains terms coming for the internal and external forces taken at the begining of the timestep, and an inertial term constituted of the stiffness matrix, but no term coming from the constitutive damping. (see [Christian Duriez HDR](https://theses.hal.science/tel-00785118) for ref). The contribution of the damping forcefield is already taken into account through the `computeForce` call line 126, so the `b` coefficient should be put to 0 here otherwise the behavior is not correct. . This can bee reproduced by launching the scene `examples/Component/SolidMechanics/FEM/DampingForceField.scn` and putting the data `implicit` of the damping forcefield to true. This data might have been introduced to fix this error, because here we are in an implicit scheme, and setting this parameter to true when the `b` coef is equal to 1 changes the behavior. . This was introduced here : https://github.com/sofa-framework/sofa/commit/fe0ee6248971383daa4e488e80f5fe480ee85988. [ci-depends-on https://github.com/sofa-framework/Regression/pull/67]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4848:106,integrat,integration,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4848,2,"['depend', 'integrat']","['depends-on', 'integration']"
Integrability,Remove dependencies on Sofa.Component.Topology-related class,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2402:7,depend,dependencies,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2402,1,['depend'],['dependencies']
Integrability,Remove deprecated updateFlags method in TriangleModelCollision; Remove deprecated sort method in CubeModelcollision. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1201:216,message,message,216,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1201,1,['message'],['message']
Integrability,Remove duplicated constructors and commented alias. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1250:151,message,message,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1250,1,['message'],['message']
Integrability,"Remove most of the checks: if(CHECK_TOPLOGY). This macro is automatically set to true if SOFA is compiled in debug mode. The macro has been either:; - Remove the test and the warning/info message if not relevant. For example many getter, were sending a warning message if requested element id was out of bound before returning an ```Topology::InvalidID```. For those cases, the return value should be checked and warning could be send depending on the use. But it is not the role of a getter to send the warning.; - Remove test and let warning/error message when it is useful also in release.; - Remove the tests and sometimes also some creation buffer and keep some warning message in tricky cases. . **Result: several errors and warnings hidden in scenes are going to be revealed!** . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1352:188,message,message,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1352,6,"['depend', 'message']","['depending', 'message']"
Integrability,Remove new warning in MapMapSparseMatrixEigenUtils.h. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/485:153,message,message,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/485,1,['message'],['message']
Integrability,"Remove some warning:; - by updating the code ; - by configure in CMakeLists.txt the library (gtest, libQGlViewer, csparse, CImg) as system library. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1343:247,message,message,247,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1343,1,['message'],['message']
Integrability,"Remove thread specific declaration for ExecParams class. accessing thread local variables is slow and if the thread-local variable is accessed very frequently, the cost may become an issue. ; https://software.intel.com/en-us/blogs/2011/05/02/the-hidden-performance-cost-of-accessing-thread-local-variables. The ExecParams global pointer is declared thread specific but it is often passed in a function call as argument.; A function executed in a second thread can receive as argument the thread local variable of the first thread and it is allowed to use it.; In this situation there is no need of use the thread local variable. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1129:728,message,message,728,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1129,1,['message'],['message']
Integrability,Remove useless log files; Remove old example of MatrixMass (deprecated and soon removed class); Add MeshMatrixMass example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1257:223,message,message,223,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1257,1,['message'],['message']
Integrability,"Remove warnings, mostly from missing override keyword.; (+ some old style C cast). And fix a (potential) crash in MechanicalMatrixMapper (uninitialized pointer) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/968:262,message,message,262,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/968,1,['message'],['message']
Integrability,Removing all highorder classes from the base topological classes of SOFA.; Created a new open repository for those classes at sofa-framework/plugin.HighOrder 👍 ( https://github.com/sofa-framework/plugin.HighOrder.git ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] updated Flexible plugin to use the new plugin. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/220:319,message,message,319,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220,1,['message'],['message']
Integrability,Rename the class and add the option to handle sparse mass matrix with Euler explicit scheme!; Useful for trainings and useful for anyone starting in SOFA. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1260:254,message,message,254,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1260,1,['message'],['message']
Integrability,"Reopening of #1274. > unload() function of PluginManager was just removing the entry of the plugin in its map, but this one was effectively still loaded in the process memory. (on Windows, you could still see it using ProcessExplorer); > This PR fixes it (i.e really unloads from memory). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1287:388,message,message,388,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1287,1,['message'],['message']
Integrability,"Replace SOFACUDA_ARCH containing arbitrary value with (CMake's) auto arch detection.; If needed, you can disable auto-detection with the desired arch value.; It should (not tested) also generate cuda code for multiple arch as well. Remove also warning when configuring with CMake. (about deprecated macro sofa_create_package). I guess it could break CMake CUDA config for people using the SOFACUDA_ARCH variable. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1336:512,message,message,512,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1336,1,['message'],['message']
Integrability,Requires #814 . Renaming DataTrackerDDGNode::isDirty() to DataTrackerDDGNode::hasChanged() to reduce confusion with DDGNode::isDirty(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/820:235,message,message,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/820,1,['message'],['message']
Integrability,RequriedPlugin does not updates when some of its data field are changed. ; This PR implement this behavior without breaking the existing one. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1458:243,message,message,243,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1458,1,['message'],['message']
Integrability,"Revert ""Triangle numerical integration""",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/256:27,integrat,integration,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/256,1,['integrat'],['integration']
Integrability,"Revival of #1553 ; could not re-opened it because of force push🕵️‍♀️. Based on #1555 . ## Description:; Move fixed_array types (helper::fixed_array and defaulttype::Vec) and their satellites file (algo...) to the new Sofa.Type module.; No dependency on anything, except the (future) Sofa.Config to avoid weird cyclic deps.; As a compatibility layer for transition, so it should be as least breaking as possible. - sofa::defaulttype::Vec becomes sofa::type::Vec; - sofa::helper::fixed_array becomes sofa::type::stdtype::fixed_array. ## Breaking; - if inclusion of _defaulttype_ and _type_ namespace, the compiler cannot chose which one to chose for the free functions cross and dot() when the code did not called them from their respective namespace.It was not a problem because the compiler could find them previously thanks to [ADL](https://en.wikipedia.org/wiki/Argument-dependent_name_lookup).; Fixing is easy by just adding the respective namespace. More info with #1521 . Another PR will remove all defaulttype::Vec (and helper::fixed_array); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1734:239,depend,dependency,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1734,1,['depend'],['dependency']
Integrability,Rework the PR with clean history (see previous #1238); Fix #1166 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1241:166,message,message,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1241,1,['message'],['message']
Integrability,"Right now for a tetrahedron: [P0, P1, P2, P3] (see picture below); The 4 triangles saved in the tetrahedron are:; - T0: [P1, P3, P2]; - T1: [P2, P3, P0]; - T2: [P3, P1, P0]; - T3: [P0, P1, P2]. This means the 4 triangles are clockwised oriented and thus their normals are going inside the tetrahedron. If there is a special reason for that I couldn't find it in the doc. . ![image](https://user-images.githubusercontent.com/21199245/50616906-cf072980-0eea-11e9-8bf0-72a4d2d584d7.png). As Gmsh nice ascii picture (from gmsh full doc) and the 2nd picture suggest. I changed to have counter-clockwise orientation so triangles on borders are by default well oriented to have normals going out. Then, T0 being the 2D plan [u,v], T1 sharing vector u and then T2 and T3 to close the tetrahedron; So new triangles are:; - T0: [P0, P2, P1]; - T1: [P0, P1, P3]; - T2: [P1, P2, P3]; - T3: [P0, P3, P2]. ![image](https://user-images.githubusercontent.com/21199245/50616994-4937ae00-0eeb-11e9-9aca-87385530a7ea.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/878:1103,message,message,1103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878,1,['message'],['message']
Integrability,"Right now, if you put a BoxROI in your scene to get the edges, triangles, etc. contained inside a box, the BoxROI will gets you every elements for which its center point is inside the box. An element partially inside the box can than be flagged as inside. This PR adds an option named ""strict"" to the BoxROI which will instead test that every nodes of the elements are contained inside the box. The option is false by default so that the current behavior remains unchanged. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1127:573,message,message,573,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1127,1,['message'],['message']
Integrability,Roll back #1321 which should have been closed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1327:146,message,message,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1327,1,['message'],['message']
Integrability,"SOFA dev meeting: @guparan will investigate a cleaner backward compatibility.; If no other, message warning user explaining which option to activate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624647049:92,message,message,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624647049,1,['message'],['message']
Integrability,"SOFA with OpenGL adds a X11 dependency. If we compiled SOFA without OpenGL, this dependency was still there, which caused problem when compiling for a headless system (no X11 and no GL). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1370:28,depend,dependency,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1370,3,"['depend', 'message']","['dependency', 'message']"
Integrability,SOFA_WITH_DEPRECATED_COMPONENTS option was declared after it was supposed to be used in SofaFramework's own CMakeLists. Therefore CMake was throwing an error at the first step [here](https://github.com/sofa-framework/sofa/blob/d3aee470bc79a017e4f3e04b608c49d16d5874a6/SofaKernel/SofaFramework/CMakeLists.txt#L26). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1452:413,message,message,413,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1452,1,['message'],['message']
Integrability,SPHParticleSink_obstacle.scn should be ignored. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1317:147,message,message,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1317,1,['message'],['message']
Integrability,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:609,depend,dependency,609,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737,2,['depend'],['dependency']
Integrability,"STLExporter had a useless dependency on VisualModelImpl.; Removing it removes the need on SofaBaseVisual for SofaExporter. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2039:26,depend,dependency,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2039,1,['depend'],['dependency']
Integrability,"Same as PR #284 but without the unwanted merge commits. Small fix related to issue #114 . Have tested the compilation without the flag SOFA_INSTALL_RESOURCES_FILES (which is set by default), Sofa.ini and installedSofa.ini, which are necessary for build and install, are well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/291:383,message,message,383,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/291,1,['message'],['message']
Integrability,"Scene angularSpringForceField.scn throws an error, related to the message you just added @epernod ; Is this normal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1448#issuecomment-676050830:66,message,message,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1448#issuecomment-676050830,1,['message'],['message']
Integrability,"Scene checkers were located in the SofaGraphComponent (even if they were not components themselves....); So they needed to be moved out of it.; The first idea was to move them to Sofa.Simulation as they related to the simulation itself (or rather its initialization).; But scene checking could need dependencies on components themselves (in this case, it needs the contact manager from Sofa.Component.Collision.Response.Contact, and APIVersion from Sofa.Component.SceneUtility); So finally a library was created into ~~applications/plugins, even if it is not really a plugin in the sofa-way of thinking (aka a set of components)~~ Sofa/plugins because it is not in Component or framework, but it could be placed in Sofa/ directly (where GUI is as well). As usual, a compat layer has been added to warn devs of the move. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2960:299,depend,dependencies,299,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2960,1,['depend'],['dependencies']
Integrability,"SceneChecks were isolated in a project. But we may want that plugins add their own SceneCheck. An example with MultiThreading is provided here. The class `SceneCheck` is now available in Sofa.Simulation.Core. Tools to register a SceneCheck are also available in the module. The newly introduced SceneCheck checks if there are opportunities to use a multi-threaded component. It advices the user with a message looking like:. ```; [SUGGESTION] [SceneCheckMultithreading] This scene is using components implemented sequentially while a parallel implementation is available. Using the parallel implementation may improve the performances. Here is the list of sequen; tial components in your scene and their parallel equivalent:; BVHNarrowPhase -> ParallelBVHNarrowPhase; BruteForceBroadPhase -> ParallelBruteForceBroadPhase; HexahedronFEMForceField[Vec3d] -> ParallelHexahedronFEMForceField[Vec3d]; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3597:402,message,message,402,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3597,1,['message'],['message']
Integrability,SceneCreator dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417:13,depend,dependencies,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417,1,['depend'],['dependencies']
Integrability,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:28,message,message,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535,6,['message'],['message']
Integrability,"Second and last task about https://github.com/sofa-framework/sofa/issues/2483. Contains #2531. Create a new plugin SofaNewmat with ; - newmat lib itself; - NewmatMatrix and NewmatVector (and their tests); - LULinearSolver (only compatible with NewmatMatrix); ; Add a ""compatibility"" layer (tricky because SofaNewmat is optional; Update ComponentChange; Remove newmat usage in image plugin. Fix #2483 . Change the template of CGLinearSolver in the BeamLinearForceField because I dont see why we would need to run it with newmat matrices. It results with a very slight difference on the DOF positions. [ci-depends-on https://github.com/sofa-framework/Regression/pull/21]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2532:604,depend,depends-on,604,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2532,1,['depend'],['depends-on']
Integrability,See #1180 for details. Fixes #1180; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1182:135,message,message,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1182,1,['message'],['message']
Integrability,See #1271 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1272:111,message,message,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1272,1,['message'],['message']
Integrability,"See #4532 to review readable changes.; In addition, this PR removes the entire `Sofa/Component/Compat` layer.; This PR depends on : . [ci-depends-on https://github.com/SofaDefrost/SoftRobots/pull/265]; [ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/139]; [ci-depends-on https://github.com/sofa-framework/CGALPlugin/pull/14]; [ci-depends-on https://github.com/sofa-framework/Registration/pull/12]; [ci-depends-on https://github.com/sofa-framework/PluginExample/pull/6]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533:119,depend,depends,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533,6,['depend'],"['depends', 'depends-on']"
Integrability,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:595,depend,dependent,595,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143,2,['depend'],['dependent']
Integrability,"See doc https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html. It gives 3 different presets similarly to what we are used to on the CI. The idea is the same (3 different config) but it cannot mimic it perfectly. For example, the CI checks if dependencies are available before setting a variable. It is not possible with presets. An example of CMakeUserPresets.json I use: https://gist.github.com/alxbilger/bee1135fbe222943906d0f595699c1a3. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3305:252,depend,dependencies,252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3305,1,['depend'],['dependencies']
Integrability,See issue #784 : Quadractic complexity in BarycentricMapping ; This PR depends on PR #797: Cleaning and refactoring of BarycentricMapping. In this PR the initialization of BarycentricMapping (for topology container only) is optimized using spatial hashing. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/798:71,depend,depends,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798,2,"['depend', 'message']","['depends', 'message']"
Integrability,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/350:180,integrat,integration,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350,2,"['integrat', 'message']","['integration', 'message']"
Integrability,"See my comment in the remarks section of #487. > I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it... which is absolutely not the case. See PR #471; > Instead having a library which depends on gtest and SofaCore which ; > - factorize some initialisation methods when they are actually required in the test `SetUp()` method; > - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; > - Mapping ; > - linearisation, ; > - applyJ applyJT equivalence ; > - ForceField; > - linearisation; > - addDForce addKToMatrix equivalence ; > - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... > Nothing of this testing API would require the initialisation of a simulation / node. At this stage to be honest I am not even 100% sure we even need a library for that, maybe free methods are enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019:369,depend,depends,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019,2,['depend'],"['dependency', 'depends']"
Integrability,"See; - #4429. [ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/143]; [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/458]; [ci-depends-on https://github.com/SofaDefrost/SoftRobots/pull/305]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012:18,depend,depends-on,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012,3,['depend'],['depends-on']
Integrability,"See; - #4429. [ci-depends-on https://github.com/SofaDefrost/SoftRobots/pull/302]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4976:18,depend,depends-on,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4976,1,['depend'],['depends-on']
Integrability,"See; - #4429. [ci-depends-on https://github.com/SofaDefrost/SoftRobots/pull/306]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5033:18,depend,depends-on,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5033,1,['depend'],['depends-on']
Integrability,"See; - #4429. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/462]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5052:18,depend,depends-on,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5052,1,['depend'],['depends-on']
Integrability,"See; - #4429. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/463]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5053:18,depend,depends-on,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5053,1,['depend'],['depends-on']
Integrability,"Setup for the Sofa.Type module which will contain classes like Vec, Mat, etc.; Empty for now (just an init() ) and is set as a dependency for SofaHelper. (was before in #1553 but decided to split it). Issue #1521 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - builds with SUCCESS for all platforms on the CI.; - does not generate new warnings.; - does not generate new unit test failures.; - does not generate new scene test failures.; - does not break API compatibility.; - is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1555:127,depend,dependency,127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1555,2,"['depend', 'message']","['dependency', 'message']"
Integrability,Several changes and fix from my master branch:; - Fix: Duplicate declaration of Data in MechanicalObject; - Fix: the graph display of topologyData.; - Replace serr by msg_error and put some methods and parameter from private to protected in SofaMeshCollision classes; - Add: missing generic methods in MeshTopology; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/953:415,message,message,415,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/953,1,['message'],['message']
Integrability,"Several changes from my working branch:; - **TopologicalMapping**: Add method checkTopology. Can be called from outside the component. Need to be overwritten by children. Implement only the tetra2TriangleTopologicalMapping version.; - **Quad2TriangleTopologycalMapping**, **Hexa2TetraTopologicalMapping**, **Hexa2QuadTopologicalMapping**: clean component init and model check in methods.; - **MeshTopology**: reorder methods declaration in header for clarity.; - **EdgeSetTopologyContainer**, **TriangleSetTopologyContainer**, **TetrahedronSetTopologyContainer**: Improve checkTopology methods in container.; - **Mat**, **MatSym**: Improve invertMatrix error logs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/999:764,message,message,764,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/999,1,['message'],['message']
Integrability,Several changes in PluginManager:; - Add check to avoid registering the same plugin from different paths; - Change method getPlugin to look in the map of registered plugin using the plugin name instead of using a reconstructed path. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1472:332,message,message,332,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1472,1,['message'],['message']
Integrability,Several crashes possible in Tetra2TriangleTopologicalMapping when removing tetrahedron.; - When removing the last elements; - When using noInitialTriangles or noNewTriangles options. Will fix issue #954 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/960:304,message,message,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/960,1,['message'],['message']
Integrability,Several warning types:; - uint/int conversion; - bad init order; - missing break; - unused variables. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/873:201,message,message,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/873,1,['message'],['message']
Integrability,Short fix in main CMakeList regarding compilation with other than Win; CPackNSIS preventing from compiling. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/867:207,message,message,207,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/867,1,['message'],['message']
Integrability,Should fix crash and error on scenes:; - SimpleBox-Method2.scn; - testOmniDriverEmu.scn; - /scene-tests/archive/examples/Tutorials/Topologies/TopologyTetra2TriangleTopologicalMapping.scn. Fix unit test:; - ReadState_test.test_loadFailure. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/982:338,message,message,338,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/982,1,['message'],['message']
Integrability,"Should fix out-of-tree errors like https://github.com/guparan/SofaPython3/runs/7896706218?check_suite_focus=true; To be backported asap. [ci-depends-on https://github.com/sofa-framework/SofaGLFW/pull/57]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3229:141,depend,depends-on,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3229,1,['depend'],['depends-on']
Integrability,Should not but I will check.; Yes in fact my fix in TetrahedronFEMFF reveals that the test was doing nothing: This the log on the master branch:; ```; [ RUN ] TetrahedronDiffusionFEMForceField_test/0.extension; [ERROR] [TetrahedronFEMForceField(fem)] object must have a mesh topology. The component is inactivated. To remove this error message please add a topology component to your scene. ```; Right now it crashes... will see if I understand enough the test to fix it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176:336,message,message,336,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176,1,['message'],['message']
Integrability,"Showcase of a pure cpp application with direct usage of components.; Replace glut with sofalgfw (dependency).; Can be built out-of-tree. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2792:97,depend,dependency,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792,1,['depend'],['dependency']
Integrability,Signed-off-by: duriez <christian.duriez@inria.fr>. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/844:150,message,message,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/844,1,['message'],['message']
Integrability,Significant improvement.; Just removing msg coming in the console in release due to CTRL key pressed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1130:201,message,message,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1130,1,['message'],['message']
Integrability,"Similar feature is merged for the ConstantForceField in [#3924](https://github.com/sofa-framework/sofa/pull/3924). It adds separate callbacks for each data but a hacky flag allows to avoid data cross-dependency by de-activating all inputs non-set at the initialization. It could be done here as well but a more robust implementation (Data, callback) could be found. Add a unit test to make sure that no data cross-dependency is triggered. Manual test as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2034213815:200,depend,dependency,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2034213815,4,['depend'],['dependency']
Integrability,"Similar scenes are introduced as a benchmark in order to compare their performances.; It's a cantilever beam simulated with 2.5k tetrahedra.; Depending on the scene, it is solved with either a Conjugate Gradient or a LDL solver.; The main difference is how the global system matrix is assembled (or not in case of a matrix free solver). This is defined by the template parameter of the linear solver. # Results. The results are the average duration in milliseconds of the AnimateVisitor step:. ```; MatrixAssembly_assembledCG_blocs.scn 6.54 ms; MatrixAssembly_assembledCG.scn 16.65 ms; MatrixAssembly_direct_blocs.scn 12.85 ms; MatrixAssembly_direct.scn 22.04 ms; MatrixAssembly_matrixfreeCG.scn 7.99 ms; ```. * MatrixAssembly_matrixfreeCG.scn: the linear solver is a Conjugate Gradient and the matrix is not built; * MatrixAssembly_assembledCG.scn: the linear solver is a Conjugate Gradient and the matrix is explicitly built; * MatrixAssembly_assembledCG_blocs.scn: the linear solver is a Conjugate Gradient and the bloc-based matrix is explicitly built; * MatrixAssembly_direct.scn: the linear solver is a LDL solver and the matrix is explicitly built; * MatrixAssembly_direct_blocs.scn: the linear solver is a LDL solver and the bloc-based matrix is explicitly built. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2208:142,Depend,Depending,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2208,1,['Depend'],['Depending']
Integrability,"Simple PR to clean up DeformableOnRigidFrameMapping, during DEFROST team coding friday. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/848:187,message,message,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/848,1,['message'],['message']
Integrability,"Simple as is the title, namely:. - MeshTopology instead of Mesh; - PointCollisionModel instead of: Point, TPointModel, PointModel, PointMesh, PointSet; - LineCollisionModel instead of: Line, TLineModel, LineMeshModel, LineSetModel, LineMesh, LineSet, LineModel; - TriangleCollisionModel instead of: Triangle, TriangleSet, TriangleMesh, TriangleSetModel, TriangleMeshModel, TriangleModel, TTriangleModel; - SphereCollisionModel instead of: Sphere, SphereModel, TSphereModel; - CapsuleCollisionModel instead of: Capsule, CapsuleModel, TCapsuleModel; - CubeCollisionModel instead of: Cube, CubeModel; - CylinderCollisionModel instead of: Cylinder, CylinderModel; - RayCollisionModel instead of: Ray, RayModel; - TetrahedronCollisionModel instead of: Tetrahedron, TetrahedronModel; - EulerExplicitSolver instead of: Euler, EulerExplicit, ExplicitEuler, EulerSolver, ExplicitEulerSolver; - CGLinearSolver instead of CGSolver, ConjugateGradient; - SparseGridTopology instead of SparseGrid; - SVDLinearSolver instead of SVD, SVDSolver; - FreeMotionAnimationLoop instead of ; - DampVelocitySolver instead of DampVelocity. just you @epernod . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1292:1233,message,message,1233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1292,1,['message'],['message']
Integrability,Simple cleaning. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/856:116,message,message,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856,1,['message'],['message']
Integrability,"Simple, fast-merge :sunglasses: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1484:133,message,message,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1484,1,['message'],['message']
Integrability,"SimpleApi feature is not really related to Simulation.Graph (even if it has a dependency on it); So it was decided to make its own module for it, aka **Sofa.SimpleApi**. Actually it was already using the sofa::simpleapi namespace so this move is making the code more consistent. There is a compatibility layer but if the user was relying only on Simulation,Graph (instead of Sofa.Testing for example) to use SimpleApi, it will break. But the user will be informed on how to fix the break nevertheless. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/397]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4495:78,depend,dependency,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4495,2,['depend'],"['dependency', 'depends-on']"
Integrability,"Simply change the keyboard shortcut associated to camera mode: M key instead of Space key, because the latter is already used to interact with the GUI buttons.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/997:260,message,message,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/997,1,['message'],['message']
Integrability,Simply remove a useless if block. Related to : https://github.com/sofa-framework/sofa/issues/535; Fixes #535 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/590:210,message,message,210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/590,1,['message'],['message']
Integrability,"Simply remove all lines in scenes (scn) including a DefaultCollisionGroupManager. `$ find . -type f -name ""*.scn"" -exec sed -i '/DefaultCollisionGroupManager/d' {} +`. [ci-depends-on https://github.com/sofa-framework/Regression/pull/30]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3104:172,depend,depends-on,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3104,1,['depend'],['depends-on']
Integrability,Since #638 the PR breaks some #ifdef.; Here is fix for the #inclusion problem and a pattern to avoid this kind of problem to be repeated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/672:239,message,message,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/672,1,['message'],['message']
Integrability,"Since SofaNG, cmake was again slow to configure (especially on Windows); After investigation, the previous sofa_find_package() was nulliified in #3120 , and I dont really see why. And the associated commit message is not informative https://github.com/sofa-framework/sofa/pull/3120/commits/8a3ae2dacc1bdff9be83aee15744a37e21eb0054. Bringing it back bring the config time from ~18s to 4.5s on Windows/MSVC generator on a minimal preset (all framework + comonents+ GL + GUI); (Manjaro/ninja generator go from 4 to 2.5s); So it is quite nice all in all 🥸. Trace: (orange part is time for `find_package()`); Before: ![cmake1](https://user-images.githubusercontent.com/11028016/195506545-32c3d4db-b6b2-4500-a3fb-dce59da50c53.png); After: ![cmake2](https://user-images.githubusercontent.com/11028016/195506607-e6ede1f9-c5fd-497d-bd4f-dd4832da918a.png). Install procedure should not be impacted, as the cmake.in files are not touched. \+ this PR fixes some missing sofa_find_package() here and there. Lets see if the CI confirms if https://github.com/sofa-framework/sofa/pull/3120/commits/8a3ae2dacc1bdff9be83aee15744a37e21eb0054 was only a mistake; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3382:206,message,message,206,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3382,1,['message'],['message']
Integrability,"Since the big refactoring from Sofa NG (https://github.com/sofa-framework/sofa/wiki/SOFA-NG:-documentation-on-transition), unit tests fail when the compatibility layer is not compiled, because they rely on the old modules. An example of failure:. ```; Sofa\Component\IO\Mesh\tests\STLExporter_test.cpp(79): error: Failed; A message of type 'Error' was not expected but it was received. ; ====================== Messages =======================; [RequiredPlugin]: ; Message type : Error; Message content: Plugin not found: ""SofaLoader""; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3389:324,message,message,324,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3389,4,"['Message', 'message']","['Message', 'Messages', 'message']"
Integrability,"Since the two questions are related, I combined them together. **BoxROI minor bug**. When I use BoxROI together with RestShapeSpringsForceField, I found that everytime RestShapeSpringsForceField updates indices in recomputeIndices(), the indices stored in BoxROI disappeared. When trying to figure out the problem, I found that in BoxROI.inl, the code piece as:; ```; // Clear lists; indices.clear();; edgeIndices.clear();; triangleIndices.clear();; tetrahedronIndices.clear();; hexahedronIndices.clear();; quadIndices.clear();. pointsInROI.clear();; edgesInROI.clear();; trianglesInROI.clear();; tetrahedraInROI.clear();; hexahedraInROI.clear();; quadInROI.clear();. if(m_componentstate==ComponentState::Invalid){; return ;; }. if(!d_doUpdate.getValue()){; return ;; }; ```; The question is, if we did not requrest ""doUpdate"" in BoxROI, the whole indices are cleared. I think this is not the expected behavior for BoxROI and ""doUpdate"". I suggest put forward the code piece; ```; if(!d_doUpdate.getValue()){; return ;; }; ```; before all the clear() functions. **RestShapeSpringsForceField warning information**. I suggested to add a warning message in the function ""recomputeIndices()"" in RestShapeSpringsForceField.inl something likes:; ```; if (m_indices.empty()); {; // no point are defined, default case: points = all points; msg_warning() << ""No point are defined. Change to default case: points = all points"";; for (unsigned int i = 0; i < (unsigned)this->mstate->getSize(); i++); {; m_indices.push_back(i);; }; }; ```; The reason is this is an unexpected behaivor, and we'd better to warn the users that the result may not be as expected. I spent a whole day to locate the problem in BoxROI when I met unexpected behavior in my model. If there were this warning message, much time will be saved during debugging.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1390:1143,message,message,1143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1390,2,['message'],['message']
Integrability,"Since users often copy paste examples, let's show good scene habits: when modeling volumetric, the MeshMatrixMass should be used instead. I guess this will trigger the regression tests (but I need to recompile regression first, so I give the CI a chance :) ). [ci-depends-on https://github.com/sofa-framework/Regression/pull/64]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4687:264,depend,depends-on,264,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4687,1,['depend'],['depends-on']
Integrability,"Small PR on GridTopology and RegularGridTopology link to issue: #163. - Allow to set RegularGridTopology in 1,2 or 3 dimension. But still check if the grid resolution is valid.; - Fix example of Tetrahedron FEM that was crashing if no tetrahedron is found in the scene.; - Add an example scene.; - Remove RegularGridTopology dependencies from MechanicalObject. CHANGELOG:; - GridTopology ; - clean the code & factor the constructor; - implement ""flat"" grids in 1 or 2 dimension by using setting grid resolution to ""1"" in the corresponding axis; - RegularGridTopology clean the constructor's code & remove NDEBUG code. ; - Adds RegularGridTopology_test; - TetrahedronFEMForceField clean code; - MechanicalObject removes code that was specific to the grid. ; - Adds new examples scenes called: ; examples/Components/topology/Hexa2TetraTopologicalMapping.scn; examples/Components/topology/RegularGridTopology_dimension.scn; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270:325,depend,dependencies,325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,Small PR on the pickHandler class.; ADD: several tests on pointers != null before accessing them. ; ADD: default ray length parameter in the constructor.; UPDATE: replace most of the .h include in the header by forward classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/522:327,message,message,327,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/522,1,['message'],['message']
Integrability,"Small PR to : ; - ~~remove useless header~~ (and then remove one dependency on SofaBaseTopology) (see discussion #242 ) (actually instead of removing, I used an existing #ifdef macro); - add forgotten Windows macro to export specialized functions into DLLs. This should not break any API compatibility or compilation (hopefully). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/249:65,depend,dependency,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/249,2,"['depend', 'message']","['dependency', 'message']"
Integrability,Small PR to :. 1. Add more tests and error messages if **ArticulatedSystemMapping** init or bwdinit failed. ; 2. Check if **articulatedCenter** has been found in **ArticulatedHieararchyContainer**.; 3. Fix warning when drawing JointSpringFF lines and Update the warning message to be more understandable. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1448:43,message,messages,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1448,3,['message'],"['message', 'messages']"
Integrability,"Small PR to allow compilation of SofaCUDA plugin with SOFA_NO_OPENGL flag (i.e disabling OpenGL); Remarks:; - The components' draw() functions in SofaCUDA should share their code with their ""normal"" version.; For example, CudaUniformMass with cudarigid3f should call the draw() of UniformMass<Rigid3>; Some work has to be done further in Sofa itself, that's why I just add preprocessor tests (#ifdef SOFA_NO_OPENGL) and did not use the drawtool functions 👅 ; - Obviously, if you compile without OpenGL, you wont be able to share OpenGL buffer in CUDA. In other words it is useless to use CudaVisualModel without SOFA_NO_OPENGL.; (Actually CudaVisualModel should be renamed CudaOglModel). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1242:787,message,message,787,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1242,1,['message'],['message']
Integrability,Small PR to fix SofaPhysicsAPI compilation broken due to changes done in sofa main API on:. - helper::io::Image; - GUIManager::RegisterGUI. Maybe this project should be added to one of the vm of the dashboard?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/549:310,message,message,310,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/549,1,['message'],['message']
Integrability,Small PR to fix two unneeded dependencies :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/588:29,depend,dependencies,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/588,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,Small changes found in my dev branch:; 1. clean various type mismatch warnings in **SofaBaseVisual** classes; 2. Clean some unnecessary/deprectated header includes in **SofaDeformable** classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1449:294,message,message,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449,1,['message'],['message']
Integrability,Small changes to prepare to compile with stdc++17.; * weird problem with byte keyword (introduced with std::byte); * removal of binary_function in c++17 (already deprecated in c++11 actually). Final compatibility with c++17 will need the merge of #1101 (problem with Eigen) and a small change with CMake (CMAKE_CXX_STANDARD 17); waiting for the CI to be fully compatible. EDIT: had to update googletest as well because of new STL's things.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1162:540,message,message,540,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1162,1,['message'],['message']
Integrability,"Small cleaning, replacing sout and serr by msg_info, dmsg_info or msg_error. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1234:176,message,message,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1234,1,['message'],['message']
Integrability,"Small fix related to issue #114 . Have tested the compilation without the flag `SOFA_INSTALL_RESOURCES_FILES` (which is set by default), Sofa.ini which is necessary is well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/284:281,message,message,281,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/284,1,['message'],['message']
Integrability,Small fix to allocate memory on cuda_device much faster for large vectors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1142:174,message,message,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1142,1,['message'],['message']
Integrability,"Small fix, after a discussion we had Christian, Hugo, Erik and I on haptic rendering. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1537:185,message,message,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1537,1,['message'],['message']
Integrability,"Small fix, correcting the check for the multiplicity between ""time"" and dt, as well as putting period to dt by default if nothing is given by the user.; Set back to the default behavior : periodic export activated. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/776:314,message,message,314,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/776,1,['message'],['message']
Integrability,Small fix: removed debug message for Transform *= operator,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1732:25,message,message,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1732,1,['message'],['message']
Integrability,Small improvement on the view of html file associated with scenes. We can now navigate (with backward) between and starting Sofa scene directly with hyperlinks. The windows can also be hidden/displayed and its location preserved. . I cannot prevent myself to also clean small things in RealGUI and SetDirectory/FileSystem. ; But this is very minor. . I made a quick & dirty video to show the results so that you don't need to compile it: ; https://youtu.be/5uumC9f-wzo. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/540:569,message,message,569,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540,1,['message'],['message']
Integrability,Small patch to restore ambient component in fake sphere rendering. Was:; ![manyspheres_00000002](https://cloud.githubusercontent.com/assets/11028016/23556748/ef984e7c-002d-11e7-9346-c7208b12f44d.png). Now:; ![manyspheres_00000001](https://cloud.githubusercontent.com/assets/11028016/23556756/f77050b8-002d-11e7-948d-5605c6cd2825.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/192:434,message,message,434,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/192,1,['message'],['message']
Integrability,"Snap, CImg errors on Windows are fixed :tada: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/622:147,message,message,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/622,1,['message'],['message']
Integrability,"So I took a look at the SleepController. It simply puts context to sleep where the mechanical object has a max velocity under a certain threshold. Then wake them up again only when a collision occurs with another object that is moving. ; Three remarks : ; - Being put to sleep disables any mechanical visitor to be applied on the node and deactivates its constraint corrections. So no more computing (no system build, no integration, only collision detection); - This works well only for scenes where external interaction only arise between two objects colliding, neither by the mean of a change of external forces (dynamic vector field for instance), or of constraint state changes not managed by the collision pipeline (for instance statically defined interaction constraints such as cable constraints). ; - The code seems overly complicated for what it performs but certainly does what it says it does. I didn't try it but it looks ok. . Sincerely, I cannot see myself advising anyone to use it in their scene given the fact that the use case doesn't apply for the majority of the scenes (especially for soft robotics). So I wouldn't mind never seeing it again...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106:421,integrat,integration,421,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106,2,['integrat'],['integration']
Integrability,So apparently `ImagePNG_test.ImagePNG_NoFile` fails when executed **after** `logging_test`.; I don't know Message API enough to understand what is wrong but it seems to be related to `MessageDispatcher::clearHandlers()` calls in `logging_test`.; Any idea @matthieu-nesme @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802:106,Message,Message,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802,2,['Message'],"['Message', 'MessageDispatcher']"
Integrability,So i pass this PR to read ? . Edit: if if the component should work then the correct way to emit the message is msg_warning instead of a msg_error.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/367#issuecomment-324286208:101,message,message,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367#issuecomment-324286208,1,['message'],['message']
Integrability,"So it's done. That answers my question. On Mon, Jan 23, 2023, 21:14 Hugo ***@***.***> wrote:. > Sorry I do not get the question @alxbilger <https://github.com/alxbilger>; > Here it's the ChangeLog for v22.06 is already available here :; > https://github.com/sofa-framework/sofa/blob/master/CHANGELOG.md#v220600; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/pull/3573#issuecomment-1400919780>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACQVHUB5KC7PSWLPY7AYYSTWT3RBZANCNFSM6AAAAAATVQHW2U>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3573#issuecomment-1400962682:631,Message,Message,631,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3573#issuecomment-1400962682,1,['Message'],['Message']
Integrability,So now the object is fully valid if the transformation's data are updated. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1459:174,message,message,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1459,1,['message'],['message']
Integrability,"So, as we discussed during the dev meeting. 2 modifications:; 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward. . @guparan can you confirm this is now ok to go?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358:97,depend,dependencies,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358,2,['depend'],['dependencies']
Integrability,"So,; 1) there is no reason to have helper::ArgumentParser in SceneLoaders because a loader (py, scn, etc..) shouldn't be connected in any way to the command line (which is an user interface aspect), especially one relying on a static global object as ArgumentParser. ; 2) it make sense to load a scene with specific parameters...so having an array with scene specific parameters is in the load function seems sounded. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113:180,interface,interface,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113,1,['interface'],['interface']
Integrability,Sofa is a drama in term of #include coupling which make:; - compilation time to be larger than what it should; - cost a lot in term of code maintenance. . In the future we should try to progressively improve the situation. ; This PR is a minor step toward this target. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/419:370,message,message,370,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/419,1,['message'],['message']
Integrability,"Sofa's default CMake settings activates SofaTest, which depends on PLUGIN_SOFAPYTHON, which is not activated by default. This result in an unsuccessful generation of the project. Either SofaPython should be a default SOFA dependency, or Sofa tests using SofaPython should be separated and only activated when SofaPython plugin is too. @bcarrez @matthieu-nesme might be interested; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/239:56,depend,depends,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/239,2,['depend'],"['dependency', 'depends']"
Integrability,"Sofa/framework/Core/src/sofa/core/behavior/BlocMatrixWriter.h can be deprecated. The approach is not widely used (only one force field). If I understood correctly, the strategy was to detect if the matrix is a compressed row sparse matrix using a `dynamic_cast`, to efficiently insert matrix entries. However, this is no longer needed since compressed row sparse matrices now support efficient block insertion even through the `BaseMatrix` interface (because of https://github.com/sofa-framework/sofa/pull/2306/files among other PRs).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4986:440,interface,interface,440,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4986,1,['interface'],['interface']
Integrability,"SofaCUDA declaration is moved out of the condition on Sofa.GL.; It is moved after VolumetricRendering, because SofaCUDA has a dependency to VolumetricRendering. Therefore, VolumetricRendering must be declared first. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3514:126,depend,dependency,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3514,1,['depend'],['dependency']
Integrability,"SofaConstraint links with SofaImplicitOdeSolver, which links with Sofa.Component.ODESolver.Backward, which links with SofaSimulationCore. Isn't the dependencies transferred in this case?. I launch a full build, just in case.; [ci-build][force-full-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2640#issuecomment-1031474078:148,depend,dependencies,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2640#issuecomment-1031474078,1,['depend'],['dependencies']
Integrability,"SofaDistanceGrid has a (required) dependency on SofaMiscCollision, but SofaMiscCollision has an optional dependency on SofaDistanceGrid (which enables the feature _FrictionContact_DistanceGrid_ ). Needless to say that this feature is never compiled, as it will be impossible to pass into SofaDistanceGrid_FOUND.; (SofaMiscCollision will never be able to find the package SofaDistanceGrid)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1897:34,depend,dependency,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1897,2,['depend'],['dependency']
Integrability,SofaExporter was a linked to SofaPython & SofaGuiQt under the PUBLIC scope while that dependency is internal & should not be exposed publicly. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/963:86,depend,dependency,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/963,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"SofaPython could not compile without having SofaExporter.; To solve that, bindings included in SofaPython are moved into SofaExporter. Bindings should be included into their respective modules/plugins anyway. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1095:308,message,message,308,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1095,1,['message'],['message']
Integrability,SofaPython is a dependency of `image` plugin (see https://github.com/sofa-framework/sofa/blob/e47f070596028142cadd7bbbf8f45bac4f9d3215/applications/plugins/image/CMakeLists.txt#L13). The bindings can be found in https://github.com/sofa-framework/sofa/tree/master/applications/plugins/image/python. SofaPython is deprecated and must no longer be used. Instead SofaPython3 must be used. The mentioned code must be updated accordingly.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3862:16,depend,dependency,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3862,1,['depend'],['dependency']
Integrability,"SofaPython was needed into SofaTest (to enable python test) and SofaExporter for bindings. 1- then CMake had to enable SofaPython then SofaTest then SofaPython/SofaPython_test, which is quite ""bothersome"",and made the main SOFA Cmakefile cluttered.; Now if SofaTest is enabled, SofaPython will enable the use of Python_test (and not the other way around); (NB SofaPython contains a redirection for project including `SofaTest/Python_test.h`). 2- SofaExporter is a Sofa module and so, it is quite weird to have a dependency to a plugin in a module.; Now SofaPython will enable SofaExporter bindings if SofaExporter has been enabled before (and not the other way around). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1875:512,depend,dependency,512,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875,1,['depend'],['dependency']
Integrability,"SoftRobots uses SceneCreator for its tests, but as it is built as an out-of-tree project on our CI, libSceneCreator.so can't be found. until this PR is merged at least... . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1109:272,message,message,272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1109,1,['message'],['message']
Integrability,"Solve #1331 . For multi configuration projects (e.g Visual Studio), the macro was not checking if the directory was existing, and was copying the lib as the configuration name (which is obviously wrong 🐇 ); The fix creates the directory before copying (no need to check as CMake does not do anything if it already exists). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1347:422,message,message,422,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1347,1,['message'],['message']
Integrability,Solves issue #84 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/282:118,message,message,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/282,1,['message'],['message']
Integrability,"Some FEM have similar members and methods but the behaviour slightly changes sometimes. For example:; - In triangular and tetrahedronFEM, you have to choose the method using an enum: (large, small, etc...). In triangular, Large = 0 and in tetra, Large = 1. ; Which is stored as string or enum depending on components.; - Same for setter and getter, you have: TriangularFEMForceField::setYoung vs TetrahedronFEMForceField::setYoungModulus. setPoissonRatio vs setPoisson. Could we setup a commun api for those components? Can someone identify one FEM which could be the reference.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/134:293,depend,depending,293,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/134,1,['depend'],['depending']
Integrability,"Some advanced timer steps also pass the node as an ""obj"" data to the timer's record. This allows one to differentiate a timer call from another one in another node. I guess one picture is worth a lot or words here:. <img width=""675"" alt=""advanced_timer_graph"" src=""https://user-images.githubusercontent.com/6951981/74366929-3e7b6800-4dd1-11ea-82de-c4631ee7e857.png"">. This PR adds these obj ids to the timer labels. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1256:515,message,message,515,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1256,1,['message'],['message']
Integrability,Some bug fix from my working branch. List of fix:; - **[FixedConstraint]** fix bug when several invalid indices need to be removed. Need to parse all first and remove in a second stage.; - **[SphereModel]** FIX: display of collision sphere in wireframe mode.; - **[TetrahedronSetTopologyContainer]** FIX: triangle created with bad orientation in addTetrahedronProcess method.; - **[TriangleModel]** FIX: need to check if topology has changed and update the triangles if needed before computing triangleModel BBox; - **[PointModel]** Fix pointModel crash when removing points. need to be well resized in computeboundingtree method.; - **[SofaBaseTopology]** Add a single static trianglesOrientationInTetrahedronArray in baseMeshTopology.h and remove all the different occurences (with different values) in the cpp files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/985:919,message,message,919,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/985,1,['message'],['message']
Integrability,Some changes to be able to handle tetra removal. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/554:148,message,message,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554,1,['message'],['message']
Integrability,"Some code is only enabled if SOFA_HAVE_NEW_TOPOLOGYCHANGES is defined (and adds a dependency on SofaBaseTopology).; I guess this is related with a new (old?) way to manage topology changes.; But this macro can never be enabled anywhere so I suppose that actually the code is not used at all.; Waiting the opinion of @epernod and if necessary, we will make a PR with the removal of the potential dead code. (issue coming from #242)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1786:82,depend,dependency,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1786,1,['depend'],['dependency']
Integrability,"Some computeBBox() functions were still using numeric_limits<Real>::min() instead of lowest(). numeric_limits<T>::min() returns 0 (more precisely a value very close to it) if T is a floating-point type, whereas numeric_limits<T>::lowest() returns -inf(more precisely -max of T), which is the expected behavior in computeBBox(). http://en.cppreference.com/w/cpp/types/numeric_limits/min; http://en.cppreference.com/w/cpp/types/numeric_limits/lowest. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/634:548,message,message,548,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/634,1,['message'],['message']
Integrability,"Some functionalities introduced by this PR looks redundant to the existing printLog data, and can replace it with great advantage. Moreover, the current usage of this printLog data varies from one component to an other, and could be cleaned in the same time.; Maybe a sdebug stream (in addition to sout, serr) could be introduced to cover some of the misusage of the printLog data.; Initially, printLog is to print or not the component messages to the standard output",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276617447:436,message,messages,436,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276617447,1,['message'],['messages']
Integrability,Some minor warnings and ...; FIX strange double incrementation on iterator in DefaultMultiMatrixAccessor.cpp : @ChristianDuriez @courtecuisse your review would be great !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/364:271,message,message,271,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/364,1,['message'],['message']
Integrability,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:236,message,message,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510,1,['message'],['message']
Integrability,"Some pragma directive were introduced by 4548ab474f89a229f; but they work only with gcc, and generate some warnings with ; other compilers, at least msvc based on my own experience. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/447:281,message,message,281,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/447,1,['message'],['message']
Integrability,"Some references:; - https://en.wikipedia.org/wiki/Dataflow_programming; - Blender's node co-exists with Blender SceneGraph https://docs.blender.org/manual/en/dev/editors/node_editor/introduction.html#interface (node is only for the shading... but object modifier on the geometry is using a ""stack"" based approache to express a linear relationship). ; - https://solarianprogrammer.com/2012/10/17/cpp-11-async-tutorial/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367286961:200,interface,interface,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367286961,1,['interface'],['interface']
Integrability,"Some scenes where presenting strange behavior : no object moving; with specific numerical settings, and with some others it was; working fine. This was due to a threshold of CG met at first step; on denominator value. Now force at least one step. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/521:346,message,message,346,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/521,1,['message'],['message']
Integrability,Some various changes that shouldn't break things but ease the SOFA_FLOAT removal. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/864:181,message,message,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/864,1,['message'],['message']
Integrability,Some very simple clean ups while I was there. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1124:145,message,message,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1124,1,['message'],['message']
Integrability,"Some work on cleaning the components SparseGridTopology and SparseGridRamicficationTopology: . - Remove commented code; - Replace sout/serr by msg macro; - Remove duplicated Data in SparseGridRamicficationTopology which inherite from SparseGridTopology ; - Fix warnings (size_t, unsued variables, ...); - Fix SparseGridTopology.scn and SparseGridRamicficationTopology.scn behavior; - Add regression_test references for both scenes and add them to the list of scene to be tested. This PR replace an old one #706 instead of merging master. This PR is only a aesthetic clean before a more complex PR to clean and factorize methods inside the components as well as removing the fileMesh loaded inside the component and use topology Data buffers. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/855:841,message,message,841,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/855,1,['message'],['message']
Integrability,"Some work on cleaning, adding more check and test on sparseGridTopology component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/706:182,message,message,182,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/706,1,['message'],['message']
Integrability,"Some work on dynamic topology changes:; - rewrite the TRIANGLESREMOVED case of Tetra2TriangleTopologyMapping, should bring a speedup of xN where N is the number of triangles to remove. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/788:286,message,message,286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/788,1,['message'],['message']
Integrability,"Something, when having multiple topologies in the same node as the input state, the barycentric mapping will get the wrong input topology since it rely only on `fromModel->getContext`. This PR fixes this by adding links for the input and output topologies. . Also some reformatting of the input topology type detection with a goto statement...a good example as to where goto can be useful :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1125:493,message,message,493,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1125,1,['message'],['message']
Integrability,Sorry I didn't see the dependency SofaImplicitField -> SofaDistanceGrid.; Let's merge this right away.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/593#issuecomment-366641383:23,depend,dependency,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/593#issuecomment-366641383,1,['depend'],['dependency']
Integrability,"Sorry I should have given more details. The move I suggest is something that was around for quite a while now. I think it was suggested by @damienmarchal first. The legacy conditionally compiled code, mainly in SofaCUDA but it applies everywhere, is a bad practice for the following reasons:; - It is nearly impossible for the user to know what components are included in the conditionally compiled module. It would require a complex documentation to inform the user, which is not done for SofaCUDA.; - Testing becomes more complex. It's challenging to ensure that all possible combinations of conditions are thoroughly tested, increasing the risk of undetected bugs. See https://github.com/sofa-framework/sofa/pull/4227 for example.; - Other plugins (for example SoftRobots) cannot add their own CUDA components into SofaCUDA. So it's not true that all components are in the same plugin. We also have the example of the GPU-based solvers. What I suggest is to keep the cpu-based plugin, and create a new plugin for the gpu-based components. It would be applied to all plugins that are a conditional dependency in SofaCUDA (so not the `Sofa.Component.*` modules), not only `VolumetricRendering`. This PR is an illustration of the move of one particular plugin, but it should be generalized. The goal of the PR is also to approve the move, but also the folder architecture. If we can agree on an architecture inside the SOFA codebase, we can also apply it in external plugins (such as SoftRobots or MOR).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1864019900:1100,depend,dependency,1100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1864019900,1,['depend'],['dependency']
Integrability,"Sorry for the (big) delay 😥; Usually this problem with libpng means that you compile and link SOFA with the libpng.h. libpng.lib included from the sofa-windows-dependency-pack but your system is using an other libpng.dll in your SYSTEM. . I suppose you have ..../Anaconda3/Library/bin in the PATH environment variable. ; So you have a mismatch between libpng's version (and libpng is bothersome for that).; Make sure you load the good dll when executing runSofa. ; The ""good"" dll is supposed to be copied from sofa-windows-dependency-pack with the binaries of the build directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284:160,depend,dependency-pack,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284,2,['depend'],['dependency-pack']
Integrability,"Sorry fred you are right, the PR contains both the pluginization of the SofaOpenglVisual in area module/plugin and the removal of the GLEW all around and updating the code that had dependencies to SofaOpenglVisual. I updated the description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346:181,depend,dependencies,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346,1,['depend'],['dependencies']
Integrability,Sorry the caduceus scene was also affected by #1369 ; Could anyone merge it straightaway?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1392:190,message,message,190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1392,1,['message'],['message']
Integrability,"Speed up by a (huge) factor the rendering of several spheres.; This is done in 2 ways:; - optimizing with VBO for ""normal"" spheres (like before, with rings and segments parameters) ; - impostors (https://paroj.github.io/gltut/Illumination/Tutorial%2013.html). On the same computer, for 150K spheres :; - 0.8fps with previous rendering; - 22fps with VBO; - 46 fps with impostors . This task is also the beginning of optimizing draw tools, by removing deprecated glu calls and non optimized OpenGL code ; and by using VBO/IBO and shaders. (class BasicShapesGL). This PR should resolve more or less the issue #142 . ; It depends if this issue talks about spheres only or more generally speeding up rendering itself (in that case, it will need much more commits ;) ). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/170:618,depend,depends,618,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/170,2,"['depend', 'message']","['depends', 'message']"
Integrability,Sphere drawn was actually half the size of the Sphere used.. Thank you @etagliabue for the notice !; ; Problem was:; ![](https://i.ibb.co/J5SkJ01/Sphere-ROI-00000001.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1318:271,message,message,271,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1318,1,['message'],['message']
Integrability,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/661:1457,message,message,1457,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661,1,['message'],['message']
Integrability,"Started from ; - #4858 . but decided to do a separate PR to introduce the new ComponentChange for lifecycle/user management.; and applying on Animation loop components. [ci-depends-on https://github.com/SofaDefrost/SoftRobots/pull/296]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4863:173,depend,depends-on,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4863,1,['depend'],['depends-on']
Integrability,"Starting the work of cleaning the topology in Sofa.. resting in peace since 2012... - Change those methods: now returns unsigned int instead of int: ; - getEdgeIndex(PointID v1, PointID v2);; - getTriangleIndex(PointID v1, PointID v2, PointID v3);; - getQuadIndex(PointID v1, PointID v2, PointID v3, PointID v4);; - getTetrahedronIndex(PointID v1, PointID v2, PointID v3, PointID v4);; - getHexahedronIndex(PointID v1, PointID v2, PointID v3, PointID v4, PointID v5, PointID v6, PointID v7, PointID v8);; - Now unfound ID == UINT_MAX instead of -1.; - Change several serr/sout into msg_. In this PR, 2 scene tests are now sending error due to the conversion of serr into msg_error.; This is beacuse some scene test try to do topological change on regularGrid which doesnt support that. I would like to keep those scene error and handle that in a next PR (to split PRs and simplify review process). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/866:997,message,message,997,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/866,1,['message'],['message']
Integrability,StateMask is including Eigen/Sparse everywhere while it is not needed/used. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1505:177,message,message,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1505,1,['message'],['message']
Integrability,Static access to the ConsoleMessageHandler (use case in SP3 ([PR #18](https://github.com/sofa-framework/SofaPython3/pull/18)). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1434:226,message,message,226,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1434,1,['message'],['message']
Integrability,Static solver updated by @jnbrunet and I think @IPeterlik worked on it as well; It now includes : ; - possibility to make more than one Newton-Raphson step; - correction and residual tolerance as data; - option to stop iterations when residual is growing. Uses also #pragma; A DOC page will soon be made available specific to the static solver. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/950:444,message,message,444,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/950,1,['message'],['message']
Integrability,Stop the search of the Container/BaseTopology when one is found (using break). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new scene test failures.; - [ ] does not generate new unit test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1176:178,message,message,178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1176,1,['message'],['message']
Integrability,"Stumbled on it with #1649 . DiffusionSolver was unable to find ""png.h"" when SOFA_NO_OPENGL is activated. It appears that if SOFA_NO_OPENGL is not activated, adding glew somewhat adds the dependency package directory (<sofaroot>/include) to the include_directories of SofaHelper (and the subsequent modules needing it). But if SOFA_NO_OPENGL is not activated, this directory is not added.; DiffusionSolver needs Cimg, which adds only for himself the include directory (i.e no target_include_directories).; So CImg compiles well but the modules needing it do not. That's why DiffusionSolver cannot find ""png.h"". My fix does add this include_directory to the target, but I don't know if it is the best way. Joy of CMake 🥴. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1650:187,depend,dependency,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1650,1,['depend'],['dependency']
Integrability,"Suffix was missing for SceneCreator, SofaTest and SofaSimulationCore.; Fixes #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/511:183,message,message,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/511,1,['message'],['message']
Integrability,"Summary:; - duplicate changes appeared since the Sofa-ng move (and the message from uncreatable was reporting only the first registered move, so the displayed error message itself was incorrect); - few changes were invalid (some non-BaseObject were inserted); - few components were forgotten; - removed the creatablemoved class, since the move will be reported by the SceneCheckerRequiredPlugin anyway. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2986:71,message,message,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2986,2,['message'],['message']
Integrability,"Summary:; The issue started from the fact that the inversion of Matrix returns a boolean to inform the user if the matrix has been effectively inverted or not, and displays a message in the Messaging console.; A lot of bad points:; - almost nobody checks the return value,; - the really bad dependency on the Messaging system in a core component; - the message itself does not really say **who** could not invert the matrix; ; More generally this emphasizes the lack of a harmonious way to inform the user to handle errors, and how to be sure the user does something with it. The common way to do it in the industry:; - error codes,; - exception,; - the 'expected' idiom : [Systematic Error Handling in C++ by Dr. Andrei Alexandrescu](https://channel9.msdn.com/Shows/Going+Deep/C-and-Beyond-2012-Andrei-Alexandrescu-Systematic-Error-Handling-in-C) ,; - for sure there are many more, feel free to tell in this issue. All of them have their cons and their pros, but I wont explain here (lots of blogs are better than me ;); - https://ned14.github.io/outcome/motivation/; - https://bell0bytes.eu/expected/; - https://foonathan.net/2017/12/exceptions-vs-expected/",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1924:175,message,message,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1924,3,"['depend', 'message']","['dependency', 'message']"
Integrability,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data, others rely on Data and others are using a combination of Data with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR ##119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"",; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users.; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #119; This PR replace PR #124 ; This PR solve the Issue #64. Checklist to be merge:. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does may break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/206:431,interface,interface,431,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206,3,"['depend', 'interface', 'message']","['depends', 'interface', 'message']"
Integrability,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data<Vec3>, others rely on Data<Vec4> and others are using a combination of Data<string> with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR #https://github.com/sofa-framework/sofa/pull/119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"", ; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users. ; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. . The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #https://github.com/sofa-framework/sofa/pull/119 ; This PR solve the Issue https://github.com/sofa-framework/sofa/issues/64. Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/124:451,interface,interface,451,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/124,2,"['depend', 'interface']","['depends', 'interface']"
Integrability,Super good initiative!. - these message handler should replace existing buffers. They should be removed because handling history with an handler is a way better idea. But the distributed gui should then use this new mechanism to print log history in the component widgets. - please stop adding Data in Base!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276614106:32,message,message,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276614106,1,['message'],['message']
Integrability,THIS PR HAS BEEN REPLACED WITH #377.; So i close it. . ===============; This is an attempt to fix the bug here: #375 . The only real change is in BaseLink all the other file is cosmetic cleaning. ; Currently it is breaking & a wip. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/376:331,message,message,331,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/376,1,['message'],['message']
Integrability,"THIS PR HAS BEEN SPLITTED IN SEVERAL PART... THE FIRST ONE IS: #1605 . In this PR I'm try to avoid the tight coupling that is currently in DataTypeInfo.h. . Let's me explain,; Every Data that we manipulate in sofa can return type informations. ; This can be done in two ways:; - the first solution rely on type_traits with the specialization of the DataTypeInfo class. A DefaultDataTypeInfo is provided as a fallback scenario while fully defined information can be provided by providing a specialization for DataTypeInfo<>. ; - the second solution is a runtime approach were the typeinfo is inherited from AbstractTypeInfo. ; To *ease* the implementation the runtime solution is generated by ""reusing"" the static one. This is done with VirtualTypeInfo<StaticDataTypeInfo>. This VirtualTypeInfo inherits from AbstractTypeInfo but wrap and forward all the method call to the StaticDataTypeInfo passed in the template parameter. . This is actually an interesting design gears provided fast/efficient API and an abstract one with lower performance. Nevertheless there is actually one problem with the existing implementation, the problem is that by default access to the static version (so the one that need the full inclusion of involved data types) to generate the dynamic one in the VirtualTypeInfo::get() method. As this function is needed to implement Data<T>::getAbstractTypeInfo it means that the complete static version is needed everytime and everywhere we manipulate a Data<>. To be sure the code does not fall back to DefaultTypeInfo... most of the specilization are made visible in DataTypeInfo.h where a lot of data types ""vector, rigid, map, vec, quat"". All these includes are just there to insure that in Sofa no-one will never fallback on the default dehavior. But static type info is kind of ""expert"" feature that is only usefull in few rare use cases. So polluting the complete dependency tree (and compilation unit) for a rarely use case is problematic. . So I tried to reverse all to i",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552:829,wrap,wrap,829,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552,1,['wrap'],['wrap']
Integrability,"TL;DR (dev): Remove direct dependency in SofaConstraint&SofaPrecond on SofaSimpleFEM by implementing a function in TetraFEM.; TL;DR (user): Using PrecomputedConstraintCorrection with `rotations=""true""` now **requires** to have a RotationFinder. PrecomputedConstraintCorrection has a hard dependency on TetrahedronFEMForceField, to get rotations.; (hence calling a a function of TetraFEM); It can also get rotations if it detects a component implemented RotationFinder<T>.; But TetrahedronFEMForceField is already implementing BaseRotationFinder taking a BaseMatrix*.; RotationFinder<T> inherits BaseRotationFinder, so I made TetrahedronFEMForceField implementing RotationFinder<T> instead. (which adds an other method to implement); Finally, PrecomputedConstraintCorrection only needs RotationFinder<T> now. IMO, ; - BaseRotationFinder implemented in TetrahedronFEM & HexahedronFEM only and used in WarpPreconditioner;; - RotationFinder<T> (implemented by nobody in the sofacode base but apparently by one external plugin @pedroperrusi) and used by PrecomputedConstraintCorrection, WarpPreconditioner and PrecomputedWarpPreconditioner;. would really need a refactoring or some re-working.; Those two were defined more or less in the same time, in 2006 (!) in the early days of SOFA. Some cleaning in PrecomputedConstraintCorrection as well; and this PR made me wonder the never-defined preprocessor definition NEW_METHOD_UNBUILT in PrecomputedConstraintCorrection (@ChristianDuriez ?). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it doe",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2250:27,depend,dependency,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2250,2,['depend'],['dependency']
Integrability,"TODO: resolve conflict then merge; Do not forget to add ""every code linking to those two modules will have to add the appropriate find_package"" to commit message.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/668#issuecomment-405845841:154,message,message,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668#issuecomment-405845841,1,['message'],['message']
Integrability,"TODO:; - ~~check removed functions and insure compatibility layer~~; - ~~new creation mechanism of GravityForceField~~; - ~~self, GravityForceField checks if one is already here~~; - ~~have a callback and save the norm : if 0 exit all loops~~; - ~~what happens if no mass for GFF~~; - ~~update dates in messages (v22.12 -> v23.12)~~; - ~~update PR description~~; - test when a node is added. One issue remains in my tests :; - simulation starting without gravity, and then gravity is added; - mass added using python, since no init, the link in GravityForceField to the local mass is no performed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1238134724:303,message,messages,303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1238134724,1,['message'],['messages']
Integrability,"Tackles one point of #4221.; Replace embedded version of nlohmann_json library by an external one, using the modern ""find or fetch"" mechanism from CMake >=v3.24 (see https://cmake.org/cmake/help/latest/guide/using-dependencies/index.html#fetchcontent-and-find-package-integration ), similarly to what has been done in https://github.com/sofa-framework/sofa/pull/4240 for TinyXML2.; This is not required by conda-forge for the SOFA conda package as the library is header-only, only recommanded.; We also discussed to remove this dependency as only used by AdvancedTimer, but meanwhile, if not removed by the next-release, we might consider this PR or not. Let me know.; As for other dependencies that will be handled by this ""find or fetch"" mechanism, additional work needs to be done to forbid the fetch if the find package failed (also required for the next release). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4257:214,depend,dependencies,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4257,4,"['depend', 'integrat']","['dependencies', 'dependency', 'integration']"
Integrability,"Take a look at the removed overload. ; ```; SetDirectory::SetDirectory(const std::string& filename); {; SetDirectory(filename.c_str());; }; ``` ; is not valid object creation.; It is both wrong and unneeded. As for the link with #992, latest message mention failing tests, which are due to the aforementionned bug.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1083#issuecomment-503608712:242,message,message,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1083#issuecomment-503608712,1,['message'],['message']
Integrability,"Take for example the scene: Demos/Liver.scn; Change the gravity of the root node:; <Node name=""lroot"" gravity=""0 0 0"" dt=""0.02"">. As soon as the simulation start, the liver disappears... No error message in the console, neither on the components. Does someone has an idea?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/557:196,message,message,196,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/557,1,['message'],['message']
Integrability,Targets are built with debug version of runtime library in debug configuration; under MS Visual Studio. This is enabled with /MDd compiler flag. Missing this; flag for NVCC generated object files results in linker fails due to different; versions of runtime libraries. The problem is resolved by explicitly setting compiler options for debug build; under Windows. The solution is given only for Windows and only for MSVS because; it's the only officially supported by NVidia compiler on this platform. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/300:601,message,message,601,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300,1,['message'],['message']
Integrability,"TaskScheduler was doing several things:; - A base class for task schedulers; - A factory to register and create task schedulers. The factory code is extracted from the TaskScheduler class and moved into its dedicated class and file. I refactored a bit how the factory works:; Before, it was like there could be only one TaskScheduler at a time. Everytime a new TaskScheduler was created, the previous one is destroyed. It prevents the use of multiple TaskScheduler with different type (derived class). Instead, the task schedulers are now stored in a map. ; The only issue is related to the task allocator. The task allocator is used every time a task is created. The task allocator is supposed to depend on the TaskScheduler where the task will be added. But in practice, a Task is created independently from the TaskScheduler. So I kept the old system that calls a static function setting the allocator when the task scheduler is created. Some unit tests are introduced. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3480:698,depend,depend,698,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480,1,['depend'],['depend']
Integrability,Tested on classical and retina screens on os x system and classical screen on linux system. I do not know how to create a unit test for this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/311:245,message,message,245,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311,1,['message'],['message']
Integrability,"Thank Eulalie for this report. After discussion with Erik, STL was remove on purpose but the error message is not clear on that and on how to fix the Scene. We will fix that this friday. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059:99,message,message,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059,2,['message'],['message']
Integrability,Thank Mr tablot for cleaning message. . I like this small but yet usefull PR. ; I have added some suggestions to improve your PR a bit.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/503#issuecomment-342960849:29,message,message,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503#issuecomment-342960849,1,['message'],['message']
Integrability,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:636,integrat,integration,636,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148,4,['integrat'],"['integrate', 'integration']"
Integrability,"Thank you :); 1. totally doable, and would in fact be the preferred way of ensuring smooth transition rather than complicating the c++ side; 2. I suspect my proposal has a memleak due to a GC cycle: ; - the python instance wraps and holds a ref to the c++ object, which in turns holds a ref to the instance.; - most likely we want the c++ object to hold a weakref to the python object, but i'm not very familiar with them (yet); - the previous approach had it too, if I'm not mistaken: `wrapper object -> c++ object -> control object -> c++ object` so by fixing it we kill two birds with one stone; 3. will do; 4. how?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305549368:223,wrap,wraps,223,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305549368,2,['wrap'],"['wrapper', 'wraps']"
Integrability,"Thank you @damienmarchal :-); It would be better to create the integration branch with these commits instead of merging in master, don't you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333493357:63,integrat,integration,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333493357,1,['integrat'],['integration']
Integrability,"Thank you @fredroy and @alxbilger for the quick response on this issue!. I cherry-picked your merged commit [3f59ca7] from sofa/master into my local branch based on sofa/v21.06, this issue still happens to me as before. I actually don't see any ERROR messages in the sofa console when I change mouse to attach-using-bilaterial-constraint mode and try to grasp the caduceus.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2495#issuecomment-976154055:251,message,messages,251,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2495#issuecomment-976154055,1,['message'],['messages']
Integrability,"Thank you Guillaume, ; I vote for fast-merge. But i think it is better to chain the two message like that:; ```console; msg_info() << ""Blahblah"" << msgendl; << ""Other thing"";; ```; Because it faster and if the two line are forming a single message it is more clear to have that:; ```console; INFO (MyComponent) : ""Blahblah"" ; ""OtherThing""; ```; Instead of: ; ```console; INFO (MyComponent) : ""Blahblah""; INFO (MyComponent) : ""OtherThing""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289:88,message,message,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289,4,['message'],['message']
Integrability,"Thanks @fredroy for the PR which address a legitimate concern. The problem adressed by the PR is often seen in SOFA's base classes where a parent class is having virtual function defined to print ""no implemented"" (or to print nothing). In general this pattern can be considered as a good code smell often related to some violation of SOLID's principle (eg: Liskov Substition Principle). The proposed solution of moving functions in a separated object is going in the right direction (as pointed by @alxbilger by segregating the intefaces). But it is unclear to me if the implementation proposed in the PR is enough because:; - having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"", ; - using dynamic cast to detect the ""features"" in the ConstraintCorrection, ... ; - the implementation in BTD also looks highly suspicious with:; - plenty of ""debug/trace"" mapped to Datas as if the feature was ""not stable"" or only working in some case.; - a boolean to control if we use the PartialLinearSolver part of the API or if we don't... and I wonder if the actually really work for full & partial solving or only for one of the two APIs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227045937:701,interface,interface,701,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227045937,1,['interface'],['interface']
Integrability,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:30,message,messages,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967,4,['message'],['messages']
Integrability,"Thanks a lot @chhas for the investigation :raised_hands:; I'm no specialist either, but, although most changes in the commit are simply `Vector3 -> Vec3`, there are two things that seem suspicious to me, in `SofaViewer.cpp` (l.256-295) and `QtGLViewer.cpp`(l.823-860) (sorry, I can't find an easy way to link to a specific line in a commit diff view).; In both, there is a change of condition from :; ```; if( isControlPressed() ); ```; to; ```; if (!isControlPressed() && !e->isAutoRepeat()); ```; before calling a `propagateEvent` method on the `QKeyEvent` being processed.; I had a brief look: `isAutoRepeat` seems to be a Qt routine always returning an `autor` variable being set to 1 in `qevent.h`. And `isControlPressed()` refers to an internal variable `m_isControlPressed` in `SofaViewer.h`, which does what its name suggests. At this point, it seems that these modifications could very well explain the two changes of behaviour I was describing above.; @damienmarchal, could you give us some input on this ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910:629,rout,routine,629,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910,2,['rout'],['routine']
Integrability,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:164,depend,depends,164,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641,2,['depend'],['depends']
Integrability,Thanks a lot for your contribution @dennis2society ; Last check using the MacOS continuous integration. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4198#issuecomment-1746423490:91,integrat,integration,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4198#issuecomment-1746423490,1,['integrat'],['integration']
Integrability,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:493,integrat,integration,493,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209,2,['integrat'],['integration']
Integrability,Thanks erwan for the test.; The warning is also there in release. Maybe the problem is specific to Thomas application. ; Each application has to define and set-up its way to handle the messages. Have a look in runSofa on how it is one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201:185,message,messages,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201,1,['message'],['messages']
Integrability,"Thanks for pointing the issue...we should fix it rapidely... Now your question...; The short answer is no. . The long answer, ; I have never looked at this part of the code but my assumption is that, when SVector was introduced, it would have cost time to fix the whole code base & scenes & offer backward compatibility so SVector was implemented and used in some component without unifying the whole code base. This decision breaks the interface consistency which have very concrete drawback for users (some arrays use one syntax, others use a different syntax and there is no way to know which syntax need to be used) and for developpers as we now have to cope with two interfaces in our re-factoring. A quick fix, should be to check that the underlying object on which we are passing the array can understand the old array syntax or the python-like syntax. . Fixing all that will take time...this is the problem with technical debt.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-312863531:437,interface,interface,437,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-312863531,2,['interface'],"['interface', 'interfaces']"
Integrability,"Thanks for the answer,. Actually we are using c++17 in our plugins since years. . The problem is that not having sofa supporting c+17 means that when we want to make PRs to integrate some features into the sofa master we have to convert all the code to c++11. As it was agreed to allow Sofa to support c++17 a year ago I think it would be nice to have it asap, as it would free the contributors from reverting their codebase to c++11 to make PRs. . So good luck to Guillaume.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797:173,integrat,integrate,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797,1,['integrat'],['integrate']
Integrability,"Thanks for the answers, I moved them to the PR description. . ""This work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. "" ; I searched in the issues and PRs if there was ever any debate on that topic so that I could provide a link in the description but I didn't found one. Maybe you are referring to face to face discussions ? If this was the case maybe writing a summary of these debate (pro/cons) would be very informative and helpful for all of us. . ""depends on the meaning of breaking""; In general we are considering the following:; - a PR is non breaking if its merge will be un-noticeable for people that don't care of the added feature. ; - a PR is breaking the scene if, after the PR, *any* scenes that was working before is not working anymore. ; - a PR is breaking the API if *any* plugin compiling with master is not compiling anymore after the PR. . Damien",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159:536,depend,depends,536,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159,1,['depend'],['depends']
Integrability,"Thanks for the reply @damienmarchal ; Error of link apparently is remaining. I guess that SofaGeneralExplicitOdeSolver and SofaGeneralImplicitOdeSolver which were depending on SofaSimulationTree, had also a dependency to the SofaSimulationTree's dependency: SofaSimulationCommon",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292:163,depend,depending,163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292,3,['depend'],"['dependency', 'depending']"
Integrability,"Thanks for the review @alxbilger, @epernod. I integrated your remarks.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3020#issuecomment-1150340086:46,integrat,integrated,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3020#issuecomment-1150340086,1,['integrat'],['integrated']
Integrability,"Thanks for the review @alxbilger,. I integrates your comments.; More generally do you have any opinion on how we could improve the exceptions/component error in Sofa ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2344#issuecomment-927720383:37,integrat,integrates,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2344#issuecomment-927720383,1,['integrat'],['integrates']
Integrability,"Thanks for your PR @gaurab4163 :+1: . I'm not sure about the place (file and namespace) this function should be. @damienmarchal you have a clearer vision of logging and messages in SOFA, what do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967:169,message,messages,169,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967,2,['message'],['messages']
Integrability,"Thanks for your detailled report. ; This definitely looks like a bug of SOFA related to DAGNode; we don't have centOS on our CI yet, but we will put a Centos7 config on our continuous integration system and look into this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673:184,integrat,integration,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673,1,['integrat'],['integration']
Integrability,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:316,message,messageTypePrefixes,316,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748,4,['message'],"['messageTypeColors', 'messageTypePrefixes', 'messages']"
Integrability,"That is to say, I need to download the source of the sofa in the docker container (/home), then compile the sofa according to the regular instructions based on dependencies in the docker",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758040613:160,depend,dependencies,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758040613,1,['depend'],['dependencies']
Integrability,"That script is used to parse the output of the AdvancedTimer in a Python scene to plot it. One of the function bindings has changed name, but this change was not reflected in the script. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/458:286,message,message,286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/458,1,['message'],['message']
Integrability,That's what I call an explicit message :smile: :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2638#issuecomment-1027689128:31,message,message,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2638#issuecomment-1027689128,1,['message'],['message']
Integrability,"The 3 usual masses are templated on DataTypes and a TMassType, which is usually float/double if DataTypes is VecTypes and a special type RigidMass<X,Real> if DataTypes is a RigidTypes. It appears to me that it could be automatic and we dont need to explicitely cite the RigidMass/Real for MassType as it seems to depend solely on the DataTypes.; Moreover it is confusing for writting scene, if you want to not rely of the automatic detection of templates (canCreate and stuff()) from the associated MechanicalObject. For example in `/Components/mapping/ArticulatedSystemMapping.scn`; ```xml; <UniformMass template=""Rigid3d,RigidMass<3u,double>"" ..... >; ```; This is so weird to explicitly write the masstype.; (Actually, the xml line is even not working, as it needs to be `Rigid3d,RigidMass<3,double>` but I suppose it was this way when the file was written). ~~In this PR, [std::conditional_t](https://en.cppreference.com/w/cpp/types/conditional) is used to specify MassType from DataTypes (if rigidtypes then rigidmass, otherwise Real); One other solution would be to specify a MassType in VecTypes/RigidTypes but seems invasive to me.; I let the double template thing, as I dont know if it is possible than a developer would like to specify special instanciation, like RigidType with Real for example. But this does not solve the double template thing in xml.~~. ~~If it is not the case, then we could remove the second template, and just use a `typedef` (so we remove the need to specify the double template in xml....)~~. Template has been removed directly, and the MassType is SFINAE'ed from the DataTypes.; parse() in the 3 differents masses warns the user of the modification, and what to do. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dc",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2644:313,depend,depend,313,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2644,1,['depend'],['depend']
Integrability,"The BIG one. based on:; - #2717 (for one file moved in core). Deprecates _SofaDeformable_, _SofaObjectInteraction_, _SofaGeneralDeformable, SofaGeneralSimpleFem, SofaMiscFem, SofaNonUniformFem_; Deprecates partially _SofaRigid, SofaSimpleFem, SofaGeneralObjectInteraction, SofaMiscForceField_. Create a meta-module **SolidMechanics**, managing mechanics for mechanical object in a scene (internal forces?); It is composed of ; - **Spring**: with spring-system related components; - **FEM**: an other meta-module containing:; - **Elastic**: elastic FEM; - **HyperElastic**: hyperelastic FEM with materials; - **NonUniform**: non-uniform FEM ; - **TensorMass**: tensormass related components . ### Remarks, questions; - One Spring component has not been included (yet?), namely BoxStiffSpringForcefield, as it is meta-component; it would add dependencies on other module (Engine); - ~~The rest of the components implementing core::ForceField are things applying ""external"" forces on it, so we may create a whole category for them (not defined in the draft)~~ -> see #2783 . ~~SofaCUDA wont compile for the moment (WIP)~~, as the compatiblity files wont work. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2759:840,depend,dependencies,840,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2759,1,['depend'],['dependencies']
Integrability,The BaseObject::draw() function should be used only for debugging purposes.; The BaseObject::draw() function is called when pass is standard and it is rendered before any VisualModel. Any overlay text rendered in BaseObject::draw() function is not visible. This line change allows every component to display overlay text (for debugging purposes) always at the top in the viewport in the draw() functon. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/929:504,message,message,504,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/929,1,['message'],['message']
Integrability,The CGAL version provided in Unbuntu 18.04 LTS is 4.11 and it seems this version is now expecting that the CGAL_MESH_3_VERBOSE needs to have a value. . Otherwise it fails to compile.; The fix is minor so please consider merging it ASAP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/664:338,message,message,338,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/664,1,['message'],['message']
Integrability,"The CenterOfMassMapping, requires a Mass associated with its parent MechanicalState.; The initial code relies on a call to fromModel()->getContext()->getMass() to retrieve the associated mass, and did not propose a way to set explicitely the mass to use.; The mass was stored in a pointer during init(), and we want to use singleLinks instead, to keep track of how components interact with each other. The initial goal of this PR was to get rid of getMass in BaseContext(), but we want your opinion on how to do this, especially for the case of MultiMapping (CenterOfMassMultiMapping):. 1. add a SingleLink to the mass in the MechanicalState; 2. store a list of the masses associated to the list of models in CenterOfMassMultiMapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1184:834,message,message,834,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1184,1,['message'],['message']
Integrability,The Data constraintForces is used to provide the intensities of constraint forces in the simulation. We use the constraint forces as the approximation of real contact forces. We use this Data to provide contact information for the catheter insertion. The user can easily check the constraint forces from the GenericConstraint component interface.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/840#issuecomment-443204446:336,interface,interface,336,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/840#issuecomment-443204446,1,['interface'],['interface']
Integrability,"The Data had always the prefix `(V_COORD)`. Now it really depends on the type. The bug has been introduced in https://github.com/sofa-framework/sofa/pull/2811. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2872:58,depend,depends,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2872,1,['depend'],['depends']
Integrability,"The LinearForceField component does not contribute anything to the matrix when solving a system. Accordingly, the addKToMatrix function does nothing. However, since it is not implemented, it displays a warning when running a simulation. This PR simply adds an empty implementation of that function, which removes the warning displayed by the definition in the base class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/384:471,message,message,471,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384,1,['message'],['message']
Integrability,"The MechanicalOperations (mops) already had the method `multiVector2BaseVector` that allows us to fill a BaseVector (one continuous memory vector) from a multi vector (group of vectors contained inside mechanical objects). However, the were no way to do the inverse (build a multi vector from a continuous vector) beside creating a new visitor, which is now done automatically by the mops. This PR is only adding a new method, it is non-breaking. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1248:546,message,message,546,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1248,1,['message'],['message']
Integrability,"The PLUGIN_SOFASPHFLUID option was not taken into account by the CUDA plugin, so it would try to link against that plugin even if it was not compiled with SOFA. There was also a file that was included twice in CMakeLists.txt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/523:325,message,message,325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523,1,['message'],['message']
Integrability,"The PR looks good, though I wonder whether we could use the abstract sequence protocol instead of the concrete list type. This way we could use numpy vectors directly for instance. The warning message will quickly become annoying, so maybe put it behind proper `#ifdefs`. @matthieu-nesme any thought?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306500177:78,protocol,protocol,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306500177,2,"['message', 'protocol']","['message', 'protocol']"
Integrability,"The ReadScene_test not passing is explicitly said so in the PR description, this is a new test showing an existing wrong behavior in Sofa (i.e. not sending an error message when trying to load an invalid faile). [ci-build][with-scene-tests] will say if my last commit fixed the old scene failing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648:165,message,message,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648,1,['message'],['message']
Integrability,"The SOFA version of cleaning the Augean stables... 🐴. Make it compile and run (for the quadSpring scene); And does not need the sofaOPENCL application. Compile with the SofaSphPlugin as well, but the example scene crashes somewhere in the OpenCL kernel... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1361:355,message,message,355,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1361,1,['message'],['message']
Integrability,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/465:64,depend,dependency,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"The SofaBaseMechanics_test were probably broken. ; They were not in-heriting from SofaTest neither BaseTest. This means that uncatched msg_error() should generate test failure while they should. . In this PR I implement the proper behavior, so now several tests are ""correctly failing"" :) ; And I fixed the tests.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/832:414,message,message,414,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832,1,['message'],['message']
Integrability,"The SofaPython plugin is now outdated and based on python2. . As python3 already breaks the API, updating the SofaPython plugin for python3 is an opportunity to also refactor the whole binding code. . Stuff I would like to have.; Pythonic way to manipulate data; ```python; c = object1.addObject(""MechanicalObject"", position=[0,0,0]*1000); len(c.position); for i in c.position:; print i; c.position += [1,0,0]; c.position[2] += [1,0,0]; c.position[2,0] += 2; c.position[1:10] = [1,0,0] ; ...; ```. Numpy exposure of data; ```python; c = object1.addObject(""MechanicalObject"", position=[0,0,0]*1000). ## Read access (copy-less) using toarray(); p = c.position.toarray(); o = numpy.ones((len(c.position), 3))) ; j = p + o. ## Write access (copy-less), the data counter is updated after the 'with' block; with c.position.writeable() as w:; o = numpy.ones((len(c.position), 3))) ; w += o ; w *= 2.0; ```. Wrap around types (copy-less) to typify the data fields on demand; ```python; # syntax 1; c = o.showColor.as(RGBAColor); # syntax 2; c = RGBAColor(o.showColor); c.setFromHSC(1,2,3); c.setFromHSV(1,2,3); ```. Implement your own ForceField in python:; ```python; class MyForceField(Sofa.Core.BaseForceField):; def __init__(self, *args, **kwargs):; Sofa.Core.BaseForceField.__init__(self, *args, **kwargs); ; def init(self):; self.refx = self.position.toarray().copy(). def addForce(self, m, f, x, v):; n = numpy.ones((len(self.position),1)); f = (self.refx-x) * 2 + n; ```; ; To test the binding you need to de-activate SofaPython and activate SofaPython3. ; Then; - runSimu.py to launch a sofa simulation from the command line eg: ; python3 runSimu.py mySimulation.py; - or runSofa. . General guidelines:; - Fix existing API consistency issues; - Improve the performance of the binding by supporting supporting the different python protocols (sequence, buffer+memoryview, copy-less mechanism).; - unified data access and API.; - implementation is currently done with pybind11 and cython.; - modular des",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/771:900,Wrap,Wrap,900,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771,1,['Wrap'],['Wrap']
Integrability,The TaskScheduler keepThreadsActive virtual function can be overridden to allow to change worker threads waiting policy when there are no tasks to steal. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/934:253,message,message,253,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/934,1,['message'],['message']
Integrability,"The WIN32 implementation is lowering the case of the given path. This is; not consistent with other case insensitive OS like macos and is discussed in:; https://github.com/sofa-framework/sofa/pull/250. In this PR I deprecate this 'lowering' behavior, adds a dedicated message & I updated; the calling point all around Sofa. Code updated shouldn't print any message but un-touched one should continue working as usual and prints the deprecated message to indicate to user they must update. CHANGELOG:; - [SofaKernel]; - FileRepository::getRelativePath() lowering the case on WIN32 is now a deprecated behavior. ; . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/264:268,message,message,268,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264,4,['message'],['message']
Integrability,"The `BaseCamera` is computing the scene center point and scene radius based on the current bounding box. The `InteractiveCamera` is using these information to compute the zoom/translation speed when navigating in the scene with mouse events. . Since the `BaseCamera` was computing the scene center point and radius only when `BaseCamera::p_computeZClip` was true, when manually giving the z-clip values, the interaction was not working at all (`sceneCenter` and `sceneRadius` were 0, hence the zoom/translation speed were 0). This was only visible when using the `QtViewer` since the `QglViewer` is using its own internal camera and is ignoring the cameras added to the scene. This PR also fixes the caduceus scene as it was using a `Camera` instead of `InteractiveCamera`, which isn't listening to mouse events at all, hence navigating with the mouse wasn't possible with the QtViewer. A little bit problematic when it is the default scene of runSofa.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1377:1053,message,message,1053,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1377,1,['message'],['message']
Integrability,"The access to the pointer of data &ptr[0] have been replaced by the use of .data() in PR #279 . This generate a problem because helper::vector is specialized for cuda (thanks to the MemoryManager) in vector_device.h. This type of vector mimic a std::vector but it does not implement all the functions of the stl. If new functions are necessary they must be also implemented in this vector_device class, but the consistency of data must be CAREFULLY checked. Indeed a cudavector has data both on the CPU and the GPU and one must guarantee that the accessed data is the correct one. This PR add the missing function in vector_device to make it match the API of helper::vector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/320:776,message,message,776,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320,1,['message'],['message']
Integrability,"The actual implementation to store parentData is weird because it stores two times the same object. One is in the base class (parentBaseData) and one in its child class; (parentData). . The rational behind the current implementation is that we wanted to access the data without abstraction cost, ie. accessing the object with its true type (eg: Data<T>) instead of its parent type (BaseData) and at the same time having an abstraction to manipulate BaseData. . Duplicating the same obect/point is in general a code smell indicating that something is wrong in the implementation. In general duplication complexify the implementation and error prone (because you have to garantee that the different copies are kept synchronized and interact together in a seamlessness way. . So, in this PR I addresse this duplication problem by removing the lowest type and relying on a dynamic_cast when it is needed. There is an abstraction cost...but it is on a on a very rarerly used method (actually only used for fast copy of data field...and in that context...the cost of the dynamic cast against one of copying millions of Dofs is totally neglectible). . A different pattern was initially used with a child-delegation to expose the abstraction to its parent but it appears it would have made the PR breaking. The difference is that the selected pattern allows one data to be parented to a data of different type while the pattern with child-delegation restrict the parenting to be of exactly the same time. . I personally prefer to have parent only on same type (so that data conversion must be added manually and becomes explicit) but this was not done previously in Sofa and thus breaks some scenes (somes of them are actually really funny....and probably work only by side effect). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1490:713,synchroniz,synchronized,713,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1490,1,['synchroniz'],['synchronized']
Integrability,"The added function is used in a few places in plugins I would like to make available in addition to the ROS connector. It is not specifically tied to the multithreaded collision pipeline, but it is potentially useful independent of the relation to the plugins in question, and easy to patch into a core class as it introduces no further dependencies on additional modifications.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144:337,depend,dependencies,337,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144,1,['depend'],['dependencies']
Integrability,"The advantage of a component specific macro/stream (like sdebug to stay in the current spirit) would be to automatically add the component as the ""sender"" of the message. ; Which is BTW required by the gui to get and display messages coming from a given component. . ----- Mail original -----. > De: ""Matthieu Nesme"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 2 Février 2017 14:18:28; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > I think that it is a good idea to treat the overall pb, not to miss; > something. > * removing msg buffers from Base; > * removing printLog Data (but reading it from a parse function for backward; > compatibility.; > * no need for sdebug, you can directly use msg_debug (or whatever). serr/sout; > can be kept not to become crazy, but no need to add more.; > * It should be powerful enough to move some of the Data you added in Base; > directly in the msghandler (and set more globally these parameters).; > * updating the gui to use the new msghandler buffers. > Something else ?. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614:162,message,message,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614,3,['message'],"['message', 'messages']"
Integrability,"The approach proposed by matthieu sounds ok to me. ; I strongly support the ""W/o forgetting the deprecated message"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/21#issuecomment-254796313:107,message,message,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-254796313,1,['message'],['message']
Integrability,"The broken tests are caused by new error messages introduced by converting serrs into msg_errors. the number of errors should be updated in the tests. @epernod has a waiting PR doing just that, so I suggest that we merge and wait for erik's fixes in his own PR, as he suggested himself ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062:41,message,messages,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062,1,['message'],['messages']
Integrability,"The case arises mostly because of running runSofa from a build directory but you set SOFA_ROOT. It will then tried to load plugins from the install afterwards, etc..., leading to stuff like:. ```; [WARNING] [ObjectFactory] Default template for class DynamicSparseGridGeometryAlgorithms already registered (Vec3d), do not register Vec3d as the default; [WARNING] [ObjectFactory] Class already registered: DynamicSparseGridGeometryAlgorithms<Vec2d>; [WARNING] [ObjectFactory] Class already registered: DynamicSparseGridGeometryAlgorithms<Vec3d>; ....; ```. or with a cryptic error message if you try to use the PluginManager from the GUI:; ```; [INFO] [PluginManager] Plugin not found in loaded plugins: ..../bin/RelWithDebInfo/SofaNonUniformFem.dll; [ERROR] [SofaPluginManager] plugin should be loaded: ..../bin/RelWithDebInfo/SofaNonUniformFem.dll; ```. Now, if you try to load twice the plugins (from differents paths then), it will print:; (one dll is in `build/bin/Release/` and the other one directly in `build/`; ```; [WARNING] [PluginManager] This plugin SofaNonUniformFem has been loaded from a different path, it will certainly lead to bugs or crashes...; You tried to load: ....build/bin/Release/SofaNonUniformFem.dll; Already loaded: ....\build\SofaNonUniformFem.dll; [WARNING] [PluginManager] Plugin SofaNonUniformFem is already loaded from a different path, check you configuration.; ```; The ""double information"" comes from the fact that in the end we consider the plugin as loaded ; the code afterwards will try to load the plugin nevertheless (hence having to detect twice the duplication); In the GUI code for example: https://github.com/sofa-framework/sofa/blob/71691309251177322967f53bc7a024e89c19bcbc/modules/SofaGuiQt/src/sofa/gui/qt/SofaPluginManager.cpp#L120. Obviously it is really not advised to continue to use Sofa if this case occurs but at least the user will know what is going on.; ______________________________________________________. By submitting this pull request, ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2352:579,message,message,579,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2352,1,['message'],['message']
Integrability,"The case where plugin is smaller than dotExt is not handled by std::equal. See how it works: http://en.cppreference.com/w/cpp/algorithm/equal. An assert is called.; I had the case when dotExt = "".dll"" and plugin = ""PSL"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617:320,message,message,320,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617,1,['message'],['message']
Integrability,"The class `Simulation` has been refactored:. - It no longer inherits from `BaseObject`; - All the non-pure virtual methods have been deprecated. Instead, their equivalent are available as free functions. Indeed, the content did not need to be in a class and `DAGSimulation` did not override them.; - `sofa::simulation::setSimulation` is deprecated. The global variable `Simulation` is set once and for all in the initialization of the `Sofa.Simulation.Graph` module. ⚠️ If `new` is used to provide a new `Simulation`, it results in a memory leak, because `setSimulation` now does nothing. In summary, the type `Simulation` is now only useful to create `Node` instantiations. This feature can be done out of the Simulation class thanks to a refactoring of modules. It will be done later in another PR. Once it is done, the type could be deprecated. In this Pull Request, it is assumed that it is not possible to create another type of Simulation than `DAGSimulation`. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/350]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3889:971,depend,depends-on,971,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3889,1,['depend'],['depends-on']
Integrability,"The cmake part of our build process is very slow and is getting slower and slower the more we add plugins/modules and packages.; ; I noticed that commands like include or find_package(XXXXX) imply the search, the loading and the execution of the requested package XXXX each time. . This is very problematic as this scale in an horrible (non linear) way. . So I tried a quick and dirty fix based on inclusion gard, 'à la #ifdef MYFILE_H'. I first checked if the file are really loaded multiple times (and this was the case) and implemented a quick test to stop the loading. . The fix accelerates a lot the cmake time on my machine reducing the generation from 1min20 down to 15 sec. So I'm curious to see if such solution is reliable enough to be used (I consider that if this is not the default design of cmake package there must be a rational behind) and what are the possible drawback. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1464:989,message,message,989,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1464,1,['message'],['message']
Integrability,The commits are touching a single file each and focus on fixing single bug or regression. Could you consider fast-merge ?; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/931:222,message,message,222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/931,1,['message'],['message']
Integrability,"The current approach increments the counter of the componentState data to track when a message is received by a component so that the GUI can update accordingly by setting itself as an output of the componentState data. **TODO**: use the counter of a new generic data as the componentState does not seem a fine-enough level to be able to track and differentiate properly message reception, real change of state etc. Outsourcing the messaging outside the component in a singleton could be the solution : the GUI could then connect to this singleton for any message-related information/update, while connecting to the components for a status information/update. @damienmarchal might propose an alternative approach",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2398#issuecomment-953195106:87,message,message,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2398#issuecomment-953195106,3,['message'],"['message', 'message-related']"
Integrability,"The current implementation is printing a deprecation message but the modified ""arg""; are also reported by caller's as error. To avoid that I don't accumulate the deprecation warning in the ""arg"" arguments; and print them immediately. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/939:53,message,message,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939,2,['message'],['message']
Integrability,"The current implementation of Node::Single rely on SingleLink. . It is questionnable if the iterable list of typed sofa object should be stored in link instead of a a much simpler container. They are not using any of specific feature of SingleLink (like path read/writing which is actually invalid behavior as the content of the container is fully defined by the node and cannot be filled with user specified component). . At that time the sole puprose of using SingleLink seems to able to expose the content of these container in the GUI. If this is the case a much simpler code architecture should be used to avoid bloating the Node.h and API. In this PR we replace the Node::Single by the combination of two objects:; - NodeContainerSingle which only handle the ""container"" specific part of the SingleLink; - LinkeableContainer which wrap a container to expose it as a BaseLink. . The advantage of this design is twofold:; - only NodeContainerSingle is needed in Node.h and has a much reduce code-generation compared to SingleLink. ; - NodeContainerSingle can operate with forward declaration (which is not the case of SingleLink which helps to keep clean the inclusion tree.; - there is a clear separation between the Container and the Link part which lead to a very readable code. The LinkeableContainer is only used visible in Node.cpp. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1737:837,wrap,wrap,837,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1737,1,['wrap'],['wrap']
Integrability,"The current implementation of file saving in XML is in fact doing a kind of complete dumping of the state of the objects in the scene. This is bad because this produce totally unreadable scene. . The idea of this PR is to implement a much more ""user friendly"" file saving as described in this issue; https://github.com/sofa-framework/sofa/issues/41. Saving caduceus.scn with the old way look produce a 2Mb file like this: http://pastebin.com/01hfAeAT; while with the current code it is a 3.5Kb file looking like this: http://pastebin.com/K3jzVxcE. Please help to improve it by reporting any problem or patch. . Additional things to do in future PR:; - support saving of scene created from Python (I have a prototype...I'm waiting integration of this PR); - support saving scene to python (with the same readability logic); - fix the broken component that parse directly the xml attribute instead of using data. This is the case of (VisualModelImpl, CubeTopology). These component have to be fixed one by one (including test to validate that there is no regression). ; - implement a more ""dump"" like feature to save a scene that have been simulated. . Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116:730,integrat,integration,730,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116,1,['integrat'],['integration']
Integrability,The deprecated macro `sofa_generate_package` was not forwarded to the correct new macro.; Bug introduced in #1433 . EDIT: I joined a quick fix for SofaSparseSolver related to #1440. **Commits to be backported independently**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1446:325,message,message,325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1446,1,['message'],['message']
Integrability,The existing Binding does not cover the whole feature of the c++ API.; With this PR it does.This is not breaking anything...it only add new features with their associated tests. . This allows python messages and error to be routed to the right component and have it added to its backlog and displayed in the GUIs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/335:199,message,messages,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335,3,"['message', 'rout']","['message', 'messages', 'routed']"
Integrability,"The file `DisplayFlags.h` contained 3 classes. Now each class has its own specific file. Unit tests on DisplayFlags are added. In my previous proposition, I added an error message when a flag was unknown, and giving suggestions for closest matches. This error message was put directly when reading the flags as a string in the `FlagTreeItem` class. Now, the `FlagTreeItem` triggers the error message, but the function to trigger, including the code for the message, is now in `Data<DisplayFlags>`. Since `Data<DisplayFlags>` is a template specialization that is put in `Data[DisplayFlags].h`, you need to include `Data[DisplayFlags.h]`. If you do that, the owner of the `Data<DisplayFlags>` will know an error happened. Therefore, it will have an error icon in the GUI and the user can consult the errors in the GUI. Before, the component was not aware.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1385224169:172,message,message,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1385224169,4,['message'],['message']
Integrability,The file was still using the old .h location for RGBAColor. ; Replace to the new ones. ; It was also include DataFilename which was pointless. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1346:242,message,message,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1346,1,['message'],['message']
Integrability,The following scenes must be fixed because they show warnings or error messages. ```; [INFO] [PluginFinder] Found 6 files with advice:; examples\Benchmark\Performance\MatrixAssembly\MatrixAssembly_direct.scn; examples\Components\linearsolver\preconditioner\FEMBAR_PCG_AsyncSparseLDLSolver.scn; examples\Components\loader\GIDMeshLoader.scn; examples\Components\solver\EulerExplicitSolver\EulerExplicitSolver.scn; examples\Components\solver\EulerExplicitSolver\EulerSymplecticSolver.scn; examples\Components\solver\NewmarkImplicitSolver.scn. [INFO] [PluginFinder] Found 9 files with deprecated:; examples\Components\interactionforcefield\BoxStiffSpringForceField.scn; examples\Components\linearsolver\FEMBAR_AsyncSparseLDLSolver.scn; examples\Components\misc\sleep\test_sleep.scn; examples\Components\misc\sleep\test_sleep2.scn; examples\Components\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\Topologi,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:71,message,messages,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['message'],['messages']
Integrability,"The following warnings appears everytime a Link is declared:. https://learn.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-1-c4305?view=msvc-170. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3763:106,message,messages,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3763,1,['message'],['messages']
Integrability,"The function `buildDampingMatrix` was introduced in #2777. By default, if a component does not implement it, it will call the implementation from `BaseForceField` which calls `addBToMatrix` with a warning message. This is the compatibility layer.; Therefore, I implemented `buildDampingMatrix` everywhere there is no `addBToMatrix` implementation. It will avoid to display the warnings of the compatibility layer and explicit the fact that there is no damping. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3948:205,message,message,205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3948,1,['message'],['message']
Integrability,"The function `sofa::helper::system::DataRepository.findFile` triggers a `msg_error` if the file is not found. In the case of `PrecomputedConstraintCorrection`, an error is not appropriate because the file can be generated. Instead I used `msg_info`. Because the log message contained trailing line breaks, I introduced a couple of utility functions to remove them. Example of output:. ```; [INFO] [PrecomputedConstraintCorrection(PrecomputedConstraintCorrection1)] File SquareCloth1-675-0.04.comp NOT FOUND in :C:/Users/Alex/Dev/sofa1/src/share:C:/Users/Alex/Dev/sofa1/src/examples:C:/Users/Alex/Dev/sofa1/builds:C:/U; sers/Alex/Dev/sofa1/builds. Compliance will be pre-computed and saved into a file; ```. It fixes a scene test from https://github.com/sofa-framework/sofa/pull/4106. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4108:266,message,message,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4108,1,['message'],['message']
Integrability,The functions ParallelFor and ParallalFor2d make the for loop parallelization easier to write.; They internally used the task scheduler and automatically perform the the tasks partitioning and creation. ParallelFor is used to parallelize for loops iteration on one index.; ParallelFor2d is used to parallelize for loops iteration on two indices. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/902:445,message,message,445,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/902,1,['message'],['message']
Integrability,"The goal is to comment useless warnings.; The following line was introduced to deprecate ExtVector. However, before adding this line it is necessary to remove all the use of ExtVector in the core of sofa. Indeed, the current compilation generates thousand of warnings and slow down significantly the compilation. In addition, remove the possibility to exploit other warnings since too much information is printed. . //[[deprecated(""since 19.06, ExtVector is deprecated. Use helper::vector instead. Will be removed in 19.12"")]]. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1144:627,message,message,627,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1144,1,['message'],['message']
Integrability,"The goal was to be able to set the minimal requirements to get Sofa.Component + runSofa + batch only, and not having seemingly unrelated dependency. Fixes:; - runSofa needed absolutely Sofa.Gui.Qt but not using it; - not possible to compile Sofa.Gui.Common without having to compile Sofa.Gui (which should be possible). and cmake cleanups here and there. \+ an other unrelated fix by repairing the typo for simulation core tests ; the consequence was that simulation.core.tests was always activated even if sofa_build_tests was off. This PR is a preliminary step to have SofaGui totally deprecated (and not used anymore by runSofa). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3323:137,depend,dependency,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3323,1,['depend'],['dependency']
Integrability,"The idea of this PR is to check if some work done in 2016 in the branch ""Collodi"" has to be patched. The branch has been updated with recent version of master... probably with some conflicts resolution errors.. so it won't compile asis. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1492:336,message,message,336,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1492,1,['message'],['message']
Integrability,"The implementations of `addDForce` and `addBToMatrix` were removed in https://github.com/sofa-framework/sofa/commit/044f78ad4e3931b9754a90c251360f8f1e69c902. According to the commit message, an explicit formulation of the forces gives ""the best results"". This could not be tested on the example provided with SOFA as it is too simple (particles). To me, the computations seem ok, so I am in favor to keep them. However, we can discuss about activating the implicit formulation or not (through a Data?).; The implementation of `buildDampingMatrix` has been added according to #3967. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3999:182,message,message,182,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3999,1,['message'],['message']
Integrability,"The initial objective of this Pull Request was to fix the scene crash detected in #2047 (https://www.sofa-framework.org/dash/?branch=origin/PR-2047). What this PR really does:; 1. Clean and make `DefaultCollisionGroupManager` and `DefaultContactManager` more readable; 2. Fix absence of collision response when using `DefaultCollisionGroupManager` with a stationary object. A scene test is provided; 3. Fix freeze happening in `examples/Components/collision/RayTraceCollision.scn` after some time; 4. Fix crash detected in #2047. . Everything is related to `DefaultCollisionGroupManager`. Note:; In the collision pipeline, the group manager responsibilities are:; 1. Combine `Node`s which are involved in a contact (which has been detected before). It is a manipulation of the scene graph which depends on the collision detection.; 2. Create the contact response. # Cleaning; - Split large functions into smaller to make them more readable; - More null pointer checks; - Add lots of comments; - Minor cleaning such as namespace concatenation, ... # Fix absence of collision response with stationary object; The contact with stationary objects are supposed to be handled by the collision pipeline before creating groups with the group manager. In the group manager, it supposes all the objects in contacts are associated with an ODE solver (since they cannot be stationary). Actually, the collision pipeline check if an object is stationary based on the value of `isSimulated()`. It means it's up to the user to set this Data. If it not done, the object is considered moving and goes to the group manager. The ODE solver is not found, so it is skipped:; https://github.com/sofa-framework/sofa/blob/477747e21ae520fba08cb08f7b66e6f4250a91f8/applications/plugins/SofaMiscCollision/src/SofaMiscCollision/DefaultCollisionGroupManager.cpp#L91; And collision response is not created.; In this PR, this case is not skipped and a collision response is created. A scene test has been added to check collision is ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2076:795,depend,depends,795,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076,1,['depend'],['depends']
Integrability,"The issue with #1913 was that Sofa.GL was added to plugin_list.conf.default ; This PR aims to clarify things between modules and plugins.; `sofa_add_plugin` will now be the ONLY macro that adds targets to plugin_list.conf.default, which totally makes sense. Also, for the record:; > Plugin = Something that CAN be loaded by the PluginManager, through a RequiredPlugin for example. The entry point of a Plugin is initExternalModule (and that name could be better).; > ; > Module = Something that CANNOT be loaded by the PluginManager. Most of the time, modules are not loaded manually, they are loaded implicitly during dependency resolution. The entry point of a Module is init (and that name could also be better).; > ; > From a CMake point of view, both Plugin and Module can be standalone packages or simple targets added to a bigger package. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1941:619,depend,dependency,619,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1941,1,['depend'],['dependency']
Integrability,"The message was not making sense and was incorrect anyway,. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4120:4,message,message,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4120,1,['message'],['message']
Integrability,"The method `umul24` disappeared fromt eh header `crt/device_functions.hpp` in cuda 12. It originally was just a wrapper for a call to `__umul24`, therefore the change. . This wrapper disappearing might indicate a deprecation, so this solution will maybe not be one with the next cuda release. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4319:112,wrap,wrapper,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4319,2,['wrap'],['wrapper']
Integrability,The method exists in Sofa and is useful to explore the graph between components. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/843:180,message,message,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/843,1,['message'],['message']
Integrability,The modules/SofaOpenglVisual/CMakeLists.txt has been changed because it always tried to generate the tests even if SOFAGUI_BUILD_TEST is set false. It makes the compilation fail. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1091:280,message,message,280,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1091,1,['message'],['message']
Integrability,"The new message is:; ```; [ERROR] [TriangleSetTopologyContainer(topo)] Cannot find edge 0 [161, 158] in triangle 0 [0 161 158] in the provided edge list (@/vtk file/topo.edges). It shows an inconsistency between the edge list (@/vtk file/topo.edges) and the triangle list (@/vtk file/topo.triangles). Either fix the topology (probably in a mesh file), or provide only the triangle list to '/vtk file/topo' and not the edges. In the latter case, the edge list will be computed from triangles.; ```. Previously it was:; ```; [ERROR] [TriangleSetTopologyContainer(topo)] Cannot find edge 0 [161, 158] in triangle 0; ```. Fixes https://github.com/sofa-framework/sofa/issues/2636. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2638:8,message,message,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2638,1,['message'],['message']
Integrability,The operator>> was not functionning properly as it was returning; with a failbit set because of the in.peek() on empty string. This error; was generating a warning in UniformMass. The PR:; - fix this error; - adds a test that validate that the code is correct and does not generate error anymore.; - makes some sout/serr cleaning in uniformmass. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/993:445,message,message,445,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/993,1,['message'],['message']
Integrability,The option **SOFA_NO_VMULTIOP** in ODESolver (aka integration schemes) makes the reading (i.e. the understanding for new users) and the dev cumbersome. I know the VMULTIOP allows for optimized vector operations with the MultiOp.; Would there now be a reason to just keep one upon the other ?; Any other thought? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1263:50,integrat,integration,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263,1,['integrat'],['integration']
Integrability,"The option handleSeams was supposed to mimic the same mechanism as in the OglModel, i.e duplicated vertices when texture coordinates are present (as it is possible that one vertex has multiple texture coordinates).; This option never worked because of references errors ; this PR corrects it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/923:392,message,message,392,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/923,1,['message'],['message']
Integrability,The path to the pluginManager.cpp is incomplete in the CMakeLists. Thus prefix was always empty and nod set to _d in debug mode. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1313:228,message,message,228,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1313,1,['message'],['message']
Integrability,"The position and edges vectors were not cleared if load() is called multiple times. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/337]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3702:88,depend,depends-on,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3702,1,['depend'],['depends-on']
Integrability,"The precomputed compliance matrix with `PrecomputedConstraintCorrection` component has a chance to be corrupted at each recomputation. It depends on the collision model used. ### How to reproduce ; I made a small example scene : [BugShowcase.zip](https://github.com/sofa-framework/sofa/files/5961370/PostForum.zip). - Sofa version : 20.12. - Plugins : SofaPython3. This scene uses command line arguments and SofaPython3, so I added ; ```cpp; PythonEnvironment::setArguments(SetDirectory::GetFileName(filename), arguments);; ```; in the `try{}` block of in `SceneLoaderPY3::loadSceneWithArguments` in SceneLoaderPY3.cpp (lines : 90-100). ### The solution ; I do not know, but changing the 3d model can help. Also, one can try to recompute the compliance matrix until it ""works"" and save it and reload it (with `recompute=False`).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1809:138,depend,depends,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1809,1,['depend'],['depends']
Integrability,"The preproc define SOFA_WITH_THREADING seems to not be used at all (except in a logger_test) and the cmake `SOFA_WITH_THREADING` option itself is misleading (both the name and the description); ```SOFA_WITH_THREADING ""Compile sofa with thread-safetiness support (PARTIAL/EXPERIMENTAL)``` 🤔 ?. So this PR removes everything related to this option, and as it was not used for some time, ; I did not do any compat/deprecation... EDIT:. After some investigation, it was created to let the user chose if he wants thread safety with the message dispatcher, with this commit https://github.com/sofa-framework/sofa/commit/2aebe06241c6f8b391f0cc3d32b12ed90e40ef96 (did not find the related PR) ; and it disappeared with #1799 (where the message dispatcher will always be thread-safe). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3565:531,message,message,531,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3565,2,['message'],['message']
Integrability,"The prettyfied output of the unit test:. ```; [; {; ""className"": ""DefaultAnimationLoop"",; ""creator"": {; """": {; ""class"": {; ""className"": ""DefaultAnimationLoop"",; ""namespaceName"": ""sofa::simulation"",; ""shortName"": ""defaultAnimationLoop"",; ""templateName"": """",; ""typeName"": ""DefaultAnimationLoop""; },; ""object"": {; ""data"": [; {; ""group"": """",; ""help"": ""object name"",; ""name"": ""name""; },; {; ""group"": """",; ""help"": ""if true, emits extra messages at runtime."",; ""name"": ""printLog""; },; {; ""group"": """",; ""help"": ""list of the subsets the objet belongs to"",; ""name"": ""tags""; },; {; ""group"": """",; ""help"": ""this object bounding box"",; ""name"": ""bbox""; },; {; ""group"": """",; ""help"": ""The state of the component among (Dirty, Valid, Undefined, Loading, Invalid)."",; ""name"": ""componentState""; },; {; ""group"": """",; ""help"": ""if true, handle the events, otherwise ignore the events"",; ""name"": ""listening""; },; {; ""group"": """",; ""help"": ""If true, compute the global bounding box of the scene at each time step. Used mostly for rendering."",; ""name"": ""computeBoundingBox""; },; {; ""group"": """",; ""help"": ""If true, solves all the ODEs in parallel"",; ""name"": ""parallelODESolving""; }; ],; ""link"": [; {; ""help"": ""Graph Node containing this object (or BaseContext::getDefault() if no graph is used)"",; ""name"": ""context""; },; {; ""help"": ""Sub-objects used internally by this object"",; ""name"": ""slaves""; },; {; ""help"": ""nullptr for regular objects, or master object for which this object is one sub-objects"",; ""name"": ""master""; },; {; ""help"": ""Link to the scene's node that will be processed by the loop"",; ""name"": ""targetNode""; }; ]; },; ""target"": """"; }; },; ""description"": ""foo\n""; }; ]; ```. and the templated object:. ```; [; {; ""className"": ""DummyComponent"",; ""creator"": {; ""Vec3f"": {; ""class"": {; ""categories"": [; ""_Miscellaneous""; ],; ""className"": ""DummyComponent"",; ""namespaceName"": ""sofa"",; ""parents"": [; ""BaseObject""; ],; ""shortName"": ""dummyComponent"",; ""templateName"": ""Vec3f"",; ""typeName"": ""DummyComponent\u003CStdVectorType",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4775:430,message,messages,430,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4775,1,['message'],['messages']
Integrability,"The problem comes from the compilation of SofaPython3. In particular, it is related to one of its dependency `pybind11`. It is missing from your computer.; I recommend you to read the documentation: https://sofapython3.readthedocs.io/en/latest/menu/Compilation.html. You must install pybind11.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486749758:98,depend,dependency,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486749758,1,['depend'],['dependency']
Integrability,The problem the PR solve is related to how data are changed by the setValue function. When writing in data through an opaque pointer it is important to properly notify the data successors that a data has changed. This is why write access *must* be done using beginEdit/endEdit and absolutely not; by removing the const qualifier from q getValueVoidPtr using a cast (what was done in the setValue function). Doing it the wrong way break the data update mechanism. . The PR fix that.; To ease the writing of the beginEdit/endEdit pair it also add a RAII WriteAccessWithRawPtr. It is in BaseData...because it is for BaseData. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1006:724,message,message,724,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1006,1,['message'],['message']
Integrability,The problem was that a failure to create a component due to template mismatch on a; pluginized object shows the pluginization message instead of template mismatch one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1332:126,message,message,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1332,2,['message'],['message']
Integrability,"The problem with the approach to have a name helper in each Node is that the Node must exist before using it. And it's not the case in the XML loader. A name is required before the object creation, and no Node is available at that time. Therefore, I used a single name helper inside the XML loading for all the components. In this case, the counter suffix does not depend on the Node. A problem with this approach (other than it's not consistent), Nodes' counters are not updated...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028170905:365,depend,depend,365,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028170905,1,['depend'],['depend']
Integrability,"The problem with this function is that you cannot trust the returned value forever due to pointer invalidation. `std::vector` allocates dynamically the memory depending of the need. At creation, it allocates a small chunk of memory. If the memory is full when you try to insert an element, it will allocate a bigger chunk of memory and move everything in this new memory space. Everything that was in the previous memory space is invalidated. It stills points to something, but it is invalid. And using it leads to a crash. I made a small example on godbolt of this situation: https://godbolt.org/z/aqec8Krzo. You can see that the result of `data()` is invalidated after elements insertions. Conclusion: your solution is better than the previous. But this function must be used appropriately.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1328698963:159,depend,depending,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1328698963,1,['depend'],['depending']
Integrability,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637:948,integrat,integrationMethod,948,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637,3,"['depend', 'integrat', 'message']","['depends', 'integrationMethod', 'message']"
Integrability,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:186,integrat,integrating,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225,2,['integrat'],"['integrating', 'integration']"
Integrability,"The rational is that we should reduce as much as possible the interface size of an object as long as the same service can be done in our case the two variation are:; myData == value; vs; myData.getValue() == value. The second one has the advantage:; - to make explicit that there is computation/accessor. ; - the object we put in Data<> does not need anymore to have == operators. ; - as the Data interface has less functions so it is easier to learn/discover/read/remember. . EDIT: I'm not sure it is a good idea to remove the operator== directly without transition period, this is why I'm searching for some template tricks that would print the deprecation warning then stop the compilation but I didn't managed to do so. Any help appreciated.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1639:62,interface,interface,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639,2,['interface'],['interface']
Integrability,"The rational of the PR is sounded and the existing design in sofa that mix the base class with a kind of hardcoded singleton/registry is bad and should be refactored (thank for the PR so). . From my experience the refactoring step in such situation depends if the static part is actually implementing kind of singleton or a kind registry of instances. But in both case the refactoring consists in moving all the static methods and static attributes in a new class with the sole purpose of handle the registry/singleton. . In your PR you are moving the static method and the singleton into TaskSchedulerFactory. ; If found using ""factory"" is confusing as to me a factory's roles (and design pattern) is to map to different construction methods and not holding the created instances. In order to keep the registry separated from the factory part I recommend keeping the two concerns separated in different classes. . To me a clean layout separating implementions and concerns is the following:; ```cpp; class TaskScheduler {}; // The base class for a scheduler; class TaskSchedulerRegistry:: {}; // The class implementing a registry of taskschedulers; class TaskSchedulerFactory:: {}; // The class implementing a factory for taskscheduler; class MainTaskSchedulerRegistry::{}; // The ""static"" class which contains a singleton of a TaskSchedulerRegistry ; // and public static methods to manipulate it (with mutex in each of them) ; class MainTaskSchedulerFactory::{} // The ""static"" class which contains a singleton of a TaskSchedulerFactory; // and pubic static methods to manipulate it. ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324884905:249,depend,depends,249,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324884905,1,['depend'],['depends']
Integrability,"The removed line prevents referencing this plugin in another, externally built SOFA plugin.; (doing a `find_package(SofaPython)` from the CMakeLists.txt of another plugin, built as a standalone project did not work). I don't know the side-effect of simply removing this line, but I also don't see in which case this could (or should) work anyway: there is no reason to create a target during the import of a package. the targets are created at install, and loaded during the package import, not created, to my understanding. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/888:624,message,message,624,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/888,1,['message'],['message']
Integrability,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/573:227,message,messages,227,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573,2,['message'],"['message', 'messages']"
Integrability,"The scene graph view is not updated to reflect the content of the scene changes. ; This is because a mecanism was implemented to not update the view at each simulation step to maximise performance. . This may be useful when max performance is needed but this lead to an inconsistant display. . In this PR I try to fix the situation by allowing three states:; - lock = true => changes in the scene graph are not reflected into the model but the model is flagged as dirty ; - lock = false => changes in the scene graph are imediately reflected into the model; - dirty => true => the model is not anymore synchronized with the sofa scene graph; - dirty => false => the model is showing the content of the scene graph. when going from lock=true to lock=false the model is updated if it was dirty. . To let user to control if they want the graph to be updated we add an icon to lock/unlock the model state. If the model is dirtyfied; a the icon is reflecting the change (with an highly professional icon free of copyright ;)) . Fixes #2920 . The PR also contains few fixes for the modeller (that is still broken anyway). . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3026:602,synchroniz,synchronized,602,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3026,1,['synchroniz'],['synchronized']
Integrability,The script would sometimes plot completely wrong info because some numbers were treated as strings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/519:199,message,message,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/519,1,['message'],['message']
Integrability,"The solver crash if the system is rank deficient because it read memory at indices like xxx[0]. . This PR:; - adds a conditional test prevent that. ; - adds SOFA_WITH_FLOAT, SOFA_WITH_DOUBLE to make it consistant with the rest of sofa.; - removes commented code. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/655:364,message,message,364,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/655,1,['message'],['message']
Integrability,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/278:1225,message,message,1225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278,1,['message'],['message']
Integrability,"The test timeout should be done directly in the CI bash scripts, by running the gtest executables using the command `timeout` that can even send a signal to be able to print a specific message on the dashboard.; https://www.gnu.org/software/coreutils/manual/html_node/timeout-invocation.html. Maybe it makes more sense that @guparan or @bcarrez have a look at it rather than @maxime-tournier?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814:185,message,message,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814,1,['message'],['message']
Integrability,"The test was failing due to triangle orientation a priori, let's check the CI. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1338:178,message,message,178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1338,1,['message'],['message']
Integrability,The title says it all. . I'm confused as the windows build used to terminate correctly when the PR was merged :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/391:214,message,message,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/391,1,['message'],['message']
Integrability,The title says it all. Feel free to comment if any of the removed scenes should be kept. Removed scenes:; - Components/controller/ArticulatedHierarchyBVHController.scn; - Components/controller/EdgeSetController.scn; - Components/controller/MechanicalStateController.scn; - Components/controller/NodeToggleController.scn; - Components/forcefield/BuoyantForceField.scn; - Components/forcefield/BuoyantForceField2Boxes.scn; - Components/forcefield/ForceMaskOff.scn; - Components/forcefield/WashingMachineForceField.scn; - Components/mapping/CatmullRomSplineMapping.scn; - Components/mapping/ProjectionToTargetLineMapping.scn; - Components/mapping/ProjectionToTargetPlaneMapping.scn; - Components/topology/HexaCenterPointMapping.scn; - Demos/10000.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/922:848,message,message,848,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/922,1,['message'],['message']
Integrability,"The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603:205,Message,MessageDispatcher,205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603,5,"['Message', 'message']","['MessageDispatcher', 'message']"
Integrability,"The unit tests on the StaticSolver failed because the Metis permutation using the Eigen API did not give the same result than the Metis permutation that was implemented before. This is intriguing... But the most concerning problem is that the result of the linear solver depends on the permutation. Hopefully, it is only a problem of numerical errors. Afterall, the operations are not the same depending on the permutation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4370#issuecomment-1895627928:271,depend,depends,271,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4370#issuecomment-1895627928,2,['depend'],"['depending', 'depends']"
Integrability,"The use of the macro CHECK_TOPOLOGY has been removed from the code through several PR. This one totally remove it. Remove duplicate call to createEdgeSetArray from Modifier when adding an edge to the topology. As all topology buffers are init at start, if hasEdges return 0, it means the topology is really empty not that the topology is not init.; This behavior has been set in the PR #967. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1399:491,message,message,491,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1399,1,['message'],['message']
Integrability,"The user was never informed that its scene does not compute bbox.; Consequently the viewer settings based on the bbox are messed up. This PR will at least warn the user that he needs to either:; - add a component which implements computeBBox; - implement itself in its own components; - force set bbox=""minx miny minz maxx maxy maxz"" parameter in a node/component. The logic would want to set it in the root node.; This PR fixes also the fact that the bbox parameter was being ignored by the BBox computing visitors. . This PR is related to issue #29, but it does not compute BBox automatically so #29 should not be closed, in my opinion. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/524:738,message,message,738,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524,1,['message'],['message']
Integrability,"The usual :p, adding dependencies introduced in #2777 in the CMakeLists.txt. It will fix the out-of-tree builds based on the current master, especially for SofaPython3. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3846:21,depend,dependencies,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3846,1,['depend'],['dependencies']
Integrability,"The usual cleaning:. 1- removed commented code; 2- added using; 3- sofa rules with name (m_, d_); 4- moved definitions from .h to .inl; 5- replaced old serr/sout with msg_warning, msg_error, msg_info. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/846:300,message,message,300,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/846,1,['message'],['message']
Integrability,The virtual function BaseLinearSolver::isMultiGroup() returns always false because multi group solver is no more supported after PR #901 in all LinearSolver classes. Needs #1060 to be merged first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1063:297,message,message,297,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1063,1,['message'],['message']
Integrability,"The warning message now indicates if the newly added Data/Link is used as a Data or as a Link. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2489:12,message,message,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2489,1,['message'],['message']
Integrability,"The warning was:; ``` cmake; CMake Warning at Sofa/framework/Config/cmake/SofaMacrosInstall.cmake:1031 (message):; Deprecated macro. Use 'sofa_add_targets_to_package' instead.; Call Stack (most recent call first):; applications/plugins/image/image_gui/CMakeLists.txt:46 (sofa_install_targets); ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3359:104,message,message,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3359,1,['message'],['message']
Integrability,"The warning will be annoying but changing the behavior of a core function without warning users is also very problematic. . I see several option to control this message: ; - adds an optional parameter to the createObject function so that for a transitional period a warning is printed but people can remove the warning by calling createObject(..., silentConversion=true). After some time we set the silentConversion to true by default. ; - develops a complete system to handle API change in sofa to control the warnings we want to emit; eg: ; ```cpp ; runSofa -Wno-api-change vs runSofa -Wapi-change; ```; And something like that in the code; ```cpp ; msg_info_when( SofaPython::ReportAPIChange ) << ""Blah balh""; ```. Other approaches ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306513969:161,message,message,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306513969,1,['message'],['message']
Integrability,"The warning/deprecation message from OptionGroup containing the string ""error-prone"" was bothering me to find the real error in compilation outputs!. I therefore worked on upgrading the SOFA codebase to remove these warnings by replacing the deprecated constructor. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4064:24,message,message,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4064,1,['message'],['message']
Integrability,The workflow is really slow when changing simple values in the data inspectors ; (validating by clicking on update). In this pr we allows the user to change the numeric values; by moving the mouse left&right to decrease/increase with immediate update. I will do a small video to show the results to make that more clear. ; https://www.youtube.com/watch?v=fuWz3Dn1-oM; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/750:467,message,message,467,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750,1,['message'],['message']
Integrability,"Then I will change the CMakefiles in SofaKernel to remove useless dependencies.; Note that the CImgPlugin does not have a hard dependency on libpng (and zlib). If it does not find `libpng`/`zlib`, it will just not be able to read png files. So even if CImgPlugin is inside SofaKernel, `libpng `and `zlib ` wont be necessary.; (for now, CImgPlugin is searching for `libpng `for PNG, `libjpeg `for JPEG, `libtiff `for TIFF, and can load BMP files without any deps. It would be possible to read other kind of files with imagemagick but I dont consider it necessary)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281641344:66,depend,dependencies,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281641344,2,['depend'],"['dependencies', 'dependency']"
Integrability,There is PR in SofaPython3 to keep synchronized with this PR. ; https://github.com/sofa-framework/SofaPython3/pull/133,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1878#issuecomment-810923695:35,synchroniz,synchronized,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1878#issuecomment-810923695,1,['synchroniz'],['synchronized']
Integrability,"There is a patch in the daccord repository on forge. . Here are the commit messages (which contains possible interaction with other sofa part):. ```; [FIX]: Allow sofa to save in xml & pyscn the scene. This may break some scene. Once stabilized this may go to the main Sofa. Several issues needed to be adresse to make this system work. first (to try to minimize the amount of un-needed saved informations making the file unreadable) ):; - all the Data<> are now non persistent by default.; - a Data<> become persistent if:; * it is loaded from a file or from a python script.; * it is modified in the GUI. second (hacky stuff on top of old hack stuff):; during the parsing of xml some component ""converts"" XML attributes to other (and possibility none) dataField). As only the dataField can be saved...these attributes are ""lost"". ; The solution was to stop doing with a minimal number of changes the Sofa behavior. . third (quirck stuffs on pile of quirck stuffs):; some important XML attributes are interpreted on the fly and have very specific meaning but there is no associated data field. The solution was to add the corresponding datafield to allow them to be saved.; This is the case for ""src"", ""template"", ""name"", ""type"" .... Given the amount of changed on base classes logics...some scene may have problem to load or save. Please tell if this is the case.; ```. The case that probably could cause some problem is the replacement of the 'src', 'template' with real data field.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868:75,message,messages,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868,1,['message'],['messages']
Integrability,There is also a big challenge connected to deprecating/SofaNG and moving component. It is cutting the edge in the dependency graph. Some edge are of course legitimate...but for plenty of them this is the result of either:; - putting method definition in headers (which thus require the include of used components); - required for template instantiation. This make every code change a real nightmare.So buy a chainsaw and submit PR to cut into this forest of dependencies (again it is better to locate the object that are easily fix).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332342779:114,depend,dependency,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332342779,2,['depend'],"['dependencies', 'dependency']"
Integrability,There is examples which relies on SparseSolver without having the corresponding RequiredPlugin. ; This PR fix this (to make the CI happy). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/748:240,message,message,240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/748,1,['message'],['message']
Integrability,There is not a lot of contribution to make plugin from the old sofa modules. ; Here is one. . The general idea is that it should decrease compilation time and memory footprint of sofa. . This is my contribution to the issue stated by @hugtalbot in ; https://github.com/sofa-framework/sofa/issues/346. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/396:400,message,message,400,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/396,1,['message'],['message']
Integrability,"There is several dependencies from SofaHaptics to ""hard"" to compile code. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/945:17,depend,dependencies,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/945,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,There should be no more calls of OpenGL API in SofaKernel's modules.; Clean gl's related includes as well. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/425:206,message,message,206,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/425,1,['message'],['message']
Integrability,There was a regression in the way RGBAColor are parsed by the stream operator>>.; This was the cause of Material reading was not working (issue #302). . This PR fix:; - fix the problem. ; - add new tests for RGBAColor & Material ; - Clean Material without breaking the API. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/305:375,message,message,375,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/305,1,['message'],['message']
Integrability,"There was a segfault when opening MechanicalObject properties in runSofa at least with caduceus.scn; Thanks @remibessard for spotting it :+1: . Details:; For a reason I don't know, there is a Datafield named ""dforce(V_DERIV)"" in MechanicalObject that has **no help message**. Thus, when opening MechanicalObject properties, QDisplayDataWidget's constructor runs `data_->getHelp()` which returns nullptr provoking a segfault when used in stringstream creation right after. Bug introduced by 48395d837474beb67ca4d9721ebb8b7361089fe3. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1090:265,message,message,265,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1090,2,['message'],['message']
Integrability,"There was an error in the name of the (origin) directory to install. Not sure about the destination though. This fix has no impact on building Sofa, only on its installation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/959:274,message,message,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959,1,['message'],['message']
Integrability,"There was an unused variable in a frequently included header, and a missing override in another one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/386:200,message,message,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/386,1,['message'],['message']
Integrability,"There's a wierd issue in cmake package config that caused the paths to CImg to be inconsistent (depending on whether the build was triggered from ghprb or manually) on Defrost's CI.; It happens to be CMake's interpretation of the ""PACKAGE_"" prefix in . CImgPlugin/extlibs/CImg/CImgConfig.cmake.in that varied from one build to another.; The prefix is actually useless, since ${CIMG_INCLUDE_DIR} is already a valid and complete path, in build & install configurations. Removing the PACKAGE_ prefix solves the issue.; I flagged this PR as fast-merge since our CI @SofaDefrost does not build anything because of that.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/921:96,depend,depending,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/921,2,"['depend', 'message']","['depending', 'message']"
Integrability,"These references were not removed in; - #3960 . There should be errors like; `CMake Error: File applications/plugins/Flexible/ExternalProjectConfig.cmake.in does not exist.` occuring. 🤐. Not sure why the CI did not detect this, maybe because of CMake caches not cleaned or something like that. EDIT: seems it depend on some factors, I get ""only"" warning on other configuration; `applications/plugins/Compliant does not exist and will be ignored.`; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3980:309,depend,depend,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3980,1,['depend'],['depend']
Integrability,"They are moved in an external plugin: https://github.com/sofa-framework/CSparseSolvers. Two components are impacted: `SparseLUSolver` and `SparseCholeskySolver`. The plugin `CSparseSolvers` is now fetchable. > ⚠️ `SparseLUSolver` has an equivalent using Eigen in SOFA (without the need of a plugin): `EigenSparseLU`, and `SparseCholeskySolver` equivalent is `EigenSimplicialLLT`. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/378]; [ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/119]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258:384,depend,depends-on,384,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258,2,['depend'],['depends-on']
Integrability,"They are not meant to be overriden because there is another mechanism to have a custom class name or template name. As stated in the removed comments, it should have been final. But they could be non-virtual because Base is the top-level base class. Note this is breaking. For example, SoftRobots is affected. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/298]; [ci-depends-on https://github.com/sofa-framework/Registration/pull/4]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3242:314,depend,depends-on,314,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3242,2,['depend'],['depends-on']
Integrability,"They were failing since the introduction of 2 warning messages if one was not explicitly defining an AnimationLoop and a VisualLoop. I've also adding some comment on a test and using a string litteral instead of the ugly stringstream when describing the scene in xml. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2326:54,message,messages,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2326,1,['message'],['messages']
Integrability,"Thinking about it again, Intel(R) UHD Graphics is not a cuda capable device, so it will not be used for computation (rendering maybe?). What's the content of DEVICE_ID and DEVICE_NAME in the log message `CUDA: Using device DEVICE_ID : DEVICE_NAME`?; What do you use to measure the performances?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4423#issuecomment-1884754342:195,message,message,195,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4423#issuecomment-1884754342,1,['message'],['message']
Integrability,"This ""move"" is originally done to uncouple CGAL plugin and Image. This was done by moving Image class (along with dependencies) from Image plugin (ImageTypes.h) to CImgPlugin (CImgData.h). The point is to reduce compilation time since CImg takes less time to compile than Image.; Now Image and CGAL both depend on CImgPlugin which is lighter.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1104:114,depend,dependencies,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1104,3,"['depend', 'message']","['depend', 'dependencies', 'message']"
Integrability,This (old) PR allows to have topological change with UniformMass and DiagonalMass. PointAdded and PointRemoved are added.; Add clean tracker function (temporary regarding Data discussion). This should fix the testIncise. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1212:320,message,message,320,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1212,1,['message'],['message']
Integrability,"This CMake macro permits to create dependent options for tests that will automatically be hidden and set to OFF if SOFA_BUILD_TESTS is defined and FALSE.; If SOFA_BUILD_TESTS goes back to TRUE, the option is shown again with its old value. This way of adding a tests subdirectory should be propagated to all plugins. See [CMake documentation](https://cmake.org/cmake/help/v3.10/module/CMakeDependentOption.html) for more details. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1164:35,depend,dependent,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1164,2,"['depend', 'message']","['dependent', 'message']"
Integrability,This PR Do: ; [SofaGraphComponent] FIX Bug in scene checker.; [SofaGraphComponent] FIX RequiredPlugin . For more details have a look at the commit messages. ; This PR is a re-split of PR #548 to ease review & merging. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/563:147,message,messages,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/563,2,['message'],"['message', 'messages']"
Integrability,This PR FIX Issue #928 and add basic tests on RestShapeSpringsForceField. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/942:175,message,message,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/942,1,['message'],['message']
Integrability,"This PR add a frameskip option to the headless recorder.; Previous behavior is kept for compatibility.; Frameskip option can have 4 different values : ; - noskip and simulationtime : previous behavior, now default. One frame is taken at each time step.; - realtime : Output images at rate of 1/fps; - an arbitrary float : tries to skip this much time between each frame. The order between simulation and frame saving has also been inverted : now the first frame taken is at time 0, instead of time dt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/615:601,message,message,601,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/615,1,['message'],['message']
Integrability,This PR add some facility method to convert back and forth a `MapMapSparseMatrix` type ; into an `Eigen::SparseMatrix`. # CHANGELOG ; * Added some utility methods to be able to accumulate MatrixDeriv types to parent dofs when the mapping implements its jacobian using a sparse matrix from the Eigen library.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/452:408,message,message,408,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/452,1,['message'],['message']
Integrability,"This PR address the problem of the uses of atoi and atof in the parse methods. . In short, ; using atof/i is flawned because:; - it does not check that the attribute is successfully parsed by atoi/atof resulting in undefined behavior when user input is invalid. ; - the components that use them also forgot to set the Local to ""C"" resulting in wrong parsing of 0.1 vs 0,1 (reported in issue https://github.com/sofa-framework/sofa/issues/151); - a failure during the parsing of the attribute does not generate a message to the user when something is wrong. . This PR add getAttributeAsFloat and getAttributeAsInt to be used in place of atof(attr->getAttribute()).; The getAttributeAs* method set the correct Local as well as generates error messages in case they are unable to parse the attribute. The PR contains new tests for the two added functions as well as a more general test in MechanicalObject.; This PR shouldn't break any API or scene or whatever. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/161:511,message,message,511,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161,3,['message'],"['message', 'messages']"
Integrability,"This PR adds a RGBAColor type in defaulttype as well as dedicated tests. . There is several advantage of doing so:; - no ambiguity in the code between a rgba color and vector4.; - the code needed to build colors from their name, hexadecimal or list of float is factored in this class (while currently there is at least 8 duplications in the sofa code base); - unifying the underlying data also offer the possibility to offer consistent user interface for colors . This PR will be the ground to solve issue #https://github.com/sofa-framework/sofa/issues/64. . This PR have no impact on the sofa source code. Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/119:441,interface,interface,441,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119,1,['interface'],['interface']
Integrability,"This PR adds a `isFile` function to the FileSystem component. The PluginManager will then use this new function to test whether or not the plugin path is an existent file. @guparan Concerning your question last week (what happens if the name of the plugin is passed without a path), the previous behavior was to check if the file was a valid library file (.so, etc.), and then gather the full path from the search directories. The new behavior will first check that the file is a valid file (which won't be if only the name is passed), and then try to find it in the search directories. This should not break any old behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/621:727,message,message,727,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621,1,['message'],['message']
Integrability,This PR adds a few boolean Data parameters for the user to have ore control when using the component:; - stopAtNodeToParse: to avoid considering children nodes of the node to be parsed.; - skipJ1tKJ1: to avoid computing the contribution of the first object (useful when several MMMappers are used and you want to avoid to compute several time the same contribution); - skipJ2tKJ2: to avoid computing the contribution of the 2nd object. It adds also a few templates and corrects a bug (mat12.matrix->add instead of mat22.matrix->add). Enjoy!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/882:641,message,message,641,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/882,1,['message'],['message']
Integrability,"This PR adds an attribute pathType (m_pathType) in DataFileName and DataFileNameVector to be able to easily identify whether a component holding a DataFileName accepts files, directories or both. This is useful to provide custom fileDialogs in user interfaces such as runSofa2, give more information about the type of values a dataFileName takes, and provide better error messages. To use it: in the ctor of the component, on a DataFileName datafield, call setPathType(<PathType>) (<PathType> being an enum value of either FILE, DIRECTORY or BOTH. Default value is FILE). The PathType of a DataFileName can be queried by calling getPathType(). In addition, checks are made within the updatePath() method of DataFileName, called when the value changes, to guarantee that the value set is consistent with the defined path type. Since the default pathtype is set to FILE, there are only few components that are directly affected by the pull request (AddResourceRepository is one of them (takes only directories), MeshExporters have a DataFileNameVector which can accept both directories and files. Those 2 components had to be modified to behave properly, and I've been able to identify them thanks to the existing unit tests & scene tests that we compile on the CI. There's no guarantee that there isn't any untested component that should be updated too, but the fix is easy (setPathType(WHATEVER) in the ctor of the component). Same goes for pluginized components of course. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1407:249,interface,interfaces,249,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1407,3,"['interface', 'message']","['interfaces', 'message', 'messages']"
Integrability,"This PR adds custom RPATH to handle dependencies to relocatable targets that will be installed in the ""plugins"" directory. 3 cases are handled:; - A non-relocatable library depends on a relocatable library; - A relocatable library depends on a relocatable library; - A relocatable library depends on a non-relocatable library. WARNING: note that this is a hacky fix based on the hacky RELOCATABLE ""feature"". ; TODO: rework the CMake files to replace the relocatable mechanism by something more standard. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1619:36,depend,dependencies,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1619,4,['depend'],"['dependencies', 'depends']"
Integrability,"This PR adds finally hyperelasticity code in SOFA! ; Related to issue : https://github.com/sofa-framework/sofa/issues/231. Based on the work of @hdeling with @IPeterlik six new hyperelastic models (linearized or non-linear constitutive law) can now be used:; - ArrudaBoyce; - StVenant; - Mooney-Rivlin; - VerondaWestman; - Costa; - Ogden. Note that a validation of such models was done in this [paper](https://hal.inria.fr/hal-01536406/).; More about this can be found on the[ SOFA website](https://www.sofa-framework.org/about/news/validation-of-a-non-linear-model-of-the-liver/). TODO next : ; - improve how parameters are given, stored; - allow for non-homogeneous model (definition per tetra); - add associated test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/349:820,message,message,820,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/349,1,['message'],['message']
Integrability,"This PR adds several bindings to the SOFA python's plugin that we recently needed for a project. - GUIManager: set prefix, config and screenshot directories; - RegularGrid: get the position of a given node index; - SparseGrid:; get the cube and node index in the underneath regular grid; get the position of a given node index; get the boundary cells and nodes; find the cube that enclose a given position; get the nodes indices of a given cube; - Simulation: init and unload a simulation node. Export a scene.; - SofaModule: add plugin repositories, create and set the simulation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/990:681,message,message,681,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990,1,['message'],['message']
Integrability,This PR adds some read/write access method for Data which can shorten slightly the syntax ; required when you want to construct a Read(Write)Accessor object for a Data. ; It extends the method implemented in commit 77ca6f2a7c2cf18a39cdad6a4a88f02ed6d9a9dd; for WriteOnlyAccessor to other types of Data Accessor.; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/450:414,message,message,414,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/450,1,['message'],['message']
Integrability,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253:516,interface,interface,516,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253,2,"['interface', 'message']","['interface', 'message']"
Integrability,"This PR adds the cmake option ""NINJA_BUILD_POOL_FLEXIBLE"" which limits the number of CPU cores used to build the Flexible target (default value: 1). Can be easily replicated to other projects as needed. ; This is only effective when using Ninja.; This will make possible to optimize the number of build threads without hitting the RAM limit on CI, but also on workstations.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/254:474,message,message,474,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/254,1,['message'],['message']
Integrability,"This PR adds the possibility to add bloc matrices in a basematrix. By default this function calls the add function with a scalar but it can also be overlaoaded to reduce the number of virtual function calls. . With the combination of 1x1, 2x2 and 3x3 matrices, it covers most of needs for simulations (the other matrix dimension can be implemented as a combination of the implemented functions). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1143:495,message,message,495,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1143,1,['message'],['message']
Integrability,"This PR aims at correcting bugs related to the newly externalized tinyxml2 dependency in two ways : ; 1. For Windows, this corrects the FindTinyxml2.cmake to be able to find the lib and install it correctly when using the tinyxml2 lib present in the WinDepPack.; 2. For MacOS, this PR correct the rpath of the plugins linking to tinyxml2 for packaging. After this PR is closed, the installed version of tinyxml2 present on the CI builders will be remoced, and the one in the WinDepPack will be used instead (thanks to this pr: https://github.com/sofa-framework/ci/pull/48 and some manual configuration of the builders). . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4574:75,depend,dependency,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4574,1,['depend'],['dependency']
Integrability,"This PR aims to improve the way we search and load plugins. It adds:; - recursive search in PluginManager::findPlugin; - finding plugin dependencies in its directory (Windows only); - (SofaPython) function to easily edit sys.path at any plugin init; - ~~new Data in RequiredPlugin to find out-of-sofa plugins: `searchPath`~~; - new component AddPluginRepository for adding a path to the pool of plugin paths; - ~~**BREAKING**~~: rename AddResourceRepository into AddDataRepository (alias added for backward compat); - new default plugins folder in build/install to allow drag&drop. The last one shall be discussed, I'm not sure it is really needed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/913:136,depend,dependencies,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/913,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"This PR allows to add aliases in C++ in DisplayFlags.; Moreover, DisplayFlags are now case insensitive but a warning is given.; The DisplayFlagsDataWidget is now fixed to correspond to the FlagTreeItem names. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/671:308,message,message,308,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/671,1,['message'],['message']
Integrability,"This PR change the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::Vec<Type> can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) need to be updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/328:803,message,message,803,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328,1,['message'],['message']
Integrability,"This PR changes the API of the Event class slightly so that there's no need to instantiate an Event to get its classname.; The getClassName method that was previously implemented by each of Event's subclasses is moved in the SOFA_EVENT_H macro, and a static GetClassName method becomes the one to override. This is important as Events do not have a default ctor and it is thus impossible to instantiate a dummy event to check its type without knowing the signature of the subclass's ctor. This allows me to implement better and cleaner bindings for events in SofaPython3. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1118:671,message,message,671,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1118,1,['message'],['message']
Integrability,"This PR changes the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::fixed_array (and so helper::Vec<Type>) can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) is updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330:825,message,message,825,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330,1,['message'],['message']
Integrability,"This PR completes #1619 by adding a recursive dependency search.; RPATH should now cover ALL dependencies. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1710:46,depend,dependency,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1710,2,['depend'],"['dependencies', 'dependency']"
Integrability,This PR contains a set of small changes on SofaPython that we are using in our projects. . CHANGELOG:; - [SofaHelper] add StringUtils::getStringCopy (because it was duplicated in several place of the plugin); - [SofaPython] add systematically sys.argv in PythonEnvironment; - [SofaPython] add a very general getattr function in Binding_Node (to write node1.node2.node3.obj.data); - [SofaPython] add a getTarget in BaseObject (to return the plugins that contains a component); - [SofaPython] add a getComponentsFromTarget in the Sofa module ; - [SofaPython] add some minor function in Binding_Data; - [SofaPython] add docstring support for the Sofa module; - [SofaPython] change Binding_BaseContext.getObject to return None instead of a broken exception . There is tests for all features. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656:887,message,message,887,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656,1,['message'],['message']
Integrability,"This PR contains all the changes I did to produce SOFA releases.; Basically it is almost only CMake improvements to ease SOFA installation. Some of them may not be clean/wanted/useful, **please give feedback**. WARNING: I renamed some macros in SofaMacros.cmake so this could break your code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/635:392,message,message,392,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635,1,['message'],['message']
Integrability,This PR contains needed SOFA modifications for regression tests reactivation:; - Remove SofaTest_test/Regression_test (moved to https://github.com/sofa-framework/regression) and SofaVerification; - FIX DataRepository init: always load sofa.ini at construction; - FIX SofaGTestMain for out-of-sofa use; - ADD `FileSystem::findFiles` for recursive search; - FIX some scenes; - ADD `RegressionStateScenes.regression-tests` and `RegressionTopologyScenes.regression-tests` for listing tested scenes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/830:594,message,message,594,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830,1,['message'],['message']
Integrability,"This PR contains small changes to runSofa. . One is to save & restore the scenegraph state in the live-coding mode. This fix avoid to constantly have to expand/collapse things to restore the view in a manageable state when we reload. . The second change is to fix a problem. When Data fields that belong in the ""Infos"" results in having to ""Infos"" panel in the object inspector. So this PR add the Data fields which are in the Info groups to the existing ""Infos"" panel instead of creating a second one with the same name. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/657:623,message,message,623,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/657,1,['message'],['message']
Integrability,"This PR contains the code required to retrieve a component's bounding box in Python, and to manually call for a BaseObject's computeBBox method. This was necessary in my case to create a RegularGrid from a mesh, since contrary to the sparseGrid, the regularGrid does not look at the node's MechanicalObject to create the grid.; An example scene in this PR shows my specific use case. Concerning the bindings, I made the BoundingBox's minBBox and maxBBox read only since this should be computed by the component, and not set externally IMHO. Could be useful to bind the different methods of BoundingBox too, but this is not covered in this PR. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/736:742,message,message,742,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/736,1,['message'],['message']
Integrability,"This PR depends on #2374 #2375 and #2376 and should be rebased before review. - Remove old method ```handleTopologyChange```; - Turn d_indices into TopologySubsetIndices, this automatically fix the topological changes update. ; - Fix the use of subset indices combined with topology changes.; - Add callback on endingEvent to update the totalMass/vertexMass; - Fix the center of gravity display when using subset of indices. Here is an example of scenes RemovingTrianglesProcess.scn using a subset of indices (yellow points); ```<UniformMass template=""Vec3d,double"" name=""mass"" totalMass=""1.0"" handleTopologicalChanges=""1"" indices=""0 1 2 3 4 5 6 7 8 9""/>```. ![RemovingTrianglesProcess_00000001](https://user-images.githubusercontent.com/21199245/135688953-b9a8d6fa-eafc-499e-916d-8e209b227736.png). ![RemovingTrianglesProcess_00000002](https://user-images.githubusercontent.com/21199245/135688979-3e678cc4-a95b-4ff8-b685-688e761d0640.png). ______________________________; ________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2377:8,depend,depends,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2377,1,['depend'],['depends']
Integrability,"This PR depends on PR #2299 (should be rebased). 1. Use callback to update the list of triangles/quads and vertices when topological changes happened.; 2. Add also callback on texcoord to update texture coordinate when mesh changed. - Update of texture coordinates was buggy when removing points; <img src=""https://user-images.githubusercontent.com/21199245/129899818-50ef6454-ca73-49fa-9a1a-f3284eb4915b.png"" width=""70%"" />. - Adding new points where created with texCoord(0, 0); <img src=""https://user-images.githubusercontent.com/21199245/129899836-1a9ad38b-5359-447a-9d68-b11bb68f7813.png"" width=""70%"" />. -> Using the callback on texcoords, use ancestors and coefficient of added point to apply the good texCoords; <img src=""https://user-images.githubusercontent.com/21199245/129899846-178564ea-044d-4db8-a5fb-b4e318f0467e.png"" width=""70%"" />. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2300:8,depend,depends,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2300,1,['depend'],['depends']
Integrability,This PR depends on https://github.com/sofa-framework/sofa/pull/734 and https://github.com/sofa-framework/sofa/pull/732,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-408805889:8,depend,depends,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-408805889,1,['depend'],['depends']
Integrability,This PR depends on the #1186 . Move code of ParticleSource into inl file and clean it: ; - change Data and member prefix; - remove old code and hacks; - update the scene examples. ![SPHParticleSource_00000001](https://user-images.githubusercontent.com/21199245/67021784-6f3be100-f100-11e9-89e6-98ddfd6d6393.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1190:8,depend,depends,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1190,2,"['depend', 'message']","['depends', 'message']"
Integrability,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/575:417,depend,dependency,417,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575,3,"['depend', 'message']","['dependencies', 'dependency', 'message']"
Integrability,"This PR does what I want it to do:; - when changing a MeshLoader's filename, all buffers are properly reset in the OglModel.; - When changing the edges / triangles / position fields of the oglModel, all buffers are properly reset. Yet I don't know if I'm doing this right. @fredroy especially, I think you might have some objections with the code.; Lemme know!. (this PR follows up on #1423). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1483:492,message,message,492,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1483,1,['message'],['message']
Integrability,"This PR factorizes the code of PartialFixedConstraint by inheriting for most functions (init, draw) from the FixedConstraint; FIX #440 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/718:236,message,message,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718,1,['message'],['message']
Integrability,"This PR fix UI problem:; - the icon now display the correct icon (green for info message, yellow for warning and red for error) instead of a red sign all the time; - the icon was displayed at scene loading but not updated. This happens when using controllers that emits messages at simulation time. The result was that the treeview was out-of-date misleading the users. Using the feature introduced in #2397, the state is now tracked to correctly report the message status with it is changed. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2398:81,message,message,81,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2398,3,['message'],"['message', 'messages']"
Integrability,"This PR fix a bug due to circular dependency in the DDG. . To reproduce the bug:; In caduceus scene, activate the informations message with printLog=""1"". ; Run the scene... you should see for the visual_snale_body:; ```console; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] 7696 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] 7696 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] 7696 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; ```; Which indicates tthat the same loader is loading the file multiple times. With the PR it now gives:; ```; INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; ```. Depends on PR #2200 ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2201:34,depend,dependency,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2201,2,"['depend', 'message']","['dependency', 'message']"
Integrability,This PR fix an issue with sofa-launcher. When we are using sofa-launcher the scene we want to execute is copied in the /tmp directory. ; But because we weren't closing the current file it wasn't saved and so wasn't executed. . The fix close it.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/592:345,message,message,345,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/592,1,['message'],['message']
Integrability,This PR fix an issue with the BoxROI component. There was a test in the constructor of BoxROI that created an unwanted behavior.; This test was moved in reinit(); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/627:262,message,message,262,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627,1,['message'],['message']
Integrability,"This PR fix an issue with the WriteState component. When we are using WriteState, we indicate as an argument the period with which we want to save the states. The states will be then saved in a file when a modulo of the period is reached.; But I have observed that there is always a one step offset between reaching the time to save and the actual saving. So I naively add one dt to the time WriteState is working with. . If there is an other way to resolve this issue without hard-coding in WriteState like I have done, I will be happy implement it . Thanks in advance; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/625:670,message,message,670,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/625,1,['message'],['message']
Integrability,"This PR fix the opengl performance issue reported in #https://github.com/sofa-framework/sofa/issues/1070. The fix is in OglModel.cpp/OglModel.h and is very simple, when the positions and normals array are containg double precision numbers they are converted into single precision one before sending the data to OpenGL. I'm sure we can optimize further the conversion loop...but I have not time for that (volunteer needed). . Because the code in OglModel was hard to read because of the #ifdef GLEW all around I first cleaned the whole SofaOpenglVisual code, by removing the #ifdef. I also updated the call to function with name *ARB because they are now part of any baseline opengl implementation since nearly a decade. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1069:821,message,message,821,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069,1,['message'],['message']
Integrability,This PR fixes ShewchukPCGLinearSolver member `preconditioners` initialization.; Should fix the failing scene test `FEMBAR-PCGLinearSolver.scn`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/737:243,message,message,243,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/737,1,['message'],['message']
Integrability,"This PR fixes a requirement of https://github.com/conda-forge/staged-recipes/pull/23085 for the SOFA conda package on conda-forge.; This add a find package to the cmakelists to avoid the cmake fetch of cxxopts sources if a cxxopts is already available and found. This is a simplified version of a find or fetch mechanism which looks enough here, and does not require cmake >= 3.24 (which embedds a more sophisticated find or fetch within an improved FetchContent set of macros).; The PR also adds a cmake SOFA option, which may be re-used if other dependencies will be managed by a similar mechanism, to allow or disable the fetch content of cmake (default behavior is to allow fetching to keep compatibility). ; This is required by the conda-forge PR to disable the fetching of source. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4273:548,depend,dependencies,548,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4273,1,['depend'],['dependencies']
Integrability,This PR fixes errors like `[FileRepository] File icons/back.png NOT FOUND` reported recently. These errors were caused by the fact that SofaGuiQt and runSofa had no idea were to find their resources (if not installed).; Adding and configuring some .ini files will fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/758:373,message,message,373,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/758,1,['message'],['message']
Integrability,"This PR fixes errors on the CI. 1- SofaSph; SpatialGridPointModel should be in the same module as SpatialGridContainer (i.e SofaSphFluid). SPH is 100% linked with SpatialGridContainer and SpatialGridPointModel is always used with SPH so it makes much more sense to be in the SPH plugin.; The move is registered in the ComponentChange list. 2- SofaDistanceGrid; One file was present in SofaMiscCollision (namely FrictionContact_DistanceGrid.cpp) but was never enabled because of the dependency order. Moreover, the content of this file is already in SofaDistanceGrid, more precisely in RegisterModelToCollisionFactory.cpp). So this is totally useless. NB: the two scenes using SpatialGridPointModel does not need SofaMiscCollision anymore. Fix #1897. Contains #2169 ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2170:482,depend,dependency,482,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2170,1,['depend'],['dependency']
Integrability,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/156:1106,message,message,1106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156,1,['message'],['message']
Integrability,This PR fixes install finding of Boost::program_options dependency added for the new ArgumentParser API in #513 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/618:56,depend,dependency,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/618,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"This PR fixes missing default ""plugins"" (now modules) after https://github.com/sofa-framework/sofa/pull/732. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/753:208,message,message,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/753,1,['message'],['message']
Integrability,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/172:25,integrat,integration,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172,6,"['integrat', 'message']","['integrate', 'integrated', 'integration', 'message']"
Integrability,This PR fixes the compilation of CGAL plugin with CGAL version greater than 4.10. It also enables back the CylinderMesh component for which I'm not sure why it was removed in the first place as it seems to work perfectly. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/783:321,message,message,321,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/783,1,['message'],['message']
Integrability,This PR follows #1272 to fix a link error on Windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1282:153,message,message,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1282,1,['message'],['message']
Integrability,"This PR follows @marques-bruno work on https://github.com/sofa-framework/sofa/pull/909. - add INCLUDE_SOURCE_DIR parameter to sofa_generate_package; - rename INCLUDE_ROOT_DIR to INCLUDE_INSTALL_DIR (avoid confusion with INCLUDE_SOURCE_DIR). The idea is to permit this:; ```; sofa_generate_package(; NAME SofaSparseSolver ; VERSION ${PROJECT_VERSION} ; TARGETS SofaSparseSolver; INCLUDE_SOURCE_DIR ""src/SofaSparseSolver""; INCLUDE_INSTALL_DIR ""SofaSparseSolver/SofaSparseSolver""; ); ```; to obtain for example an install tree like this; ```; install; include <-- include_directories here exposes ALL module headers; SofaBaseTopology; header.h; SofaSparseSolver <-- include_directories here exposes ONLY SofaSparseSolver headers; SofaSparseSolver; header.h; SofaValidation; header.h; ...; ```; which is needed if we want to cleanly separate SOFA include directories. In a future PR I'd like to rework all SOFA install tree based on this INCLUDE_SOURCE_DIR + INCLUDE_INSTALL_DIR mechanism. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/951:1085,message,message,1085,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/951,1,['message'],['message']
Integrability,"This PR gives the ability to exchange images between different threads in the MultiThreading plugin. It would be especially usefull for multithreading a camera grabber component and other components (for instance computer vision algorithms). In more details: ; - It consists in adding, in the DataExchange component, exchanges of image data types (ImageUC, ImageUS, ImageF). It involves a depedency with the image plugin, handled in the CMakeLists through a preprocessor directive (WITH_IMAGE) defined in config.h.in.; - A simple example passing an image loaded from an ImageContainer component (thread 1) to an ImageViewer component (thread 2), to display the image in the GUI, is added.; - An issue with OpenGL in the draw() function in the Kinect component in the image plugin has also been fixed, by using the SOFA_NO_OPENGL directive (in the CMakeLists and in Kinect.h). Indeed, with the lib FREENECT detected, the OpenGL functions in draw() may not be compiled given the OpenGL support of SOFA. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770:1102,message,message,1102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770,1,['message'],['message']
Integrability,"This PR hopes to solve the bug where radius option can't be used with AttachConstraint. Provided scenario will crash SOFA.; [attach_radius.txt](https://github.com/sofa-framework/sofa/files/1973782/attach_radius.txt) (Github don't let me give `*.scn` ...). This is due to a call done to early. First commit solve this specific issue.; However, if you execute the previous scenario with just the first commit, it will still not work correctly : both index 0 points will be attached to each other, and that's it. The reason is that the mechanical objects are not correctly initialized when AttachConstraint `init()` is called. Commit 2 is a hack to show how it behave if we delay the initialisation. This does not aim to stay (and likely breaks working scenarios). Is there a way to delay said initialisation ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/650:908,message,message,908,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650,1,['message'],['message']
Integrability,"This PR improves the `sofa_add_external_*` macros used for example by SofaHighOrder. It changes `sofa_add_external_subdirectory` behavior: instead of directly fetching/cloning the repository, it creates a CMake option which, if checked, will do the fetch (and be automatically reset to OFF aftewards). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/759:401,message,message,401,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/759,1,['message'],['message']
Integrability,"This PR improves the message about missing required plugins for python users. Before it was printing lines to cut and paste in the scene (which is really nice!), but only for xml users. Now I propose to check the scene's extension and adapt the message. Here's an example for python:. ![image](https://user-images.githubusercontent.com/12150715/173034896-f7547d53-6a99-475a-892f-b481709ed0c4.png); . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3033:21,message,message,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033,2,['message'],['message']
Integrability,This PR include PR #1508 and replace last use of Qwt in QGraphDataWidget by qtCharts; Remove all cmake config of Qwt and remove the internal library. should fix #1496 or make things worst!. ![graph_cg](https://user-images.githubusercontent.com/21199245/94787278-63f5ca00-03d2-11eb-8fca-80bfcd40ba29.JPG); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1512:404,message,message,404,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1512,1,['message'],['message']
Integrability,"This PR integrate PR #2114 and will be merged inside branch inf_topologyChanges_POC. Remove several header includes not needed. Also remove all TopologyDataHandler in constraints as they were only redefining a Data resize operation. This is already done directly inside the TopologyData. ; The destroyFunction should be only overridden if a complex behavior is needed. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2162:8,integrat,integrate,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2162,1,['integrat'],['integrate']
Integrability,"This PR introduces CMake configurations for SOFA activating and deactivating sub-parts of the project given the SOFA_CONFIGURATION string : CORE/STANDARD/FULL. . The configuration can be forced using `SOFA_FORCE_CONFIGURATION` otherwise the configuration can still be tweaked using CMake option command line. . To apply those configuration I've made two main modification depending on what needed to be activated :; - For options : I've added a CMake macro `sofa_configuration_dependent_option` that allows to specify the scope of the option and force it when needed.; - For plugins : I've modified the sofa_add_subdirectory adding the possibility to specify a `CONFIGURATION` type enabling or disabling the plugin by default depending on the config type and forcing the activation when needed. These configurations have been defined regarding the last STC discussion. . PS: This PR also enables to build Sofa.GUI without Qt. ; PPS: This PR also deactivates the legacy headers by default now; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4766:372,depend,depending,372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4766,2,['depend'],['depending']
Integrability,"This PR introduces a finally-working mechanism to detect old discussion topics and close them.; Here is the definitive process over 4 months:; - When the most recent comment is done by a reviewer and is older than 2 months → a warning comment is done in the discussion; - Two months later, a last warning is written and the topic is closed. However, to avoid catching users unawares, a temporary mechanism has been introduced for discussions already older than 4 months: they will not be immediately closed but firstly warned with a specific message.; Trust me .. it will work :see_no_evil: (testable only after merge ..). So far the action is not fully active : a safety mechanism is done to limit the comment on only the first identified discussion to avoid a massive mess. To be fully operational, the following steps should be performed subsequent to merge:; - [ ] test with only one entry (break); - [ ] remove break; - [ ] after 1st of December 2023, remove the temporary layer (py script). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4268:542,message,message,542,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4268,1,['message'],['message']
Integrability,"This PR introduces nice python wrappers for mappings. . It enables easy definition of pure python mappings similar to c++ with little overhead, since all the Eigen sparse matrices are aliased as SciPy sparse matrices (yay!). Here is a small taste:. ``` python; class DistanceMapping(easy.Mapping):; '''a hooke-like distance mapping: . f(p1, p2) = norm(p2 - p1) - rest_length; '''. def __init__(self, node, **kwargs):; easy.Mapping.__init__(self, node, **kwargs). self.rest_length = 0. def apply(self, out, at):. p1 = at[0][0]; p2 = at[1][0]. delta = p2 - p1; norm = math.sqrt(delta.dot(delta)). out[0][0] = norm - self.rest_length. def jacobian(self, js, at):. p1 = at[0][0]; p2 = at[1][0]. delta = p2 - p1; norm = math.sqrt(delta.dot(delta)). if norm > 1e-14:; u = delta / norm; js[0][0] = -u; js[1][0] = u; else:; # warning; js[0][0] = np.zeros(3); js[1][0] = np.zeros(3). def geometric_stiffness(self, gs, at, force):. p1 = at[0][0]; p2 = at[1][0]. delta = p2 - p1. norm = math.sqrt(delta.dot(delta)); if norm > 1e-14:. u = delta / norm; f = force[0][0]. block = (np.identity(3) - np.outer(u, u)) * (f / norm); gs[:3, :3] = block; gs[3:, 3:] = block. gs[:3, 3:] = -block; gs[3:, :3] = -block. else:; gs[:, :] = 0; ```. See `Compliant/examples/easy.py` for a complete example. For now the code lives in `Compliant` for other people to try out, but could migrate to `SofaPython` if needed. . This PR also ditches a previous but less elegant/powerful attempt at the same problem.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/46:31,wrap,wrappers,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/46,1,['wrap'],['wrappers']
Integrability,This PR is Based on #1004 . CHANGELOG:; - Cosmetic cleaning in RigidRigidMapping & replace serr with msg_error. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1005:213,message,message,213,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1005,1,['message'],['message']
Integrability,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271:535,message,message,535,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271,3,['message'],"['message', 'messages']"
Integrability,This PR is a cherry pick of the changes proposed in PR #869 . Here is the initial description of the PR by @fspadoni . ---------. When solving constraints using a BaseConstraintCorrection component the function ; addComplianceInConstraintSpace compute the compliance matrix and add the contribution of the compliance matrix to the constraint solver matrix. . the goal is to split the computation of the compliance matrix (local for each deformable object) and the sum of the compliance matrix to the constraint solver (global) matrix in two different functions. - BaseConstraintCorrection::computeComplianceInConstraintSpace:; should be used to compute the compliance. This computation is independent and can be easily parallelized. - BaseConstraintCorrection::addComplianceInConstraintSpace:; should be used only to add the contribution of the compliance matrix to the constraint solver matrix. . This change is propagated to the LinearSolver class hierarchy because a ConstraintCorrection component might delegate the computation of the compliance matrix to the the LinearSolver. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1447:1181,message,message,1181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1447,1,['message'],['message']
Integrability,"This PR is a clean before introducing more work on the GeomagicDriver and a GeomagicEmulator. - Move all code related to model display from GeomagicDriver to an embedded class GeomagicVisualModel. This last class is not a component but it creates the node hierarchy to display the device.; - Various minor changes in Driver like adding a singleLink to the Forcefeedback. If needed this work would allow to use GeomagicDriver without linking to SofaOpenglVisual nor SofaLoader. (With a few changes in the cmakelists and in code). ![geomagic_demo](https://user-images.githubusercontent.com/21199245/81161088-4e978380-8f8b-11ea-9f59-bad683bc014d.JPG). - Even if this display is only for debug, my eyes were bleeding too much to let that.; Update the mesh to have cleaner normals/vertices. New mesh display:. ![Geomagic-RigidCubes_00000003](https://user-images.githubusercontent.com/21199245/81160922-06786100-8f8b-11ea-91f8-59fd904c8c2f.jpg). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1366:1039,message,message,1039,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1366,1,['message'],['message']
Integrability,This PR is a follow up #548 ; My last batch of changes to fix the CI. Please review :) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/565:188,message,message,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565,1,['message'],['message']
Integrability,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/96:285,Message,MessageAsTestFailure,285,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96,19,"['Message', 'message']","['Message', 'MessageAsTestFailure', 'message']"
Integrability,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/95:286,Message,MessageAsTestFailure,286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95,4,['Message'],['MessageAsTestFailure']
Integrability,This PR is an attempt to solve the problem pointed in Issue #193 . Problem summary: ; Currently in runSofa when reloading the scene only the ScriptController's are reloaded but not the python code imported by the controllers. . This PR:; solve the issue which avoid to restart runSofa each time an imported module used by a ScriptController is changed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/198:454,message,message,454,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198,1,['message'],['message']
Integrability,"This PR is based on #1406 and #1407 and uses the callback mechanism on some SOFA components (mainly Mesh loaders); It also takes advantage of the newly added ""isDirectory"" method in DataFileName in AddResourceRepository. It also:; - Removes the isPersistent flag from datafields in MeshLoaders (because this flag should only be used to set application-specific behaviors: in runSofa2, this flag is used to determine whether the datafield should be recorded when saving the scene for instance); - takes advantage of the getAccessors introduced by @damienmarchal in #1254 ; - Clears log messages from components withing update callbacks if the componentState changes to ""Valid""; - Sets the dynamic datafields created on-the-fly in the MeshVTKLoader depending on the mesh file content as outputs of the component (to guarantee they're update when the component's inputs change; - Checks for the validity of binary STL files using `isBinarySTLValid` for better error handling (see comment in the code l.103 in MeshSTLLoader.cpp); - Removes the autoLink flag from fileMesh in VisualModelImpl. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1408:585,message,messages,585,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408,3,"['depend', 'message']","['depending', 'message', 'messages']"
Integrability,This PR is based on #853 despite there is not real connection. ; I was to lazy to swtich branch. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/862:196,message,message,196,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/862,1,['message'],['message']
Integrability,This PR is basically the same as #444 but this time it is against master. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/449:173,message,message,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/449,1,['message'],['message']
Integrability,"This PR is big but should finally clean all licenses in SOFA. Here is what I did:; - Fix the licenseUpdater script; - Fix wrong or missing LGPL headers in modules; - Fix wrong or missing LGPL headers in SofaKernel; **WARNING**: I found a **contaminating paste of GPL code** in LCPcalc.cpp:501 (lcp_lexicolemke function). Since I didn't found any usage of this function in SOFA (including plugins), **I removed it**. ; Please **tell me if this is OK**. Otherwise, we will have to discuss about GPL contamination.; - Fix wrong or missing GPL headers in applications/projects; - ~~Fix wrong or missing LGPL headers in applications/plugins~~ (commits removed); - ~~Fix wrong or missing GPL headers in applications/plugins: OptiTrackNatNet, SofaPML and SofaVRPNClient~~ (commits removed); - ~~Fix wrong license in SofaHAPI/initSofaHAPI:58 (should be LGPL)~~ (commits removed); - Optimize organization of LICENSE files in SOFA. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139:965,message,message,965,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139,1,['message'],['message']
Integrability,This PR is connected with:; https://github.com/sofa-framework/sofa/issues/61. I refresh the build to see if this still work then integrate it as no one gave negative feedbacks. ; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624:129,integrat,integrate,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624,2,['integrat'],['integrate']
Integrability,"This PR is en enhancement of the AdvancedTimer. We have added the possibility to get two different JSON ouputs. The first one represent all informations without deep limitation and the other is easier to use but does not represent all the componants tree of the simulation. You can now use the timer in C++ and in python, change dynamically the output type of each timer separately and use the output of the AdvancedTimer to create graphs and/or compare datas from two different scene timers. You can find an exemple of JSON output here : [JSON_example.txt](https://github.com/sofa-framework/sofa/files/1200444/JSON_example.txt); And an exemple of Light JSON output here : [LJSON_example.txt](https://github.com/sofa-framework/sofa/files/1200439/LJSON_example.txt). This work was done with the help of @untereiner and @chpaulus. A documentation will come at the end of my internship. suggested tag : enhancement; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360:1012,message,message,1012,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360,1,['message'],['message']
Integrability,"This PR is focused on cleaning the DefaultPipeline component. It contains:; - several tests with one of them is an OpenIssue (the depth parameter that is not checked nor generate warnings); - fix of the data field names that are not following the sofa guidelines, this may break code; directly using these attributes. ; - change some of the docstring to be more helpful; ; It also depend on the following other pull-requests: ; - https://github.com/sofa-framework/sofa/pull/101",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/105:381,depend,depend,381,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105,1,['depend'],['depend']
Integrability,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389:719,message,message,719,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389,1,['message'],['message']
Integrability,"This PR is just an excuse to test latest SofaPython3 PR https://github.com/sofa-framework/SofaPython3/pull/252. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/252]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2905:116,depend,depends-on,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2905,1,['depend'],['depends-on']
Integrability,"This PR is linked to the issue #308 .; Since the modification of MechanicalObject reinit method in PR #270 ([this commit](https://github.com/sofa-framework/sofa/pull/270/commits/b6750f06ea0c5082f8c88d5aaea6bc65d8840429) ). The mechanicalObject doesn't change the value of P0. Thus, it is not necessary anymore to shift the OglModel and the Surf mechanicalObj. Several scenes were impacted but without ground truth it is hard to say if the scene is totally fixed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/324:562,message,message,562,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/324,1,['message'],['message']
Integrability,This PR is not supposed to be breaking but one day we will totally remove the sofa::defaulttype::RGBAColor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1463:209,message,message,209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1463,1,['message'],['message']
Integrability,This PR is not supposed to be merged...the idea was to show on the CI in which components there is not an even number of begin/end of accessors. But the CI is not working anymore on it and has not kept the compilation log. Now after a quick reading I see several good things in this PR:; - a new fonction in BackTrace to get the trace; - a way to systematically detect components rely on an invalid behavior in begin/end pairs. But given how many componnents have problem this is far too much error messages. ; ; Maybe we could just enable the systematic test using NDEBUG and have that merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834:499,message,messages,499,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834,1,['message'],['messages']
Integrability,"This PR is ready to review. It tries to solve the often called ""**static initialization order fiasco**"" by removing the use of static variables where it can be easily replaced by try catch/enum function or function's local context static variables only. While I was in this part of Sofa, I also tried to uniformize the different message formatter classes as mush as I could.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790:329,message,message,329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790,1,['message'],['message']
Integrability,"This PR is the following work on Geomagic started in PR #1366 (which is included in this one). This PR:; - Totally rewrite the GeomagicDriver init. Now, the tool is directly well placed before simulation start and doesn't need 2 or 3 simulation step to be well init.; => fix #996 . - HD (openHaptics) scheduler communication has been cleaned and fired msg_error with HD error code and description in case of problems.; => fix the possibility to handle several devices. - Clean a lot of old code not anymore used. Like the denavit matrix computation as OpenHaptics is doing it internally. ; => As a consequence, 5 or 6 Data have been removed: dh_XX; - Others changes like variable names replaced to use ""device"" or ""haptic"" instead of ""omni"". And add Doxygen documentation. - Add a component GeomagicEmulator to be able to virtually recreate device motion and interaction. See #1371; => This is almost working.. just need to do some inverse kinematics to compute the good tools transform matrix from the set of arm angles. ... I beg for help here. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1378:1148,message,message,1148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1378,1,['message'],['message']
Integrability,"This PR isolates OpenGL-specific code (pickhandler, viewers, etc) of SofaGuiQt to a new library (called SofaGuiQtOpenGL), thus allowing us to implement a viewer which cannot/dont want to use OpenGL (e,g to deal with macOS in the future). . This PR prepares the ground for a SofaQt3D viewer. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1121:390,message,message,390,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1121,1,['message'],['message']
Integrability,"This PR kind of fixes #316 ; Concerning Multithreading plugin, it still would be better to get rid of Boost dependency as stated by @fjourdes in #316. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/359:108,depend,dependency,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/359,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"This PR links PythonLibs 2.7 to SofaPython ""the proper way"":. Until now, a target was created within SofaPython, in order to expose PythonLibs' leaders & libraries to linked projects. This led to issues when trying to link an external project to SofaPython, since the targets were not properly installed (see #888). Since there's not reason to create a separated target for PythonLibs anyway, I removed it, and simply linked PythonLibs as you would do for any other lib. It should not cause any issue to plugins using SofaPython, since PythonLibs' headers / lib are exposed publicly through the SofaPython target anyway. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/891:720,message,message,720,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/891,1,['message'],['message']
Integrability,"This PR mainly changes SofaMacros.cmake to permit external (on another repository) projects/plugins to be automatically fetched, updated and added to SOFA. Important: this work will permit to include SofaQtQuick GUI as an external project :wink: . This is a modified version of @fredroy branch [setup_external_plugin](https://github.com/fredroy/sofa/tree/setup_external_plugin). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/649:478,message,message,478,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649,1,['message'],['message']
Integrability,"This PR makes me think that msg_info() << ""message"" is in fact something like:; ```cpp; if(notMuted(Base*)); info::queue << ""message""; ```; With notMuted implemented like that:; ```cpp; Base::noMuted() ; { ; f_printLog().getValue(). ; }; ``` ; ; So either we don't use msg_info in loops (which is a good idea by the way, but not easy to track and enforce in our code base) or we reduce the cost of notMuted by using internal caching of the state.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1277432848:43,message,message,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1277432848,2,['message'],['message']
Integrability,"This PR makes so that the user can activate an option to look for and use CCACHE for compilation.; If the option is activated, then CMake looks for ccache. If ccache is found, it is used for compilation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/692:303,message,message,303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/692,1,['message'],['message']
Integrability,This PR moves required Data check from BaseObject::init() to a new SceneCheck loaded by default.; The starting problem for this work was that having the check in BaseObject::init() forces every Component that overrides init() to call the parent init(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754:352,message,message,352,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754,1,['message'],['message']
Integrability,"This PR proposes an alternative representation of the root path's name. If we consider a node named ""root"", with a child node named ""child"", a component named ""object"" and a data field named ""data"", here were the previous values returned by their `getPathName` method:. ```; root.getPathName(): """"; root.child.getPathName(): ""/child""; root.object.getPathName(): ""/object""; root.data.getLinkPath(): "".data""; ```. I find this naming convention misleading, as an empty string for the root path does not seem right to me, and "".data"" for the path of root.data also look wierd:. - When working with link paths, like we do all the time in Sofa, making a link between a component's data and root.value would look like this:; ```; root.createObject('MyComponent', value=""@.value""); ```. - The same way, if a component for some reason would need a take a node as an input field, passing root would look like:. ```; node.createObject(""MyComponent"", nodePath=""@"") # passing root to nodePath would lead to syntax errors during parsing.; ```. Thus I suggest that, as it is done in FTP clients for instance, or filesystem browsers in general, the root node, regardless of its name be represented as a forward slash `/`:. ```; root.getPathName(): ""/""; root.child.getPathName(): ""/child""; root.object.getPathName(): ""/object""; root.data.getLinkPath(): ""@/.data"" # this cas still looks a bit funny, but makes more sense IMHO. root.createObject('MyComponent', value=""@/.value""); root.createObject('MyComponent', nodePath=""@/""); ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1146:1614,message,message,1614,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1146,1,['message'],['message']
Integrability,"This PR re-adds the previously removed Regression project. This time, we use our CMake ""external project"" feature to auto-fetch Regression from https://github.com/sofa-framework/regression. We are now able to build Regression_test within SOFA and to specify what version (commit) of the project shall be fetched.; To change the version that will be fetched, edit `applications/projects/Regression/ExternalProjectConfig.cmake.in`. I also removed the deprecated ci scripts from `scripts/ci`. You can find latest CI scripts in https://github.com/sofa-framework/ci. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1052:661,message,message,661,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1052,1,['message'],['message']
Integrability,This PR removes all occurrences and related codes for SOFA_GUI_INTERACTION. Fixes #623 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/643:188,message,message,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/643,1,['message'],['message']
Integrability,This PR removes the COMPONENTSET mechanism from our CMakeLists.; Deprecated components are now identified by the option SOFA_WITH_DEPRECATED_COMPONENTS. I also couldn't resist to reformat a bit. Tell me if I did something wrong!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/586:329,message,message,329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586,1,['message'],['message']
Integrability,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/455:20,depend,dependency,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455,6,"['depend', 'message']","['dependency', 'depends', 'message']"
Integrability,"This PR removes warnings caused by inconsistent use of the override keyword. While it might not remove all of them (not all plugins have been checked), it allows developers to actually fix the remaining ones rather than ignoring them because it will only generate more warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/423:378,message,message,378,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423,1,['message'],['message']
Integrability,This PR replaces #510 with a simple fix suggested by @vmagno (thank you). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/515:173,message,message,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/515,1,['message'],['message']
Integrability,This PR should fix #401 bug. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/403:128,message,message,128,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/403,1,['message'],['message']
Integrability,"This PR should fix the issue raised in #1650 by cleaning CImgPlugin to properly use targets for dependencies and thus propagate their include directories. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1651:96,depend,dependencies,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1651,1,['depend'],['dependencies']
Integrability,This PR simply add a default class named NoArgument in Factory.h.; NoArgument is usefull when you try to instantiate BaseCreator or Factory without passing arguments. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/385:266,message,message,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/385,1,['message'],['message']
Integrability,"This PR simply introduces the template alias:. ```c++ ; sofa::core::sptr<T> = boost::intrusive_ptr<T>;; ```; in `<sofa/core/sptr.h>` and reflects the needed changes in the codebase. # Motivation. Most (all?) component types in SOFA come with a member typename `T::SPtr` referring to `boost::intrusive_ptr<T>`, which makes it impossible to declare a member shared pointer to another component without including the component header file. In an effort to decrease compilation times by removing unneeded include files, this PR introduces a template alias to solve this problem. It is now possible to declare member shared pointers using a forward declaration of their types only, as shown in 48f1447. # Changelog. - added `sofa::core::sptr<T>` template alias; - reflected changes in BaseClass macros, Base and Aspects; - replaced many constructors in `New` with variadic templates; - added an example include fix in `Compliant`. # Note. This PR is *not* intended to be a place for fixing every member SPtr + includes, otherwise it will never get merged. . If we can agree on the PR's philosophy and get it merged, please make separate PRs for include simplifications. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436:1264,message,message,1264,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436,1,['message'],['message']
Integrability,"This PR slightly improves the doc around the DataTypeInfo API according to our findings while digging in to implement the Data type binding in SofaPython3.; It also adds a specialization of the `DataTypeInfo<helper::vector<T> >` with `T=std::string`, which proves that it is possible to iterate over containers with `SimpleLayout() == true` and `BaseType()->FixedSize() == false`, which is important for SofaPython3 bindings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1113:525,message,message,525,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1113,1,['message'],['message']
Integrability,This PR suggested by @alxbilger fixes build on Windows with VS2017. Error was `C2057: expected constant expression`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/630:216,message,message,216,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/630,1,['message'],['message']
Integrability,This PR unify the API for DataTrackerEngine and DataCallback; so they match. The difference between the two is that in DataTrackerEngine; the callback is called when the data is needed (so the output is accessed); while in a DataCallback the update is done each time the data is changed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1073:387,message,message,387,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1073,1,['message'],['message']
Integrability,"This PR will be further discussed during STC#3. ## issofa_bugfix. ### Cleans; - BaseObject: Output message in serr for required datas. Error word should be reserved for messages that will make the application fail.; - RayTriangleVisitor and SceneLoaderFactory: clean warnings; - ParticlesRepulsionForceField: Add empty implementation of addKToMatrix to get rid of console warnings. ### Bugfixes; - AttachConstraint: fix crash when indices are resized; - BTDLinearSolver: fix constant log + operator new [] vs operator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stif",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218:99,message,message,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218,2,['message'],"['message', 'messages']"
Integrability,"This PR will be merged in the topologyChanges_POC branch. this method was never called and is not useful.; Add Disabled message. This need to be merged before #2114. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2171:120,message,message,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2171,1,['message'],['message']
Integrability,This PR will fix our last failing unit test on Unix! :tada: . CImgPlugin defines for CImg build needed to also be defined by every project using CImg.; ~~They are now exported in `CImgPlugin_CFLAGS`.~~; They are now defined PUBLIC by CImgPlugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/595:345,message,message,345,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595,1,['message'],['message']
Integrability,This PR will remove various warnings generated when compiling with gcc 6.3.0. Warnings coming from extlibs are not fixed.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/454:222,message,message,222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/454,1,['message'],['message']
Integrability,"This PR:; - adds the new component MechanicalMatrixMapper (formerly called MappedMatrixForceField); - suppress the Cmake option SOFA_WITH_EXPERIMENTAL_FEATURES (Was used for development and is useless now) added in https://github.com/sofa-framework/sofa/pull/276. The component MechanicalMatrixMapper allows to compute the mapped matrices computed by ForceFields under mappings, which are ignored by the SOFA animation loops.; Typical usage would be:; **Node**; MechanicalObject (MO) **q**; MechanicalMatrixMapper (NodeParsed = **MappedNode**) --> computes **J**^T.**K**.**J** and **J**^T.**M**.**J**; .....**MappedNode**; .....MappedMechanicalObject (MMO) **q_m**; .....Mapping (input = ../MO, output = MMO) -> Computes **J**.**q_m**; .....ForceField -> Computes stiffness matrix **K**; .....Mass -> Computes Mass Matrix **M**. Any comments welcome!; (Work with @VannesteFelix @ChristianDuriez ); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/721:997,message,message,997,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/721,1,['message'],['message']
Integrability,This PR:; - updates the sceneCheckerAPI by setting the default leve at 19.06 and removing the warning for BoxStiffSpringFF; - set as deprecated MatrixMass for developers; - warns users about the deprecation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1107:307,message,message,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1107,1,['message'],['message']
Integrability,This PRs regroups 2 works:. **1. Changes for v19.12 packaging**; - Qt deployment using windeployqt/macdeployqt and post-install scripts; - Improvement of post-install scripts (Linux and MacOS); - MacOS packaging with latest CMake; - Better param names for macros sofa_install_libraries and sofa_copy_libraries. **2. Integration of DocBrowser by Defrost**; - New Qt dependencies (required): WebEngine + WebEngineWidgets; WARNING: this will definitely break VS2015 compatibility. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1275:316,Integrat,Integration,316,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1275,3,"['Integrat', 'depend', 'message']","['Integration', 'dependencies', 'message']"
Integrability,This STC#5 sprint pull-request cleans the whole Scene Checking API.; It also adds a new SceneCheck that warns for alias uses: `SceneCheckUsingAlias`. It's a first step concerning #677 :+1: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/702:290,message,message,290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/702,1,['message'],['message']
Integrability,"This aims to tackle one point of #4221 . Required for the conda-forge package (https://github.com/conda-forge/staged-recipes/pull/23085).; This PR propose to replace tinyxml embedded library, which is unmaintained now for a long time, by tinyxml2 (https://github.com/leethomason/tinyxml2/tree/master, under Z-lib license) which looks to be its successor and best candidate, as it is maintened, well packaged with cmake and available on conda-forge. ; Also, it is compatible for a future ""find package or fetch content"" mechanism in cmake. I don't know if we want to split the implementation of this additional feature for this package in another PR because if we do so, current code would need an additional required dependency to tinyxml2. ; The ""find or fetch"" cmake mechanism for this package, avoiding the requirement for this dependency to be installed, can be implemented as it:. ```; # find or fetch TinyXML2; include(FetchContent); FetchContent_Declare(; tinyxml2; URL https://github.com/leethomason/tinyxml2/archive/refs/tags/9.0.0.tar.gz; FIND_PACKAGE_ARGS NAMES TinyXML2; ); FetchContent_GetProperties(tinyxml2); if(NOT tinyxml2_POPULATED); FetchContent_Populate(tinyxml2). set(tinyxml2_SHARED_LIBS ON CACHE INTERNAL """"). add_subdirectory(${tinyxml2_SOURCE_DIR} ${tinyxml2_BINARY_DIR}); endif(); ```; However, this would required cmake >=3.24 and this call to be at a toplevel cmake (duplicating this code to replace all current calls to `find_package(TinyXML2)` does not seem desirable neither, so we might think also about how we can implement that in the cmake chain).; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - i",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4240:717,depend,dependency,717,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4240,2,['depend'],['dependency']
Integrability,"This assert is annoying:; In a better world, a singleton should never return null in the first place, so getSimulation() should create the simulation if it doesn't exist. but then in a better world, the Simulation class would not be a singleton in the first place..; Meanwhile, this assert prevents us from coding things like this:. ```cpp; if(!sofa::simulation::getSimulation()); sofa::simulation::setSimulation(new DAGSimulation());; ```; And that's a problem to initialize the Simulation singleton, because without the test, it would be recreated all the time.; So I vote for removing it entirely. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1082:700,message,message,700,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1082,1,['message'],['message']
Integrability,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/457:1023,message,message,1023,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457,1,['message'],['message']
Integrability,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/429:307,depend,dependencies,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429,3,"['depend', 'message']","['dependencies', 'message']"
Integrability,"This bug is fixed. . Fundamentally the problem is that when there is not topology associated to the force field a warning message is printed...but the draw function is still working ""as"" if there were.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/79#issuecomment-264580165:122,message,message,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/79#issuecomment-264580165,1,['message'],['message']
Integrability,"This bug just pop up again in #967 and was referenced in issue #631 ; Several Gmsh file have non coherent topology information, for example Triangulation with edges on the border only. This mess up information feeding the topology container. If this behavior is wanted, use ``` <MeshGmshLoader createSubelements=""0"" />``` and be sure to link the different topology buffer data to the appropriate components.; For example:; ``` ; <MeshGmshLoader name=""loader"" createSubelements=""0"" />. <Node name=""triangulation"" >; <TriangleSetTopologyContainer name=""tri_topo"" triangles=""@../loader.triangles"" />; </Node>. <Node name=""border"" >; <TriangleSetTopologyContainer name=""edge_topo"" edges=""@../loader.edges"" />; </Node>; ```. fixes #631. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/986:831,message,message,831,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/986,1,['message'],['message']
Integrability,This change has been performed to make the usage of the script and the documentary clearer. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/570:191,message,message,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/570,1,['message'],['message']
Integrability,This change is needed before using the new dependency pack (libjpeg + libtiff) on Windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/566:43,depend,dependency,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/566,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"This commit adds a directive to instruct CMake to find/use XCode's framework lastly.; E.g if you have installed libpng with homebrew/macport, CMake will use those first instead of the Apple's (old) ones. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/720:303,message,message,303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/720,1,['message'],['message']
Integrability,"This commit rewrites the static ODE solver, implements two additional convergence criteria, improves the documentation of every step found in the ""solve"" method, and adds useful doxygen documentation of the Newton algorithms executed by the component. Up until this commit, the only convergence criteria of the static ODE solver were absolute force residual norms, and absolute (displacement) increment norm. Using absolute values for convergence criteria means that the value set by the user is dependent on the simulation scale. For example, setting an absolute displacement norm of 1e-5 might seem enough for a liver mesh set in millimetres, but is definitely not adequate for the same liver using this time a mesh scaled in metres. This is a source of user error, and is probably why many FEM software will use relative convergence criteria. The two additional criteria are:. 1. The relative residual norm |R|/|R0| where |R| is the norm of the force vector after the last Newton iteration, and |R0| is the norm of the force vector after the first Newton iteration.; 2. The relative displacement norm |dx|/|U| where |dx| is the norm of the latest solution vector, and |U| is the norm of the sum over all previous solution vectors of the current time step. To remove any confusion between absolute and relative criteria, the convergence data field ""correction_tolerance_threshold"" and ""residual_tolerance_threshold"" were renamed for ""absolute_correction_tolerance_threshold"" and ""absolute_residual_tolerance_threshold"", respectively. Note that to keep a compatibility layer with older scene files, these old data field names are still available, but a deprecated warning is shown to the user, inviting him to update its scene. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/147]. EDIT: Fix #224. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2050:496,depend,dependent,496,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050,1,['depend'],['dependent']
Integrability,"This commit sets the d_totalMass as read and write in DiagonalMass.; Before set as read-only, without reason.; The commit also updates the coding rules in the Data. Tests are added to check for both hexa and tetra topologies,; the coherency between totalMass and massDensity. It also checks that; if both totalMass and massDensity are defined, totalMass predomines. WARNING: the test showed issue of casting in the EXPECT_EQ(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] breaks existing scenes.; - [x] breaks API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/230:527,message,message,527,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/230,1,['message'],['message']
Integrability,This data holds the force applied to satisfy the SlidingConstraint. Rename some data with more explicit names following Sofa conventions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/780:237,message,message,237,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/780,1,['message'],['message']
Integrability,This feature was already integrated directly into the two (lagrangian) ConstraintSolvers so this component is a bit superfluous. Closing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3294#issuecomment-1710899770:25,integrat,integrated,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3294#issuecomment-1710899770,1,['integrat'],['integrated']
Integrability,This file is needed even if SOFA_INSTALL_RESOURCES_FILES == false; Fixes #114. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/285:178,message,message,178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/285,1,['message'],['message']
Integrability,"This fix allows to select and copy parameters names in Sofa GUI interface, which is very useful when setting default values for elements in scene files. Instead of setting parameters names as titles of widgets I created QLabel objects and set them as the first row of the GridLayout manager. I know that current sofa GUI will be replaced with Qt quick GUI soon, but I guess this modification will still be useful for those who use this version of GUI. I also would to make this change for Qt quick GUI, but all parameters names in QML are covered with ""Mouse Area"" objects, which don't allow to handle mouse events for text objects under them. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/369:64,interface,interface,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369,2,"['interface', 'message']","['interface', 'message']"
Integrability,This fix allows to set the default filename for the Monitor class. The default name assignment is removed in 'init()' function since in constructor it doesn't work. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/500:266,message,message,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/500,1,['message'],['message']
Integrability,"This fix was already applied to examples/Components/forcefield/TriangularForceFieldComparison.scn; See 28c8b68f9d6ed4be725baf305a0957097581fb13. Sorry but I can't explain why this fix was needed in the first place. ; If someone could, that would be great :+1: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/626:361,message,message,361,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/626,1,['message'],['message']
Integrability,"This fixes a segmentation fault I had with the SofaPython3 where the valid gui name was a python string variable. Since the GUI manager was storing a raw pointer to it, and since the python variable was later destroyed, the GUI manager was seg faulting when accessing the pointer. This PR simply creates a copy of the string instead of storing a raw pointer to it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1108:464,message,message,464,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1108,1,['message'],['message']
Integrability,This fixes the GuiRepository path for Windows VS compiling related to issue #577 and then a subsequent issue with QTextBrowser opening the runsofa.html file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/578:257,message,message,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/578,1,['message'],['message']
Integrability,This fixes the problem of closing runSofa while window like pluginManager or VisitorWindow being open and not killed when main application stop. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1030:244,message,message,244,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1030,1,['message'],['message']
Integrability,"This gives more choices for the ordering method. It mimics the choices we have in Eigen-based linear system (e.g. EigenSimplicialLDLT). The data applyPermutation is deprecated. Notes:; - It means we have an alternative to Metis for all solvers. However, it may not be as efficient as Metis.; - The new implementation may be less efficient (or not, I haven't tested) than calling directly the Metis function. But this call is made only once, or every time the matrix pattern changes (topological changes etc).; - Since we have multiple choices, we can put all of them in a factory. That way, Metis could be moved away from this module. Another module can be created, which depends on Metis and would populate the factory with Metis methods. This could also be the case with Scotch. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4370:672,depend,depends,672,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4370,1,['depend'],['depends']
Integrability,This include #1283.... so please let the first one merge first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1330:163,message,message,163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1330,1,['message'],['message']
Integrability,This include PR #1251 to make it compile in the CI. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1253:151,message,message,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1253,1,['message'],['message']
Integrability,"This is a (big) attempt to clean the dependencies management in SOFA. ## Better understand SOFA dependencies; Here is a summary: https://docs.google.com/spreadsheets/d/1dxP7Rsyl1oCr0lfTwQESeeZQTt315CIFih5QpJp5OZY/edit?usp=sharing. ## Clean dependency management in CMakeLists; - SofaFramework; - Moved to SofaHelper: Boost, OpenGL, GLEW, GTest, Eigen, JSON, FFMPEG_exec ; - Removed (not needed by any SofaFramework module): TinyXML, ZLIB ; - SofaMisc; - Added to SofaMiscTopology: ZLIB; - Added to SofaMiscFem: Newmat; - SofaGeneral; - Added to SofaDenseSolver: Newmat; - Added to SofaGeneralLoader: ZLIB; - SofaGui; - Moved to SofaGuiQt: Qt + lots of options about QtViewer, QGLViewer, VSync, ...; - Modularized modules (oh yeah); - SofaPreconditioner: removed Newmat, added SofaSparseSolver; - SofaExporter: added ZLIB; - Plugins; - SofaMiscCollision: added SofaDistanceGrid; - SofaImplicitField: added SofaPython; - Registration: removed SofaOpenglVisual; - image: added ZLIB; - Flexible: added SofaPython. ## Rework all YYY_HAVE_XXX variables to reduce their scope. This is important for future global modularization of SOFA. - Variables are now named upon their module. . - Whenever you need to use the YYY_HAVE_XXX of another module, you surely should declare your own MYMODULE_HAVE_XXX instead. - All those new YYY_HAVE_XXX variables are booleans, so they can be used in CMake with `if(YYY_HAVE_XXX)` and in C++ (if correcly propagated via a config.h.in file) with `#if YYY_HAVE_XX` or `if(YYY_HAVE_XXX)`. - Add sofa_find_package and sofa_set_bool macros to auto create YYY_HAVE_XXX variables. - Edit sofa_install_targets to call `configure_file()` on any *.h.in found in target sources (the sources that are given to `add_library()`). :warning: Here is a quick tuto about [how to correctly add and propagate a dependency](https://gist.github.com/guparan/0b0ed00ad60b740f85b794cdff255229). ## Rework #1121 to avoid nested projects. - Use SOFA_NO_OPENGL to build an OpenGL-free version of SofaGu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1137:37,depend,dependencies,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1137,3,['depend'],"['dependencies', 'dependency']"
Integrability,"This is a WIP PR but need review flag for CI-driven investigation. [ci-depends-on https://github.com/sofa-framework/Regression/pull/25]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2800:71,depend,depends-on,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2800,1,['depend'],['depends-on']
Integrability,This is a WIP to support discussion about issue #362 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/371:154,message,message,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/371,1,['message'],['message']
Integrability,This is a basic fix when compiling sofa with Visual Studio 2015 and using the QWT plugin; last() is replaced by back() for deque. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/935:229,message,message,229,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/935,1,['message'],['message']
Integrability,"This is a comment from @damienmarchal in #413 about deprecation task; __________________________________________; To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181:975,integrat,integrate,975,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181,1,['integrat'],['integrate']
Integrability,"This is a fix for a very specific situation. Here is what happens:. 1. A `msg_warning` is called in a component from a thread different from the main thread. It could be also `msg_error` or `msg_info`, as long as the message count of the element changes. It could be a change of name as well.; 2. The `ObjectStateListener` associated to the component updates the associated `QTreeWidgetItem` (this class is not a `QObject`).; 3. The icon is updated, so it warns the `QTreeWidget` (this class is a QObject) through a signal.; 4. Since the call happens in a thread different from the main thread, the queued connection is used. For that, all signals/slots parameters must be known to Qt's meta-object system. This PR registers the class `QVector<int>`, so it can be used in the queued connection. It partially fixes https://github.com/sofa-framework/sofa/issues/3610. The warning is no longer triggered by Qt. Therefore, the mutex is locked only once in one thread. I say it solves partially, because any other Qt error would trigger the same crash. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3749:217,message,message,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3749,1,['message'],['message']
Integrability,This is a fix to update a bound box for a hyperelastic force field. Without updating the rotation and translation of a virtual camera works incorrectly. This method is a copy of a bound box computation from TetrahedronFEMForceField. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1401:332,message,message,332,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1401,1,['message'],['message']
Integrability,"This is a follow-up to #326, now with green tests. TL;DR: There should be no unprotected python code in sofa except in extension code. . Any code like this:. ```c++; void my_function(...) {; // ...; PySomething_Something(...);; }; ```. Should be GIL-protected as follows:; ```c++; void my_function(...) {; // ...; // the lock runs until the end of scope; sofa::simulation::PythonEnvironment::gil lock;; PySomething_Something(...);; }; ```. Or even better yet: don't use naked python calls and use the `PythonEnvironment` API instead. You may also temporarily release the GIL while doing a costly/blocking c++ operation as follows:. ```c++; void my_function_that_already_owns_the_gil(...) {; // ...; // unlocks the GIL until the end of scope; sofa::simulation::PythonEnvironment::no_gil unlock;; // ...; }; ``` . I tried looking for all python calls in the codebase, but I may have missed some. . # Changelog. - added `PythonEnvironment::gil` RAII for scoped acquisition of the GIL; - added `PythonEnvironment::no_gil` RAII for scoped release of the GIL; - GIL-protected most (all?) python calls with the above (except in extension code); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/347:1237,message,message,1237,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347,1,['message'],['message']
Integrability,"This is a long standing issue in Sofa about not being able to save 'usable' scene in runSofa. . This is the result of multiple problems combined together among which:; - there is keywords that are not Data field but parsing hook (eg: src, compatbility hook) and they needs to be converted into Data.; - the Data have a persistant field. But it is let to the component to specify which are or not depending on some object property but depend on their context of ""use"".; Eg:; *) a data changed in the GUI should be saved; *) a data filled with a script shouldn't; etc... To allow to control fine grain the state of a data is now set to non persitant; by default and should only be activated specifically (by the GUI, or the script); if it is needed to save it. This is what this PR do, and despiste this is a behavior change...it is on a totally broken feature. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1191:396,depend,depending,396,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1191,3,"['depend', 'message']","['depend', 'depending', 'message']"
Integrability,This is a proposal PR following discussion on gitter to use a macro to define the extern template in the header and remove the non extern version from the cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/777:259,message,message,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/777,1,['message'],['message']
Integrability,"This is a proposal for a clean and consistent SofaKernel. ; The idea is to make SofaFramework modules consistent with the rest of SOFA by moving them into `SofaKernel/modules` and reorganizing their tests. Main changes:; - `SofaKernel/framework/sofa/*` goes to `SofaKernel/modules` with consistent naming; - `SofaKernel/framework_test/*` becomes XXX_test (where XXX is a SofaFramework module); - `SofaKernel/modules/sofa/*` becomes XXX_simutest (where XXX is a SofaFramework module); - `<sofa_root>/modules/tests` goes to `<sofa_root>/tests` for better readability. This PR is heavy but non-breaking. Package, module and library names stay the same. Include directories stay the same. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1200:784,message,message,784,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1200,1,['message'],['message']
Integrability,This is a quick redo of #1437 ; I did not see that SOFASPARSESOLVER_HAVE_METIS and SOFASPARSESOLVER_HAVE_CSPARSE are actually used in SofaSparseSolver sources :fearful: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1440:270,message,message,270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1440,1,['message'],['message']
Integrability,This is a redo and fix #919 based on current master. To be tested by @Younesssss :wink: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1396:189,message,message,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1396,1,['message'],['message']
Integrability,This is a remake of #1007 . Upgrading Eigen from 3.2.7 to ~~3.3.7~~ 3.2.10; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101:175,message,message,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101,1,['message'],['message']
Integrability,This is a subset of PR #1492 which aims at merging changes from old branch collodi.; This one only concerns some change done in Compliant plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1557:245,message,message,245,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1557,1,['message'],['message']
Integrability,This is a subset of PR #1492 which aims at merging changes from old branch collodi.; This one only concerns some change done in SofaBoundaryCondition. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1558:250,message,message,250,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1558,1,['message'],['message']
Integrability,This is a subset of PR #1492 which aims at merging changes from old branch collodi.; This one only concerns some change done in collision components. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1559:249,message,message,249,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1559,1,['message'],['message']
Integrability,"This is a task for the conda-forge packaging. . This pr removes the folder containing the libQGLViewer source files and instead fetch our forked version (required to add a CMakeList to the project) when the dependency is not found. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4840:207,depend,dependency,207,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4840,1,['depend'],['dependency']
Integrability,"This is a tentative to refactor `TetrahedronFEMForceField` for better readability. All the FEM methods have been dispatched into dedicated files. The methods are now classes sharing the same interface (polymorphism), called by the component. Advantages:; - `TetrahedronFEMForceField` is smaller; - `TetrahedronFEMForceField` had many similar codes (often identical). This is now avoided as all common code are in the base classes.; - It is easier to read the differences between the different FEM methods.; - We could imagine having a factory of FEM methods for `TetrahedronFEMForceField`. Then, the component could be extended in plugins by adding more methods into the factory. To do:. - [ ] Clean; - [ ] Move some class members from `TetrahedronFEMForceField` to `TetrahedronFEMForceFieldImpl`; - [ ] Restore initial performances; - [ ] Fix broken features such as drawing rotations; - [ ] If everyone agrees, remove the assembled methods. It adds complexity while the resulted matrix is not used.; - [ ] Adapt (if necessary) the derived classes (multithreading, CUDA etc). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2550:191,interface,interface,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2550,1,['interface'],['interface']
Integrability,"This is a test to use Callbacks instead of inheriting from ```TopologyHandler```. - Callback have been added inside ```TopologyDat``` a to define specific method when creating/destroying element (call by remove/add). See ```TriangularFEMForceField``` for an example; - Map of Callback has been added inside TopologyHandler to set specific callback depending on the topology event. See ```TriangularBendingSprings``` as an example which handle Edge but also Triangle removing/adding. To discuss if this is better than inheriting from ```TopologyHandler```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2036:348,depend,depending,348,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2036,1,['depend'],['depending']
Integrability,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471:1263,depend,dependency,1263,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"This is an attempt to fix FileMonitor-fileChangeTwice_test, failing on windows on other PRs since merge of PR #258 . CHANGELOG:; - Fix FileMonitor_test about file that was not correctly recreated. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/267:296,message,message,296,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/267,1,['message'],['message']
Integrability,This is an attempt to refactor from PR #332 to make it non breaking. . No need for review now this is in WIP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/596:211,message,message,211,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/596,1,['message'],['message']
Integrability,"This is an old work that has already been merged into ng branch (see #620) but since the NG task is paused for now I think it would be appreciable to have this in master. The idea is to remove SofaComponent* from modules (because they are not modules) and put them next to SofaAllCommonComponents. Concretely, this PR does:; - Move SofaComponent* next to SofaAllCommonComponents; - Rename SofaAllCommonComponents into SofaComponentAll; - Rename ""packages"" into ""collections"" to avoid confusion with CMake packages like SofaGeneral, SofaFramework, ...; - Somes fixes in SofaPreconditioner and SofaSparseSolver completing #1137 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1155:727,message,message,727,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1155,1,['message'],['message']
Integrability,"This is how `Rigid` behaves, so I would agree. But really, coordinate transformations should go in Engines/Mappings where they can be performed in any order depending on what the user needs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/259#issuecomment-303325969:157,depend,depending,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/259#issuecomment-303325969,1,['depend'],['depending']
Integrability,"This is just a small test to see if an automated replacement is working ""good"" enough. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/836:188,message,message,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/836,1,['message'],['message']
Integrability,"This is mainly to differentiate two identical error messages, but with different causes. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3985:52,message,messages,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3985,1,['message'],['messages']
Integrability,This is related to the issue at: https://github.com/sofa-framework/sofa/issues/816; Fixes #816 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/901:196,message,message,196,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/901,1,['message'],['message']
Integrability,This is reopening one PR that was issued from SofaDefrost/master instead of a dedicated branch. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/691:197,message,message,197,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/691,1,['message'],['message']
Integrability,"This is small feature addition. Currently, LinearMovementConstraint only takes trajectories relative to the rest position of the MechanicalState. Sometimes though, the trajectory is specified in world frame coordinates, and especially with Rigid3D (i.e. orientations), conversion is not trivial for the user . This patch introduces a switch ""relativeMovements"" (default true).; When disabled, trajectories can be specified in world frame coordinates. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/394:550,message,message,550,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394,1,['message'],['message']
Integrability,"This is still WIP be I would be happy to have some feedback. As discuss in #744 . The idea at the end is to remove all GetMeshTopology. ; 1. Add SingleLink in all component accessing GetMeshTopology from context; 2. Update all scenes but keep backward compability:; ```; if (linkTopology.empty()){; msg_warning() <<""set the link"";; linkTopology.set((this->getContext()->getMeshTopology());; }; ```; 3. Flag all getXXXMeshTopology to Depreciate 20.06 ?; 4. after 20.06 Remove all getMeshTopology(). Component upgraded: ; - DiagonalMass; - [SofaGeneralSimpleFEM]; - BeamFEMForceField; - TetrahedralCorotationalFEMForceField; - TriangularFEMForceFieldOptim; - [SofaSimpleFEM]; - HexahedronFEMForceField; - TetrahedronFEMForceField; - TetrahedronDiffusionFEMForceField; - NonUniformHexahedronFEMForceField; - [SofaGeneralDeformable] ; - QuadBendingSpring; - QuadularBendingSprings; - VectorSpringFF; - FastTriangularBendingSpring; - TriangleBendingSpring; - TriangularBendingSpring; - TriangularBiquadraticSpringFF; - TriangularQuadraticSpringFF; - TriangularTensorMassFF. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1183:1168,message,message,1168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1183,1,['message'],['message']
Integrability,This is the Defrost cleaning week29 with...as usual a lot of std:cout and dead code removal. ; Shouldn't break anything. ; In case some component are too verbose please tell us. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/370:279,message,message,279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/370,1,['message'],['message']
Integrability,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/258:333,depend,dependencies,333,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258,4,"['depend', 'interface', 'message']","['dependencies', 'interface', 'message']"
Integrability,"This is the callback system we use in our dev branch for runSofa2.; It lets you add a callback function so that outputs can be updated upon changes on their input data.; The callback function returns a component state (Valid / invalid / ...) which guarantees that the component's state is properly maintained. I kept this PR simple (only tests to show the working principle), but will make another one later on with a few components that we've updated to use this callback mechanism (AddResourceRepository, MeshLoaders (OBJ / VTK / STL ...) . This mechanism is also used in the ""nodephysics"" Links POC (https://github.com/SofaDefrost/ComponentData_POC/pull/2). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1406:760,message,message,760,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1406,1,['message'],['message']
Integrability,"This is the first PR of a long series concerning ISSofa (InSimo) commits merge.; This branch has to be merged first because it is the base branch of all further integrations.; It contains mostly SofaPython commits and also some CI and environment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit te",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/171:161,integrat,integrations,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171,2,"['integrat', 'interface']","['integrations', 'interface']"
Integrability,"This is the return of PR https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190:251,message,messages,251,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190,1,['message'],['messages']
Integrability,"This is the the third step of my LockOut refactoring effort for Sofa. In PR#1283 we have refactored the reflection system. We can now clean the DDGNode to cut the un-needed dependencies. ; DDGNode needed to be part of reflection system because it was storing its inputs and ouputs with Links. It is unclear what the link data structure was needed for and storing the input and output with a more classical data structure (a stable_vector) remove the needs to have DDNode be part of the reflection system...so remove a lot of un-needed code. . Exemple of needed but in face un-needed code that are now removed:; ```cpp; /// This method is needed by DDGNode; const std::string& getName() const override; {; static const std::string emptyName ="""";; return emptyName;; }; /// This method is needed by DDGNode; objectmodel::Base* getOwner() const override { return nullptr; }; /// This method is needed by DDGNode; objectmodel::BaseData* getData() const override { return nullptr; }; ```; ; Some code was added in BaseData. This is because these code was in-herited from DDGNode and are now not provided anymore. The code cannot be removed because BaseData is still used in Links and thus, still required to implement the reflection system...removing that is for an incoming PR. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1372:173,depend,dependencies,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1372,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"This is the work on which was based the STC#4 coding sprint.; It has to be merged to clearly differentiate deprecation and pluginization works afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453:687,depend,dependencies,687,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453,1,['depend'],['dependencies']
Integrability,This is very useful to implement any kind of 3D interaction in the python controllers. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/731:188,message,message,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/731,1,['message'],['message']
Integrability,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/56:514,rout,routing,514,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56,17,"['Message', 'depend', 'message', 'rout']","['Message', 'MessageHandler', 'depending', 'message', 'messages', 'route', 'routing']"
Integrability,This issue is the general discussion about the project Continuous Integration.; Please feel free to share any remark or ongoing work about it.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/186:66,Integrat,Integration,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186,1,['Integrat'],['Integration']
Integrability,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/135:129,depend,dependancy-to-skeleton-h-does-not-compile,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135,3,['depend'],"['dependancy-to-skeleton-h-does-not-compile', 'dependency']"
Integrability,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/136:129,depend,dependancy-to-skeleton-h-does-not-compile,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136,1,['depend'],['dependancy-to-skeleton-h-does-not-compile']
Integrability,This line has been removed accidentally in PR #1428 . need to be backported?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1438:177,message,message,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1438,1,['message'],['message']
Integrability,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/580:709,message,message,709,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580,1,['message'],['message']
Integrability,This member was an error prone copy of `PluginRepository::vpath`.; PluginManager is now always in sync with PluginRepository. AddPluginRepository component has no effect without this change. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/947:290,message,message,290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/947,1,['message'],['message']
Integrability,"This merge is not possible. Hervé, first you have to know your own fork (or a more global fork you could create for asclepios) can be compiled in the sofa continuous integration system. To include your work about high order topology in the sofa-public w/o breaking existing stuff, my suggestion is to create a new plugin in your fork, then to propose it here as a pull request. Once you'll have created the PR, we'll be able to possibly fix the glue with Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969:166,integrat,integration,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969,1,['integrat'],['integration']
Integrability,"This part of the code is dependent from Sofa.GUI and when `Sofa.GUI.Qt` was no found, `Sofa.GUI` was never linked, causing compilation error. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4227:25,depend,dependent,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4227,1,['depend'],['dependent']
Integrability,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185:331,depend,dependencies,331,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"This pr clean most of warnings; The code has never been changed in terms of runtime, but sometimes one may thing that warning were here to detect potential error (passthrough in a case for instance).; The main remaining warning is the alreadydefine class but i will do that in a separate pr since I'm scared it changes behavior on other platforms. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1549:447,message,message,447,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1549,1,['message'],['message']
Integrability,"This pr only goal is to test the Regression [PR #68](https://github.com/sofa-framework/Regression/pull/68). [ci-depends-on https://github.com/sofa-framework/Regression/pull/68]. PR hijacking!; [ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/138]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4942:112,depend,depends-on,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4942,2,['depend'],['depends-on']
Integrability,"This prevents creation of nodes / components with empty `names`, when instantiated in a ""non-conventional"" way:. ```py; py:; node.createChild(''); node.createObject('MyComponent', name=''); ```. ```xml; xml:; <Node name=""""></Node>; ```. By default, if `name` is not provided, unnamed is set in `name`. but if `name` is forcefully set to `""""`, there's currently no safeguards. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1009:475,message,message,475,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1009,1,['message'],['message']
Integrability,"This pull request aims at add a new extension file (.tmg) supported by DistanceGrid. This extension file is used to represent a shape : it's a list of values corresponding to the function evaluated at each point. All the data are placed one after the other in a single column. ; It's a minor add which does not disturb anything in SOFA, so it shouldn't raise any problems. (edit - 08/08/17) The file is now able to provide the size of the grid : these 3 values (nx, ny, nz) are placed at the top of the .tmg file and are used at the DistanceGrid instaciation.; Example : . **Shape.tmg**; *Header with the grid size*; >150; 150; 150. *Values of the grid*; > 0.015; 1; 1; ... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/353:773,message,message,773,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/353,1,['message'],['message']
Integrability,"This pull request aims at making the gravity clearly appearing in object nodes as a GravityForceField.; Old way to define gravity still works and is not deprecated. Main changes:; - By implementing this, the Mass is not inheriting from ForceField anymore.; - The optional mechanism of a separate gravity and the **Gravity** class are also deprecated.; - Default gravity is now 0 (therefore some scenes might fail and need an update). The GravityForceField can:; - either be manually added by the user in the node; - or the gravity can still be globally defined in the root node which will create the automatic creation of a GravityForceField for each mass in the graph. Fix: #2683. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/305]; [ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/56]; [ci-depends-on https://github.com/sofa-framework/ci/pull/18]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988:686,depend,depends-on,686,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988,3,['depend'],['depends-on']
Integrability,"This pull request allows the usage of the advanced timer ; 1. In the standard way; `runSofa -c 1`; 2. Only for the init functions:; `runSofa -c 0`; 3. For the init function and for every second step:; `runSofa -c -2`. Moreover, the usage of the advanced timer in batch mode works again:; `runSofa -c -2 -g batch -n 10`. Fixes #357 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/468:432,message,message,432,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468,1,['message'],['message']
Integrability,This pull request contains few cleaning cout/print/comments. @ChristianDuriez also added the dot poduct for SofaPython Quaternion; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/404:230,message,message,230,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/404,1,['message'],['message']
Integrability,"This pull request does not change anything to the compilation, it only affects the install phase. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/383:197,message,message,197,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/383,1,['message'],['message']
Integrability,"This pull request enhances the Operation::createPerformer function to provide more detailed error messages when it fails to create an InteractionPerformer. The function now includes precise diagnostic messages that indicates where the failure occurred, improving the ease of debugging and maintaining the code. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4880:98,message,messages,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4880,2,['message'],['messages']
Integrability,This pull request fix the problem proposed in issue #1390 . **1. BoxROI.inl**; Move the code piece; ```; if(!d_doUpdate.getValue()){; return ;; }; ```; in front of indices clear operations. **2. RestShapeSpringsForceField.inl**; Add warning message in function recomputeIndices(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1391:241,message,message,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1391,2,['message'],['message']
Integrability,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/222:586,message,message,586,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222,1,['message'],['message']
Integrability,This pull-request adds the following features ; - add numerical integration on tetrahedra and triangles; - add a mechanical tag on a PointSetGeometry object in order to find its associated MechanicalObject; - add the orthogonal of a 2d vector; - add support of high order elements in VTK and Gmesh mesh loaders. It also fixes some bugs ; -Quand2Triangle Topologivcal mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/219:64,integrat,integration,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/219,2,"['integrat', 'message']","['integration', 'message']"
Integrability,"This pull-request is related to the issue ; https://github.com/sofa-framework/sofa/issues/64 . It appears that in 2/3 of the cases only 1,0,0 syntax is allowed while the others also; allows ""red"" ""blue"" etc..for color definition.; ; This is an UI consistency issue. Because of UI consistencies our users think that sofa is:; - hard to understand & master; - not well done; ; So we should unify that (if we want to smooth our user&own experience with sofa).; So I add a TODO where this should be done and maybe in the future I will fix some of them :). This Pull-request depends on the following pull-request:; - https://github.com/sofa-framework/sofa/pull/58",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/65:570,depend,depends,570,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/65,1,['depend'],['depends']
Integrability,This removes some override warnings that were (re)introduced recently. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/520:170,message,message,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/520,1,['message'],['message']
Integrability,This removes warnings that appear when running runSofa from a directory where it was installed from source. This should not affect compilation in any way (but not sure how it would affect packaging Sofa). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/687:304,message,message,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/687,1,['message'],['message']
Integrability,This scene makes no sense since no ShapeMatchingForcefield is existing; in SOFA public. Another scene already shows ShapeMatching example; using the ShapeMatching engine:; ICPRegistration_ShapeMatching_Engine.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/331:313,message,message,313,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/331,1,['message'],['message']
Integrability,This shoud fix #1243 and several issues pointed out on the forum. Return was preventing from recomputing topology internally. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1245:225,message,message,225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245,1,['message'],['message']
Integrability,This should avoid confusion in constraint resolution when mixing integration factors.; Let's see how this affect the CI. This affects the UncoupledConstraintCorrection : the flag _useOdeSolverIntegrationFactors_ is now true by default. This enforces to respect values returned by the ODESolver. See this [forum topic](https://www.sofa-framework.org/community/forum/topic/bilateralinteractionconstraint-reduces-gravity-by-100x/). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1369:65,integrat,integration,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369,2,"['integrat', 'message']","['integration', 'message']"
Integrability,This should avoid issue #768. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/778:129,message,message,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/778,1,['message'],['message']
Integrability,This should avoid us to scroll through the entire build output searching for a crashed unit test (often due to a segfault).; It is just re-printing the output that was already printed. Some dump is still needed to debug the crash (see PR #191). This PR fixes issue #149. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/195:370,message,message,370,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/195,1,['message'],['message']
Integrability,"This should fix ""a few"" failing scene tests due to ColladaSceneLoader on Windows. See the Details tab of https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64_pr1/526/warnings2Result/category.96784904/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/504:311,message,message,311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/504,1,['message'],['message']
Integrability,This should fix CMake errors like `file cannot create directory: C:/softwares/sofa-soft-build/$C:/softwares/sofa-soft-install/plugins/SofaMiscCollision/lib` on Windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1154:268,message,message,268,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1154,1,['message'],['message']
Integrability,This should fix all the scene crashing when performing topological change with some mechanicalMapping in the scene. Like for example identityMapping between the mechanicalObject and the OglModel. This is a temporary fix. Those 2 visitors will be removed as soon as all the component listed in #810 will be updated to use TopologicalData. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/880:437,message,message,437,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/880,1,['message'],['message']
Integrability,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502:345,message,message,345,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502,1,['message'],['message']
Integrability,"This should fix the CUDA issue on CI. Issue was due to SofaCUDA having a version number (instead of NO_VERSION) and thus not being deactivated for scene tests by CI scripts (main.sh). We chose to deactivate SofaCUDA for scene tests because VMs can't run CUDA (or can they?).; In CI, SofaCUDA is only compiled, never executed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1123:425,message,message,425,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1123,1,['message'],['message']
Integrability,This should fix the failing ImagePng test failure. . The problem is the consequence of the use of the ExpectMessage RAII without adding a CountingMessageHandler to the MessageDispatcher. This is quick fix but more fundamentally we need an API improvement to make; that automatical/hidden. But how to do that in an efficient way is yet unclear.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/92:168,Message,MessageDispatcher,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92,1,['Message'],['MessageDispatcher']
Integrability,This shouldn't break anything and is a first step toward the slighgly more ambitious pr #601 . CHANGELOG:; - update gtest from their master (version 1.9: sha1 447d58b4ee8ea96b4757a5bb5f0b3be75af6c2a1); - update the CMakeLists so that they correctly export the needed -D to be used as a shared library; - Fix the problem of missing GTEST_API_ operator<< gtest by implementing the function in TestMessageHandler_test instead of gtest. NB: A better FIX for the GTEST_API_ operator<< could be to make submit PR to gtest but I have no more time left. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604:647,message,message,647,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604,1,['message'],['message']
Integrability,"This solves the issue : [runsofa] -a -n conflict for batch #552; In case to run infinite iterations, the command to be run in command line is: ; bin/runSofa -g batch -n -1. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/610:272,message,message,272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610,1,['message'],['message']
Integrability,This sounds nice and mandatory...I'm looking how did the inversion of dependencies. EDIT: ok i saw,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-787941292:70,depend,dependencies,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-787941292,1,['depend'],['dependencies']
Integrability,"This version is a following the effort started in #1605 and #1611 to clean TypeInfo. . In #1611 I tried to remove the hard dependency to all typeinfo and ODR violation by using the TypeInfoRegistry to get ; the typeinfo. The missing types were detected at runtime... In this version I found what is actually a much easier solution that removes the ODR violation and removes the need to typeinforegistry. . There is also two positive sides effects I see:; - in #1611 the missing types (one not having a datatype) were detected at runtime while in this one they are detected at link time with a single message like the one:; ""; undefined reference to 'sofa::core::objectmodel::Data<sofa::helper::vector<sofa::core::topology::Topology::Pyramid>::getValueTypeInfo() ; ""; - the mechanism is combined with the systematic use of declaring extern class Data<MyType>. The TypeInfo registration/generation is done where the Data<MyType> is not declared as extern. Comments welcome,; D. ; PS: I was also playing with Data/TData but this is for another PR so you can skip that part. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1632:123,depend,dependency,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1632,2,"['depend', 'message']","['dependency', 'message']"
Integrability,This was already fixed by #4227 making the dependency to GUI more explicit and not required. (see original line 333-342 and 509-516),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4312#issuecomment-1820876626:43,depend,dependency,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4312#issuecomment-1820876626,1,['depend'],['dependency']
Integrability,This was only needed so that Data can be used with Link. As this is now a; deprecated feature we can remove this. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1541:213,message,message,213,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1541,1,['message'],['message']
Integrability,"This was preliminary introduced in SofaGLFW/SofaImgui, where a new GUI is loaded at run-time; Contrary to the batch/qt/headlessrecorder GUIs which are forcefully linked at compile-time through SofaGui, which could depend (or not) on Qt, etc according to the CMake config,. SOFANG works already made all the different GUIs as independent libraries but ultimately the SofaGui was still present because of the fact that runSofa was still relying on this mechanism. Now :; - Qt/Batch/HeadLessRecorder are loadable plugins and register themselves in the GUIManager, if loaded .; - Batch is still forcefully loaded by runSofa ; otherwise it could be possible to run SOFA without any GUI (I am not against having this possibility tho); - SofaGui is officially deprecated 🎇. Remarks: ; - after this PR, I would really like to move HeadlessRecorder in applications/plugins (either that in the ""official"" SOFA trunk) as it is only supported on Linux, needs X libs dev and I dont even know if people really uses it.; - showing help will only show the help for the runSofa options not the ones introduced by the eventual plugins....; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3550:214,depend,depend,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3550,1,['depend'],['depend']
Integrability,"This will avoid updating each year the header, thus polluting the history of the code.; Update list of authors of SOFA. Perl code used for additional cleaning:; ```batch; perl -0777 -i -pe ""s/((\*){78}\/\n)((\/)(.*?)(\n)|\n|(\s*?)\*(.*?)(\n))/\1/s""; ```. Following files could also be discussed:; - SofaKernel/modules/SofaBaseCollision/IntrCapsuleOBB.inl; - SofaKernel/modules/SofaHelper/src/sofa/helper/RandomGenerator.cpp; - SofaKernel/modules/SofaHelper/src/sofa/helper/gl/Trackball.cpp // h ; - SofaKernel/modules/SofaHelper/src/sofa/helper/polygon_cube_intersection/fast_polygon_cube_intersection.cpp // h; - applications/projects/meshconv/meshconv.cpp; - SofaKernel/modules/SofaHelper/src/sofa/helper/fixed_array.h. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1375:821,message,message,821,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1375,1,['message'],['message']
Integrability,"This will enable creating SOFA packages on Linux when Qt is installed from the package manager instead of the Qt installer. It also fixes some missing dependencies on Linux distros other than ubuntu 18.04. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1728:151,depend,dependencies,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1728,1,['depend'],['dependencies']
Integrability,This will fix the crashing DistanceGridForceField-liver.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/591:160,message,message,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/591,1,['message'],['message']
Integrability,"This work aims at having a complete Doxygen documentation of SOFA components, especially concerning their Datas. I used the shell script doxygenDataComments.sh to; 1. Force each Data to be defined on one line; 2. Add an inlined and Doxygen-formatted comment on each Data (if no comment found) copying the description used in `initData`. Obviously this has not a 100% coverage (it ""only"" affects Data<.*> written members) but it's still a very good start. PS: our nightly-generated Doxygen is ready to receive these changes: https://www.sofa-framework.org/newapi. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/546:662,message,message,662,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/546,1,['message'],['message']
Integrability,Those Configurations are also meant to be used by the CI to easily set the type of build. The full build will be the one used for PR and Releases. While plugin will be deactivated by the bash script depending on the installed dependencies on the OS.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4766#issuecomment-2150330645:199,depend,depending,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4766#issuecomment-2150330645,2,['depend'],"['dependencies', 'depending']"
Integrability,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:54,message,message,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033,2,['message'],['message']
Integrability,Title says all (at least on Windows/MSVC). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1425:142,message,message,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1425,1,['message'],['message']
Integrability,Title says all :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] has been reviewed and agreed to be transitional.; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/240:118,message,message,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/240,1,['message'],['message']
Integrability,"Title says all. Should fix project using SofaGUI as dependencies. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2279:52,depend,dependencies,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2279,1,['depend'],['dependencies']
Integrability,Title says it all. SofaMacros.cmake was becoming more and more messy. Nothing changes in the macros/functions (I promise :angel:). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1477:230,message,message,230,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1477,1,['message'],['message']
Integrability,Title says it all. Sorry for the messy quick fixing. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/619:152,message,message,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/619,1,['message'],['message']
Integrability,Title speaks for itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/981:124,message,message,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/981,1,['message'],['message']
Integrability,"To cite Jeff Johson from GUI-Bloopers:; ""An even more blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:848,message,message,848,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194,4,['message'],['message']
Integrability,To close this issue: what is expected is a message in `XX2XXTopologicalMapping` which checks whether the input topology includes the appropriate container,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3201#issuecomment-1251440322:43,message,message,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3201#issuecomment-1251440322,1,['message'],['message']
Integrability,To complete the new doc page on [ShewchukPCG](https://www.sofa-framework.org/community/doc/components/linearsolver/preconditioned-cg/). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1420:235,message,message,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1420,1,['message'],['message']
Integrability,"To experiment a new handling of sparse matrices under mappings in our plugin, a few changes are needed in the core of SOFA.; Main changes:; - Add a new function in MechanicalObject (commit 6a6fd98).; - Refactoring of MatrixDerivId: warning holonomicC() is deprecated --> replaced by constraintMatrix (commit 966f9af).; - Change allocation in createMatrix from a fullMatrix to a sparseMatrix.; Linked to #26 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/276:508,message,message,508,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276,1,['message'],['message']
Integrability,"To get rid of the ""call super"" anti-pattern is very challenging, because it is used to (a) check constraints on data fields as well as to (b) initialize the internal logic of the component. The problem I see is that the two things are being interleaved in a very subtle way. And both (a) and (b) rely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:694,interface,interfaces,694,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832,1,['interface'],['interfaces']
Integrability,"To inverse the dependency the registering should be moved into image.cpp; ```cpp; #ifdef SOFA_WITH_MULTITHREADING. int DataExchangeClass = core::RegisterObject(""DataExchange""); .add< DataExchange< sofa::defaulttype::ImageUC> >(); .add< DataExchange< sofa::defaulttype::ImageUS> >(); .add< DataExchange< sofa::defaulttype::ImageF> >();. #endif // SOFA_WITH_MULTITHREADING; ```. About the @fspadoni's answer I think that template can be instantiated as long as the template definition is #included (the .inl or the .h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770#issuecomment-422710552:15,depend,dependency,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-422710552,1,['depend'],['dependency']
Integrability,"To me loading textures and logos is not a core functionality of a physics library, so I would vote for not putting it in SofaKernel. What is important is that this removes the dependencies to `zlib` and `libpng` from sofahelper, correct ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942:176,depend,dependencies,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942,1,['depend'],['dependencies']
Integrability,"To move forward in order to be ready for c++20 modules we need to clean the dependency graph of SOFA. This PR is going in this direction by removing most of the dependency to BaseVector.h, BaseMatrix.h and StringUtils.h. . In SOFA we often use this pattern; ```cpp; class MyClass; {; public:; typedef int Index; ; };; ``` . Which impose a dependency to the full MyClass definition to manipulate indices. ; I design pattern avoiding this problem is used in the PR. This PR work as the following: ; ```cpp; /// Forward declaration; class MyClass;; typedef int MyClassIndex;. /// Definition ; class MyClass; {; public:; typedef MyClassIndex Index; ; };; ``` . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1509:76,depend,dependency,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509,4,"['depend', 'message']","['dependency', 'message']"
Integrability,To move rmath.h from the header I had to moved the code that rely on rmath into Vec.inl so that the include is not spread all around the codebase. Now if you want to instanciate special version of the Vec templates you need to include Vec.inl either. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1543:352,message,message,352,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1543,1,['message'],['message']
Integrability,To prepare for runSofa2 i feel the need to refactor some aspects. . CHANGELOG:; - ADD a Camera object inheriting from BaseCamera so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement your own 'application specific behavior' by using an external Controller (eg: PythonScriptController).; - ADD a link in BaseCamera to a BackgroundSetting so different camera can have different background. ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object; - Update the caduceus example.; - Light object now have a drawSource so that it is possible to draw the source from without having to change the d_drawSource data field.; ; This PR replace #674 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/676:880,message,message,880,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676,1,['message'],['message']
Integrability,"To register the data type info into the TypeInfoRegistry I used partial specialization of the Data class. ; The default implementation of AbstractTypeInfoRegistration is using the old code system (which imply a dependency to all the TypeInfo_xxxx.h). . For progressive migration to new typeinfo system, the selected typeinfo are specializating their custom AbstractTypeInfoRegistration. This custom registration is using the new system. To make sure that the partial specialization is used, the migrated types are declared as extern so we are sure there is a single registration. . An additional advantage of explicit extern declaration of Data is that this avoid bloating the compiler with all the data type to instanciate in every compilation unit. . Done:; - Data[bool]; - Data[RGBAColor] . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3289:211,depend,dependency,211,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3289,1,['depend'],['dependency']
Integrability,To relax after discussions on DataEngines i clean that;. This one is based on stc5 branch (not master). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/818:203,message,message,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/818,1,['message'],['message']
Integrability,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642:621,depend,dependent,621,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642,2,"['depend', 'message']","['dependent', 'message']"
Integrability,"To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965:861,integrat,integrate,861,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965,1,['integrat'],['integrate']
Integrability,"To use a LinearForceField, we need to specify a series of key times associated with forces. However, when simulation time goes beyond the last key time, the force becomes zero instantly. This PR changes it so that it stays at the last specified force instead.; There are a few more small changes to remove some warnings and to use SOFA coding conventions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/525:455,message,message,455,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/525,1,['message'],['message']
Integrability,"Today we have many different way to compile plugins (all ways : through SOFA in files, through SOFA with EXTERNAL_DIRECTORIES, out-of-SOFA).; It is misleading for users, we have still plugins in the core (making SOFA heavy). A proposal: why not going towards a full **out-of-tree compilation for SOFA plugins** (located in _applications/plugins_) ?. It would enforce us to:; - sort used and supported plugins vs. others; - clean dependencies in CMakeLists; - then we would actually have to change the CI so that these plugins are built with a SOFA docker image. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1285:429,depend,dependencies,429,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1285,1,['depend'],['dependencies']
Integrability,"Too bad, I was just searching for this feature and discovered it was not integrated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1164402707:73,integrat,integrated,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1164402707,1,['integrat'],['integrated']
Integrability,"TopologySubsetIndices can be initialized before their corresponding TopologyContainer is total init depending on the component graph order.; Therefor the member `m_lastElementIndex` used to store the size of the TopologyBuffer could be set to 0. Override the method `getLastElementIndex() ` in `TopologySubsetIndices` (and put it in const) to get the number of points as a TopologySubsetIndices is always used on the Point topology. This method is called before removing elements to make sure we use and up to date value of m_lastElementIndex before doing any process. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3331:100,depend,depending,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3331,1,['depend'],['depending']
Integrability,"Towards a green dashboard. Scene was broken since the change on StaticSolver; But I am not convinced it was even working before, the simulation seems very unstable. A python script handling the incremental loading is added. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1064:323,message,message,323,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1064,1,['message'],['message']
Integrability,Tracy integration in https://github.com/sofa-framework/SofaGLFW/pull/89,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4200#issuecomment-1765861726:6,integrat,integration,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4200#issuecomment-1765861726,1,['integrat'],['integration']
Integrability,Triangle numerical integration,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/219:19,integrat,integration,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/219,1,['integrat'],['integration']
Integrability,"TriangleOctree is used in some case where people wants to do ray tracing on an octree structure (filled with triangles); It makes more sense to move it in helper, as it is not a component but a shared utility class potentially used by something else than ""GeneralCollisionMesh"" things (whatever that means). Based on; - #2763 ; ; Breaking 'cause I removed dependency on VisualTool (Sofa.Core) to use directly Drawtool. Still, it has a compat file to redirect deprecated usages.; Removed more useless headers...; This class would need a quite heavy facelift BTW. PS: There was a weird include of defaulttype/fwd.h in DrawTool which was undetected until now, 🤥 ??. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2805:356,depend,dependency,356,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2805,1,['depend'],['dependency']
Integrability,"Triangles `or `TrianglesAroundEdges `as well as `d_triangles `array inside a `TetrahedronToplogy `where empty at start and created only the first time a getter is called.; For example: `getEdgesInTriangleArray()` was calling: `if(m_edgesInTriangleArray.empty()) createEdgesInTriangleArray()` . This works but means at start component are not fully init (potential unstable behavior) and there is no warranty at which timestep buffer will be created. ; Furthermore means that getter are not const and could change the content of the container which is a bad design (in my opinion). **This PR force the computation of all buffers at component init** using a dedicated method `initTopology()` which is called in cascade -> `Tetrahedron::initTopology()` will call `Triangle::initTopology()` -> `Edge::initTopology()`; **and remove all buffer creation call from the getter.**. - Additional changes: ; - Add more check in the buffer creation methods. Potentially exit if creation is not possible (will return bool in future changes).; - Always check buffer size access in the getter. If out of bound acces, returns Invalid element and only emit a warning if CHECK_TOPOLOGY is ON, as this call could be logical and the caller should check the invalid return. ; - Update all topologicalMapping to init the target topology at end of mapping init. ; - **Add some static invalid buffers in sofa::core::topology::Topology.h -> Im not fully happy about those add. Any better suggestion is welcomed.**. fixes #746; fixes #955; fixes #956 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/967:1772,message,message,1772,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/967,1,['message'],['message']
Integrability,Tried not to go too quickly....; - Replaced serr by msg_error/msg_warning and msg_info regarding the case.; - Remove all commented serr.; - Use stringstream to accumulate errors when inside a loop. This PR only trigger classes in Sofa modules see #1237 for changes in SofaKernel. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1236:379,message,message,379,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1236,1,['message'],['message']
Integrability,Tried not to go too quickly....; - Replaced serr by msg_error/msg_warning and msg_info regarding the case.; - Remove all commented serr.; - Use stringstream to accumulate errors when inside a loop. This PR only trigger classes in SofaKernel. See #1236 for changes in Sofa Modules. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1237:380,message,message,380,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1237,1,['message'],['message']
Integrability,Try to fix additional warnings !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1210:133,message,message,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1210,1,['message'],['message']
Integrability,"Trying to include the SofaExporter module in an external project (out-of-tree build of a plugin || test) was not functional since include directories were not exposed properly. I took inspiration from CImgPlugin for this PR, which uses CMAKE_CURRENT_SOURCE_DIR to expose the target's include directory.. but I believe this is actually wrong as this corresponds to the path to the sources (`/home/bruno/dev/sofa/modules/SofaExporter/src/` in my case for instance) and not to the installed include directory, (which should be `/home/bruno/dev/sofa/build/install/include/SofaExporter/src/SofaExporter` on my machine). I took a look at other plugins & pluginized modules & they all seem to do this, so Idk if it's a mistake or done on purpose..?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/975:842,message,message,842,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/975,1,['message'],['message']
Integrability,Turn ForceField init method as final and internally call a delegate fonction doInit which can be overide. This is to avoid adding a call super in each forcefield as ForceField::init has to be called in the current api. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506:318,message,message,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506,1,['message'],['message']
Integrability,"Two change needed by the SofaPython3 plugin. . - In BaseData Some method have two version, one without arguments the other with an ExecParm. In pybind11 we need to differentiate explicitely the two version making the code more complex. As I see no good reason why to keep the two version in Sofa I merged these two into one by using a default param = nullptr. . - I have added a join/split function in the StringUtils class. . - In SimpleAPI I found allowing BaseObjectDescription useful to create object and node. So I added new functions.; _____________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/860:640,message,message,640,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/860,1,['message'],['message']
Integrability,Two interface for both static and dynamic topologies but they are identitical !. 1. Looking for removing all getMeshTopologyLink with getMeshTopology; 2. Then remove getMeshTopologyLink safely. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1297:4,interface,interface,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297,1,['interface'],['interface']
Integrability,Two minor changes:; - Remove FixedConstraint redundant with LinearMovementConstraint (on same DOFs); - Improve warning comment in MeshMMass when using explicit resolution (accFromF) with non-lumped sparse matrix. NOTE: I realized no sparse MassMatrix can therefore be used in explicit formulation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/983:397,message,message,397,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/983,1,['message'],['message']
Integrability,"Two new menu entry are added in the SceneGraph view to jump to the source file location corresponding to the selected object. This PR is based on #1012 to get the file location. ; By default qtcreator will be used to open the file. ; But this can be changed by editting the config file saved by the QSetting mecanism. . NB: The ""Go To implementation"" really make sense when using STLIB as it allows ; to jump where a prefab is implemented. It would be nice if we could do the same for c++ ; but this is of lesser interest ...because we need to compile sofa to see a change :) . EDIT: small video show how it works ; [![video](http://img.youtube.com/vi/zzOY-Lt0vgM/0.jpg)](http://www.youtube.com/watch?v=zzOY-Lt0vgM); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1013:816,message,message,816,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1013,1,['message'],['message']
Integrability,"Two optimizations:; - ~~SparseLDL is now instanciated by default with the template `CompressedRowSparseMatrix<Matrix3>` instead of `CompressedRowSparseMatrix<double>` : seems much faster with 3DOFs~~ warn the user to use `CompressedRowSparseMatrix<Matrix3>` if using only 3DOFs; - Optimize compliance computation : use the local constraint count instead of the global to compute the internal matrices Also rename Jdense to JLinv and Jminv to JLinvDinv to be coherent with what the current code is computing. (those descriptions comes directly from the commit messages). With my scene test (a dozen of objects with a SparseLDLSolver each, and a lot of constraints due to the FrictionContacts):; ```; - before : 5000 iterations done in 208.437 s ( 23.9881 FPS).; - after : 5000 iterations done in 75.8347 s ( 65.9328 FPS).; ```; I tried to keep the commit identical to the original one from the [ISSofa repo](https://github.com/InSimo/ISSofa) (author/message/date). Credits to:; - @JeremieA from [Insimo](http://insimo.com/); - @remibessard from [Mimesis](https://mimesis.inria.fr), for the report. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1996:559,message,messages,559,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996,2,['message'],"['message', 'messages']"
Integrability,"Two pendulum links by their extremities. ![image](https://user-images.githubusercontent.com/10572752/226943766-038894a0-5298-4a7e-a6c1-bd5a29d2d0a8.png). [ci-depends-on https://github.com/sofa-framework/Regression/pull/40]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3742:158,depend,depends-on,158,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3742,1,['depend'],['depends-on']
Integrability,Two thing:; - @epernod some of your code includes changes not merged yet on component**S**tate; - ```Sleep()``` on Linux is not working. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1393:236,message,message,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1393,1,['message'],['message']
Integrability,"UPDATE: SofaHelper compilation with msvc. libpng should not be forced; to be linked using pragma directive. The name of the library may vary,; and it the debug version may well not be available, and its; unavailability should not break the debug build. I fell in the same problem as the one mentionned in issue #443 while compiling; with msvc in debug, without having on my system a version of the libpng ; library called ""libpngd.lib"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/446:536,message,message,536,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/446,1,['message'],['message']
Integrability,"Unfortunately Gaurab seems to be unreachable those days. As I want to use his good work, here is a quick cherry pick of his PR #639. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/669:232,message,message,232,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/669,1,['message'],['message']
Integrability,"Uniform size type to be same type as index_type; + move index_type to sofa namespace (in sofa/config.h); (was located in defaulttype before, does not really make sense). So now : ; - index_type is defined as sofa::index_type; - size_type is defined as sofa::size_type ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1515:369,message,message,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1515,1,['message'],['message']
Integrability,Uniforming FEM interface methods,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/134:15,interface,interface,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/134,1,['interface'],['interface']
Integrability,"Unix timeout command is now accessible in Windows VMs (using ""Git for Windows"" Bash). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/379:185,message,message,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/379,1,['message'],['message']
Integrability,"Update CONTRIBUTING.md further to 20170503 SOFA meeting. - Track the status of each pull request using labels.; - If an issue reports a bug or any abnormal behavior in SOFA, a test highlighting the issue must be written. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/260:320,message,message,320,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/260,1,['message'],['message']
Integrability,Update ChangeLog to better guide users when facing issues with recent breaking PRs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1562:183,message,message,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1562,1,['message'],['message']
Integrability,Update SofaMacros.cmake by setting the policy CMP0057 NEW for supporting the IN_LIST operator of if(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1454:202,message,message,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1454,1,['message'],['message']
Integrability,Update a Eigen wrapper for SOFA,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2474:15,wrap,wrapper,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2474,1,['wrap'],['wrapper']
Integrability,Update further to work on the upcoming Optimus plugin:; thanks @guparan for solving the issue !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1498:196,message,message,196,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1498,1,['message'],['message']
Integrability,Update the FIX but now this PR depends on change done in PR #2870,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2853#issuecomment-1098890010:31,depend,depends,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2853#issuecomment-1098890010,1,['depend'],['depends']
Integrability,"Update the guidelines so that they take into account the latest discussions and conclusion regarding the policy for:; - auto,; - epsilon,; - messaging,; - getContext(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1135:268,message,message,268,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1135,1,['message'],['message']
Integrability,Updating the dependency graph of component & data/,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597:13,depend,dependency,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597,1,['depend'],['dependency']
Integrability,Use of embedded external dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4221:25,depend,dependencies,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4221,1,['depend'],['dependencies']
Integrability,Using #ifdef all around is really bad and ugly. If you need the feature to be back; please make a PR with a non invasive design. If you don't understand why it is so bad to have #ifdef ; used that way please ask I will explain with more details. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1075:347,message,message,347,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1075,1,['message'],['message']
Integrability,"Using the newly released CMake 3.15, the configuring stage fails with:. CMake Error at SofaKernel/SofaFramework/SofaMacros.cmake:686 (message):; Missing parameter TARGETS.; Call Stack (most recent call first):; applications/plugins/SofaMiscCollision/CMakeLists.txt:82 (sofa_generate_package). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1105:134,message,message,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105,1,['message'],['message']
Integrability,"Various cleanup and better checks at the init stage to make sure the topological mappings have everything they need. Only Hexa2Quad, Quad2Triangle and Tetra2Triangle for now. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1126:274,message,message,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1126,1,['message'],['message']
Integrability,Various fix from my working branch:; - FIX: wrong msg_error instead of msg_info in PrecomputedConstraintCorrection; - FIX: warnings when drawing collision interaction using UnilateralInteractionConstraint; - FIX: OglAttribute handleTopologyChange method by using a PointData for value array.; - CLEAN: some logs in PointModel; - FIX: NearestPointROI to use rest_position instead of position. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1159:491,message,message,491,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1159,1,['message'],['message']
Integrability,"Very basic PR just to let you know that the CGAL plugin is not compatible with latest CGAL.; As is, it compiles with CGAL <= 4.9.1. CI build is unnecessary for this PR.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/510:269,message,message,269,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/510,1,['message'],['message']
Integrability,"Very nice work @Wall-E-76 ! Impressive !; Thank you very much, let's wait the continuous integration !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1116#issuecomment-516328823:89,integrat,integration,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1116#issuecomment-516328823,1,['integrat'],['integration']
Integrability,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/507:319,message,message,319,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507,1,['message'],['message']
Integrability,"Very useful collection of header-only utilities : https://github.com/nothings/stb. This PR uses **stb_image** and **stb_image_write** to read/write jpeg,png,etc. images directly without any reliance on libpng or libjpeg.; Practically, This PR almost depracates the use of CImgPlugin (at least as an image loader). ; The only thing stb (compared to cimg) is that it cannot load is the TIFF format... It allows us to :; - not depend on any external library anymore (libpng, libjpeg); - not need anymore to load the CimgPlugin to get images in a scene (which was a bit weird...). **stb** licence is either MIT or even public domain (!). Some questions about this PR:; - should we fetch stb at cmake configure time ? IMO no because it would mean we really need an Internet connection to compile the core of SOFA; - should we put all the files from the stb repo ? IMO no, the other files wont be used for sure. That's why the stb dir contains only the two files we want for this PR. <img src=""https://user-images.githubusercontent.com/11028016/146752568-e4f392d5-5ecd-4f32-be92-32f48b53f5ab.PNG"" width=""400"" />. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2551:424,depend,depend,424,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2551,1,['depend'],['depend']
Integrability,VisualTransform moved from SofaBaseVisual to SofaGeneralVisual. ChangeLog:; - FIX: compilation LeapMotion plugin (issue since v16.12). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/296:234,message,message,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/296,1,['message'],['message']
Integrability,WAIT for #1283 (priority). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1339:126,message,message,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1339,1,['message'],['message']
Integrability,WIP branch fixing test failures caused by warning/error/deprecated messages issued from #213. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] #213 has been merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/237:67,message,messages,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/237,2,['message'],"['message', 'messages']"
Integrability,"WIP project: Add window to display Data graph using [NodeEditor](https://github.com/paceholder/nodeeditor) library. To use it, install NodeEditor.; check option in CMake: SOFA_BUILD_NODEGRAPH; and until better setup, manually set: ; - NODEEDITOR_INCLUDE_PATH to NodeEditor-install/include; - NODEEDITOR_LIBRARY_RELEASE to NodeEditor-install/lib/nodes.lib. DataGraph can be displayed in top menu: Edit->Data Graph... ![graphData_04](https://user-images.githubusercontent.com/21199245/66931696-c2e1f800-f036-11e9-91da-3f6cebcb6880.jpg); ![graphData_03](https://user-images.githubusercontent.com/21199245/66757188-e45aac80-ee9b-11e9-8065-6f379be060b4.jpg). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1187:753,message,message,753,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187,1,['message'],['message']
Integrability,"Wait for #4058 to be merged to solve the failure. [ci-depends-on https://github.com/sofa-framework/ManifoldTopologies/pull/7]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4065:54,depend,depends-on,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4065,1,['depend'],['depends-on']
Integrability,Warning EXTERMINATOR .. or almost !; I also created a dedicated issue ( #1166 ) on deprecated to remove at v19.12 release ! Get ready for the coding sprint !. Log of important changes:; - ImageTypes: update use of constant indice; - BarycentricMapper : use of new templates on friend class; - AttachConstraint : Add delegate function instead of using twice the same name. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1167:471,message,message,471,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1167,1,['message'],['message']
Integrability,"Warning specific to windows fixed for function specialization (class templated, set the specialization in cpp), fix some headers (Mapping & MultiMapping). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/738:254,message,message,254,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/738,1,['message'],['message']
Integrability,Warnings flags were declared in add_definitions (instead of cxx_flags). It is messing with projects using the new CUDA language feat. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1368:233,message,message,233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1368,1,['message'],['message']
Integrability,Warnings were due to unused function and overwriting function (clang). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/229:170,message,message,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/229,1,['message'],['message']
Integrability,"Warns the user when a non-symmetric matrix is produced by a non-linear mapping while a symmetric linear solver is used. The message looks like:; ```; [ERROR] [RigidMapping(RigidMapping1)] The geometric stiffness of this mapping is a non-symmetric matrix. It means a linear solver supporting non-symmetric matrices must be used, but it is not the case here. To fix your scene, you have two options: 1) Use a linear solver supporting non-symmetric matrices, 2) stabilize the geometric stiffness with the Data 'geometricStiffness' set to 'Stabilized'; ```. Note that the detection was already considered in the past through a `bool` in the `MechanicalParams`, but not used at all. Note that even if a linear system supporting non-symmetric matrices is used, the exact geometric stiffness computed in `RigidMapping` leads to large stability issues in `examples/Component/LinearSystem/MatrixLinearSystem.scn`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3838:124,message,message,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3838,1,['message'],['message']
Integrability,"We chould have an intermediate level in the inheritance hierarchye or we can have interfaces as well as agregation. . Here is an example with both interface & agregation approache to factor the data logics. It is a bit long because I wanted it to be self compiling. ; ```cpp; #include <iostream>; #include <vector>; class Data; {; public:; std::string name;; std::string value;; };. class BaseObject; {; public:; BaseObject() {; initData(&d_name, ""name"");; }. virtual void init() {}. void initData(Data* d, const std::string& name); {; d->name = name;; m_datas.push_back(d);; }. void dump(); {; std::cout << ""== ("" << d_name.name << "") =="" << std::endl;; for(auto& data : m_datas); std::cout << ""Data: "" << data->name << std::endl;; }. private:; std::vector<Data*> m_datas;; Data d_name;; };. class ForceField : public BaseObject; {; public:; ForceField() {; initData(&d_mstate, ""mstate"");; }; Data d_mstate;; };. //// Data related object...; class TopologicalLink; {; public:; TopologicalLink(BaseObject* self); {; self->initData(&d_topology, ""topology"");; }; Data d_topology;. private:; TopologicalLink(const TopologicalLink&) {};. };. class GroupOfRelatedData; {; public:; GroupOfRelatedData(BaseObject* self); {; self->initData(&d_a, ""a"");; self->initData(&d_b, ""b"");; self->initData(&d_c, ""c"");; }. void parse(); {. }. void init(); {; if(d_a.value == ""well"" and d_c.value == ""not so""); d_b.value = ""ok"";; }. Data d_a;; Data d_b;; Data d_c;; };. ///// Sofa components; class TetrahedronFEMForceField :; public ForceField,; public TopologicalLink; {; public:; TetrahedronFEMForceField() : TopologicalLink(this); {; initData(&d_youngModulus, ""youngModulus"");; }. Data d_youngModulus;; };. class SuperFEM :; public ForceField,; public TopologicalLink; {; public:; SuperFEM() : TopologicalLink(this), dataGroup(this); {; initData(&d_youngModulus, ""youngModulus"");; initData(&d_oldModulus, ""oldModulus"");; }. void init() override; {; dataGroup.init();; }. Data d_youngModulus;; Data d_oldModulus;. Grou",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178:82,interface,interfaces,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178,2,['interface'],"['interface', 'interfaces']"
Integrability,We definitely need to get timing and position regression feedback from (at least a few) scene tests. Already existing tools for position regressions:; - applications/plugins/SofaTest/SofaTest_test/Regression_test; - applications/projects/sofaVerification. TODO:; - [x] Choose one tool to update and reactivate; - [ ] Add execution time measure; - [x] Integrate it in CI,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/801:351,Integrat,Integrate,351,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/801,1,['Integrat'],['Integrate']
Integrability,We had some errors while compiling sofa 17.06 on macos with Apple LLVM 9.0.; This was caused by two oddly inlined functions. So here's a PR removing the inline declaration.; We hope it'll be useful. Cheers.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/444:307,message,message,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/444,1,['message'],['message']
Integrability,We have a branch with our work on https://github.com/mimesis-inria/sofa/tree/wip_pythonAdvancedTimer; We try to create a class which wrap the advanced timer and that can be binded using Python... without success so far.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316434058:133,wrap,wrap,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316434058,1,['wrap'],['wrap']
Integrability,"We need to define a better design to handle cross-dependency in the internal update of components (now using the callback mechanism introduced in #1406).; Cross-dependency between data (such as massDensity vs totalMass) is not currently well handled. Then, we could proceed to the deprecation of the doUpdateInternal see #3900",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2173:50,depend,dependency,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173,2,['depend'],['dependency']
Integrability,We need to:; - first locating csparse and newmat in SOFA; - move the dependency back into the appropriate plugins. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1309:69,depend,dependency,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1309,1,['depend'],['dependency']
Integrability,We ran into some more compile errors on windows using MSVC 2015. libQGLViewer wouldn't compile without those missing headers. Here's a quick fix but you might want to update libQGLViewer to the latest version (2.7.0). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/461:317,message,message,317,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/461,1,['message'],['message']
Integrability,"We tested this scene in debug and release, and both displays a warning message.; The warning message is consistent because it use a default template (aka double). Here is a log on debug :; ` [WARNING] [MergeVectors(merge)] Template <tartempion> incorrect, used <double>; `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188:71,message,message,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188,2,['message'],['message']
Integrability,We would like to get an Eigen sparse matrix wrapper (e.g. the one from Caribou plugin).; SOFA already contains such wrappers: EigenMatrix and EigenVector. Existing Eigen wrapper are also available in Caribou: it could be copied in SOFA (sofa.linearalgebra) to have this unique wrapper. Would you mind @jnbrunet ?. **TODO**; - What does the existing wrapper today? and What are the differences? → issue ??,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2474:44,wrap,wrapper,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2474,5,['wrap'],"['wrapper', 'wrappers']"
Integrability,"Well after a quick look in the scene you provided:. I'm not surprised the BarycentricMapping is not able to work . . Let's me explain: ; - Object.DoFs is of type Rigid3d; - Object.Mechanical model.collisionDofs is of type Vec3d. What your are specifying by setting the input & output field of BarycentricMapping is that you are driving the collisionDofs(type Vec3d) from the one from the one of type Dofs(type Rigid3). So the corresponding mapping should be Rigid3d, Vec3d (an not Vec3d, Rigid3d). ; The possible available templates shows that this is not supposed to work, because a BarycentricMapping can only have Vec3 as input. Overriding the template values with one that exists in BarycentricMapping will not work because this will lead to a mismatch between the input/output types and thes type manually set in the template. . Now about the BeamLinearMapping...the situation is a bit different. There is a valid template from Rigid3 to Vec3. This is why:; ```xml; <BeamLinearMapping template=""Rigid3d,Vec3d""/>; ```; And; ```xml; <BeamLinearMapping""/>; ```; Work the same. ; You get an error in your case because there is a typo ""@collisionDOFs"" instead of ""@collisionDoFs"".; ; Now I have no idea why the BeamLinearMapping is not working as you expect:; - maybe there is a real issue there ? . NB to anyone:; It would be nice to have PRs to improve the error messages as they are mis-leading.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297:1365,message,messages,1365,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297,1,['message'],['messages']
Integrability,"Well, . If I had to choose between a new release with no new features and post-poning the release by 15 days I would definitely prefer the release to be post-poned. . The general idea is that plugins that are tagged experimental and does not change the existing behavior should be integrated... :) ; And I would dream to see people making extra effort to have that happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245:281,integrat,integrated,281,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245,1,['integrat'],['integrated']
Integrability,"Well, the message sounded like ""you have to add an epsilon value"" 🙄 . I let @raffaellatrivisonne do her job here for now on... good luck",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338692184:10,message,message,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338692184,1,['message'],['message']
Integrability,"Well, today the long name is the returned string. And it does not depend on this PR. Look at the unit tests I added:. ```cpp; EXPECT_EQ(sofa::defaulttype::DataTypeName<float>::name(), ""f"");; const auto object = sofa::core::objectmodel::New<DefaultTemplate1<float> >();; EXPECT_EQ(object->getTemplateName(), ""float"");; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3461#issuecomment-1307402013:66,depend,depend,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3461#issuecomment-1307402013,1,['depend'],['depend']
Integrability,"What I would suggest :; 1. add big visible warnings generated in load() or parse() if `filename` is not empty, stating that this direct loading feature is deprecated as it is redundant with the `MeshXyzLoader` components and will be removed SOON. Bonus point if the warning message show the equivalent xml or python syntax to instantiate the corresponding component and link it.; 2. add an entry in the changelog saying this is now deprecated and will be removed SOON; 3. wait about a year; 4. then finally remove both these methods and the associated `sofa::helper::io::*` classes. It's long in calendar time, but quick and easy in term of code changes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546:274,message,message,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546,1,['message'],['message']
Integrability,What happens if you forget the required plugins in the ci-dependent PRs?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2371015362:58,depend,dependent,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2371015362,1,['depend'],['dependent']
Integrability,"When I configure the source sofa/src in cmake, the error is as:; ![Cmake_error](https://user-images.githubusercontent.com/22396672/93750818-b135a700-fc2e-11ea-996d-ac6cf1acb4df.png). CMake Error at CMakeLists.txt:121 (message):; Boost (1.54.0 or higher) is mandatory. Note that Boost autodetection on Windows was removed. Please follow CMake documentation to find Boost on your system. Hint: set BOOST_ROOT to your Boost location. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1494:218,message,message,218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1494,1,['message'],['message']
Integrability,When I have free time but cannot be concentrated I do trivial 'cleaning' changes resulting in this kind of PR where I replaced the std::cout by msg_info. CHANGELOG for @hugtalbot :; Trivial replacement of std::cout by msg_info; - [SofaUserInteraction] ; - [SofaValidation]; - [SofaVolumetricData]; - [SofaOpenGl]; - [SofaNonUniformFem]; - [SofaPython]; - [SofaSparseSolver]; - [SofaSphFluid]; - [SofaTopology]; - [SofaUserInteraction]. I also replaced this code pattern:; ```cpp; #ifndef NDEBUG; std::cout << blahblah; #endif; ```. into this pattern:; ```cpp; dmsg_info() << ; ....; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/255:687,message,message,687,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/255,1,['message'],['message']
Integrability,When a message does not have an 'suggestion' text then sofa will; crash. Because of Index out of bound.; This PR fix that.; Fixes #491 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/479:7,message,message,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/479,2,['message'],['message']
Integrability,"When a texture cannot be loaded the OglModel will crash. This PR fix that. ; As the image loader are now ""optional"" through CImgPlugin. . NB: I cannot prevent myself to clean a bit the commented code because I; cannot do bug tracking in the middle of the mess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/474:360,message,message,360,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/474,1,['message'],['message']
Integrability,"When addChild, removeChild, addObject, removeObject etc. are public. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1470:168,message,message,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1470,1,['message'],['message']
Integrability,"When an imported module is modified, the sofa app needs to be closed and launched again so the sofa-python interpreter integrates the modifications.; How to force reloading imported modules so any modification can be integrated when reloading the scene?; (right now, the reload works for modified main scene file, but is always using the original module code)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/193:119,integrat,integrates,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193,2,['integrat'],"['integrated', 'integrates']"
Integrability,"When compiling a project/plugin with c++17, it fails due to std::binder used in Sofa and Eigen. This functionality was depreciated in c++11 and was removed in c++17 (lambda expressions are now the cool way to do this). This PR removes the use of std::binder and, as a side effect, brings us closer to be able to compile Sofa with c++ > 11 if we wish to do some modern c++ someday :-) . Small note: The version of Eigen used in Sofa is a little bit old (2015)... Might be a good idea to add this in the Sofa's to do list. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/908:620,message,message,620,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/908,1,['message'],['message']
Integrability,"When compiling image, you might now have an issue when updating since DiffusionSolver has been made a separate plugin. This PR provides a warning for the users. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1067:260,message,message,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1067,1,['message'],['message']
Integrability,"When doing `make install`, the RPATH of the libraries is set to ""../lib:$ORIGIN/../lib:$$ORIGIN/../lib"", and does not include the path to its relocated dependencies:. ```; $ ./bin/runSofa; ./runSofa: error while loading shared libraries: libSofaValidation.so.1.0: cannot open shared object file: No such file or directory; ```. ```; $ find . -name libSofaValidation.so.1.0; ./plugins/SofaValidation/lib/libSofaValidation.so.1.0; ```. Same thing happen if we link our project to some of SOFA's core library:; ```; $ lddtree my_plugin.so; my_plugin.so; libSofaMisc.so.20.06.99 => /sofa/build/install/lib/../lib/libSofaMisc.so.20.06.99; libSofaMiscEngine.so.20.06.99 => /sofa/build/install/lib/../lib/../lib/libSofaMiscEngine.so.20.06.99; libSofaNonUniformFem.so.1.0 => not found; ```; and again.; ```; $ find . -name libSofaNonUniformFem.so.1.0; ./plugins/SofaNonUniformFem/lib/libSofaNonUniformFem.so.1.0; ```. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1395:152,depend,dependencies,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395,1,['depend'],['dependencies']
Integrability,When inheriting from BaseTest this automatically add to the test the adequate message handler so there is no need to add them manually. ; But refactoring these tests is out of the scope of the PR :) ; So it was more a comment for future work ;) . EDIT: Do you know why the windows build is failing ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209:78,message,message,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209,1,['message'],['message']
Integrability,"When making a PR, the message for developers would then be:. Thank you for your pull request!; Someone will soon check it and start the builds. Note that by submitting a contribution to SOFA and signing-off your commits (*git commit -S*), you hereby adhere to the [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco). Discussion with @dmargery",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/514:22,message,message,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/514,1,['message'],['message']
Integrability,"When new messages are received or the message log is clear the componentState is changed. ; This allows the GUI (or other component) to detect that the object has changed (because its message log grew up). . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2397:9,message,messages,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2397,3,['message'],"['message', 'messages']"
Integrability,"When sofa is compiled in debug mode, if the positions are initialized manually in the _position data attribute_ of the MechanicalObject, the later will always output an error stating that the position state vector contains a bad size. This message is called because the `MechanicalObject::init()` method calls `MechanicalObject::write(VecCoordId::position())` before setting the `vsize` member (with .`MechanicalObject::resize()`). One solution would be to first set the size accordingly to the _position data attribute_ of the MechanicalObject in the `MechanicalObject::init()` method before the `MechanicalObject::write()` is called. To reproduce the error, first compile Sofa in debug mode, and try with the following scene:; ```; <Node>; <MechanicalObject position=""0 0 -2.5 0 0 7.5 10 0 -2.5 10 0 7.5"" />; </Node>; ```; It should output something like:; `[WARNING] [MechanicalObject(mObject1)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/344:240,message,message,240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/344,1,['message'],['message']
Integrability,When solving constraints using a BaseConstraintCorrection component the function ; addComplianceInConstraintSpace compute the compliance matrix and add the contribution of the compliance matrix to the constraint solver matrix. . the goal is to split the computation of the compliance matrix (local for each deformable object) and the sum of the compliance matrix to the constraint solver (global) matrix in two different functions. - BaseConstraintCorrection::computeComplianceInConstraintSpace:; should be used to compute the compliance. This computation is independent and can be easily parallelized. - BaseConstraintCorrection::addComplianceInConstraintSpace:; should be used only to add the contribution of the compliance matrix to the constraint solver matrix. . This change is propagated to the LinearSolver class hierarchy because a ConstraintCorrection component might delegate the computation of the compliance matrix to the the LinearSolver. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/869:1051,message,message,1051,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/869,1,['message'],['message']
Integrability,When the Data texcoord is not set using a Mesh file or using a Data link from another component no mechanism is present in VisualModel to compute default UV texcoord leading to incompatible buffer size between vertices and texcoords. This PR add a method to compute default texcoords using a sphere projection. Not perfect but at least create texcoords for volumique mesh with surface mapping. Here are some results examples:. ![liver-tetra2triangle_00000001](https://user-images.githubusercontent.com/21199245/52704903-ed4c5480-2f81-11e9-894d-e6d2f74291eb.png); ![liver-tetra2triangle_00000002](https://user-images.githubusercontent.com/21199245/52704905-ef161800-2f81-11e9-9c5f-4eccabe53085.png). Mesh sphere projection used:; ![liver-tetra2triangle_00000003](https://user-images.githubusercontent.com/21199245/52707910-1f14e980-2f89-11e9-9de5-23d0f899f1d7.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/933:964,message,message,964,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/933,1,['message'],['message']
Integrability,When the parent folder of the output file of an OBJExporter does not exist : ; - a message is output like this one: [INFO] [OBJExporter(ObjExporter)] Exporting OBJ as: /path/to/my/mesh.obj; - no obj file is written. I think the user either expect : . 1. either to have an error/warning message instead of a success message; 2. or to have the parent folder(s) created properly (and silently or not) and the mesh file written as expected. I am in favor of 2. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/355:83,message,message,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/355,3,['message'],['message']
Integrability,When the source path is from the root the path is empty.; This results in returning @ instead of @/; This fix it. This fix issue #375 ; This is a reviewer friendly version of #376 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/377:281,message,message,281,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/377,1,['message'],['message']
Integrability,"When trying to serialize / desserialize custom binary data structures (non-native / non-scalar Sofa types) as byte arrays from C++ to Python, PyString_FromStirng is called, which stops the input stream at the first \0 it encounters.; PyString_FromStringAndSize retrieves the full stream instead, which is more likely to be what we want here.; @damienmarchal could you tell me what you think of this?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/416:500,message,message,500,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416,1,['message'],['message']
Integrability,"When you create a type in python, you may or may not have the properties wrapped around sofa::Data<>. In my particular case, for example, I have several types coded in C++ and exposed to python. I try to avoid using sofa::Data and just expose the properties as python properties. . When you do it this way, in SofaGUI those properties are (obviosuly) not shown. Would be nice to add a way of showing them, maybe using a callback that is added to the component or something like that.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1796:73,wrap,wrapped,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1796,1,['wrap'],['wrapped']
Integrability,"When you launch ""make install"", CMake will install external dependency binaries (such as boost and glew) into the sofa libraries directory (e.g. the build/install directory). This in turn will be hiding the system binaries when we try to link our project to Sofa, generating the following CMake warnings for every targets that depends on Sofa:. ```; Cannot generate a safe runtime search path for target MyProject; because files in some directories may conflict with libraries in implicit; directories:. runtime library [libGLEW.so.2.1] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_filesystem.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_program_options.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_thread.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_date_time.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_chrono.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_system.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_atomic.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; ```. Any good reason why we are doing this? Maybe @guparan has an idea?. I understand the use of copying dependencies when **packaging** Sofa, but not for the install command which already has the dependency installed on the system. This is polluting my projects compilation output :-). _____________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1153:60,depend,dependency,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1153,2,['depend'],"['dependency', 'depends']"
Integrability,"When your SOFA PR fails on CI somewhere in an external project, it may be because your change is breaking for that external project.; In that case, the best (and preferred) solution is that you push a fix in the external project so that when your PR is merged in SOFA, it does not fail on CI.; Here is the typical workflow for that use case. 1. You open a PR in SOFA (let's call it ""SOFA PR"").; 2. SOFA CI fails to build/test your SOFA PR because some external projects are enabled and you didn't enable them in your local tests.; 3. You realize that the failure is due to your changes.; 4. You fix the issue in the external project and open a PR (let's call it ""external PR"").; 5. You reference your external PR in the description of your SOFA PR with ; `[ci-depends-on https://github.com/<org>/<repo>/pull/<id>]`; 6. SOFA CI can now build/test your PR. It will automatically replace the external project with the ""result of the merge of your external PR"".; 7. As soon as SOFA CI is green and external PR is merged, your SOFA PR is ready to merge. This way, you do not need to touch any `ExternalProject.cmake` file in your SOFA PR :+1:. The only change in this PR consists in adding `GIT_CONFIG ""remote.origin.fetch=+refs/pull/*:refs/remotes/origin/pr/*""` to all ExternalProject.cmake files.; This change permits to have access to any commit in any pull-request (including merge commits). See [this nice cheatsheet about how to fetch PRs](https://gist.github.com/piscisaureus/3342247).; All other changes have been done [in CI scripts](https://github.com/sofa-framework/ci/blob/master/scripts/pre-builds.sh#L50-L124) and are ready to use. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1961:760,depend,depends-on,760,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961,1,['depend'],['depends-on']
Integrability,"While implementing a binding factory for Data types in SofaPython3, I realised there's no DataTypeName for the BoundingBox data type in Sofa... So here we have it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1086:263,message,message,263,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1086,1,['message'],['message']
Integrability,"While trying to understand how forcefields work... I initially noticed that there was a bad handling of cases where `stiffness.size() != indices.size()` in the RestShapeSpringsForceField and tried to improve the overall error management on this component. I ended up doing the following changes:. - Call reinit() in bwdInit; - Using componentState to set the state to invalid when necessary (no stiffness set, out of bounds indices etc & check for component state in addForce / addDForce / addKToMatrix ..); - Improvement of warning messages (IMHO); - refactor code duplication; - remove warnings by changing int -> size_t for BaseMatrix::Index (got carried away here, sorry about that). **### BREAKING because:**. - Change in behavior in specific cases:. 1. empty stiffness vector: **Before:** setting arbitrary stiffness at 100.0 for all indices ; **Now:** msg_error & invalid state. ; 2. stiffness.size() != indices.size(): **Before:** applying stiffness[0] to all indices ; **Now:** ; ```py; if len(stiffness) > len(indices): ; crop(stiffness); else if len(stiffness) == 1:; stiffness.resize(len(indices), stiffness[0]); else if len(stiffness < len(indices):; ```; Generalized to angularStiffness on Rigids. - size_t in methods signature break API compatibility. I wouldn't call this component ""clean"" after those changes though, but it's a start. As stuff still to do to improve, I see:. - Using DataTrackers to call reinit() when necessary; - get rid of bwdInit by using componentState + datatrackers to reinit component; - remove those ugly getContext to retrieve the external mstate used for rest shape, by replacing them with a data or a link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compat",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1103:533,message,messages,533,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1103,1,['message'],['messages']
Integrability,While working in interactive mode the scenechecker is executed each time the file is reloaded. This is ; not really convenient.. Thus this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/547:243,message,message,243,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/547,1,['message'],['message']
Integrability,Why not using the normal git submodule for this one?; It won't be linked to cmake config/build. Just like downloading the source code and its dependencies when you clone the repository.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252:142,depend,dependencies,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252,1,['depend'],['dependencies']
Integrability,"With Boost 1.64, at least on Mac, Multithreading build fails with the following message:; ```FAILED: applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DMultiThreading_EXPORTS -Iinclude -I../applications/plugins/MultiThreading/.. -isystem /usr/local/include -I../SofaKernel/SofaBase/../modules -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316:80,message,message,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316,1,['message'],['message']
Integrability,"With the help of @guparan with made a few :) changes to this branch. To summarize:; - we made all changes I listed above to remove dead or unrelated code; - since the messages were not very helpfull, all the remaining commits were squashed in a single one which is the contribution. cgogn is for now an external dependency and has to be checkouted manually in the extlib directory in order to compile the branch. We have to discuss a way to do it automatically (maybe an ExternalProject_Add ?). After a quick check, this proposal is compatible with the last commit of the cgogn devel branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404825559:167,message,messages,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404825559,2,"['depend', 'message']","['dependency', 'messages']"
Integrability,With the purpose to override it in a child class in a plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1444:161,message,message,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1444,1,['message'],['message']
Integrability,With this PR you can `find_package(CImgPlugin)` in an other cmake project. Quite useful since this plugin is indeed part of the *core*. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/544:235,message,message,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544,1,['message'],['message']
Integrability,"With:; - guidelines,; - symbols export (for Windows); - example of mandatory dep and optional dep in Cmake; - cleaning (pragma/nested namespace); - updated init (with data from CMake); - installable (and usable as dep); - add test mechanism (with BaseTest); - Readme as markdown. Remove useless python files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1356:408,message,message,408,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1356,1,['message'],['message']
Integrability,Work done further to a doc update:; - example scene of Newmark solver is improved; - example scene for the PointsFromIndices engine is added; - clean Newmark c++ code. FYI doc is [here](https://www.sofa-framework.org/community/doc/components/integrationscheme/newmarkimplicitsolver/); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1398:242,integrat,integrationscheme,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1398,2,"['integrat', 'message']","['integrationscheme', 'message']"
Integrability,Work of clean further to PR #625 on WriteState and also done for ReadState with:; - check on all data at init and remove unused data; - export with msg; - add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/714:265,message,message,265,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714,1,['message'],['message']
Integrability,"Wouldn't it be better if implemented in VisualStyle which is kind of our user interface instead of DisplayFlag ? ; This would also allow to use msg_error() instead of msg_error(""Blahblah)...(independently, i would say that msg_error(""String) version should always print something, unless the logging backend is not registerd).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1383854873:78,interface,interface,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1383854873,1,['interface'],['interface']
Integrability,"Wow, very old issue. Indeed CMake generation must tell you if some dependency is not satisfied. I think it has been fixed for a long time but feel free to reopen if not! Cheers :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/807#issuecomment-743072072:67,depend,dependency,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/807#issuecomment-743072072,1,['depend'],['dependency']
Integrability,"Write access (copy-less), the data counter is updated after the 'with' block; with c.position.writeable() as w:; o = numpy.ones((len(c.position), 3))) ; w += o ; w *= 2.0; ```. Wrap around types (copy-less) to typify the data fields on demand; ```python; # syntax 1; c = o.showColor.as(RGBAColor); # syntax 2; c = RGBAColor(o.showColor); c.setFromHSC(1,2,3); c.setFromHSV(1,2,3); ```. Implement your own ForceField in python:; ```python; class MyForceField(Sofa.Core.BaseForceField):; def __init__(self, *args, **kwargs):; Sofa.Core.BaseForceField.__init__(self, *args, **kwargs); ; def init(self):; self.refx = self.position.toarray().copy(). def addForce(self, m, f, x, v):; n = numpy.ones((len(self.position),1)); f = (self.refx-x) * 2 + n; ```; ; To test the binding you need to de-activate SofaPython and activate SofaPython3. ; Then; - runSimu.py to launch a sofa simulation from the command line eg: ; python3 runSimu.py mySimulation.py; - or runSofa. . General guidelines:; - Fix existing API consistency issues; - Improve the performance of the binding by supporting supporting the different python protocols (sequence, buffer+memoryview, copy-less mechanism).; - unified data access and API.; - implementation is currently done with pybind11 and cython.; - modular design. About the tools we use: ; - pybind because it is very consistent with our code base ; - cython becaues it is much more powerful and general and so we can accelerate python code by un-warping the warped object in other part of the code base. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/771:1831,protocol,protocols,1831,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771,2,"['message', 'protocol']","['message', 'protocols']"
Integrability,Wrong prebuilt dependencies version for VS2015,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/295:15,depend,dependencies,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/295,1,['depend'],['dependencies']
Integrability,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:107,message,messages,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642,10,"['Message', 'depend', 'message']","['Message', 'MessageAsTestFailure', 'depend', 'message', 'messages']"
Integrability,Yes exactly. Normally runing a simple cmake with the desired flags to activate or deactivate some plugins will be enough. All dependency are met for most of the plugins.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797:126,depend,dependency,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797,2,['depend'],['dependency']
Integrability,Yes it is: actions making changes in the repo (here a comment) are forbidden as long as it is not merged; See the end of the message: `Resource not accessible by integration`. You need to trust me :see_no_evil:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4267#issuecomment-1785524462:125,message,message,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4267#issuecomment-1785524462,2,"['integrat', 'message']","['integration', 'message']"
Integrability,"Yes, this image is supposed to be used for compilation purpose. It doesn't contain sofa itself but all the dependency required to compile sofa and use it. So you can use it to compile sofa yourself or configure your own environment to do so.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1757901544:107,depend,dependency,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1757901544,1,['depend'],['dependency']
Integrability,You can add a thumb-up (with the Add your reaction icon... in the header of the message)) then sort by reactions in the issues listing.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/27#issuecomment-254795808:80,message,message,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/27#issuecomment-254795808,1,['message'],['message']
Integrability,"You should not have created a SofaGuiConfig.cmake.in in `sofa/gui/qt`. This file already exists and is in `<sofa_root>/SofaGui`. See my answer to your 2nd question below. > @guparan here it is... Not 100% sure of what I did.; > Is it:; > `if(SOFAGUIQT_HAVE_NODEEDITOR)` or `if (SOFAGUIQT_ENABLE_NODEGRAPH)` ?. It's `if(SOFAGUIQT_HAVE_NODEEDITOR)` . > just another question, in your tuto why is there ZLIB dependency SofaGeneral/SofaGeneralConfig.cmake.in and not in SofaGeneralLoader/SofaGeneralLoaderConfig.cmake.in ?. Because, from CMake point of view, SofaGeneral is a package and SofaGeneralLoader is not (it's only a target). ; A CMake package is something that can be loaded with `find_package` and that defines targets (most of the time those targets are libraries to link with `target_link_libraries`).; The XXXConfig.cmake.in file defines what the XXX package must do when someone calls `find_package(XXX)`. Typically, it will `find_package` the packages needed by it's own targets. Otherwise, at configure step, CMake will see that a target's dependency cannot be found for this package. See #1198 as example. In SOFA, the packages are: ; - the 8 main packages: SofaFramework, SofaSimulation, SofaBase, SofaCommon, SofaGeneral, SofaAdvanced, SofaMisc, SofaGui.; - the plugins; - the ""pluginized"" modules (targets that have become packages)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310:405,depend,dependency,405,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310,2,['depend'],['dependency']
Integrability,You should not put a branch name in GIT_TAG.; Now SOFA master branch depends on SofaPython3. We don't want that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820394921:69,depend,depends,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820394921,1,['depend'],['depends']
Integrability,"You weren't there this morning @marques-bruno but if your proposal is both :. - specifying in a descriptive way the type of numerical integration method; - the inheritance issue. and I think it does. We should go for it. I did not know the OptionsGroup class.; If not, we keep and merge Hervé's work. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361:134,integrat,integration,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361,1,['integrat'],['integration']
Integrability,"[All] CLEAN tests, use CMake weak dependencies",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1886:34,depend,dependencies,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1886,1,['depend'],['dependencies']
Integrability,[All] Changed message for scene check,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4324:14,message,message,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4324,1,['message'],['message']
Integrability,[All] FIX build without SofaPython soft dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1829:40,depend,dependencies,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1829,1,['depend'],['dependencies']
Integrability,[All] Improve extlibs integration,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1137:22,integrat,integration,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1137,1,['integrat'],['integration']
Integrability,[All] Overridden 'canCreate' methods should always log an error message when they fail,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1294:64,message,message,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1294,1,['message'],['message']
Integrability,[All] Remove some trivial dependencies on SofaBaseTopology,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2449:26,depend,dependencies,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2449,1,['depend'],['dependencies']
Integrability,[All] uniformize epsilons in Sofa framework fix issues 799 #STC7 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1049:166,message,message,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1049,1,['message'],['message']
Integrability,[Backport] Small fix: removed debug message for Transform *= operator (#1732),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1741:36,message,message,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1741,1,['message'],['message']
Integrability,[CImgPlugin] Add Threads dependency in Cmake,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2302:25,depend,dependency,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2302,1,['depend'],['dependency']
Integrability,[CImgPlugin] CLEAN dependencies in CMakeLists,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1651:19,depend,dependencies,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1651,1,['depend'],['dependencies']
Integrability,[CImgPlugin] Minimize plugin dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2318:29,depend,dependencies,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2318,1,['depend'],['dependencies']
Integrability,[CMake] Add SofaNonUniformFem to the dependencies of SofaMisc,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1384:37,depend,dependencies,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1384,1,['depend'],['dependencies']
Integrability,[CMake] FIX Threads dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2511:20,depend,dependency,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2511,1,['depend'],['dependency']
Integrability,[Cmake] Update warning replacement message for deprecated macro sofa_add_XX,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3611:35,message,message,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3611,1,['message'],['message']
Integrability,[Collision] Optimization: it prevents the normals of the triangles to be recomputed everytime a topological change happens.; The normals of the triangles are computed only once after all the topology changes occur (on the topology::ENDING_EVENT). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/839:346,message,message,346,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/839,1,['message'],['message']
Integrability,[Collision] Refactor the DetectionOutputVector interface and its impementation TDetectionOutputVector,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/965:47,interface,interface,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965,1,['interface'],['interface']
Integrability,[Common] Add message to make the fetch mechanism less hidden,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4310:13,message,message,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4310,1,['message'],['message']
Integrability,[Config] CMake: support interface-type target for install macro,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4356:24,interface,interface-type,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4356,1,['interface'],['interface-type']
Integrability,[Config] Change type of CMake message when adding a module,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3381:30,message,message,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3381,1,['message'],['message']
Integrability,[Config] Integrate Tracy profiler,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4182:9,Integrat,Integrate,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4182,1,['Integrat'],['Integrate']
Integrability,[Constraint.Lagrangian] Add messages when no compliance is given,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3858:28,message,messages,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3858,1,['message'],['messages']
Integrability,"[Core, LinearSolver.Direct] Introduce PartialLinearSolver Interface",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241:58,Interface,Interface,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241,1,['Interface'],['Interface']
Integrability,[Core.Topology] Fix info message when Topology given to topologyHandler is not dynamic,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3142:25,message,message,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3142,1,['message'],['message']
Integrability,[Core] Replace non-utf8 chars by special char with error message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4900:57,message,message,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4900,1,['message'],['message']
Integrability,[Core] VecId: set correct message for the deleted function holonomicC,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4120:26,message,message,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4120,1,['message'],['message']
Integrability,"[ERROR]&nbsp; &nbsp;[SofaPython3::SceneLoader] Unable to completely load the scene from file 'D:/DefrostSofaBundle_win64_python3.8_v22.06.00-beta4/DefrostSofaBundle_win64_python3.8_v22.06.00-beta4/plugins/BeamAdapter/examples/python3/Cochlear-Implant-Insertion/cathter.py'.; Python exception:; &nbsp; ValueError: Object type Edge2QuadTopologicalMapping<&gt; was not created; The object is in the factory but cannot be created.; Requested template : None; Used template&nbsp; &nbsp; &nbsp; : None; Reason(s)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : Data attribute 'input' does not point to a valid mesh topology and none can be found in the parent node context. Thank you for your help. I found the following errors after following your reply. How to solve this problem?. 方得始终; ***@***.***. &nbsp;. ------------------&nbsp;原始邮件&nbsp;------------------; 发件人: ""sofa-framework/sofa"" ***@***.***&gt;;; 发送时间:&nbsp;2022年11月8日(星期二) 晚上7:11; ***@***.***&gt;;; ***@***.******@***.***&gt;;; 主题:&nbsp;Re: [sofa-framework/sofa] [ERROR] [WireRestShape(catheterRestShape)] EdgeSetController has no binding EdgeSetTopologyModifier. (Issue #3463). ; Hi,; ; you need to add a EdgeSetTopologyModifier in your first object:; topoLines_cath.addObject('EdgeSetTopologyModifier', name='meshLinesModif'); ; Hope it helps.; ; —; Reply to this email directly, view it on GitHub, or unsubscribe.; You are receiving this because you authored the thread.Message ID: ***@***.***&gt;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3463#issuecomment-1307081793:1419,Message,Message,1419,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3463#issuecomment-1307081793,1,['Message'],['Message']
Integrability,[FEM.Elastic] Fix typo in error message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4062:32,message,message,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4062,1,['message'],['message']
Integrability,[GUI.Common] Cmake: Fix message when searching for Sofa.GL,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3549:24,message,message,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3549,1,['message'],['message']
Integrability,[GUI.Qt] Redirect Qt messages to the SOFA output stream,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3101:21,message,messages,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3101,1,['message'],['messages']
Integrability,[GitHub] Fix PR messages not properly sent,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4475:16,message,messages,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4475,1,['message'],['messages']
Integrability,[GitHub] Fix python dependencies in Actions,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5061:20,depend,dependencies,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5061,1,['depend'],['dependencies']
Integrability,[Gui][HeadlessRecorder]Remove avcodec dependency in HeadlessRecorder.h,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/752:38,depend,dependency,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/752,1,['depend'],['dependency']
Integrability,[Helper] Improve text message for users in ComponentChange,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3913:22,message,message,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3913,1,['message'],['message']
Integrability,[Helper] PluginManager: testing loading a plugin with a dependency on an other plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4464:56,depend,dependency,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4464,1,['depend'],['dependency']
Integrability,[IO.Mesh] More debug info in the error message in MeshSTLLoader,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3949:39,message,message,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3949,1,['message'],['message']
Integrability,[LinearSolver.Direct] Fix metis dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4450:32,depend,dependency,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4450,1,['depend'],['dependency']
Integrability,[LinearSolver.Direct] More details in error message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4060:44,message,message,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4060,1,['message'],['message']
Integrability,[LinearSolver.Direct] Move advice message into parse method,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3029:34,message,message,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3029,1,['message'],['message']
Integrability,[LinearSolver] SparseLDLSolver: template warning to info message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2969:57,message,message,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2969,1,['message'],['message']
Integrability,[LinearSystem.Direct] More details in the error message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3985:48,message,message,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3985,1,['message'],['message']
Integrability,[LinearSystem.Direct] Remove metis dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4588:35,depend,dependency,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4588,1,['depend'],['dependency']
Integrability,[Mapping/tests] Remove dependency on SceneCreator,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3955:23,depend,dependency,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955,1,['depend'],['dependency']
Integrability,[MechanicalLoad] Break data cross-dependency in CFF,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3936:34,depend,dependency,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3936,1,['depend'],['dependency']
Integrability,[MechanicalLoad] Remove the data force in ConstantFF and solves circular dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4019:73,depend,dependency,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4019,1,['depend'],['dependency']
Integrability,[Modeler] Make private the tinyxml dependence,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1272:35,depend,dependence,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1272,1,['depend'],['dependence']
Integrability,[MultiThreading] Add a virtual function in TaskScheduler interface,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/934:57,interface,interface,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/934,1,['interface'],['interface']
Integrability,[MultiThreading] TaskAllocator Interface,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/906:31,Interface,Interface,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/906,1,['Interface'],['Interface']
Integrability,[MultiThreading] TaskScheduler Interface,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/775:31,Interface,Interface,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/775,1,['Interface'],['Interface']
Integrability,[MultiThreading] TaskScheduler Interface. Decompose the TaskScheduler in an abstract class and a default implementation.; DefaultTaskScheduler provides a default implementation of the TaskScheduler interface. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/774:31,Interface,Interface,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/774,3,"['Interface', 'interface', 'message']","['Interface', 'interface', 'message']"
Integrability,[MultiThreading] TaskScheduler Interface. Decompose the TaskScheduler in an abstract class and a default implementation.; TaskSchedulerDefault class provides a default implementation of the TaskScheduler interface. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/775:31,Interface,Interface,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/775,3,"['Interface', 'interface', 'message']","['Interface', 'interface', 'message']"
Integrability,[MultiThreading] removed the boost thread dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/701:42,depend,dependency,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701,1,['depend'],['dependency']
Integrability,[Plugins] Cyclic dependency between SofaDistanceGrid and SofaMiscCollision,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1897:17,depend,dependency,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1897,1,['depend'],['dependency']
Integrability,[SceneChecking] MissingRequiredPlugins: Adapts messages for xml and python users,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3033:47,message,messages,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033,1,['message'],['messages']
Integrability,[Simulation.Core] Special message if extension is Python,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2998:26,message,message,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2998,1,['message'],['message']
Integrability,[Sofa.LinearAlgebra] Compressed property in CRS matrix depends on tmp vector,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2894:55,depend,depends,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2894,1,['depend'],['depends']
Integrability,[Sofa.LinearAlgebra] Introduce Eigen wrapper for sparse matrices,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2794:37,wrap,wrapper,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2794,1,['wrap'],['wrapper']
Integrability,[SofaBaseCollision] Fix simulation dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1768:35,depend,dependency,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1768,1,['depend'],['dependency']
Integrability,[SofaBaseCollision] Remove dependencies on BaseIntTool,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2081:27,depend,dependencies,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2081,1,['depend'],['dependencies']
Integrability,[SofaBaseLinearSolver] Fix message in MatrixLinearSolver,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2781:27,message,message,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2781,1,['message'],['message']
Integrability,[SofaBaseMechanics] BarycentricMapping: Remove avoidable Sofa.BaseTopology dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2403:75,depend,dependencies,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2403,1,['depend'],['dependencies']
Integrability,[SofaBaseTopology] Clearer error message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2638:33,message,message,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2638,1,['message'],['message']
Integrability,[SofaBaseTopology] Improve TopologyDataHandler message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2152:47,message,message,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2152,1,['message'],['message']
Integrability,[SofaBaseTopology] Pr change api numerical integration,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936:43,integrat,integration,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936,1,['integrat'],['integration']
Integrability,[SofaBoundaryCondition][SofaConstraint] FIX dependency and export symbols,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2255:44,depend,dependency,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2255,1,['depend'],['dependency']
Integrability,[SofaCUDA] Generalize the use of MessageDispatcher in SofaCUDA,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4430:33,Message,MessageDispatcher,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4430,1,['Message'],['MessageDispatcher']
Integrability,[SofaCUDA] Move cuda GUI dependent code,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4227:25,depend,dependent,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4227,1,['depend'],['dependent']
Integrability,[SofaComponentAll] FIX build with disabled dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1940:43,depend,dependencies,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1940,1,['depend'],['dependencies']
Integrability,[SofaConstraint] Remove dependency on TetrahedronFEMForcefield,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2250:24,depend,dependency,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2250,1,['depend'],['dependency']
Integrability,[SofaConstraint] Set the use of integration factor true by default,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1369:32,integrat,integration,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369,1,['integrat'],['integration']
Integrability,[SofaCore] Clean dependencies to SimulationCore,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1928:17,depend,dependencies,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1928,1,['depend'],['dependencies']
Integrability,[SofaCore] Clearer message when template parameter is not compatible with current context,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2262:19,message,message,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2262,1,['message'],['message']
Integrability,"[SofaCore] Remove ""depend"" from Node",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1763:19,depend,depend,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1763,1,['depend'],['depend']
Integrability,[SofaCore] Required data msg now depends on existing default value,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2527:33,depend,depends,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2527,1,['depend'],['depends']
Integrability,[SofaDefaultType] Introduce test interface for BaseMatrix,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2280:33,interface,interface,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2280,1,['interface'],['interface']
Integrability,[SofaEigen2Solver] Limit display of deprecation message in CMake,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2386:48,message,message,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2386,1,['message'],['message']
Integrability,[SofaExporter] FIX message in VTKExporter with new API and activate printLog,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/553:19,message,message,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/553,1,['message'],['message']
Integrability,[SofaExporter] Modularize (+minor dependency cleaning),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915:34,depend,dependency,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915,1,['depend'],['dependency']
Integrability,[SofaExporter] Remove SofaBaseVisual dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2039:37,depend,dependency,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2039,1,['depend'],['dependency']
Integrability,[SofaGUI] Split OpenGL and Qt dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1121:30,depend,dependency,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1121,1,['depend'],['dependency']
Integrability,[SofaGeneralObjectInteraction] Fix dependencies in cmake,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2659:35,depend,dependencies,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2659,1,['depend'],['dependencies']
Integrability,[SofaGraphComponent] Clean format of RequiredPlugin message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2111:52,message,message,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2111,1,['message'],['message']
Integrability,[SofaGraphComponent] Fix message for RequiredPlugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2093:25,message,message,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2093,1,['message'],['message']
Integrability,[SofaHelper] Clean dependencies to defaulttype,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1915:19,depend,dependencies,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1915,1,['depend'],['dependencies']
Integrability,[SofaHelper] Fix CMake config with SOFA_NO_OPENGL and dependency package (Windows),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1650:54,depend,dependency,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1650,1,['depend'],['dependency']
Integrability,[SofaHelper] Quater does not depend on Vec and Mat from defaulttype anymore,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1518:29,depend,depend,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1518,1,['depend'],['depend']
Integrability,[SofaHelper] Remove Datatypeinfo dependency in vector(_device).h,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1797:33,depend,dependency,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1797,1,['depend'],['dependency']
Integrability,[SofaHelper] Remove OpenGL dependency in vector_device,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1646:27,depend,dependency,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1646,1,['depend'],['dependency']
Integrability,[SofaHelper] Remove SofaSimulationCore dependency from AdvancedTimer,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1770:39,depend,dependency,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1770,1,['depend'],['dependency']
Integrability,[SofaHelper] Remove boost::thread dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2264:34,depend,dependency,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2264,1,['depend'],['dependency']
Integrability,[SofaHelper] Remove some SofaCore dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1810:34,depend,dependencies,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1810,1,['depend'],['dependencies']
Integrability,[SofaKernel] Activates thread-safetiness on MessageDispatcher.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/257:44,Message,MessageDispatcher,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257,1,['Message'],['MessageDispatcher']
Integrability,[SofaKernel] Add PerComponentLoggingMessageHandler to keep and history of messages.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106:74,message,messages,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106,1,['message'],['messages']
Integrability,[SofaKernel] Change d_componentState when a message is received.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2397:44,message,message,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2397,1,['message'],['message']
Integrability,[SofaKernel] Clean API message for Image loading,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/503:23,message,message,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503,1,['message'],['message']
Integrability,[SofaKernel] FIX deprecation message related to template types.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/939:29,message,message,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939,1,['message'],['message']
Integrability,[SofaKernel] Fix minor bug in BoxROI and add warning message in RestShapeSpringsForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1391:53,message,message,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1391,1,['message'],['message']
Integrability,[SofaKernel] Fix the integration scheme for Quaternion,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/172:21,integrat,integration,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172,1,['integrat'],['integration']
Integrability,[SofaKernel] Improve File:line info in error message (for python and xml error reporting),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/314:45,message,message,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314,1,['message'],['message']
Integrability,[SofaKernel] Improve error message when a component cannot be created.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1332:27,message,message,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1332,1,['message'],['message']
Integrability,[SofaKernel] Improve the object factory message for duplicated entries,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1652:40,message,message,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1652,1,['message'],['message']
Integrability,[SofaKernel] Remove SofaTest dependency from framework_test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/455:29,depend,dependency,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455,1,['depend'],['dependency']
Integrability,[SofaKernel] Remove X11 dependency when SOFA_NO_OPENGL is enabled.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1370:24,depend,dependency,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1370,1,['depend'],['dependency']
Integrability,[SofaKernel] Remove boost::locale dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1033:34,depend,dependency,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1033,1,['depend'],['dependency']
Integrability,[SofaKernel] Remove some dependencies from SofaHelper to SofaCore,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1686:25,depend,dependencies,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1686,1,['depend'],['dependencies']
Integrability,[SofaKernel] Write template list in error message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2207:42,message,message,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2207,1,['message'],['message']
Integrability,[SofaKernel] re-open PR #330 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/332:130,message,message,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332,1,['message'],['message']
Integrability,[SofaKernel][SofaGui] Move Boost::program_option and remove Boost::system dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1848:74,depend,dependencies,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1848,1,['depend'],['dependencies']
Integrability,[SofaLoader] FIX Circular dependency in the update of MeshObjLoader,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2201:26,depend,dependency,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2201,1,['depend'],['dependency']
Integrability,[SofaMatrix] Reduce dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2768:20,depend,dependency,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2768,1,['depend'],['dependency']
Integrability,[SofaMatrix] Remove CImgPlugin dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4112:31,depend,dependency,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4112,1,['depend'],['dependency']
Integrability,[SofaMatrix] Update plugin CMakeLists to avoid strong dependency on Qt,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3423:54,depend,dependency,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3423,1,['depend'],['dependency']
Integrability,"[SofaMiscFem, SofaSimulationGraph] FIX dependencies",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/588:39,depend,dependencies,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/588,1,['depend'],['dependencies']
Integrability,[SofaMiscForceField] Fix error while trying to compile a plugin depending on SofaGuiQt,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2707:64,depend,depending,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2707,1,['depend'],['depending']
Integrability,"[SofaPhysicsAPI] Add methods and C bindings to load SOFA ini file, plugins and messageHandler",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3540:79,message,messageHandler,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3540,1,['message'],['messageHandler']
Integrability,[SofaPython] CLEAN PythonEnvironment info messages,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1835:42,message,messages,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1835,1,['message'],['messages']
Integrability,[SofaPython] Regroup dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1875:21,depend,dependencies,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875,1,['depend'],['dependencies']
Integrability,[SofaPython] Restrict the plugin and its dependers to C++11,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1284:41,depend,dependers,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1284,1,['depend'],['dependers']
Integrability,[SofaSimulationCore] Clearer message when a linear solver is missing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2221:29,message,message,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2221,1,['message'],['message']
Integrability,[SofaSparseSolver] Clean useless dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2012:33,depend,dependencies,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2012,1,['depend'],['dependencies']
Integrability,[SofaTest] Init MessageDispatcher to prevent side effects,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/94:16,Message,MessageDispatcher,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94,1,['Message'],['MessageDispatcher']
Integrability,[SolidMechanics] TetrahedronFEMForceField: adds error message for Poisson's ratio,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2908:54,message,message,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2908,1,['message'],['message']
Integrability,[Spring] Remove unused dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3848:23,depend,dependencies,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3848,1,['depend'],['dependencies']
Integrability,[UX] Handle dependencies between data field.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/235:12,depend,dependencies,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235,2,['depend'],['dependencies']
Integrability,[VisualModel] Improve the messages when loading mesh inside VisualModel,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/778:26,message,messages,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/778,1,['message'],['messages']
Integrability,[WIP]; - I try to figure out how to fix the issue : https://github.com/sofa-framework/sofa/issues/561. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/564:202,message,message,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/564,1,['message'],['message']
Integrability,[all] Cleaning the way we handle message in Sofa.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179:33,message,message,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179,1,['message'],['message']
Integrability,[all] Externalize nlohmann_json dependency with find or fetch mechanism,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4257:32,depend,dependency,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4257,1,['depend'],['dependency']
Integrability,[all] FIX scenegraph message's icons updates,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3027:21,message,message,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3027,1,['message'],['message']
Integrability,[all] Fix tinyxml2 dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4574:19,depend,dependency,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4574,1,['depend'],['dependency']
Integrability,[all] Improve msg_api and logging of message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190:37,message,message,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190,1,['message'],['message']
Integrability,[all] Message cleaning week23,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/339:6,Message,Message,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/339,1,['Message'],['Message']
Integrability,[all] Refactor SofaTest to cut dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471:31,depend,dependencies,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471,1,['depend'],['dependencies']
Integrability,[all] Remove non needed includes in Node.h and propagate all the missing dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1460:73,depend,dependencies,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1460,1,['depend'],['dependencies']
Integrability,[all] Various small changes in error messages & bugfix from defrost branches,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/660:37,message,messages,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/660,1,['message'],['messages']
Integrability,[all] promote deprecation messages as error,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1643:26,message,messages,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1643,1,['message'],['messages']
Integrability,"[ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/106]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4651:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4651,1,['depend'],['depends-on']
Integrability,"[ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/145]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070,1,['depend'],['depends-on']
Integrability,[ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/12],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1137430935:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1137430935,1,['depend'],['depends-on']
Integrability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/22]. - One existing scene is added to the list of regression tests (`Components/forcefield/TetrahedronFEMForceField_plasticity.scn`); - One scene is introduced (`Components/forcefield/TetrahedronFEMForceField_assemble.scn`) so it is also added to the regression tests. The scene is the same than `Components/forcefield/TetrahedronFEMForceField.scn` except that the data `computeGlobalMatrix` from `TetrahedronFEMForceField` is set to `true`. Only methods `large` and `small` are introduced. The others don't support `computeGlobalMatrix=true`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2540:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2540,1,['depend'],['depends-on']
Integrability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/26]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3035:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3035,1,['depend'],['depends-on']
Integrability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/35]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3326:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3326,1,['depend'],['depends-on']
Integrability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/37]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3367:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3367,1,['depend'],['depends-on']
Integrability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/41]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3757:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3757,1,['depend'],['depends-on']
Integrability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/43]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3756:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3756,1,['depend'],['depends-on']
Integrability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/56]; [ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/125]. This PR is based on [PR #56](https://github.com/sofa-framework/Regression/pull/56) of Regression. . This PR fixes the problem of running regression tests in plugins when their references are inside of the plugin and not Regression (e.g. BeamAdapter). The idea is to have a stand alone `*.regression.tests` file that also includes the relative path of the reference folder. This is meant to be placed at the top of the reference file in a relative manne. This allows two things : ; 1. Having a stand alone file ease the process of finding the reference folder for any new comer; 2. Having a stand alone file ease the process of automatizing the retrieval of new regression test along with their reference folder without the need of modifying anything in the CI script. . Tested on my side : only two remaining regression test failing from SofaSPH. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4420:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4420,2,['depend'],['depends-on']
Integrability,"[ci-depends-on https://github.com/sofa-framework/ShapeMatchingPlugin/pull/1]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4106:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4106,1,['depend'],['depends-on']
Integrability,"[ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/309]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402,1,['depend'],['depends-on']
Integrability,[image] Fix Sofa.GUI dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3591:21,depend,dependency,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3591,1,['depend'],['dependency']
Integrability,[image] Message API is needed even if no python,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1068:8,Message,Message,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1068,1,['Message'],['Message']
Integrability,[image] Remove useless DiffusionSolver dependency,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2308:39,depend,dependency,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2308,1,['depend'],['dependency']
Integrability,[plugins] Add SimpleApi as a dependency in SofaCarving_test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4572:29,depend,dependency,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4572,1,['depend'],['dependency']
Integrability,[plugins] Externalize haptic/interface plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4575:29,interface,interface,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4575,1,['interface'],['interface']
Integrability,[runSofa] FIX UI problem related to messages.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2398:36,message,messages,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2398,1,['message'],['messages']
Integrability,[tools] Add new dependency to fix in MacOS post-install-fixup,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4749:16,depend,dependency,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4749,1,['depend'],['dependency']
Integrability,"] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] 7696 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] 7696 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] 7696 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; ```; Which indicates tthat the same loader is loading the file multiple times. With the PR it now gives:; ```; INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; ```. Depends on PR #2200 ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2201:1512,Depend,Depends,1512,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2201,1,['Depend'],['Depends']
Integrability,"_I suggest we use this issue card to track ongoing work (aka as dashboard/ChangeLog)_; Observation: Link implementation is invasive too complex, thus making SOFA respectively long to compile and hard to maintain / support. An ongoing work led by @damienmarchal aims at: ; - simplifying the Link implementation:; - avoiding the use of Traits; - split SingleLink into several cases: links between Data (DataLink), links between multiple Data (DataMultiLink?) links between BaseObject (?); - reducing massively used / included of SingleLinks. DONE:; - introduce Data Link (#1491 ); - remove duplicated SingleLink<> parentData in BaseData to ease further refactoring (#1491 ); - replace the use of the SingleLink<Data> by a DataLink class in BaseData.h (#1491 ); - remove traits code from Link.h and BaseLink.h. (#1503 ); - remove reflection code in BaseData (#1541). Also done:; - use forward declaration to reduce dependency (due to headers included in header) between modules --> cleaning code dependency graph and reducing compilation time (#1509 ); - DataContentValue : was there as DataValue, extracted from Data and renamed as DataContentValue; - PathResolver : mechanism to generalize for resolving path (parsing string, search in graph, convert in to an object), extracted from Link in order isolate it (for now reoriente towards existing SOFA functions). ______________________________________________________. **Next step** :; - refactoring the whole Link to separate SingleLink & MultiLink; - rename AbstractDataLink as BaseDataLink ?; - remove reflection mechanism inn BaseData (due to removal of SingleLink for Data). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1526:912,depend,dependency,912,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1526,2,['depend'],['dependency']
Integrability,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/340:99,message,message,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/340,43,['message'],['message']
Integrability,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] do generate LESS warnings.; - [x] do generate LESS unit test failures.; - [x] do generate LESS scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548:99,message,message,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548,1,['message'],['message']
Integrability,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/207:99,message,message,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207,1,['message'],['message']
Integrability,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/826:99,message,message,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/826,1,['message'],['message']
Integrability,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399:99,message,message,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399,6,['message'],['message']
Integrability,"__set_python_directory__ was writing a ""hard-coded"" _CMAKE_CURRENT_SOURCE_DIR/python_ path in _etc/sofa/python.d/_ instead of the provided path. ; So if your python code was located in, say, _<plugin_dir>/src/python_ instead of _<plugin_dir>/python_ the macro would write an invalid path. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/763:388,message,message,388,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/763,1,['message'],['message']
Integrability,"_development/sofa/build_release/install/plugins/SofaMiscMapping/lib/libSofaMiscMapping.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscCollision/lib/libSofaMiscCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/CImgPlugin/lib/libCImgPlugin.so; Warning: Setting a new default format with a different version or profile after the global shared context is created may cause issues with context sharing.; The constructor with a QGLFormat is deprecated, use the regular contructor instead. [WARNING] [SparseLDLSolver(SparseLDLSolver)] Template is empty; By default SparseLDLSolver uses blocks with a single double (to handle all cases of simulations).; If you are using only 3D DOFs, you may consider using blocks of Matrix3 to speedup the calculations.; If it is the case, add template=""CompressedRowSparseMatrixMat3x3d"" to this object in your scene; Otherwise, if you want to disable this message, add template=""CompressedRowSparseMatrixd"" .; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias, SceneCheckDeprecatedComponents, SceneCheckCollisionResponse]; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [WARNING] [Simulation] Default Animation Manager Loop will be used. Add DefaultAnimationLoop to the root node of scene file to remove this warning; [WARNING] [Simulation] Default Visual Manager Loop will be used. Add DefaultVisualManagerLoop to the root node of scene file to remove this warning. ########## SIG 11 - SIGSEGV: segfault ##########; sofa::helper::BackTrace::sig(int); sofa::component::forcefield::TetrahedronFEMForceField<sofa::defaulttype::StdVectorTypes<sofa::type::Vec<3u, double>, sofa::type::Vec<3u, double>, double> >::init(); sofa::simulation::InitVisitor::processNodeTopDown(sofa::simulation::Node*); sofa::si",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:35120,message,message,35120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,1,['message'],['message']
Integrability,`${CMAKE_BINARY_DIR}/bin/$<CONFIG>/` does not exist if using MSVC without Visual Studio IDE. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/451:192,message,message,192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/451,1,['message'],['message']
Integrability,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2171,message,message,2171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,13,"['Message', 'depend', 'message', 'rout']","['MessageAsTestFailure', 'depending', 'message', 'routed']"
Integrability,"`BaseOrderingMethod` is introduced as an abstract component in `Sofa.Core`. It is the base class of a new category of components. Then, a new module is introduced. In this module, the components are derived from `BaseOrderingMethod`. Therefore, its name is `Sofa.Component.LinearSolver.Ordering`. It is in `LinearSolver` because an ordering method is only used with linear solvers, more specifically sparse direct linear solvers. Only one ordering method is still in `LinearSolver.Direct`: `MetisOrderingMethod`. The goal is to move later this component in a plugin so that METIS is no longer a dependency of SOFA core. In the meantime, this method is still the preferred one for legacy reasons. Eigen-based solvers were problematic. In Eigen, everything is defined at compile-time, and it is not possible to use runtime polymorphism. Therefore, it was not possible to uncouple the solver itself from the ordering method. To comply with the new design, I introduced a factory that can be enriched in the new Metis plugin. This factory is able to register types and use runtime polymorphism using a few C++ tricks. The only concern is that the solvers in the factory will not use the algorithms from the `BaseOrderingMethod`. Instead, they use a simple string (defined in a `BaseOrderingMethod`), and its mapping to a type. This has to be registered in the initialization of the module. I tried hard to use the intelligence of the component instead of relying on a string and a factory, but the design of Eigen is not compatible. In order to not force the users to add an ordering method in their scenes, a default one is created automatically by the linear solver. It instantiates `MetisOrderingMethod` if it can find it, otherwise it's `AMDOrderingMethod`. Here are the tasks in a future PR:. 1. Create a plugin for Metis; 2. Move `MetisOrderingMethod` into this plugin; 3. Move some unit tests in this plugin; 4. Update the regression references; 5. Update `FillReducingOrdering`; 6. Remove METIS de",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4477:595,depend,dependency,595,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4477,1,['depend'],['dependency']
Integrability,"`CGLinearSolver::init()` did not call `init()` of its base class. The result is that the check of the required Data, which is in `BaseObject::init()`, is never called. `CGLinearSolver` has required Data, therefore the error never triggered when one of the required Data was not set. [ci-depends-on https://github.com/sofa-framework/Compliant/pull/4]; [ci-depends-on https://github.com/sofa-framework/Flexible/pull/3]; [ci-depends-on https://github.com/sofa-framework/SofaPython/pull/2]; [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/211]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419:287,depend,depends-on,287,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419,4,['depend'],['depends-on']
Integrability,`CentralDifferenceSolver::solve` has two ways of solving depending on the definition of `SOFA_NO_VMULTIOP`.; The benchmark could be used to decide if one of the way could be removed.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2149:57,depend,depending,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2149,1,['depend'],['depending']
Integrability,"`EdgeTopologyFrom2PointSets` is an edge topology built from 2 point sets. It computes pairs of points based on the nearest distance from one point to the other point set. It is very useful to be used in combination with springs and SubsetMultiMapping. This component may change depending on the work in #2554 . ![image](https://user-images.githubusercontent.com/10572752/147271052-fa2f162e-72f2-4cc9-816f-6f64a0307f87.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2562:278,depend,depending,278,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2562,1,['depend'],['depending']
Integrability,"`FindEigen3.cmake` is defining the cmake variable **EIGEN3_VERSION**, whereas `SofaEigen2Solver` was using **Eigen3_VERSION** to get the version of Eigen (which was; empty). Hence, **SOFAEIGEN2SOLVER_HAVE_OPENMP** was always true (given **SOFA_OPENMP**=ON), which was making the compilation fail when using Eigen > 3.2.9. Fixes #1412 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1416:435,message,message,435,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1416,1,['message'],['message']
Integrability,`MessageDispatcher::clearHandlers()` can have side effects on other tests in same suite.; See #83 for error case. SofaTest API should ensure that each test starts with a clean MessageDispatcher containing always the same set of MessageHandlers.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/94:1,Message,MessageDispatcher,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94,3,['Message'],"['MessageDispatcher', 'MessageHandlers']"
Integrability,`SofaKernel\modules\SofaHelper\..\SofaDefaultType\src\sofa/defaulttype/Ray.h(6): error C2429: language feature 'nested-namespace-definition' requires compiler flag '/std:c++17'`. Dependency on #1249 @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-598093384:179,Depend,Dependency,179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-598093384,1,['Depend'],['Dependency']
Integrability,"`SofaNonUniformFem` is required by `SofaMiscEngine`. This needed to be; propagated back to the `SofaMiscConfig.cmake` in order to let external; projects find the target. Also, since `SofaGui` calls `find_package(SofaMisc)`, `SofaNonUniformFemConfig.cmake.in`; needs to be configure before `SofaGui`. The problem was raised [here](https://www.sofa-framework.org/community/forum/topic/setting-up-out-of-tree-build-sofapython-3-plugin/#post-16198) by Sander. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1384:555,message,message,555,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1384,1,['message'],['message']
Integrability,"```cmake; find_package(Qt5 COMPONENTS Core QUIET); if (NOT Qt5Core_FOUND); if(CMAKE_VERSION VERSION_GREATER_EQUAL ""3.16""); find_package(Qt6 COMPONENTS Core CoreTools REQUIRED QUIET); if (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); message(FATAL_ERROR ""Image_gui is not compatible with Qt6 yet."") # to remove once image_gui has been updated; endif(); # else() should never happened as it would already break in Sofa.GUI.Qt; endif(); else(); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); endif(); ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4321:248,message,message,248,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4321,1,['message'],['message']
Integrability,"```cpp; /// Method to check if points stored inside the Tetrahedron, given by the tetrahedron id, are in the right order (by checking the cross products between edges).; bool checkNodeSequence(const TetraID tetraId) const;. /// Method to check if the dihedral angles of the tetrahedron have correct values (between 20 and 160 degrees).; bool checkTetrahedronDihedralAngles(const TetraID tetraId) const;. /// Method to check if Tetrahedron is elongated, meaning the longest edge > 10x min edge; bool isTetrahedronElongated(const TetraID tetraId) const;. /// Return false if one of the test method: @sa isTetrahedronElongated, @sa checkTetrahedronDihedralAngles and @sa checkNodeSequence return false for the given Tetrahedron Id.; bool checkTetrahedronValidity(const TetraID tetraId) const;. /// Will call @sa checkTetrahedronValidity for each Tetrahedron of the mesh and store the bad tetrahedron ID in @sa m_badTetraIds; const sofa::helper::vector <TetraID>& computeBadTetrahedron();; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1160:1090,message,message,1090,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1160,1,['message'],['message']
Integrability,"`boost::intrusive_ptr`is very widely used within Sofa, and is not part of `c++11`, so this part of boost has to be there, even if most other boost dependencies may be able to be removed (on thread-related classes for instance). This initial idea of miniBoost was to make it easier to handle this dependency without having to maintain OS and compiler-specific binaries of the full boost libs, in cases where we only need small header-only libraries from boost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258133408:147,depend,dependencies,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258133408,2,['depend'],"['dependencies', 'dependency']"
Integrability,"`canCreate` can be called several times by the object factory. It makes more sense to detect if the template parameter is empty in the `parse` method, i.e. once the object is instantiated. Header of the message depends whether the component name is empty or not. Remove hard coded string of the component class, as it does not apply to derived types. Remove hard coded template strings. ![image](https://user-images.githubusercontent.com/10572752/172868099-18fb7a50-ecb2-40e4-b8b4-11fdac2be70d.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3029:203,message,message,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3029,2,"['depend', 'message']","['depends', 'message']"
Integrability,"`lcp_gaussseidel_unbuilt` is called even if there is no constraints, so a test is added.; And the initial guess was writing a 0.0 outside bounds (but I dont know why this line was here). :warning: WARNING :warning:; one needs to set the responseParams to mu=0.0 also. This is really confusing and would need to refactor somewhere.; If the LCP defines mu to 0.0 but not responseParams, funny things happen (one component expects 1contact = 1 constraint and the other 1contact = 3 constraints). Moreover:; - remove (deprecate) usage of the member `_mu` which was confusing with the data `mu`; - adds two scenes to demonstrate with and without friction, and their regression tests. [ci-depends-on https://github.com/sofa-framework/Regression/pull/47]. ![lcp_friction](https://github.com/sofa-framework/sofa/assets/11028016/eba86b90-3cfc-40f6-850f-6aba720d291d); ![lcp_nofriction](https://github.com/sofa-framework/sofa/assets/11028016/fb015cd7-54c6-4347-a07e-e5c960dc609c). Benchmarks:; As friction adds two additional constraints in the matrix, then frictionless scenes are faster:; ```; caduceus:; w/: 5000 iterations done in 52.071 s ( 96.0227 FPS); w/o: 5000 iterations done in 44.6895 s ( 111.883 FPS); ```; ```; 3instruments_collis:; w: 5000 iterations done in 69.8352 s ( 71.5971 FPS); w/o: 5000 iterations done in 43.0997 s ( 116.01 FPS); ```; Obviously, this change the behavior of the scene...; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failur",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3905:683,depend,depends-on,683,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3905,1,['depend'],['depends-on']
Integrability,"`zlib` is a dependency of `libpng`, which is why it was needed up to now. But indeed it is hopefully not used for anything else inside `sofahelper`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281636038:12,depend,dependency,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281636038,1,['depend'],['dependency']
Integrability,a/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-boun,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20910,interface,interfaces-global-init,20910,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['interface'],['interfaces-global-init']
Integrability,"actions/github-script@v4 is output errors due to deprecation in actions/core:; ```; (node:1614) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.; (Use `node --trace-deprecation ...` to show where the warning was created); RequestError [HttpError]: Resource not accessible by integration; at /home/runner/work/_actions/actions/github-script/v4/dist/index.js:4662:21; at processTicksAndRejections (node:internal/process/task_queues:96:5) {; status: 403,; response: {; url: 'https://api.github.com/repos/sofa-framework/sofa/issues/4496/comments',; Error: Unhandled error: HttpError: Resource not accessible by integration; status: 403,; ```. This PR also :; - updates list of GHD reviewers with @rmolazem and @samuelmyoussef ; - updates with stargazer's name . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4522:404,integrat,integration,404,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4522,2,['integrat'],['integration']
Integrability,add SphereActiver class in SphereModel so that some controller inheriting from this class can compute sphere(s) de/activation during execution. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1259:243,message,message,243,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259,1,['message'],['message']
Integrability,add bounding box to hexaFemForceField. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/289:138,message,message,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/289,1,['message'],['message']
Integrability,added deprecation message where needed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1197:18,message,message,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1197,2,['message'],['message']
Integrability,ahah I wanted to leave a message and merge... And I just left the message.; 🥇,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705547124:25,message,message,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705547124,2,['message'],['message']
Integrability,and I also propose to update the APIChange file .. ; I did two in one (but separate commits) since it's super minor!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1414:217,message,message,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1414,1,['message'],['message']
Integrability,"and MappingGeometricStiffnessForceField. The message goes from:; ```; Object type MechanicalMatrixMapper<Vec3d,Vec3d> was not created; The object 'MechanicalMatrixMapper' is not in the factory.; This component has been MOVED from SofaGeneralAnimationLoop to Sofa.Component.Mapping.MappedMatrix since SOFA v22.06.; To continue using this component you may need to update your scene by adding; <RequiredPlugin name='Sofa.Component.Mapping.MappedMatrix'/>; ```. to:. ```; The object 'MechanicalMatrixMapper' is not in the factory.; This component has been REMOVED since SOFA v23.06 (deprecated since v23.12).; Please consider updating your scene. If this component is crucial to you please report in a GitHub issue in order to reconsider this component for future re-integration.; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4235:45,message,message,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4235,2,"['integrat', 'message']","['integration', 'message']"
Integrability,"arameter. . This is actually an interesting design gears provided fast/efficient API and an abstract one with lower performance. Nevertheless there is actually one problem with the existing implementation, the problem is that by default access to the static version (so the one that need the full inclusion of involved data types) to generate the dynamic one in the VirtualTypeInfo::get() method. As this function is needed to implement Data<T>::getAbstractTypeInfo it means that the complete static version is needed everytime and everywhere we manipulate a Data<>. To be sure the code does not fall back to DefaultTypeInfo... most of the specilization are made visible in DataTypeInfo.h where a lot of data types ""vector, rigid, map, vec, quat"". All these includes are just there to insure that in Sofa no-one will never fallback on the default dehavior. But static type info is kind of ""expert"" feature that is only usefull in few rare use cases. So polluting the complete dependency tree (and compilation unit) for a rarely use case is problematic. . So I tried to reverse all to implement an opt-in solution ... by default and for most of our code base, dynamic typeinfo (aka the one following the AbstractTypeInfo interface) are available because they only requires opaque data types. And it is only on purpose that developper can include (most of the time in a .cpp) the static typeinfos. So in short...it is abstract by default and static after a specific include. Bying abstract by default ...make that the dependencies is reduced a lot. . This PR:; - add DataTypeId<xxxx> so we can have an unique id per data type. This unique id is statically allocated and is used a way to access the DataTypeInfoRegistry in an efficiant way. ; - add a unique storage repository (DataTypeInfoRegistry). This storage is holding all the typeinfo use in Sofa. There is two way ; to be registered in the repository, the first one consist consist in explcitly adding a typeinfo instance in the storage. This is ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552:1892,depend,dependency,1892,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552,1,['depend'],['dependency']
Integrability,"are now easier to override (see extlibs/CMakelists.txt); - **One question remains**: is extlibs/SuiteSparse needed?. ### [[CMake] Install includes in package subdirs](https://github.com/sofa-framework/sofa/commit/68bef4fec16a410007163c5720a5b2ce003ac478); Install module headers in a subdirectory named after their package (SofaGeneral, SofaMisc, SofaFramework, ...). This permits to have clean include directories and thus prevents `find_package` from giving access to unwanted foreign headers.; e.g. doing `find_package(SofaFramework)` will NOT be sufficient to `#include <SofaSomething/anything.h>` (you will get a file not found error).; I think it is way easier to understand that a `find_package` is missing when `#include` fails with ""file not found"" error (at write time if you have a good IDE, at build time otherwise) than with link error (at build time).; Moreover, it will be easier to understand what package is needed for a module by navigating in the include directory.; More details in commit message. ### [[CMake] Make plugins relocatable](https://github.com/sofa-framework/sofa/commit/5b0585f9ad2884cb5462884dffd711ae4d6f2266); **THIS FEATURE IS OPTIONAL**. See the RELOCATABLE parameter of sofa_generate_package.; When building and installing SOFA with plugins - internal (in applications/plugins) or external (included with SOFA_EXTERNAL_DIRECTORIES) - the plugins will not be mixed with SOFA anymore.; Instead, they will be installed in their own directory under `<install_prefix>/plugins`.; More importantly, they will be relocatable which means they will behave like if they were built out-of-SOFA.; Principal advantage: we will be able to get redistributable plugin binaries through a classic SOFA build. . ### [Defrost binaries changes for a better install, specifically on MacOS](https://github.com/sofa-framework/sofa/commit/22f3c14a25bf879143fb58403a34d569e8ab727f); - [CMake] FIX install: SofaMiscCollision, SofaDistanceGrid, SofaImplicitField; - [CMake] FIX install on Ma",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1018:1836,message,message,1836,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1018,1,['message'],['message']
Integrability,"ary for macOS on macOS 11.2.3 (Big Sur) it fails with the error `Symbol not found: __ZN13QOpenGLWidget10paintEventEP11QPaintEvent`. Here is the full error log:; ```; Process: runSofa-20.12.01 [50874]; Path: /Applications/runSofa.app/Contents/MacOS/bin/runSofa; Identifier: org.sofa-framework.runsofa; Version: 0; Code Type: X86-64 (Native); Parent Process: ??? [1]; Responsible: runSofa-20.12.01 [50874]; User ID: 501. Date/Time: 2021-03-13 15:57:28.167 +0100; OS Version: macOS 11.2.3 (20D91); Report Version: 12; Bridge OS Version: 5.2 (18P4347); Anonymous UUID: 5C06CC90-63AA-4BB4-D9A1-27A399A7A269. Sleep/Wake UUID: EDB34D1C-5F47-4D91-82BA-9C09AEC804F8. Time Awake Since Boot: 75000 seconds; Time Since Wake: 13000 seconds. System Integrity Protection: enabled. Crashed Thread: 0. Exception Type: EXC_CRASH (SIGABRT); Exception Codes: 0x0000000000000000, 0x0000000000000000; Exception Note: EXC_CORPSE_NOTIFY. Termination Reason: DYLD, [0x4] Symbol missing. Application Specific Information:; dyld: launch, loading dependent libraries. Dyld Error Message:; Symbol not found: __ZN13QOpenGLWidget10paintEventEP11QPaintEvent; Referenced from: /Applications/runSofa.app/Contents/MacOS/bin/../../Frameworks/QtCharts.framework/QtCharts; Expected in: /usr/local/lib/QtWidgets.framework/QtWidgets; in /Applications/runSofa.app/Contents/MacOS/bin/../../Frameworks/QtCharts.framework/QtCharts. Binary Images:; 0x1078c4000 - 0x1078e7fff +runSofa (0) <F5377489-827F-342E-9B3B-C78AC8FFB70D> /Applications/runSofa.app/Contents/MacOS/bin/runSofa; 0x1078f7000 - 0x107916fff +libSofaSimulationGraph.20.12.01.dylib (0) <2B9D2482-ED40-3ECB-9B4A-7BB93AFEF219> /Applications/runSofa.app/Contents/MacOS/lib/libSofaSimulationGraph.20.12.01.dylib; 0x107957000 - 0x10796afff +libSofaGuiMain.20.12.01.dylib (0) <B93CBF60-CD3B-39C5-9B98-9DAF891408CC> /Applications/runSofa.app/Contents/MacOS/lib/libSofaGuiMain.20.12.01.dylib; 0x107979000 - 0x1079dcfff +libSofaValidation.20.12.01.dylib (0) <13078F67-B4BC-3C97-88E0-027C5FE",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:1075,depend,dependent,1075,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['depend'],['dependent']
Integrability,as discussed in meeting. So it is done. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1179:139,message,message,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1179,1,['message'],['message']
Integrability,as promised since long time ago... There is still a lot of work to do but here is a first set of tests on the topology containers.; - Do not test yet the topological changes.; - Neither more complex algo like incision.; - Nor TopologicalData... it is just the beginning !. FIX #43 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/708:382,message,message,382,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708,1,['message'],['message']
Integrability,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/408:488,message,message,488,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408,1,['message'],['message']
Integrability,as the consortium is hosted by Inria since 2019. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1451:148,message,message,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1451,1,['message'],['message']
Integrability,"at least I would push for simplicity here, like if msgInfoLevel==InfoMessageLevel::MUTED, then no info message goes to the component stack, ; when using: ; msg_info () << ""I print if I am not muted"" ; . the _when version can be kept for fine tuning (I personally find it overkill) . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 17 Février 2017 13:21:47; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > Almost done... the f_printLog stuff is replaced with d_msgInfoLevel.; > Backward compatibility is implemented as well as deprecation warning. > This allow to write the follow things:; > msg_info_when ( d_msgInfoLevel.getValue() != InfoMessageLevel::MUTED ) << ""I; > print often"" ; msg_info_when ( d_msgInfoLevel.getValue() !=; > InfoMessageLevel::MUTED ) << ""I print often"" ;. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493:103,message,message,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493,4,['message'],['message']
Integrability,"atic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:1400,message,message,1400,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,1,['message'],['message']
Integrability,"backtrace:; ```; 	[Inline Frame] Sofa.Helper.dll!std::_Check_C_return(int _Res) Line 131	C++; 	[Inline Frame] Sofa.Helper.dll!std::_Mutex_base::lock() Line 50	C++; 	[Inline Frame] Sofa.Helper.dll!std::lock_guard<std::mutex>::{ctor}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1444,Message,MessageDispatcherImpl,1444,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,2,['Message'],"['Message', 'MessageDispatcherImpl']"
Integrability,"based on #2339 . Description: Matrix\Vector has been moved to Sofa.LinearAlgebra in #2339, the only remaining component is SVDLinearSolver.; This linear solver is a (very slow) dense matrix solver so it would be more logical for this component to be in SofaDenseSolver.; Moreover the sole existence of SofaEigen2Solver was the Eigen dependency. ; Now Eigen is a proven dependency in the SofaFramework so at the end SofaEigen2Solver is not useful anymore. This PR:; - moves SVDLinearSolver in SofaDenseSolver; - remove the SofaEigen2Solver dependencies from various modules; - add some deprecations warning here and there; ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2368:333,depend,dependency,333,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2368,3,['depend'],"['dependencies', 'dependency']"
Integrability,"based on:; - #2813 (which is itself based on #2790 ). All OBB/Capsule code-related into its own plugin.; Has kind of the same file structure as Sofa.Component.Collision. Tests were adapted as well. [ci-depends-on https://github.com/sofa-framework/THMPGSpatialHashing/pull/1]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820:202,depend,depends-on,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820,1,['depend'],['depends-on']
Integrability,"be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3172,depend,depending,3172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,2,['depend'],['depending']
Integrability,"boost::filesystem is the last dependency on a (compiled) boost library.; However, SOFA is still dependent on header-only boost libraries (for graph, stable_vector and intrusive_ptr especially); (config of the target Boost::boost is in Sofa.Type). The change is really easy. just replace boost::filesystem with std::filesystem.; The only non trivial 1-1 replacement was for managing unicode path (not sure on the change actually). This is finally possible because minimum requirement is ubuntu 20.04 (with an updated version of gcc supporting std::filesystem instead of std::experimental::filesystem) and macOS 10.15 (same with its clang version/mac SDK). [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/177]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2342:30,depend,dependency,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2342,3,['depend'],"['dependency', 'dependent', 'depends-on']"
Integrability,"boost::locale was only once in FileRepository ; and since we can use std::locale from the STL, this library seems not useful anymore. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1033:233,message,message,233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1033,1,['message'],['message']
Integrability,"boost::program_option was introduced in SofaHelper because of the utility class ArgumentParser. ; This class is only used from application/gui-related modules, so this file and the boost::program_option dependency are moved into SofaGuiCommon. And boost::system seems not used at all so lets remove this unused thing. SofaFramework needs now only:; - thread (for the not-so-used TimeoutWatcher) and could be replaced with the future [std::jthread](https://en.cppreference.com/w/cpp/thread/jthread) from C++20; - filesystem, which could be removed if std::filesystem could be used everywhere 😥; The other boost dependencies (stable_vector, intrusive_ptr, graph?) seems to be usable with a header-only version.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1848:203,depend,dependency,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1848,2,['depend'],"['dependencies', 'dependency']"
Integrability,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/555:373,message,message,373,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555,1,['message'],['message']
Integrability,check for package dependencies (windows) at cmake,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/807:18,depend,dependencies,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/807,1,['depend'],['dependencies']
Integrability,cherry-pick only the fix in TopologicalChangeProcessor submitted by @fangzhouzisb in PR #1217 ; The other fix needs further discussion. Fix #1213. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1247:246,message,message,246,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1247,1,['message'],['message']
Integrability,"ck wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/487:2623,depend,depends,2623,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487,2,['depend'],"['dependency', 'depends']"
Integrability,"coefficient is always zero (since for no strain we have no stress). For examples the coefficients for polynomials [3,2,4] will be put as [a1,a2,a3,b1,b2,c1,c2,c3,c4].; The dedication of jacobian matrix for PolynomialSpringForceField is given below; ![Pol1](https://user-images.githubusercontent.com/28653498/79741283-45f34c00-8301-11ea-8472-778b8b4c4dc4.JPG); ![Pol2](https://user-images.githubusercontent.com/28653498/79741289-4855a600-8301-11ea-86fc-b1a2aa29b92c.JPG); ![Pol3](https://user-images.githubusercontent.com/28653498/79741294-4ab80000-8301-11ea-8ef9-ff2a29603218.JPG); ![Pol4](https://user-images.githubusercontent.com/28653498/79741295-4be92d00-8301-11ea-9ef8-a444c6d23f44.JPG); I guess the dedication has to be added as documentation, but I do not know how to add it. For RestShapeSpring I added an exponetial addition to the denominator to avoid Nan problems for cases when spring has a zero length. As a result, the stress simulation is shifted compared with polynomial values, but it keeps its nonlinearity. Here is the dedication of a derivative; ![RestPol1](https://user-images.githubusercontent.com/28653498/79741632-de89cc00-8301-11ea-95a5-72803bb1d259.JPG); ![RestPol2](https://user-images.githubusercontent.com/28653498/79741636-e0ec2600-8301-11ea-87f6-fd7ce1e8c3d1.JPG); ![RestPol3](https://user-images.githubusercontent.com/28653498/79741643-e34e8000-8301-11ea-8ce7-5e44658d802d.JPG); ![RestPol4](https://user-images.githubusercontent.com/28653498/79741646-e3e71680-8301-11ea-9d20-5c1327fb4080.JPG). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342:2320,message,message,2320,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342,1,['message'],['message']
Integrability,"concept. Currently, I run the checks on a slave on ci.inria.fr, and the current POC does a minimalist build / install / run tests workflow. But I think it would be worth asking ourselves what the perfect CI/CD pipeline could be for SOFA & it's plugins. In my mind, I'd like this:. SOFA:; - build / run tests (of course...); - build documentation (doxygen, sphinx...) & deploy on github pages / readthedocs / website; - build docker image & push on docker hub or equivalent (consistent build environment); - generate standalone binaries, zip & upload on github pages / website (SOFA-latest / sofa-nightly build...). PLUGINS:; - load docker image, or wget binaries generated by SOFA; - build / run tests (of course...); - build documentation (doxygen, sphinx...) & deploy on github pages / readthedocs / website; - build docker image & push on docker hub or equivalent; - generate binaries, zip & upload on github pages / website; ; ADVANTAGES of github actions vs JK2:; - ALL CI/CD config centralized in a .github folder in the git repository; - NO separate tool but Github's interface; - SUPER DUPER KICKASS interface design from github, gives direct access to all logs, checks, status badges etc. for each workflow / job / step in the Github checks processes. ![plop2](https://user-images.githubusercontent.com/13734391/69730387-3e4fc280-1128-11ea-8f91-20eeb660d233.png). DISADVANTAGES:; - Still in beta (some bugs noticed, especially when running in self-hosted slaves...); - A lot to recode given what @guparan did in JK2; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1225:1200,interface,interface,1200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1225,3,"['interface', 'message']","['interface', 'message']"
Integrability,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:162,interface,interface,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981,2,['interface'],['interface']
Integrability,cs.framework/Versions/A/CoreGraphics; 0x7fff25874000 - 0x7fff2596afff com.apple.ColorSync (4.13.0 - 3473.3.1) <A67D9B0A-E9FB-325A-873B-032DAF45C112> /System/Library/Frameworks/ColorSync.framework/Versions/A/ColorSync; 0x7fff2596b000 - 0x7fff259c6fff com.apple.HIServices (1.22 - 714) <780B2B09-80A6-32C8-B9E5-024988196E00> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices; 0x7fff25ab9000 - 0x7fff25c7dfff com.apple.Montreal (1.0 - 142) <A5670332-A468-35DB-9333-A53B30926E46> /System/Library/PrivateFrameworks/Montreal.framework/Versions/A/Montreal; 0x7fff25d72000 - 0x7fff26190fff com.apple.CoreData (120 - 1044.3) <7BE9684B-4439-3008-A2A7-4093BBCA180A> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData; 0x7fff26191000 - 0x7fff261a7fff com.apple.ProtocolBuffer (1 - 285.23.11.29.1) <58CD91DC-64A9-3A97-AE41-6EA30308D617> /System/Library/PrivateFrameworks/ProtocolBuffer.framework/Versions/A/ProtocolBuffer; 0x7fff261a8000 - 0x7fff26367fff libsqlite3.dylib (321.1) <ACCC6A4C-3257-38A4-8AFB-BA73D906205B> /usr/lib/libsqlite3.dylib; 0x7fff26368000 - 0x7fff263e4fff com.apple.Accounts (113 - 113) <BCB8494A-A340-30A1-928C-9B53E953328D> /System/Library/Frameworks/Accounts.framework/Versions/A/Accounts; 0x7fff263e5000 - 0x7fff263fdfff com.apple.commonutilities (8.0 - 900) <8C96D016-2B40-39C0-A51C-9CF687AE7218> /System/Library/PrivateFrameworks/CommonUtilities.framework/Versions/A/CommonUtilities; 0x7fff263fe000 - 0x7fff2647ffff com.apple.BaseBoard (526 - 526) <3A964BB6-7AB8-3B5D-BAF6-40F56D2BA393> /System/Library/PrivateFrameworks/BaseBoard.framework/Versions/A/BaseBoard; 0x7fff26480000 - 0x7fff264cbfff com.apple.RunningBoardServices (1.0 - 505.80.1) <4B9FFFB3-310F-350A-BEBB-AB779BD3F405> /System/Library/PrivateFrameworks/RunningBoardServices.framework/Versions/A/RunningBoardServices; 0x7fff264cc000 - 0x7fff26541fff com.apple.AE (918.0.1 - 918.0.1) <9B6B42DB-8768-343B-B10E-A9A5710280CD> /System/Librar,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:25498,Protocol,ProtocolBuffer,25498,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['Protocol'],['ProtocolBuffer']
Integrability,"ctions like invert, etc. when the code did not called them from their respective namespace.It was not a problem because the compiler could find them previously thanks to [ADL](https://en.wikipedia.org/wiki/Argument-dependent_name_lookup).; Fixing is easy by just adding the respective namespace.; - vector_device now needs a new template parameter, implementing ZeroConstructor and SimpleCopy (already done in SofaCUDA and SofaOpenCL). ### Functionality:; - vector does not use the Messaging mechanism anymore; it was used in the `int` and `unsigned int` specialized version of read(). Instead, I replaced it with std::cerr AND setting a failbit to the resulting stream (which should have been done before actually).; Furthermore, I also changed Data to catch any cerr message (if any) and transpose it into the Messaging mechanism (if the stream as a failbit flag enabled) ; - vector can check bounds with the operator[], in debug mode. ; Before, it was displaying a message (with the Messaging mechanism), tried to dump the stack and quit on an assertion error.; Now it throws an exception (with the same message) which : ; - makes it crash if it is not caught (like before actually); - displays the message and carry on if caught somewhere (and can further debug with stack trace or whatever); which is a not so-bad solution in my opinion. ## Talking; - the cerr thingy; - template parameters; - access bound thing. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1893:2042,message,message,2042,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1893,1,['message'],['message']
Integrability,"ctory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class already registered: Vec2d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: ; [INFO] [PluginManager] Loaded plugin: /home/jnbrunet/sources/sofa/build/lib/libSofaConstraint.so; ```. Which doesn't give us a lot of information, on the contrary... This PR improve the diagnostic message from the object factory. This is the resulted output:. ```; [WARNING] [ObjectFactory] Class already registered: BilateralInteractionConstraint<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: BilateralInteractionConstraint<Vec3d>; [WARNING] [ObjectFactory] Class already registered: ConstraintAnimationLoop; [WARNING] [ObjectFactory] Class already registered: FreeMotionAnimationLoop; [WARNING] [ObjectFactory] Class already registered: GenericConstraintCorrection; [WARNING] [ObjectFactory] Class already registered: GenericConstraintSolver; [WARNING] [ObjectFactory] Class already registered: LCPConstraintSolver; [WARNING] [ObjectFactory] Class already registered: LMDNewProximityIntersection; [WARNING] [ObjectFactory] Class already registered: LinearSolverConstraintCorrection<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: LinearSolverConstraintCorrection<Vec1d>; [WARNING] [ObjectFactory] Class already registered: LinearSolverConstraintCorrection<Vec2d>; [",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1652:2751,message,message,2751,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1652,1,['message'],['message']
Integrability,"d objects, ; 3. A `SubsetMultiMapping` that will make the link between the two provided objects and the new mechanical state; 4. The spring force field. Since `SubsetMultiMapping` was initially in SofaMiscMapping, it has been moved into SofaBaseMechanics. A compatibility layer is available. Other components using `StiffSpringForceField` had to be adapted to create also the extra components. An example is `AttachBodyPerformer` which creates the spring between an object and the mouse (shift + clic). WARNING:; Since `StiffSpringForceField` is now necessarily located in a mapped node, its stiffness matrix is not mapped in case of a built linear system. The forces are then computed explicitly only. This issue will be addressed in the new design of the matrix assembly. TODO:. - [x] A description for this PR; - [ ] Handle topological changes in `SpringForceField` -> see https://github.com/sofa-framework/sofa/pull/2653 and https://github.com/sofa-framework/sofa/pull/2729; - [x] Deal with `BoxStiffSpringForceField` -> see https://github.com/sofa-framework/sofa/pull/2621; - [x] Compilation and tests issues on CI (CUDA); - [x] In `AttachBodyPerformer`, a Node remains in the scene when `AttachBodyPerformer` is destroyed. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/224]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554:2458,depend,depends-on,2458,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554,1,['depend'],['depends-on']
Integrability,"d paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:1301,message,message,1301,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['message'],['message']
Integrability,"d to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1217,message,message,1217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,2,['message'],['message']
Integrability,"dMapping_test.cpp.o (3280 ms); SquareMapping_test.cpp.o (3239 ms); RigidMapping_test.cpp.o (3089 ms); SquareDistanceMapping_test.cpp.o (2976 ms); ... 19187 ms: sofa/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src/sofa/simulation/MechanicalVisitor.h (included 100 times, avg 191 ms), included via:; initSofaDenseSolver.cpp.o MatrixLinearSolver.inl MatrixLinearSolver.h (440 ms); StaticSolver.cpp.o StaticSolver.h MechanicalMatrixVisitor.h (427 ms); NewMatCGLinearSolver.cpp.o CGLinearSolver.inl CGLinearSolver.h MatrixLinearSolver.h (404 ms); DefaultMultiMatrixAccessor.cpp.o DefaultMultiMatrixAccessor.h (388 ms); PrecomputedLinearSolver.cpp.o PrecomputedLinearSolver.inl PrecomputedLinearSolver.h MatrixLinearSolver.h (367 ms); MatrixLinearSolver.cpp.o MatrixLinearSolver.inl MatrixLinearSolver.h (350 ms); ... 18437 ms: /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/basic_string.h (included 167 times, avg 110 ms), included via:; cmake_pch.hxx Messaging.h MessageDispatcher.h Message.h iostream ostream ios ios_base.h locale_classes.h string (203 ms); cmake_pch.hxx Base.h StringUtils.h string (198 ms); cmake_pch.hxx Base.h StringUtils.h string (196 ms); cmake_pch.hxx Base.h StringUtils.h string (195 ms); cmake_pch.hxx Base.h StringUtils.h string (194 ms); cmake_pch.hxx Base.h StringUtils.h string (182 ms); ... 18298 ms: sofa/modules/SofaGuiQt/src/sofa/gui/qt/ModifyObject.h (included 19 times, avg 963 ms), included via:; MaterialDataWidget.cpp.o MaterialDataWidget.h DataWidget.h (1881 ms); StructDataWidget.cpp.o StructDataWidget.h SimpleDataWidget.h DataWidget.h (1645 ms); QDisplayDataWidget.cpp.o QDisplayDataWidget.h DataWidget.h (1580 ms); DisplayFlagsDataWidget.cpp.o DisplayFlagsDataWidget.h DataWidget.h (1567 ms); QRGBAColorPicker.cpp.o QRGBAColorPicker.h DataWidget.h (1555 ms); moc_QDisplayPropertyWidget.cpp.o QDisplayPropertyWidget.h (1496 ms); ... 17890 ms: sofa/modules/SofaGuiCommon/src/sofa/gui/BaseGUI.h (included 15 times, avg 1192 ms), ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:37737,Message,MessageDispatcher,37737,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['Message'],['MessageDispatcher']
Integrability,"damned I need to recompile it to get the full error message, sorry I will get back to you",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4724#issuecomment-2110594936:52,message,message,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4724#issuecomment-2110594936,1,['message'],['message']
Integrability,"dding plugin SofaGeneralMeshCollision; Adding plugin SofaBoundaryCondition; Adding plugin SofaGeneralAnimationLoop; Adding plugin SofaGeneralDeformable; Adding plugin SofaGeneralEngine; Adding plugin SofaGeneralExplicitOdeSolver; Adding plugin SofaGeneralImplicitOdeSolver; Adding plugin SofaGeneralLinearSolver; Adding plugin SofaGeneralRigid; Adding plugin SofaGeneralObjectInteraction; Adding plugin SofaGeneralSimpleFem; Adding plugin SofaGeneralTopology; Adding plugin SofaTopologyMapping; Adding plugin SofaUserInteraction; Adding plugin SofaConstraint; Adding plugin SofaGeneralLoader; Adding plugin SofaExporter; Adding plugin SofaSparseSolver; SofaSparseSolver: using built-in metis library; Adding plugin SofaPreconditioner; Adding plugin SofaHaptics; Adding plugin SofaValidation; Adding plugin SofaDenseSolver; Adding plugin SofaNonUniformFem; CMake Warning (dev) at D:/Program Files/CMake/share/cmake-3.22/Modules/CMakeDependentOption.cmake:84 (message):; Policy CMP0127 is not set: cmake_dependent_option() supports full Condition; Syntax. Run ""cmake --help-policy CMP0127"" for policy details. Use the; cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; SofaKernel/modules/Sofa.Config/cmake/SofaMacrosConfigure.cmake:112 (cmake_dependent_option); SofaKernel/modules/Sofa.Config/cmake/SofaMacrosConfigure.cmake:141 (sofa_add_generic); modules/CMakeLists.txt:38 (sofa_add_plugin); This warning is for project developers. Use -Wno-dev to suppress it. Adding plugin SofaOpenglVisual; Adding plugin SofaMiscTopology; Adding plugin SofaMiscExtra; Adding plugin SofaMiscForceField; Adding plugin SofaMiscEngine; Adding plugin SofaMiscSolver; Adding plugin SofaMiscFem; Adding plugin SofaMiscMapping; Adding plugin SofaMiscCollision; SofaMiscModule: build all maintained sofa components.; Found Boost: E:/GitHub/vcpkg/installed/x64-windows/include (found version ""1.77.0"") found components: program_options ; -- SofaGuiCommon: Sofa.GL depend",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2814:2920,message,message,2920,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2814,1,['message'],['message']
Integrability,"defaulttype::MatSym becomes sofa::type::MatSym. ## Breaking; Same as #1734:; - if inclusion of _defaulttype_ and _type_ namespace, the compiler cannot chose which one to chose for the free functions like invert, etc. when the code did not called them from their respective namespace.It was not a problem because the compiler could find them previously thanks to [ADL](https://en.wikipedia.org/wiki/Argument-dependent_name_lookup).; Fixing is easy by just adding the respective namespace. ## Talking. - An other contribution I would like to spread to the sofa code base: ; Instead of throwing a text information if the function cannot do (like matrix non invertible, etc), ; this should always return a boolean value and apply the [[nodiscard]] flag to oblige the user to use the return value.; This makes the compiler generates a warning; I would even push to make it a compilation error; More generally, it would be cool to use the [[nodiscard]] flag much more for critical code.; ~~I tried to even use the [[nodiscard ""MESSAGE""]] but this feature seems only included with c++20 so I may change this PR to run successfully on the CI.~~; As expected, this is not supported by the CI 🙁. - the compatibility layer still holds the dependency on helper for the messaging, so we should discuss about that. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1775:1289,MESSAGE,MESSAGE,1289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1775,2,"['MESSAGE', 'depend']","['MESSAGE', 'dependency']"
Integrability,"dent_option() supports full Condition; Syntax. Run ""cmake --help-policy CMP0127"" for policy details. Use the; cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; SofaKernel/modules/Sofa.Config/cmake/SofaMacrosConfigure.cmake:112 (cmake_dependent_option); SofaKernel/modules/Sofa.Config/cmake/SofaMacrosConfigure.cmake:141 (sofa_add_generic); modules/CMakeLists.txt:38 (sofa_add_plugin); This warning is for project developers. Use -Wno-dev to suppress it. Adding plugin SofaOpenglVisual; Adding plugin SofaMiscTopology; Adding plugin SofaMiscExtra; Adding plugin SofaMiscForceField; Adding plugin SofaMiscEngine; Adding plugin SofaMiscSolver; Adding plugin SofaMiscFem; Adding plugin SofaMiscMapping; Adding plugin SofaMiscCollision; SofaMiscModule: build all maintained sofa components.; Found Boost: E:/GitHub/vcpkg/installed/x64-windows/include (found version ""1.77.0"") found components: program_options ; -- SofaGuiCommon: Sofa.GL dependent features enabled.; SofaGuiQt: will use Qt5; Adding collection SofaComponentAll; J:/GitHub/sofa/src/applications/plugins/SofaHighOrder does not exist and will be ignored.; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; Python:; Version: 3.9.7; Executable: D:/11631/miniconda3/python.exe; Headers: D:/11631/miniconda3/include; Libraries: D:/11631/miniconda3/libs/python39.lib; User site: C:\Users\11631\AppData\Roaming\Python\Python39\site-packages; pybind11:; Version: 2.8.1; Config: E:/GitHub/vcpkg/installed/x64-windows/share/pybind11/pybind11Config.cmake; Adding plugin LMConstraint; SofaDistanceGrid not found: DistanceLM codes will not be compiled; Adding application runSofa; Write Plugin list at J:/GitHub/sofa/build/bin/plugin_list.conf.default; Configuring incomplete, errors occurred!; See also ""J:",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2814:3957,depend,dependent,3957,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2814,1,['depend'],['dependent']
Integrability,"diff, ""name"", ""desc"")); , c_diff(d_diff) // listen to d_diff data. The constructor of the DataCallback takes a data as reference; ```. Then anywhere (usually in the constructor body); ```; c_diff.addCallback(this,&MyComponent::myfunction1); ; c_diff.addCallback(this,&MyComponent::myfunction2); ; ```. The main difference with an existing type in sofa if the possibility to attach several functions and more importantly to specify the component on which the callback will be called. This allows to define callbacks as member functions of the component, which simplify access to parameters. Additional test are added allowing to modify the data while the callback is called (in order to avoid cyclic calls). This is usefull for linked data i.e. The callback receives a modification from the parent, the callback is then called and it is allowed to modify the data in the callback which will automatically call update of childs of the data. . The second type introduced in this PR is a wrapper allowing to easily associate a widget with a specific types of data. It can be used as follows: . in a cpp file; `sofa::helper::Creator<sofa::gui::qt::DataWidgetFactory, GenericDataWidget< Data<bool>, QtDataBoxEdit > >	DWClass_bool(""bool"",true);`. QtDataBoxEdit is a Qwidget class defined by the user that needs to define usual functions needed in sofa widgets : ; ```; void readFromData(const Data<bool>& data);; void writeToData(Data<bool>& data);; ```. And constructor must take as parameter the parent and the data as follows :; `QtDataBoxEdit(sofa::gui::qt::DataWidget* parent,const sofa::core::objectmodel::Data<bool> & data) : QCheckBox(parent);`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibili",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911:1342,wrap,wrapper,1342,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911,1,['wrap'],['wrapper']
Integrability,"ding plugin SofaGeneralRigid; Adding plugin SofaGeneralObjectInteraction; Adding plugin SofaGeneralSimpleFem; Adding plugin SofaGeneralTopology; Adding plugin SofaTopologyMapping; Adding plugin SofaUserInteraction; Adding plugin SofaConstraint; Adding plugin SofaGeneralLoader; Adding plugin SofaExporter; Adding plugin SofaSparseSolver; SofaSparseSolver: using built-in metis library; Adding plugin SofaPreconditioner; Adding plugin SofaHaptics; Adding plugin SofaValidation; Adding plugin SofaDenseSolver; Adding plugin SofaNonUniformFem; Adding plugin SofaOpenglVisual; Adding plugin SofaMiscTopology; Adding plugin SofaMiscExtra; Adding plugin SofaMiscForceField; Adding plugin SofaMiscEngine; Adding plugin SofaMiscSolver; Adding plugin SofaMiscFem; Adding plugin SofaMiscMapping; Adding plugin SofaMiscCollision; SofaMiscModule: build all maintained sofa components.; CMake Error at /usr/share/cmake-3.15/Modules/FetchContent.cmake:903 (message):; CMake step for cxxopts failed: No such file or directory; Call Stack (most recent call first):; /usr/share/cmake-3.15/Modules/FetchContent.cmake:1006 (__FetchContent_directPopulate); modules/SofaGuiCommon/CMakeLists.txt:18 (FetchContent_Populate). Configuring incomplete, errors occurred!; See also ""/media/maxim/big-500/sofa/build/v21.12/CMakeFiles/CMakeOutput.log"".; See also ""/media/maxim/big-500/sofa/build/v21.12/CMakeFiles/CMakeError.log"".; ```. As I understand there is problem with cxxopts:; ```; if(NOT cxxopts_POPULATED); FetchContent_Populate(cxxopts); ```. ---------------------------------------------. ### Environment; ```; lsb_release -a; No LSB modules are available.; Distributor ID:	Ubuntu; Description:	Ubuntu 18.04.5 LTS; Release:	18.04; Codename:	bionic; ```. ```; gcc-11 --version; gcc-11 (Ubuntu 11.1.0-1ubuntu1~18.04.1) 11.1.0; Copyright (C) 2021 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PU",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3184:3099,message,message,3099,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3184,1,['message'],['message']
Integrability,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1230,depend,dependencies,1230,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792,2,['depend'],['dependencies']
Integrability,"e anything. It's time for refactoring!. My focus was the refactoring of the unit tests. Before the PR, a unique class tested the 3 components using a series of `if`. I refactored the 3 classes in order to reduce the specific processing in the unit test, i.e. reduce the number of `if`. - The 3 classes now inherit from a common base class `BaseLinearElasticityFEMForceField`. I moved everything that was common (only regarding the unit test. More common code is remaining) in this class. It includes:; - A common `Data` for Young's modulus and Poisson's ratio. This way, they share type, the same default value, and the same description. Note that Young's modulus in `FastTetrahedralCorotationalForceField` and `TetrahedralCorotationalFEMForceField` was a scalar, and now it's a vector of scalars. This requires to add a common way to access the Young's modulus of the i-th element. This is also a breaking change. This allows to define a typed unit test for all 3 classes. The particularities of the classes are defined in a derived class of the unit test. To me, a great advantage, is that we identify clearly that there are unit tests for the 3 components, because there a file for each class. It was not obvious before. [ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/133]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778:1477,depend,depends-on,1477,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778,1,['depend'],['depends-on']
Integrability,"e difference between `MatrixLinearSolver<...,...,NoThreadManager>` and `MatrixLinearSolver<...,...,AsyncThreadManager>` is only in the class implementation. This template mechanism means that it is possible to explicitly instantiate any linear solver as an asynchronous solver. In that case, it will use `MatrixLinearSolver<AsyncThreadManager>` as its base class. On the contrary, `AsyncSparseLDLSolver` introduced in this PR is not generic. It derives from `SparseLDLSolver`. It is specific to `SparseLDLSolver`.; - Because of the previous point, in SofaAsyncSolvers, asynchronous solver components are differentiated only by the template name prefix `Async`. For example, in XML, it is declared as `<SparseLDLSolver template=""AsyncCompressedRowSparseMatrixMat3x3d""/>`, compared to the synchronous solver `<SparseLDLSolver template=""CompressedRowSparseMatrixMat3x3d""/>`. In this PR, `AsyncSparseLDLSolver` is a different component than `SparseLDLSolver` and must use the usual templates: `<AsyncSparseLDLSolver template=""CompressedRowSparseMatrixMat3x3d""/>`.; - `AsyncSparseLDLSolver` uses `std::async`, while `MatrixLinearSolver<AsyncThreadManager>` uses `boost::thread`, hence a dependency to boost. `std::async` may use a thread pool. In that case, it is guaranteed that threads waiting asynchronous tasks are not busy just waiting. I am not sure it is the case in SofaAsyncSolvers.; - In SofaAsyncSolvers, there are some references to an asynchronous matrix assembly. I don't know for sure that it is really used. Code refers to `ThreadSafeForceField`, and I don't know where those forces fields are. `AsyncSparseLDLSolver` assembles the matrix synchronously. In SofaAsyncSolvers, only `SparseLDLSolver` and `SSORPreconditioner` are specialized to be asynchronous. But I guess there must be other private plugins specializing solvers. For now, I only wanted a basic asynchronous LDL solver. Therefore I did not feel that it was necessary to have a generic base class for any asynchronous solver.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046728613:1630,depend,dependency,1630,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046728613,1,['depend'],['dependency']
Integrability,"e https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the msg_* API discussed in #160. . If like me you think this should be fixed...please join this discussion and share the workload. ; I'm working in https://github.com/SofaDefrost/sofa/tree/improve-messageapi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179:1466,message,messages,1466,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179,3,['message'],"['messageapi', 'messages']"
Integrability,"e of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get documentation on what the ""methodDelegated"" should do (to know contract the child has to fulfill). . The advantage I see with that naming scheme is that it works with chain of delegation. So the code should look like:; ```cpp; BaseObject::init() /// non virtual ; {; // I do the stuff shared by all child ; checkWhatever();; ; // ask my child to do their specific init, ; doBaseObjectInit(); }. BarycentricMapping::doBaseObjectInit() final; {; // I do the stuff shared by all of my child ; checkWhatever();; ; // ask my child to do their specific init, ; doBarycentricMappingInit();; }. MyChildOfBarycentricMapping::doBarycentricMapping() final; {; // ask my child to do their specific init, ; }; ```. This long naming scheme also has some good properties in case of multiple in-heritance, as it avoid colliding delegate function's name. . Of course, any other naming scheme suggestion is welcomed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:2059,contract,contract,2059,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162,2,['contract'],['contract']
Integrability,"e the compiler could find them previously thanks to [ADL](https://en.wikipedia.org/wiki/Argument-dependent_name_lookup).; Fixing is easy by just adding the respective namespace.; - vector_device now needs a new template parameter, implementing ZeroConstructor and SimpleCopy (already done in SofaCUDA and SofaOpenCL). ### Functionality:; - vector does not use the Messaging mechanism anymore; it was used in the `int` and `unsigned int` specialized version of read(). Instead, I replaced it with std::cerr AND setting a failbit to the resulting stream (which should have been done before actually).; Furthermore, I also changed Data to catch any cerr message (if any) and transpose it into the Messaging mechanism (if the stream as a failbit flag enabled) ; - vector can check bounds with the operator[], in debug mode. ; Before, it was displaying a message (with the Messaging mechanism), tried to dump the stack and quit on an assertion error.; Now it throws an exception (with the same message) which : ; - makes it crash if it is not caught (like before actually); - displays the message and carry on if caught somewhere (and can further debug with stack trace or whatever); which is a not so-bad solution in my opinion. ## Talking; - the cerr thingy; - template parameters; - access bound thing. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1893:2181,message,message,2181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1893,2,['message'],['message']
Integrability,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1152,rout,routing,1152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,12,"['message', 'rout']","['message', 'routed', 'routing']"
Integrability,"e. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:1139,message,message,1139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['message'],['message']
Integrability,e.g. Eigen among others. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/397:124,message,message,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/397,1,['message'],['message']
Integrability,"eMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API constructor needs to be passed the number of lines that are involved in the solving of this constraint equation. The previous implementat",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459:1087,integrat,integrates,1087,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459,1,['integrat'],['integrates']
Integrability,"ected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/487:3475,message,message,3475,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487,1,['message'],['message']
Integrability,"ed is deprecated.; You should now explicitely find (find_package) and link (target_link_library) each module you need within: ; SofaNonUniformFem. CMake Deprecation Warning at SofaMisc/CMakeLists.txt:21 (message):; SofaMisc is deprecated.; You should now explicitely find (find_package) and link (target_link_library) each module you need within: ; SofaMiscExtra;SofaMiscEngine;SofaMiscFem;SofaMiscForceField;SofaMiscMapping;SofaMiscSolver;SofaMiscTopology""; warning is appearing. however, without crashing it get configured and generates the files. I have build the system on Visual Studio 2019 and it complies without any errors. However, when loading the RunSofa ""SofaPython"" and ""SofaExporter"" modules are not loading. I tried using the plugin manager and it reports erros that .dll file is not there. but it is there in the bin and could not add to the plugin manager. So my questions are as follows.; (1)I want to know whether do I have to change any configuration to avoid deprecation warning messages?; (2) loading the sofaphython to runSofa application ; My Cmake out put is as follows. Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19041.; Install prefix: C:/SOFA/build/master/install; Adding module SofaGeneralVisual; Adding module SofaGraphComponent; Adding module SofaGeneralMeshCollision; Adding module SofaBoundaryCondition; Adding module SofaGeneralAnimationLoop; Adding module SofaGeneralDeformable; Adding module SofaGeneralEngine; Adding module SofaGeneralExplicitOdeSolver; Adding module SofaGeneralImplicitOdeSolver; Adding module SofaGeneralLinearSolver; Adding module SofaGeneralRigid; Adding module SofaGeneralObjectInteraction; Adding module SofaGeneralSimpleFem; Adding module SofaGeneralTopology; Adding module SofaTopologyMapping; Adding module SofaUserInteraction; Adding module SofaSparseSolver; SofaSparseSolver: using built-in metis library; Adding module SofaPreconditioner; Adding module SofaHaptics; Adding module SofaValidation; Adding module S",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1623:1206,message,messages,1206,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1623,1,['message'],['messages']
Integrability,"el='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message --",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/322:1506,message,messages,1506,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322,2,['message'],['messages']
Integrability,"ely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in the UI. ; - in some case it seems that using a common prefix in the field's name is used to group input together (I have only a vague remembering about that with drawEnable then drawColor and drawLine but I cannot find back the example). For that I have not solution...but we can think about one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:1395,message,message,1395,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832,1,['message'],['message']
Integrability,"emPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:14:09.408: Failed to load module ""canberra-gtk-module""; Gtk-Message: 22:14:09.409: Failed to load module ""canberra-gtk-module""; [INFO] [SofaPluginManager] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(Depreca",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:12269,Message,Message,12269,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['Message'],['Message']
Integrability,"er != -1); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }; ; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << ""Processing."" << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; // As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();; ; signed int i = 1; // one simulation step is animated above ; ; while (i <= nbIter || nbIter == -1); {; if (i != nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; }. if ( i == nbIter || (nbIter == -1 && i%1000 == 0) ); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;. msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfreq)*i)/((double)rt) << "" FPS)."" << msgendl;; ; if (nbIter == -1) // Additional message for infinite iterations; {; msg_info(""BatchGUI"") << ""Press Ctrl + C (linux)/ Command + period (mac) to stop "" << msgendl;; }; }. i++;; }; }; return 0;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087:2080,message,message,2080,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087,1,['message'],['message']
Integrability,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2995,message,message,2995,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057,1,['message'],['message']
Integrability,"es"", there could also have a standard prefab library, but I see no problem in having that in stlib or any other third party plugin. That's said, I don't consider the prefab in stlib mature enough for such move, first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:1652,interoperab,interoperable,1652,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279,2,['interoperab'],['interoperable']
Integrability,everything is in the title.; This PR: ; - clean some code commented.; - remove the HAVE_NEW_HEXA macro which was hardcoded to true since 2009; - change the NDEBUG topology test into a c++if condition so the code is compiled. work duplicated with STC#5 branch. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/693:359,message,message,359,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/693,1,['message'],['message']
Integrability,eworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore; 0x7fff2c05a000 - 0x7fff2c126fff com.apple.TextureIO (3.10.9 - 3.10.9) <50BA07A4-02E8-38EE-B0B9-B12C277B563B> /System/Library/PrivateFrameworks/TextureIO.framework/Versions/A/TextureIO; 0x7fff2c127000 - 0x7fff2c12ffff com.apple.InternationalSupport (1.0 - 60) <DE997943-6AD5-32DA-B48E-78170C1EAA7B> /System/Library/PrivateFrameworks/InternationalSupport.framework/Versions/A/InternationalSupport; 0x7fff2c130000 - 0x7fff2c1abfff com.apple.datadetectorscore (8.0 - 674) <A4EBFF22-F861-321A-AF28-1DB8ECB9A4FF> /System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore; 0x7fff2c1ac000 - 0x7fff2c20afff com.apple.UserActivity (435 - 435) <12250395-D660-3CC1-81DB-565340F2651B> /System/Library/PrivateFrameworks/UserActivity.framework/Versions/A/UserActivity; 0x7fff2c20b000 - 0x7fff2c976fff com.apple.MediaToolbox (1.0 - 2765.6.4.2) <C8645EA0-643D-38CF-AA88-3253339192B1> /System/Library/Frameworks/MediaToolbox.framework/Versions/A/MediaToolbox; 0x7fff2ce30000 - 0x7fff2ce58fff com.apple.locationsupport (2420.12.16 - 2420.12.16) <63AB1284-8E33-3E9D-A857-9370F492B343> /System/Library/PrivateFrameworks/LocationSupport.framework/Versions/A/LocationSupport; 0x7fff2ce59000 - 0x7fff2ce8afff libSessionUtility.dylib (76.7) <6AAD02A0-9590-3CED-9568-36E05C59AA2B> /System/Library/PrivateFrameworks/AudioSession.framework/libSessionUtility.dylib; 0x7fff2ce8b000 - 0x7fff2cfbbfff com.apple.audio.toolbox.AudioToolbox (1.14 - 1.14) <8E53C25F-9FE2-372E-8374-6A598D72C4C1> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox; 0x7fff2cfbc000 - 0x7fff2d023fff com.apple.audio.AudioSession (1.0 - 76.7) <F696F4EC-9344-3C85-941E-6E5EF5CEF585> /System/Library/PrivateFrameworks/AudioSession.framework/Versions/A/AudioSession; 0x7fff2d024000 - 0x7fff2d036fff libAudioStatistics.dylib (25.4) <303533DD-D001-3CE8-A5A4-EC29F464FC3A> /usr/lib/libAudioStatistics.dylib;,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:56089,MediaT,MediaToolbox,56089,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['MediaT'],['MediaToolbox']
Integrability,failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scene,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:2534,message,messages,2534,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['message'],['messages']
Integrability,"ference; ```. Then anywhere (usually in the constructor body); ```; c_diff.addCallback(this,&MyComponent::myfunction1); ; c_diff.addCallback(this,&MyComponent::myfunction2); ; ```. The main difference with an existing type in sofa if the possibility to attach several functions and more importantly to specify the component on which the callback will be called. This allows to define callbacks as member functions of the component, which simplify access to parameters. Additional test are added allowing to modify the data while the callback is called (in order to avoid cyclic calls). This is usefull for linked data i.e. The callback receives a modification from the parent, the callback is then called and it is allowed to modify the data in the callback which will automatically call update of childs of the data. . The second type introduced in this PR is a wrapper allowing to easily associate a widget with a specific types of data. It can be used as follows: . in a cpp file; `sofa::helper::Creator<sofa::gui::qt::DataWidgetFactory, GenericDataWidget< Data<bool>, QtDataBoxEdit > >	DWClass_bool(""bool"",true);`. QtDataBoxEdit is a Qwidget class defined by the user that needs to define usual functions needed in sofa widgets : ; ```; void readFromData(const Data<bool>& data);; void writeToData(Data<bool>& data);; ```. And constructor must take as parameter the parent and the data as follows :; `QtDataBoxEdit(sofa::gui::qt::DataWidget* parent,const sofa::core::objectmodel::Data<bool> & data) : QCheckBox(parent);`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911:2104,message,message,2104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911,1,['message'],['message']
Integrability,"few CUDA scenes are failing, all with the messages `[ERROR] [CGLinearSolver(cGLinearSolver1)] Required data ""threshold"" has not been set. (Current value is 1e-05)` so I suppose these scenes must be updated too",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949356046:42,message,messages,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949356046,1,['message'],['messages']
Integrability,"fferently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_position"" would be enough to make the alias obvious to the user preserving the convenience of Alias to the developpers. What do you think about the differnt appraoch ? ; DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1385,message,message,1385,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194,2,['message'],['message']
Integrability,find_package(SofaGui) was failing because of SofaGuiCommon's dependency on SofaComponentAll. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1198:61,depend,dependency,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1198,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the simulation, this has the consequence that currently some useful scene-patterns are not easy to make through prefab. I think the work from @alxbilger on refactoring the animation loop and solving relax these cons",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:1868,interface,interface,1868,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279,2,['interface'],['interface']
Integrability,fix #551 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1058:110,message,message,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1058,1,['message'],['message']
Integrability,fix #988 . tada!; ![barycentric_00000001](https://user-images.githubusercontent.com/21199245/58172989-64d50280-7c9a-11e9-87e6-472d08feb97e.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1057:244,message,message,244,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1057,1,['message'],['message']
Integrability,fixed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/214:106,message,message,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/214,1,['message'],['message']
Integrability,fixes #435 RigidMapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/441:124,message,message,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/441,1,['message'],['message']
Integrability,fixes #723 . - removes copy-paste comments; - fixes horrible typos in the scene's name; - restores the scene's desired behavior . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/765:229,message,message,229,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/765,1,['message'],['message']
Integrability,"fixing #238 ; This fix solves the segfault at startup that intel-powered linux machines experience.; It should be a linux-specific bugfix to my understanding.; If anyone knows a clean way of probing whether or not a ""Core profile"" context would be created (something better than parsing lspci to see if we're runing an intel GPU...), I'll update this PR accordingly. Anyone to review?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/526:485,message,message,485,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526,1,['message'],['message']
Integrability,fixing Polynomial #434 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/442:124,message,message,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442,1,['message'],['message']
Integrability,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:2200,depend,dependent,2200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263,4,['depend'],['dependent']
Integrability,"from [CompressedRowSparseMatrix](https://github.com/InSimo/ISSofa/blob/issofa/framework/sofa/defaulttype/CompressedRowSparseMatrix.h) so we need to bring their version of CompressedRowSparseMatrix . I renamed all the **bloc** words to **block** as well. The previous CRSMatrix could be used as a BaseMatrix (solvers), ConstraintMatrix (iterations) and as a pure CRS itself.; This new CRSMatrix is decomposed in several types:; - CRSGeneric (name to be changed maybe): the pure CRS structure; - CRSMechanical: inheriting/implementing BaseMatrix; - (in a next PR) CRSConstraintMatrix, with the same API as the old CRSMatrix used for ConstraintMatrices (for iterating). Different purposes need different traits (some case would prefer autocompression, etc), so a lot of compile-time options are present. They are called policy.; I needed to change some flags from the Insimo's version to have the same behavior for the tests. So in the future, it could be interesting to see if those changes should be integrated later for more performance (but the tests would need to be changed). For compatibility reasons, the old ""CRSMatrix"" type is an alias on CRSMechanical. In this PR, no change of performance is noted (neither regression or upgrade). Tested on caduceus, TorusFall, solvers scenes and BeamAdapter's 3instruments_collis.scn. Ref:; - https://github.com/InSimo/ISSofa/blob/issofa/framework/sofa/defaulttype/CompressedRowSparseMatrix.h. Courtesy of Insimo (@fjourdes ). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3515:1290,integrat,integrated,1290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3515,1,['integrat'],['integrated']
Integrability,from comment:; `The Data constraintForces is used to expose the intensities of constraint forces in the simulation. We use the constraint forces as the approximation of real contact forces. We use this Data to provide contact information for the catheter insertion. The user can easily check the constraint forces from the GenericConstraint component interface.; `. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/840:351,interface,interface,351,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/840,2,"['interface', 'message']","['interface', 'message']"
Integrability,"g-500/sofa/build/v21.12/install; CMake Deprecation Warning at SofaKernel/modules/Sofa.Config/CMakeLists.txt:80 (message):; Deprecated components are activated (SOFA_WITH_DEPRECATED_COMPONENTS; variable is ON). Using legacy headers is enabled.; Headers from v21.06 are usable, but it is advised to change your code to use the new headers introduced in v21.12.; Adding module Sofa.GL; Adding plugin SofaSimpleFem; Adding plugin SofaRigid; Adding plugin SofaDeformable; Adding plugin SofaObjectInteraction; Adding plugin SofaMeshCollision; Adding plugin SofaEngine; Adding plugin SofaExplicitOdeSolver; Adding plugin SofaImplicitOdeSolver; Adding plugin SofaLoader; Adding plugin SofaGeneralVisual; Adding plugin SofaGraphComponent; Adding plugin SofaGeneralMeshCollision; Adding plugin SofaBoundaryCondition; Adding plugin SofaGeneralAnimationLoop; Adding plugin SofaGeneralDeformable; CMake Warning at /media/maxim/big-500/sofa/build/v21.12/lib/cmake/SofaEigen2SolverConfig.cmake:36 (message):; SofaEigen2Solver has been removed. The package still exists for; compatibility but is empty. Eigen classes were moved to Sofa.LinearAlgebra; and SVDLinearSolver to SofaDenseSolver.; Call Stack (most recent call first):; /media/maxim/big-500/sofa/build/v21.12/lib/cmake/SofaBaseConfig.cmake:35 (find_package); /media/maxim/big-500/sofa/build/v21.12/lib/cmake/SofaGeneralDeformableConfig.cmake:34 (find_package); modules/SofaGeneralDeformable/SofaGeneralDeformable_test/CMakeLists.txt:12 (find_package). Adding plugin SofaGeneralEngine; Adding plugin SofaGeneralExplicitOdeSolver; Adding plugin SofaGeneralImplicitOdeSolver; Adding plugin SofaGeneralLinearSolver; Adding plugin SofaGeneralRigid; Adding plugin SofaGeneralObjectInteraction; Adding plugin SofaGeneralSimpleFem; Adding plugin SofaGeneralTopology; Adding plugin SofaTopologyMapping; Adding plugin SofaUserInteraction; Adding plugin SofaConstraint; Adding plugin SofaGeneralLoader; Adding plugin SofaExporter; Adding plugin SofaSparseSolver; SofaS",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3184:1481,message,message,1481,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3184,1,['message'],['message']
Integrability,gcc 10 is showing a lot of warning for the use of visibility specifier on already defined types saying it is not needed. So I remove them...let's see if the behavior is the same on windows or if the declspec has a more general scope or if everything is fine. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1456:360,message,message,360,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1456,1,['message'],['message']
Integrability,"getHeaderFileLocation() won't probably ever be overridden, so the virtual keyword is removed from the macro (and remove literally thousands lines of warnings in logs). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1062:267,message,message,267,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1062,1,['message'],['message']
Integrability,"gin B is a dependency of plugin A (i.e A links dynamically against B); - plugin B implements `entrypoint()` but plugin A does not implement it; - PluginManger is set to load plugin A (which will then implicitly load plugin B). Then PluginManger, when trying to check if plugin A does implement `entrypoint()` will find `B::entrypoint()`, instead of returning a nullptr (indicating that the plugin is supposed to not implement it). Obviously this is not the desired outcome 🐛 . My reasoning would be that as the plugin B is direct dependency of A, when loaded by `dlopen()` (unix), is seen as an integral part of plugin A from a system-call point of view. This has been tested with Ubuntu. Did not test on MacOS but should be the same, as it uses dlopen too.; It seems this behavior is not present on Windows, the following demo does not show the bogus behavior. ---. ### Demo:; - adding `getModuleLicense()` which is supposed to be not implemented in Sofa.Component.StateContainer; - StateContainer is a dependency for some other Sofa.Component libraries. ```; extern ""C"" SOFA_EXPORT_DYNAMIC_LIBRARY const char* getModuleLicense();; const char* getModuleLicense(); {; return ""StateContainer License"";; }; ```; Result (Qt PluginManager windows calls `getModuleLicense()` if entry is supposed to be found). <img src='https://github.com/sofa-framework/sofa/assets/11028016/4b50f96f-d914-45ca-8dad-dbdaa0a90752' width='200'>. We can see the cascading wrong call to `getModuleLicense()`, as Collision has a dependency on Collision.Contact which has a dependency on StateContainer.; Moreover in this image, we can even see the `LGPL` which has been leaking from the recently added S.C LinearSystem to several other components. ---. ### Workaround; The workaround would be to implement obviously all the potential entrypoints in all the plugins, but the problem will arise again if a new entrypoint is added in the future....; At first glance, I thought that setting `RTLD_LOCAL` here; https://github.com/sof",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4462:1024,depend,dependency,1024,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4462,1,['depend'],['dependency']
Integrability,"good, I like the direction it takes . I think if we (you ?-) add additionnal sXyz component stream (like at least sdebug, or a new component API to match the existing msg_Xyz API), we could then have the printLog data deprecated and replaced by msgLevel and start the transition. . The removal of the per component ""message buffer"" has to be done in // in the gui and can be viewed as a separate problem. This would be the responsibility of the GUI to create those per component buffers . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Mercredi 1 Février 2017 20:34:25; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > @matthieu-nesme. > I looked back to the PR and I will remove the three Data field because:. > * controlling the queue size view a Data is not crucial. I will replace it; > with an attribute and get/set or an environment variable.; > * the msgLevel is un-used and was there to rise discussion on whether or not; > controlling the level of messages emitted by an object make sense (eg when; > debugging).; > * the logLevel'one is un-used yet but should one day override the behavior of; > the mis-used f_printLog. > Thanks again to pointing that. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767:316,message,message,316,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767,3,['message'],"['message', 'messages']"
Integrability,hasChanged methods were not const. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1488:134,message,message,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1488,1,['message'],['message']
Integrability,"he Datas and the Links. Example with:; ```py; print(dir(myMechanicalObject)); ```; Will prints:; ```; ['__class__', '__delattr__', '__dir__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'addData', 'addNewData', 'applyRotation', 'applyScale', 'applyTranslation', 'bbox', 'bwdInit', 'cleanup', 'computeBBox', 'constraint', 'context', 'derivX', 'downCast', 'drawMode', 'externalForce', 'findData', 'findLink', 'force', 'free_position', 'free_velocity', 'getAsACreateObjectParameter', 'getCategories', 'getClassName', 'getContext', 'getData', 'getDataFields', 'getLink', 'getLinkPath', 'getListOfDataFields', 'getListOfLinks', 'getMaster', 'getName', 'getPathName', 'getSize', 'getSlaves', 'getTarget', 'getTemplateName', 'init', 'isToPrint', 'listening', 'mappingJacobian', 'master', 'name', 'position', 'printLog', 'reinit', 'reserve', 'reset', 'reset_position', 'reset_velocity', 'resize', 'restScale', 'rest_position', 'rotation', 'rotation2', 'scale3d', 'setSrc', 'showColor', 'showIndices', 'showIndicesScale', 'showObject', 'showObjectScale', 'showVectors', 'showVectorsScale', 'size', 'slaves', 'storeResetState', 'tags', 'topology', 'translation', 'translation2', 'useTopology', 'velocity']; ```. NB: There is minimal test to be sure this work.; NB2: I'm not found of this big list but didn't want to change the semantics to visually separate the links, the data and the methods. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/762:1795,message,message,1795,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/762,1,['message'],['message']
Integrability,"he Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/583:2523,message,message,2523,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583,1,['message'],['message']
Integrability,"helper::system::atomic<int> was introduced long time ago (before std::atomic I guess).; This code is compiling only for i386 and x86_64 code with gcc/clang (and msvc); Now that std::atomic is here (and we are using c+>11), I guess it is time to use std::atomic where we can. Those modifications mostly appeared in multithreading-related code, so it would be good that @fspadoni could take a look :octocat: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1035:507,message,message,507,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1035,1,['message'],['message']
Integrability,"her licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken by adding a ""SofaKernel"" level. As a reminder of the key points of this way of organizing codes, the idea was to make it consistent where the code/targets are found (always within a sub-subdirectory) while allowing to share common scripts/docs/packaging/... at the ""collection"" level instead of copy/pasted within each plugin/library. 2 disadvantages that I see:; 1. it would be useful to also move the other plugins to this new hierarchy (so more files would need to be moved in the end), but this can be done later, plugin-by-plugin, depending on the main maintainers of each; 2. we might get stuck in an endless debate/discussion again...",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/482:4396,depend,depending,4396,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482,1,['depend'],['depending']
Integrability,"hi,. please give the usage or link to the code you are refering.; Yes MeshMatrixMass has been changed in several PR: https://github.com/sofa-framework/sofa/issues?q=assignee%3Aepernod+is%3Aclosed+MeshMatrixMass. For me the old behavior was wrong but it might depends how you init the component and go through a case I didn't think about.; Maybe the used topology doesn't have edges?; Probably this PR: https://github.com/sofa-framework/sofa/pull/2193/files",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901669582:259,depend,depends,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901669582,1,['depend'],['depends']
Integrability,"his PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/410:1691,message,message,1691,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410,1,['message'],['message']
Integrability,ht; 0x7fff251e0000 - 0x7fff25873fff com.apple.CoreGraphics (2.0 - 1463.3.2) <29845645-F6F2-34E0-AC0D-C659773C78ED> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics; 0x7fff25874000 - 0x7fff2596afff com.apple.ColorSync (4.13.0 - 3473.3.1) <A67D9B0A-E9FB-325A-873B-032DAF45C112> /System/Library/Frameworks/ColorSync.framework/Versions/A/ColorSync; 0x7fff2596b000 - 0x7fff259c6fff com.apple.HIServices (1.22 - 714) <780B2B09-80A6-32C8-B9E5-024988196E00> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices; 0x7fff25ab9000 - 0x7fff25c7dfff com.apple.Montreal (1.0 - 142) <A5670332-A468-35DB-9333-A53B30926E46> /System/Library/PrivateFrameworks/Montreal.framework/Versions/A/Montreal; 0x7fff25d72000 - 0x7fff26190fff com.apple.CoreData (120 - 1044.3) <7BE9684B-4439-3008-A2A7-4093BBCA180A> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData; 0x7fff26191000 - 0x7fff261a7fff com.apple.ProtocolBuffer (1 - 285.23.11.29.1) <58CD91DC-64A9-3A97-AE41-6EA30308D617> /System/Library/PrivateFrameworks/ProtocolBuffer.framework/Versions/A/ProtocolBuffer; 0x7fff261a8000 - 0x7fff26367fff libsqlite3.dylib (321.1) <ACCC6A4C-3257-38A4-8AFB-BA73D906205B> /usr/lib/libsqlite3.dylib; 0x7fff26368000 - 0x7fff263e4fff com.apple.Accounts (113 - 113) <BCB8494A-A340-30A1-928C-9B53E953328D> /System/Library/Frameworks/Accounts.framework/Versions/A/Accounts; 0x7fff263e5000 - 0x7fff263fdfff com.apple.commonutilities (8.0 - 900) <8C96D016-2B40-39C0-A51C-9CF687AE7218> /System/Library/PrivateFrameworks/CommonUtilities.framework/Versions/A/CommonUtilities; 0x7fff263fe000 - 0x7fff2647ffff com.apple.BaseBoard (526 - 526) <3A964BB6-7AB8-3B5D-BAF6-40F56D2BA393> /System/Library/PrivateFrameworks/BaseBoard.framework/Versions/A/BaseBoard; 0x7fff26480000 - 0x7fff264cbfff com.apple.RunningBoardServices (1.0 - 505.80.1) <4B9FFFB3-310F-350A-BEBB-AB779BD3F405> /System/Library/PrivateFrameworks/RunningBoardServices.framework,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:25353,Protocol,ProtocolBuffer,25353,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['Protocol'],['ProtocolBuffer']
Integrability,"https://github.com/fredroy/SofaGLFW. Why?; - Bothersome to need Qt to have a 3D rendering of a scene; - The existing ""simple"" GUI SofaGLUT is not supported anymore and is based on a deprecated library (glut). This PR brings a simple GUI based on GLFW (a spiritual heir of Glut).; It only needs SofaGUICommon, SofaBaseVisual and Sofa.GL as dependencies.; Integration of GLFW is automatic (automatic fetching and integration with cmake), and linked statically (does not need a glfw.dll to be shipped with). This GUI is launchable with the standard runSofa (with the parameter ""-g glfw""), or can be used with a (provided) stand-alone executable (which needs much less dependencies than runSofa). Lastly, this GUI was designed to support multiple windows in the same time and multiple simulations. So when multiple simulations is possible is the future, it should be easy to modify the code to support this feature.; And multiple windows could be based on the fact having multiple Camera in the scene (feature not implemented yet). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2062:339,depend,dependencies,339,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062,4,"['Integrat', 'depend', 'integrat']","['Integration', 'dependencies', 'integration']"
Integrability,https://github.com/jnbrunet/caribou. TODOs:; - Ensure in-tree and out-of-tree builds and tests are passing; - Use SOFA macros in the plugin part (SofaCaribou); - Ensure proper relocatable installation for integration in future SOFA binaries (see SofaPython3 as example),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2129:205,integrat,integration,205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2129,1,['integrat'],['integration']
Integrability,"https://github.com/sofa-framework/sofa/issues/1637. All in all, removes everything related to the ForceMask, which had been disabled (SOFA_ENABLE_MASK) for a long time.; It was also cauing bugs apparently to a lot of people. [ci-depends-on https://github.com/sofa-framework/Flexible/pull/1]; [ci-depends-on https://github.com/sofa-framework/Compliant/pull/1]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316:229,depend,depends-on,229,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316,2,['depend'],['depends-on']
Integrability,i.e. to easily define bracket x[] and len(x) operators to a python type defined in c++. (a concrete usage is coming in another PR). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/165:175,message,message,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/165,1,['message'],['message']
Integrability,ield; - TrianglePressureForceField; - [SofaConstraint]; - DistanceLMConstraint; - DOFBlockerLMConstraint; - FixedLMConstraint; - UncoupledConstraintCorrection; - [SofaDeformable] ; - MeshSpringForceField; - [SofaExporter] ; - WriteTopology; - [SofaGeneralDeformable]; - FastTriangularBendingSprings; - QuadBendingSprings; - QuadularBendingSprings; - TriangleBendingSprings; - TriangularBendingSprings; - TriangularBiquadraticSpringsForceField; - TriangularQuadraticSpringsForceField; - TriangularTensorMassForceField; - VectorSpringForceField; - [SofaGeneralEngine] ; - SmoothMeshEngine; - [SofaGeneralLoader] ; - ReadTopology; - [SofaGeneralSimpleFem]; - BeamFEMForceField; - TetrahedralCorotationalFEMForceField; - TriangularFEMForceFieldOptim; - [SofaMeshCollision]; - LineModel; - PointModel; - TriangleModel; - TriangleLocalMinDistanceFilter; - [SofaMiscCollision] ; - TetrahedronModel; - [SofaMiscFem]; - FastTetrahedralCorotationalForceField; - StandardTetrahedralFEMForceField; - TetrahedralTensorMassForceField; - TetrahedronHyperelasticityFEMForceField; - TriangleFEMForceField; - TriangularAnisotropicFEMForceField; - TriangularFEMForceField; - [SofaMiscForceField] ; - MeshMatrixMass; - [SofaMiscMapping]; - DistanceMapping; - DistanceMapping; - [SofaMiscTopology] ; - TopologicalChangeProcessor; - [SofaNonUniformFem] ; - NonUniformHexahedronFEMForceFieldAndMass; - [SofaOpenglVisual] ; - DataDisplay; - [SofaSimpleFem]; - HexahedronFEMForceField; - TetrahedronDiffusionFEMForceField; - TetrahedronFEMForceField. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1223:3482,message,message,3482,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1223,1,['message'],['message']
Integrability,ighten the plugin a little bit. New structure:. ```; SofaPython; ├── Binding.cpp; ├── Binding.h; ├── Bindings; │   ├── BaseContext.cpp; │   ├── BaseContext.h; │   ├── Base.cpp; │   ├── Base.cpp.orig; │   ├── Base.h; │   ├── Base.h.orig; │   ├── BaseLoader.cpp; │   ├── BaseLoader.h; │   ├── BaseMapping.cpp; │   ├── BaseMapping.h; │   ├── BaseMechanicalState.cpp; │   ├── BaseMechanicalState.h; │   ├── BaseMeshTopology.cpp; │   ├── BaseMeshTopology.h; │ └── ...; ├── CMakeLists.txt; ├── initSofaPython.cpp; ├── PythonCommon.h; ├── PythonEnvironment.cpp; ├── PythonEnvironment.h; ├── PythonFactory.cpp; ├── PythonFactory.h; ├── PythonMacros.cpp; ├── PythonMacros.h; ├── PythonToSofa.inl; ├── PythonVisitor.cpp; ├── PythonVisitor.h; ├── SceneLoaderPY.cpp; ├── SceneLoaderPY.h; ├── scn2python.py; ├── ScriptController; │   ├── PythonMainScriptController.cpp; │   ├── PythonMainScriptController.h; │   ├── PythonScriptController.cpp; │   ├── PythonScriptController.h; │   ├── PythonScriptControllerHelper.cpp; │   ├── PythonScriptControllerHelper.h; │   ├── PythonScriptDataEngine.cpp; │   ├── PythonScriptDataEngine.h; │   ├── PythonScriptEvent.cpp; │   ├── PythonScriptEvent.h; │   ├── PythonScriptFunction.cpp; │   ├── PythonScriptFunction.h; │   ├── ScriptController.cpp; │   ├── ScriptController.h; │   ├── ScriptDataEngine.cpp; │   ├── ScriptDataEngine.h; │   ├── ScriptEvent.cpp; │   ├── ScriptEvent.h; │   ├── ScriptFunction.cpp; │   └── ScriptFunction.h; ├── SofaPythonConfig.cmake.in; ├── SofaPython.txt; └── ...; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/616:1700,message,message,1700,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616,1,['message'],['message']
Integrability,"ignored scene: DistanceGridForceField-liver.scn. This way, the scene has to remain ignored to build the plugin in default mode (we need it for SofaImplicitField, which is needed for a bunch of examples). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/594:303,message,message,303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/594,1,['message'],['message']
Integrability,"ime and everywhere we manipulate a Data<>. To be sure the code does not fall back to DefaultTypeInfo... most of the specilization are made visible in DataTypeInfo.h where a lot of data types ""vector, rigid, map, vec, quat"". All these includes are just there to insure that in Sofa no-one will never fallback on the default dehavior. But static type info is kind of ""expert"" feature that is only usefull in few rare use cases. So polluting the complete dependency tree (and compilation unit) for a rarely use case is problematic. . So I tried to reverse all to implement an opt-in solution ... by default and for most of our code base, dynamic typeinfo (aka the one following the AbstractTypeInfo interface) are available because they only requires opaque data types. And it is only on purpose that developper can include (most of the time in a .cpp) the static typeinfos. So in short...it is abstract by default and static after a specific include. Bying abstract by default ...make that the dependencies is reduced a lot. . This PR:; - add DataTypeId<xxxx> so we can have an unique id per data type. This unique id is statically allocated and is used a way to access the DataTypeInfoRegistry in an efficiant way. ; - add a unique storage repository (DataTypeInfoRegistry). This storage is holding all the typeinfo use in Sofa. There is two way ; to be registered in the repository, the first one consist consist in explcitly adding a typeinfo instance in the storage. This is what to do when we want to be sure the fully defined data type is registered. ; - the other was implemented to mimick at best the the existing behavior in Sofa while fixing some of its error. It works the following way... when a Data<Type> is used this automatically trigs the setting of the typeinfo in the repository. If no DataTypeInfo<> is available this fallback to the default one but the data info cannot be used... if in a subsequent compilation unit (.cpp) the same Data<Type> is used with the complete type, the r",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552:2432,depend,dependencies,2432,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552,1,['depend'],['dependencies']
Integrability,"in #4272 |; | stb | header-only | `extlibs` | MIT | OK |; | TinyXML | static | `extlibs` | zlib **(should be in a separate file)** | Externalize tinyxml dependency: #4240 (waiting for merge) |; | miniFlowVR | static | `applications/plugins/SofaDistanceGrid/extlibs` | LGPL (version ?) **(should be in a separate file)** | Not built by default. TODO: plugin to be externalized (#1442 ) |; | newmat | static | `applications/plugins/SofaNewmat/extlibs` | type inconnu | Not built by default. TODO: plugin to be externalized (#1442 ) |; | CImg | header-only | `applications/plugins/CImgPlugin/extlibs` | CeCILL-C / CeCILL | OK |; | csparse | static | `Sofa/Component/LinearSolver/Direct/extlibs` | **no license file** | Plugin to be externalized. WIP : #4258 |; | metis | static | `Sofa/Component/LinearSolver/Direct/extlibs` | Apache v2 | Externalize metis dependency : #4266 (waiting for merge) |; | gtest | shared | `Sofa/framework/Testing/extlibs` | BSD-3-Clause | Externalize ? |; | cxxopts | header-only | `Sofa/GUI/Common (fetched from GitHub)` | MIT | Add to possibility to use external dependency and prevent from fetching: Fixed in #4273 |; | libQGLViewer | shared | `Sofa/GUI/Qt` | GPL | Find or use embedded code (find module being fixed in #4290) |. The actions we should take to make our code compatible for the conda package on conda-forge are:; 1. Fix the missing licenses files (points in bold); 2. Avoid all static libraries. For point 2, we are not concerned by miniFlowVR and newmat, as we do not compile the corresponding plugins for the conda package, at least for now. Before considering any action on these two, do the SofaDistanceGrid and SofaNewmat plugins are still used and planned to be maintained in future releases ?. Regarding other static libs (TinyXML, csparse and metis), could we consider to switch to an external dependency instead ? For TinyXML, the current behavior is to first look for an external package, and fallback to embedded version if unavailable. This loo",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4221:1378,depend,dependency,1378,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4221,2,['depend'],['dependency']
Integrability,"in DataExchange component, add exchanges of image data types (ImageUC, ImageUS, ImageF), requiring a depedency with the image plugin; + add a simple example passing an image from an ImageContainer (Thread 1) to an ImageViewer (Thread 2); + fix OpenGL issues in the draw() function in the Kinect component in the image plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/769:425,message,message,425,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/769,1,['message'],['message']
Integrability,"in ForceField_test, {Multi,Multi2}Mapping_test.; (+ minor cleaning). EDIT: I also added a missing automatic test for MultiMapping::getK. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/209:236,message,message,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/209,1,['message'],['message']
Integrability,"in TetrahedronHyperelasticityFEMForceField.inl , gl.h was included before anything, so the macros defined in build_option_opengl.h were ignored.; The inclusion of gl.h was useless anyway so it was removed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1193:305,message,message,305,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1193,1,['message'],['message']
Integrability,"in having code that rely on these to stop compiling. To update the non-compiling code you need to addi explicitely the includes the code is actually used. . If you only need type declaration (an not definition), please use the foward declaration .h file; eg: sofa/core/fwd.h . The following one may be the one you need:; ```cpp; #include <sofa/core/behavior/BaseMechanicalState.h>; #include <sofa/simulation/Node.h>; #include <sofa/core/visual/VisualParams.h>; #include <SofaEigen2Solver/EigenSparseMatrix.h>; #include <sofa/defaulttype/TopologyTypes.h>	; #include <cstddef>; #include <string>	; #include <sofa/core/objectmodel/BaseObject.h>; #include <SofaBaseMechanics/MechanicalObject.h>; #include <sofa/core/behavior/MechanicalState.h>	; #include <sofa/core/ConstraintParams.h>; #include <sofa/core/CollisionModel.h>	; #include <sofa/core/ExecParams.h>	; #include <SofaMeshCollision/TriangleModel.h>	; #include <SofaBaseCollision/SphereModel.h>; ```. To cut into the dependency tree I introduce opaque function for the most commonly used in .h; The choosen convention was to use a namespace that is symetric to the class name. ; So the opaque version of ```sofa::core::BaseContext::getDt()``` is ```sofa::core::objectmodel::basecontext::getDt(BaseContext*);``` . For the moment, all the opaque function are added in the per namespace fwd.h.; The following ones has been introduced.; In sofa/simulation/fwd.h; ```cpp; Node* sofa::simulation::node::getNodeFrom(BaseContext*);; Node* sofa::simulation::node::getNodeFrom(Base*);; Base* sofa::simulation::node::toBase(Node*);; BaseContext* sofa::simulation::node::toBaseContext(Node*);; ```. In sofa/core/fwd.h; ```; sofa::core::objectmodel::basecontext::getDt(BaseContext*); ; sofa::core::objectmodel::basecontext::getTime(BaseContext*); ; ```. NB: it is possible if the use of these opaque function generalize to move the definition of these ones into more narrow file eg:; sofa/core/objectmodel/node-c-api.h. Finally, if you observe strange consequ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1764:1021,depend,dependency,1021,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1764,1,['depend'],['dependency']
Integrability,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/572:6196,wrap,wraps,6196,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572,2,"['message', 'wrap']","['message', 'wraps']"
Integrability,"in order to be informed when a scene is loaded. WARNING: each SceneLoader's loading function must call ""notifyLoadingScene"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/204:224,message,message,224,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/204,1,['message'],['message']
Integrability,"in sofa_install_libraries:. cyclic recursions when globbing for external libraries due to symlinks resolution.; I have done this fix for about a month and a half now, without noticing any side effects, but I can't tell if there are any. ______________________________________________________ ; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/766:337,message,message,337,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/766,1,['message'],['message']
Integrability,"ing CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Install prefix: /home/thebigone/projects/sofa/build/install; -- Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.2"") ; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Check if compiler accepts -pthread; -- Check if compiler accepts -pthread - yes; -- Found Threads: TRUE ; CMake Deprecation Warning at CMakeLists.txt:225 (message):; Deprecated components are activated (SOFA_WITH_DEPRECATED_COMPONENTS; variable is ON). -- Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; **CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Boost (missing: system filesystem program_options) (found; version ""1.71.0"")**; Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindBoost.cmake:2179 (find_package_handle_standard_args); SofaKernel/SofaFramework/SofaMacros.cmake:526 (find_package); SofaKernel/modules/SofaHelper/CMakeLists.txt:6 (sofa_find_package). -- Configuring incomplete, errors occurred!; See also ""/home/thebigone/projects/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/thebigone/projects/sofa/build/CMakeFiles/CMakeError.log"". ``; $ sudo apt install libboost-dev; ``; Reading package lists... Done; Building dependency tree ; Reading state information... Done; **libboost-dev is already the newest version (1.71.0.0ubuntu2).**; The following packages were automatically installed and are no longer required:; libdrm2:i386 libexpat1:i386 libglapi-mesa:i386 libglvnd0:i386 libx11-xcb1:i386 libxcb-dri2-0:i386 libxcb-dri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1462:1663,message,message,1663,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1462,1,['message'],['message']
Integrability,"ing and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SU",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:2293,message,message,2293,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['message'],['message']
Integrability,"ing for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Check if compiler accepts -pthread; -- Check if compiler accepts -pthread - yes; -- Found Threads: TRUE ; CMake Deprecation Warning at CMakeLists.txt:225 (message):; Deprecated components are activated (SOFA_WITH_DEPRECATED_COMPONENTS; variable is ON). -- Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; **CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Boost (missing: system filesystem program_options) (found; version ""1.71.0"")**; Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindBoost.cmake:2179 (find_package_handle_standard_args); SofaKernel/SofaFramework/SofaMacros.cmake:526 (find_package); SofaKernel/modules/SofaHelper/CMakeLists.txt:6 (sofa_find_package). -- Configuring incomplete, errors occurred!; See also ""/home/thebigone/projects/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/thebigone/projects/sofa/build/CMakeFiles/CMakeError.log"". ``; $ sudo apt install libboost-dev; ``; Reading package lists... Done; Building dependency tree ; Reading state information... Done; **libboost-dev is already the newest version (1.71.0.0ubuntu2).**; The following packages were automatically installed and are no longer required:; libdrm2:i386 libexpat1:i386 libglapi-mesa:i386 libglvnd0:i386 libx11-xcb1:i386 libxcb-dri2-0:i386 libxcb-dri3-0:i386 libxcb-glx0:i386 libxcb-present0:i386 libxcb-sync1:i386 libxdamage1:i386 libxfixes3:i386; libxshmfence1:i386 libxxf86vm1:i386; Use 'sudo apt autoremove' to remove them.; 0 upgraded, 0 newly installed, 0 to remove and 107 not upgraded. Alban. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1462:2397,depend,dependency,2397,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1462,1,['depend'],['dependency']
Integrability,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1120,message,message,1120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,2,['message'],['message']
Integrability,"ipal advantage: we will be able to get redistributable plugin binaries through a classic SOFA build. . ### [Defrost binaries changes for a better install, specifically on MacOS](https://github.com/sofa-framework/sofa/commit/22f3c14a25bf879143fb58403a34d569e8ab727f); - [CMake] FIX install: SofaMiscCollision, SofaDistanceGrid, SofaImplicitField; - [CMake] FIX install on MacOS: differentiate SOFA_BUILD_RELEASE_PACKAGE and SOFA_BUILD_APP_BUNDLE; - [SofaMacros] ADD backward compatibility for INCLUDE_INSTALL_DIR; - [SofaMacros] ADD EXAMPLE_INSTALL_DIR to sofa_create_package; - [SofaMacros] Improve sofa_set_python_directory macro; - [SofaPython] Wider dir search for env loading; - [SofaGuiQt] Remove VSync message; - [package.cmake] Do not force CMAKE_BUILD_TYPE + Enable more plugins. ### [[DiffusionSolver] MOVE from image/extlibs to a real plugin](https://github.com/sofa-framework/sofa/commit/54f49d039aadaffd57a1d7f8ebab3af82e407674); I see no reason not to do that. Dependencies to DiffusionSolver are simpler this way. ### [[CImgPlugin] CLEAN include directory](https://github.com/sofa-framework/sofa/commit/1a617d5350f74ac4a816255960d92638a26cba1b); Sources moved to `src`. No more `../` horror in CImgPlugin include directories. ## Other changes. - [SofaHelper] FIX DynamicLibrary altered search path (Windows only) ; Needed to prefer `bin` libraries over neighboor libraries; - [SofaFramework] FIX typo in config.h.in; - [runSofa] Check if plugins dir exists before adding to PluginRepository; - [SofaTest] FIX SofaPython finding in *Config.cmake.in; - [plugins] ADD missing *Config.cmake.in files; Needed to use them as real plugins; - [All] Improve sofa_copy_libraries and sofa_install_libraries macros; Make them easier to use; - [CMake] Rename sofa_set_python_directory into sofa_install_pythonscripts; Clearer name in my opinion + using CMake multiValueArgs; - [CMake] Update package.cmake to enable plugins; Prepare package.cmake to produce binaries with all plugins from ""options"" ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1018:3429,Depend,Dependencies,3429,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1018,1,['Depend'],['Dependencies']
Integrability,"issofa_multithreading is a few commits behind our public integrated branch. ; Almost all the commits are directly related to the `Multithreading` plugin, see https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. There is also one particular fix related to the concurrent call to `DDGNode::update` method ; https://github.com/InSimo/sofa/commit/2e8d6f33b597ff6dbd568c67dfac7715850f8015",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228:57,integrat,integrated,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228,1,['integrat'],['integrated']
Integrability,"issue sofa-framework/sofa#2 Fix compilation when option SOFA_FLOATING_POINT_TYPE in CMake selected as float. The problem arising when trying to compile with float was due to missing declaration from newmat external library.; The library has been modified for sofa to use a #define SOFA_FLOAT in include.h; However the SOFA_FLOAT was never defined for the extlib since the current procedure is to set CMake variable SOFA_FLOAT and SOFA_DOUBLE to 1. This was done anyway AFTER processing the cmake of the extlibs. Therefore, this pr moves the option for floating point type in sofa in the root CMakeLists and adds the #define for the newmat library to actually create the float type functions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/262:791,message,message,791,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262,1,['message'],['message']
Integrability,"it is difficult to spot quickly which plugin is externalized or not in the centralized plugin folder. So this PR gathers all of these into a same folder (namely `external_plugins`) and are added to the cmake configure process after the `plugins/` one. This implies that plugins in `plugins/` does not depend on things from `external_plugins/`, which should be normal as externalized plugins are supposed to be less a priority than the `plugins`. EXCEPT **SofaPython3** 🤔. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4505:301,depend,depend,301,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4505,1,['depend'],['depend']
Integrability,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1127,message,messages,1127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008,4,['message'],"['message', 'messages']"
Integrability,"lDeformable; Adding module SofaGeneralEngine; Adding module SofaGeneralExplicitOdeSolver; Adding module SofaGeneralImplicitOdeSolver; Adding module SofaGeneralLinearSolver; Adding module SofaGeneralRigid; Adding module SofaGeneralObjectInteraction; Adding module SofaGeneralSimpleFem; Adding module SofaGeneralTopology; Adding module SofaTopologyMapping; Adding module SofaUserInteraction; Adding module SofaSparseSolver; SofaSparseSolver: using built-in metis library; Adding module SofaPreconditioner; Adding module SofaHaptics; Adding module SofaValidation; Adding module SofaDenseSolver; Adding module SofaNonUniformFem; Adding module SofaOpenglVisual; Adding module SofaMiscTopology; Adding module SofaMiscExtra; Adding module SofaMiscForceField; Adding module SofaMiscEngine; Adding module SofaMiscSolver; Adding module SofaMiscFem; Adding module SofaMiscMapping; Adding plugin SofaPython; Adding module SofaExporter; CMake Deprecation Warning at SofaAdvanced/CMakeLists.txt:15 (message):; SofaAdvanced is deprecated.; You should now explicitely find (find_package) and link (target_link_library) each module you need within: ; SofaNonUniformFem. CMake Deprecation Warning at SofaMisc/CMakeLists.txt:21 (message):; SofaMisc is deprecated.; You should now explicitely find (find_package) and link (target_link_library) each module you need within: ; SofaMiscExtra;SofaMiscEngine;SofaMiscFem;SofaMiscForceField;SofaMiscMapping;SofaMiscSolver;SofaMiscTopology. Adding collection SofaComponentAll; SofaTest: optional dependency SofaPython found, Python_test will be built; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format disabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin SofaMiscCollision; SofaMiscModule: build all maintained sofa components.; SofaMiscCollision: optional dependency SofaSphFluid not found de-activing: <SpatialGridPointModel>; Adding application getDeprecatedComponents; Adding application runSofa; Write Plugin list at C",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1623:2615,message,message,2615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1623,1,['message'],['message']
Integrability,link to issue #1538 . to be discussed.. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1546:139,message,message,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1546,1,['message'],['message']
Integrability,"member `Data` in a component is to do something like:. ``` c++; MyComponent() ; : my_data( initData(&my_data, init_value, ""friendly name"", ""help message"") ) { ; // ...; }; ```. At this point one can remark that most information provided to `initData` depends on the component _class_, and not on the component _instance_ being constructed, save for the initial value and the pointer to the current instance (used by the data as its 'owner'). . Now what happens when the data is constructed using `initData`?; 1. some `BaseInitData` objet is created, mostly holding pointers to character strings and owner,; 2. `BaseData` is constructed from `BaseInitData` (`BaseData.cpp:70`) where the following happens:; 1. data links for `inputs` and `outputs` are setup, 2x `std::vector::push_back`; 2. data are added back to their owner (from which they come anyway) 1x `std::vector::push_back` + 1x `std::map::insert` for aliases. There is also the `DDGNode` base class initialization, which also incurs at least `initLink` for members `inputs` and `outputs` (cf `DDGNode.cpp:43`), each again causing `addLink` back to the owner and an extra `std::vector::push_back`. Phheew. Now you probably see where I am heading at: do we really need to pay a worst case 6x heap allocation for every single data in every single component created? Or at least, can this cost be alleviated somehow?. **Are there component examples that manage `Data` which are not known at compile-time ?**. If most/all the use-cases are in fact per-class, it is relatively easy to imagine a system that maps names to instance members constructed statically, so that component instances don't have to hold and allocate a vector of pointers to their own datas (!). Data links are more tricky since they depend on the graph, but my opinion is that there should be at least a way to disable automatic link management when they are not needed. . Now thanks for reading this far, I look forward to hearing the community's opinion on the subject :-)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44:2284,depend,depend,2284,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44,1,['depend'],['depend']
Integrability,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:1620,depend,dependency,1620,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224,3,"['depend', 'integrat']","['dependency', 'integrate', 'integrating']"
Integrability,meshconv needs miniflowVR in order to compile.; But the oblivious user is not supposed to know that.... So this fix:; - avoids building meshconv if SOFA_BUILD_MINIFLOWVR is not activated.; - warns the user he needs to activate the previous cmake option. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/358:353,message,message,353,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/358,1,['message'],['message']
Integrability,"miniFlowVR, an extlib of Sofa, is used for ; - managing a file format for DistanceGrid (component of plugin SofaDistanceGrid); - as a dependency for meshconv, a commandline utility for meshes and used mainly to create the previous file format for DistanceGrid. So as it seems all was related to DistanceGrid:; - miniFlowVR was moved into SofaDistanceGrid (and thus depolluting the main tree of Sofa with the extlib thing); - as a small consequence, move meshconv into SofaDistanceGrid. It is deemed OK as:; - it seems not a lof of people uses meshconv as it is (I remember fixing the compilation ages ago and nobody said anything). Moreover, even its CMakefile was quite ill-formed. ; - meshconv was originally a part of FlowVR itself apparently, so it makes sense to regroup of all of these codes. Additionnally, SofaDistanceGrid was cleanup (reorganizing files like the template, cleaner CMake etc). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1616:134,depend,dependency,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1616,1,['depend'],['dependency']
Integrability,"missing libs in target_link_libraries for SofaBase, SofaCommon and SofaGeneral after ""modularization"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1381:202,message,message,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1381,1,['message'],['message']
Integrability,"mple, people include sofa/helper/system/gl.h (or any gl-related header), even without needing OpenGL actually. ; And in this header, **SOFA_NO_OPENGL** does include (or not) the good gl.h header according to your OS. So if you enable this header, you still include gl.h, which does nothing.; This is quite nonsensical.; Moreover, if the macro is not well handled in CMake, you may have some weird things happening. # Solution; This PR regroups all OpenGL related code in the core in a single package, needing only SofaHelper and SofaDefaulttype.; If you wish to be able to call OpenGL things, just find_package() it and link it to your library; ```; find_package(Sofa.GL REQUIRED); ...; target_add_library(${Target} PUBLIC .... Sofa.GL); ```. You can even conditionnally test if OpenGL is present or not with ; ```; if(Sofa.GL_FOUND); ...; endif(); ```; if needed (to compile specific components in your module for example). And even more, if you want to compile specific parts of your code with OpenGL (not a good idea but still), you can use this like an external dependency.; Example with **ColourPickingVisitor** in **SofaGuiCommon**.; CMakeLists.txt:; ```; sofa_find_package(Sofa.GL) # create the cmake var SOFAGUICOMMON.GL_HAVE_SOFA.GL; ```; config.h.in; ```; #define SOFAGUICOMMON_HAVE_SOFA_GL @SOFAGUICOMMON_HAVE_SOFA.GL@; ```; ColourPickingVisitor.cpp; ```; void ColourPickingVisitor::processTriangleModel(simulation::Node * node, sofa::component::collision::TriangleCollisionModel<sofa::defaulttype::Vec3Types> * tmodel); {; #ifdef SOFAGUICOMMON_HAVE_SOFA_GL; using namespace sofa::core::collision;; using namespace sofa::defaulttype;; glDisable(GL_LIGHTING);; ....; #endif // SOFAGUICOMMON_HAVE_SOFA_GL; ```; # Compatibility with actual code and breaking things; This new module follows the new targeted architecture for Sofa(NG), hence the Sofa.GL syntax.; All classes/functions are now in the namespace sofa::gl and in the folder sofa/gl; e.g Texture, ; **sofa/gl/Texture.h**; ```; namesp",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1649:1552,depend,dependency,1552,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1649,1,['depend'],['dependency']
Integrability,"n, the problem is that by default access to the static version (so the one that need the full inclusion of involved data types) to generate the dynamic one in the VirtualTypeInfo::get() method. As this function is needed to implement Data<T>::getAbstractTypeInfo it means that the complete static version is needed everytime and everywhere we manipulate a Data<>. To be sure the code does not fall back to DefaultTypeInfo... most of the specilization are made visible in DataTypeInfo.h where a lot of data types ""vector, rigid, map, vec, quat"". All these includes are just there to insure that in Sofa no-one will never fallback on the default dehavior. But static type info is kind of ""expert"" feature that is only usefull in few rare use cases. So polluting the complete dependency tree (and compilation unit) for a rarely use case is problematic. . So I tried to reverse all to implement an opt-in solution ... by default and for most of our code base, dynamic typeinfo (aka the one following the AbstractTypeInfo interface) are available because they only requires opaque data types. And it is only on purpose that developper can include (most of the time in a .cpp) the static typeinfos. So in short...it is abstract by default and static after a specific include. Bying abstract by default ...make that the dependencies is reduced a lot. . This PR:; - add DataTypeId<xxxx> so we can have an unique id per data type. This unique id is statically allocated and is used a way to access the DataTypeInfoRegistry in an efficiant way. ; - add a unique storage repository (DataTypeInfoRegistry). This storage is holding all the typeinfo use in Sofa. There is two way ; to be registered in the repository, the first one consist consist in explcitly adding a typeinfo instance in the storage. This is what to do when we want to be sure the fully defined data type is registered. ; - the other was implemented to mimick at best the the existing behavior in Sofa while fixing some of its error. It works t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552:2136,interface,interface,2136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552,1,['interface'],['interface']
Integrability,"n.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for possible plugin locations so either the method `Utils::getPluginDirectory()` should use internally of the `PluginRepository` global object, or the method should be removed entirely for consistency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1319,depend,depend,1319,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659,1,['depend'],['depend']
Integrability,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1173,depend,dependency,1173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,2,['depend'],['dependency']
Integrability,"nique id per data type. This unique id is statically allocated and is used a way to access the DataTypeInfoRegistry in an efficiant way. ; - add a unique storage repository (DataTypeInfoRegistry). This storage is holding all the typeinfo use in Sofa. There is two way ; to be registered in the repository, the first one consist consist in explcitly adding a typeinfo instance in the storage. This is what to do when we want to be sure the fully defined data type is registered. ; - the other was implemented to mimick at best the the existing behavior in Sofa while fixing some of its error. It works the following way... when a Data<Type> is used this automatically trigs the setting of the typeinfo in the repository. If no DataTypeInfo<> is available this fallback to the default one but the data info cannot be used... if in a subsequent compilation unit (.cpp) the same Data<Type> is used with the complete type, the registring is done again...and if the type is more complete...then the old (partial) type is replaced with the new one. ; - the common data type info are now in their own file in sofa/defaulttype/typeinfo/TypeInfo_XXXX.h/cpp; - the templated code shared between multiple data type info are now in the sofa/defaulttype/typeinfo/models/XXXXX.h; - there is no more dependency to some specific contained data type (eg: RGBAcolor, Vec, Matrice, Set,) in AbstractDataTypeInfo or DataTypeInfo.; - there is a mechanism to get the list of registered typeinfo and wheter the are fully defined or only partially. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552:3801,depend,dependency,3801,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Qt.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SceneCreator/lib/libSceneCreator.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/ArticulatedSystemPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:14:09.408: Failed to load module ""canberra-gtk-module""; Gtk-Message: 22:14:09.409: Failed to load module ""canberra-gtk-module""; [INFO] [SofaPluginManager] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:11913,depend,depends,11913,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['depend'],['depends']
Integrability,"nk inherits DDGNode.; A DDGLink thus benefits from the whole dirty flag propagation thingy, and implements the update() function to clean its dirty flag, and update from its inputs.; Just like Datas, a DDGLink also possesses a counter, that is incremented when the link value changes. Just like BaseLinks, and SPtrs, to retrieve the object linked with a DDGLink, you need to call the get() method. The set() method will set the link. When a link is set within a DDGLink, the componentState of the linked object is set as input to that DDGLink. It's up to you to connect your DDGLink to some datas to connect your dependency graph. Contrary to the current link implementation in SOFA, these links, can be very easily manipulated as their base class (BaseDDGLink), or as DDGNodes even. DDGLinks are parsed in Base::parseField just like BaseLinks and BaseDatas, which makes them usable with the BaseObjectDescriptions. (they really mirror the behavior of all other field types.). A very simple test case is present in this PR to show you how it's used. You can reference your links with their pathnames, just like normal datas or links, by calling the getPathName() method. There's not bi-directionality implemented in this PR, (because I didn't have time in the end...) but it's not rocket science:; - all there is to do is add a vector of Base* in Base with helper methods to add, remove retrieve the list of link owners. Then in DDGLink::set(), call the add() method of your link to register`this`. (maybe in another PR...) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1226:1801,message,message,1801,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226,1,['message'],['message']
Integrability,"nment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/171:1873,message,message,1873,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171,1,['message'],['message']
Integrability,non-ASCII chars caused problems in some platform when compiling; Discussed in [Issue323](https://github.com/sofa-framework/sofa/issues/323). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/327:240,message,message,240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/327,1,['message'],['message']
Integrability,normals and vectors to Legacy vtk import. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/536:141,message,message,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536,1,['message'],['message']
Integrability,"nt code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on P",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:1289,message,message,1289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,1,['message'],['message']
Integrability,"nti-pattern is very challenging, because it is used to (a) check constraints on data fields as well as to (b) initialize the internal logic of the component. The problem I see is that the two things are being interleaved in a very subtle way. And both (a) and (b) rely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in the UI. ; - in some case it seem",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:997,interface,interface,997,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832,1,['interface'],['interface']
Integrability,"o that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:3634,message,message,3634,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,2,['message'],['message']
Integrability,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3774,message,message,3774,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566,2,['message'],['message']
Integrability,"oduces a new API for targets and packages management, following this scheme:. ```cmake; sofa_create_package_with_targets() # replacing sofa_generate_package. sofa_create_package() # replacing sofa_write_package_config_files. sofa_add_targets_to_package() # replacing sofa_install_targets; if(AUTO_SET_TARGET_PROPERTIES); sofa_auto_set_target_properties() # from a part of sofa_install_targets; endif(); sofa_install_targets_in_package() # from a part of sofa_install_targets; ; if(RELOCATABLE); sofa_set_target_install_relocatable() # replacing sofa_set_install_relocatable; endif(); ```. You can now use only what you need. ; The mega-master-calling-all-the-others macro is sofa_create_package_with_targets (replacing sofa_generate_package). ## Usual examples. To create a ""plugin"" package like SofaExporter:; ```cmake; sofa_create_package_with_targets(; PACKAGE_NAME SofaExporter; PACKAGE_VERSION ${SofaExporter_VERSION}; TARGETS SofaExporter AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaExporter""; RELOCATABLE ""plugins""; ); ```. To create a ""legacy meta-module"" package like SofaGeneral:; ```cmake; sofa_create_package_with_targets(; PACKAGE_NAME SofaGui; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS SofaGui AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaGui""; ); ```. To register a ""legacy module"" target like SofaGeneralEngine:; ```cmake; sofa_add_targets_to_package(; PACKAGE_NAME SofaGeneral; TARGETS SofaGeneralEngine AUTO_SET_TARGET_PROPERTIES; ); ``` . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1433:1933,message,message,1933,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1433,1,['message'],['message']
Integrability,"ofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.; I don't know this plugin enough... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316:2244,depend,dependency,2244,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316,1,['depend'],['dependency']
Integrability,"ok sorry, got it. Yes I have duplicated this method in #1223. In the idea of deleting both. The idea was to make a smooth transition period:; - All updated component use now a SingleLink to the topology they want (allowing multiple topologies in the same context) and if not set, use GetMeshTopologyLink() with a warning telling that the result is uncertain.; - Component still using the old method GetMeshTopology should have a deprecated method message in 19.12 before deletion in 20.06. I let that unfinished. ; So as you want either we put the deprecated message or we replace directly both methods by a new one like ""GetFirstEncounteredTopology"" inside a breaking PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605896582:447,message,message,447,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605896582,2,['message'],['message']
Integrability,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:380,message,message,380,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211,12,['message'],"['message', 'messages']"
Integrability,"ok, as long as it doesn't crash and the user has error message. 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3400#issuecomment-1282019824:55,message,message,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3400#issuecomment-1282019824,1,['message'],['message']
Integrability,"olver; Adding module SofaGeneralImplicitOdeSolver; Adding module SofaGeneralLinearSolver; Adding module SofaGeneralRigid; Adding module SofaGeneralObjectInteraction; Adding module SofaGeneralSimpleFem; Adding module SofaGeneralTopology; Adding module SofaTopologyMapping; Adding module SofaUserInteraction; Adding module SofaSparseSolver; SofaSparseSolver: using built-in metis library; Adding module SofaPreconditioner; Adding module SofaHaptics; Adding module SofaValidation; Adding module SofaDenseSolver; Adding module SofaNonUniformFem; Adding module SofaOpenglVisual; Adding module SofaMiscTopology; Adding module SofaMiscExtra; Adding module SofaMiscForceField; Adding module SofaMiscEngine; Adding module SofaMiscSolver; Adding module SofaMiscFem; Adding module SofaMiscMapping; Adding plugin SofaPython; Adding module SofaExporter; CMake Deprecation Warning at SofaAdvanced/CMakeLists.txt:15 (message):; SofaAdvanced is deprecated.; You should now explicitely find (find_package) and link (target_link_library) each module you need within: ; SofaNonUniformFem. CMake Deprecation Warning at SofaMisc/CMakeLists.txt:21 (message):; SofaMisc is deprecated.; You should now explicitely find (find_package) and link (target_link_library) each module you need within: ; SofaMiscExtra;SofaMiscEngine;SofaMiscFem;SofaMiscForceField;SofaMiscMapping;SofaMiscSolver;SofaMiscTopology. Adding collection SofaComponentAll; SofaTest: optional dependency SofaPython found, Python_test will be built; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format disabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin SofaMiscCollision; SofaMiscModule: build all maintained sofa components.; SofaMiscCollision: optional dependency SofaSphFluid not found de-activing: <SpatialGridPointModel>; Adding application getDeprecatedComponents; Adding application runSofa; Write Plugin list at C:/SOFA/build/master/bin/plugin_list.conf.default; Configuring done; Generating done",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1623:2840,message,message,2840,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1623,3,"['depend', 'message']","['dependency', 'message']"
Integrability,"om what I know of). ## Breaking; ### Code; Same as #1734:; - if inclusion of _defaulttype_ and _type_ namespace, the compiler cannot chose which one to chose for the free functions like invert, etc. when the code did not called them from their respective namespace.It was not a problem because the compiler could find them previously thanks to [ADL](https://en.wikipedia.org/wiki/Argument-dependent_name_lookup).; Fixing is easy by just adding the respective namespace.; - vector_device now needs a new template parameter, implementing ZeroConstructor and SimpleCopy (already done in SofaCUDA and SofaOpenCL). ### Functionality:; - vector does not use the Messaging mechanism anymore; it was used in the `int` and `unsigned int` specialized version of read(). Instead, I replaced it with std::cerr AND setting a failbit to the resulting stream (which should have been done before actually).; Furthermore, I also changed Data to catch any cerr message (if any) and transpose it into the Messaging mechanism (if the stream as a failbit flag enabled) ; - vector can check bounds with the operator[], in debug mode. ; Before, it was displaying a message (with the Messaging mechanism), tried to dump the stack and quit on an assertion error.; Now it throws an exception (with the same message) which : ; - makes it crash if it is not caught (like before actually); - displays the message and carry on if caught somewhere (and can further debug with stack trace or whatever); which is a not so-bad solution in my opinion. ## Talking; - the cerr thingy; - template parameters; - access bound thing. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only i",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1893:1843,message,message,1843,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1893,1,['message'],['message']
Integrability,"ompile-time, and it is not possible to use runtime polymorphism. Therefore, it was not possible to uncouple the solver itself from the ordering method. To comply with the new design, I introduced a factory that can be enriched in the new Metis plugin. This factory is able to register types and use runtime polymorphism using a few C++ tricks. The only concern is that the solvers in the factory will not use the algorithms from the `BaseOrderingMethod`. Instead, they use a simple string (defined in a `BaseOrderingMethod`), and its mapping to a type. This has to be registered in the initialization of the module. I tried hard to use the intelligence of the component instead of relying on a string and a factory, but the design of Eigen is not compatible. In order to not force the users to add an ordering method in their scenes, a default one is created automatically by the linear solver. It instantiates `MetisOrderingMethod` if it can find it, otherwise it's `AMDOrderingMethod`. Here are the tasks in a future PR:. 1. Create a plugin for Metis; 2. Move `MetisOrderingMethod` into this plugin; 3. Move some unit tests in this plugin; 4. Update the regression references; 5. Update `FillReducingOrdering`; 6. Remove METIS dependency in `LinearSolver.Direct`; 7. Create a new plugin for Scotch. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4477:1999,depend,dependency,1999,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4477,1,['depend'],['dependency']
Integrability,"onent.Collision.Detection.Intersection; Adding module Sofa.Component.Collision.Response; Adding module Sofa.Component.Collision.Response.Mapper; Adding module Sofa.Component.Collision.Response.Contact; Adding module Sofa.Component.Setting; Adding module Sofa.Component.Controller; Adding module Sofa.Component.Engine; Adding module Sofa.Component.Engine.Analyze; Adding module Sofa.Component.Engine.Generate; Adding module Sofa.Component.Engine.Select; Adding module Sofa.Component.Engine.Transform; Adding module Sofa.Component.Haptics; Adding library Sofa.GL; Found OpenGL: /usr/lib/x86_64-linux-gnu/libOpenGL.so ; Found GLEW: /usr/include (found version ""2.1.0"") ; Adding module Sofa.GL.Component; Adding module Sofa.GL.Component.Rendering2D; Adding module Sofa.GL.Component.Rendering3D; Adding module Sofa.GL.Component.Engine; Adding module Sofa.GL.Component.Shader; Adding module Sofa.GUI.Component; Adding library Sofa.GUI.Common; cxxopts version 2.2.0; -- Sofa.GUI.Common: Sofa.GL dependent features enabled.; Adding library Sofa.GUI.Batch; Adding library Sofa.GUI.Qt; Sofa.GUI.Qt: will use Qt5; Sofa.GUI.Qt: Qt5Charts not found. No chart nor Profile will be compiled; -- FFmpeg executable was found /usr/bin/ffmpeg; Sofa.GUI.Qt: QtCharts not found, SofaWindowProfiler will not be built.; Sofa.GUI.Qt: Qt5WebEngine not found, QDocBrowser will not be built.; Adding collection SofaGui; Adding collection SofaGuiCommon; Adding collection SofaGuiQt; Adding collection SofaFramework; Adding collection SofaSimulation; Adding collection SofaBase; Adding collection SofaSimpleFem; Adding collection SofaRigid; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collectio",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:5642,depend,dependent,5642,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,2,['depend'],['dependent']
Integrability,"ontext manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411:1934,message,message,1934,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411,1,['message'],['message']
Integrability,"ood as it is misleading on the purpose of the function.; In the following example ; ```cpp; MyObject* ptr;; Base::className(ptr); ; ```; You don't see this is a templated method and you have no idea what 'ptr' is for, and you don't even know if putting a nullptr will work or not. ; Using the templated only syntax is more clear on the role of the function; ```cpp; Base::className<MyObject>(); ; ```; Or if you have an object instance; ```cpp; Base::className<declspec(obj)>(); ; ```. Most common code update pattern; ============================; The most common compilation problem you will encounter with non updated external plugin is related to the overriding of getTemplateName or templateName() method. This method is now now considered as final and thus it is not possible to override it anymore. ; To update old code like this: ; ```cpp; MyClass : public BaseObject; virtual std::string getTemplateName() const { return templateName(); } ; static std::string templateName(const CapsuleCollisionModel<DataTypes>* = nullptr); {; return DataTypes::Name();; }; ```; You can remove the code as the default name generation mecanisme can handle that for you automatically using the ""Name"" . . In the case if your DataTypes does not have a Name() function or if some of the class template parameters should not be exposed as runtime template then you need to implement your custom naming scheem by implementing the following function; ```cpp; static const std::string CustomTemplateName(); { ; return ""CustomName"";; }; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1283:4341,message,message,4341,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283,1,['message'],['message']
Integrability,"ory;. // collision pipeline; using sofa::component::collision::detection::algorithm::DefaultPipeline;; using sofa::component::collision::detection::algorithm::BruteForceBroadPhase;; using sofa::component::collision::detection::algorithm::BVHNarrowPhase;; using sofa::component::collision::detection::intersection::NewProximityIntersection;; using sofa::component::collision::response::contact::DefaultContactManager;; using sofa::component::collision::geometry::PointCollisionModel;. // mechanical object; using sofa::component::statecontainer::MechanicalObject;; using sofa::defaulttype::StdVectorTypes;; using sofa::type::Vec;. using sofa::core::behavior::MechanicalState;; using sofa::core::State;; using sofa::core::objectmodel::New;; using sofa::core::objectmodel::Data;. using sofa::simulation::DefaultAnimationLoop;. int main(int argc, char** argv); {; sofa::helper::logging::MessageDispatcher::addHandler(&sofa::helper::logging::MainLoggingMessageHandler::getInstance());; sofa::helper::logging::MessageDispatcher::addHandler(&sofa::helper::logging::MainPerComponentLoggingMessageHandler::getInstance());; sofa::helper::logging::MainLoggingMessageHandler::getInstance().activate();. sofa::helper::BackTrace::autodump();. sofa::simulation::graph::init();. sofa::simulation::setSimulation(new sofa::simulation::graph::DAGSimulation());. for (int i = 0; i < 1000; i++) {. Node::SPtr groot = sofa::simulation::getSimulation()->createNewGraph(""root"");; groot->setGravity({ 0,0,0 });; groot->setDt(0.02);. DefaultAnimationLoop::SPtr animationLoop = New<DefaultAnimationLoop>();; groot->addObject(animationLoop);. // collision pipeline; DefaultPipeline::SPtr collisionPipeline = New<DefaultPipeline>();; collisionPipeline->setName(""Collision Pipeline"");; groot->addObject(collisionPipeline);. // collision detection system; BruteForceBroadPhase::SPtr broadPhaseDetection = New<BruteForceBroadPhase>();; broadPhaseDetection->setName(""Broad Phase Collision Detection"");; groot->addObject(broadPhaseDete",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147:2687,Message,MessageDispatcher,2687,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147,2,['Message'],['MessageDispatcher']
Integrability,"or}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const sofa::core::MechanicalParams * mparams) Line 38	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsolver::MatrixLinearSolver<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>,sof",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1680,Message,MessageDispatcher,1680,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,1,['Message'],['MessageDispatcher']
Integrability,"per.dll!std::_Mutex_base::lock() Line 50	C++; 	[Inline Frame] Sofa.Helper.dll!std::lock_guard<std::mutex>::{ctor}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const sofa::core::MechanicalParams * mparams) Line 38	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsol",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1563,Message,MessageDispatcher,1563,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,2,['Message'],"['Message', 'MessageDispatcher']"
Integrability,"pological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/217:1663,depend,depending,1663,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217,2,"['depend', 'message']","['depending', 'message']"
Integrability,"ported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to us",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:1956,message,messages,1956,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['message'],['messages']
Integrability,"pp.o (3280 ms); SquareMapping_test.cpp.o (3239 ms); RigidMapping_test.cpp.o (3089 ms); SquareDistanceMapping_test.cpp.o (2976 ms); ... 19187 ms: sofa/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src/sofa/simulation/MechanicalVisitor.h (included 100 times, avg 191 ms), included via:; initSofaDenseSolver.cpp.o MatrixLinearSolver.inl MatrixLinearSolver.h (440 ms); StaticSolver.cpp.o StaticSolver.h MechanicalMatrixVisitor.h (427 ms); NewMatCGLinearSolver.cpp.o CGLinearSolver.inl CGLinearSolver.h MatrixLinearSolver.h (404 ms); DefaultMultiMatrixAccessor.cpp.o DefaultMultiMatrixAccessor.h (388 ms); PrecomputedLinearSolver.cpp.o PrecomputedLinearSolver.inl PrecomputedLinearSolver.h MatrixLinearSolver.h (367 ms); MatrixLinearSolver.cpp.o MatrixLinearSolver.inl MatrixLinearSolver.h (350 ms); ... 18437 ms: /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/basic_string.h (included 167 times, avg 110 ms), included via:; cmake_pch.hxx Messaging.h MessageDispatcher.h Message.h iostream ostream ios ios_base.h locale_classes.h string (203 ms); cmake_pch.hxx Base.h StringUtils.h string (198 ms); cmake_pch.hxx Base.h StringUtils.h string (196 ms); cmake_pch.hxx Base.h StringUtils.h string (195 ms); cmake_pch.hxx Base.h StringUtils.h string (194 ms); cmake_pch.hxx Base.h StringUtils.h string (182 ms); ... 18298 ms: sofa/modules/SofaGuiQt/src/sofa/gui/qt/ModifyObject.h (included 19 times, avg 963 ms), included via:; MaterialDataWidget.cpp.o MaterialDataWidget.h DataWidget.h (1881 ms); StructDataWidget.cpp.o StructDataWidget.h SimpleDataWidget.h DataWidget.h (1645 ms); QDisplayDataWidget.cpp.o QDisplayDataWidget.h DataWidget.h (1580 ms); DisplayFlagsDataWidget.cpp.o DisplayFlagsDataWidget.h DataWidget.h (1567 ms); QRGBAColorPicker.cpp.o QRGBAColorPicker.h DataWidget.h (1555 ms); moc_QDisplayPropertyWidget.cpp.o QDisplayPropertyWidget.h (1496 ms); ... 17890 ms: sofa/modules/SofaGuiCommon/src/sofa/gui/BaseGUI.h (included 15 times, avg 1192 ms), included via:; ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:37757,Message,Message,37757,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['Message'],['Message']
Integrability,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1555,Message,Message,1555,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494,5,"['Message', 'message']","['Message', 'MessageAsTestFailure', 'message']"
Integrability,"r design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` will incorrectly use the `initData()` version without default value but with one boolean flag, as `""mydefaultvalue""` is a `const char*` which requires a ""user-defined"" conversion to `std::string`, while `""help message""` is implicitely convertible to `bool` without any ""user-defined"" conversion, so preferred by the compiler. So if we break the compatibility to the current `initData()` API, I would strongly suggest to remove this issue, by removing the two optional bool flags which are seldom used anyway (and can be replaced by a call to `setDisplayed()` or `setReadOnly()`).; * compared to when this code was originally written, c++ now allows to put initializers of member variables in the class declaration directly, which for Data members could be preferable to initializing them in the constructor (the name and help message would be visible in the header instead of the implementation, it does not need to be duplicated in case there are multiple constructors, and there would no longer be any unhelpful warnings on some compilers about mismatched initialization orderings). I'm not suggesting to d",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:1989,message,message,1989,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283,4,['message'],['message']
Integrability,"ra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giang/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:8798,message,message,8798,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,2,['message'],['message']
Integrability,rapid fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/343:110,message,message,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/343,1,['message'],['message']
Integrability,raries were hiding the system's ones. Example of CMake warnings from the out-of-tree plugins:. ```cmake; Cannot generate a safe runtime search path for target MyProject; because files in some directories may conflict with libraries in implicit; directories:. runtime library [libGLEW.so.2.1] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_filesystem.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_program_options.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_thread.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_date_time.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_chrono.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_system.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_atomic.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; ```. See https://github.com/sofa-framework/sofa/issues/1153 for more details. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1387:1841,message,message,1841,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1387,1,['message'],['message']
Integrability,"ration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_sub",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1677,protocol,protocol,1677,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819,4,"['integrat', 'protocol']","['integration', 'protocol']"
Integrability,"re a couple that fail because the access method operator[] doesn't make sense or can't be overriden (operator[] exists for Eigen::Matrix so its ambiguos for example). This is the list I had to specialize. ```template <>; void MechanicalObject<VNCS::F33D>::vThreshold(sofa::core::VecId v, double t); {; // Do nothing; }; template <>; double MechanicalObject<VNCS::F33D>::vDot(const core::ExecParams *, core::ConstVecId a, core::ConstVecId b); {; Real r = 0.0;; return r;; }. template <>; double MechanicalObject<VNCS::F33D>::getConstraintJacobianTimesVecDeriv(unsigned int line, core::ConstVecId id); {; SReal result = 0;; return result;; }. template <>; void MechanicalObject<VNCS::F33D>::applyScale(const double sx, const double sy, const double sz); {; }; template <>; void MechanicalObject<VNCS::F33D>::storeResetState(); {; // store a reset state only for independent dofs (mapped dofs are deduced from independent dofs); if (!isIndependent()); return;; }. template <>; void MechanicalObject<VNCS::F33D>::buildIdentityBlocksInJacobian(const sofa::helper::vector<unsigned int> &list_n,; core::MatrixDerivId &mID); {; }. template <>; SReal MechanicalObject<VNCS::F33D>::vSum(const core::ExecParams *params, core::ConstVecId a, unsigned l); {; Real r = 0.0;; return r;; }. template <>; SReal MechanicalObject<VNCS::F33D>::vMax(const core::ExecParams *params, core::ConstVecId a); {; Real r = 0.0;; return r;; }. template <>; void MechanicalObject<VNCS::F33D>::getConstraintJacobian(const core::ConstraintParams *cParams,; sofa::defaulttype::BaseMatrix *J,; unsigned int &off); {; }; ```. Im not sure if this specializations make sense, but I think they do as in my particular case VNCS::F33D is a dependent DoF and I am using a CG solver, so I think most of them are not called anyway. . I found that if a DataType can only be used as a dependent DoF (for example, in this case, VNCS::F33D is a deformation gradient which is by definition a dependent DoF), that storeResetState could be specialized.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184:1879,depend,dependent,1879,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184,3,['depend'],['dependent']
Integrability,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1576,message,messages,1576,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,4,['message'],"['message', 'messages']"
Integrability,remove all unnecessary warnings in CUDA files; The extern declaration o template was necessary for old gcc but it raise warnings with newer version.; I don't know the behavior on windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1548:287,message,message,287,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1548,1,['message'],['message']
Integrability,remove deprecated macro:; - SOFA_TRANGLEFEM; - SOFA_TRANGLEFEM_MSG. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1233:167,message,message,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1233,1,['message'],['message']
Integrability,rk/Versions/A/PrintCore; 0x7fff2c05a000 - 0x7fff2c126fff com.apple.TextureIO (3.10.9 - 3.10.9) <50BA07A4-02E8-38EE-B0B9-B12C277B563B> /System/Library/PrivateFrameworks/TextureIO.framework/Versions/A/TextureIO; 0x7fff2c127000 - 0x7fff2c12ffff com.apple.InternationalSupport (1.0 - 60) <DE997943-6AD5-32DA-B48E-78170C1EAA7B> /System/Library/PrivateFrameworks/InternationalSupport.framework/Versions/A/InternationalSupport; 0x7fff2c130000 - 0x7fff2c1abfff com.apple.datadetectorscore (8.0 - 674) <A4EBFF22-F861-321A-AF28-1DB8ECB9A4FF> /System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore; 0x7fff2c1ac000 - 0x7fff2c20afff com.apple.UserActivity (435 - 435) <12250395-D660-3CC1-81DB-565340F2651B> /System/Library/PrivateFrameworks/UserActivity.framework/Versions/A/UserActivity; 0x7fff2c20b000 - 0x7fff2c976fff com.apple.MediaToolbox (1.0 - 2765.6.4.2) <C8645EA0-643D-38CF-AA88-3253339192B1> /System/Library/Frameworks/MediaToolbox.framework/Versions/A/MediaToolbox; 0x7fff2ce30000 - 0x7fff2ce58fff com.apple.locationsupport (2420.12.16 - 2420.12.16) <63AB1284-8E33-3E9D-A857-9370F492B343> /System/Library/PrivateFrameworks/LocationSupport.framework/Versions/A/LocationSupport; 0x7fff2ce59000 - 0x7fff2ce8afff libSessionUtility.dylib (76.7) <6AAD02A0-9590-3CED-9568-36E05C59AA2B> /System/Library/PrivateFrameworks/AudioSession.framework/libSessionUtility.dylib; 0x7fff2ce8b000 - 0x7fff2cfbbfff com.apple.audio.toolbox.AudioToolbox (1.14 - 1.14) <8E53C25F-9FE2-372E-8374-6A598D72C4C1> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox; 0x7fff2cfbc000 - 0x7fff2d023fff com.apple.audio.AudioSession (1.0 - 76.7) <F696F4EC-9344-3C85-941E-6E5EF5CEF585> /System/Library/PrivateFrameworks/AudioSession.framework/Versions/A/AudioSession; 0x7fff2d024000 - 0x7fff2d036fff libAudioStatistics.dylib (25.4) <303533DD-D001-3CE8-A5A4-EC29F464FC3A> /usr/lib/libAudioStatistics.dylib; 0x7fff2d037000 - 0x7fff2d046fff com.apple.speech.synthesis.framework (9.0.51,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:56123,MediaT,MediaToolbox,56123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['MediaT'],['MediaToolbox']
Integrability,"rk/sofa/commit/5b0585f9ad2884cb5462884dffd711ae4d6f2266); **THIS FEATURE IS OPTIONAL**. See the RELOCATABLE parameter of sofa_generate_package.; When building and installing SOFA with plugins - internal (in applications/plugins) or external (included with SOFA_EXTERNAL_DIRECTORIES) - the plugins will not be mixed with SOFA anymore.; Instead, they will be installed in their own directory under `<install_prefix>/plugins`.; More importantly, they will be relocatable which means they will behave like if they were built out-of-SOFA.; Principal advantage: we will be able to get redistributable plugin binaries through a classic SOFA build. . ### [Defrost binaries changes for a better install, specifically on MacOS](https://github.com/sofa-framework/sofa/commit/22f3c14a25bf879143fb58403a34d569e8ab727f); - [CMake] FIX install: SofaMiscCollision, SofaDistanceGrid, SofaImplicitField; - [CMake] FIX install on MacOS: differentiate SOFA_BUILD_RELEASE_PACKAGE and SOFA_BUILD_APP_BUNDLE; - [SofaMacros] ADD backward compatibility for INCLUDE_INSTALL_DIR; - [SofaMacros] ADD EXAMPLE_INSTALL_DIR to sofa_create_package; - [SofaMacros] Improve sofa_set_python_directory macro; - [SofaPython] Wider dir search for env loading; - [SofaGuiQt] Remove VSync message; - [package.cmake] Do not force CMAKE_BUILD_TYPE + Enable more plugins. ### [[DiffusionSolver] MOVE from image/extlibs to a real plugin](https://github.com/sofa-framework/sofa/commit/54f49d039aadaffd57a1d7f8ebab3af82e407674); I see no reason not to do that. Dependencies to DiffusionSolver are simpler this way. ### [[CImgPlugin] CLEAN include directory](https://github.com/sofa-framework/sofa/commit/1a617d5350f74ac4a816255960d92638a26cba1b); Sources moved to `src`. No more `../` horror in CImgPlugin include directories. ## Other changes. - [SofaHelper] FIX DynamicLibrary altered search path (Windows only) ; Needed to prefer `bin` libraries over neighboor libraries; - [SofaFramework] FIX typo in config.h.in; - [runSofa] Check if plugins d",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1018:3163,message,message,3163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1018,1,['message'],['message']
Integrability,rojectToPointConstraint; - QuadPressureForceField ; - SurfacePressureForceField; - TaitSurfacePressureForceField ; - TrianglePressureForceField; - ParabolicConstraint; - ConstantForceField ; - LinearForceField; - EdgePressureForceField ; - OscillatingTorsionPressureForceField; - HermiteSplineConstraint ; - LinearVelocityConstraint; - [SofaConstraint] ; - DOFBlockerLMConstraint ; - FixedLMConstraint; - UncoupledConstraintCorrection; - [SofaMiscFem] ; - TriangleFEMForceField; - TriangularAnisotropicFENForceField; - TriangularFEMForceField; - [SofaMiscFem]; - FastTetrahedralCorotationalForceField; - StandardTetrahedralFEMForceField; - TetrahedralTensorMassForceField; - TetrahedronHyperelasticityFEMForceField; - [SofaMiscForceField] ; - MeshMatrixMass; - [SofaExporter] ; - WriteTopology; - [SofaMiscTopology] ; - TopologyChangeProcessor; - [SofaGeneralEngine] ; - SmoothMeshEngine; - [SofaDeformable] ; - MeshSpringForceField. Component previously upgraded in #1183 : ; - DiagonalMass; - [SofaGeneralSimpleFEM]; - BeamFEMForceField; - TetrahedralCorotationalFEMForceField; - TriangularFEMForceFieldOptim; - [SofaSimpleFEM]; - HexahedronFEMForceField; - TetrahedronFEMForceField; - TetrahedronDiffusionFEMForceField; - NonUniformHexahedronFEMForceField; - [SofaGeneralDeformable] ; - QuadBendingSpring; - QuadularBendingSprings; - VectorSpringFF; - FastTriangularBendingSpring; - TriangleBendingSpring; - TriangularBendingSpring; - TriangularBiquadraticSpringFF; - TriangularQuadraticSpringFF; - TriangularTensorMassFF; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1199:1999,message,message,1999,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1199,1,['message'],['message']
Integrability,"rty**: The component is ready to be used, but requires a call to reinit() to update some of its datafields.; - **invalid**:; 1. An error happened during init, reinit or any of the methods called during the simulation step. A call to reinit might fix it; 2. A call to reinit has been made, but the method is improperly implemented, such as one or more Data field has not been updated (call to getValue / updateIfDirty etc...). Because I don't trust programmes to implement the mechanism in their own components, and because it would require all already-implemented component to perform checks in order to get a consistent idea of what's happening, I decided to (try to) embed the state setting mechanisms inside the simulation:. - **setDirtyValue()** on a data sets the dirty state on its owner; - **cleanDirty()** on a data looks at all its owner's data fields and if they're all clean, sets the Valid state on it; - **initVisitor() / init / bwdInit python binding** uses the MessageHandler API to verify that no msg_error has been triggered, and sets either the Valid or Invalid state on the component; - **reinit pythonBinding / the Qt GUI's ModifyObject** calls reinit, and that call is wrapped the same MessageHandling mechanism to set or unset the Valid / Invalid flag. _**LIMITATIONS**_; There is a weak link in this approach:; reinit() will NOT unset the Invalid flag from a component if it is called from elsewhere than the GUI's ModifyObject api. This can happen often: when calling reinit from a c++ program that doesn't use runSofa's GUI for instance.; In order to guarantee that the state is set properly on reinit(), reinit should be a delegate method nested in a method performing the check on the msg_error, and setting the Valid / Invalid flag appropriately. This would be a **VERY** breaking, and time consuming task. calling the state updating mechanisms from the python bindings, visitors & GUI is kind of QuickNDirty but should reveal all components that aren't implementing proper",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/823:1460,Message,MessageHandler,1460,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/823,3,"['Message', 'wrap']","['MessageHandler', 'MessageHandling', 'wrapped']"
Integrability,"runSofa's QtViewer and the new SofaQtQuick interface create a ""Core Profile"" OpenGL context on Linux, with Intel GPUs, with the following error messages:. > QtViewer: OpenGL 4.5 (Core Profile) Mesa 17.0.2 context created.; > Error: GL_ARB_multitexture not supported; > ########## SIG 11 - SIGSEGV: segfault ##########. A core profile context isn't likely to support the ARB_multitexture extension because that extension is specific to the fixed-function pipeline. (For more information: [Check this thread on OpenGL's forum](https://www.opengl.org/discussion_boards/showthread.php/199472-GL_ARB_multitexture-not-supported?p=1286582). Bug reproduced on 3 laptops with intel graphics, with Intel's drivers installed, on Ubuntu 16.04 and Arch linux.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/238:43,interface,interface,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/238,2,"['interface', 'message']","['interface', 'messages']"
Integrability,"s [VisualStyle] ; ; MainHeader(rootNode,; plugins=['SofaPython3', 'SoftRobots'],; gravity=[0.0, -9810, 0.0]). ContactHeader(rootNode,; alarmDistance=5,; contactDistance=1,; frictionCoef=0.6). rootNode.VisualStyle.displayFlags = ""showBehaviors showCollisionModels"". Floor(rootNode, **floorParam). cube = Cube(rootNode, **cubeParam); cube.addObject('UncoupledConstraintCorrection'). for i in range(len(fingersParameters)):; finger = ElasticMaterialObject(attachedTo=rootNode,; volumeMeshFileName=fingersVolumeMesh,; name=fingersParameters[i]['name'],; rotation=fingersParameters[i]['rotation'],; translation=fingersParameters[i]['translation'],; surfaceMeshFileName=fingersSurfaceAndCollisionMesh,; collisionMesh=fingersSurfaceAndCollisionMesh,; withConstrain=True,; surfaceColor=fingersColor,; poissonRatio=poissonRatioFingers,; youngModulus=youngModulusFingers,; totalMass=fingersMass). finger.dofs.name = 'tetras'; rootNode.addChild(finger). finger.integration.rayleighStiffness = 0.1; finger.integration.rayleighMass = 0.1. finger.addObject('BoxROI', name='boxROI', box=fingersParameters[i]['ROIBox'], drawBoxes=True, doUpdate=False); finger.addObject('RestShapeSpringsForceField', points='@../Finger1/boxROI.indices', stiffness=1e12,; angularStiffness=1e12). PneumaticCavity(surfaceMeshFileName=fingersCavitySurfaceMesh,; attachedAsAChildOf=finger,; name='Cavity',; rotation=fingersParameters[i]['rotation'],; translation=fingersParameters[i]['translation'],; initialValue=cavitiesInitialValue,; valueType='pressure'). rootNode.addObject(WholeGripperController(node=rootNode)); `; `# -*- coding: utf-8 -*-; import math. # User parameters; cubeParam = {'name': ""Cube"",; 'totalMass': 0.002,; 'translation': [15.0, 20.0, 0.0],; 'uniformScale': 21}. floorParam = {'name': ""Plane"",; 'color': [1.0, 0.0, 1.0],; 'isAStaticObject': True,; 'uniformScale': 3}. # Fingers Mesh & Shared Parameters; fingersVolumeMesh = 'data/mesh/pneunetCutCoarse.vtk'; fingersSurfaceAndCollisionMesh = 'data/mesh/pneunetCut.s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/5060:4916,integrat,integration,4916,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5060,1,['integrat'],['integration']
Integrability,"s afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-m",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453:1169,depend,dependencies,1169,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453,1,['depend'],['dependencies']
Integrability,serialisation work on color datatype. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/472:137,message,message,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/472,1,['message'],['message']
Integrability,"setParent is called on Datas when parsing BaseObjectDescriptions on BaseObjects.; The default behavior is incompatible with the Data-based API we want to substitute to the current Link system between components. I thus want to be able to override the default setParent() behavior in my ObjectLink POC (see [here](https://github.com/SofaDefrost/ComponentData_POC/pull/1) for draft implementation). Please, don't hesitate to comment on the PR on the POC repository's pull request mentioned above. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1224:594,message,message,594,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1224,1,['message'],['message']
Integrability,"size() != indices.size()` in the RestShapeSpringsForceField and tried to improve the overall error management on this component. I ended up doing the following changes:. - Call reinit() in bwdInit; - Using componentState to set the state to invalid when necessary (no stiffness set, out of bounds indices etc & check for component state in addForce / addDForce / addKToMatrix ..); - Improvement of warning messages (IMHO); - refactor code duplication; - remove warnings by changing int -> size_t for BaseMatrix::Index (got carried away here, sorry about that). **### BREAKING because:**. - Change in behavior in specific cases:. 1. empty stiffness vector: **Before:** setting arbitrary stiffness at 100.0 for all indices ; **Now:** msg_error & invalid state. ; 2. stiffness.size() != indices.size(): **Before:** applying stiffness[0] to all indices ; **Now:** ; ```py; if len(stiffness) > len(indices): ; crop(stiffness); else if len(stiffness) == 1:; stiffness.resize(len(indices), stiffness[0]); else if len(stiffness < len(indices):; ```; Generalized to angularStiffness on Rigids. - size_t in methods signature break API compatibility. I wouldn't call this component ""clean"" after those changes though, but it's a start. As stuff still to do to improve, I see:. - Using DataTrackers to call reinit() when necessary; - get rid of bwdInit by using componentState + datatrackers to reinit component; - remove those ugly getContext to retrieve the external mstate used for rest shape, by replacing them with a data or a link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1103:1752,message,message,1752,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1103,1,['message'],['message']
Integrability,"small PR to remove function handleTopologyChange() from BaseMaterial component, where it is implemented but empty.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/817:215,message,message,215,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/817,1,['message'],['message']
Integrability,"sofa::helper::afficheResult definition no longer exists, resulting in unresolved external link error with msvc during debug compilation. I stumbled upon an unresolved external which apparently was introduced by a42dcec ; I guess the initial intent was to replace this method by a new method called `resultToString`, but its declaration did not make it through the header file. I suspect the unresolved external should have been caught by other compilers, but am I the only one; to compile in debug mode sometimes ?; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/473:615,message,message,615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/473,1,['message'],['message']
Integrability,sofa\applications\plugins\SofaHAPI\CMakeList.txt; Line 81: endif(); Error: ; endif An ENDIF command was found outside of a proper IF ENDIF structure.; Or its arguments did not match the opening IF command. I believe we should remore this line. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1074:343,message,message,343,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1074,1,['message'],['message']
Integrability,"sout/serr (and sendl) were wrappers for std::cout & std::cerr to get access to the streams for the GUIs initially. After the introduction of the Messaging system, it was deemed deprecated (there is even a compat layer, redirecting sout/serr to msg_info(), msg_warning(), etc), but never enforced and never publicized actually. This PR officially deprecates it by still being able to use it but will warn at compilation time if anybody uses the stream operators with serr/sendl. (you can see that on the CI log for the soon-to-be-dropped plugin like Flexible or Compliant). This PR also (should) remove all those serr/sout/sendl in SOFA itself and the supported plugins. EDIT: Adding ""breaking"" label because serr was throwing ""WARNING"" before (yeah makes sense), so it cannot be replaced 1-on-1 with msg_error( could be msg_warning as well). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2292:27,wrap,wrappers,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2292,1,['wrap'],['wrappers']
Integrability,speaks for itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1511:118,message,message,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1511,1,['message'],['message']
Integrability,"steps of the project.; Tasks NG1 and NG2 can be done in parallel if we work ""bottom->top"" in NG1 and ""top->bottom"" in NG2.; Task NG3 can also be started in parallel. We need to iterate on the architecture proposal to refine it as much as possible before steps NG1 and NG2 are over.; Task NG4 cleaning the applications/plugins repository in order to better handle code lifecycle. ### NG1: Simplify headers dependency graph by removing un-needed includes. 1. SofaKernel; - clean/rewrite/reorganize SofaHelper and SofaDefaulttype #1521 ; - remove completely useless files. <img src=""https://user-images.githubusercontent.com/11028016/106575747-b3910180-653c-11eb-8f43-6ec65390ce2f.png"" width=""350"" > &nbsp; <img src=""https://user-images.githubusercontent.com/11028016/106575725-ae33b700-653c-11eb-89e3-4bdeae912a94.png"" width=""350"" >. 2. Other modules (SofaGeneral, etc); - clean deps (useless includes, use lower level objects, etc), linked with the following NG2 actually. SOFA modules dependency (library link) graph: https://www.sofa-framework.org/graph/. *clang tools?*; *include-what-you-need?*. ### NG2: Pluginize all SOFA modules; Pluginizing a module = making it a [CMake Package](https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html) that can be enabled/disabled in SOFA CMake options.; Pluginizing **does not mean** moving files (it did in the past). The module stays in place, only the CMake files change. The Components within the module stay in place too. Done module pluginizations: https://github.com/sofa-framework/sofa/issues?q=is%3Amerged+label%3A%22NG2%3A+pluginization%22. Quick schematics on the current state and what will be achieved:. <img src=""https://www.sofa-framework.org/wp-content/uploads/2020/10/stc9_overview_v20.06.png"" width=""40%"" height=""auto"" /> &nbsp; <img src=""https://www.sofa-framework.org/wp-content/uploads/2020/10/stc9_modularization_plan.png"" width=""40%"" height=""auto"" />. [SOFA Modules' plan](https://drive.google.com/file/d/14H2YRu0z8usiqTpGQuxc",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1527:1747,depend,dependency,1747,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527,1,['depend'],['dependency']
Integrability,"steps, which makes the code more consistent. Note also the introduction of `ComputeIsolatedForceVisitor` (see the comments in the code to understand its purpose). # Multithreading. Since `AnimateVisitor` is no longer used, `SolveVisitor` is used instead, providing optional multithreading, i.e. solving each ODE in parallel. Similar to what was done in the `FreeMotionAnimationLoop`. ## Benchmark. Measured on `examples/Component/SolidMechanics/FEM/TetrahedronFEMForceField.scn`. Without parallelism; ```; [INFO] [BatchGUI] 1000 iterations done in 14.7031 s ( 68.0128 FPS).; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 2 0.03 1 10.57 27.32 11.94 2.11 11.94 82.14 ..solve; ```. With parallelism; ```; [INFO] [BatchGUI] 1000 iterations done in 7.13825 s ( 140.09 FPS).; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 2 0.03 1 3.53 6.85 4.45 0.81 4.45 63.60 ..solve; ```. The simulation is 2x faster. But there are 4 different objects, so we expected a speed-up of 4x. However, the speed-up is only about the `solve` function. Another time consuming function is the `end event` when computing the von Misses stresses. Still, the solve function only shows a speedup of 2.68x, instead of 4x. I cannot explain it for now... [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/362]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959:2903,depend,depends-on,2903,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959,1,['depend'],['depends-on']
Integrability,still this package dependencies approach...why not considering using https://buckaroo.pm/ or similar project ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369907224:19,depend,dependencies,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369907224,1,['depend'],['dependencies']
Integrability,"sure @jnbrunet ; These integration factors are not widely used (actually almost not used at all!). These factors define how to bring back the results of the constraint problem (Lagrange multipliers ) as position or velocity field. These factors usually only depend on the scheme.; For practical reason (I guess), these factors can be manually tuned in the UncoupledCC. The API in ODESolver (integration schemes) defining these factors is unclear and could be updated. See the functions:; - *getPositionIntegrationFactor*; - *getVelocityIntegrationFactor*; - *getIntegrationFactor*; - *getSolutionIntegrationFactor*. Does this answer your point?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145:23,integrat,integration,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145,3,"['depend', 'integrat']","['depend', 'integration']"
Integrability,"t otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiable directly in python. The constructor requires a `Node` as first parameter.; - `onLoaded` and `createGraph` entry points are no longer called when classes are instantiated directly from python. Corresponding code belongs to the derived class constructor.; - creating instances ""the old way"" through `node.createGraph` has unchanged behavior; - the workaround module `SofaPython.script` now features a deprecation message, together with a derived class easing transition (calls `createGraph` on construction, warns if `onLoaded` is defined); - updated `ControllerVariable.py` example ; - some minor cleanups; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283:3198,message,message,3198,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283,2,['message'],['message']
Integrability,"t possible this module have a python binding which allows to write interesting editing interaction in python:; ```python; from SofaEditor import SofaEditor. def onDraw():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test fa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735:1757,integrat,integrate,1757,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735,1,['integrat'],['integrate']
Integrability,"t.Collision.Detection; Adding module Sofa.Component.Collision.Detection.Algorithm; Adding module Sofa.Component.Collision.Detection.Intersection; Adding module Sofa.Component.Collision.Response; Adding module Sofa.Component.Collision.Response.Mapper; Adding module Sofa.Component.Collision.Response.Contact; Adding module Sofa.Component.Setting; Adding module Sofa.Component.Controller; Adding module Sofa.Component.Engine; Adding module Sofa.Component.Engine.Analyze; Adding module Sofa.Component.Engine.Generate; Adding module Sofa.Component.Engine.Select; Adding module Sofa.Component.Engine.Transform; Adding module Sofa.Component.Haptics; Adding library Sofa.GL; Adding module Sofa.GL.Component; Adding module Sofa.GL.Component.Rendering2D; Adding module Sofa.GL.Component.Rendering3D; Adding module Sofa.GL.Component.Engine; Adding module Sofa.GL.Component.Shader; Adding module Sofa.GUI.Component; Adding library Sofa.GUI.Common; cxxopts version 2.2.0; -- Sofa.GUI.Common: Sofa.GL dependent features enabled.; Adding library Sofa.GUI.Batch; Adding library Sofa.GUI.Qt; Sofa.GUI.Qt: will use Qt5; Sofa.GUI.Qt: Qt5Charts not found. No chart nor Profile will be compiled; -- FFmpeg executable was found /usr/bin/ffmpeg; Sofa.GUI.Qt: QtCharts not found, SofaWindowProfiler will not be built.; Sofa.GUI.Qt: Qt5WebEngine not found, QDocBrowser will not be built.; Adding collection SofaGui; Adding collection SofaGuiCommon; Adding collection SofaGuiQt; Adding collection SofaFramework; Adding collection SofaSimulation; Adding collection SofaBase; Adding collection SofaSimpleFem; Adding collection SofaRigid; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collectio",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:4252,depend,dependent,4252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062,2,['depend'],['dependent']
Integrability,"tView, in applications/sofa/gui/qt. The current implementation stores a pointer to every registered listeners in every node in the scene graph. Instead, the implementation proposed in this PR registers the listeners in the root node and child nodes forward the notifications to it. Also, the overloads are currently relying on the call super (the child class reimplements the method, then calls its base class implementation) This approach is [known to be error prone](https://en.wikipedia.org/wiki/Call_super) and can be reimplemented using delegates instead. Finally, this PR also adds extra delegates in the Nodes listeners notifications system and in the MutationListener, called *AFTER* the graph's edition. those are used in SofaQtQuick to be notified that the graph has indeed been updated. . Here are 2 quick UML diagrams showing the 2 architecture's differences. This one is the current implementation in sofa:; ![code_smell](https://user-images.githubusercontent.com/13734391/52288894-5245f000-296d-11e9-83b6-12f6ce1385f9.png). And this one is what this PR does:; ![code_clean](https://user-images.githubusercontent.com/13734391/52288978-730e4580-296d-11e9-9057-451922e971c8.png). Also, if someone could tell me what the master / slave relationship between BaseObjects are, I'd be curious to know if it is still in use in SOFA. It doesn't seem to be used in Listeners.. maybe added for Compliant / Flexible?. __This PR could potentially be breaking for plugins & projects implementing their own MutationListeners__. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/917:1970,message,message,1970,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917,1,['message'],['message']
Integrability,"ted with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you want is to have access to the concrete type of Matrix and Vector used by the solver. Also from my understanding only `LinearSolver` instances that derive from `MatrixLinearSolver` implement these kind of methods, so maybe a first step would be to move them here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459:8657,message,message,8657,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459,1,['message'],['message']
Integrability,"test concurrent access to LCPForceFeedback computeforce from another thread. This PR depends on #1576 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1581:85,depend,depends,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1581,1,['depend'],['depends']
Integrability,"the SofaPython plugin is in a very poor shapes with two serious problems. The first one is a problem for developper with a lot of duplicated or invalid or in-elegant code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:1059,message,message,1059,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,1,['message'],['message']
Integrability,"the checkTopology Data is only used to activate/unactivate the method CheckTopology. ; It should not change message conditio. If it is the case, I missed it. Could you point the line?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1353#issuecomment-631316753:108,message,message,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1353#issuecomment-631316753,1,['message'],['message']
Integrability,"the fact that the two components presented two representations of the spring list: one gather more information than the other, and the second one being less practical to work with especially in scene building.; - In SpringFF every spring is listed in a data list of LinearSpring. Along with this the two topologySubestIndices where here to cope for topological changes; - In StiffSpringFF, along with the inherited data from SpringFF, lied the indices lists and a single data for stiffness and damping. . In order to be as conservative as possible, I tried in this PR to only do the merge while keeping every current features enabled. This leads in a double representation of the spring list: the list `d_springs` and the tuple `d_springsIndices[0], d_springsIndices[1], d_ks, d_kd, d_lengths, d_elongationOnly, d_enabled` that needs to be kept coherent constantly through call back. This is cumbersome because we cannot have a circular dependency, and has thus been solved by implicitly defining a hierarchy between the two representation : the tuple representation is the master one, and the spring list follows it. This would be better if we could have a read only data so that the user cannot access the spring list. . The spring list is still useful for three things :; 1. the CUDA implementation (but not mandatory, removing it would require a significant refactoring); 2. the huge number of existing example scenes using SpringForceField that uses this representation in the scene; 3. the extensive use of this representation in the python bindings (especially the linearSpring that has no other purpose that this API). Other than that, it has no real superiority over the proposed parallel representation using a single vector for each spring parameter except for the fact that we don't need to keep coherency over all of the vectors... ; Although the tuple enable more versatile scene description. For example, the input indices can now come from other component while no difficult assemblin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2252777879:2218,depend,dependency,2218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2252777879,1,['depend'],['dependency']
Integrability,"then implicitly load plugin B). Then PluginManger, when trying to check if plugin A does implement `entrypoint()` will find `B::entrypoint()`, instead of returning a nullptr (indicating that the plugin is supposed to not implement it). Obviously this is not the desired outcome 🐛 . My reasoning would be that as the plugin B is direct dependency of A, when loaded by `dlopen()` (unix), is seen as an integral part of plugin A from a system-call point of view. This has been tested with Ubuntu. Did not test on MacOS but should be the same, as it uses dlopen too.; It seems this behavior is not present on Windows, the following demo does not show the bogus behavior. ---. ### Demo:; - adding `getModuleLicense()` which is supposed to be not implemented in Sofa.Component.StateContainer; - StateContainer is a dependency for some other Sofa.Component libraries. ```; extern ""C"" SOFA_EXPORT_DYNAMIC_LIBRARY const char* getModuleLicense();; const char* getModuleLicense(); {; return ""StateContainer License"";; }; ```; Result (Qt PluginManager windows calls `getModuleLicense()` if entry is supposed to be found). <img src='https://github.com/sofa-framework/sofa/assets/11028016/4b50f96f-d914-45ca-8dad-dbdaa0a90752' width='200'>. We can see the cascading wrong call to `getModuleLicense()`, as Collision has a dependency on Collision.Contact which has a dependency on StateContainer.; Moreover in this image, we can even see the `LGPL` which has been leaking from the recently added S.C LinearSystem to several other components. ---. ### Workaround; The workaround would be to implement obviously all the potential entrypoints in all the plugins, but the problem will arise again if a new entrypoint is added in the future....; At first glance, I thought that setting `RTLD_LOCAL` here; https://github.com/sofa-framework/sofa/blob/1e0df59953a085785a45bf97e182e01efea0c354/Sofa/framework/Helper/src/sofa/helper/system/DynamicLibrary.cpp#L78; would fix the bug, but it is still showing the same behavior 😓",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4462:1522,depend,dependency,1522,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4462,2,['depend'],['dependency']
Integrability,this PR depends on #1351 where Data d_checkTopology has been introduced. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1353:8,depend,depends,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1353,2,"['depend', 'message']","['depends', 'message']"
Integrability,"ties.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topology classes but it adds a hierarchy of classes in the core with a new API and a compatibility layer with the old one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:1924,depend,depends,1924,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583,1,['depend'],['depends']
Integrability,"time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1624,message,message,1624,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,2,['message'],['message']
Integrability,"to access the data without abstraction cost, ie. accessing the object with its true type (eg: Data<T>) instead of its parent type (BaseData) and at the same time having an abstraction to manipulate BaseData. . Duplicating the same obect/point is in general a code smell indicating that something is wrong in the implementation. In general duplication complexify the implementation and error prone (because you have to garantee that the different copies are kept synchronized and interact together in a seamlessness way. . So, in this PR I addresse this duplication problem by removing the lowest type and relying on a dynamic_cast when it is needed. There is an abstraction cost...but it is on a on a very rarerly used method (actually only used for fast copy of data field...and in that context...the cost of the dynamic cast against one of copying millions of Dofs is totally neglectible). . A different pattern was initially used with a child-delegation to expose the abstraction to its parent but it appears it would have made the PR breaking. The difference is that the selected pattern allows one data to be parented to a data of different type while the pattern with child-delegation restrict the parenting to be of exactly the same time. . I personally prefer to have parent only on same type (so that data conversion must be added manually and becomes explicit) but this was not done previously in Sofa and thus breaks some scenes (somes of them are actually really funny....and probably work only by side effect). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1490:1876,message,message,1876,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1490,1,['message'],['message']
Integrability,to avoid breaking external plugins. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/870:135,message,message,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/870,1,['message'],['message']
Integrability,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2133,message,message,2133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,2,['message'],['message']
Integrability,"tory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmax_box=""5.0"" ` ; `/>`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354:2131,message,message,2131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354,1,['message'],['message']
Integrability,type dependant error could result from a missing typename or template keyword,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/673#issuecomment-393540797:5,depend,dependant,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/673#issuecomment-393540797,1,['depend'],['dependant']
Integrability,"ulation scale. For example, setting an absolute displacement norm of 1e-5 might seem enough for a liver mesh set in millimetres, but is definitely not adequate for the same liver using this time a mesh scaled in metres. This is a source of user error, and is probably why many FEM software will use relative convergence criteria. The two additional criteria are:. 1. The relative residual norm |R|/|R0| where |R| is the norm of the force vector after the last Newton iteration, and |R0| is the norm of the force vector after the first Newton iteration.; 2. The relative displacement norm |dx|/|U| where |dx| is the norm of the latest solution vector, and |U| is the norm of the sum over all previous solution vectors of the current time step. To remove any confusion between absolute and relative criteria, the convergence data field ""correction_tolerance_threshold"" and ""residual_tolerance_threshold"" were renamed for ""absolute_correction_tolerance_threshold"" and ""absolute_residual_tolerance_threshold"", respectively. Note that to keep a compatibility layer with older scene files, these old data field names are still available, but a deprecated warning is shown to the user, inviting him to update its scene. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/147]. EDIT: Fix #224. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2050:1733,depend,depends-on,1733,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050,1,['depend'],['depends-on']
Integrability,"uldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271:1318,message,message,1318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271,2,['message'],['message']
Integrability,"unload() function of PluginManager was just removing the entry of the plugin in its map, but this one was effectively still loaded in the process memory. (on Windows, you could still see it using ProcessExplorer) ; This PR fixes it (i.e really unloads from memory). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1274:365,message,message,365,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274,1,['message'],['message']
Integrability,update Regression_test repository sha and add 2 more scenes to test collisionGroup. - [References] Update references of collisionMultiple scene due to fix modification in sofa master inside collisionGroup.; - [References] Add more scene references to check collision with and without collisionGroup. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1102:399,message,message,399,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1102,1,['message'],['message']
Integrability,update glew in windows dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/466:23,depend,dependencies,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/466,1,['depend'],['dependencies']
Integrability,"users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_position"" would be enough to make the alias obvious to the user preserving the convenience of Alias to the developpers. What do you think a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1272,message,message,1272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194,2,['message'],['message']
Integrability,"using cmake-gui, I have now activated the plugin sofa cuda: . here is the output of cmake-gui:; `````; Found CUDA: /usr/local/cuda-11.2 (found version ""11.2"") ; SofaCUDA: Plugin VolumetricRendering was not enabled/found, therefore CudaTetrahedralVisualModel will not be compiled.; SofaCUDA: SofaDistanceGrid was not enabled, therefore CudaDistanceGridCollisionModel will not be compiled.; SofaCUDA: optional dependency SofaSphFluid not enabled. ; Autodetected CUDA architecture(s): 7.5; SofaCUDA: nvcc flags: -gencode;arch=compute_75,code=sm_75;-Xcompiler -fPIC; `````. I'm compling sofa on my laptop that has a decent graphical card (a Quadro T2000) but that maybe not inadequate in GPU memory or precision for sofa. Double precision is not activated for instance. Anyway, the same error occurs even if I delete all files from previous compilation adn regenerate the cmake files. `````; 1121/1599] Building CXX object modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o; FAILED: modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o ; /usr/bin/clang++ -DNDEBUG -DSOFA_BUILD_OPENGL_VISUAL -DSOFA_BUILD_SOFAOPENGLVISUAL -DSofaOpenglVisual_EXPORTS -I/home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src -Iinclude/SofaOpenglVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseVisual/src -Iinclude/SofaBaseVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseTopology/src -Iinclude/SofaBaseTopology -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCommon/.. -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../Sofa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312:408,depend,dependency,408,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312,1,['depend'],['dependency']
Integrability,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735:2121,message,messages,2121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735,2,['message'],"['message', 'messages']"
Integrability,ways better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tes,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:2657,message,message,2657,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['message'],['message']
Integrability,"what was going wrong with this test, I can see only message refactoring in the diff.; No info in the PR description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235:52,message,message,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235,1,['message'],['message']
Integrability,"when passing ""this"" as argument, forcing object copy to avoid unexpected results; Fixes #280 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/317:194,message,message,194,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317,1,['message'],['message']
Integrability,whispered to me by @fredroy :+1: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1042:134,message,message,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1042,1,['message'],['message']
Integrability,would there be a way to separate the cleaning and the changes actually related to the PR?; is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-958802655:134,interface,interface,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-958802655,1,['interface'],['interface']
Integrability,"x120)：undefined reference to ‘libusb_free_device_list’; dhdComUSB-libusb.cpp:(.text+0x141)：undefined reference to ‘libusb_exit’; /home/dell/raid/hx/sigma7_hx/sdk-3.14.0/lib/release/lin-x86_64-gcc/libdhd.a(dhdComUSB-libusb.o)：in function‘dhdUSBGetDeviceCountList(int*, int*, int*, int)’：; dhdComUSB-libusb.cpp:(.text+0x215)：undefined reference to ‘libusb_init’; dhdComUSB-libusb.cpp:(.text+0x24e)：undefined reference to ‘libusb_get_device_list’; dhdComUSB-libusb.cpp:(.text+0x297)：undefined reference to ‘libusb_get_device_descriptor’; dhdComUSB-libusb.cpp:(.text+0x2eb)：undefined reference to ‘libusb_free_device_list’; dhdComUSB-libusb.cpp:(.text+0x30c)：undefined reference to ‘libusb_exit’; ```. So I switched to using the dynamic linking SDK/lib/release/lin-x86_64-gcc/libdhd.so.3.14.0 for compilation, which compiled successfully, but the import of the plugin failed when running the scene example in the [force dimension plugin](https://gitlab.com/polyakovkrylo/forcedimensions). ```. Gtk-Message: 14:09:35.149: GtkDialog mapped without a transient parent. This is discouraged.; [ERROR] [PluginManager] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file or directory.; [ERROR] [RequiredPlugin(ForceDimensions)] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file or directory.; ; Failed to load: [""ForceDimensions""]; [ERROR] [InfoComponent(Not created (OmegaDriver))] Object type OmegaDriver<> was not created ; The object is not in the factory. . [ERROR] [SceneLoaderXML] Node initialization failed. . [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [ERROR] [PluginManager] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot ope",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1323155229:1733,Message,Message,1733,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1323155229,1,['Message'],['Message']
Integrability,"xml header, solver iterations, etc... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/310:137,message,message,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/310,1,['message'],['message']
Integrability,yeah sorry @jnbrunet (good to hear from you as always!) this fix has not been integrated into v22.06 and regarding to the timing we might very probably wait for the v22.12 (at least for having the fix in the binary version),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3485#issuecomment-1326853997:78,integrat,integrated,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3485#issuecomment-1326853997,1,['integrat'],['integrated']
Integrability,"yes you have it, it's here; https://github.com/sofa-framework/sofa/pull/1186/files#diff-5a95499e7294bee7079356a42a6b2b00R196; No, I'm not using it directly, it is needed as a dependency by another one",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542690339:175,depend,dependency,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542690339,1,['depend'],['dependency']
Integrability,"you can let it open, we will close this issue when the error message will be added. (very soon)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/768#issuecomment-421054304:61,message,message,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-421054304,1,['message'],['message']
Integrability,"zeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243:1595,depend,depending,1595,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243,2,"['depend', 'message']","['depending', 'message']"
Integrability,"zlib library, provided on site as part of Windows dependencies archive is built with VS2013 instead of VS2015, which may result in Sofa applications crashes.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/295:50,depend,dependencies,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/295,1,['depend'],['dependencies']
Integrability,~~The PR is based on #1003 (merged)~~ . CHANGELOG:; - [SofaPython] Add vector<Rigid3> to the addNewData in Binding_Base.cpp; - [SofaPython] Base.addNewData returns the created data or set an exception in case of failure. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1004:320,message,message,320,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1004,1,['message'],['message']
Integrability,"~~To push immediately after merging #1734~~. Remove all references to defaulttype::Vec (and helper::fixed_array) and remove all ""deprecation"" messages. Breaking for the same reason with #1730 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1740:142,message,messages,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1740,1,['message'],['messages']
Integrability,"⚠-For MSVC only; ⚠-in Release mode only; ⚠-with CMake flag SOFA_ENABLE_LINK_TIME_OPTIMIZATION. Enable Link-time optimization to whole SOFA project.; (with caduceus.scn : w/o: 170fps, w/: 190fps). WARNING: typical SOFA compilation takes 20GB!🥴. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1468:343,message,message,343,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1468,1,['message'],['message']
Integrability,"👍 for removing sofa::helper::io::Mesh*. There is however an issue that the support for loading texture coordinates was removed from MeshObjLoader, so the OglModel version on the master can only have textures when using these deprecated loaders. In our latest integration branch we reverted this removal of texcoords support and fixed it to have the same level of support using MeshObjLoader+OglModel as when loading the file directly in OglModel (most notably handling of ""seams"" where a single vertex has multiple texture coordinates). The relevant commits are:; - https://github.com/InSimo/sofa/commit/915ee46368efe140b242759a0110682f71200dc1; - https://github.com/InSimo/sofa/commit/08493b9ab5c8ea376ba9a7f9a2cea3e81f513511; - https://github.com/InSimo/sofa/commit/e6bec10562ab797963027003c2282cbc24a53bb9; - https://github.com/InSimo/sofa/commit/1925b381b7d8cb939d250ab24e92fb28df918c0b. To be merged to the master the first commit need to be done in a cleaner way than a full revert, which removed later refactorings like apparently the introduction of a File class.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553:259,integrat,integration,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553,1,['integrat'],['integration']
Modifiability,"	<BTDLinearSolver subpartSolve='0' verification='0' verbose='0'/>; 		<RegularGridTopology name='meshLinesCombined'; nx='180' ny='1' nz='1'; xmin='0.0' xmax='1.0'; ymin='0' ymax='0'; zmin='1' zmax='1'; 		/>; 		<MechanicalObject template='Rigid3d' name='DOFs' showIndices='0' ry='-90'/> . 		<WireBeamInterpolation name='InterpolCatheter' WireRestShape='@../topoLines_cath/catheterRestShape' radius='1' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='CatheterForceField' interpolation='@InterpolCatheter' massDensity='0.00000155'/> <!--stiff silicone E = 10000 MPa // 1550 Kg/m3-->	. 		<WireBeamInterpolation name='InterpolGuide' WireRestShape='@../topoLines_guide/GuideRestShape' radius='0.9' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='GuideForceField' interpolation='@InterpolGuide' massDensity='0.00000155'/> 	. 		<WireBeamInterpolation name='InterpolCoils' WireRestShape='@../topoLines_coils/CoilRestShape' radius='0.1' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='CoilsForceField' interpolation='@InterpolCoils' massDensity='0.000021'/> <!-- platine E = 168000 MPa // 21000 Kg/m3-->	. <BeamAdapterActionController name=""AController"" interventionController=""@IRController"" writeMode=""0""; timeSteps=""9.1 17.1 17.55 18.05 18.6 19.05 19.55 20.05 20.5 21 21.45 21.9 22.65 23.1 23.55 24.05 24.55 25 25.45 25.95 26.4 27.1 27.55 28.05 28.55 29 29.5 29.95 30.4 30.9 31.4 31.85 32.35 33.05 33.5 34 34.45 34.9 35.4 35.85 36.35 36.8 37.25 37.7 38.2 38.65 39.4 39.85 40.3 40.7 41.2 41.65 42.1 42.55 43 43.4 44.1 44.55 45 45.45 45.9 46.3 46.75 47.2 47.65 48.1 48.55 49 49.65 50.1 50.5 50.9 51.35 51.75 52.2 52.6 53.05 53.5 53.95 54.4 54.85 55.5 55.9 59.1 66.15 66.6 67.05 67.45 67.9 68.35 68.8 69.25 69.65 70.1 70.55 71.2 71.6 72.05 72.5 72.95 73.4 77.6 81.9 87.4 87.75 88.1 88.45 88.75 89.1 89.45 89.75 90.1 90.6 90.9 91.25 91.6 91.95 92.3 92.6 92.95 93.25 93.6 93.95 94.25 94.6 94.95 95.4 95.75 96.1 96.4 96.75 97.05 97.35 97.7 98.05 98.4 98.7 99.15 99.5 99.8 100.15 100.45 100.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4833:6153,Adapt,AdaptiveBeamForceFieldAndMass,6153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4833,1,['Adapt'],['AdaptiveBeamForceFieldAndMass']
Modifiability," # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API constructor needs to be passed the number of lines that are involved in the solving of this constraint equation. The previous implementation was silently initializing this value to one. If that property has to modified because it depends on some other state variables of a concrete implementation of the `ConstraintResolution`, the `setNbLines` method has to be called to reflect it. Also added some getters/setters method.; - `BaseConstraintCorrection` API separates the methods which computes the constraint displacement in motion space from the methods which apply it. ; - As result, factorized quite significantly the methods related to the `ConstraintCorrection` API ; - `BaseConstraint` API defines a `storeLambda` method which is used to store the result of the constraint force computation (stored in a `BaseVector` form) inside a dedicated state vector of a `MechanicalState`. Requires PR #456. This value can be used later on to discover the stiffness coming from the non linear mapping that result from it.; - `BaseMechanicalState` `resetConstraint` and `getConstraintJacobian` methods need to be given a `ConstraintParams` to be able to retrieve the `MatrixDerivId` containing the constraint jacobian. ; - `LinearSolver` API ; - rename `applyContactForce` API method into ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459:2259,variab,variables,2259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459,1,['variab'],['variables']
Modifiability," (trace after running the cmake process with a already populated CMakeCache). - CPack analysis at the end; - All modules does a awful lot of find_package() even if it is packages already found before; - (On windows only?) the sofa_install_lib at the beginning. # (Proposal of) Solution. Not an expert of CMake at all but this PR:; - Set an option if you really want to use CPack (this is only used when packing) -> **harmless**; - Modify sofa_find_package to test if the desired packages/target is already imported/loaded , use it everywhere -> **I may have missed something here**; - remove the recursiveness in sofa_install_package -> **seems OK on Windows but I suspect it was made for Linux actually**. Here is the trace after applying the modifications:; ![cmake1](https://user-images.githubusercontent.com/11028016/108480054-c292e600-7296-11eb-913c-7f3ad5a85adf.PNG). It takes only around 8sec instead of around 38 sec initially, on Windows (without counting generating apparently); In my Ubuntu VM, it takes around 2 sec for the whole process ! (configure + generating); But I have no doubt I may have introduce bugs etc. 🤨 so feel free to react. Unfortunately, I dont know for now how to reduce the generating step time 😥. # Nota Bene; For those interested on how to trace/profile the cmake processing time: #1838. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or h",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1837:1363,config,configure,1363,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1837,1,['config'],['configure']
Modifiability," ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the cop",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/215:2777,variab,variable,2777,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215,1,['variab'],['variable']
Modifiability," - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/215:2601,Adapt,Adapted,2601,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215,2,"['Adapt', 'plugin']","['Adapted', 'plugin']"
Modifiability," ....ComputeForce; 4 0.91 1 0.70 1.38 0.74 0.05 0.74 3.51 ....ComputeRHTerm; 4 1.66 1 0 0.03 0 0 0 0.02 ....MBKBuild; 5 1.66 1 0 0.02 0 0 0 0.01 .....CG-setSystemMBKMatrix; 4 1.66 1 17.79 26.51 18.56 0.78 18.56 87.62 ....MBKSolve; 5 1.68 1 17.76 26.48 18.53 0.77 18.53 87.49 .....CG-Solve; 4 20.22 1 0.01 0.04 0.01 0 0.01 0.05 ....UpdateVAndX. ```; ## Multi threaded; ```; 8.40483 s ( 118.979 FPS); LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 3 0.01 1 5.32 26.82 7.42 1.31 7.42 88.31 ...Mechanical; 4 0.02 1 0.22 0.88 0.32 0.07 0.32 3.80 ....ComputeForce; 4 0.34 1 0.19 0.70 0.28 0.06 0.28 3.29 ....ComputeRHTerm; 4 0.61 1 0 0.07 0.01 0 0.01 0.06 ....MBKBuild; 5 0.61 1 0 0.07 0 0 0 0.03 .....CG-setSystemMBKMatrix; 4 0.62 1 4.87 25.85 6.80 1.22 6.80 80.84 ....MBKSolve; 5 0.64 1 4.84 25.82 6.77 1.22 6.77 80.51 .....CG-Solve; 4 7.42 1 0.01 0.02 0.01 0 0.01 0.13 ....UpdateVAndX. ```. # Comments. - Code is in plugin MultiThreading because of the large amount of boilerplate code for the multi threading management, that would pollute the initial implementation in `HexahedronFemForceField`. I have some ideas to reduce this code, but it requires work on the task scheduler.; - A small part of the code is duplicated from `HexahedronFemForceField`.; - Initially, I wanted to accelerate the execution of the Conjugate Gradient for `GraphScattered` types. It is not possible to propose a generic multi-threaded acceleration for all force fields: for FEM, the most time consuming step in the CG is `ForceField::addDForce`. This is the method to accelerate. The downside is that it has to be done for every force field... ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers wil",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2177:1405,plugin,plugin,1405,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2177,1,['plugin'],['plugin']
Modifiability," /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscTopology/lib/libSofaMiscTopology.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscExtra/lib/libSofaMiscExtra.so; [WARNING] [ObjectFactory] Class already registered: GearSpringForceField<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: MeshMatrixMass<Vec1d,double>; [WARNING] [ObjectFactory] Class already registered: MeshMatrixMass<Vec2d,double>; [WARNING] [ObjectFactory] Class already registered: MeshMatrixMass<Vec3d,double>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscForceField/lib/libSofaMiscForceField.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscEngine/lib/libSofaMiscEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscSolver/lib/libSofaMiscSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscFem/lib/libSofaMiscFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscMapping/lib/libSofaMiscMapping.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscCollision/lib/libSofaMiscCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/CImgPlugin/lib/libCImgPlugin.so; Warning: Setting a new default format with a different version or profile after the global shared context is created may cause issues with context sharing.; The constructor with a QGLFormat is deprecated, use the regular contructor instead. [WARNING] [SparseLDLSolver(SparseLDLSolver)] Template is em",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:33712,Plugin,PluginManager,33712,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability," /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Shader.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Batch.so; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Qt.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SceneCreator/lib/libSceneCreator.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/ArticulatedSystemPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Loc",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:11164,Plugin,PluginManager,11164,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability, 0x10807bfff +libSofaGraphComponent.20.12.01.dylib (0) <E287C3F6-BA9B-3659-A9EB-38E2A3A80B8A> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGraphComponent/lib/libSofaGraphComponent.20.12.01.dylib; 0x1080d7000 - 0x1080f2fff +libSofaBaseUtils.20.12.01.dylib (0) <581FCEED-99DD-3642-AC19-1EFB56334375> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseUtils.20.12.01.dylib; 0x108130000 - 0x108167fff +libSofaGeneralMeshCollision.20.12.01.dylib (0) <BFA69B16-EFE2-3F2D-843D-38EA209DB60B> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralMeshCollision/lib/libSofaGeneralMeshCollision.20.12.01.dylib; 0x1081d4000 - 0x1081f7fff +libSofaGeneralVisual.20.12.01.dylib (0) <2801711D-11F2-342D-9659-A6760DB8B489> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralVisual/lib/libSofaGeneralVisual.20.12.01.dylib; 0x108235000 - 0x1082a8fff +libSofaTopologyMapping.20.12.01.dylib (0) <25291751-E35F-3A44-B167-CB54D1C86B40> /Applications/runSofa.app/Contents/MacOS/plugins/SofaTopologyMapping/lib/libSofaTopologyMapping.20.12.01.dylib; 0x10834c000 - 0x1083dbfff +libSofaGeneralSimpleFem.20.12.01.dylib (0) <4787B69F-1093-3E5B-8414-BE5EA23432F5> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.20.12.01.dylib; 0x108544000 - 0x10859ffff +libSofaSimpleFem.20.12.01.dylib (0) <39F60B90-A0EE-3992-9391-A0CF20CB95DE> /Applications/runSofa.app/Contents/MacOS/plugins/SofaSimpleFem/lib/libSofaSimpleFem.20.12.01.dylib; 0x10862d000 - 0x10868cfff +libSofaBaseVisual.20.12.01.dylib (0) <3FF1BCE6-2796-3533-B23D-8440A29E1F9E> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseVisual.20.12.01.dylib; 0x10873d000 - 0x10879cfff +libSofaMiscForceField.20.12.01.dylib (0) <DFAD70EA-9BF9-3F8F-9767-866C72E011B4> /Applications/runSofa.app/Contents/MacOS/plugins/SofaMiscForceField/lib/libSofaMiscForceField.20.12.01.dylib; 0x108863000 - 0x108b0efff +libSofaBoundaryCondition.20.12.01.dylib (0) <D5451810-3AED-3A0F-8AE8-3D042D7B6DA2> /Applications,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:3902,plugin,plugins,3902,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['plugin'],['plugins']
Modifiability," 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1"" ; />. 		<InterventionalRadiologyController template='Rigid3d' name='IRController' printLog='0' xtip='1 0 0' step='3' rotationInstrument='0 0 0' ; controlledInstrument='0' startingPos='0 0 0 0 -0.7071068 0 0.7071068' speed='2' instruments='InterpolCatheter InterpolGuide InterpolCoils' />. 		<FixedConstraint name='FixedConstraint' indices='0' />; <RestShapeSpringsForceField points='@IRController.indexFirstNode' stiffness='1e8' angularStiffness='1e8' />. 		<Node name='VisuCatheter' activated='true'>; 			<MechanicalObject name='Quads' />; 			<QuadSetTopologyContainer name='ContainerCath' />; 			<QuadSetTopologyModifier name='Modifier' />; 			<QuadSetGeometryAlgorithms name='GeomAlgo' template='Vec3d' />; 			<Edge2QuadTopologicalMapping nbPointsOnEachCircle='10' radius='2' input='@../../topoLines_cath/meshLinesCath' output='@ContainerCath' flipNormals='true'/>. 			<AdaptiveBeamMapping name='VisuMapCath' useCurvAbs='1' printLog='0' interpolation='@../InterpolCatheter' input='@../DOFs' output='@Quads' isMechanical='false' />. 			<Node name='VisuOgl' activated='true'>; 				<OglModel name='Visual' color='0.7 0.7 0.7' quads='@../ContainerCath.quads' material='texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 1.0 1.0 1.0 Specular 1 1.0 1.0 1.0 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20'/>; 				<IdentityMapping input='@../Quads' output='@Visual'/>; 			</Node>	; 		</Node>; 	; 		<Node name='VisuGuide' activated='true'>; 			<MechanicalObject name='Quads' />; 			<QuadSetTopologyContainer name='ContainerGuide' />; 			<QuadSetTopologyModifier name='Modifier' />; 			<QuadSetGeometryAlgorithms name='GeomAlgo' template='Vec3d' />; 			<Edge2QuadTopologicalMapping nbPointsOnEachCircle='10' radius='1' input='@../../topoLines_guide/meshLinesGuide' output='@ContainerGuide' flipNormals='true' listening='true'/> ; 			<AdaptiveBeamMapping name='visuMapGuide' useCurvAbs='1' printLog='0' interpolation='@../",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4833:10496,Adapt,AdaptiveBeamMapping,10496,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4833,1,['Adapt'],['AdaptiveBeamMapping']
Modifiability," 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/482:2884,plugin,plugins,2884,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482,1,['plugin'],['plugins']
Modifiability," > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ; > > > —; > > > You are receiving this because you are subscribed to this thread.; > > > Reply to this email directly, view it on GitHub , or mute the thread .; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936,; > > or mute the thread; > > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5aade6s7Ah995OVBks5qw6XNgaJpZM4JwvD8.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:2189,plugin,plugin,2189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225,4,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:6861,plugin,plugin,6861,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062,9,"['Config', 'config', 'plugin']","['Configuring', 'config', 'configuration', 'plugin', 'plugins']"
Modifiability," Class already registered: MeshMatrixMass<Vec2d,double>; [WARNING] [ObjectFactory] Class already registered: MeshMatrixMass<Vec3d,double>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscForceField/lib/libSofaMiscForceField.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscEngine/lib/libSofaMiscEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscSolver/lib/libSofaMiscSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscFem/lib/libSofaMiscFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscMapping/lib/libSofaMiscMapping.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscCollision/lib/libSofaMiscCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/CImgPlugin/lib/libCImgPlugin.so; Warning: Setting a new default format with a different version or profile after the global shared context is created may cause issues with context sharing.; The constructor with a QGLFormat is deprecated, use the regular contructor instead. [WARNING] [SparseLDLSolver(SparseLDLSolver)] Template is empty; By default SparseLDLSolver uses blocks with a single double (to handle all cases of simulations).; If you are using only 3D DOFs, you may consider using blocks of Matrix3 to speedup the calculations.; If it is the case, add template=""CompressedRowSparseMatrixMat3x3d"" to this object in your scene; Otherwise, if you want to disable this message, add template=""CompressedRowSparseMatrixd"" .; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [Scene",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:34176,Plugin,PluginManager,34176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability, Class already registered: ProjectToPointConstraint<Vec6d>; [WARNING] [ObjectFactory] Class already registered: ProjectDirectionConstraint<Vec2d>; [WARNING] [ObjectFactory] Class already registered: ProjectDirectionConstraint<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralAnimationLoop/lib/libSofaGeneralAnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralDeformable/lib/libSofaGeneralDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralEngine/lib/libSofaGeneralEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralExplicitOdeSolver/lib/libSofaGeneralExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralImplicitOdeSolver/lib/libSofaGeneralImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLinearSolver/lib/libSofaGeneralLinearSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [WARNING] [ObjectFactory] Class al,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:24753,Plugin,PluginManager,24753,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability," GuiDataRepository paths = D:/github-clones/sofa/src/applications/projects/runSofa/resources;D:/github-clones/sofa/src/modules/SofaGuiQt/src/sofa/gui/qt/resources;D:/github-clones/sofa/build; [INFO] [runSofa] Loading automatically plugin list in D:\github-clones\sofa\build\bin\RelWithDebInfo/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaSimpleFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaDeformable.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaEngine.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGraphComponent.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaBoundaryCondition.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralAnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralDeformable.dll; [ERROR] [PluginManager] Plugin not found: ""SofaGeneralE",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:6006,Plugin,PluginManager,6006,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability, HERE >; `➜ bin ./runSofa ; [INFO] [runSofa] PluginRepository paths = /Users/hemingshan/Code/sofa/build/plugins:/Users/hemingshan/Code/sofa/build/collections:/Users/hemingshan/Code/sofa/build/lib; [INFO] [runSofa] DataRepository paths = /Users/hemingshan/Code/sofa/src/share:/Users/hemingshan/Code/sofa/src/examples:/Users/hemingshan/Code/sofa/build:/Users/hemingshan/Code/sofa/build; [INFO] [runSofa] GuiDataRepository paths = /Users/hemingshan/Code/sofa/src/applications/projects/runSofa/resources:/Users/hemingshan/Code/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources:/Users/hemingshan/Code/sofa/build; [INFO] [runSofa] Loading automatically plugin list in /Users/hemingshan/Code/sofa/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Forward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Backward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.Mesh.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Playback.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SceneUtility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Constant.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Dynamic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Grid.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Contai,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:1428,Plugin,PluginManager,1428,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; - a command line argument that can be used in all scenes, such as -d for data, which could be followed by strings; - php scenes (file ending .pscn) that work and could prevent calling php on the side (i.e. my second solution works without a script on the side). I am grateful for any ideas/other propositions of solutions!. Label ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356:1329,variab,variables,1329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356,1,['variab'],['variables']
Modifiability," INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >. **Command called**. ```txt. (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import Sofa; ---------------------------------------; Checking SOFA_ROOT and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; ---------------------------------------; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; import Sofa.Helper; ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')); >>> . ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n pr",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690:1845,plugin,plugins,1845,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690,1,['plugin'],['plugins']
Modifiability," It is a manipulation of the scene graph which depends on the collision detection.; 2. Create the contact response. # Cleaning; - Split large functions into smaller to make them more readable; - More null pointer checks; - Add lots of comments; - Minor cleaning such as namespace concatenation, ... # Fix absence of collision response with stationary object; The contact with stationary objects are supposed to be handled by the collision pipeline before creating groups with the group manager. In the group manager, it supposes all the objects in contacts are associated with an ODE solver (since they cannot be stationary). Actually, the collision pipeline check if an object is stationary based on the value of `isSimulated()`. It means it's up to the user to set this Data. If it not done, the object is considered moving and goes to the group manager. The ODE solver is not found, so it is skipped:; https://github.com/sofa-framework/sofa/blob/477747e21ae520fba08cb08f7b66e6f4250a91f8/applications/plugins/SofaMiscCollision/src/SofaMiscCollision/DefaultCollisionGroupManager.cpp#L91; And collision response is not created.; In this PR, this case is not skipped and a collision response is created. A scene test has been added to check collision is working with a stationary object. # Fix freeze; This freeze happened before #2047.; It is due to an infinite loop here:; https://github.com/sofa-framework/sofa/blob/477747e21ae520fba08cb08f7b66e6f4250a91f8/applications/plugins/SofaMiscCollision/src/SofaMiscCollision/DefaultCollisionGroupManager.cpp#L235; This happened because a map was not updated after some merge operations. And we relied on the value in the map, for example here:; https://github.com/sofa-framework/sofa/blob/477747e21ae520fba08cb08f7b66e6f4250a91f8/applications/plugins/SofaMiscCollision/src/SofaMiscCollision/DefaultCollisionGroupManager.cpp#L137. # Fix crash detected in #2047. ## Before #2047; The scene freezes always at the same time. In #2067 I explain that the simula",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2076:1751,plugin,plugins,1751,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076,1,['plugin'],['plugins']
Modifiability, Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.Preconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Diffusion.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.Linear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.NonLinear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.StateContainer.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.Spring.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.Elastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:4727,Plugin,PluginManager,4727,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1757,refactor,refactoring,1757,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811,8,"['adapt', 'refactor']","['adapt', 'refactoring']"
Modifiability," PR should wait #1990, #2000 and he is more a ""preview"" PR for showing the ALIAS system._~~. Ref: #1521, #1527. ## What; SofaHelper, SofaDefaulttype, SofaCore and SofaSimulationCore does not respect the new naming convention (following namespace, etc). So this PR renames those 4 modules:; - SofaHelper ▶ Sofa.Helper; - SofaDefaulttype ▶ Sofa.Defaulttype; - SofaCore ▶ Sofa.Core; - SofaSimulationCore ▶ Sofa.SimulationCore (this one will need more work for the namespaces etc). This PR does not rename physically the folders, I preferred split the renaming in two steps (and have a less chaotic git history). ## Breaking?; Nope, thanks to the Alias system in CMake (I would have not bet on that at the beginning 😗); I could compile SofaPy3 out-of-tree without changing anything. I added some compatibility for the previous cmake macro/variables in the config.h (e.g SOFAHELPER_HAVE_BOOST instead of the new variable SOFA_HELPER_HAVE_BOOST).; These variables are not used at all in the code base of SOFA but some users might use them in their external plugins?. Actually, it could break projects using directly SofaHelper(&co) directly, i.e not handling CMake target but library names directly. (but people should not do that 🤥). Tested with an out-of-tree build of SofaPy3. ## After; Once everything is done, and once things are calming down in the SofaFramework, the folders themselves can be renamed. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test fa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2001:955,variab,variables,955,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2001,2,"['plugin', 'variab']","['plugins', 'variables']"
Modifiability," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1504,Plugin,Pluginize,1504,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223,5,"['Plugin', 'plugin', 'refactor']","['Pluginize', 'plugins', 'refactor']"
Modifiability," SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:1301,plugin,plugin,1301,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233,1,['plugin'],['plugin']
Modifiability," Sofa. I followed the page here: https://www.sofa-framework.org/community/doc/plugins/usual-plugins/cgal-library/. Although it does not tell what version of CGAL to use, or boost as well. Finally, I have been successful to build with the following versions of dependencies.; **Environment:**; Visual Studio 2017 vc 14.1; Sofa Master: commit 9d9100aa1b0acb9363c8ec7c9b5e4b470821bfc1; Boost: 1.71.0; CGAL: CGAL-4.13.2; QT: 5.12.0. ```; INFO] [runSofa] PluginRepository paths = C:/open_prj/sofa/build/mmaster/plugins;C:/open_prj/sofa/build/mmaster/bin/Release; [INFO] [runSofa] DataRepository paths = C:/open_prj/sofa/src/share;C:/open_prj/sofa/src/examples; [INFO] [runSofa] GuiDataRepository paths = C:/open_prj/sofa/src/applications/projects/runSofa/resources;C:/open_prj/sofa/src/applications/sofa/gui/qt/resources; [INFO] [runSofa] Loading automatically plugin list in C:\open_prj\sofa\build\mmaster\applications\projects\runSofa/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaDenseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaNonUniformFem.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/CImgPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaMiscCollision.dll; [ERROR] [PluginManager] Plu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402:1139,Plugin,PluginManager,1139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," VisuCatheter.addObject('AdaptiveBeamMapping', interpolation='@../InterpolGuide',; name='visuMapGuide', output='@Quads', isMechanical=False,; input='@../DOFs', useCurvAbs=True, printLog=False). # Ogl model; VisuOgl = VisuCatheter.addChild('VisuOgl'); VisuOgl.addObject('OglModel', color=[0.2, 0.2, 0.8], quads='@../ContainerCatheter.quads',; material='texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 1.0 1.0 1.0 Specular 1 1.0 1.0 1.0 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20',; name='Visual'); VisuOgl.addObject('IdentityMapping', input='@../Quads', output='@Visual'). CathterCollis = CathterMechanics.addChild('CollisionModel'); CathterCollis.activated = True; CathterCollis.addObject('EdgeSetTopologyContainer', name='collisEdgeSet'); CathterCollis.addObject('EdgeSetTopologyModifier', name='colliseEdgeModifier'); CathterCollis.addObject('MechanicalObject', name='CollisionDOFs'); CathterCollis.addObject('MultiAdaptiveBeamMapping',controller='../DeployController', useCurvAbs=True, printLog=False, name='collisMap'); CathterCollis.addObject('LineCollisionModel', proximity=0.0); CathterCollis.addObject('PointCollisionModel', proximity=0.0). Carotids = rootNode.addChild('Carotids'); Carotids.addObject('MeshSTLLoader', filename='../mesh/carotids.stl', flipNormals=False, triangulate=True,; name='meshLoader', rotation=[10.0, 0.0, -90.0]); Carotids.addObject('MeshTopology', position='@meshLoader.position', triangles='@meshLoader.triangles'); Carotids.addObject('MechanicalObject', position=[0, 0, 400], scale=3, name='DOFs1', ry=90); Carotids.addObject('TriangleCollisionModel', moving=False, simulated=False); Carotids.addObject('LineCollisionModel', moving=False, simulated=False). return rootNode; I used python to edit a simulation similar to a catheter in the carotid artery. I'm imitating the example provided in the sofa file. But I don't know why the error occurred, and I don't know how to solve it. I hope you can give me some help. This is the sofa BeamAdapter plug-in used.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3463:5701,plug-in,plug-in,5701,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3463,1,['plug-in'],['plug-in']
Modifiability," ZLIB; - Added to SofaMiscFem: Newmat; - SofaGeneral; - Added to SofaDenseSolver: Newmat; - Added to SofaGeneralLoader: ZLIB; - SofaGui; - Moved to SofaGuiQt: Qt + lots of options about QtViewer, QGLViewer, VSync, ...; - Modularized modules (oh yeah); - SofaPreconditioner: removed Newmat, added SofaSparseSolver; - SofaExporter: added ZLIB; - Plugins; - SofaMiscCollision: added SofaDistanceGrid; - SofaImplicitField: added SofaPython; - Registration: removed SofaOpenglVisual; - image: added ZLIB; - Flexible: added SofaPython. ## Rework all YYY_HAVE_XXX variables to reduce their scope. This is important for future global modularization of SOFA. - Variables are now named upon their module. . - Whenever you need to use the YYY_HAVE_XXX of another module, you surely should declare your own MYMODULE_HAVE_XXX instead. - All those new YYY_HAVE_XXX variables are booleans, so they can be used in CMake with `if(YYY_HAVE_XXX)` and in C++ (if correcly propagated via a config.h.in file) with `#if YYY_HAVE_XX` or `if(YYY_HAVE_XXX)`. - Add sofa_find_package and sofa_set_bool macros to auto create YYY_HAVE_XXX variables. - Edit sofa_install_targets to call `configure_file()` on any *.h.in found in target sources (the sources that are given to `add_library()`). :warning: Here is a quick tuto about [how to correctly add and propagate a dependency](https://gist.github.com/guparan/0b0ed00ad60b740f85b794cdff255229). ## Rework #1121 to avoid nested projects. - Use SOFA_NO_OPENGL to build an OpenGL-free version of SofaGuiQt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1137:1590,variab,variables,1590,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1137,1,['variab'],['variables']
Modifiability, [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Diffusion.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.Linear.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.NonLinear.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.MappedMatrix.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.Spring.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.Elastic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.TensorMass.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.StateContainer.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Model.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Correction.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Solver.dylib; [INFO] [PluginManager] Loaded plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:4487,Plugin,PluginManager,4487,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Rendering3D.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Engine.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Shader.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GUI.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSceneCreator.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libArticulatedSystemPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofaMatrix.dylib; [INFO] [PluginManager] 68 plugins have been loaded from /Users/hemingshan/Code/sofa/build/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [INFO] [SofaPluginManager] Loading automatically plugin list in /Users/hemingshan/Code/sofa/build/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /Users/hemingshan/Code/sofa/build/config/loadedPlugins.ini. ########## SIG 11 - SIGSEGV: segfault ##########; [1] 21189 segmentation fault ./runSofa; `. ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:9142,Plugin,PluginManager,9142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugins']"
Modifiability, [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/Extras/lib/python; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Fra,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:4052,plugin,plugins,4052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,1,['plugin'],['plugins']
Modifiability," [INFO] [runSofa] Loading automatically plugin list in C:\open_prj\sofa\build\mmaster\applications\projects\runSofa/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaDenseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaNonUniformFem.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/CImgPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaMiscCollision.dll; [ERROR] [PluginManager] Plugin loading failed (C:/open_prj/sofa/build/mmaster/bin/Release/CGALPlugin.dll): The specified module could not be found. Warning: Setting a new default format with a different version or profile after the global shared context is created may cause issues with context sharing.; The constructor with a QGLFormat is deprecated, use the regular contructor instead. [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckerVisitor] Finished validating node ""root"". ```. This dll is actually present. Please see the snapshot below.; Directory view:; ![image](https://user-images.githubusercontent.com/5296582/83347021-63272b80-a33f-11ea-9cda-e2c209b1be80.png). I am not able to understand what is the issue? Pl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402:1954,Plugin,PluginManager,1954,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability, [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.StateContainer.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.Spring.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.Elastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [Plug,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:5511,Plugin,PluginManager,5511,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability, [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.StateContainer.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.Spring.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.Elastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plug,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:4957,Plugin,PluginManager,4957,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," [RequiredPlugin(Sofa.Component.Mapping.Linear)] Plugin not found: ""Sofa.Component.Mapping.Linear"". Failed to load: [""Sofa.Component.Mapping.Linear""]; [ERROR] [RequiredPlugin(Sofa.Component.ODESolver.Forward)] Plugin not found: ""Sofa.Component.ODESolver.Forward"". Failed to load: [""Sofa.Component.ODESolver.Forward""]; [ERROR] [RequiredPlugin(SofaPython3)] Plugin not found: ""SofaPython3"". Failed to load: [""SofaPython3""]; [ERROR] [RequiredPlugin(Sofa.Component.Mapping.NonLinear)] Plugin not found: ""Sofa.Component.Mapping.NonLinear"". Failed to load: [""Sofa.Component.Mapping.NonLinear""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Model)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Model"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Model""]; [ERROR] [RequiredPlugin(Sofa.Component.Engine.Select)] Plugin not found: ""Sofa.Component.Engine.Select"". Failed to load: [""Sofa.Component.Engine.Select""]; [ERROR] [RequiredPlugin(Sofa.Component.StateContainer)] Plugin not found: ""Sofa.Component.StateContainer"". Failed to load: [""Sofa.Component.StateContainer""]; [ERROR] [RequiredPlugin(Sofa.Component.Mass)] Plugin not found: ""Sofa.Component.Mass"". Failed to load: [""Sofa.Component.Mass""]; [ERROR] [RequiredPlugin(Sofa.Component.SceneUtility)] Plugin not found: ""Sofa.Component.SceneUtility"". Failed to load: [""Sofa.Component.SceneUtility""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Projective)] Plugin not found: ""Sofa.Component.Constraint.Projective"". Failed to load: [""Sofa.Component.Constraint.Projective""]; [ERROR] [RequiredPlugin(Sofa.Component.LinearSolver.Direct)] Plugin not found: ""Sofa.Component.LinearSolver.Direct"". Failed to load: [""Sofa.Component.LinearSolver.Direct""]; [ERROR] [RequiredPlugin(SofaGeneralRigid)] Plugin not found: ""SofaGeneralRigid"". Failed to load: [""SofaGeneralRigid""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Detection.Algorithm)] Plugin not found: ""Sofa.Component.Collision.Detection.Algorithm"". Failed to load",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:1722,Plugin,Plugin,1722,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,2,['Plugin'],['Plugin']
Modifiability," [SofaMacros] Improve sofa_set_python_directory macro; - [SofaPython] Wider dir search for env loading; - [SofaGuiQt] Remove VSync message; - [package.cmake] Do not force CMAKE_BUILD_TYPE + Enable more plugins. ### [[DiffusionSolver] MOVE from image/extlibs to a real plugin](https://github.com/sofa-framework/sofa/commit/54f49d039aadaffd57a1d7f8ebab3af82e407674); I see no reason not to do that. Dependencies to DiffusionSolver are simpler this way. ### [[CImgPlugin] CLEAN include directory](https://github.com/sofa-framework/sofa/commit/1a617d5350f74ac4a816255960d92638a26cba1b); Sources moved to `src`. No more `../` horror in CImgPlugin include directories. ## Other changes. - [SofaHelper] FIX DynamicLibrary altered search path (Windows only) ; Needed to prefer `bin` libraries over neighboor libraries; - [SofaFramework] FIX typo in config.h.in; - [runSofa] Check if plugins dir exists before adding to PluginRepository; - [SofaTest] FIX SofaPython finding in *Config.cmake.in; - [plugins] ADD missing *Config.cmake.in files; Needed to use them as real plugins; - [All] Improve sofa_copy_libraries and sofa_install_libraries macros; Make them easier to use; - [CMake] Rename sofa_set_python_directory into sofa_install_pythonscripts; Clearer name in my opinion + using CMake multiValueArgs; - [CMake] Update package.cmake to enable plugins; Prepare package.cmake to produce binaries with all plugins from ""options"" configuration.; - [SofaImplicitField] FIX tests enabling; - [CMake] CLEAN package.cmake; - [SofaSimulationCore] Handle reload differently in SceneLoader::Listener; Needed to disable scene checks on reload.; - [SofaGraphComponent] Disable scene checks on reload; Needed by live editor (which reloads the scene every time the file is changed).; - [plugins] Remove commented lines in CMakeFiles. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ]",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1018:4021,plugin,plugins,4021,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1018,2,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability," [WARNING] [ObjectFactory] Class already registered: SimpleTesselatedTetraMechanicalMapping<Vec3d,Vec3d>; [WARNING] [ObjectFactory] Class already registered: SimpleTesselatedTetraTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: SubsetTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: Tetra2TriangleTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: Triangle2EdgeTopologicalMapping; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaTopologyMapping/lib/libSofaTopologyMapping.so; [WARNING] [ObjectFactory] Class already registered: MouseInteractor<Vec2d>; [WARNING] [ObjectFactory] Class already registered: MouseInteractor<Vec3d>; [WARNING] [ObjectFactory] Class already registered: MouseInteractor<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: MechanicalStateController<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: MechanicalStateController<Vec1d>; [WARNING] [ObjectFactory] Class already registered: RayCollisionModel; [WARNING] [ObjectFactory] Class already registered: RayTraceDetection; [WARNING] [ObjectFactory] Class already registered: SleepController; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaUserInteraction/lib/libSofaUserInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaConstraint/lib/libSofaConstraint.so; [WARNING] [ObjectFactory] Class already registered: ReadState; [WARNING] [ObjectFactory] Class already registered: ReadTopology; [WARNING] [ObjectFactory] Class already registered: GIDMeshLoader; [WARNING] [ObjectFactory] Class already registered: GridMeshCreator; [WARNING] [ObjectFactory] Class already registered: InputEventReader; [WARNING] [ObjectFactory] Class already registered: MeshGmshLoader; [WARNING] [ObjectFactory] Class already registe",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:28245,Plugin,PluginManager,28245,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability," `applications/plugins/SofaNewmat/extlibs` | type inconnu | Not built by default. TODO: plugin to be externalized (#1442 ) |; | CImg | header-only | `applications/plugins/CImgPlugin/extlibs` | CeCILL-C / CeCILL | OK |; | csparse | static | `Sofa/Component/LinearSolver/Direct/extlibs` | **no license file** | Plugin to be externalized. WIP : #4258 |; | metis | static | `Sofa/Component/LinearSolver/Direct/extlibs` | Apache v2 | Externalize metis dependency : #4266 (waiting for merge) |; | gtest | shared | `Sofa/framework/Testing/extlibs` | BSD-3-Clause | Externalize ? |; | cxxopts | header-only | `Sofa/GUI/Common (fetched from GitHub)` | MIT | Add to possibility to use external dependency and prevent from fetching: Fixed in #4273 |; | libQGLViewer | shared | `Sofa/GUI/Qt` | GPL | Find or use embedded code (find module being fixed in #4290) |. The actions we should take to make our code compatible for the conda package on conda-forge are:; 1. Fix the missing licenses files (points in bold); 2. Avoid all static libraries. For point 2, we are not concerned by miniFlowVR and newmat, as we do not compile the corresponding plugins for the conda package, at least for now. Before considering any action on these two, do the SofaDistanceGrid and SofaNewmat plugins are still used and planned to be maintained in future releases ?. Regarding other static libs (TinyXML, csparse and metis), could we consider to switch to an external dependency instead ? For TinyXML, the current behavior is to first look for an external package, and fallback to embedded version if unavailable. This looks reasonable at first, but shouldn't we switch to fully externalized versions for maintainability ?. Last point, we were also advised to use external dependency for some header-only libraries, especially when they are already packaged in conda-forge. Could we consider also to use externalized versions for some of these (the ones easily available as external packages), such as json nlohmann and cxxopts ?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4221:2063,plugin,plugins,2063,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4221,3,"['maintainab', 'plugin']","['maintainability', 'plugins']"
Modifiability," a mix of a broad phase and narrow phase. In this component, the broad phase is actually a brute force broad phase. The broad phase in `RayTraceDetection` did exactly the same thing than the broad phase in `BruteForceDetection`. It means duplicated code. With `BruteForceBroadPhase` we have an opportunity to factorize the broad phase by inheriting from `BruteForceBroadPhase` instead of `BroadPhaseDetection`. This is what I did in `RayTraceDetection`. Doing that, I could remove all the broad phase code from `RayTraceDetection`. # What comes next. It is also my intention to inherit from `BruteForceBroadPhase` in `BruteForceDetection`, and remove all the broad phase code from `BruteForceDetection`. The broad phase code from `BruteForceDetection` and `RayTraceDetection` would be shared from `BruteForceBroadPhase`. However, I expect complex conflicts because of #1999. I'll do that if #1999 is accepted and merged. It is also my intention to extract the narrow phase from `BruteForceDetection` and put it in another component which would inherit from `NarrowPhaseDetection`. The narrow phase in `BruteForceDetection` is not brute force, and should be named with a clearer and more meaningful name. It will be the case with the new component. I also believe SAP can be implemented as a broad phase only component. We would have the choice between `BruteForceBroadPhase` and `SAPBroadPhase`. Any narrow phase would work with both broad phases (`BruteForceBroadPhase` and `SAPBroadPhase`). Finally, with all those changes, we can consider more modularity on the collision detection and choose any combination of broad phase and narrow phase. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; __________________________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2010:1568,inherit,inherit,1568,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2010,1,['inherit'],['inherit']
Modifiability," a more ""contained"" way the components implemented in different plugins to avoid having everything mixed into the ObjectFactory. . The PR is composed of two aspects. 1) **Registering components by ""plugin.classname"" instead of ""classname"" in the ObjectFactory**. The factory currently access component by their classname only causing collision when two component have the same name/template. To avoid this, the PR add the plugin name as a prefix for the Factory'key. As an exemple, a component created with *<OglModel>* in the past is now referenced as *<SofaOpenglVisual.OglModel>*. Backward compatbility is possible by adding into the factory registration an alias mapping between ; new names and old name;; Eg:; ```; ""OglModel"" => ""SofaOpenglVisual.OglModel""; ```. 2) **Importing plugin and component *à la* python**; A new component called *FromComponent* is added to handle the loading of plugin and the import of object. . Examples of use:; ```; 	 # To make only <OglModel> accessible in the scene; 	<From plugin=""SofaOpenglVisual"" import=""OglModel""/>; 	<OglModel/>. 	# To add ""custom"" name in a scene ; 	<From plugin=""SofaOpenglVisual"" import=""OglModel"" as=""RenderingModel""/>; 	<RenderingModel/>. 	# To be a super lazy man and import everything; 	<From plugin=""SofaOpenglVisual"" import=""*""/>; ```. I didn't implemented multiple object imports so currently it is necessary to do ; ```; <From plugin=""SofaOpenglVisual"" import=""OglModel""/>; <From plugin=""SofaOpenglVisual"" import=""GlslShader""/>; ```; But we could as in python with:; ```; <From plugin=""SofaOpenglVisual"" import=""OglModel, GlslShader""/>; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge thi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512:1037,plugin,plugin,1037,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512,1,['plugin'],['plugin']
Modifiability," already registered: ExtraMonitor<Vec3d>; [WARNING] [ObjectFactory] Class already registered: ExtraMonitor<Vec6d>; [WARNING] [ObjectFactory] Default template for class Monitor already registered (Vec3d), do not register Vec3d as the default; [WARNING] [ObjectFactory] Class already registered: Monitor<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: Monitor<Vec3d>; [WARNING] [ObjectFactory] Class already registered: Monitor<Vec6d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaValidation/lib/libSofaValidation.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaDenseSolver/lib/libSofaDenseSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaNonUniformFem/lib/libSofaNonUniformFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaOpenglVisual/lib/libSofaOpenglVisual.so; [WARNING] [ObjectFactory] Class already registered: TopologicalChangeProcessor; [WARNING] [ObjectFactory] Class already registered: TopologyChecker; [WARNING] [ObjectFactory] Default template for class TopologyBoundingTrasher already registered (Vec3d), do not register Vec3d as the default; [WARNING] [ObjectFactory] Class already registered: TopologyBoundingTrasher<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscTopology/lib/libSofaMiscTopology.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscExtra/lib/libSofaMiscExtra.so; [WARNING] [ObjectFactory] Class already registered: GearSpringForceField<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: MeshMatrixMass<Vec1d,double>; [WARNING] [ObjectFactory] Class already registered: MeshMatri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:32213,Plugin,PluginManager,32213,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability," an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/572:2635,Plugin,PluginManager,2635,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572,1,['Plugin'],['PluginManager']
Modifiability," automatic registration of the target name and I can revert back to this one. ; But I proposed a second, explicit, approach for two reasons:; - the automatic mecanism force the deployement of the new approach for all the sofa code components at once... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder if going for things like ; ```cpp; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; .addTargetName(""SofaOpenglVisual""); ``` ; or even:; ```cp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:1210,config,config,1210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615,2,['config'],['config']
Modifiability," be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ; > > > —; > > > You are receiving this because you are subscribed to this thread.; > > > Reply to this email directly, view it on GitHub , or mute the thread .; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936,; > > or mute the thread; > > https://github.com/notif",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:2022,plugin,plugin,2022,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225,1,['plugin'],['plugin']
Modifiability," by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/487:2046,extend,extend,2046,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487,2,"['extend', 'plugin']","['extend', 'plugin']"
Modifiability," calling sofa_generate_package or sofa_install_targets; - include_directories:; - BUILD_INTERFACE: the directory given in INCLUDE_SOURCE_DIR or ""${CMAKE_CURRENT_SOURCE_DIR}/.."" (bad but necessary for old modules); - BUILD_INTERFACE: ""${CMAKE_BINARY_DIR}/include/${PROJECT_NAME}""; - INSTALL_INTERFACE: ""install"" (if relocatable plugin) or ""install/${PROJECT_NAME}""; - DEBUG_POSTFIX: ""_d""; - VERSION: Sofa_VERSION. ------------------------. Cleaning of config.h mechanism (consistency with all other SOFA modules); - deprecate headers not following the ""config.h"" naming convention; - sofa/core/core.h -> sofa/core/config.h; - sofa/defaulttype/defaulttype.h -> sofa/defaulttype/config.h; - sofa/helper/helper.h -> sofa/helper/config.h; - sofa/simulation/simulationcore.h -> sofa/simulation/config.h; - SofaSimulationCommon/common.h -> SofaSimulationCommon/config.h; - SofaSimulationGraph/graph.h -> SofaSimulationGraph/config.h; - SofaSimulationTree/tree.h -> SofaSimulationTree/config.h; - sofa/gui/SofaGUI.h -> sofa/gui/config.h; - sofa/gui/qt/SofaGuiQt.h -> sofa/gui/qt/config.h; - centralize config.h call chain on sofa/config.h; - sofa/helper/system/config.h is now useless; -> WARNING: maybe not a good idea, review needed here; - dispatch all SOFA_BUILD_* macros from packages' config.h towards modules' config.h (good for future modularizations). ------------------------. Moving SofaGui modules into ""modules"" directory + cleaning their source trees. ------------------------. Every package is now also a library. Work started by @fredroy in #1314, 3 packages remained; - SofaFramework; - SofaGui; - SofaSimulation. ------------------------. Cleaning source trees to eliminate some "".."" include directories; (files move but includes stay the same); - SofaExporter; - SofaGuiCommon; - SofaGuiQt; - SofaHeadlessRecorder; - SofaMiscCollision. ------------------------. Fix #1395 by removing ""relocatable"" attribute from SofaNonUniformFem, SofaValidation, SofaDenseSolver. ------------------------",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1397:1168,config,config,1168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397,7,['config'],['config']
Modifiability," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1204,inherit,inherit,1204,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236,8,['inherit'],"['inherit', 'inheriting']"
Modifiability," details. Use the; cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; SofaKernel/modules/Sofa.Config/cmake/SofaMacrosConfigure.cmake:112 (cmake_dependent_option); SofaKernel/modules/Sofa.Config/cmake/SofaMacrosConfigure.cmake:141 (sofa_add_generic); modules/CMakeLists.txt:38 (sofa_add_plugin); This warning is for project developers. Use -Wno-dev to suppress it. Adding plugin SofaOpenglVisual; Adding plugin SofaMiscTopology; Adding plugin SofaMiscExtra; Adding plugin SofaMiscForceField; Adding plugin SofaMiscEngine; Adding plugin SofaMiscSolver; Adding plugin SofaMiscFem; Adding plugin SofaMiscMapping; Adding plugin SofaMiscCollision; SofaMiscModule: build all maintained sofa components.; Found Boost: E:/GitHub/vcpkg/installed/x64-windows/include (found version ""1.77.0"") found components: program_options ; -- SofaGuiCommon: Sofa.GL dependent features enabled.; SofaGuiQt: will use Qt5; Adding collection SofaComponentAll; J:/GitHub/sofa/src/applications/plugins/SofaHighOrder does not exist and will be ignored.; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; Python:; Version: 3.9.7; Executable: D:/11631/miniconda3/python.exe; Headers: D:/11631/miniconda3/include; Libraries: D:/11631/miniconda3/libs/python39.lib; User site: C:\Users\11631\AppData\Roaming\Python\Python39\site-packages; pybind11:; Version: 2.8.1; Config: E:/GitHub/vcpkg/installed/x64-windows/share/pybind11/pybind11Config.cmake; Adding plugin LMConstraint; SofaDistanceGrid not found: DistanceLM codes will not be compiled; Adding application runSofa; Write Plugin list at J:/GitHub/sofa/build/bin/plugin_list.conf.default; Configuring incomplete, errors occurred!; See also ""J:/GitHub/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""J:/GitHub/sofa/build/CMakeFiles/",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2814:4079,plugin,plugins,4079,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2814,1,['plugin'],['plugins']
Modifiability," features:. - All components inherit from `StateAccessor`, which contains a dynamic list of `BaseMechanicalState`; - Components having access to only one mechanical state inherit from `SingleStateAccessor`. It is templated on `DataTypes`, with a link to a `MechanicalState<DataTypes>`.; - Components having access to 2 mechanical states inherit from `PairStateAccessor`. It is templated on `DataTypes1` and `DataTypes2`, with a link to a `MechanicalState<DataTypes1>` and a second link to a `MechanicalState<DataTypes2>`.; - Components inheriting from `SingleStateAccessor` or `PairStateAccessor` fill the dynamic list contained in the `StateAccessor` implementation.; - It does not break the previous accesses, variable names etc. The goal is that all the components accessing a `BaseMechanicalState` can provide a list of them in a generic way. For example, `BaseInteractionForceField` supposed only 2 mechanical states. Since it inherits now from `StateAccessor`, it can have links to more than 2 (note that none of the interaction force field I found work with more than 2). Another example: `BaseForceField` did not have any reference to a mechanical state, but all the force fields inherits from `ForceField` which has a link to a mechanical state. Therefore, we couldn't have access to a mechanical state from a `BaseForceField`. I also cleaned the files:; - Concatenate nested namespaces; - Use `#pragma once`; - Some private and non-defined copy constructors and `operator=` are marked `delete`.; - Move methods in cpp; - Removed unnecessary `init()` implementations. They only called their base class `init()`.; - `Constraint ` has a link to the mechanical state instead of a raw pointer.; - Some constructors marked `explicit`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#so",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2438:1293,inherit,inherits,1293,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438,1,['inherit'],['inherits']
Modifiability," files. <img src=""https://user-images.githubusercontent.com/11028016/106575747-b3910180-653c-11eb-8f43-6ec65390ce2f.png"" width=""350"" > &nbsp; <img src=""https://user-images.githubusercontent.com/11028016/106575725-ae33b700-653c-11eb-89e3-4bdeae912a94.png"" width=""350"" >. 2. Other modules (SofaGeneral, etc); - clean deps (useless includes, use lower level objects, etc), linked with the following NG2 actually. SOFA modules dependency (library link) graph: https://www.sofa-framework.org/graph/. *clang tools?*; *include-what-you-need?*. ### NG2: Pluginize all SOFA modules; Pluginizing a module = making it a [CMake Package](https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html) that can be enabled/disabled in SOFA CMake options.; Pluginizing **does not mean** moving files (it did in the past). The module stays in place, only the CMake files change. The Components within the module stay in place too. Done module pluginizations: https://github.com/sofa-framework/sofa/issues?q=is%3Amerged+label%3A%22NG2%3A+pluginization%22. Quick schematics on the current state and what will be achieved:. <img src=""https://www.sofa-framework.org/wp-content/uploads/2020/10/stc9_overview_v20.06.png"" width=""40%"" height=""auto"" /> &nbsp; <img src=""https://www.sofa-framework.org/wp-content/uploads/2020/10/stc9_modularization_plan.png"" width=""40%"" height=""auto"" />. [SOFA Modules' plan](https://drive.google.com/file/d/14H2YRu0z8usiqTpGQuxcnel1uf1Hna1I/view?usp=sharing). ### NG3: Reorganize SOFA modules towards new architecture; ~~Latest architecture proposal: https://annuel2.framapad.org/p/sofang-v7~~; Latest architecture proposal: https://annuel2.framapad.org/p/sofang-v8. *Continue using recipes with https://github.com/guparan/sofa2ng ?*. ### NG4: Cleaning the applications/plugins repository; Following the [planning](https://docs.google.com/spreadsheets/d/1FVQN4rghI1SSYuhT1Y3L5fUZdL7XXPETgQ1GQ28KlD8/edit#gid=0) we built at our previous STC, we should start moving out these plugins in new ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1527:2347,plugin,pluginization,2347,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527,1,['plugin'],['pluginization']
Modifiability," function is provided. To maintain the backward compatibility and to facilitate the design of a simulation scene, `StiffSpringForceField` continues to accept two Data attributes ('object1' and 'object2') corresponding to two different objects. However, they don't correspond to any Data or Link in the component. Actually, during its creation, the component will instantiate other components in order to link both objects into one. In the end, the component is able to work on a single mechanical state while keeping the same physical behavior. The component now instantiates:. 1. A new Node; 2. A new mechanical state which will be the fusion of the provided objects, ; 3. A `SubsetMultiMapping` that will make the link between the two provided objects and the new mechanical state; 4. The spring force field. Since `SubsetMultiMapping` was initially in SofaMiscMapping, it has been moved into SofaBaseMechanics. A compatibility layer is available. Other components using `StiffSpringForceField` had to be adapted to create also the extra components. An example is `AttachBodyPerformer` which creates the spring between an object and the mouse (shift + clic). WARNING:; Since `StiffSpringForceField` is now necessarily located in a mapped node, its stiffness matrix is not mapped in case of a built linear system. The forces are then computed explicitly only. This issue will be addressed in the new design of the matrix assembly. TODO:. - [x] A description for this PR; - [ ] Handle topological changes in `SpringForceField` -> see https://github.com/sofa-framework/sofa/pull/2653 and https://github.com/sofa-framework/sofa/pull/2729; - [x] Deal with `BoxStiffSpringForceField` -> see https://github.com/sofa-framework/sofa/pull/2621; - [x] Compilation and tests issues on CI (CUDA); - [x] In `AttachBodyPerformer`, a Node remains in the scene when `AttachBodyPerformer` is destroyed. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/224]. _________________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554:1574,adapt,adapted,1574,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554,1,['adapt'],['adapted']
Modifiability," https://godbolt.org/z/xr56hnex6. ```cpp; struct BehaviorModel {};; struct BaseMapping {};; struct OdeSolver {};. template<class... T>; struct Identifier; {};. template <>; struct Identifier<BehaviorModel>; {; using type = std::set<BehaviorModel*>;; type behaviorModel;; void addBehaviorModel(BehaviorModel* o) { behaviorModel.insert(o); }; void removeBehaviorModel(BehaviorModel* o) { behaviorModel.erase(o);}; };. template <>; struct Identifier<BaseMapping>; {; using type = std::vector<BaseMapping*>;; type mapping;; void addMapping(BaseMapping* obj) { mapping.push_back(obj); }; void removeMapping(BaseMapping* obj) { }; };. template <>; struct Identifier<OdeSolver>; {; using type = std::vector<OdeSolver*>;; type solver;; void addOdeSolver(OdeSolver* obj) { solver.push_back(obj); }; void removeOdeSolver(OdeSolver* obj) { }; };. template<class T, class... Rest>; struct Identifier<T, Rest...> : public Identifier<T>, public Identifier<Rest...>; {};. template<class T, class... Rest>; auto get(const Identifier<T, Rest...>& i); {; return *(typename Identifier<T>::type*)&static_cast<const Identifier<T>&>(i);; }. using NodeComponentsContainer =; Identifier<BehaviorModel, BaseMapping, OdeSolver>;. int main(); {; NodeComponentsContainer n{};; n.solver.push_back(nullptr);; n.mapping.push_back(nullptr);; n.solver.push_back(nullptr);. n.addOdeSolver(nullptr);. get<BaseMapping>(n).push_back(nullptr);. return 0;; }; ```. This is very similar to a `std::tuple` except that the identifiers of the variables is maintained, as well as the added function (such as `addBehaviorModel` and `removeBehaviorModel`). There is a ""universal"" getter (you can equivalently do `n.mapping.push_back(nullptr);` or `get<BaseMapping>(n).push_back(nullptr);` or `n.addMapping(nullptr);`). If we decide to go to this direction, there is difficulty to implement it due to the inhertiance between `Node` and `BaseNode`. It's quite complex for not a big feature, so maybe it does not worth spending more time on this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3956#issuecomment-1638353746:1612,variab,variables,1612,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3956#issuecomment-1638353746,1,['variab'],['variables']
Modifiability," indices are resized; - BTDLinearSolver: fix constant log + operator new [] vs operator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: fix principal values ordering with input matrix is diagonal + uninitialized value w",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/756:1663,inherit,inherited,1663,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756,1,['inherit'],['inherited']
Modifiability," is composed of two aspects. 1) **Registering components by ""plugin.classname"" instead of ""classname"" in the ObjectFactory**. The factory currently access component by their classname only causing collision when two component have the same name/template. To avoid this, the PR add the plugin name as a prefix for the Factory'key. As an exemple, a component created with *<OglModel>* in the past is now referenced as *<SofaOpenglVisual.OglModel>*. Backward compatbility is possible by adding into the factory registration an alias mapping between ; new names and old name;; Eg:; ```; ""OglModel"" => ""SofaOpenglVisual.OglModel""; ```. 2) **Importing plugin and component *à la* python**; A new component called *FromComponent* is added to handle the loading of plugin and the import of object. . Examples of use:; ```; 	 # To make only <OglModel> accessible in the scene; 	<From plugin=""SofaOpenglVisual"" import=""OglModel""/>; 	<OglModel/>. 	# To add ""custom"" name in a scene ; 	<From plugin=""SofaOpenglVisual"" import=""OglModel"" as=""RenderingModel""/>; 	<RenderingModel/>. 	# To be a super lazy man and import everything; 	<From plugin=""SofaOpenglVisual"" import=""*""/>; ```. I didn't implemented multiple object imports so currently it is necessary to do ; ```; <From plugin=""SofaOpenglVisual"" import=""OglModel""/>; <From plugin=""SofaOpenglVisual"" import=""GlslShader""/>; ```; But we could as in python with:; ```; <From plugin=""SofaOpenglVisual"" import=""OglModel, GlslShader""/>; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not gene",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512:1142,plugin,plugin,1142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512,1,['plugin'],['plugin']
Modifiability," it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: fix principal values ordering with input matrix is diagonal + uninitialized value warning; - VisualModelImpl: fix wrong object (triangles) called when adding quads in handleTopologyChange(); - VoxelGridLoader: `std::unique` result was not used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/756:2007,variab,variables,2007,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756,1,['variab'],['variables']
Modifiability," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1663,plugin,plugin,1663,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188,12,"['config', 'plugin']","['config', 'configuration', 'plugin', 'plugins']"
Modifiability," load and unload the scene, first with no collision models, then one collision model, and then two collision models.; -> each graph has 3 segments. ```python; import Sofa; import Sofa.Core; import Sofa.Simulation; from enum import Enum. class TestCase(Enum):; ONE_MODEL = 0; TWO_MODELS = 1; NONE = 2. class SimulationHandler:; def __init__(self):. self.root_node = Sofa.Core.Node(""root""); self.nodes = createScene(self.root_node, TestCase.NONE); Sofa.Simulation.init(self.root_node). def step(self):; Sofa.Simulation.animate(self.root_node, self.root_node.getDt()). def reload(self, case: TestCase = TestCase.NONE):. Sofa.Simulation.unload(self.root_node); self.root_node = Sofa.Core.Node(""root""); self.nodes = createScene(self.root_node, case); Sofa.Simulation.init(self.root_node). def createScene(root, case: TestCase):; plugins = [; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ]; for plugin in plugins:; root.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root.addObject(""DefaultAnimationLoop""); root.addObject(""DefaultPipeline""); root.addObject(""BruteForceBroadPhase""); root.addObject(""BVHNarrowPhase""); root.addObject(""DefaultContactManager""); root.addObject(; ""LocalMinDistance"",; alarmDistance=5.0,; contactDistance=0.5,; ). node_1 = root.addChild(""child_1""); node_1.addObject(""MechanicalObject"", position=[0, 0, 0] * 5). node_2 = root.addChild(""child_2""); node_2.addObject(""MechanicalObject"", position=[1, 1, 1] * 5). if case == TestCase.ONE_MODEL:; node_1.addObject(""PointCollisionModel""); elif case == TestCase.TWO_MODELS:; node_1.addObject(""PointCollisionModel""); node_2.addObject(""PointCollisionModel""); elif case == TestCase.NONE:; pass. return node_1, node_2. if __name__ == ""__main__"":; simulation = SimulationHandler(). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.NONE). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.ONE_MODEL). for i in range(5000):; si",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318:1207,plugin,pluginName,1207,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318,3,['plugin'],"['plugin', 'pluginName']"
Modifiability," not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` will incorrectly use the `initData()` version without default value but with one boolean flag, as `""mydefaultvalue""` is a `const char*` which requires a ""user-defined"" conversion to `std::string`, while `""help message""` is implicitely convertible to `bool` without any ""user-defined"" conversion, so preferred by the compiler. So if we break the compatibility to the current `initData()` API, I would strongly suggest to remove this issue, by removing the two optional bool flags which are seldom used anyway (and can be replaced by a call to `setDisplayed()` or `setReadOnly()`).; * compared to when this code was originally written, c++ now allows to put initializers of member variables in the class declaration directly, which for Data members could be preferable to initializing them in the constructor (the name and help message would be visible in the header instead of the implementation, it does not need to be duplicated in case there are multiple constructors, and there would no longer be any unhelpful warnings on some compilers about mismatched initialization orderings). I'm not suggesting to do that in all the components in this PR (as the diff would be horible to review), but any new designs of `initData` should check that this is possible (last time I looked at that, gcc and msvc did not agree on if we needed to write `Data<> d = initData(...)` versus `Data<> d { initData(...) }` versus `Data<> d = { initData(...) }`, but it was a long time ago...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:2679,variab,variables,2679,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283,2,['variab'],['variables']
Modifiability," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:2539,plugin,plugin,2539,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946,2,['plugin'],['plugin']
Modifiability," on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/572:4455,Plugin,Plugin,4455,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572,4,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugins']"
Modifiability, plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Projective.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.AnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Intersection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Mapper.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.so; [INFO] [PluginManager] L,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:7683,Plugin,PluginManager,7683,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability, plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Utility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Visual.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSystem.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.Iterative.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.Direct.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.Preconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Diffusion.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.Linear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.NonLinear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Releas,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:3907,Plugin,PluginManager,3907,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralAnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralDeformable.dll; [ERROR] [PluginManager] Plugin not found: ""SofaGeneralEngine""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralLinearSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralSimpleFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralTopology.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaTopologyMapping.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaUserInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaConstraint.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/S",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:7754,Plugin,PluginManager,7754,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaEngine.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGraphComponent.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaBoundaryCondition.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralAnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralDeformable.dll; [ERROR] [PluginManager] Plugin not found: ""SofaGeneralEngine""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralLinearSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/R",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:6663,Plugin,PluginManager,6663,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. #################; --- sys.version ---; 3.8.10 (default, May 26 2023, 14:05:08) ; [GCC 9.4.0]; --- PATH ---; /opt/Qt/Tools/QtInstallerFramework/4.5/bin:/opt/Qt/5.12.8/gcc_64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; --- SOFA_ROOT ---; --- PYTHONPATH ---; --- sys.path ---; ['', '/usr/lib/python38.zip', '/usr/lib/python3.8', '/usr/lib/python3.8/lib-dynload', '/usr/local/lib/python3.8/dist-packages', '/usr/lib/python3/dist-packages']; #################. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt; [INFO] [runSofa] PluginRepository paths = /builds/sofa/build/plugins:/builds/sofa/build/collections:/builds/sofa/build/lib; [INFO] [runSofa] DataRepository paths = /builds/sofa/src/share:/builds/sofa/src/examples:/builds/sofa/build:/builds/sofa/build; [INFO] [runSofa] GuiDataRepository paths = /builds/sofa/src/applications/projects/runSofa/resources:/builds/sofa/build; [INFO] [BaseGUI] Created directory: /builds/sofa/build/config; [INFO] [BaseGUI] Created directory: /builds/sofa/build/screenshots. ########## SIG 11 - SIGSEGV: segfault ##########; sofa::helper::BackTrace::sig(int); std::vector<std::filesystem::__cxx11::path::_Cmpt, std::allocator<std::filesystem::__cxx11::path::_Cmpt> >::~vector(); std::vector<std::filesystem::__cxx11::path::_Cmpt, std::allocator<std::filesystem::__cxx11::path::_Cmpt> >::~vector(); sofa::helper::system::FileRepository::findFileIn(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&); sofa::helper::system::FileRepository::findFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3943:2579,Plugin,PluginRepository,2579,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3943,3,"['Plugin', 'config', 'plugin']","['PluginRepository', 'config', 'plugins']"
Modifiability," read). ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the modules we want; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users; - cleaning the applications/plugins repository. ## Tasks. Here are the main steps of the project.; Tasks NG1 and NG2 can be done in parallel if we work ""bottom->top"" in NG1 and ""top->bottom"" in NG2.; Task NG3 can also be started in parallel. We need to iterate on the architecture proposal to refine it as much as possible before steps NG1 and NG2 are over.; Task NG4 cleaning the applications/plugins repository in order to better handle code lifecycle. ### NG1: Simplify headers dependency graph by removing un-needed includes. 1. SofaKernel; - clean/rewrite/reorganize SofaHelper and SofaDefaulttype #1521 ; - remove completely useless files. <img src=""https://user-images.githubusercontent.com/11028016/106575747-b3910180-653c-11eb-8f43-6ec65390ce2f.png"" width=""350"" > &nbsp; <img src=""https://user-images.githubusercontent.com/11028016/106575725-ae33b700-653c-11eb-89e3-4bdeae912a94.png"" width=""350"" >. 2. Other modules (SofaGeneral, etc); - clean deps (useless includes, use lower level objects, etc), linked with the following NG2 actually. SOFA modules dependency (library link) graph: https://www.sofa-framework.org/graph/. *clang tools?*; *include-what-you-need?*. ### NG2: Pluginize all SOFA modules; Pluginizing a module = making it a [CMake Package](https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html) that can be enabled/disabled in SOFA CMake options.; Pluginizing **does not mean** moving files (it did in the past). The module stays in place, only the CMake files change. The Components within the module stay in place too. Done module pluginizations: https:",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1527:1239,rewrite,rewrite,1239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527,1,['rewrite'],['rewrite']
Modifiability," reasons other the past years, namely; - SOFA_LIBSUFFIX which should be set as ""_d"" during a debug build is broken under msvc since c89da68 which as the commit name says is indeed monstruous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/487:1281,plugin,plugin,1281,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487,1,['plugin'],['plugin']
Modifiability," sofa::core::MechanicalParams*);; SOFA_CORE_API SReal kFactorIncludingRayleighDamping(const sofa::core::MechanicalParams*, SReal d);; SOFA_CORE_API SReal mFactorIncludingRayleighDamping(const sofa::core::MechanicalParams*, SReal d);; SOFA_CORE_API SReal dt(const sofa::core::MechanicalParams*);; }; }. namespace sofa::core::visual::visualparams; {; SOFA_CORE_API VisualParams* defaultInstance();. SOFA_CORE_API ExecParams* asExecParams(sofa::core::visual::VisualParams*);; SOFA_CORE_API const ExecParams* asExecParams(const sofa::core::visual::VisualParams*);. SOFA_CORE_API sofa::core::visual::DrawTool* getDrawTool(VisualParams* params);; SOFA_CORE_API sofa::core::visual::DisplayFlags& getDisplayFlags(VisualParams* params);; SOFA_CORE_API sofa::core::visual::DrawTool* getDrawTool(const VisualParams* params);; SOFA_CORE_API const sofa::core::visual::DisplayFlags& getDisplayFlags(const VisualParams* params);; }; ```. The PR didn't changed existing simulation behavior or API and thus:; - shouldn't have any impact on sofa simulations; - shouldn't requires code refactoring. Because of the cleaning of the header dependency graph, third party code to include explicity the header files they are using.; The following ones are less visible:; ```cpp; #include<sofa/core/ExecParams.h>; #include<sofa/core/ConstraintParams.h>; #include<sofa/core/MechanicalParams.h> ; #include<sofa/core/visual/VisualParams.h>; #include<sofa/core/visual/DisplayFlags.h>; #include<sofa/core/visual/DrawTool.h>; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnin",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794:2542,refactor,refactoring,2542,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794,1,['refactor'],['refactoring']
Modifiability," the old symbol, which is strange and certainly made the compat layer break is used because often the two types where completely unrelated but `setParent` isn't templated so.... ; 2. This compat layer only works for `Data<T>` every types that inherits from it, will only see the original `Data<T>` methods taken into account in the compact layer. This was the case here for `DataFileName` and all `TopologicalData`. . I've decided to adopt two different strategy : ; 1. For `DataFileName` I didn't put my component and still usef the 'setParent' strategy. This is because, a priori, we won't chage a filename data during execution, this is often a given parameter, but we often use methods specific to `DataFileName`. ; 2. For the topological one, usually topological mechanisms are used in very specific classes to handle topological changes. But in a user perspective, it is often used as a classical `Data<vector<Index>>`. So What I did is use `RenamedData` on those, allowing the compat on the `Data<T>` level, but not for the topological methods which are not working anymore on the old symbol (and will create a compilation error if used)... ; ; To make it cleaner we might need to create new `RenamedData` class for all classes inheriting from `Data<T>`. Which is not the purpose of this PR. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4927:1556,inherit,inheriting,1556,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4927,1,['inherit'],['inheriting']
Modifiability," the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternal",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/572:4725,Plugin,Plugin,4725,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572,3,['Plugin'],"['Plugin', 'PluginManager']"
Modifiability," timing of GenericConstraintSolver. ### Improvements; - Constraint problem locking extended to be safer (but not yet completely safe) when using multiple forcefeedback devices.; - GenericConstraintCorrection: automatically search LinearSolver from context when solverName is not specified (same behavior as LinearSolverConstraintCorrection).; - Factorize the computation of the compliance matrix and virtualize the computation of dx.; - Improve UncoupledConstraintCorrection compliance computation. Use the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState.; - UncoupledConstraintCorrection for rigid is now in a 7 value vector. When using the default initialization of the compliance using the mass matrix of the rigid the linear part of the compliance was added twice. ### Moved files; - Move contact identifier code in a separate file to avoid inelegant FrictionContact.h inclusion ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/484:1313,refactor,refactoring,1313,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484,1,['refactor'],['refactoring']
Modifiability," to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked to has a valid type or is vacant. Overall I’m not 100% confident this kind of approach would work. For case 2.:. In this case one kind of remains in the “python-world” and it is not necessary to have an exhaustive set of possible types, I think. It would be enough to have types such as string, int, float, array, matrix, etc. Here one could use the identifiers already used in python. Also, the user has to state the type he wants for the Output, since there is no way of inferring automatically when both ends are subject to the user’s choice. Therefore, this would be limited to declaring the desired type of an Output. The types for the Inputs should always be derived automagically, I think. I hope this ideas are useful!. Cheers!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:3051,extend,extended,3051,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416,2,['extend'],['extended']
Modifiability," to flag the non-zero values with its index position in the array. The matrix product will implicitly keep track of all the operations thanks to the newly introduced scalar types.; 2. Because of the new method, `SparseMatrixStorageOrder` is no longer useful. It can be removed later; 3. Unit tests are extensive. They test all possible configuration of storage of LHS, RHS and Result. They are required because a condition on the storage type is required to swap the indices after the matrix product.; 4. A parallel version of the algorithm is introduced; 5. Benchmarks: https://github.com/alxbilger/SofaBenchmark/pull/39. Analysis of the results of the benchmarks:; - The best configuration storage for the fast matrix product seems to be ColColCol; - The fast matrix product is always faster than the regular product, except for a matrix of size 1000 and sparsity of 15%. This probably indicates that the method is adapted for very sparse matrices; - The parallel fast matrix product algorithm is always faster than the sequential algorithm, except for very small matrices where the overhead of parallelism is not negligible. However, the speed up is not linear with the number of cores and can be disappointing.; - The parallel fast matrix product is always faster than the regular product even for the matrix of size 1000 and sparsity of 15%, but not for very small matrices (overhead). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4547:1088,adapt,adapted,1088,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4547,1,['adapt'],['adapted']
Modifiability," to unwanted foreign headers.; e.g. doing `find_package(SofaFramework)` will NOT be sufficient to `#include <SofaSomething/anything.h>` (you will get a file not found error).; I think it is way easier to understand that a `find_package` is missing when `#include` fails with ""file not found"" error (at write time if you have a good IDE, at build time otherwise) than with link error (at build time).; Moreover, it will be easier to understand what package is needed for a module by navigating in the include directory.; More details in commit message. ### [[CMake] Make plugins relocatable](https://github.com/sofa-framework/sofa/commit/5b0585f9ad2884cb5462884dffd711ae4d6f2266); **THIS FEATURE IS OPTIONAL**. See the RELOCATABLE parameter of sofa_generate_package.; When building and installing SOFA with plugins - internal (in applications/plugins) or external (included with SOFA_EXTERNAL_DIRECTORIES) - the plugins will not be mixed with SOFA anymore.; Instead, they will be installed in their own directory under `<install_prefix>/plugins`.; More importantly, they will be relocatable which means they will behave like if they were built out-of-SOFA.; Principal advantage: we will be able to get redistributable plugin binaries through a classic SOFA build. . ### [Defrost binaries changes for a better install, specifically on MacOS](https://github.com/sofa-framework/sofa/commit/22f3c14a25bf879143fb58403a34d569e8ab727f); - [CMake] FIX install: SofaMiscCollision, SofaDistanceGrid, SofaImplicitField; - [CMake] FIX install on MacOS: differentiate SOFA_BUILD_RELEASE_PACKAGE and SOFA_BUILD_APP_BUNDLE; - [SofaMacros] ADD backward compatibility for INCLUDE_INSTALL_DIR; - [SofaMacros] ADD EXAMPLE_INSTALL_DIR to sofa_create_package; - [SofaMacros] Improve sofa_set_python_directory macro; - [SofaPython] Wider dir search for env loading; - [SofaGuiQt] Remove VSync message; - [package.cmake] Do not force CMAKE_BUILD_TYPE + Enable more plugins. ### [[DiffusionSolver] MOVE from image/extlibs to ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1018:2329,plugin,plugins,2329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1018,1,['plugin'],['plugins']
Modifiability," { ; return ""CustomName;; }; ```. Removal of nullptr in className, templateName, typeName; ----------------------------------------------------------------------------; In Base.h the className, templateName, typeName are static templated function with the templated type also provided as a parameter (and nullptr if not provided). If think that having the parameter duplicating the template one is not good as it is misleading on the purpose of the function.; In the following example ; ```cpp; MyObject* ptr;; Base::className(ptr); ; ```; You don't see this is a templated method and you have no idea what 'ptr' is for, and you don't even know if putting a nullptr will work or not. ; Using the templated only syntax is more clear on the role of the function; ```cpp; Base::className<MyObject>(); ; ```; Or if you have an object instance; ```cpp; Base::className<declspec(obj)>(); ; ```. Most common code update pattern; ============================; The most common compilation problem you will encounter with non updated external plugin is related to the overriding of getTemplateName or templateName() method. This method is now now considered as final and thus it is not possible to override it anymore. ; To update old code like this: ; ```cpp; MyClass : public BaseObject; virtual std::string getTemplateName() const { return templateName(); } ; static std::string templateName(const CapsuleCollisionModel<DataTypes>* = nullptr); {; return DataTypes::Name();; }; ```; You can remove the code as the default name generation mecanisme can handle that for you automatically using the ""Name"" . . In the case if your DataTypes does not have a Name() function or if some of the class template parameters should not be exposed as runtime template then you need to implement your custom naming scheem by implementing the following function; ```cpp; static const std::string CustomTemplateName(); { ; return ""CustomName"";; }; ```. ______________________________________________________; <!--- Please lea",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1283:3346,plugin,plugin,3346,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283,1,['plugin'],['plugin']
Modifiability, │   │   │   └── Submodule_Simulation_doc.h; │   │   └── Types; │   │   └── Binding_BoundingBox.h; │   ├── SofaBaseTopology; │   │   ├── Binding_RegularGridTopology_doc.h; │   │   ├── Binding_RegularGridTopology.h; │   │   ├── Binding_SparseGridTopology_doc.h; │   │   └── Binding_SparseGridTopology.h; │   ├── SofaDeformable; │   │   ├── Binding_LinearSpring_doc.h; │   │   ├── Binding_LinearSpring.h; │   │   ├── Binding_SpringForceField_doc.h; │   │   └── Binding_SpringForceField.h; │   ├── SofaGui; │   │   ├── Binding_BaseGui.h; │   │   └── Binding_GUIManager.h; │   ├── SofaRuntime; │   │   └── Timer; │   │   ├── Submodule_Timer_doc.h; │   │   └── Submodule_Timer.h; │   └── SofaTypes; │   ├── Binding_Mat.h; │   ├── Binding_Quat.h; │   └── Binding_Vec.h; ├── lib; │   ├── cmake; │   │   └── SofaPython3; │   │   ├── BindingsConfig.cmake; │   │   ├── BindingsTargets.cmake; │   │   ├── BindingsTargets-debug.cmake; │   │   ├── PluginConfig.cmake; │   │   ├── PluginTargets.cmake; │   │   ├── PluginTargets-debug.cmake; │   │   ├── SofaPython3Config.cmake; │   │   └── SofaPython3ConfigVersion.cmake; │   ├── libSofaPython3.so; │   └── python3; │   └── site-packages; │   ├── Sofa; │   │   ├── Components.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.py; │   │   └── SofaRuntime.cpython-3,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:4329,Plugin,PluginTargets-debug,4329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592,1,['Plugin'],['PluginTargets-debug']
Modifiability,![image](https://acegif.com/wp-content/gifs/non-25.gif). file cannot create directory:; 1> C:/projects/sofa-build/$C:/projects/sofa-install/plugins/SceneCreator/lib.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1154#issuecomment-534740462:140,plugin,plugins,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1154#issuecomment-534740462,1,['plugin'],['plugins']
Modifiability,![image](https://user-images.githubusercontent.com/12150715/159927035-5bb99efb-1453-42e2-b5dd-191e4b4c6d21.png); ![image](https://user-images.githubusercontent.com/12150715/159926857-6592505a-0fb8-4078-8312-78c266413965.png). It allows for instance to use config files `runSofa scene.py --argv myConfig.toml`.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2802#issuecomment-1077632153:256,config,config,256,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2802#issuecomment-1077632153,1,['config'],['config']
Modifiability,"# Problem; After updating Sofa source code, you got; `; error: variable has incomplete type 'void'; void SOFA_SOFAEIGEN2SOLVER_API initSofaEigen2Solver();""; `; (or something similar e.g with SOFA_SOFASIMULATIONCOMMON_API , etc). # Why?; While processing the pluginization, macro and config.h files are being rewritten/cleaned to follow the guidelines on Sofa's packaging. So old generated files from cmake's configuration step can mess up with the new ones (compiler does not know which config.h to include and so on). # Solution; Delete the include directory located at the root of your build directory, and configure cmake again. Deletion will clean up everything, and cmake will generate the new config.h.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1670:63,variab,variable,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1670,7,"['config', 'plugin', 'variab']","['config', 'configuration', 'configure', 'pluginization', 'variable']"
Modifiability,"# Problem; The configure step (and the generating step as well) became awfully slow on Windows.; After finding how to profile with CMake, we can find 3 slowing down parts with the vanilla set-up:. ![cmake0](https://user-images.githubusercontent.com/11028016/108479329-e30e7080-7295-11eb-9440-4571b63c3341.PNG); (trace after running the cmake process with a already populated CMakeCache). - CPack analysis at the end; - All modules does a awful lot of find_package() even if it is packages already found before; - (On windows only?) the sofa_install_lib at the beginning. # (Proposal of) Solution. Not an expert of CMake at all but this PR:; - Set an option if you really want to use CPack (this is only used when packing) -> **harmless**; - Modify sofa_find_package to test if the desired packages/target is already imported/loaded , use it everywhere -> **I may have missed something here**; - remove the recursiveness in sofa_install_package -> **seems OK on Windows but I suspect it was made for Linux actually**. Here is the trace after applying the modifications:; ![cmake1](https://user-images.githubusercontent.com/11028016/108480054-c292e600-7296-11eb-913c-7f3ad5a85adf.PNG). It takes only around 8sec instead of around 38 sec initially, on Windows (without counting generating apparently); In my Ubuntu VM, it takes around 2 sec for the whole process ! (configure + generating); But I have no doubt I may have introduce bugs etc. 🤨 so feel free to react. Unfortunately, I dont know for now how to reduce the generating step time 😥. # Nota Bene; For those interested on how to trace/profile the cmake processing time: #1838. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Revie",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1837:15,config,configure,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1837,1,['config'],['configure']
Modifiability,"# This pull request. I introduce a new component: `BruteForceBroadPhase`. This component should not be confused with `BruteForceDetection`. `BruteForceDetection` is two components at once: a broad phase and a narrow phase. I extracted the broad phase code from `BruteForceDetection` and put it in `BruteForceBroadPhase`. `BruteForceBroadPhase` is only a broad phase. There is no narrow phase code inside. The broad phase code extracted from `BruteForceDetection` is taken in #1999. Looking at `RayTraceDetection`, it is also a mix of a broad phase and narrow phase. In this component, the broad phase is actually a brute force broad phase. The broad phase in `RayTraceDetection` did exactly the same thing than the broad phase in `BruteForceDetection`. It means duplicated code. With `BruteForceBroadPhase` we have an opportunity to factorize the broad phase by inheriting from `BruteForceBroadPhase` instead of `BroadPhaseDetection`. This is what I did in `RayTraceDetection`. Doing that, I could remove all the broad phase code from `RayTraceDetection`. # What comes next. It is also my intention to inherit from `BruteForceBroadPhase` in `BruteForceDetection`, and remove all the broad phase code from `BruteForceDetection`. The broad phase code from `BruteForceDetection` and `RayTraceDetection` would be shared from `BruteForceBroadPhase`. However, I expect complex conflicts because of #1999. I'll do that if #1999 is accepted and merged. It is also my intention to extract the narrow phase from `BruteForceDetection` and put it in another component which would inherit from `NarrowPhaseDetection`. The narrow phase in `BruteForceDetection` is not brute force, and should be named with a clearer and more meaningful name. It will be the case with the new component. I also believe SAP can be implemented as a broad phase only component. We would have the choice between `BruteForceBroadPhase` and `SAPBroadPhase`. Any narrow phase would work with both broad phases (`BruteForceBroadPhase` and `S",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2010:862,inherit,inheriting,862,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2010,1,['inherit'],['inheriting']
Modifiability,"## ConstantSparsityProjectionMethod + areJacobiansConstant=True + parallelProduct=False. ```; [INFO] [BatchGUI] 1000 iterations done in 11.3896 s ( 87.799 FPS).; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 6 0.82 1 7.71 510.45 9.73 15.92 9.73 87.39 ......projectMappedMatrices; ```; Note that the timer includes the first iteration which is very very slow. It alters the average. ### ConstantSparsityProjectionMethod + areJacobiansConstant=True + parallelProduct=True. ```; [INFO] [BatchGUI] 1000 iterations done in 4.48981 s ( 222.726 FPS).; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 6 0.75 1 2.31 522.09 3.32 16.42 3.32 72.50 ......projectMappedMatrices; ```; Note that the timer includes the first iteration which is very very slow. It alters the average. ### Conclusion. We can observe that the parallelism is necessary to take advantage of the constant sparsity pattern. The fastest configuration is now `ConstantSparsityProjectionMethod + areJacobiansConstant=True + parallelProduct=True` compared to `MatrixProjectionMethod + areJacobiansConstant=True` before this PR. It's a speed up of x1.8. For the records, at the beginning of this series of enhancement (https://github.com/sofa-framework/sofa/pull/4443), the reduced diamond run at 44 FPS. Now it is 222 FPS = speed up x5. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4552:2190,enhance,enhancement,2190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4552,1,['enhance'],['enhancement']
Modifiability,"## Main discussions. Stéphane: building matrices, vectors, to work with SciPy; Matthieu: Numpy is able to access the memory directly (there are examples). There are some Python modules in Compliant with examples to assemble matrices, etc. Components in Python (Stéphane); ""Trash"" code, not clean, way to go to C++. Forcefield. Need to put breakpoints to interact with the scene from Python console. Our Python needs:; - Create scene easily; - Prototype components; - Matlab aspect. Matthieu: 90% of Datas are binded in Python, special cases need a binding. To sum up, we already have what we need, we just don't know how to work with everything. Besides technical aspects, what we need is a step to step tutorial and more examples. . --> Update online documentation to add Numpy; --> Add a doc for newcomers: right now it is very hard to enter in SOFA with Python (no doc). Start with step by step tutorials and create a Python version of each step. ## Other discussions: performances. ### Pypy. x100 perf but big big cost (recode everything: plugin, bindings, ...). ### Cython. ability to code in Python and get C++ code generation; we can keep the current plugin but we wont gain perf; optimizes some small algos; ability to manually release the GIL (lock); ability to connect to the current VM; adds a step of compilation using ""CIMPORT"" but it must have compilo + headers and libs Sofa. ### Problem of version 2.7 vs 3. Current plugin renamed SofaPython27; SofaPython passes python 3.0. ### How do you get to use Python?. Stéphane: Making XML optional?; Matthieu: python is not just a loader, there is a binding too; As said before, we have to use more Python in the tutorials (doc, website ...). ____________________________________. Referee:; @bcarrez . Interested people:; @matthieu-nesme ; @damienmarchal ; @etienneschmitt ; @bruno-marques ; @chpaulus . If you are interested please tell it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/23:1043,plugin,plugin,1043,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23,3,['plugin'],['plugin']
Modifiability,"## What; cxxopts is a header-only command-line parser library : https://github.com/jarro2783/cxxopts; Boost's program_options is bothersome and a bit overkill for what we do with it.; (and we want to go towards being able to compile SOFA without Boost one day). The API between them is quite similar but still different:; - value when adding parameter are std::string (instead of the type of the parameter); - implemented a callback system in ArgumentParser because cxxopts does not offer it (boost's name is ""notifier""); - when adding a new parameter boost is ""long_name,short_name"" whereas cxxopts is ""short_name,long_name"". More generally, I tried to hide most of the cxxopts use in ArgumentParser (previously there was a weird mix-up with boost), the only inconvenient place is when adding a new parameter. ## Notes; - Gui (and use of argumentparser) is really.... messy with static functions/variables and unsafe pointer uses here and there. This should be cleanup in the future.; - make SofaGUIGlut compile again even if not supported anymore (it was using boost program_options and I wanted to make it compile for the fun). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2263:897,variab,variables,897,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2263,1,['variab'],['variables']
Modifiability,"### ALL THIS CHANGES MAINLY AFFECT SOFA INSTALL; (basically nothing changes for you if you never do `make install`). Nothing is breaking BUT dependency problems may arise.; Using package subdirs and relocatable plugins will force us to define dependencies correctly because there will be no more magically accessible parts of SOFA. You will no longer be able to `#include` a file from a package not loaded with `find_package`. ## Important changes. ### [[All] CLEAN extlibs integration and install](https://github.com/sofa-framework/sofa/commit/40669c610100a67f46b1405a972b39fe13291eba); - extlib headers are now installed in include/extlibs; - Windows dependency pack headers are now installed in include/WinDepPack; - SOFA now always tries to `find_package` an extlib before using the embedded one; - header-only extlibs too are now easier to override (see extlibs/CMakelists.txt); - **One question remains**: is extlibs/SuiteSparse needed?. ### [[CMake] Install includes in package subdirs](https://github.com/sofa-framework/sofa/commit/68bef4fec16a410007163c5720a5b2ce003ac478); Install module headers in a subdirectory named after their package (SofaGeneral, SofaMisc, SofaFramework, ...). This permits to have clean include directories and thus prevents `find_package` from giving access to unwanted foreign headers.; e.g. doing `find_package(SofaFramework)` will NOT be sufficient to `#include <SofaSomething/anything.h>` (you will get a file not found error).; I think it is way easier to understand that a `find_package` is missing when `#include` fails with ""file not found"" error (at write time if you have a good IDE, at build time otherwise) than with link error (at build time).; Moreover, it will be easier to understand what package is needed for a module by navigating in the include directory.; More details in commit message. ### [[CMake] Make plugins relocatable](https://github.com/sofa-framework/sofa/commit/5b0585f9ad2884cb5462884dffd711ae4d6f2266); **THIS FEATURE IS OPTIONAL**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1018:211,plugin,plugins,211,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1018,1,['plugin'],['plugins']
Modifiability,"### Conclusion suggested. - SofaCUDA; - VolumetricRendering (ICI CE SERAIT LA RACINE DU ""plugin""); - CMakeLists.txt; - src; - VolumetricRendering/BaseVolumetricRenderer.h; - examples; - python/; - all python examples; - volumetricrendering/\_\_init\_\_.py; - tests; - extensions; - CUDA (nom de la target VolumetricRendering.CUDA); - CMakeLists.txt `find_package(VolumetricRendering)`; - src/>>>>; - VolumetricRendering/CUDA/BaseCudaVolumetricRenderer.h; - examples; - tests; - OpenCL (nom de la target VolumetricRendering.OpenCL); - CMakeLists.txt `find_package(VolumetricRendering)`; - src/>>> ; - VolumetricRendering/OpenCL/BaseCLXX.h; - examples; - tests; - Python (bindings); - CMakeLists.txt `find_package(VolumetricRendering)`; - src; - examples; - tests; - libraries",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1884626282:89,plugin,plugin,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1884626282,1,['plugin'],['plugin']
Modifiability,"### Discussed in https://github.com/sofa-framework/sofa/discussions/2657. <div type='discussions-op-text'>. <sup>Originally posted by **longhathuc** February 2, 2022</sup>; Hi, I'm Long from mimesis. I have tried to build the plugins with recent commit of sofa at https://github.com/mimesis-inria/sofa/ But failed. Sofa build successfully, but for the plugins, this is the error when doing cmake. ```; CMake Error at /home/long/work/install/sofaInstall/lib/cmake/SofaGeneral/SofaGeneralConfig.cmake:40 (find_package):; Found package configuration file:. 1 /home/long/work/install/sofaInstall/plugins/SofaGeneralObjectInteraction/lib/cmake/SofaGeneralObjectInteraction/SofaGeneralObjectInteractionConfig.cmake. but it set SofaGeneralObjectInteraction_FOUND to FALSE so package; ""SofaGeneralObjectInteraction"" is considered to be NOT FOUND. Reason given; by package:. The following imported targets are referenced, but are missing: SofaEngine. Call Stack (most recent call first):; /home/long/work/sperry/CMakeLists.txt:56 (find_package); ```. Do you have any clue which might cause the error?. Thanks </div>. #2621 adds two new dependencies on SofaGeneralEngine and SofaEngine for SofaGeneralObjectInteraction, but its associated cmake.in did not reflect the change.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2658:226,plugin,plugins,226,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2658,4,"['config', 'plugin']","['configuration', 'plugins']"
Modifiability,"### Discussed in https://github.com/sofa-framework/sofa/discussions/3179. <div type='discussions-op-text'>. <sup>Originally posted by **alxbilger** July 27, 2022</sup>; NameDecoder has functions to get the name, template name, namespace etc as a string based on a type. Currently, functions are runtime.; Since types are known at compile-time, it would make sense that NameDecoder could be `constexpr`.; The problem is that C++ does not offer compile-time and portable features to do such a thing. I found a solution on the web, but it is not portable:. - https://stackoverflow.com/a/59522794; - https://bitwizeshift.github.io/posts/2021/03/09/getting-an-unmangled-type-name-at-compile-time/. It uses `__PRETTY_FUNCTION__` (for clang and msvc) and `__FUNCSIG__` for msvc. . Some problems with this solution:. - Other compilers are not supported.; - `__FUNCSIG__` might not be defined depending on the compilation options. ; - `__PRETTY_FUNCTION__` is not defined with old gcc. Open-source libraries I found (such as https://github.com/Manu343726/ctti or https://github.com/adambadura/type_name) also use the `__PRETTY_FUNCTION__` solution. I think it would not affect any of us if we start using this non-portable C++ since the modern compilers that we use support it. But, to be safe, I start the discussion if we go to this direction.</div>",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4514:460,portab,portable,460,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4514,3,['portab'],['portable']
Modifiability,"### Discussed in https://github.com/sofa-framework/sofa/discussions/3438. <div type='discussions-op-text'>. <sup>Originally posted by **younes1010** October 28, 2022</sup>; I want to use this plug-in that integrates OpenCV with SOFA : https://github.com/rouge1616/SofaOpenCVPlugin; When I define the plug-in's directory in EXTERNAL_DIRECTORIES and configure it, it works. But when I tick the name of the plug-in (figure 1) as the second step, and configure it again, Cmake returns this error : (figure 2). Figure (1):. ![Capture2](https://user-images.githubusercontent.com/116725962/198552700-460b7ae4-61d8-45d7-bca9-b2435f11092c.PNG). Figure (2):; ![Capture1](https://user-images.githubusercontent.com/116725962/198552722-81ccbb03-f8c1-43dc-a11f-aecac5035786.PNG). </div>",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3440:192,plug-in,plug-in,192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3440,5,"['config', 'plug-in']","['configure', 'plug-in']"
Modifiability,"### Discussed in https://github.com/sofa-framework/sofa/discussions/5069. <div type='discussions-op-text'>. <sup>Originally posted by **rickysaettone** October 17, 2024</sup>; # The issue:; I can't visualize two of the .stl objects at the same time but I can see them separately.; Not only does the plane disappear while trying to show both, but also the position of the actuator seems transformed and a two vertices appear in a weird position too.; Can anyone help me please? I am starting to learn SOFA and python in general. Location of the objects: [STL.zip](https://github.com/user-attachments/files/17420653/STL.zip). - actuator located in STL/actuador.stl; - plane located in STL/plane.stl. # Version:; - OS: Windows 11 version: 10.0.22631; - SOFA v23.06.00 via the installer; - Python 3.8.10. # The code:; ```python; #-*- coding: utf-8 -*-; import Sofa; #import contoller.py. def createScene(rootNode):; ; # Required plugins; rootNode.addObject('RequiredPlugin', name='Sofa.Component.IO.Mesh') # Needed to use components [MeshSTLLoader]; rootNode.addObject('RequiredPlugin', name='Sofa.Component.Mapping.Linear') # Needed to use components [IdentityMapping]; rootNode.addObject('RequiredPlugin', name='Sofa.Component.Mass') # Needed to use components [UniformMass]; rootNode.addObject('RequiredPlugin', name='Sofa.Component.StateContainer') # Needed to use components [MechanicalObject]; rootNode.addObject('RequiredPlugin', name='Sofa.Component.Visual') # Needed to use components [VisualStyle]; rootNode.addObject('RequiredPlugin', name='Sofa.GL.Component.Rendering3D') # Needed to use components [OglModel]; rootNode.addObject('VisualStyle', displayFlags='showForceFields showBehaviorModels'); ; rootNode.addObject('DefaultAnimationLoop'); rootNode.addObject('DefaultVisualManagerLoop'). # Setting the timestep in seconds; rootNode.dt = 0.01; rootNode.addObject('RequiredPlugin',; pluginName='SoftRobots SofaPython3'); ; # Load the mesh file of the actuator and the plane.; rootNode.addObje",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/5084:925,plugin,plugins,925,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5084,1,['plugin'],['plugins']
Modifiability,"### Premises:; - plugin B is a dependency of plugin A (i.e A links dynamically against B); - plugin B implements `entrypoint()` but plugin A does not implement it; - PluginManger is set to load plugin A (which will then implicitly load plugin B). Then PluginManger, when trying to check if plugin A does implement `entrypoint()` will find `B::entrypoint()`, instead of returning a nullptr (indicating that the plugin is supposed to not implement it). Obviously this is not the desired outcome 🐛 . My reasoning would be that as the plugin B is direct dependency of A, when loaded by `dlopen()` (unix), is seen as an integral part of plugin A from a system-call point of view. This has been tested with Ubuntu. Did not test on MacOS but should be the same, as it uses dlopen too.; It seems this behavior is not present on Windows, the following demo does not show the bogus behavior. ---. ### Demo:; - adding `getModuleLicense()` which is supposed to be not implemented in Sofa.Component.StateContainer; - StateContainer is a dependency for some other Sofa.Component libraries. ```; extern ""C"" SOFA_EXPORT_DYNAMIC_LIBRARY const char* getModuleLicense();; const char* getModuleLicense(); {; return ""StateContainer License"";; }; ```; Result (Qt PluginManager windows calls `getModuleLicense()` if entry is supposed to be found). <img src='https://github.com/sofa-framework/sofa/assets/11028016/4b50f96f-d914-45ca-8dad-dbdaa0a90752' width='200'>. We can see the cascading wrong call to `getModuleLicense()`, as Collision has a dependency on Collision.Contact which has a dependency on StateContainer.; Moreover in this image, we can even see the `LGPL` which has been leaking from the recently added S.C LinearSystem to several other components. ---. ### Workaround; The workaround would be to implement obviously all the potential entrypoints in all the plugins, but the problem will arise again if a new entrypoint is added in the future....; At first glance, I thought that setting `RTLD_LOCAL` here; ht",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4462:17,plugin,plugin,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4462,12,"['Plugin', 'plugin']","['PluginManger', 'plugin']"
Modifiability,"### Problem. **Description**; < Hi everyone, I followed the instructions to install SOFA software and when Im Generating a VS project (.sln) or a Makefile with CMake I have some troubles because there are some errors just like metis_DIR-NOTFOUND and also GLEW_DIR-NOTFOUND>. **Steps to reproduce**; < 1. I add where my source code is going to be.; 2. I add where my binaries are going to be.; 3. I use Visual Studio; 4. I push configurate and first I have a problem with Eigen, but fortunately I could solve it.; 5. I push configurate again and there are two errors, one says: metis_DIR-NOTFOUND and second: GLEW_DIR-NOTFOUND>. **Expected behavior**; < I search for Metis and I found something called metis 5.10.0 but nothing happens, the error can not be solved, in the other hand I don't know nothing about GLEW. Hope you can help me, I attached some pictures, Thanks. >. --------------; ![metis](https://user-images.githubusercontent.com/111095273/184257908-0df394b7-5c8e-4d3a-acf1-bd1ecce53c3a.png); -------------------------------. ### Environment; ![metis1](https://user-images.githubusercontent.com/111095273/184257942-11b4e619-c723-4ab2-b53d-ccdb737e674c.png). **Context**. - System: < NAME AND VERSION - e.g: ""Windows 10"", ""Ubuntu 20.04"", ... >; - Version of SOFA: < INFOS ABOUT THE BRANCH OR BINARIES - e.g: ""master branch at commit 70bb123"", ""v21.06.00 binaries"", ... >; - State: < BUILD OR INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >. **Command called**. ```txt. < COPY-PASTE YOUR COMMAND HERE >. ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nex",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3213:427,config,configurate,427,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3213,2,['config'],['configurate']
Modifiability,"### Problem. **Description**; After building Sofa from source and running ```cmake --install build/``` there are headers missing for QGLViewer.; The installation also adds some redundant QGLViewer directories to the install path. **Steps to reproduce**; - clone the current Sofa repo; - cd into the cloned folder; - run ```cmake -B build/``` ; - run ```cmake --build build/```; - run ```cmake --install build/```. The last line installs everything into $sofa_dir/build/install/.; For QGLViewer this results in ; 1. an overly long install path:; - ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/QGLViewer```; 2. missing headers from libQGLViewer, only the following ones are available, most notably qglviewer.h is missing here:; - ```config.h constraint.h domUtils.h mouseGrabber.h quaternion.h ui_ImageInterface.h ui_VRenderInterface.h vec.h```; ; **Expected behavior**; - All headers for libQGLViewer should be copied to the install directory; - The path for the headers should be something like ```$sofa_dir/build/install/include/extlibs/QGLViewer/include/QGLViewer/*.h``` or ```$sofa_dir/build/install/include/extlibs/QGLViewer/*.h```. ---------------------------------------------. ### Environment. **Context**; This happens on both Linux and Windows but only became critical on Windows when I had tried to use the Sofa provided libQGLViewer in my own project. This could temporarily be fixed by changing my own CMake include path to ```{SOFA_INSTALL_DIR}/../../Sofa/GUI/Qt/libQGLViewer```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4196:749,config,config,749,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196,1,['config'],['config']
Modifiability,"### Problem. **Description**; Hello, thank you for your work. I want to compile Sofa. **Steps to reproduce**; I did all installation steps https://www.sofa-framework.org/community/doc/getting-started/build/linux/ make the same structure as described & clone `git clone -b v21.12 https://github.com/sofa-framework/sofa.git sofa/src`.; After configure cmake gui I got error:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /media/maxim/big-500/sofa/build/v21.12/install; CMake Deprecation Warning at SofaKernel/modules/Sofa.Config/CMakeLists.txt:80 (message):; Deprecated components are activated (SOFA_WITH_DEPRECATED_COMPONENTS; variable is ON). Using legacy headers is enabled.; Headers from v21.06 are usable, but it is advised to change your code to use the new headers introduced in v21.12.; Adding module Sofa.GL; Adding plugin SofaSimpleFem; Adding plugin SofaRigid; Adding plugin SofaDeformable; Adding plugin SofaObjectInteraction; Adding plugin SofaMeshCollision; Adding plugin SofaEngine; Adding plugin SofaExplicitOdeSolver; Adding plugin SofaImplicitOdeSolver; Adding plugin SofaLoader; Adding plugin SofaGeneralVisual; Adding plugin SofaGraphComponent; Adding plugin SofaGeneralMeshCollision; Adding plugin SofaBoundaryCondition; Adding plugin SofaGeneralAnimationLoop; Adding plugin SofaGeneralDeformable; CMake Warning at /media/maxim/big-500/sofa/build/v21.12/lib/cmake/SofaEigen2SolverConfig.cmake:36 (message):; SofaEigen2Solver has been removed. The package still exists for; compatibility but is empty. Eigen classes were moved to Sofa.LinearAlgebra; and SVDLinearSolver to SofaDenseSolver.; Call Stack (most recent call first):; /media/maxim/big-500/sofa/build/v21.12/lib/cmake/SofaBaseConfig.cmake:35 (find_package); /media/maxim/big-500/sofa/build/v21.12/lib/cmake/SofaGeneralDeformableConfig.cmake:34 (find_package); modules/SofaGeneralDeformable/SofaGeneralDeformable_test/CMakeLists.txt:12 (find_package). Adding ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3184:340,config,configure,340,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3184,3,"['Config', 'config', 'variab']","['Config', 'configure', 'variable']"
Modifiability,"### Problem. **Description**; I configure the sofa-cuda successfully, but when I generating it I get the error like this. ""CUDA_STANDARD is set to invalid value '17'"". **Steps to reproduce**; < LIST THE STEPS TO REPRODUCE YOUR PROBLEM HERE >. **Expected behavior**; < DESCRIBE WHAT YOU THINK SHOULD HAVE HAPPEN INSTEAD >. ---------------------------------------------. ### Environment. **Context**. - System: < ""Ubuntu 20.04"">; - CUDA 12.0; - Version of SOFA: stable branch; - State: < Build>. **Command called**. ```txt. < COPY-PASTE YOUR COMMAND HERE >. ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. < COPY-PASTE HERE THE RESULT OF THE COMMAND ABOVE >. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. < COPY-PASTE YOUR OUTPUT HERE >. ```. **Content of build_dir/CMakeCache.txt**. < DRAG AND DROP YOUR CMAKECACHE.TXT HERE >. ---------------------------------------------. Thank you for your report.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3808:32,config,configure,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3808,1,['config'],['configure']
Modifiability,"### Problem. **Description**; I get difficulties to compile SOFA, due to some incompatibilities. **Steps to reproduce**; Compile SOFA with CMake GUI, and run compilation with ninja. ---------------------------------------------. ### Environment. I tried to compile SOFA again , and I get some trouble that was'nt trivial for me. - System: Ubuntu 22.04.1 LTS; - Version of SOFA: SOFA v23.12.99. ###. I get two different troubles :. - First of all, by mistake, I once checked the SOFA_FETCH_SOFAPYTHON3 value in the cmake-gui (I was thinking it was necessary to link SofaPython3 in the good way), and it download the plugin directly in the source code. But, as I already download the SofaPython3 source myself as an external plugins, it create a conflict between the two versions at configuration. . - Also, I get an error during the compilation, because I did'nt disable the SOFA_GUI_QT_ENABLE_QDOCBROWSER value in cmake-gui. What is this feature for ? Maybe it could be better to disable it by default ?. Now everything is working well on my side. Thanks a lot.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4343:615,plugin,plugin,615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4343,3,"['config', 'plugin']","['configuration', 'plugin', 'plugins']"
Modifiability,"### Problem. **Description**; I have compiled sofa successfully with `make`; and I run ./runSofa, I will get the error occurs. **Steps to reproduce**; `./runSofa`. **Expected behavior**; I get the correct GUI with Ubuntu. ---------------------------------------------. ### Environment; MAC with M1 Process; **Context**. - System: MAC OS Celledar; - Version of SOFA: mast branch; - State: Build Directory. **Command called**. ```txt. < COPY-PASTE YOUR COMMAND HERE >; `➜ bin ./runSofa ; [INFO] [runSofa] PluginRepository paths = /Users/hemingshan/Code/sofa/build/plugins:/Users/hemingshan/Code/sofa/build/collections:/Users/hemingshan/Code/sofa/build/lib; [INFO] [runSofa] DataRepository paths = /Users/hemingshan/Code/sofa/src/share:/Users/hemingshan/Code/sofa/src/examples:/Users/hemingshan/Code/sofa/build:/Users/hemingshan/Code/sofa/build; [INFO] [runSofa] GuiDataRepository paths = /Users/hemingshan/Code/sofa/src/applications/projects/runSofa/resources:/Users/hemingshan/Code/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources:/Users/hemingshan/Code/sofa/build; [INFO] [runSofa] Loading automatically plugin list in /Users/hemingshan/Code/sofa/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Forward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Backward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.Mesh.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Playback.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SceneUtility.dylib; [INFO] [PluginManager] Loaded plu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:503,Plugin,PluginRepository,503,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,3,"['Plugin', 'plugin']","['PluginRepository', 'plugin', 'plugins']"
Modifiability,### Problem. **Description**; I've just tried to install last SOFA version with binaries. **Steps to reproduce**; Install SOFA with the .run files and add SofaPython3 plugin. **Expected behavior**; There is an error when I tried to add the plugin. ---------------------------------------------. ### Environment. **Context**. - System: Ubuntu 22.04.1 LTS; - Version of SOFA: 23.06.00. ### Logs. ```txt. Plugin loading failed (/home/pchaillo/SOFA/v23.06.00/plugins/SofaPython3/lib/libSofaPython3.so): libpython3.8.so.1.0: cannot open shared object file: No such file or directory. ```; **Content of build_dir/CMakeCache.txt**. < DRAG AND DROP YOUR CMAKECACHE.TXT HERE >. ---------------------------------------------. Thank you for your report.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4159:167,plugin,plugin,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4159,4,"['Plugin', 'plugin']","['Plugin', 'plugin', 'plugins']"
Modifiability,"### Problem. **Description**; In the archive downloaded from https://www.sofa-framework.org/download/, the file metis.h cannot be found. Therefore, it is not possible to include it in a plugin compiled based on the SOFA binaries.; Note that metis.h is found in the latest nightly builds. The difference may come from the move in https://github.com/sofa-framework/sofa/pull/2717. **Expected behavior**; metis.h can be included based on a SOFA v21.12. ---------------------------------------------. ### Environment. **Context**. - System: Windows (but probably all systems); - Version of SOFA: v21.12.00 binaries; - State: ""Install directory""",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2866:186,plugin,plugin,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2866,1,['plugin'],['plugin']
Modifiability,"### Problem. **Description**; Problem with the compile version of Sofa using gcc-8 or any version of the ""GNU"" compiler less than 9.1. This is require due to the version of my CUDA (v10.2) from the Sofa docker. Programs containing CUDA libraries of this version require **gcc-8** or less. Sofa compiles with no error, but there is no link to the library _std::filesystem_, as it does not exist for versions lower than **gcc-9.1**. This is a common discussed bug for Ubuntu and gcc and it is widely discussed in other pages like [here](https://askubuntu.com/questions/1256440/how-to-get-libstdc-with-c17-filesystem-headers-on-ubuntu-18-bionic), [here](https://stackoverflow.com/questions/45417707/glibcxx-use-cxx11-abi-gcc-4-8-and-abi-compatibility) or [here](https://stackoverflow.com/questions/33394934/converting-std-cxx11string-to-stdstring). **Steps to reproduce**; To reproduce this problem select gcc-8 as your compiler to compile Sofa. Configure and build Sofa as usual. Then, run the command runSofa and it should return a Segmentation Fault regarding the FileRepository.cpp file. . **Expected behavior**; We should see the cauduceus.scn simulation as usual. ---------------------------------------------. ### Environment. **Context**. - System: Ubuntu 20.04 (Official docker container [sofa-builder](https://hub.docker.com/r/sofaframework/sofabuilder_ubuntu)); - Version of SOFA: v22.12 branch; - State: ""Build directory"". **Command called**. runSofa. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. #####",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3943:943,Config,Configure,943,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3943,1,['Config'],['Configure']
Modifiability,### Problem. **Description**; Since Glew has been set to mandatory by PR: https://github.com/sofa-framework/sofa/pull/2358 ; some external plugin are not compiling anymore on the CI because Glew is not find. **Steps to reproduce**; Just check this link: https://github.com/sofa-framework/SofaHapticAvatar/runs/7087373200?check_suite_focus=true. **Expected behavior**; Either something is missing in Sofa.Gl install step to package glew or should each pacakge linking to Sofa.Gl also find Glew ?,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3079:139,plugin,plugin,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3079,1,['plugin'],['plugin']
Modifiability,"### Problem. **Description**; We have a Sofa Scene with an integrated python script controller. In this python controller we alter the rest position of a mechanical object with template 'CudaVec3f'. In the online documentation of SofaCUDA [https://www.sofa-framework.org/community/doc/plugins/usual-plugins/using-cuda/](url) there is an example C++ code to access and change parameters of a mechanical object when using SofaCUDA, but there is no corresponding python code snippet. When retrieving the rest position value, the python type is a numpy array in contrast to c++, which has no deviceRead and deviceWrite properties. As there is no direct access to cuda in the SofaPython3 wrapper, our question is how reading/writing can be done in SofaPython3. . When using SofaCUDA without the deviceRead and deviceWrite functions, the object in question randomly diverges, when a translation to `rest_position` is applied. ---------------------------------------------. ### Environment. **Context**. - System: ""Ubuntu 20.04""; - Version of SOFA: 23.06 binary version; - State: binary version",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4285:285,plugin,plugins,285,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4285,2,['plugin'],['plugins']
Modifiability,"### Problem. **Description**; When i build sofa 22.12 in window10, i faced a issue in sofa.helper; (cmake configure and generate success, default settings, no change option after download). 4>FileSystem.cpp; 4>D:\Windows Kits\10\Include\10.0.22621.0\um\objidl.h(2588,74): error C2061: syntax error : identifier “byte”; 4>D:\Windows Kits\10\Include\10.0.22621.0\um\objidl.h(2602,62): error C2143: syntax error : missing ',' before '*'. What happened? it's seems that a contain error.; Thank you for your report.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4329:106,config,configure,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4329,1,['config'],['configure']
Modifiability,"### Problem. **Description**; When trying to compile the SOFA-CUDA plugin, I receive a linker error for CudaHexahedronFEMForceField.cpp.o. **Steps to reproduce**; Clone the repo for version v22.12; Configure cmake to compile SOFA_CUDA plugin. **Expected behavior**; It should link properly against the CudaHexahedronFEMForceField.cpp.o file. ---------------------------------------------. ### Environment. **Context**. - System: < Ubuntu 22.04 >; - Version of SOFA: < git tag v22.12 >; - State: < ""Build directory"" >. **Command called**. ```txt. make -j20. ```. **Env vars**. ```txt. #################; --- sys.version ---; 3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0]; --- PATH ---; /home/create/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin; --- SOFA_ROOT ---; --- PYTHONPATH ---; --- sys.path ---; ['', '/usr/lib/python310.zip', '/usr/lib/python3.10', '/usr/lib/python3.10/lib-dynload', '/home/create/.local/lib/python3.10/site-packages', '/usr/local/lib/python3.10/dist-packages', '/usr/lib/python3/dist-packages']; #################; create@create-AMX-X57. ```. ---------------------------------------------. ### Logs. **Output from make**. ```; ...; [ 89%] Linking CXX shared library ../../../lib/libSofaCUDA.so; /usr/bin/ld: CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/CudaHexahedronFEMForceField.cpp.o: in function `sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField<sofa::gpu::cuda::CudaVectorTypes<sofa::gpu::cuda::Vec3r1<float>, sofa::gpu::cuda::Vec3r1<float>, float> >::HexahedronFEMForceField()':; CudaHexahedronFEMForceField.cpp:(.text._ZN4sofa9component14solidmechanics3fem7elastic23HexahedronFEMForceFieldINS_3gpu4cuda15CudaVectorTypesINS6_6Vec3r1IfEES9_fEEEC1Ev[_ZN4sofa9component14solidmechanics3fem7elastic23HexahedronFEMForceFieldINS_3gpu4cuda15CudaVectorTypesINS6_6Vec3r1IfEES9_fEEEC1Ev]+0x269): undefined reference to `sofa::core::behavior::ForceField<sofa::gpu::cuda::CudaVectorTypes<s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3726:67,plugin,plugin,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3726,3,"['Config', 'plugin']","['Configure', 'plugin']"
Modifiability,"### Problem. **Description**; hello, I wanted to use Sofa 23.06.00 in M1 Mac Book Pro ; But I can not use Sofa. This error message indicates:; (have 'x86_64', need 'arm64e' or 'arm64')); I'd like to know the solution.; I want to use Sofa 23.06.00. **Steps to reproduce**; < LIST THE STEPS TO REPRODUCE YOUR PROBLEM HERE >; 1. install anaconda and make virtual environment ; 2. install sofa framework ; 3. define the environment variables ; 4. import Sofa in python. **Expected behavior**; < DESCRIBE WHAT YOU THINK SHOULD HAVE HAPPEN INSTEAD >. Success importing Sofa in python without any error. ---------------------------------------------. ### Environment. **Context**. - System: Mac OS X 14.4.1 (23E224) ; - Version of SOFA:[SOFA_v23.06.00_MacOS.zip](https://github.com/sofa-framework/sofa/releases/download/v23.06.00/SOFA_v23.06.00_MacOS.zip); - State: < BUILD OR INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >. **Command called**. ```txt. (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import Sofa; ---------------------------------------; Checking SOFA_ROOT and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; ---------------------------------------; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; import Sofa.Helper; ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SO",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690:428,variab,variables,428,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690,1,['variab'],['variables']
Modifiability,"### Problem. Hi all,; First of all i want to thank you for your work, and yours great framework!; Thanks!. **Description**; I want to try run latest version of Sofa-framework, but I got problem with different gcc verions. **Steps to reproduce**; First of all I had installed SOFA by using your precompiled binary file:; `./SOFA_v21.12.00_Linux.run`; after that I run:; `./runSofa-21.12.00`; And I got the errors; ```; ./runSofa-21.12.00 ; ./runSofa-21.12.00: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /home/maxim/SOFA/v21.12.00/bin/../lib/libSofa.Helper.so.21.12.00); ./runSofa-21.12.00: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /home/maxim/SOFA/v21.12.00/bin/../lib/libSofa.SimulationCore.so.21.12.00); ./runSofa-21.12.00: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /home/maxim/SOFA/v21.12.00/bin/../plugins/SofaValidation/lib/../../../lib/libSofa.Type.so.21.12.00); ./runSofa-21.12.00: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /home/maxim/SOFA/v21.12.00/bin/../lib/../lib/libSofaBaseMechanics.so.21.12.00); ./runSofa-21.12.00: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /home/maxim/SOFA/v21.12.00/bin/../lib/../plugins/SofaUserInteraction/lib/../../../plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.so.21.12.00); ./runSofa-21.12.00: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /home/maxim/SOFA/v21.12.00/bin/../lib/../plugins/SofaUserInteraction/lib/../../../plugins/SofaDeformable/lib/libSofaDeformable.so.21.12.00); ```; **Expected behavior**; I think It should work, at least. ---------------------------------------------. ### Environment. **Context**. - System: ""Ubuntu 18.04""; - Version of SOFA: SOFA_v21.12.00. **Command called**. ```; gcc --version; gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0; Copyright (C) 2017 Free Software Foundation, Inc.; This is free software; see th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3169:906,plugin,plugins,906,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3169,1,['plugin'],['plugins']
Modifiability,"### Problem. PR #3665 seems to break the initialization of some links. . **Description**; I have an home made mapping which inherits from `Multi2Mapping`. With the changes of #3665, the initialization of `input2` fails, `Multi2Mapping::getFromModels2()` returns an empty list. Reverting the PR fixes the issue.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3705:124,inherit,inherits,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3705,1,['inherit'],['inherits']
Modifiability,"### Problem. Running `runSofa` in `RelWithDebInfo` configuration in VS 2022 loads the scene properly but leads to nullptr access in `HexahedronFEMForceField::getIndexedElements`. Running `.\runSofa -a` in powershell gives the same crash. ![image](https://user-images.githubusercontent.com/43549821/177644004-c4a691f5-c890-4f66-bf17-5881922af648.png). The scene loads fine and only crashes when one of these 2 buttons are pressed. ![image](https://user-images.githubusercontent.com/43549821/177643932-820290b2-8caa-4b64-b171-8bf1fdeff4ef.png). **Steps to reproduce**; Running the command below.; Everything is configured exactly as shown in the windows building tutorial, except I'm using msvc2019 libraries for qt 5.15.2as msvc2022 libraries are not available. **Expected behavior**; Should not crash. ---------------------------------------------. ### Environment. **Context**. - System: Windows 10 build 21390.2025; - Version of SOFA: commit d300cc9af550afbd5c2167470676a5a7d47381a1 (HEAD -> v21.12, tag: v21.12.00, origin/v21.12_beta, origin/v21.12); - State: Build directory. **Command called**. ```txt. PS D:\github-clones\sofa\build\bin\RelWithDebInfo> .\runSofa.exe -a. ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. #################; --- sys.version ---; 3.10.0 (tags/v3.10.0:b494f59, Oct 4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]; --- PATH ---; D:\Program Files\OpenSSH;C:\ProgramData\Oracle\Java\javapath;C:\Python310\Scripts\;C:\Python310\;D:\Python27\;D:\Python27\Scripts;D:\Program Files\Oc",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:51,config,configuration,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,['config'],"['configuration', 'configured']"
Modifiability,"### Problem. https://user-images.githubusercontent.com/64316740/228077758-c6f1ff42-0527-48da-aeb5-2447d0598259.mp4. **Description**; I can't run **Configure**. **Steps to reproduce**; Follow this tutorial https://www.sofa-framework.org/community/doc/getting-started/build/linux/. **Expected behavior**; Like in this video https://youtu.be/5pbT49t9M_k?t=586. ---------------------------------------------. ### Environment. **Context**. - System: < ""Ubuntu 20.04"" >; - Version of SOFA: < ""master branch at commit 2cd4575cbbe13562b906925f81c4e565cec3bcc5"" >. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. #################; --- sys.version ---; 3.8.10 (default, Mar 13 2023, 10:26:41) ; [GCC 9.4.0]; --- PATH ---; /home/giang/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/USD/bin:/opt/gurobi1000/linux64/bin; --- SOFA_ROOT ---; --- PYTHONPATH ---; :/usr/local/lib/python3.8/dist-packages:/usr/lib/python3/dist-packages:/usr/local/USD/lib/python:/media/giang/Storage/ecoSIM/PythonAPI/carla/dist/carla-0.9.13-py3.8-linux-x86_64.egg:/media/giang/Storage/ecoSIM/PythonAPI/carla:/home/giang/bullet3/build_cmake/better_python:/home/giang/bullet3/examples/pybullet; --- sys.path ---; ['', '/home/giang', '/usr/local/lib/python3.8/dist-packages', '/usr/lib/python3/dist-packages', '/usr/local/USD/lib/python', '/media/giang/Storage/ecoSIM/PythonAPI/carla/dist/carla-0.9.13-py3.8-linux-x86_64.egg', '/media/giang/Storage/ecoSIM/PythonAPI/carla', '/h",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752:147,Config,Configure,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752,1,['Config'],['Configure']
Modifiability,"### Problem; Hi,; this is related to https://github.com/sofa-framework/sofa/issues/3201. Same as before, I want to cut a deformable object. I wanted to check, if it is easier in total to replace the Hexahedra with Tetraeder for cutting.; Sadly, I sometimes (not always, not really reproducible) get segfaults when deleting elements.; This occurs both through mouse interaction, as well as the `SofaCarving` plugin.; So I guess there is some form of missing lock / set dirty on one of the components.; In other scenes, I also had that problem for `TriangleSetTopologyContainer`. The minimal scene for reproducing the behavior is:. <details>; <summary>Click to expand!</summary>. ```python; import Sofa; import Sofa.Core. def createScene(; root_node: Sofa.Core.Node,; ) -> Sofa.Core.Node:. plugin_list = [; ""Sofa.Component.Collision.Detection.Algorithm"", # [BVHNarrowPhase, BruteForceBroadPhase, DefaultPipeline]; ""Sofa.Component.Collision.Detection.Intersection"", # [NewProximityIntersection]; ""Sofa.Component.Collision.Geometry"", # [LineCollisionModel, PointCollisionModel, TriangleCollisionModel]; ""Sofa.Component.Collision.Response.Contact"", # [DefaultContactManager]; ""Sofa.Component.Constraint.Projective"", # [FixedConstraint]; ""Sofa.Component.Engine.Select"", # [BoxROI]; ""Sofa.Component.LinearSolver.Iterative"", # [CGLinearSolver]; ""Sofa.Component.Mass"", # [UniformMass]; ""Sofa.Component.MechanicalLoad"", # [PlaneForceField]; ""Sofa.Component.ODESolver.Backward"", # [EulerImplicitSolver]; ""Sofa.Component.SolidMechanics.FEM.Elastic"", # [FastTetrahedralCorotationalForceField]; ""Sofa.Component.Topology.Container.Dynamic"", # [HexahedronSetTopologyContainer, HexahedronSetTopologyModifier, TetraheopologyModifier]; ""Sofa.Component.Topology.Container.Grid"", # [RegularGridTopology]; ""Sofa.Component.Topology.Mapping"", # [Hexa2TetraTopologicalMapping, Quad2TriangleTopologicalMapping]; ""Sofa.Component.Visual"", # [VisualStyle]; ""Sofa.GL.Component.Rendering3D"", # [OglModel]; ]. plugin_node = root_node",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3202:407,plugin,plugin,407,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3202,1,['plugin'],['plugin']
Modifiability,"### Problem; I want to use SofaPython3, and refer to the [page](https://sofapython3.readthedocs.io/en/latest/content/Installation.html) to install. However, I have met some problems: /ERROR] H� Win32 �(nager] Plugin loading failed (D:/SOFA/v23.06.00/bin/SofaPython3.dll): %1; I can't load the .ddl via PluginManager (in the GUI). Please help me...; **Description**; < DESCRIBE YOUR PROBLEM HERE >; ![image](https://github.com/user-attachments/assets/2e24c376-cd2e-4c64-b3f1-a83b2709132e); The system path is shown below:; ![image](https://github.com/user-attachments/assets/54a24f35-3752-47cd-8ae1-8c7c4b5f9997). ---------------------------------------------. ### Environment. **Context**. - System: ""Windows 11""; - CPU: 13th Gen Intel(R) Core(TM) i7-13700; - Version of SOFA: ""v23.06.00 binaries""; - Pybind11 2.9.1; - Python 3.8.19. **Command called**. ```; runSofa -l SofaPython3 . ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4914:209,Plugin,Plugin,209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4914,2,['Plugin'],"['Plugin', 'PluginManager']"
Modifiability,"### Problem; running failing due to loading of plugins ; **Description**; Hi, tried both SOFA v22.06.00 and v23.06.00 versions, but not able to load Sofa.Component.UserInterface.ConfigurationSetting plugin, which is causing failure of loading all the remaining plugins. check below error log. I am trying to run lapgym repo implementation , reach environment. Can also track the conversation in original repo : https://github.com/ScheiklP/sofa_env/issues/31; **Steps to reproduce**; Repo : https://github.com/ScheiklP/sofa_env; File : https://github.com/ScheiklP/sofa_env/blob/main/sofa_env/scenes/reach/scene_description.py; scene header file where plugins are loaded : https://github.com/ScheiklP/sofa_env/blob/main/sofa_env/sofa_templates/scene_header.py. **Expected behavior**. ---------------------------------------------. ### Environment. **Context**. - System: ""Ubuntu 20.04""; - Version of SOFA: v23.06.00 binaries"". **Command called**. ```txt; python3 /home/sofa/SOFA_v23.06.00/bin/lapgym/sofa_env/sofa_env/scenes/reach/reach_env.py. ```. **Env vars**. ```bash; #################; --- sys.version ---; 3.8.10 (default, Jul 29 2024, 17:02:10) ; [GCC 9.4.0]; --- PATH ---; /home/sofa/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin; --- SOFA_ROOT ---; /home/sofa/SOFA_v23.06.00/bin/.runSofa; --- PYTHONPATH ---; /home/sofa/SOFA_v23.06.00/plugins/SofaPython3/lib/python3/site-packages; --- sys.path ---; ['', '/home/sofa/SOFA_v23.06.00/plugins/SofaPython3/lib/python3/site-packages', '/usr/lib/python38.zip', '/usr/lib/python3.8', '/usr/lib/python3.8/lib-dynload', '/home/sofa/.local/lib/python3.8/site-packages', '/home/sofa/SOFA_v23.06.00/bin/lapgym/sofa_env', '/usr/local/lib/python3.8/dist-packages', '/usr/lib/python3/dist-packages']; #################. ```. Result logs :. `[ERROR] [RequiredPlugin(Sofa.Component.AnimationLoop)] Plugin not found: ""Sofa.Component.AnimationLoop"". Failed to load: [""Sofa.Component.AnimationLoop""]",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4905:47,plugin,plugins,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4905,5,"['Config', 'plugin']","['ConfigurationSetting', 'plugin', 'plugins']"
Modifiability,"### runSofa crash . **Description**; runSofa crash when a texture file is not found by OglModel. **Steps to reproduce**; put a wrong filename or path into a textureName:; `<OglModel name=""VisualBody"" src=""@loader"" texturename=""../Material/textures/colorTest.jpg"" />`. **Expected behavior**; Error message and do not use the texture but normal default material rendering. ---------------------------------------------. ### Environment. **Context**. - System: Windows 10; - Version of SOFA: master; - State: build version. ### Logs. ```; [ERROR] [OglModel(VisualBody)] Texture ""C:\projects\UnrealEngine\SOFA_test2\Plugins\SofaUE5\Content/Material/textures/colorTest.jpg"" not found; [ERROR] [Image] File C:\projects\UnrealEngine\SOFA_test2\Plugins\SofaUE5\Content/Material/textures/colorTest.jpg not found. ########## SIG 11 - SIGSEGV: segfault ##########; sofa::helper::BackTrace::dump; sofa::helper::BackTrace::sig; seh_filter_exe; seh_filter_exe; _C_specific_handler; _chkstk; RtlRaiseException; KiUserExceptionDispatcher; sofa::gl::Texture::update; sofa::gl::Texture::init; sofa::gl::component::rendering3d::OglModel::initVisual; sofa::component::visual::VisualModelImpl::drawVisual; sofa::simulation::VisualDrawVisitor::processVisualModel; sofa::simulation::VisualVisitor::processNodeTopDown; sofa::simulation::VisualDrawVisitor::processNodeTopDown; sofa::simulation::graph::DAGNode::executeVisitorTreeTraversal; sofa::simulation::graph::DAGNode::executeVisitorTreeTraversal; sofa::simulation::graph::DAGNode::executeVisitorTreeTraversal; sofa::simulation::graph::DAGNode::doExecuteVisitor; sofa::simulation::DefaultVisualManagerLoop::drawStep; sofa::simulation::Simulation::draw; sofa::gui::qt::viewer::qgl::QtGLViewer::DisplayOBJs; sofa::gui::qt::viewer::qgl::QtGLViewer::drawScene; sofa::gui::qt::viewer::qgl::QtGLViewer::draw. ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3567:612,Plugin,Plugins,612,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3567,2,['Plugin'],['Plugins']
Modifiability,"################. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import Sofa; ---------------------------------------; Checking SOFA_ROOT and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; ---------------------------------------; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; import Sofa.Helper; ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')); >>> . ```. **Content of build_dir/CMakeCache.txt**. < DRAG AND DROP YOUR CMAKECACHE.TXT HERE >. ---------------------------------------------. Thank you for your report.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690:5746,plugin,plugins,5746,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690,4,['plugin'],['plugins']
Modifiability,"#############; > ```; > ; > ### Logs; > **Full output**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')); > >>> ; > ```; > ; > **Content of build_dir/CMakeCache.txt**; > ; > < DRAG AND DROP YOUR CMAKECACHE.TXT HERE >; > ; > Thank you for your report. Have you been able to solve it cau",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:5819,plugin,plugins,5819,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,"#1300 . (+Cleaning, +Fix in SofaGuiQt); Add header config file to runSofa. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1302:51,config,config,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1302,1,['config'],['config']
Modifiability,"#1453 ; #1514; #1515 . We are trying to define a same type for index and size in all SOFA (like e.g Eigen::Index); It will allow us to a have more consistent, less confusing and potentially less error-prone code.; It has been decided that the common underlying type will be unsigned int.; Those core types are located in the sofa namespace (defined in sofa/config.h ); In the future all the typedefs concerning indices will be removed. a depreciation message for sofa::defaulttype::index_type has been done (as well as BaseMeshTopology::index_type typedef). BREAKING: ; - sofa::defaulttype::index_type moved and renamed to sofa::Index. sofa_index is deprecated but I suppose it can be breaking anyway, if index type used before was signed,; - newly introduced type for Size is sofa::Size; - all templates based on int/size_t/ etc will break.; - test with ""incorrect"" indices using -1 ; now that indices are unsigned, test for ""incorrect"" indices should be tested against InvalidID (already introduced some time ago), InvalidID is now sofa::InvalidID instead of sofa::defaulttype::InvalidID",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1539:357,config,config,357,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1539,1,['config'],['config']
Modifiability,"#1527. based on ; - #2612 . Deprecates SofaGeneralVisual; Partially deprecates SofaBaseVisual. Nothing special in that module, except that it contains all visual stuff not related to OpenGL.; OpenGL related code will have its own plugin.; EDIT: #2709 ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2679:230,plugin,plugin,230,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2679,1,['plugin'],['plugin']
Modifiability,"#1527; Based on ; - #2571 . Creating the module **Sofa.Component.IO**, where all the components linked to loading or exporting a mesh(.Mesh)~~/stuff(.Misc)~~ are contained.; Read/Writing stuff to repeat identical simulations (ReadState/Topology,etc) has been moved to a new category, namely **Sofa.Component.Playback**; Deprecates **SofaLoader**, **SofaGeneralLoader** and **SofaExporter**. Good module to test the compatibility of installation process, as the plugin Python3 has a dependency on the former SofaExporter. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2582:461,plugin,plugin,461,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2582,1,['plugin'],['plugin']
Modifiability,"#1633. - Usual cleaning (pragma, namespaces); - remove/reorganize useless includes; - fix some dependencies; - use only RGBAColor; - remove warnings; - use sofa::Size/sofa::Index (including missed functions, which makes this PR breaking for those inheriting for these components). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1676:247,inherit,inheriting,247,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1676,1,['inherit'],['inheriting']
Modifiability,"#1885. Converts all tests in the rest of the modules (i.e not the plugins) to Sofa.Testing. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2188:66,plugin,plugins,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2188,1,['plugin'],['plugins']
Modifiability,"#2073 #2081 #2084; Instead, it will be moved in SofaMiscCollision instead of an independent plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1624#issuecomment-847873206:92,plugin,plugin,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1624#issuecomment-847873206,1,['plugin'],['plugin']
Modifiability,#2812 showed that a lot of engines are undocumented/unclear/duplicated.; Some serious refactoring/cleanup should be considered. List of all engines: . <html><body>; <!--StartFragment--><google-sheets-html-origin><!--td {border: 1px solid #ccc;}br {mso-data-placement:same-cell;}-->. Component | SubCategory; -- | --; AverageCoord.h | Analyze; ClusteringEngine.h | Analyze; Distances.h | Analyze; HausdorffDistance.h | Analyze; ShapeMatching.h | Analyze; SumEngine.h | Analyze; ExtrudeEdgesAndGenerateQuads.h | Generate; ExtrudeQuadsAndGenerateHexas.h | Generate; ExtrudeSurface.h | Generate; GenerateCylinder.h | Generate; GenerateGrid.h | Generate; GenerateRigidMass.h | Generate; GenerateSphere.h | Generate; GroupFilterYoungModulus.h | Generate; JoinPoints.h | Generate; MergeMeshes.h | Generate; MergePoints.h | Generate; MergeSets.h | Generate; MergeVectors.h | Generate; MeshBarycentricMapperEngine.h | Generate; MeshClosingEngine.h | Generate; NormalsFromPoints.h | Generate; NormEngine.h | Generate; RandomPointDistributionInSurface.h | Generate; Spiral.h | Generate; BoxROI.h | Select; ComplementaryROI.h | Select; IndicesFromValues.h | Select; MergeROIs.h | Select; MeshBoundaryROI.h | Select; MeshROI.h | Select; MeshSampler.h | Select; MeshSplittingEngine.h | Select; MeshSubsetEngine.h | Select; NearestPointROI.h | Select; PlaneROI.h | Select; PointsFromIndices.h | Select; ProximityROI.h | Select; SelectConnectedLabelsROI.h | Select; SelectLabelROI.h | Select; SphereROI.h | Select; SubsetTopology.h | Select; ValuesFromIndices.h | Select; ValuesFromPositions.h | Select; DifferenceEngine.h | Transform; DilateEngine.h | Transform; DisplacementMatrixEngine.h | Transform; IndexValueMapper.h | Transform; Indices2ValuesMapper.h | Transform; MapIndices.h | Transform; MathOp.h | Transform; ProjectiveTransformEngine.h | Transform; QuatToRigidEngine.h | Transform; RigidToQuatEngine.h | Transform; ROIValueMapper.h | Transform; SmoothMeshEngine.h | Transform; TransformEngine.h | Transfor,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2906:86,refactor,refactoring,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2906,1,['refactor'],['refactoring']
Modifiability,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1222,plugin,pluginization,1222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690,6,"['plugin', 'refactor']","['plugin', 'pluginization', 'refactoring']"
Modifiability,"&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1375,config,config,1375,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,2,['config'],['config']
Modifiability,"'); Collis.addObject('EdgeSetTopologyModifier',name='colliseEdgeModifier'); Collis.addObject('MechanicalObject',name='CollisionDOFs'); Collis.addObject('MultiAdaptiveBeamMapping',name='collisMap', controller='../m_ircontroller',useCurvAbs='1',printLog='0'); Collis.addObject('LineCollisionModel',proximity=0.0,group='1'); Collis.addObject('PointCollisionModel', proximity=0.0, group='1'). VisuCatheter = InstrumentCombined.addChild('VisuCatheter'); VisuCatheter.activated= True; VisuCatheter.addObject('MechanicalObject',name='Quads'); VisuCatheter.addObject('QuadSetTopologyContainer',name='ContainerCath'); VisuCatheter.addObject('QuadSetTopologyModifier',name='Modifier'); VisuCatheter.addObject('QuadSetGeometryAlgorithms',name='GeomAlgo', template='Vec3d'); VisuCatheter.addObject('Edge2QuadTopologicalMapping',nbPointsOnEachCircle='10',radius=2,input='@../../topoLines_cath/meshLinesCath',output='@ContainerCath',flipNormals=True); VisuCatheter.addObject('AdaptiveBeamMapping',name='VisuMapCath',useCurvAbs='1', printLog='0', interpolation='@../InterpolCatheter', input='@../DOFs', output='@Quads', isMechanical=False); VisuOgl = VisuCatheter.addChild('VisuOgl'); VisuOgl.activated= True; VisuOgl.addObject('OglModel',name='Visual',color='0.7 0.7 0.7', quads='@../ContainerCath.quads',material='texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 1.0 1.0 1.0 Specular 1 1.0 1.0 1.0 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20'); VisuOgl.addObject('IdentityMapping',input='@../Quads',output='@Visual'). VisuGuide = InstrumentCombined.addChild('VisuGuide'); VisuGuide.activated= True; VisuGuide.addObject('MechanicalObject',name='Quads'); VisuGuide.addObject('QuadSetTopologyContainer',name='ContainerGuide'); VisuGuide.addObject('QuadSetTopologyModifier',name='Modifier'); VisuGuide.addObject('QuadSetGeometryAlgorithms',name='GeomAlgo', template='Vec3d'); VisuGuide.addObject('Edge2QuadTopologicalMapping',nbPointsOnEachCircle='10',radius=1,input='@../../topoLines_guide/meshLinesGuide',output",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:6413,Adapt,AdaptiveBeamMapping,6413,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,1,['Adapt'],['AdaptiveBeamMapping']
Modifiability,"')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. #################; --- sys.version ---; 2.7.18 (v2.7.18:8d21aa21f2, Apr 20 2020, 13:25:05) [MSC v.1500 64 bit (AMD64)]; --- PATH ---; C:\Program Files\Eclipse Foundation\jdk-8.0.302.8-hotspot\bin;C:\Python27;C:\Users\Ruiliang\AppData\Local\Programs\Python\Python39\Scripts;C:\Users\Ruiliang\AppData\Local\Programs\Python\Python39;C:\SIMULIA\Commands;C:\Program Files (x86)\Razer\ChromaBroadcast\bin;C:\Program Files\Razer\ChromaBroadcast\bin;C:\Program Files (x86)\Razer Chroma SDK\bin;C:\Program Files\Razer Chroma SDK\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Crucial\Crucial Storage Executive;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\Windows\system32\config\systemprofile\AppData\Local\Microsoft\WindowsApps;C:\Users\Ruiliang\AppData\Local\Microsoft\WindowsApps;C:\Users\Ruiliang\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\CMake\bin;C:\Qt\5.15.2\msvc2019_64\bin;C:\Qt\5.15.2\msvc2019_64\lib;C:\local\boost_1_75_0\lib64-msvc-14.2;C:\local\boost_1_75_0;C:\Program Files\Git\cmd;;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\dotnet\;C:\Users\Ruiliang\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\Ruiliang\AppData\Local\Programs\Python\Python39\;C:\Users\Ruiliang\AppData\Local\Microsoft\WindowsApps;C:\Users\Ruiliang\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\Ruiliang\.dotnet\tools; --- SOFA_ROOT ---; --- PYTHONPATH ---; --- sys.path ---; ['', 'C:\\WINDOWS\\SYSTEM32\\python27.zip', 'C:\\Python27\\DLLs', 'C:\\Python27\\lib', 'C:\\Python27\\lib\\plat-win', 'C:\\Python27\\lib\\lib-tk', 'C:\\Python27', 'C:\\Python27\\lib\\site-packages']",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486:3017,config,config,3017,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486,1,['config'],['config']
Modifiability,"', name='meshLinesCath'); topoLines_cath.addObject('EdgeSetTopologyModifier', name='meshLinesModifier'); topoLines_cath.addObject('EdgeSetGeometryAlgorithms', name='GeomAlgo', template='Rigid3d'); topoLines_cath.addObject('MechanicalObject', template='Rigid3d', name='dofTopo'). CatheterMechanics = rootNode.addChild('CatheterModel'); CatheterMechanics.addObject('EulerImplicitSolver',rayleighStiffness=0.2,rayleighMass=0.1,printLog='false'); CatheterMechanics.addObject('BTDLinearSolver',subpartSolve='0',verification='0',verbose='0'); CatheterMechanics.addObject('RegularGridTopology',name='meshLines',nx=60,ny=1,nz=1,xmin=0.0,xmax=1.0,ymin=0, ymax=0,zmin=1,zmax=1); CatheterMechanics.addObject('MechanicalObject',template='Rigid3d',name='DOFs',showIndices=0,ry=-90); CatheterMechanics.addObject('WireBeamInterpolation',name='InterpolCatheter',WireRestShape='@../topoLines_cath/catheterRestShape',radius=1,printLog='0'); CatheterMechanics.addObject('AdaptiveBeamForceFieldAndMass',name='CatheterForceField', interpolation='@InterpolCatheter', massDensity=0.00000155); CatheterMechanics.addObject('InterventionalRadiologyController',template='Rigid3d',name='m_ircontroller',printLog='0',xtip=[1, 0 ,0], step=3,rotationInstrument=[0, 0 ,0],controlledInstrument='0',startingPos=[0 ,0 ,0 ,0, -0.7071068, 0, 0.7071068],speed=2,instruments='InterpolCatheter'); CatheterMechanics.addObject('FixedConstraint',name='FixedConstraint',indices=0); CatheterMechanics.addObject('RestShapeSpringsForceField',points='@m_ircontroller.indexFirstNode',stiffness=1e8,angularStiffness=1e8). VisuCatheter = CatheterModel.addChild('VisuCatheter'); VisuCatheter.activated = True; VisuCatheter.addObject('MechanicalObject',name='Quads'); VisuCatheter.addObject('QuadSetTopologyContainer',name='ContainerCath'); VisuCatheter.addObject('QuadSetTopologyModifier',name='Modifier'); VisuCatheter.addObject('QuadSetGeometryAlgorithms',name='GeomAlgo', template='Vec3d'); VisuCatheter.addObject('Edge2QuadTopologicalMapping',nbPoi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483:1843,Adapt,AdaptiveBeamForceFieldAndMass,1843,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483,1,['Adapt'],['AdaptiveBeamForceFieldAndMass']
Modifiability,"'--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. Result of the command above is unapplicable, since it is a Windows system. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. [INFO] [PluginManager] Loaded plugin: C:/Users/timsre/SOFA/v21.12.00/bin/SofaNonUniformFem.dll; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias, SceneCheckDeprecatedComponents, SceneCheckCollisionResponse]; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [WARNING] [Simulation] Default Visual Manager Loop will be used. Add DefaultVisualManagerLoop to the root node of scene file to remove this warning; [INFO] [PluginManager] Loaded plugin: C:/Users/timsre/SOFA/v21.12.00/bin/SofaMiscForceField.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/timsre/SOFA/v21.12.00/bin/STLIB.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/timsre/SOFA/v21.12.00/bin/SoftRobots.dll; [WARNING] [UniformMass(uniformMass1)] Unused Attribute: ""massDensity"" with value: ""0.1""; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias, SceneCheckDeprecatedComponents, SceneCheckCollisionResponse]; [WARNING] [SceneCheckUsingAlias] This scene is using hard coded aliases. Aliases can be very confusing, use with caution.; - MeshOBJLoader: 6 created with alias ""MeshObjLoader""; [INFO] [SceneCheckerVisitor] Finished validating node ""root"". ```. **Content of build_dir/CMakeCache.txt**. Installed with the binary, so CMake wasn't used. ---------------------------------------------. PS: Please do inform me if any other information is required.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2651:2061,Plugin,PluginManager,2061,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2651,4,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"'/> <!-- Needed to use components [HexahedralFEMForceField, ]-->. [WARNING] [SceneCheckUsingAlias] This scene is using hard coded aliases. Aliases can be very confusing, use with caution.; - EulerImplicitSolver: 1 created with alias ""EulerImplicit""; - RegularGridTopology: 1 created with alias ""RegularGrid""; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [ERROR] [MeshGmshLoader(export_filename)] File: 'C:/Users/jducr/Documents/Developpement/Sofa_ws/scenes/exports/membrane_7x7_quads' not found.; [ERROR] [MeshGmshLoader(export_filename)] Can't load file C:/Users/jducr/Documents/Developpement/Sofa_ws/scenes/exports/membrane_7x7_quads; [INFO] [SofaViewer] QtViewer::keyPressEvent, CONTROL pressed; [ERROR] [MeshGmshLoader(export_filename)] File: 'C:/Users/jducr/Documents/Developpement/Sofa_ws/scenes/exports/membrane_7x7_quads' not found.; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [WARNING] [SceneCheckMissingRequiredPlugin] This scene is using component defined in plugins but is not importing the required plugins.; Your scene may not work on a sofa environment with different pre-loaded plugins.; To fix your scene and remove this warning you just need to cut & paste the following lines at the begining of your scene (if it is a .scn):; <RequiredPlugin pluginName='SofaExporter'/> <!-- Needed to use components [MeshExporter, ]-->; <RequiredPlugin pluginName='SofaGeneralSimpleFem'/> <!-- Needed to use components [HexahedralFEMForceField, ]-->. [WARNING] [SceneCheckUsingAlias] This scene is using hard coded aliases. Aliases can be very confusing, use with caution.; - EulerImplicitSolver: 1 created with alias ""EulerImplicit""; - RegularGridTopology: 1 created with alias ""RegularGrid""; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [ERROR] [MeshGmshLoader(export_filename)] File: 'C:/Users/jducr/Documents/Developpement/Sofa_ws/scenes/exports/membran",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2451:6297,plugin,plugins,6297,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2451,2,['plugin'],['plugins']
Modifiability,"'/opt/anaconda3/envs/sofarl/lib/python38.zip', '/opt/anaconda3/envs/sofarl/lib/python3.8', '/opt/anaconda3/envs/sofarl/lib/python3.8/lib-dynload', '/opt/anaconda3/envs/sofarl/lib/python3.8/site-packages']; #################. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import Sofa; ---------------------------------------; Checking SOFA_ROOT and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; ---------------------------------------; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; import Sofa.Helper; ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have '",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690:5529,plugin,plugins,5529,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690,1,['plugin'],['plugins']
Modifiability,"'EdgeSetTopologyModifier', name='colliseEdgeModifier'); Collis.addObject('MechanicalObject', name='CollisionDOFs'); Collis.addObject('MultiAdaptiveBeamMapping', controller='../m_ircontroller', ; useCurvAbs=True, printLog=False, name='collisMap'); Collis.addObject('LineCollisionModel', proximity=0.0, group=1); Collis.addObject('PointCollisionModel', proximity=0.0, group=1); # Visualization Guide; VisuGuide = InstrumentCombined.addChild('VisuGuide'); #VisuGuide.activated = 'true'; VisuGuide.addObject('MechanicalObject', name='Quads'); VisuGuide.addObject('QuadSetTopologyContainer', name='ContainerGuide'); VisuGuide.addObject('QuadSetTopologyModifier', name='Modifier'); VisuGuide.addObject('QuadSetGeometryAlgorithms', name='GeomAlgo', template='Vec3d'); VisuGuide.addObject('Edge2QuadTopologicalMapping', radius='1', listening=True, ; input='@../../topoLines_guide/meshLinesGuide', ; nbPointsOnEachCircle='10', flipNormals='true', output='@ContainerGuide'); VisuGuide.addObject('AdaptiveBeamMapping', interpolation='@../InterpolGuide', ; name='visuMapGuide', output='@Quads', isMechanical=False, ; input='@../DOFs', useCurvAbs=True, printLog=True); TriangleTopology = VisuGuide.addChild('TriangleTopology'); TriangleTopology.addObject('TriangleSetTopologyContainer', name='TriangleContainer'); TriangleTopology.addObject('TriangleSetTopologyModifier', name='Modifier'); TriangleTopology.addObject('TriangleSetGeometryAlgorithms', name='GeomAlgo', template='Vec3d'); TriangleTopology.addObject('Quad2TriangleTopologicalMapping', input='@../ContainerGuide', output='@TriangleContainer'); # Ogl model; VisuOgl = VisuGuide.addChild('VisuOgl'); VisuOgl.addObject('OglModel', color=[0.2, 0.2, 0.8], triangles='@../TriangleTopology/TriangleContainer.triangles', ; material='texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 1.0 1.0 1.0 Specular 1 1.0 1.0 1.0 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20', name='Visual'); VisuOgl.addObject('IdentityMapping', input='@../Quads', output='@Visual'); ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4636:16813,Adapt,AdaptiveBeamMapping,16813,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4636,1,['Adapt'],['AdaptiveBeamMapping']
Modifiability,"(Only MSVC). - SOFA_VECTORIZE is supposed to enable SSE2 but x64 config in MSVC is already enabling ss2 by default. And supposedly now people only use x64. Therefore, if SOFA_VECTORIZE is enabled, msvc is warning (for each cpp) that the sse2 flag is useless.; - SOFA_VECTORIZE also enables fast_math in the same time (maybe you would not want); - the name itself is not really informative (vectorize what ?). This PR:; - add 2 new options: SOFA_ENABLE_FAST_MATH (and enable fast_math); and SOFA_ENABLE_SIMD, which will enable either AVX2 or AVX or nothing if the CPU supports respectively either AVX2 or AVX or nothing (SSE2 is the fallback in msvc/x64); - deprecates SOFA_VECTORIZE , which enables the 2 previous options if checked. More lecture for the curious: https://devblogs.microsoft.com/cppblog/do-you-prefer-fast-or-precise/; fpfast enables auto-vectorisation (among other stuff), thats why they are usually enabled together. On my setup, with SOFA_ENABLE_FAST_MATH + SOFA_ENABLE_SIMD, I can get around 0 to 10% of speedup. Nothing revolutionary anyway. ; TorusFall.scn (1000steps):; - fastfp+avx2: `7.90001 s ( 126.582 FPS)`; - fastfp `8.3388 s ( 119.921 FPS)`; - avx2 `8.49847 s ( 117.668 FPS)`; - ss2 `8.56825 s ( 116.71 FPS)`; We can see that it should be either both of them enabled, or not. That's why it will not be enabled by default, except if we want fp:fast by default. SIde note, seems Eigen3 is quite optimized with SIMD (w/o vs w/):; - `BM_Matrix_eigenmat33_invert/512` : 4.45 us vs 3.40 us; - `BM_Matrix_eigenmat33_determinant/512` : 1.09 us vs 0.882 us ; - `BM_Matrix_eigenmatf_vecmult<24>/512` : 98.0 us vs 76.0 us. In a separate PR, we could do the same for gcc/clang (with `march=native` and fast_math as well). EDIT: `SOFA_ENABLE_SIMD` was originally `DSOFA_ENABLE_AVX` but change the name for the future PR for gcc/clang; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [S",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652:65,config,config,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652,1,['config'],['config']
Modifiability,"(SofaEngine)] Plugin not found: ""SofaEngine"". Failed to load: [""SofaEngine""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Detection.Intersection)] Plugin not found: ""Sofa.Component.Collision.Detection.Intersection"". Failed to load: [""Sofa.Component.Collision.Detection.Intersection""]; [ERROR] [RequiredPlugin(Sofa.Component.SolidMechanics.Spring)] Plugin not found: ""Sofa.Component.SolidMechanics.Spring"". Failed to load: [""Sofa.Component.SolidMechanics.Spring""]; [ERROR] [RequiredPlugin(ArticulatedSystemPlugin)] Plugin not found: ""ArticulatedSystemPlugin"". Failed to load: [""ArticulatedSystemPlugin""]; [ERROR] [RequiredPlugin(Sofa.Component.Visual)] Plugin not found: ""Sofa.Component.Visual"". Failed to load: [""Sofa.Component.Visual""]; [ERROR] [RequiredPlugin(Sofa.Component.LinearSolver.Iterative)] Plugin not found: ""Sofa.Component.LinearSolver.Iterative"". Failed to load: [""Sofa.Component.LinearSolver.Iterative""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Response.Contact)] Plugin not found: ""Sofa.Component.Collision.Response.Contact"". Failed to load: [""Sofa.Component.Collision.Response.Contact""]; [ERROR] [RequiredPlugin(Sofa.GL.Component.Rendering3D)] Plugin not found: ""Sofa.GL.Component.Rendering3D"". Failed to load: [""Sofa.GL.Component.Rendering3D""]; [ERROR] [RequiredPlugin(Sofa.GL.Component.Shader)] Plugin not found: ""Sofa.GL.Component.Shader"". Failed to load: [""Sofa.GL.Component.Shader""]; [ERROR] [RequiredPlugin(Sofa.Component.IO.Mesh)] Plugin not found: ""Sofa.Component.IO.Mesh"". Failed to load: [""Sofa.Component.IO.Mesh""]; [ERROR] [RequiredPlugin(Sofa.Component.Setting)] Plugin not found: ""Sofa.Component.Setting"". Failed to load: [""Sofa.Component.Setting""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Solver)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Solver"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Solver""]; [ERROR] [RequiredPlugin(Sofa.Component.ODESolver.Backward)] Plugin not found: ""Sofa.Component.ODESolver.Ba",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:4125,Plugin,Plugin,4125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,2,['Plugin'],['Plugin']
Modifiability,(applications/plugins/Geomagic/src/Geomagic/GeomagicDriver.cpp) (line 35): . Code:; #include <Geomagic/GeomagicVisualModel.h>; #include thread; #include chrono . #include chrono // <- twice; #include thread // <- twice,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2070:14,plugin,plugins,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2070,1,['plugin'],['plugins']
Modifiability,"(based on #2307 ). Pretty annoying to forget to enable diffusionsolver every time image is required.; And it appeared that in fact image does not even need this plugin... ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2308:161,plugin,plugin,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2308,1,['plugin'],['plugin']
Modifiability,"(not the PR itself) ; I am wondering why does the `plugins/` dir CMakefile tests the presence of Sofa.GL ?; IMO it should be in the CMakefile of the plugin itself, where it does ` find_package()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3514#issuecomment-1333215217:51,plugin,plugins,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3514#issuecomment-1333215217,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"(not the topological ones 😏). {Length,Radius,Stiffness,Poisson}Container was created a **long time ago** to provide an ""external location"" where to set data per element, regardless of the component.; But: ; - the design was flawed (hard deps, not generic at all); - the remaining files are just interfaces (virtual ... =0) and there is no implementation at all in the whole codebase (deleted files in the past? forgotten plugins?), so the code itself at the moment is totally useless. Actually 3 of them was even not including the necessary headers... So the best course of action to do IMO is to delete them, and maybe find an other design later to provide means to get data per element (opposed to data for the whole set of elements). A nice side effect is that SofaTopologicalMapping just depends on SofaBaseTopology now.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2099:421,plugin,plugins,421,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2099,1,['plugin'],['plugins']
Modifiability,"(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; > ```; > ; > ```; > --- sys.version ---; > 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ]; > --- PATH ---; > /usr/local/opt/python@3.8/bin/:/opt/anaconda3/envs/sofarl/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/share/dotnet:~/.dotnet/tools; > --- SOFA_ROOT ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > --- PYTHONPATH ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages:/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages:/path/to/SofaPython3/lib/python3/site-packages:; > --- sys.path ---; > ['', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/path/to/SofaPython3/lib/python3/site-packages', '/opt/anaconda3/envs/sofarl/lib/python38.zip', '/opt/anaconda3/envs/sofarl/lib/python3.8', '/opt/anaconda3/envs/sofarl/lib/python3.8/lib-dynload', '/opt/anaconda3/envs/sofarl/lib/python3.8/site-packages']; > #################; > ```; > ; > ### Logs; > **Full output**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""cred",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:4048,plugin,plugins,4048,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,"(without the tests....). Main problem is the linear solvers using CSPARSE, which only handles double.; Actually, SparseCholesky was using buffers of float with pointers of double (which obviously causes a crash).; SparseLU is more convenient, it tried to use SReal, and make the compilation failing directly. There were at least two way to solve this problem:; - disable in the CMakeLists directly (if floating_point is float); - do not compile the instance templated on float (effectivement does not compile the two solvers). I chose the latter to keep them visible in the base code, but I totally agree with the former solution (but requires to access to the Cmake variable SOFA_FLOATING_POINT from Sofa.Config in the CMakefile of S.C.LS.Direct). An other thing is that preconditionner wants to use SparseCholesky as well so there is a conditional compilation happening here unfortunately. I dont know if it is possible to just use an other direct solver (probably). This was needed to test the performance tests for ; - #2856. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2907:667,variab,variable,667,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2907,2,"['Config', 'variab']","['Config', 'variable']"
Modifiability,")] Plugin not found: ""Sofa.Component.Collision.Detection.Algorithm"". Failed to load: [""Sofa.Component.Collision.Detection.Algorithm""]; [ERROR] [RequiredPlugin(SofaBoundaryCondition)] Plugin not found: ""SofaBoundaryCondition"". Failed to load: [""SofaBoundaryCondition""]; [ERROR] [RequiredPlugin(Sofa.Component.Topology.Container.Constant)] Plugin not found: ""Sofa.Component.Topology.Container.Constant"". Failed to load: [""Sofa.Component.Topology.Container.Constant""]; [ERROR] [RequiredPlugin(SofaEngine)] Plugin not found: ""SofaEngine"". Failed to load: [""SofaEngine""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Detection.Intersection)] Plugin not found: ""Sofa.Component.Collision.Detection.Intersection"". Failed to load: [""Sofa.Component.Collision.Detection.Intersection""]; [ERROR] [RequiredPlugin(Sofa.Component.SolidMechanics.Spring)] Plugin not found: ""Sofa.Component.SolidMechanics.Spring"". Failed to load: [""Sofa.Component.SolidMechanics.Spring""]; [ERROR] [RequiredPlugin(ArticulatedSystemPlugin)] Plugin not found: ""ArticulatedSystemPlugin"". Failed to load: [""ArticulatedSystemPlugin""]; [ERROR] [RequiredPlugin(Sofa.Component.Visual)] Plugin not found: ""Sofa.Component.Visual"". Failed to load: [""Sofa.Component.Visual""]; [ERROR] [RequiredPlugin(Sofa.Component.LinearSolver.Iterative)] Plugin not found: ""Sofa.Component.LinearSolver.Iterative"". Failed to load: [""Sofa.Component.LinearSolver.Iterative""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Response.Contact)] Plugin not found: ""Sofa.Component.Collision.Response.Contact"". Failed to load: [""Sofa.Component.Collision.Response.Contact""]; [ERROR] [RequiredPlugin(Sofa.GL.Component.Rendering3D)] Plugin not found: ""Sofa.GL.Component.Rendering3D"". Failed to load: [""Sofa.GL.Component.Rendering3D""]; [ERROR] [RequiredPlugin(Sofa.GL.Component.Shader)] Plugin not found: ""Sofa.GL.Component.Shader"". Failed to load: [""Sofa.GL.Component.Shader""]; [ERROR] [RequiredPlugin(Sofa.Component.IO.Mesh)] Plugin not found: ""Sofa.Component.IO.Mesh""",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:3651,Plugin,Plugin,3651,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,2,['Plugin'],['Plugin']
Modifiability,"* Added getter for ContactsVector. Added a buffer variable that is overwritten before ContactsVector is cleared. Added functions to retrieve the number of contacts and their respective distance values in the buffer. * added a check before trying to access contact information. Added a function to also retrieve a list of collision point pairs. * Simplified code a bit, by moving the check up in the hierarchy. * Added a getter function to retrieve the element ids of the collision models. This can be used to lookup the ids in a MechanicalObject that are affected by a contact from a topology (get elements -> lookup MO ids in topology -> lookup points in MO). Also added some Docstrings. * Exchanged push_back with emplace_back and sped up code by reserving memory for vectors. * Replaced Vector3 from helper with Vector3 from defaulttypes. * Changed unsigned int to sofa::Size and placed curly brackets on new line. #1678 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1683:50,variab,variable,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1683,1,['variab'],['variable']
Modifiability,"**Preliminary work before changing ""a little"" the TopologyChange API.**; Rename some classes to match their file names :; - TopologyDataImpl into TopologyData; - TopologySubsetDataImpl into TopologySubsetData; - TopologySparseDataImpl into TopologySparseData. Rename files:; - core/topology/BaseTopologyEngine into core/topology/TopologyEngine as the class was TopologyEngine ; - SofaBaseTopology/TopologyEngine into TopologyDataEngine. Use alias template to simplify code of TopologyData and change inheritence of TopologySubsetData and TopologySparseData to factorize some code. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1872:500,inherit,inheritence,500,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1872,1,['inherit'],['inheritence']
Modifiability,"**Update**; It was working before on Windows because we already have a user defined `FindEigen3.cmake` in sofa/cmake (on which I did some modifications not so long ago :facepalm:, sometime I have the memory of a red fish). The problem I had was probably because this `FindEigen3.cmake` isn't installed alongside SOFA, so if an external plugin links against SOFA, it will hit the `find_package(Eigen3 REQUIRED)` inside our ***Config.cmake and will fail to find it. @guparan Do you think we should install the `FindEigen3.cmake` (like CGAL is doing)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251:336,plugin,plugin,336,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251,2,"['Config', 'plugin']","['Config', 'plugin']"
Modifiability,"**[ci-depends-on]** detected during [build #10](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/10/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG fbc130904462023496cbd330c7d815f0dfd95af1_; - **Merge or close https://github.com/sofa-framework/SofaPython/pull/2**; _For this build, SofaPython/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython; GIT_TAG ac7e23fb6aec5979c97b84a4feecdbb9dd340256_; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/211**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ec9320ca0a3bec4ffc5e55abe5cd099ccdbff18f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949425223:485,Flexible,Flexible,485,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949425223,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #10](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/10/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966175549:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966175549,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #11](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/11/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966308036:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966308036,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #12](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/12/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966316632:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966316632,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #13](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/13/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966335062:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966335062,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #14](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/14/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG b45ee24754d78223533bea5cd04bae6a8c3441c6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 8261e01ea5c338bc065fbf1af007418b022bf2ae_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966791015:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966791015,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/15/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG b45ee24754d78223533bea5cd04bae6a8c3441c6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 07c1d112e418cf57bdf40ca29b09ad8a06eba52d_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 305d7ce1912b8b450a0ce86e5ce6651c4fe9c839_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1968640370:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1968640370,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 3ee9780863a1ecd73a4c13e130633b21f0b20eb1_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG c2af4de99fa12672052164a8205db6ab07771ed8_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 305d7ce1912b8b450a0ce86e5ce6651c4fe9c839_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969775511:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969775511,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 3ee9780863a1ecd73a4c13e130633b21f0b20eb1_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG c2af4de99fa12672052164a8205db6ab07771ed8_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 305d7ce1912b8b450a0ce86e5ce6651c4fe9c839_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969891332:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969891332,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911382644:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911382644,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911569690:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911569690,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-940960550:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-940960550,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911607425:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911607425,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943216103:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943216103,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912477719:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912477719,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943232753:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943232753,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 3a11f7365fa08c998fb4e07e23fc64f50233a273_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944267176:483,Flexible,Flexible,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944267176,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4471/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/5**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 56823196e7f8d1793d601707be1bd3efac4a056b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1918442718:208,Plugin,PluginExample,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1918442718,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 4ec2b43247c7d4d0dd9d5a66eb8e3c5cfca180c7_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912603953:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912603953,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943427879:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943427879,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 3a11f7365fa08c998fb4e07e23fc64f50233a273_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944272214:483,Flexible,Flexible,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944272214,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 1b36e6ff3f81b7a1b2ef1c2d62ea0c282c3bce48_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-913580967:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-913580967,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 3a11f7365fa08c998fb4e07e23fc64f50233a273_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945404864:483,Flexible,Flexible,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945404864,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3649/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/3**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 91e19c464e875daf9598bd31953655a7a84aef86_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3649#issuecomment-1430365297:208,Plugin,PluginExample,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3649#issuecomment-1430365297,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 1b36e6ff3f81b7a1b2ef1c2d62ea0c282c3bce48_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-914060262:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-914060262,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG fc5b448a5de22989477f6cde08d9b58d322a02ae_; - **Merge or close https://github.com/sofa-framework/SofaPython/pull/2**; _For this build, SofaPython/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython; GIT_TAG 8b5787f459de8ad885af8a3710333308f1853999_; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/211**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ec9320ca0a3bec4ffc5e55abe5cd099ccdbff18f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945759963:483,Flexible,Flexible,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945759963,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966012024:1050,Plugin,PluginExample,1050,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966012024,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 1b36e6ff3f81b7a1b2ef1c2d62ea0c282c3bce48_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-916016614:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-916016614,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966114619:1050,Plugin,PluginExample,1050,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966114619,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 26efcf7698a861e6df66a6b30b7318725df14f9d_; - **Merge or close https://github.com/sofa-framework/SofaPython/pull/2**; _For this build, SofaPython/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython; GIT_TAG 8b5787f459de8ad885af8a3710333308f1853999_; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/211**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ec9320ca0a3bec4ffc5e55abe5cd099ccdbff18f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949368920:483,Flexible,Flexible,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949368920,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966144751:1050,Plugin,PluginExample,1050,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966144751,3,['Plugin'],['PluginExample']
Modifiability,"+ Added the submodules that enable the ROS Connector Plugin; - This includes the submodules for SoftRobot, STLLIB and SofaROSConnector from Fabian Aichele. + Added a bash script that automates the build with `CMakeLists.txt`. + Added a Dockerfile for automated debian builds. + Appended the path to the `FindROS` and `Log4CXX` modules to the root `CMakeLists.txt` file. + I will be leaving a customized docker build on my [docker repo](https://hub.docker.com/u/lakehanne/sofa). + Enough said :100: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1122:53,Plugin,Plugin,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122,1,['Plugin'],['Plugin']
Modifiability,"+1. To CmakeLists.txt guys, . just a small question I have ; - what is this for ?; if(NOT TARGET CImgPlugin); include(""${CMAKE_CURRENT_LIST_DIR}/CImgPluginTargets.cmake""); endif(). - shouldn't we also export something like ; CImgPlugin_INCLUDE_DIR ? . To make the plugin relocatable ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/544#issuecomment-351674660:264,plugin,plugin,264,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544#issuecomment-351674660,1,['plugin'],['plugin']
Modifiability,", they do nothing. In the functions `processNodeTopDown` and `processNodeBottomUp`, the functions _fwd_* and _bwd_* are surrounded by boilerplate code which is executed even if the functions _fwd_* and _bwd_* are not overriden, i.e. even if they do nothing. Moreover, all the _fwd_* and _bwd_* functions act on objects or containers, stored in a Node. However, in the context of concurrent tasks, those objects and containers can change. In particular, adding an element to a container invalidates the iterators. It is a problem if a visitor was in the middle of a loop over the container. This problem can occur even if the visitor was not design to work on this specific container through the override of _fwd_* and _bwd_* functions, because of the boilerplate code. In a nutshell, there are race conditions which can be avoided if the derived class can execute only the code they are designed to execute, and nothing more. ### Proposition. I added boolean variables named `applyFwd*` and `applyBwd*`, each corresponding to the `fwd*` and `bwd*` functions. They are all set to false by default.; For example, if `applyFwdMechanicalState` is true, then the code related to `fwdMechanicalState` is executed. Remember that previously, the boilerplate code related to `fwdMechanicalState` was executed even if `fwdMechanicalState` does nothing. To change that, the derived class must set the right variables to true, so the right code is executed. For example, if a derived class wants to execute `fwdMechanicalState`, it must set `applyFwdMechanicalState` first, usually in its constructor. ### Pros. - Avoid unnecessary race conditions; - Does not execute unnecessary boilerplate code; - Simple to understand. ### Cons. - Breaks all classes derived from `BaseMechanicalVisitor`; - Forces the developers of classes derived from `BaseMechanicalVisitor` to tune booleans according the goal of the visitor.; - Runtime check of the variables. This PR is not to merge yet. IIt is suggested as an alternativ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1962:1485,variab,variables,1485,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1962,1,['variab'],['variables']
Modifiability,"- #4533. did not remove everything of Sofa.Component.Compat and was even throwing a (harmless) warning at the cmake configure stage. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4596:116,config,configure,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4596,1,['config'],['configure']
Modifiability,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/200:301,plugin,plugin,301,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200,1,['plugin'],['plugin']
Modifiability,- Add: script event listener; - Add: scene coupling Geomagic and SofaCarving ; - Update carving detection collision to use the existing pipeline instead of relaunching a narrowphase intersection computation. - Add method to remove topological element from PointModel collision.; - Fix sofaCarving tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/787:43,coupling,coupling,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/787,1,['coupling'],['coupling']
Modifiability,"- As announced in #2010, `BruteForceDetection` can inherit from `BruteForceBroadPhase`.; - The narrow phase code has been extracted into a new component: `BVHNarrowPhase`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2043:51,inherit,inherit,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2043,1,['inherit'],['inherit']
Modifiability,"- Avoid trailing comma; - Consistent indentation; - Typo 'begining' -> 'beginning'; - Sort by name (bonus). # Before; ```; [WARNING] [SceneCheckMissingRequiredPlugin] This scene is using component defined in plugins but is not importing the required plugins. ; Your scene may not work on a sofa environment with different pre-loaded plugins. ; To fix your scene and remove this warning you just need to cut & paste the following lines at the begining of your scene (if it is a .scn): ; <RequiredPlugin name='MultiThreading'/> <!-- Needed to use components [ParallelBruteForceBroadPhase, ParallelBVHNarrowPhase, ]--> ; <RequiredPlugin name='SofaConstraint'/> <!-- Needed to use components [LCPConstraintSolver, FreeMotionAnimationLoop, UncoupledConstraintCorrection, ]--> ; <RequiredPlugin name='SofaImplicitOdeSolver'/> <!-- Needed to use components [EulerImplicitSolver, ]--> ; <RequiredPlugin name='SofaLoader'/> <!-- Needed to use components [MeshObjLoader, ]--> ; <RequiredPlugin name='SofaMeshCollision'/> <!-- Needed to use components [TriangleCollisionModel, LineCollisionModel, PointCollisionModel, ]--> ; <RequiredPlugin name='SofaOpenglVisual'/> <!-- Needed to use components [LightManager, SpotLight, OglModel, ]--> ; <RequiredPlugin name='SofaSimpleFem'/> <!-- Needed to use components [HexahedronFEMForceField, ]--> ; ```. # After; ```; [WARNING] [SceneCheckMissingRequiredPlugin] This scene is using component defined in plugins but is not importing the required plugins. ; Your scene may not work on a sofa environment with different pre-loaded plugins. ; To fix your scene and remove this warning you just need to cut & paste the following lines at the beginning of your scene (if it is a .scn): ; <RequiredPlugin name='MultiThreading'/> <!-- Needed to use components [ParallelBVHNarrowPhase, ParallelBruteForceBroadPhase]--> ; <RequiredPlugin name='SofaConstraint'/> <!-- Needed to use components [FreeMotionAnimationLoop, LCPConstraintSolver, UncoupledConstraintCorrection]--> ; <Req",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2111:208,plugin,plugins,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2111,3,['plugin'],['plugins']
Modifiability,- BeamAdapter has objects that inherit from ConstraintResolution. ; The constructor now impose to have at least one parameter. You can update your code easily by using the new constructor. ; - The example scene in SofaPython keyboardController does not seems to work anymore. ; - ... Please share what you have seen with others so we can fix everything quickly; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/683:31,inherit,inherit,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/683,1,['inherit'],['inherit']
Modifiability,- Fix Attachconstraint for use with FreeMotionAnimationLoop - credit to @hugtalbot #940; - refactor of parameters to use `SOFA_UNUSED`; - fix dynamicConstraintFactor. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/949:91,refactor,refactor,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/949,1,['refactor'],['refactor']
Modifiability,"- Fix cmake when building on a system with Qt6 and Qt5 are detected in the same time (qt5 is prioritized); - Fix cmake var for QGLViewer (not supported with Qt6); - Fix for Qt6 where its windeployqt utility does not support the parameter ""--no-angle"" anymore (leads to a build error); - Fix for Qt6.2 while doing the cmake configuration (I suppose the latest Qt6.2 did some changes for its cmake packages), ; tested on Windows 11 and Qt6.2 (and VS2022). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2490:323,config,configuration,323,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2490,1,['config'],['configuration']
Modifiability,"- Fix compilation and CMakeLists of the plugin before moving it out from SOFA repository. OpenCTM seems not to be supported anymore but some project are still using it. ; I will move that plugin into my github repo embedding directly OpenCTM lib. ; Unless you think it is of any use on sofa-framework repository. FYI: OpenCTM — the Open Compressed Triangle Mesh file format — is a file format, a software library and a tool set for compression of 3D triangle meshes. The geometry is compressed to a fraction of comparable file formats (3DS, STL, VRML, COLLADA...), and the format is easily accessible through a simple, portable API. http://openctm.sourceforge.net/. I was using it for WebGL as this format is slim and quick to load.; See for example here:; https://alteredqualia.com/three/examples/webgl_loader_ctm_materials.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1359:40,plugin,plugin,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1359,3,"['plugin', 'portab']","['plugin', 'portable']"
Modifiability,"- Fix link issues because of missing *_API; - Follow naming guidelines + depreciation of old variables; - OglGrid uses a cached list of vertices; - Use of `saveLastState` and `restoreLastState`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115:93,variab,variables,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115,1,['variab'],['variables']
Modifiability,"- Fix warnings in code due to pluginization; - Clean required plugins warnings + required Data warnings; - Add 2 new scenes to test geomagic against a rigid and a deformable sphere. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2846:30,plugin,pluginization,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2846,2,['plugin'],"['pluginization', 'plugins']"
Modifiability,"- Fixed the module name; - config.h is now config.h.in. A lot more work to do if we want to clean this plugin. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4719:27,config,config,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4719,3,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"- Hiding local declaration ; - Parameter names do not match ; - Uninitialized class members ; - Lambda capture is never used ; - Local variable can be made const ; - Result of a postfix operator is discarded ; - add explicit specifier to make constructor non-converting ; - Member function can be made const ; - Variable can be moved to if-statement ; - Declaration and assignment can be joined ; - Return by const value. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2559:135,variab,variable,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2559,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"- I made to PR trying to have symetry in the implementation: https://github.com/alxbilger/sofa/pull/2; - I also tested the code with Vec2 and Vec1 and it does not compile (so the use of template there is highly questionnable) . It could also be a good use case for c++ 20 concepts; . More comments (to go totally out of the scope of the PR):; - the methods ""addContact"" are probably not properly name... as this component has nothing to do with contact maybe addConstraint (?); - the ""merge"" data field is only in in Vec3 which means either the data field should be only on that specialization or that it should be used in Rigid3Type (or at least printing an ""unsupproted behavior"" when set) ; - the ""keepOrientDiff"" data field is only for Rigid, it shouldn't exists at all in the Vec3 version (it can be considered an favor of having inheritance in addition to specialization). ; - the ""numericalTolerance"" data field is only used for rigid specialization (so same comment as for keepOrientDiff"" and it seems it is only for rotational part.; - why BilateralInteractionConstraint<Rigid>::getVelocityViolation() is empty ? ; - in BilateralInteractionConstraint<Rigid3Types>::getConstraintResolution() there is getValue() in for loops(); - accessors are not used in BilateralInteractionConstraint<Rigid3Types>::buildConstraintMatrix()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187581578:835,inherit,inheritance,835,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187581578,1,['inherit'],['inheritance']
Modifiability,"- IncompleteTypeInfo was defined with SOFA_DEFAULTTYPE_API but this is incorrect as IncompleteTypeInfo is inline only. It was apparently harmless in Release/RelWithDebug but was complaining in Debug config with an undefined reference in SofaBaseMechanics 🧙‍♂️; - Since a few version of MSVC2019, SofaCUDA could not compile and was complaining on a missing pow() function. Apparently, one has to use powf() instead. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1761:199,config,config,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1761,1,['config'],['config']
Modifiability,- Mass conponent in the scenes using ParticleSink or ParticleSource need to handleTopologyChange as the number of dof change. - Also fix warning in scenes due to use of alias. - Add non regression test for 4 scene in this plugin. . Is this plugin build on CI... will see... Fix #1276. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1278:222,plugin,plugin,222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1278,2,['plugin'],['plugin']
Modifiability,"- Match variable names in declaration and definition; - Make some variable const; - Indentation consistency; - Namespace concatenation and pragma once. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3283:8,variab,variable,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3283,2,['variab'],['variable']
Modifiability,"- Move both scenes as they are using several components from the plugin to illustrate SPH behavior and rendering.; - Add a simple rendering version of PointSplatModel scene in examples:. ![PointSplatModel_00000001](https://user-images.githubusercontent.com/21199245/162045768-58ee77d5-6127-4e6d-996f-8f4ffc5aba4c.png). ![PointSplatModel_00000002](https://user-images.githubusercontent.com/21199245/162045788-965a7e35-a306-4b52-82c8-e4ceeeb5a124.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2847:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2847,1,['plugin'],['plugin']
Modifiability,- Not sure this is the good way to do it with cmake findCGal but otherwise the dll are not linked (if not on env_path). - Add a quick scene test for cgal without image plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/958:168,plugin,plugin,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958,1,['plugin'],['plugin']
Modifiability,"- PoissonContainer/StiffnessContainer are already present in SofaSimpleFem; - It should follow guidelines from PluginExample (name, folder, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270:111,Plugin,PluginExample,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270,1,['Plugin'],['PluginExample']
Modifiability,"- Regarding your first comment: ; The second point had indeed nothing to do with the actual issue. I was just mentionning that it may be beneficial to use CMAKE_DEBUG_POSTFIX as the default value - provided it is not an empty string - for SOFA_LIBSUFFIX in terms of portability, ""_d"" being the fallback default value if CMAKE_DEBUG_POSTFIX is empty.; On the main CMakeLists.txt, CMAKE_DEBUG_POSTFIX could be set with ""_d"" as the default value. - Regarding the second comment: ; Right now setting the `DEBUG_POSTFIX` at the target level is the consistent way to do it with respect to how things are done in the current implementation. - Finally right now I **don't** know what is the best way to do it, I guess some experiments could be made by just setting the `CMAKE_DEBUG_POSTFIX` at the main CMakeLists.txt level, keeping in mind the probable problem with executables mentioned in https://stackoverflow.com/questions/28893450/how-to-get-debug-postfix-in-executable-name. Maybe it has been fixed / changed in recent versions of CMake, however portability must remain a strong concern here. ; Ultimately whatever the best option is, it is **important** that these sort of decisions are **well documented**, including potential side effects.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342478686:266,portab,portability,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342478686,2,['portab'],['portability']
Modifiability,"- Rename variable ```lastElementIndex``` into ```m_lastElementIndex```; - Add accessor; - Update this counter during add/remove operation. This counter is mandatory when multiple remove events are queued. ; - Init the counter during topologyData connection with its topology buffer. api is converging but this PR might have some side effects... ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2359:9,variab,variable,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2359,1,['variab'],['variable']
Modifiability,"- Replace all VisualModel by OglModel; - Add `<RequiredPlugin name=""SofaOpenglVisual""/>` in all scene with an OglModel. To be merged after #1080 pluginisation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1081:145,plugin,pluginisation,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1081,1,['plugin'],['pluginisation']
Modifiability,- Some macro DLL missing and one not to be set in subsetContactMapper.; - Fix build of plugin SofadistanceGrid_test also: only build if SOFA_BUILD_TESTS and SofaTest_FOUND. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/966:87,plugin,plugin,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/966,1,['plugin'],['plugin']
Modifiability,"- Task #3770 . Main goal is to remove the ObjectFactory singleton (later) ***and*** the implicit registration of objects while loading dynamic libraries (plugins). In this PR, the explicit registration is applied on components of `Sofa.Component.StateContainer`. The legacy RegisterObject mechanism is preserved and will warn the user at the compilation and at run-time. EDIT:. - add tests about plugins non-registering/registering implicitly/registering explicitly; - add deprecations/warnings in RequiredPlugin; - add a function registerPlugin in PluginManager. This function is simply an alias for loadPlugin() because loadPlugin() does much more than just loading a plugin by itself. In an eventual future, PluginManager should be refactored in a way that loadPlugin calls registerPlugin(). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4429:154,plugin,plugins,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4429,6,"['Plugin', 'plugin', 'refactor']","['PluginManager', 'plugin', 'plugins', 'refactored']"
Modifiability,"- The variables `SOFAGUI_HAVE_SOFAGUIQT` and `SOFAGUI_HAVE_SOFAHEADLESSRECORDER` were not defined whereas they are used in `SofaGui/SofaGuiConfig.cmake.in`.; - Modules in `SofaGui/SofaGuiConfig.cmake.in` have been updated. . I expect it will also fix the SofaPython3 GitHub actions (see for example https://github.com/sofa-framework/SofaPython3/runs/6592539251?check_suite_focus=true). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3011:6,variab,variables,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3011,1,['variab'],['variables']
Modifiability,"- This PR should fix unload of LMConstraint's plugin (problem visible on the centos' CI machine with the 6xx failed scenes tests); + Fix LMconstraint itself (bogus semicolon); + Fix one scene to illustrate a working scene (from #1817). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1831:46,plugin,plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1831,1,['plugin'],['plugin']
Modifiability,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/713:61,plugin,plugins,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713,14,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugin', 'plugins']"
Modifiability,"- Various cleaning to remove SceneChecker warnings; - Fix some examples which should use `vertexMass ` and not `totalMass ` in `uniformMass ` as the number of particles evolve. ; - Fix SpatialGridPointModel scene which was timing out on CI. There was a problem of init with too many particles created compare to the collision and sphFF distances. ; - Update SPHParticleSink_obstacle.scn to wash the dragon; . **SpatialGridPointModel new behavior** ; <img src=""https://github.com/sofa-framework/sofa/assets/21199245/305fd2a4-c15b-4315-8278-509c3fef6204"" width=""75%"">. And working collisions:; <img src=""https://github.com/sofa-framework/sofa/assets/21199245/8a117063-4714-4e0c-8156-401dcba3fde0"" width=""75%"">. **New version of SPHParticleSink_obstacle**; <img src=""https://github.com/sofa-framework/sofa/assets/21199245/184dad41-bb91-45f1-9d38-b913610aec78"" width=""75%"">. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4149:169,evolve,evolve,169,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4149,1,['evolve'],['evolve']
Modifiability,"- `BaseLinearElasticityFEMForceField::d_poissonRatio` is now a `VecReal` instead of a `Real`. ; - Introduction of 2 functions to compute Lamé coefficients; - Callbacks on the elasticity parameters to check their validity; - `BeamFEMForceField`, `TriangleFEMForceField`, `TriangularFEMForceField` and `TriangularFEMForceFieldOptim` now inherits from `BaseLinearElasticityFEMForceField`. They now support a vector of Young's modulus, compared to a single scalar. TODO: check that the default value changed in some force fields. [ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/141]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852:335,inherit,inherits,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852,1,['inherit'],['inherits']
Modifiability,"- `DiscreteIntersection::testIntersection` and `DiscreteIntersection::computeIntersection` are made virtual, so derived classes can override them; - Comments; - Simplification; - Removed unused code (draw, unused variables etc); - Fix `MinProximityIntersection::computeIntersection` and `NewProximityIntersection::computeIntersection` on cubes; - Fix compilation warnings. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2178:213,variab,variables,213,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2178,1,['variab'],['variables']
Modifiability,"- `TVecId` can be `constexpr`; - Enumerations are scoped (global variables are declared to keep compatibility with previous unscoped enumeration); - Indices are based on enumerations (no more hard coded indices); - Main states are defined as a global variable; - When main states are called, the global variable is read instead of the call of a static function (each time the static function is called, it instantiates a new variable instead of re-use the same). Main changes are in `VecId.h`. The rest is trivial changes. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5082:65,variab,variables,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5082,4,['variab'],"['variable', 'variables']"
Modifiability,"- `loadPlugin` and `loadPluginByPath` return an enum: more detailed than a boolean; - `readFromIniFile` returns the list of plugins that have been loaded; - The plugin manager GUI highlights which plugins have been loaded in the GUI initialization (not the autoload file). Black text is for plugins that have been loaded prior the GUI initialization, or after. Blue for plugins loaded during init. See screenshot; - More log messages. ![image](https://user-images.githubusercontent.com/10572752/177587029-83209468-2213-4601-8e30-5b39bd331a2e.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3109:124,plugin,plugins,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109,5,['plugin'],"['plugin', 'plugins']"
Modifiability,"- based on #4270 . Part of the task #4217 . This PR removes the inheritance on type::fixed_array and use std::array to store the elements. No performance change noticed on few scenes (caduceus, TorusFall, beamadapter scene) on Windows/msvc, linux/gcc and macos/clang. . ---; Benches: (Ubuntu, gcc); Unit:; https://ethercalc.net/jt9xe3yadxug. Mostly the same, except:; - zero-construct is faster; - mat<24> mult is slower but can be fixed easily (https://github.com/sofa-framework/sofa/blob/3fadc10492662a63eab725fa45894f2c5b3fe9bd/Sofa/framework/Type/src/sofa/type/Mat.h#L531C12-L531C12 may confuse the vectorizer).; EDIT: and apparently is mitigated by using LTO. Scenes :; caduceus:; - master: `10000 iterations done in 6.61867 s ( 1510.88 FPS)`; - pr: `10000 iterations done in 6.59469 s ( 1516.37 FPS)`; ; TorusFall: ; - master: `5000 iterations done in 15.6086 s ( 320.336 FPS)`; - pr: `5000 iterations done in 15.6149 s ( 320.207 FPS)`. 3instruments_collis; - master: `5000 iterations done in 30.5179 s ( 163.838 FPS)`; - pr: `5000 iterations done in 30.2582 s ( 165.244 FPS)`. With LTO:; caduceus:; - master: `10000 iterations done in 6.55136 s ( 1526.4 FPS)`; - pr: `10000 iterations done in 6.49977 s ( 1538.52 FPS)`; ; TorusFall: ; - master: `5000 iterations done in 15.4835 s ( 322.925 FPS)`; - pr: `5000 iterations done in 14.8696 s ( 336.256 FPS)`. 3instruments_collis; - master: `5000 iterations done in 30.0172 s ( 166.571 FPS)`; - pr: `5000 iterations done in 29.9373 s ( 167.016 FPS)`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new wa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4296:64,inherit,inheritance,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4296,1,['inherit'],['inheritance']
Modifiability,"- factorize loops over elements; - add unit tests; - rename Data; - extend to tetrahedra and hexahedra. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4958:68,extend,extend,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4958,1,['extend'],['extend']
Modifiability,"- kdtree was using defaulttype::Vectypes only for the Vec2d/Vec3d...; - GenerateRigid (only used in generaterigid app and sofapython...) is using RigidMass, I took the lazy solution and put the dependency through a template; - OwnershipPtr had a dependency on BaseMatrix for nothing. + fix in Frame (defaulttype/config.h, DEFAULTTYPE_API). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1915:312,config,config,312,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1915,1,['config'],['config']
Modifiability,"- redundant accessibility specifier; - constexpr variables; - make functions const; - type traits simplification; - explicit deleted functions. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2461:49,variab,variables,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2461,1,['variab'],['variables']
Modifiability,- use const & and better variable names ; - Test the edge's vertices as well. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1545:25,variab,variable,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1545,1,['variab'],['variable']
Modifiability,"-----------------------------. ### Logs. **Full output**. ```txt. [WARNING] [SceneCheckUsingAlias] This scene is using hard coded aliases. Aliases can be very confusing, use with caution.; - EulerImplicitSolver: 1 created with alias ""EulerImplicit""; - RegularGridTopology: 1 created with alias ""RegularGrid""; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [ERROR] [MeshGmshLoader(export_filename)] File: 'C:/Users/jducr/Documents/Developpement/Sofa_ws/scenes/exports/membrane_7x7_quads' not found.; [ERROR] [MeshGmshLoader(export_filename)] Can't load file C:/Users/jducr/Documents/Developpement/Sofa_ws/scenes/exports/membrane_7x7_quads; [INFO] [SofaViewer] QtViewer::keyPressEvent, CONTROL pressed; [ERROR] [MeshGmshLoader(export_filename)] File: 'C:/Users/jducr/Documents/Developpement/Sofa_ws/scenes/exports/membrane_7x7_quads' not found.; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [WARNING] [SceneCheckMissingRequiredPlugin] This scene is using component defined in plugins but is not importing the required plugins.; Your scene may not work on a sofa environment with different pre-loaded plugins.; To fix your scene and remove this warning you just need to cut & paste the following lines at the begining of your scene (if it is a .scn):; <RequiredPlugin pluginName='SofaExporter'/> <!-- Needed to use components [MeshExporter, ]-->; <RequiredPlugin pluginName='SofaGeneralSimpleFem'/> <!-- Needed to use components [HexahedralFEMForceField, ]-->. [WARNING] [SceneCheckUsingAlias] This scene is using hard coded aliases. Aliases can be very confusing, use with caution.; - EulerImplicitSolver: 1 created with alias ""EulerImplicit""; - RegularGridTopology: 1 created with alias ""RegularGrid""; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [ERROR] [MeshGmshLoader(export_filename)] File: 'C:/Users/jducr/Documents/Developpement/Sofa_ws/scenes/exports/membran",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2451:4786,plugin,plugins,4786,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2451,2,['plugin'],['plugins']
Modifiability,-----; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/SofaPython3/build_release/install/lib/libSofaPython3.so; [INFO] [runSofa] Loading automatically plugin list in /home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSimpleFem/lib/libSofaSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaRigid/lib/libSofaRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaDeformable/lib/libSofaDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaObjectInteraction/lib/libSofaObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMeshCollision/lib/libSofaMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaEngine/lib/libSofaEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExplicitOdeSolver/lib/libSofaExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaImplicitOdeSolver/lib/libSofaImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaLoader/lib/libSofaLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralVisual/lib/libSofaGeneralVisual.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/So,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:3466,Plugin,PluginManager,3466,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"-4.13.2; QT: 5.12.0. ```; INFO] [runSofa] PluginRepository paths = C:/open_prj/sofa/build/mmaster/plugins;C:/open_prj/sofa/build/mmaster/bin/Release; [INFO] [runSofa] DataRepository paths = C:/open_prj/sofa/src/share;C:/open_prj/sofa/src/examples; [INFO] [runSofa] GuiDataRepository paths = C:/open_prj/sofa/src/applications/projects/runSofa/resources;C:/open_prj/sofa/src/applications/sofa/gui/qt/resources; [INFO] [runSofa] Loading automatically plugin list in C:\open_prj\sofa\build\mmaster\applications\projects\runSofa/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaDenseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaNonUniformFem.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/CImgPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaMiscCollision.dll; [ERROR] [PluginManager] Plugin loading failed (C:/open_prj/sofa/build/mmaster/bin/Release/CGALPlugin.dll): The specified module could not be found. Warning: Setting a new default format with a different version or profile after the global shared context is created may cause issues with context sharing.; The constructor with a QGLFormat is deprecated, use the regular contructor instead. [INFO] [SceneCheckerVisitor] Validating node """,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402:1544,Plugin,PluginManager,1544,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"-> Sofa.Core.Node:. plugin_list = [; ""Sofa.Component.Collision.Detection.Algorithm"", # [BVHNarrowPhase, BruteForceBroadPhase, DefaultPipeline]; ""Sofa.Component.Collision.Detection.Intersection"", # [NewProximityIntersection]; ""Sofa.Component.Collision.Geometry"", # [SphereCollisionModel]; ""Sofa.Component.Collision.Response.Contact"", # [DefaultContactManager]; ""Sofa.Component.Constraint.Projective"", # [FixedConstraint]; ""Sofa.Component.LinearSolver.Iterative"", # [CGLinearSolver]; ""Sofa.Component.Mass"", # [UniformMass]; ""Sofa.Component.ODESolver.Backward"", # [EulerImplicitSolver]; ""Sofa.Component.SolidMechanics.Spring"", # [StiffSpringForceField]; ""Sofa.Component.Topology.Container.Dynamic"", # [EdgeSetTopologyContainer, EdgeSetTopologyModifier]; ""Sofa.Component.Visual"", # [VisualStyle]; ""SofaCarving"", # [CarvingManager]; ""Sofa.Component.StateContainer"", # [MechanicalObject; ]. plugin_node = root_node.addChild(""Plugins""). for plugin in plugin_list:; plugin_node.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root_node.addObject(""DefaultAnimationLoop""); root_node.addObject(""DefaultVisualManagerLoop""); root_node.addObject(; ""VisualStyle"",; displayFlags=[""showVisual"", ""showForceFields"", ""showCollisionModels"", ""showBehaviorModels"", ""showInteractionForceFields""],; ). root_node.addObject(""DefaultPipeline""); root_node.addObject(""BruteForceBroadPhase""); root_node.addObject(""BVHNarrowPhase""); root_node.addObject(""DefaultContactManager"", response=""PenalityContactForceField""). root_node.addObject(; ""NewProximityIntersection"",; alarmDistance=3.0,; contactDistance=0.5,; ). root_node.gravity = [0.0, -918, 0.0]. scene_node = root_node.addChild(""scene""); #############; # Cutting Sphere; #############; cutting_sphere_node = scene_node.addChild(""cutting_sphere""); cutting_sphere_node.addObject(""CGLinearSolver""); cutting_sphere_node.addObject(""EulerImplicitSolver""); cutting_sphere_node.addObject(""PointSetTopologyContainer""); cutting_sphere_node.addObject(""MechanicalObject"", temp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1224323251:1144,plugin,pluginName,1144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1224323251,3,['plugin'],"['plugin', 'pluginName']"
Modifiability,-CD3B-39C5-9B98-9DAF891408CC> /Applications/runSofa.app/Contents/MacOS/lib/libSofaGuiMain.20.12.01.dylib; 0x107979000 - 0x1079dcfff +libSofaValidation.20.12.01.dylib (0) <13078F67-B4BC-3C97-88E0-027C5FE362EE> /Applications/runSofa.app/Contents/MacOS/plugins/SofaValidation/lib/libSofaValidation.20.12.01.dylib; 0x107a7e000 - 0x107bf1fff +libSofaGuiQt.20.12.01.dylib (0) <FDAD8B23-63EB-36B8-8FA5-4A4BE5727F8F> /Applications/runSofa.app/Contents/MacOS/lib/libSofaGuiQt.20.12.01.dylib; 0x107ead000 - 0x107eccfff +libSofaGuiCommon.20.12.01.dylib (0) <79318879-EFF8-36D2-8F09-F3AB9C184736> /Applications/runSofa.app/Contents/MacOS/lib/libSofaGuiCommon.20.12.01.dylib; 0x107ef7000 - 0x107efefff +libSofaBase.20.12.01.dylib (0) <1205B822-EBCE-3080-A504-279C805EA8D8> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBase.20.12.01.dylib; 0x107f08000 - 0x107f67fff +libSofaUserInteraction.20.12.01.dylib (0) <BE44029E-7778-3A49-88DE-C2B749FC8B02> /Applications/runSofa.app/Contents/MacOS/plugins/SofaUserInteraction/lib/libSofaUserInteraction.20.12.01.dylib; 0x108050000 - 0x10807bfff +libSofaGraphComponent.20.12.01.dylib (0) <E287C3F6-BA9B-3659-A9EB-38E2A3A80B8A> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGraphComponent/lib/libSofaGraphComponent.20.12.01.dylib; 0x1080d7000 - 0x1080f2fff +libSofaBaseUtils.20.12.01.dylib (0) <581FCEED-99DD-3642-AC19-1EFB56334375> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseUtils.20.12.01.dylib; 0x108130000 - 0x108167fff +libSofaGeneralMeshCollision.20.12.01.dylib (0) <BFA69B16-EFE2-3F2D-843D-38EA209DB60B> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralMeshCollision/lib/libSofaGeneralMeshCollision.20.12.01.dylib; 0x1081d4000 - 0x1081f7fff +libSofaGeneralVisual.20.12.01.dylib (0) <2801711D-11F2-342D-9659-A6760DB8B489> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralVisual/lib/libSofaGeneralVisual.20.12.01.dylib; 0x108235000 - 0x1082a8fff +libSofaTopologyMapping.20.12.01.dylib (0) <25291751-E35F-3A44-B167-CB54D1C,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:2836,plugin,plugins,2836,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['plugin'],['plugins']
Modifiability,"-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/CwiseBinaryOp.h:78:10: note: in instantiation of template class 'Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::SparseMatrix<double, 1, int>, const Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2>, Eigen::Sparse>' requested here; public CwiseBinaryOpImpl<; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:669:32: note: in instantiation of template class 'Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::SparseMatrix<double, 1, int>, const Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; return derived() = derived() + other.derived();; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyHelper.h:53:14: note: in instantiation of function template specialization 'Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 1, int> >::operator+=<Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; lval += rval;; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:536:27: note: in instantiation of function template specialization 'sofa::add<Eigen::SparseMatrix<double, 1, int>, Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; if( !empty(Jp0) ) add( it->J, shift_left<rmat>( 0, it->ff->getMechModel1()->getMatrixSize(), it->H.rows() ) * Jp0 );; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/util/XprHelper.h:539:66: note: partial specialization matches [with LhsKind = Eigen::Sparse, ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:4615,plugin,plugins,4615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499,1,['plugin'],['plugins']
Modifiability,"-isystem /usr/local/include -I../SofaKernel/SofaBase/../modules -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.; I don't know this plugin enough... ______________________________________________________. Suggeste",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316:1340,plugin,plugins,1340,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316,1,['plugin'],['plugins']
Modifiability,"-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Batch.so; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Qt.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SceneCreator/lib/libSceneCreator.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/ArticulatedSystemPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:14:09.408: Failed to load module ""canberra-gtk-module""; Gtk-Message: 22:14:09.409: Failed to load module ""canberra-gtk-module""; [INFO] [SofaPluginManager] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:11472,Plugin,PluginManager,11472,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,-sofa-24.06.00/share/sofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/examples; [INFO] [runSofa] GuiDataRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/runSofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/qt; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:1512,Plugin,PluginManager,1512,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,". Default properties for targets calling sofa_generate_package or sofa_install_targets; - include_directories:; - BUILD_INTERFACE: the directory given in INCLUDE_SOURCE_DIR or ""${CMAKE_CURRENT_SOURCE_DIR}/.."" (bad but necessary for old modules); - BUILD_INTERFACE: ""${CMAKE_BINARY_DIR}/include/${PROJECT_NAME}""; - INSTALL_INTERFACE: ""install"" (if relocatable plugin) or ""install/${PROJECT_NAME}""; - DEBUG_POSTFIX: ""_d""; - VERSION: Sofa_VERSION. ------------------------. Cleaning of config.h mechanism (consistency with all other SOFA modules); - deprecate headers not following the ""config.h"" naming convention; - sofa/core/core.h -> sofa/core/config.h; - sofa/defaulttype/defaulttype.h -> sofa/defaulttype/config.h; - sofa/helper/helper.h -> sofa/helper/config.h; - sofa/simulation/simulationcore.h -> sofa/simulation/config.h; - SofaSimulationCommon/common.h -> SofaSimulationCommon/config.h; - SofaSimulationGraph/graph.h -> SofaSimulationGraph/config.h; - SofaSimulationTree/tree.h -> SofaSimulationTree/config.h; - sofa/gui/SofaGUI.h -> sofa/gui/config.h; - sofa/gui/qt/SofaGuiQt.h -> sofa/gui/qt/config.h; - centralize config.h call chain on sofa/config.h; - sofa/helper/system/config.h is now useless; -> WARNING: maybe not a good idea, review needed here; - dispatch all SOFA_BUILD_* macros from packages' config.h towards modules' config.h (good for future modularizations). ------------------------. Moving SofaGui modules into ""modules"" directory + cleaning their source trees. ------------------------. Every package is now also a library. Work started by @fredroy in #1314, 3 packages remained; - SofaFramework; - SofaGui; - SofaSimulation. ------------------------. Cleaning source trees to eliminate some "".."" include directories; (files move but includes stay the same); - SofaExporter; - SofaGuiCommon; - SofaGuiQt; - SofaHeadlessRecorder; - SofaMiscCollision. ------------------------. Fix #1395 by removing ""relocatable"" attribute from SofaNonUniformFem, SofaValidation, SofaDenseS",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1397:1125,config,config,1125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397,1,['config'],['config']
Modifiability,"... and DualQuat. ## Description:; Move all Quaternion-related classes (and DualQuat) to the new Sofa.Type module.; Like #1734 There is a compatibility layer for transition, so it should be as least breaking as possible.; Remove helper::Quater/defaulttype::Quat thingy, really confusing (name ""Quater"" does not make any sense). - sofa::helper::Quater<T> becomes sofa::type::Quat<T>; - sofa::defaulttype::Quat (typedef) becomes ... ?; - sofa::helper::DualQuat becomes sofa::type::DualQuat. ## Breaking; - Remove a constructor with RigidType for DualQuat.; As DualQuat is only used in Flexible, not a big deal.... ## Talking; - Previous point: DualQuat is only used in Flexible, should it be simply moved there ?; - fact that Quat is now a template (was a typedef without template before) could be confusing ?. ## Note; Forgot wrapping redirection from MatSym, the fact that there was no error before means that it is not used at all... Mandatory to mention: #1521. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1790:583,Flexible,Flexible,583,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1790,2,['Flexible'],['Flexible']
Modifiability,"... before putting it out on an external repo. - Update file structure; - Refresh cmake; - fix dependencies; - fix bullet dep; - compilation; - full xml examples (seems) to work. I did not really clean the code itself, I dont know if this plugin is viable or not. Some files depends on removed plugins (LMConstraints and Compliant) so it has not been tested. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3800:239,plugin,plugin,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3800,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"... by making optional SofaValidation (as its remaining components are deprecated). The ifdef is a bit ugly but some refactoring are needed to add futures features like this (instead of adding getXXX and getNbXXX for each type of component in the API). Some cleanups for the cmake file itself (more up-to-date Sofa cmake syntax) and the dependencies. small user experience question:; - Should Sofa.component be forcefully linked with it? so the user knows that all components are available from the start; - or should the actual dependencies be managed by the user afterwards in its application?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3091:117,refactor,refactoring,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3091,1,['refactor'],['refactoring']
Modifiability,"... with the current standard set of modules/plugins.; ## About; Since MSVC2019, VS proposes the choice to use the clang-cl toolchain (clang with msvc tools). Not possible to enable it with the latest(?) cmake-gui but possible to generate a solution with the commandline version: `cmake -G""Visual Studio 2019"" -T ClangCL ..`; ## This PR; - add necessary cmake config to allow compilation (and avoid 1e999 warnings); - fix few problems detected with clang (rightly so); - change the FixParticlePerformerFactory shenanigan to be cleaner. ## Results; It appears that clang is somewhat more clever than cl.exe and seems to produces more optimized binaries.; Results are not always good, and really depends on the situation/scene. Few cases where cl is slightly faster than clang-cl; Some bench:; - `caduceus.scn -g batch -n 10000`; - cl: `21.2541 s ( 470.498 FPS)`; - clang-cl: `19.6914 s ( 507.836 FPS)`; - MeshMatrixMass.scn with 4096 steps (from SofaBenchmark); - cl: `25504 ms`; - clang-cl: `18161 ms`; - `examples/Benchmark/Performance/benchmark_cubes.scn -g batch -n 1000`; - cl: `36.7404 s ( 27.218 FPS`; - clang-cl: ` 37.8146 s ( 26.4448 FPS)`; - `examples/Benchmark/Performance/TorusFall.scn -g batch -n 1000`; - cl: `8.63699 s ( 115.781 FPS)`; - clang-cl: ` 7.72771 s ( 129.404 FPS)`; - `applications/plugins/SofaCUDA/examples/beam16x16x76-fem-implicit-CPU.scn -g batch -n 1000`; - cl: ` 113.022 s ( 8.8478 FPS))`; - clang-cl: ` 100.645 s ( 9.93587 FPS)`; - SofaBenchmark, a lot shows only improvement around 10-15% but some are interesting:; - `BM_FixedArray_construct<sofa::type::Vec3f>/8192`; - cl: ` 10.5 us`; - clang-cl: ` 6.42 us`; - `BM_Matrix_typemat3x3f_assign/512` this one is weird (the same bench with eigenmat is much closer); - cl: ` 3.44 us`; - clang-cl: ` 1.18 us`. ## Warning; pybind is not compatible with clang-cl (and I am sure a lot of other libraries), even gtest as it is was not compatible. ______________________________________________________. By submitting this pull ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2563:45,plugin,plugins,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2563,2,"['config', 'plugin']","['config', 'plugins']"
Modifiability,.... with Qt and Win system's dlls. (for each config); Obviously those dlls should in the bin/ directory directly (OR find a way to manage different config for installation but not the point for now). A picture is worth a thousand words:; ![issue1](https://user-images.githubusercontent.com/11028016/134341229-d0223102-7493-475d-bfa6-3977170d7f0f.png). Then in RelWithDebInfo for example:; ![issue2](https://user-images.githubusercontent.com/11028016/134341269-6d662b30-9468-4dbc-8351-1b711276be3d.PNG),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2355:46,config,config,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2355,2,['config'],['config']
Modifiability,"..`; ## This PR; - add necessary cmake config to allow compilation (and avoid 1e999 warnings); - fix few problems detected with clang (rightly so); - change the FixParticlePerformerFactory shenanigan to be cleaner. ## Results; It appears that clang is somewhat more clever than cl.exe and seems to produces more optimized binaries.; Results are not always good, and really depends on the situation/scene. Few cases where cl is slightly faster than clang-cl; Some bench:; - `caduceus.scn -g batch -n 10000`; - cl: `21.2541 s ( 470.498 FPS)`; - clang-cl: `19.6914 s ( 507.836 FPS)`; - MeshMatrixMass.scn with 4096 steps (from SofaBenchmark); - cl: `25504 ms`; - clang-cl: `18161 ms`; - `examples/Benchmark/Performance/benchmark_cubes.scn -g batch -n 1000`; - cl: `36.7404 s ( 27.218 FPS`; - clang-cl: ` 37.8146 s ( 26.4448 FPS)`; - `examples/Benchmark/Performance/TorusFall.scn -g batch -n 1000`; - cl: `8.63699 s ( 115.781 FPS)`; - clang-cl: ` 7.72771 s ( 129.404 FPS)`; - `applications/plugins/SofaCUDA/examples/beam16x16x76-fem-implicit-CPU.scn -g batch -n 1000`; - cl: ` 113.022 s ( 8.8478 FPS))`; - clang-cl: ` 100.645 s ( 9.93587 FPS)`; - SofaBenchmark, a lot shows only improvement around 10-15% but some are interesting:; - `BM_FixedArray_construct<sofa::type::Vec3f>/8192`; - cl: ` 10.5 us`; - clang-cl: ` 6.42 us`; - `BM_Matrix_typemat3x3f_assign/512` this one is weird (the same bench with eigenmat is much closer); - cl: ` 3.44 us`; - clang-cl: ` 1.18 us`. ## Warning; pybind is not compatible with clang-cl (and I am sure a lot of other libraries), even gtest as it is was not compatible. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2563:1307,plugin,plugins,1307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2563,1,['plugin'],['plugins']
Modifiability,".06.00 binaries"". **Command called**. ```txt; python3 /home/sofa/SOFA_v23.06.00/bin/lapgym/sofa_env/sofa_env/scenes/reach/reach_env.py. ```. **Env vars**. ```bash; #################; --- sys.version ---; 3.8.10 (default, Jul 29 2024, 17:02:10) ; [GCC 9.4.0]; --- PATH ---; /home/sofa/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin; --- SOFA_ROOT ---; /home/sofa/SOFA_v23.06.00/bin/.runSofa; --- PYTHONPATH ---; /home/sofa/SOFA_v23.06.00/plugins/SofaPython3/lib/python3/site-packages; --- sys.path ---; ['', '/home/sofa/SOFA_v23.06.00/plugins/SofaPython3/lib/python3/site-packages', '/usr/lib/python38.zip', '/usr/lib/python3.8', '/usr/lib/python3.8/lib-dynload', '/home/sofa/.local/lib/python3.8/site-packages', '/home/sofa/SOFA_v23.06.00/bin/lapgym/sofa_env', '/usr/local/lib/python3.8/dist-packages', '/usr/lib/python3/dist-packages']; #################. ```. Result logs :. `[ERROR] [RequiredPlugin(Sofa.Component.AnimationLoop)] Plugin not found: ""Sofa.Component.AnimationLoop"". Failed to load: [""Sofa.Component.AnimationLoop""]; [ERROR] [RequiredPlugin(Sofa.Component.Mapping.Linear)] Plugin not found: ""Sofa.Component.Mapping.Linear"". Failed to load: [""Sofa.Component.Mapping.Linear""]; [ERROR] [RequiredPlugin(Sofa.Component.ODESolver.Forward)] Plugin not found: ""Sofa.Component.ODESolver.Forward"". Failed to load: [""Sofa.Component.ODESolver.Forward""]; [ERROR] [RequiredPlugin(SofaPython3)] Plugin not found: ""SofaPython3"". Failed to load: [""SofaPython3""]; [ERROR] [RequiredPlugin(Sofa.Component.Mapping.NonLinear)] Plugin not found: ""Sofa.Component.Mapping.NonLinear"". Failed to load: [""Sofa.Component.Mapping.NonLinear""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Model)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Model"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Model""]; [ERROR] [RequiredPlugin(Sofa.Component.Engine.Select)] Plugin not found: ""Sofa.Component.Engine.Select"". Failed",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4905:1903,Plugin,Plugin,1903,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4905,1,['Plugin'],['Plugin']
Modifiability,".06.00/plugins/SofaPython3/lib/python3/site-packages', '/usr/lib/python38.zip', '/usr/lib/python3.8', '/usr/lib/python3.8/lib-dynload', '/home/sofa/.local/lib/python3.8/site-packages', '/home/sofa/SOFA_v23.06.00/bin/lapgym/sofa_env', '/usr/local/lib/python3.8/dist-packages', '/usr/lib/python3/dist-packages']; #################. ```. Result logs :. `[ERROR] [RequiredPlugin(Sofa.Component.AnimationLoop)] Plugin not found: ""Sofa.Component.AnimationLoop"". Failed to load: [""Sofa.Component.AnimationLoop""]; [ERROR] [RequiredPlugin(Sofa.Component.Mapping.Linear)] Plugin not found: ""Sofa.Component.Mapping.Linear"". Failed to load: [""Sofa.Component.Mapping.Linear""]; [ERROR] [RequiredPlugin(Sofa.Component.ODESolver.Forward)] Plugin not found: ""Sofa.Component.ODESolver.Forward"". Failed to load: [""Sofa.Component.ODESolver.Forward""]; [ERROR] [RequiredPlugin(SofaPython3)] Plugin not found: ""SofaPython3"". Failed to load: [""SofaPython3""]; [ERROR] [RequiredPlugin(Sofa.Component.Mapping.NonLinear)] Plugin not found: ""Sofa.Component.Mapping.NonLinear"". Failed to load: [""Sofa.Component.Mapping.NonLinear""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Model)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Model"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Model""]; [ERROR] [RequiredPlugin(Sofa.Component.Engine.Select)] Plugin not found: ""Sofa.Component.Engine.Select"". Failed to load: [""Sofa.Component.Engine.Select""]; [ERROR] [RequiredPlugin(Sofa.Component.StateContainer)] Plugin not found: ""Sofa.Component.StateContainer"". Failed to load: [""Sofa.Component.StateContainer""]; [ERROR] [RequiredPlugin(Sofa.Component.Mass)] Plugin not found: ""Sofa.Component.Mass"". Failed to load: [""Sofa.Component.Mass""]; [ERROR] [RequiredPlugin(Sofa.Component.SceneUtility)] Plugin not found: ""Sofa.Component.SceneUtility"". Failed to load: [""Sofa.Component.SceneUtility""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Projective)] Plugin not found: ""Sofa.Component.Constraint.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4905:2491,Plugin,Plugin,2491,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4905,1,['Plugin'],['Plugin']
Modifiability,.Collision.Response.Mapper.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.Contact.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Setting.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Controller.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Analyze.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Generate.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Select.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Transform.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Haptics.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Rendering2D.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Rendering3D.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Engine.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Shader.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:7640,Plugin,PluginManager,7640,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,.Collision.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Setting.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Transform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Haptics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering2D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering3D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Shader.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [I,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:9644,Plugin,PluginManager,9644,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Transform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Haptics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering2D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering3D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Shader.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Batch.so; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:9896,Plugin,PluginManager,9896,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,".Component.LinearSolver.Iterative)] Plugin not found: ""Sofa.Component.LinearSolver.Iterative"". Failed to load: [""Sofa.Component.LinearSolver.Iterative""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Response.Contact)] Plugin not found: ""Sofa.Component.Collision.Response.Contact"". Failed to load: [""Sofa.Component.Collision.Response.Contact""]; [ERROR] [RequiredPlugin(Sofa.GL.Component.Rendering3D)] Plugin not found: ""Sofa.GL.Component.Rendering3D"". Failed to load: [""Sofa.GL.Component.Rendering3D""]; [ERROR] [RequiredPlugin(Sofa.GL.Component.Shader)] Plugin not found: ""Sofa.GL.Component.Shader"". Failed to load: [""Sofa.GL.Component.Shader""]; [ERROR] [RequiredPlugin(Sofa.Component.IO.Mesh)] Plugin not found: ""Sofa.Component.IO.Mesh"". Failed to load: [""Sofa.Component.IO.Mesh""]; [ERROR] [RequiredPlugin(Sofa.Component.Setting)] Plugin not found: ""Sofa.Component.Setting"". Failed to load: [""Sofa.Component.Setting""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Solver)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Solver"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Solver""]; [ERROR] [RequiredPlugin(Sofa.Component.ODESolver.Backward)] Plugin not found: ""Sofa.Component.ODESolver.Backward"". Failed to load: [""Sofa.Component.ODESolver.Backward""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Correction)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Correction"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Correction""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Geometry)] Plugin not found: ""Sofa.Component.Collision.Geometry"". Failed to load: [""Sofa.Component.Collision.Geometry""]; [ERROR] [SofaRuntime] ValueError: Object type BackgroundSetting<> was not created; The object is not in the factory.; This component has been MOVED from SofaBaseVisual to Sofa.Component.UserInterface.ConfigurationSetting since SOFA v22.06.; To continue using this component you may need to update your scene by adding. Traceba",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:4896,Plugin,Plugin,4896,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,2,['Plugin'],['Plugin']
Modifiability,".Component.Shader.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GUI.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSceneCreator.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libArticulatedSystemPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofaMatrix.dylib; [INFO] [PluginManager] 68 plugins have been loaded from /Users/hemingshan/Code/sofa/build/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [INFO] [SofaPluginManager] Loading automatically plugin list in /Users/hemingshan/Code/sofa/build/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /Users/hemingshan/Code/sofa/build/config/loadedPlugins.ini. ########## SIG 11 - SIGSEGV: segfault ##########; [1] 21189 segmentation fault ./runSofa; `. ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. < COPY-PASTE HERE THE RESULT OF THE COMMAND ABOVE >. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. < COPY-PASTE YOUR OUTPUT HERE >. ```; <img width=""686"" alt=""截屏2022-10-25 下午11 56 58"" src=""https://user-images.githubusercontent.com/56861752/197808646-732fe9ee-f7db-",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:9453,Plugin,PluginManager,9453,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,3,"['Plugin', 'config', 'plugin']","['PluginManager', 'config', 'plugins']"
Modifiability,".Engine.Transform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Haptics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering2D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering3D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Shader.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Batch.dll; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Qt.dll; [DEPRECATED] [SofaValidation] SofaValidation is deprecated. It will be removed at v23.06. For CompareState and CompareTopology, use Sofa.Component.Playback instead.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SceneCreator.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gf",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:10099,Plugin,PluginManager,10099,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,".Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Shader.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Batch.so; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Qt.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SceneCreator/lib/libSceneCreator.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/ArticulatedSystemPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:1",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:11252,plugin,plugins,11252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['plugin'],['plugins']
Modifiability,.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1h,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:2596,Plugin,PluginManager,2596,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,".com/sofa-framework/sofa/commit/54f49d039aadaffd57a1d7f8ebab3af82e407674); I see no reason not to do that. Dependencies to DiffusionSolver are simpler this way. ### [[CImgPlugin] CLEAN include directory](https://github.com/sofa-framework/sofa/commit/1a617d5350f74ac4a816255960d92638a26cba1b); Sources moved to `src`. No more `../` horror in CImgPlugin include directories. ## Other changes. - [SofaHelper] FIX DynamicLibrary altered search path (Windows only) ; Needed to prefer `bin` libraries over neighboor libraries; - [SofaFramework] FIX typo in config.h.in; - [runSofa] Check if plugins dir exists before adding to PluginRepository; - [SofaTest] FIX SofaPython finding in *Config.cmake.in; - [plugins] ADD missing *Config.cmake.in files; Needed to use them as real plugins; - [All] Improve sofa_copy_libraries and sofa_install_libraries macros; Make them easier to use; - [CMake] Rename sofa_set_python_directory into sofa_install_pythonscripts; Clearer name in my opinion + using CMake multiValueArgs; - [CMake] Update package.cmake to enable plugins; Prepare package.cmake to produce binaries with all plugins from ""options"" configuration.; - [SofaImplicitField] FIX tests enabling; - [CMake] CLEAN package.cmake; - [SofaSimulationCore] Handle reload differently in SceneLoader::Listener; Needed to disable scene checks on reload.; - [SofaGraphComponent] Disable scene checks on reload; Needed by live editor (which reloads the scene every time the file is changed).; - [plugins] Remove commented lines in CMakeFiles. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1018:4372,plugin,plugins,4372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1018,4,"['config', 'plugin']","['configuration', 'plugins']"
Modifiability,.dylib; 0x108235000 - 0x1082a8fff +libSofaTopologyMapping.20.12.01.dylib (0) <25291751-E35F-3A44-B167-CB54D1C86B40> /Applications/runSofa.app/Contents/MacOS/plugins/SofaTopologyMapping/lib/libSofaTopologyMapping.20.12.01.dylib; 0x10834c000 - 0x1083dbfff +libSofaGeneralSimpleFem.20.12.01.dylib (0) <4787B69F-1093-3E5B-8414-BE5EA23432F5> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.20.12.01.dylib; 0x108544000 - 0x10859ffff +libSofaSimpleFem.20.12.01.dylib (0) <39F60B90-A0EE-3992-9391-A0CF20CB95DE> /Applications/runSofa.app/Contents/MacOS/plugins/SofaSimpleFem/lib/libSofaSimpleFem.20.12.01.dylib; 0x10862d000 - 0x10868cfff +libSofaBaseVisual.20.12.01.dylib (0) <3FF1BCE6-2796-3533-B23D-8440A29E1F9E> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseVisual.20.12.01.dylib; 0x10873d000 - 0x10879cfff +libSofaMiscForceField.20.12.01.dylib (0) <DFAD70EA-9BF9-3F8F-9767-866C72E011B4> /Applications/runSofa.app/Contents/MacOS/plugins/SofaMiscForceField/lib/libSofaMiscForceField.20.12.01.dylib; 0x108863000 - 0x108b0efff +libSofaBoundaryCondition.20.12.01.dylib (0) <D5451810-3AED-3A0F-8AE8-3D042D7B6DA2> /Applications/runSofa.app/Contents/MacOS/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.20.12.01.dylib; 0x1090ef000 - 0x109112fff +libSofaMiscTopology.20.12.01.dylib (0) <8E135C36-4169-3687-92F7-BFD9FA319BA4> /Applications/runSofa.app/Contents/MacOS/plugins/SofaMiscTopology/lib/libSofaMiscTopology.20.12.01.dylib; 0x109144000 - 0x10916ffff +libSofaGeneralTopology.20.12.01.dylib (0) <DD8C86BC-EB7F-36EA-B833-B26EA0032E54> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.20.12.01.dylib; 0x1091d7000 - 0x1092adfff +org.qt-project.QtCharts (5.12 - 5.12.6) <01C0EF28-7969-3700-8E90-CE4CC9C4CBA5> /Applications/runSofa.app/Contents/Frameworks/QtCharts.framework/Versions/5/QtCharts; 0x109358000 - 0x109384fff +org.qt-project.QtWebEngine (5.12 - 5.12.6) <AD3B4770-81C6-3308-8F28-3DAB,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:4728,plugin,plugins,4728,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['plugin'],['plugins']
Modifiability,.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2221,plugin,plugin,2221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,1,['plugin'],['plugin']
Modifiability,.llvm.org/extra/clang-tidy/checks/google-default-arguments.html) | [readability-identifier-naming](https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html) |; | [google-explicit-constructor](https://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html) | [readability-implicit-bool-conversion](https://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html) |; | [google-global-names-in-headers](https://clang.llvm.org/extra/clang-tidy/checks/google-global-names-in-headers.html) | [readability-inconsistent-declaration-parameter-name](https://clang.llvm.org/extra/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html) |; | [google-objc-avoid-throwing-exception](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-throwing-exception.html) | [readability-misleading-indentation](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-r,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:27352,variab,variable-declaration,27352,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['variab'],['variable-declaration']
Modifiability,.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-s,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:2745,Plugin,PluginManager,2745,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453:1417,plugin,plugin,1417,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453,3,"['Plugin', 'plugin', 'refactor']","['Pluginizing', 'plugin', 'refactoring']"
Modifiability,/ERROR] H� Win32 �(nager] Plugin loading failed (D:/SOFA/v23.06.00/bin/SofaPython3.dll): %1 �,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4913:26,Plugin,Plugin,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4913,2,['Plugin'],['Plugin']
Modifiability,/LMConstraintDirectSolver.cpp.o; 6259 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/PickHandlerCallBacks.cpp.o; 6060 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/TableDataWidget.cpp.o; 5918 ms: clangbuild//SofaGui/SofaGuiMain/CMakeFiles/SofaGuiMain.dir/src/sofa/gui/Main.cpp.o; 5803 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/moc_RealGUI.cpp.o; 5767 ms: clangbuild//applications/plugins/SofaTest/CMakeFiles/SofaTest.dir/Elasticity_test_deprecated.cpp.o; 5757 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/viewer/qgl/QtGLViewer.cpp.o; 5735 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/viewer/SofaViewer.cpp.o; 5640 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/panels/QDocBrowser.cpp.o; 5611 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/QSofaListView.cpp.o; 5585 ms: clangbuild//applications/plugins/SofaTest/CMakeFiles/SofaTest.dir/Elasticity_test.cpp.o; 5398 ms: clangbuild//SofaKernel/SofaBase/SofaBaseMechanics/CMakeFiles/SofaBaseMechanics.dir/MechanicalObject.cpp.o; 5301 ms: clangbuild//SofaKernel/SofaCommon/SofaRigid/SofaRigid_test/CMakeFiles/SofaRigid_test.dir/RigidMapping_test.cpp.o; 5242 ms: clangbuild//SofaKernel/SofaBase/SofaEigen2Solver/CMakeFiles/SofaEigen2Solver.dir/SVDLinearSolver.cpp.o; 5236 ms: clangbuild//SofaKernel/SofaCommon/SofaRigid/SofaRigid_test/CMakeFiles/SofaRigid_test.dir/RigidRigidMapping_test.cpp.o; 5225 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/AddObject.cpp.o; 5214 ms: clangbuild//SofaMisc/SofaMiscMapping/SofaMiscMapping_test/CMakeFiles/SofaMiscMapping_test.dir/DistanceMapping_test.cpp.o; 5191 ms: clangbuild//SofaKernel/SofaFramework/SofaSimulationCore/CMakeFiles/SofaSimulationCore.dir/src/sofa/simulation/Node.cpp.o; 5162 ms: clangbuild//SofaMisc/SofaMiscMapping/CMakeFiles/SofaMiscMapping.dir/DistanceMapping.cpp.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:1644,plugin,plugins,1644,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['plugin'],['plugins']
Modifiability,"/SofaKernel/modules/SofaHelper/src/sofa/helper/system/PipeProcess.cpp line 202; Code:; for(int i=0;; ++i); {; GetExitCodeProcess(piProcInfo.hProcess,&exit); //while the process is running; if (exit != STILL_ACTIVE); break;. bool busy = false;; for (int i=0; i<2; ++i) // <- shadow variable; {",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2431:281,variab,variable,281,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2431,1,['variab'],['variable']
Modifiability,/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Forward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Playback.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SceneUtility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Constant.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Dynamic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Grid.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:1674,Plugin,PluginManager,1674,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.Elastic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.TensorMass.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.StateContainer.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Model.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Correction.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Solver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Projective.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.AnimationLoop.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.MechanicalLoad.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Geometry.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:5226,Plugin,PluginManager,5226,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"/applications/plugins/Xitact/ITPDriver.h: line 109 vs ITPDriver.cpp: line 89. code:. , operation(true) // should be below; , contactReached(false)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2023:14,plugin,plugins,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2023,1,['plugin'],['plugins']
Modifiability,"/applications/plugins/image/ImageTypes.h: line 303 ; Uninitialized variable: ind . code :. unsigned int ind; // seems uninit; for(unsigned int i=0; i<tposition.size(); i++); {; tposition[i]=transform->toImage(Coord((Real)verts[ind][0],(Real)verts[ind] [1],(Real)verts[ind][2]));; }. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1133:14,plugin,plugins,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133,2,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,"/applications/plugins/image/imagetoolbox/depth/depthimagetoolbox.h line 81; Code:; Layer():layer1(-1),layer2(-1),base(-1),typeOffset1(Distance),typeOffset2(Distance),offset1(0),offset2(0){} // <- nbslice not initialized",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2496:14,plugin,plugins,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2496,1,['plugin'],['plugins']
Modifiability,"/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')); > >>> ; > ```; > ; > **Env vars**; > ; > ```shell; > python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; > ```; > ; > ```; > --- sys.version ---; > 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ]; > --- PATH ---; > /usr/local/opt/python@3.8/bin/:/opt/anaconda3/envs/sofarl/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.app",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:2548,plugin,plugins,2548,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,"/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/share/dotnet:~/.dotnet/tools; > --- SOFA_ROOT ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > --- PYTHONPATH ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages:/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages:/path/to/SofaPython3/lib/python3/site-packages:; > --- sys.path ---; > ['', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/path/to/SofaPython3/lib/python3/site-packages', '/opt/anaconda3/envs/sofarl/lib/python38.zip', '/opt/anaconda3/envs/sofarl/lib/python3.8', '/opt/anaconda3/envs/sofarl/lib/python3.8/lib-dynload', '/opt/anaconda3/envs/sofarl/lib/python3.8/site-packages']; > #################; > ```; > ; > ### Logs; > **Full output**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:4395,plugin,plugins,4395,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Model.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Correction.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Solver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Projective.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.AnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.MechanicalLoad.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Collision.Geometry.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Collision.Detection.Algorithm.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Collision.Detection.Intersection.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:6632,Plugin,PluginManager,6632,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaTopologyMapping/lib/libSofaTopologyMapping.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaUserInteraction/lib/libSofaUserInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaConstraint/lib/libSofaConstraint.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLoader/lib/libSofaGeneralLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExporter/lib/libSofaExporter.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSparseSolver/lib/libSofaSparseSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaPreconditioner/lib/libSofaPreconditioner.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaHaptics/lib/libSofaHaptics.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaValidation/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:6996,Plugin,PluginManager,6996,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"/envs/sofarl/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/share/dotnet:~/.dotnet/tools; --- SOFA_ROOT ---; /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; --- PYTHONPATH ---; /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages:/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages:/path/to/SofaPython3/lib/python3/site-packages:; --- sys.path ---; ['', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/path/to/SofaPython3/lib/python3/site-packages', '/opt/anaconda3/envs/sofarl/lib/python38.zip', '/opt/anaconda3/envs/sofarl/lib/python3.8', '/opt/anaconda3/envs/sofarl/lib/python3.8/lib-dynload', '/opt/anaconda3/envs/sofarl/lib/python3.8/site-packages']; #################. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import Sofa; ---------------------------------------; Checking SOFA_ROOT and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; ---------------------------------------; Traceback (most ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690:4318,plugin,plugins,4318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690,1,['plugin'],['plugins']
Modifiability,"/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralLinearSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralSimpleFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralTopology.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaTopologyMapping.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaUserInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaConstraint.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaDenseSolver.dll; [ERROR] [PluginManager] Plugin not found: ""SofaNonUniformFem""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscTopology.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscExtra.dll; [INFO] [PluginManager] Loaded plug",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:8297,Plugin,PluginManager,8297,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.TensorMass.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.StateContainer.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Model.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Correction.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Solver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Projective.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.AnimationLoop.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.MechanicalLoad.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Geometry.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.Algorithm.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/bui,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:5360,Plugin,PluginManager,5360,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/hemingshan/Code/sofa/src/applications/projects/runSofa/resources:/Users/hemingshan/Code/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources:/Users/hemingshan/Code/sofa/build; [INFO] [runSofa] Loading automatically plugin list in /Users/hemingshan/Code/sofa/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Forward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Backward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.Mesh.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Playback.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SceneUtility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Constant.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Dynamic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Grid.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Mapping.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Utility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/l,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:1862,Plugin,PluginManager,1862,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMeshCollision/lib/libSofaMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaEngine/lib/libSofaEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExplicitOdeSolver/lib/libSofaExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaImplicitOdeSolver/lib/libSofaImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaLoader/lib/libSofaLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralVisual/lib/libSofaGeneralVisual.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGraphComponent/lib/libSofaGraphComponent.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralMeshCollision/lib/libSofaGeneralMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralAnimationLoop/lib/libSofaGeneralAnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralDeformable/lib/libSofaGeneralDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralEngine/lib/libSofaGeneralEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_co,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:4426,Plugin,PluginManager,4426,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,/modules/SofaNonUniformFem/src/SofaNonUniformFem/SparseGridMultipleTopology.cpp line 260; shadow variable nameg also line 241,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1855:97,variab,variable,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1855,1,['variab'],['variable']
Modifiability,/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:3441,Plugin,PluginManager,3441,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/plugins/SofaGraphComponent/lib/libSofaGraphComponent.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralMeshCollision/lib/libSofaGeneralMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralAnimationLoop/lib/libSofaGeneralAnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralDeformable/lib/libSofaGeneralDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralEngine/lib/libSofaGeneralEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralExplicitOdeSolver/lib/libSofaGeneralExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralImplicitOdeSolver/lib/libSofaGeneralImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLinearSolver/lib/libSofaGeneralLinearSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [INFO] [PluginManager] Loaded plug,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:5444,Plugin,PluginManager,5444,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"/projects/sofa-build/install/include/SceneCreator/GetVectorVisitor.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/SceneCreator.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/SceneUtils.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/config.h; 1>-- Up-to-date: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorTargets.cmake; 1>-- Installing: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorTargets-release.cmake; 1>-- Up-to-date: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorConfigVersion.cmake; 1>-- Installing: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorConfig.cmake; 1>CMake Error at applications/plugins/CImgPlugin/cmake_install.cmake:38 (file):; 1> file cannot create directory:; 1> C:/projects/sofa-build/$C:/projects/sofa-build/install/plugins/CImgPlugin/bin.; 1> Maybe need administrative privileges.; 1>Call Stack (most recent call first):; 1> applications/plugins/cmake_install.cmake:37 (include); 1> cmake_install.cmake:88 (include); 1>; 1>; 1>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTargets\Microsoft.CppCommon.targets(133,5): error MSB3073: The command ""setlocal; 1>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTargets\Microsoft.CppCommon.targets(133,5): error MSB3073: ""C:\Program Files\CMake\bin\cmake.exe"" -DBUILD_TYPE=Release -P cmake_install.cmake; 1>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTargets\Microsoft.CppCommon.targets(133,5): error MSB3073: if %errorlevel% neq 0 goto :cmEnd; 1>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTargets\Microsoft.CppCommon.targets(133,5): error MSB3073: :cmEnd; 1>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTargets\Microsoft.CppCommon.targets(133,5): error MSB3073: endlocal & call :cmErrorLevel %errorlevel% & ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1117:2193,plugin,plugins,2193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1117,1,['plugin'],['plugins']
Modifiability,"/sofa-master/applications/plugins/image/imagetoolbox/labelpointsbysection/labelpointsbysectionimagetoolbox.h line 111; Code:; std::ostringstream values;. values << d_axis.getValue();; file << values.str() << ""\n"";. for(int i=0;i<size;i++); {. std::ostringstream values; // <-- shadow variable",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2432:26,plugin,plugins,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2432,2,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,"/sofa/build/bin/RelWithDebInfo/SofaGeneralImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralLinearSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralSimpleFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralTopology.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaTopologyMapping.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaUserInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaConstraint.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaDenseSolver.dll; [ERROR] [PluginManager] Plugin not found: ""SofaNonUniformFem""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscTopology.dll; [INFO] [PluginManager] Loaded pl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:8189,Plugin,PluginManager,8189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.StateContainer.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.Spring.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.Elastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Model.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Correction.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Solver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.dll; [INFO] [PluginManag,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:5599,Plugin,PluginManager,5599,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:3310,Plugin,PluginManager,3310,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/system/FileRepository.cpp.o] Error 1; make[2]: *** Waiting for unfinished jobs....; /bd_targaryen/users/kleelakunwet/sofa/src/Sofa/framework/Helper/src/sofa/helper/system/PluginManager.cpp:30:10: fatal error: filesystem: No such file or directory; #include <filesystem>; ^~~~~~~~~~~~; compilation terminated.; /bd_targaryen/users/kleelakunwet/sofa/src/Sofa/framework/Helper/src/sofa/helper/system/FileMonitor_linux.cpp:48:10: fatal error: filesystem: No such file or directory; #include <filesystem>; ^~~~~~~~~~~~; compilation terminated.; Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/build.make:1013: recipe for target 'Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/FileMonitor_linux.cpp.o' failed; make[2]: *** [Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/FileMonitor_linux.cpp.o] Error 1; Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/build.make:649: recipe for target 'Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/PluginManager.cpp.o' failed; make[2]: *** [Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/PluginManager.cpp.o] Error 1; /bd_targaryen/users/kleelakunwet/sofa/src/Sofa/framework/Helper/src/sofa/helper/system/FileSystem.cpp:26:10: fatal error: filesystem: No such file or directory; #include <filesystem>; ^~~~~~~~~~~~; compilation terminated.; Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/build.make:607: recipe for target 'Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/FileSystem.cpp.o' failed; make[2]: *** [Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/FileSystem.cpp.o] Error 1; CMakeFiles/Makefile2:3837: recipe for target 'Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/all' failed; make[1]: *** [Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/all] Error 2; Makefile:135: recipe for target 'all' failed; make: *** [all] Error 2. ```. **Content of build_dir/CMakeCache.txt**. [CMakeCache.txt](https://gith,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4527:4541,Plugin,PluginManager,4541,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4527,1,['Plugin'],['PluginManager']
Modifiability,/usr/local/Cellar/qt/6.0.2/lib/QtXml.framework/Versions/A/QtXml; 0x111ac8000 - 0x111ed3fff +org.qt-project.QtCore (6.0 - 6.0.2) <626D1C7B-2DDB-300D-B5DD-5FB170D3C5A0> /usr/local/Cellar/qt/6.0.2/lib/QtCore.framework/Versions/A/QtCore; 0x11202d000 - 0x1120d0fff +libSofaLoader.20.12.01.dylib (0) <DE5355F4-9BB5-3D22-8F91-9A1A725AA3C4> /Applications/runSofa.app/Contents/MacOS/plugins/SofaLoader/lib/libSofaLoader.20.12.01.dylib; 0x11226d000 - 0x11232cfff +libSofaMeshCollision.20.12.01.dylib (0) <F6C0C139-F230-35C9-8301-FAF420509104> /Applications/runSofa.app/Contents/MacOS/plugins/SofaMeshCollision/lib/libSofaMeshCollision.20.12.01.dylib; 0x112530000 - 0x1125abfff +libSofaBaseCollision.20.12.01.dylib (0) <95C00576-DD6A-322D-882E-161945B8AA44> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseCollision.20.12.01.dylib; 0x112691000 - 0x1126a4fff +libSofaObjectInteraction.20.12.01.dylib (0) <BE8051D6-EEAC-3A32-83F0-87F10449D957> /Applications/runSofa.app/Contents/MacOS/plugins/SofaObjectInteraction/lib/libSofaObjectInteraction.20.12.01.dylib; 0x1126d7000 - 0x112782fff +libSofaDeformable.20.12.01.dylib (0) <1D2109A8-B58B-3019-9C2F-6475AD697D95> /Applications/runSofa.app/Contents/MacOS/plugins/SofaDeformable/lib/libSofaDeformable.20.12.01.dylib; 0x1128d7000 - 0x112926fff +libSofaRigid.20.12.01.dylib (0) <D9F873DE-3B1D-33A6-B173-DB2F0E0AE833> /Applications/runSofa.app/Contents/MacOS/plugins/SofaRigid/lib/libSofaRigid.20.12.01.dylib; 0x1129c5000 - 0x112bc4fff +libSofaBaseMechanics.20.12.01.dylib (0) <28F9C6C1-AE2D-365E-ACB7-5CED017A9BD6> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseMechanics.20.12.01.dylib; 0x112fe1000 - 0x113004fff +libSofaEigen2Solver.20.12.01.dylib (0) <B6AD28C5-05ED-3A21-89EC-23F18F1E568D> /Applications/runSofa.app/Contents/MacOS/lib/libSofaEigen2Solver.20.12.01.dylib; 0x11303b000 - 0x11310efff +libSofaBaseLinearSolver.20.12.01.dylib (0) <363874FF-A623-3C38-A6F4-B53605330E4E> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseLinearSolve,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:9159,plugin,plugins,9159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['plugin'],['plugins']
Modifiability,"0 2024, 15:27:52) ; [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import Sofa; ---------------------------------------; Checking SOFA_ROOT and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; ---------------------------------------; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; import Sofa.Helper; ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')); >>> . ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690:2031,plugin,plugins,2031,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690,1,['plugin'],['plugins']
Modifiability,"0); topoLines_cath.addObject('EdgeSetTopologyContainer', name='meshLinesCath'); topoLines_cath.addObject('EdgeSetGeometryAlgorithms', name='GeomAlgo', template='Rigid3d'); topoLines_cath.addObject('MechanicalObject', template='Rigid3d', name='dofTopo'). CatheterMechanics = rootNode.addChild('CatheterModel'); CatheterMechanics.addObject('EulerImplicitSolver', rayleighStiffness=0.2, rayleighMass=0.1, printLog='false'); CatheterMechanics.addObject('BTDLinearSolver',verification=False, subpartSolve=False, verbose=False); CatheterMechanics.addObject('RegularGridTopology', name='MeshLines',nx=60, ny=1, nz=1,; xmax=1.0, xmin=0.0, ymin=0, ymax=0, zmax=1, zmin=1,; p0=[0,0,0]); CatheterMechanics.addObject('MechanicalObject', showIndices=False, name='DOFs', template='Rigid3d', ry=-90); CatheterMechanics.addObject('WireBeamInterpolation', name='InterpolCatheter', WireRestShape='@../EdgeTopology/catheterRestShape',radius='1',printLog='0'); CatheterMechanics.addObject('AdaptiveBeamForceFieldAndMass',name='CatheterForceField',massDensity=0.00000102, interpolation='@InterpolCatheter'); CatheterMechanics.addObject('InterventionalRadiologyController', name='DeployController', template='Rigid3d', instruments='InterpolCatheter',; startingPos=[0, 0, 0, 0, 0, 0, 1], xtip=[0, 0, 0], printLog=True,; rotationInstrument=[0, 0, 0], step=5., speed=5.,; listening=True, controlledInstrument=0); CatheterMechanics.addObject('LinearSolverConstraintCorrection',wire_optimization='true', printLog=False); CatheterMechanics.addObject('FixedConstraint', indices=0, name='FixedConstraint'); CatheterMechanics.addObject('RestShapeSpringsForceField', points='@DeployController.indexFirstNode', angularStiffness=1e8, stiffness=1e8). VisuCatheter = rootNode.addChild('VisuCatheter'); VisuCatheter.activated = True; VisuCatheter.addObject('MechanicalObject', name='Quads'); VisuCatheter.addObject('QuadSetTopologyContainer', name='ContainerGuide'); VisuCatheter.addObject('QuadSetTopologyModifier', name='Modifier'); Vi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3463:2392,Adapt,AdaptiveBeamForceFieldAndMass,2392,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3463,1,['Adapt'],['AdaptiveBeamForceFieldAndMass']
Modifiability,00/share/sofa/gui/qt; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.0,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:1793,Plugin,PluginManager,1793,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,0862d000 - 0x10868cfff +libSofaBaseVisual.20.12.01.dylib (0) <3FF1BCE6-2796-3533-B23D-8440A29E1F9E> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseVisual.20.12.01.dylib; 0x10873d000 - 0x10879cfff +libSofaMiscForceField.20.12.01.dylib (0) <DFAD70EA-9BF9-3F8F-9767-866C72E011B4> /Applications/runSofa.app/Contents/MacOS/plugins/SofaMiscForceField/lib/libSofaMiscForceField.20.12.01.dylib; 0x108863000 - 0x108b0efff +libSofaBoundaryCondition.20.12.01.dylib (0) <D5451810-3AED-3A0F-8AE8-3D042D7B6DA2> /Applications/runSofa.app/Contents/MacOS/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.20.12.01.dylib; 0x1090ef000 - 0x109112fff +libSofaMiscTopology.20.12.01.dylib (0) <8E135C36-4169-3687-92F7-BFD9FA319BA4> /Applications/runSofa.app/Contents/MacOS/plugins/SofaMiscTopology/lib/libSofaMiscTopology.20.12.01.dylib; 0x109144000 - 0x10916ffff +libSofaGeneralTopology.20.12.01.dylib (0) <DD8C86BC-EB7F-36EA-B833-B26EA0032E54> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.20.12.01.dylib; 0x1091d7000 - 0x1092adfff +org.qt-project.QtCharts (5.12 - 5.12.6) <01C0EF28-7969-3700-8E90-CE4CC9C4CBA5> /Applications/runSofa.app/Contents/Frameworks/QtCharts.framework/Versions/5/QtCharts; 0x109358000 - 0x109384fff +org.qt-project.QtWebEngine (5.12 - 5.12.6) <AD3B4770-81C6-3308-8F28-3DAB15DC68F1> /Applications/runSofa.app/Contents/Frameworks/QtWebEngine.framework/Versions/5/QtWebEngine; 0x1093ba000 - 0x1093d9fff +org.qt-project.QtWebEngineWidgets (5.12 - 5.12.6) <C415A86C-6293-326D-AE05-0FD9087D5FD9> /Applications/runSofa.app/Contents/Frameworks/QtWebEngineWidgets.framework/Versions/5/QtWebEngineWidgets; 0x109404000 - 0x10f696fff +org.qt-project.Qt.QtWebEngineCore (5.12 - 5.12.6) <0745D0B0-9652-3158-9C7F-3147F394BCF5> /Applications/runSofa.app/Contents/Frameworks/QtWebEngineCore.framework/Versions/5/QtWebEngineCore; 0x10fcbe000 - 0x10fcd3fff +org.qt-project.QtWebChannel (5.12 - 5.12.6) <199AE934-6E1A-3584-BA64-FA578128D36C> /Appli,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:5383,plugin,plugins,5383,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['plugin'],['plugins']
Modifiability,"1-Defaulttype is supposed to depend on Helper, and Helper on nobody (except eventual third-party library like Eigen); But things in Helper includes stuff in Defaulttype (typically Vec, Mat and Quat, this one even worse with Quat/Quater brainf*ck). 2- The contents of those two Kernel modules are confusing.; It seems that Defaulttype was supposed to only contain type for templated element in the subsequent Sofa modules; e.g for MechanicalObject. Those types are (not extensive): VecXTypes (and their float/double template), RigidTypes, SolidTypes.; One could theoretically not use Defauttype and creates its own ""types"". Actually this is what Flexible does. So the goal would be to:; - leave the VecTypes, etc into Defaulttype,; - put the other ""things"" into Helper; - Reorganize Helper to be less messy as well. The issue/question is how to re-organize Helper (which is a mess by itself). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1521:645,Flexible,Flexible,645,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521,1,['Flexible'],['Flexible']
Modifiability,"1. All types of Eigen::SparseMatrix are now supported. For that, the implementation relies completely on the Eigen matrix product to compute the intersection. The trick is to flag the non-zero values with its index position in the array. The matrix product will implicitly keep track of all the operations thanks to the newly introduced scalar types.; 2. Because of the new method, `SparseMatrixStorageOrder` is no longer useful. It can be removed later; 3. Unit tests are extensive. They test all possible configuration of storage of LHS, RHS and Result. They are required because a condition on the storage type is required to swap the indices after the matrix product.; 4. A parallel version of the algorithm is introduced; 5. Benchmarks: https://github.com/alxbilger/SofaBenchmark/pull/39. Analysis of the results of the benchmarks:; - The best configuration storage for the fast matrix product seems to be ColColCol; - The fast matrix product is always faster than the regular product, except for a matrix of size 1000 and sparsity of 15%. This probably indicates that the method is adapted for very sparse matrices; - The parallel fast matrix product algorithm is always faster than the sequential algorithm, except for very small matrices where the overhead of parallelism is not negligible. However, the speed up is not linear with the number of cores and can be disappointing.; - The parallel fast matrix product is always faster than the regular product even for the matrix of size 1000 and sparsity of 15%, but not for very small matrices (overhead). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4547:507,config,configuration,507,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4547,2,['config'],['configuration']
Modifiability,"1. The CMake option to enable/disable OpenGL is now `SOFA_WITH_OPENGL`.; 2. SOFA_NO_OPENGL is completely removed from SOFA sources (only the CMake variable persists).; 3. Sofa.GL is added by SofaKernel/modules/CMakeLists.txt (not by SofaFramework/CMakeLists.txt anymore).; 4. sofa_add_* macros are now capable of creating dependent options. ; Example: ; ```cmake; sofa_add_module(Sofa.GL Sofa.GL ON # the 3 usual sofa_add_* arguments; WHEN_TO_SHOW ""SOFA_WITH_OPENGL"" # [new arg] if SOFA_WITH_OPENGL is true, then the option is showed in CMake-GUI; VALUE_IF_HIDDEN OFF # [new arg] if SOFA_WITH_OPENGL is false, then the option is hidden and set to OFF; ); ```; 5. SofaComponentAll does not fail anymore at configure time if some modules are not found. It will cover as many modules as possible. **This will fix our nightly minimal builds.**; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1913:147,variab,variable,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1913,2,"['config', 'variab']","['configure', 'variable']"
Modifiability,"1/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:1231,plugin,plugins,1231,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['plugin'],['plugins']
Modifiability,10b8d000 - 0x110bf4fff +org.qt-project.QtOpenGL (6.0 - 6.0.2) <6841ACBD-A2D6-3D63-9C25-8E656776A088> /usr/local/Cellar/qt/6.0.2/lib/QtOpenGL.framework/Versions/A/QtOpenGL; 0x110c32000 - 0x1110d1fff +org.qt-project.QtWidgets (6.0 - 6.0.2) <3D939EAB-26B6-36B6-AB17-F4D0BF952EC0> /usr/local/Cellar/qt/6.0.2/lib/QtWidgets.framework/Versions/A/QtWidgets; 0x11130c000 - 0x1118a7fff +org.qt-project.QtGui (6.0 - 6.0.2) <E8A9B9CD-A135-383A-B29E-51DD6C04AB18> /usr/local/Cellar/qt/6.0.2/lib/QtGui.framework/Versions/A/QtGui; 0x111a91000 - 0x111aacfff +org.qt-project.QtXml (6.0 - 6.0.2) <626DB273-B152-3E4E-B317-A513D81BD92E> /usr/local/Cellar/qt/6.0.2/lib/QtXml.framework/Versions/A/QtXml; 0x111ac8000 - 0x111ed3fff +org.qt-project.QtCore (6.0 - 6.0.2) <626D1C7B-2DDB-300D-B5DD-5FB170D3C5A0> /usr/local/Cellar/qt/6.0.2/lib/QtCore.framework/Versions/A/QtCore; 0x11202d000 - 0x1120d0fff +libSofaLoader.20.12.01.dylib (0) <DE5355F4-9BB5-3D22-8F91-9A1A725AA3C4> /Applications/runSofa.app/Contents/MacOS/plugins/SofaLoader/lib/libSofaLoader.20.12.01.dylib; 0x11226d000 - 0x11232cfff +libSofaMeshCollision.20.12.01.dylib (0) <F6C0C139-F230-35C9-8301-FAF420509104> /Applications/runSofa.app/Contents/MacOS/plugins/SofaMeshCollision/lib/libSofaMeshCollision.20.12.01.dylib; 0x112530000 - 0x1125abfff +libSofaBaseCollision.20.12.01.dylib (0) <95C00576-DD6A-322D-882E-161945B8AA44> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseCollision.20.12.01.dylib; 0x112691000 - 0x1126a4fff +libSofaObjectInteraction.20.12.01.dylib (0) <BE8051D6-EEAC-3A32-83F0-87F10449D957> /Applications/runSofa.app/Contents/MacOS/plugins/SofaObjectInteraction/lib/libSofaObjectInteraction.20.12.01.dylib; 0x1126d7000 - 0x112782fff +libSofaDeformable.20.12.01.dylib (0) <1D2109A8-B58B-3019-9C2F-6475AD697D95> /Applications/runSofa.app/Contents/MacOS/plugins/SofaDeformable/lib/libSofaDeformable.20.12.01.dylib; 0x1128d7000 - 0x112926fff +libSofaRigid.20.12.01.dylib (0) <D9F873DE-3B1D-33A6-B173-DB2F0E0AE833> /Applications/runSofa.app,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:8553,plugin,plugins,8553,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['plugin'],['plugins']
Modifiability,17 vc 14.1; Sofa Master: commit 9d9100aa1b0acb9363c8ec7c9b5e4b470821bfc1; Boost: 1.71.0; CGAL: CGAL-4.13.2; QT: 5.12.0. ```; INFO] [runSofa] PluginRepository paths = C:/open_prj/sofa/build/mmaster/plugins;C:/open_prj/sofa/build/mmaster/bin/Release; [INFO] [runSofa] DataRepository paths = C:/open_prj/sofa/src/share;C:/open_prj/sofa/src/examples; [INFO] [runSofa] GuiDataRepository paths = C:/open_prj/sofa/src/applications/projects/runSofa/resources;C:/open_prj/sofa/src/applications/sofa/gui/qt/resources; [INFO] [runSofa] Loading automatically plugin list in C:\open_prj\sofa\build\mmaster\applications\projects\runSofa/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaDenseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaNonUniformFem.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/CImgPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaMiscCollision.dll; [ERROR] [PluginManager] Plugin loading failed (C:/open_prj/sofa/build/mmaster/bin/Release/CGALPlugin.dll): The specified module could not be found. Warning: Setting a new default format with a different version or profile after the global shared context is created may cause issues with context sharing.; The constructor with a QGLForm,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402:1446,Plugin,PluginManager,1446,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Intersection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Mapper.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Setting.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:8429,Plugin,PluginManager,8429,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,2 small fixes to allow usage of SofaPython by a third-party software. ; 1. Tests all known data path from SOFA to look for /etc/sofa/python.d (not only SOFA_ROOT or current exec dir); 2. Give a more specific name to the static bool at plugin init. It was messing up with another variable. . + Clean some example scenes warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1466:235,plugin,plugin,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1466,2,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,"2); - [x] TetrahedronFEMForceField (#2777); - [x] TetrahedronHyperelasticityFEMForceField (#2777); - [x] TorsionForceField (#4115); - [x] TriangleFEMForceField (#2777); - [x] TriangularFEMForceField (#3991); - [x] TriangularFEMForceFieldOptim (#4105); - [ ] ParticlesRepulsionForceField; - [ ] TrianglePressureForceField; - [ ] SPHFluidForceField; - [ ] QuadularBendingSprings; - [ ] TriangularAnisotropicFEMForceField; - [ ] TriangularBendingSprings; - [ ] TriangularBiquadraticSpringsForceField; - [ ] TriangularQuadraticSpringsForceField; - [ ] TriangularTensorMassForceField; - [ ] UniformVelocityDampingForceField. # Interaction Force Fields. - [x] MechanicalMatrixMapper (#2777); - [x] MeshSpringForceField (nothing to do as it inherits from StiffSpringForceField); - [x] PenalityContactForceField (#3974); - [x] QuadBendingSprings (nothing to do as it inherits from StiffSpringForceField); - [x] SpringForceField (#3970); - [x] StiffSpringForceField (#2777); - [x] TriangleBendingSprings (nothing to do as it inherits from StiffSpringForceField); - [ ] PolynomialSpringsForceField (#4301); - [ ] FrameSpringForceField \*\*; - [ ] GearSpringForceField \*\*; - [ ] InteractionEllipsoidForceField \*\*; - [ ] JointSpringForceField \*\*; - [ ] RegularGridSpringForceField \*\*; - [ ] RepulsiveSpringForceField \*\*; - [ ] VectorSpringForceField \*\*. # Masses. The new function is `buildMassMatrix` (replaces `addMToMatrix`). But since masses are also force fields, they must also implement `buildStiffnessMatrix` and `buildDampingMatrix`. - [x] DiagonalMass (#2777); - [x] MeshMatrixMass (#2777); - [x] UniformMass (#2777); - [ ] HexahedralFEMForceFieldAndMass; - [ ] HexahedronCompositeFEMForceFieldAndMass; - [ ] HexahedronFEMForceFieldAndMass; - [ ] NonUniformHexahedralFEMForceFieldAndMass; - [ ] NonUniformHexahedronFEMForceFieldAndMass. # Projective constraints. The new function is `applyConstraint(ZeroDirichletCondition*)`; - [x] FixedConstraint (#2777); - [x] FixedPlaneConstraint (#392",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3967:2131,inherit,inherits,2131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3967,3,['inherit'],['inherits']
Modifiability,"2- ADD tests; 3- CLEAN member variables name (BREAKING); 4- ADD an example of orientedBox dataField use; 5- Changed a bit the implementation from PlaneROI, for computation optimization purpose. Question:; I would like to reimplement PlaneROI so that it does what we expect from its name, and also print a ""deprecated message"" for those who still use PlaneROI as an OrientedBoxROI. Those users will be detected if they use a deprecated data field. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/108:30,variab,variables,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108,1,['variab'],['variables']
Modifiability,2.01.dylib; 0x108544000 - 0x10859ffff +libSofaSimpleFem.20.12.01.dylib (0) <39F60B90-A0EE-3992-9391-A0CF20CB95DE> /Applications/runSofa.app/Contents/MacOS/plugins/SofaSimpleFem/lib/libSofaSimpleFem.20.12.01.dylib; 0x10862d000 - 0x10868cfff +libSofaBaseVisual.20.12.01.dylib (0) <3FF1BCE6-2796-3533-B23D-8440A29E1F9E> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseVisual.20.12.01.dylib; 0x10873d000 - 0x10879cfff +libSofaMiscForceField.20.12.01.dylib (0) <DFAD70EA-9BF9-3F8F-9767-866C72E011B4> /Applications/runSofa.app/Contents/MacOS/plugins/SofaMiscForceField/lib/libSofaMiscForceField.20.12.01.dylib; 0x108863000 - 0x108b0efff +libSofaBoundaryCondition.20.12.01.dylib (0) <D5451810-3AED-3A0F-8AE8-3D042D7B6DA2> /Applications/runSofa.app/Contents/MacOS/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.20.12.01.dylib; 0x1090ef000 - 0x109112fff +libSofaMiscTopology.20.12.01.dylib (0) <8E135C36-4169-3687-92F7-BFD9FA319BA4> /Applications/runSofa.app/Contents/MacOS/plugins/SofaMiscTopology/lib/libSofaMiscTopology.20.12.01.dylib; 0x109144000 - 0x10916ffff +libSofaGeneralTopology.20.12.01.dylib (0) <DD8C86BC-EB7F-36EA-B833-B26EA0032E54> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.20.12.01.dylib; 0x1091d7000 - 0x1092adfff +org.qt-project.QtCharts (5.12 - 5.12.6) <01C0EF28-7969-3700-8E90-CE4CC9C4CBA5> /Applications/runSofa.app/Contents/Frameworks/QtCharts.framework/Versions/5/QtCharts; 0x109358000 - 0x109384fff +org.qt-project.QtWebEngine (5.12 - 5.12.6) <AD3B4770-81C6-3308-8F28-3DAB15DC68F1> /Applications/runSofa.app/Contents/Frameworks/QtWebEngine.framework/Versions/5/QtWebEngine; 0x1093ba000 - 0x1093d9fff +org.qt-project.QtWebEngineWidgets (5.12 - 5.12.6) <C415A86C-6293-326D-AE05-0FD9087D5FD9> /Applications/runSofa.app/Contents/Frameworks/QtWebEngineWidgets.framework/Versions/5/QtWebEngineWidgets; 0x109404000 - 0x10f696fff +org.qt-project.Qt.QtWebEngineCore (5.12 - 5.12.6) <0745D0B0-9652-3158-9C7F-3147F394BCF5>,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:5169,plugin,plugins,5169,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['plugin'],['plugins']
Modifiability,"2080: 20% of the components make 80% of the result. Components list: https://docs.google.com/spreadsheets/d/1mPGnMrC-3Yo8dEdm5549dRhKcquK4mDmWoNRQt711gs/edit#gid=0. General idea: Repackage components ina way that a subset of the components will be mandatory. These selected components will be maintained with a high level of quality (tests, doc, comments, etc...); Binary distribution will include only this subset. On a fist time:; All the other components will remain available in the repo, but optionnal. (plugins?) ; Once the transition is mature enough, move the deprecated components to another repo ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442:509,plugin,plugins,509,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442,1,['plugin'],['plugins']
Modifiability,"238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:14:09.408: Failed to load module ""canberra-gtk-module""; Gtk-Message: 22:14:09.409: Failed to load module ""canberra-gtk-module""; [INFO] [SofaPluginManager] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:12670,config,config,12670,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['config'],['config']
Modifiability,24.06.00/lib/libSofa.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Haptics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering2D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering3D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Shader.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Batch.so; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Qt.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SceneCreator/lib/libSceneCreator.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/ArticulatedSystemPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:10559,Plugin,PluginManager,10559,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Correction.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Projective.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.AnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:6848,Plugin,PluginManager,6848,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"2nd big guy. #1527; based on ; - ~~#2612 ~~; - #2717 (for a moved file in core). Deprecates **SofaMiscMapping**; Partially deprecates **SofaBaseMechanics**, **SofaRigid**, **SofaGeneralRigid**. This module gathers all ""mechanical"" mappings (inhering BaseMapping) and __not__ topological mapping.; ~~I am a bit concerned by the size of this module but I cannot really find any good sub-modules to sort these components into ?~~. Following a discussion with @ChristianDuriez @Younesssss @alxbilger , Mappings are organized between:; - NonLinear: mappings implementing getK() and applyDJT(); - Linear: the rest of mappings; - MappedMatrix: components which are not mapping? but helps to map matrices (stiffness and stuff) ; -> Ad-hoc module which is only used to patch up matrices in SOFA, will disappear once matrix assembly will be pushed. ~~TODO (in an other PR), set Articulated-related things into a dedicated plugin.~~ Done in #2684 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2635:912,plugin,plugin,912,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2635,1,['plugin'],['plugin']
Modifiability,"3 different components for linear elasticity on tetrahedra:. - `FastTetrahedralCorotationalForceField`; - `TetrahedralCorotationalFEMForceField`; - `TetrahedronFEMForceField`. The 3 components have similarities (even duplicated code), but don't share anything. It's time for refactoring!. My focus was the refactoring of the unit tests. Before the PR, a unique class tested the 3 components using a series of `if`. I refactored the 3 classes in order to reduce the specific processing in the unit test, i.e. reduce the number of `if`. - The 3 classes now inherit from a common base class `BaseLinearElasticityFEMForceField`. I moved everything that was common (only regarding the unit test. More common code is remaining) in this class. It includes:; - A common `Data` for Young's modulus and Poisson's ratio. This way, they share type, the same default value, and the same description. Note that Young's modulus in `FastTetrahedralCorotationalForceField` and `TetrahedralCorotationalFEMForceField` was a scalar, and now it's a vector of scalars. This requires to add a common way to access the Young's modulus of the i-th element. This is also a breaking change. This allows to define a typed unit test for all 3 classes. The particularities of the classes are defined in a derived class of the unit test. To me, a great advantage, is that we identify clearly that there are unit tests for the 3 components, because there a file for each class. It was not obvious before. [ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/133]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all plat",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778:275,refactor,refactoring,275,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778,4,"['inherit', 'refactor']","['inherit', 'refactored', 'refactoring']"
Modifiability,"3] Initializing with python version 3.10.4 (main, Mar 23 2022, 23:05:40) [GCC 11.2.0]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.1m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/home/sergei/Source_code/Sofa_development/SofaPython3/build_release/lib/python3/site-packages' to sys.path; ---------------------------------------; Checking SOFA_ROOT and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /home/sergei/Source_code/Sofa_development/sofa/build_release/install; ---------------------------------------; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/SofaPython3/build_release/lib/libSofaPython3.so; [INFO] [runSofa] Loading automatically plugin list in /home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSimpleFem/lib/libSofaSimpleFem.so; [WARNING] [ObjectFactory] Class already registered: JointSpringForceField<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: RigidMapping<Rigid2d,Vec2d>; [WARNING] [ObjectFactory] Class already registered: RigidMapping<Rigid3d,Vec3d>; [WARNING] [ObjectFactory] Class already registered: RigidRigidMapping<Rigid3d,Rigid3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaRigid/lib/libSofaRigid.so; [WARNING] [ObjectFactory] Class already registered: AngularSpringForceField<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: MeshSpringForceField<Vec1d>; [WARNING] [ObjectFactory] Class already registered: MeshSpringForceField<Vec2d>; [WARNING] [ObjectFactory] Class already registered: MeshSpringForceField<Vec3d>; [WARNING] [ObjectFactory] Class already registered: RestShapeSpringsForceField<Rigid3d>; [WARNING] [ObjectFa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:9373,Plugin,PluginManager,9373,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"3d as the default; [WARNING] [ObjectFactory] Class already registered: DynamicSparseGridGeometryAlgorithms<Vec2d>; [WARNING] [ObjectFactory] Class already registered: DynamicSparseGridGeometryAlgorithms<Vec3d>; ....; ```. or with a cryptic error message if you try to use the PluginManager from the GUI:; ```; [INFO] [PluginManager] Plugin not found in loaded plugins: ..../bin/RelWithDebInfo/SofaNonUniformFem.dll; [ERROR] [SofaPluginManager] plugin should be loaded: ..../bin/RelWithDebInfo/SofaNonUniformFem.dll; ```. Now, if you try to load twice the plugins (from differents paths then), it will print:; (one dll is in `build/bin/Release/` and the other one directly in `build/`; ```; [WARNING] [PluginManager] This plugin SofaNonUniformFem has been loaded from a different path, it will certainly lead to bugs or crashes...; You tried to load: ....build/bin/Release/SofaNonUniformFem.dll; Already loaded: ....\build\SofaNonUniformFem.dll; [WARNING] [PluginManager] Plugin SofaNonUniformFem is already loaded from a different path, check you configuration.; ```; The ""double information"" comes from the fact that in the end we consider the plugin as loaded ; the code afterwards will try to load the plugin nevertheless (hence having to detect twice the duplication); In the GUI code for example: https://github.com/sofa-framework/sofa/blob/71691309251177322967f53bc7a024e89c19bcbc/modules/SofaGuiQt/src/sofa/gui/qt/SofaPluginManager.cpp#L120. Obviously it is really not advised to continue to use Sofa if this case occurs but at least the user will know what is going on.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it bui",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2352:1289,Plugin,PluginManager,1289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2352,3,"['Plugin', 'config']","['Plugin', 'PluginManager', 'configuration']"
Modifiability,3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Correction.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Projective.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.AnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Intersection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Mapper.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManag,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:7405,Plugin,PluginManager,7405,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"463 ms); gtest-filepath.cc.o gtest-filepath.h gtest-string.h (456 ms); gtest.cc.o gtest.h gtest-internal.h (246 ms); ... 20903 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/vector.h (included 156 times, avg 133 ms), included via:; MeshGmsh.cpp.o MeshGmsh.h Mesh.h (492 ms); MeshTopologyLoader.cpp.o MeshTopologyLoader.h Mesh.h (402 ms); Image.cpp.o Factory.inl (384 ms); SVector.cpp.o SVector.h (379 ms); GenerateRigid.cpp.o GenerateRigid.h Mesh.h (373 ms); TestMessageHandler.cpp.o TestMessageHandler.h (346 ms); ... 19960 ms: /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/pstl/glue_algorithm_defs.h (included 157 times, avg 127 ms), included via:; qglviewer.h camera.h QMap qmap.h qiterator.h qglobal.h algorithm (348 ms); manipulatedCameraFrame.h manipulatedFrame.h frame.h QObject qobject.h qobjectdefs.h qnamespace.h qglobal.h algorithm (345 ms); gtest-typed-test.h gtest-port.h algorithm (299 ms); mouseGrabber.h config.h qglobal.h algorithm (299 ms); VRender.h config.h qglobal.h algorithm (296 ms); cmake_pch.hxx Base.h BoundingBox.h Vec.h fixed_array.h algorithm (271 ms); ... 19494 ms: sofa/applications/plugins/SofaTest/../SofaTest/Mapping_test.h (included 6 times, avg 3249 ms), included via:; DistanceMapping_test.cpp.o (3500 ms); QuaternionIntegration_test.cpp.o (3407 ms); RigidRigidMapping_test.cpp.o (3280 ms); SquareMapping_test.cpp.o (3239 ms); RigidMapping_test.cpp.o (3089 ms); SquareDistanceMapping_test.cpp.o (2976 ms); ... 19187 ms: sofa/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src/sofa/simulation/MechanicalVisitor.h (included 100 times, avg 191 ms), included via:; initSofaDenseSolver.cpp.o MatrixLinearSolver.inl MatrixLinearSolver.h (440 ms); StaticSolver.cpp.o StaticSolver.h MechanicalMatrixVisitor.h (427 ms); NewMatCGLinearSolver.cpp.o CGLinearSolver.inl CGLinearSolver.h MatrixLinearSolver.h (404 ms); DefaultMultiMatrixAccessor.cpp.o DefaultMultiMatrixAccessor.h (388 ms); PrecomputedLinearSolver.cpp.o PrecomputedLinearSolve",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:36416,config,config,36416,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['config'],['config']
Modifiability,"5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:1362,plugin,plugin,1362,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225,4,"['Flexible', 'plugin']","['Flexible', 'plugin', 'plugins']"
Modifiability,6-8CCE-4C2D7C35D80A> /usr/lib/libChineseTokenizer.dylib; 0x7fff2afe3000 - 0x7fff2b0a1fff libvMisc.dylib (760.40.6) <9D11FCFC-6C30-32B6-864B-9CC3ED7D1143> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib; 0x7fff2b0a2000 - 0x7fff2b13afff libate.dylib (3.0.4) <42707DFB-86A4-3F56-A5AF-E6DAA7E49DC7> /usr/lib/libate.dylib; 0x7fff2b13b000 - 0x7fff2b142fff libIOReport.dylib (64) <8DEEA01D-B715-340A-900E-B448AB22720E> /usr/lib/libIOReport.dylib; 0x7fff2b143000 - 0x7fff2b171fff com.apple.CrashReporterSupport (10.13 - 15047.1) <EA306EDB-2A02-3FB6-8812-F5EAA337AEE6> /System/Library/PrivateFrameworks/CrashReporterSupport.framework/Versions/A/CrashReporterSupport; 0x7fff2b189000 - 0x7fff2b209fff com.apple.CVNLP (1.0 - 119) <01312979-649E-3869-801B-C4CF70DA1236> /System/Library/PrivateFrameworks/CVNLP.framework/Versions/A/CVNLP; 0x7fff2b228000 - 0x7fff2b25dfff com.apple.pluginkit.framework (1.0 - 1) <343BA2F7-C204-3C30-BAC1-C85CC0A8DCFF> /System/Library/PrivateFrameworks/PlugInKit.framework/Versions/A/PlugInKit; 0x7fff2b25e000 - 0x7fff2b265fff libMatch.1.dylib (38) <DE8B7844-BFB2-3E3E-9FD0-1C9AD1DC1736> /usr/lib/libMatch.1.dylib; 0x7fff2b266000 - 0x7fff2b2f1fff libCoreStorage.dylib (554) <044E6815-6340-31D5-BEE9-760C354E92A3> /usr/lib/libCoreStorage.dylib; 0x7fff2b2f2000 - 0x7fff2b345fff com.apple.AppleVAFramework (6.1.3 - 6.1.3) <E3BE877B-1C78-3ABF-8C41-66FE9B6971C7> /System/Library/PrivateFrameworks/AppleVA.framework/Versions/A/AppleVA; 0x7fff2b346000 - 0x7fff2b35ffff libexpat.1.dylib (26) <1D978F91-674E-3A44-8A93-773C7E3E513C> /usr/lib/libexpat.1.dylib; 0x7fff2b360000 - 0x7fff2b369fff libheimdal-asn1.dylib (597.80.1) <8F6CD867-FB45-375D-82C1-E0AE79558C8C> /usr/lib/libheimdal-asn1.dylib; 0x7fff2b36a000 - 0x7fff2b37efff com.apple.IconFoundation (479.3 - 479.3) <3563C4B4-ABF6-3DE0-8381-D3667DFE2B80> /System/Library/PrivateFrameworks/IconFoundation.framework/Versions/A/IconFoundation; 0x7fff2b37f000 - 0x7fff2b3ecfff co,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:48506,PlugIn,PlugInKit,48506,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['PlugIn'],['PlugInKit']
Modifiability,7-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Correction.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Projective.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.AnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:6697,Plugin,PluginManager,6697,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2844,plugin,plugins,2844,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,1,['plugin'],['plugins']
Modifiability,7nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Intersection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Mapper.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Setting.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Transform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/li,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:8570,Plugin,PluginManager,8570,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,80f2fff +libSofaBaseUtils.20.12.01.dylib (0) <581FCEED-99DD-3642-AC19-1EFB56334375> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseUtils.20.12.01.dylib; 0x108130000 - 0x108167fff +libSofaGeneralMeshCollision.20.12.01.dylib (0) <BFA69B16-EFE2-3F2D-843D-38EA209DB60B> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralMeshCollision/lib/libSofaGeneralMeshCollision.20.12.01.dylib; 0x1081d4000 - 0x1081f7fff +libSofaGeneralVisual.20.12.01.dylib (0) <2801711D-11F2-342D-9659-A6760DB8B489> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralVisual/lib/libSofaGeneralVisual.20.12.01.dylib; 0x108235000 - 0x1082a8fff +libSofaTopologyMapping.20.12.01.dylib (0) <25291751-E35F-3A44-B167-CB54D1C86B40> /Applications/runSofa.app/Contents/MacOS/plugins/SofaTopologyMapping/lib/libSofaTopologyMapping.20.12.01.dylib; 0x10834c000 - 0x1083dbfff +libSofaGeneralSimpleFem.20.12.01.dylib (0) <4787B69F-1093-3E5B-8414-BE5EA23432F5> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.20.12.01.dylib; 0x108544000 - 0x10859ffff +libSofaSimpleFem.20.12.01.dylib (0) <39F60B90-A0EE-3992-9391-A0CF20CB95DE> /Applications/runSofa.app/Contents/MacOS/plugins/SofaSimpleFem/lib/libSofaSimpleFem.20.12.01.dylib; 0x10862d000 - 0x10868cfff +libSofaBaseVisual.20.12.01.dylib (0) <3FF1BCE6-2796-3533-B23D-8440A29E1F9E> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBaseVisual.20.12.01.dylib; 0x10873d000 - 0x10879cfff +libSofaMiscForceField.20.12.01.dylib (0) <DFAD70EA-9BF9-3F8F-9767-866C72E011B4> /Applications/runSofa.app/Contents/MacOS/plugins/SofaMiscForceField/lib/libSofaMiscForceField.20.12.01.dylib; 0x108863000 - 0x108b0efff +libSofaBoundaryCondition.20.12.01.dylib (0) <D5451810-3AED-3A0F-8AE8-3D042D7B6DA2> /Applications/runSofa.app/Contents/MacOS/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.20.12.01.dylib; 0x1090ef000 - 0x109112fff +libSofaMiscTopology.20.12.01.dylib (0) <8E135C36-4169-3687-92F7-BFD9FA319BA4> /Applications/,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:4123,plugin,plugins,4123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['plugin'],['plugins']
Modifiability,"8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('Un",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1657,plugin,plugins,1657,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,1,['plugin'],['plugins']
Modifiability,8bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Intersection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Mapper.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Setting.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Transform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/l,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:8702,Plugin,PluginManager,8702,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"99% of the modules/plugins implements getModuleComponentList() with; ```; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = core::ObjectFactory::getInstance()->listClassesFromTarget(MODULE_NAME);; return classes.c_str();; }; ```; And the rest either omitted to implement it, or just forgot to update the list. (e.g MultiThreading). IMO getModuleComponentList() does not have really a meaning anymore and one should just use `ObjectFactory::listClassesFromTarget()` directly.; AFAIK, the only piece of code in the SOFA codebase using this entrypoint is Gui.Qt widget, displaying the component list for each loaded plugin. This PR:; - removes all the entrypoints from Sofa.Component.* (+MultiThreading); - deprecates getModuleComponentList() calls; - Sofa.Gui.Qt: calls directly listClassesFromTarget(), but still tests if getModuleComponentList() needs to be called; - warns at runtime if one plugin do implement getModuleComponentList(); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4795:19,plugin,plugins,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4795,4,['plugin'],"['plugin', 'plugins']"
Modifiability,9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.Elastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Correction.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Projective.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.AnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:6542,Plugin,PluginManager,6542,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.TensorMass.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.StateContainer.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Model.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Correction.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Solver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Projective.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.AnimationLoop.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.MechanicalLoad.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Geometry.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.Algorithm.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.Intersection.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.Mapper.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/so,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:5736,Plugin,PluginManager,5736,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,": D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaEngine.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGraphComponent.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaBoundaryCondition.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralAnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralDeformable.dll; [ERROR] [PluginManager] Plugin not found: ""SofaGeneralEngine""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralLinearSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralSimpleFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralTopology.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWith",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:6890,Plugin,PluginManager,6890,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,": [""Sofa.Component.Setting""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Solver)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Solver"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Solver""]; [ERROR] [RequiredPlugin(Sofa.Component.ODESolver.Backward)] Plugin not found: ""Sofa.Component.ODESolver.Backward"". Failed to load: [""Sofa.Component.ODESolver.Backward""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Correction)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Correction"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Correction""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Geometry)] Plugin not found: ""Sofa.Component.Collision.Geometry"". Failed to load: [""Sofa.Component.Collision.Geometry""]; [ERROR] [SofaRuntime] ValueError: Object type BackgroundSetting<> was not created; The object is not in the factory.; This component has been MOVED from SofaBaseVisual to Sofa.Component.UserInterface.ConfigurationSetting since SOFA v22.06.; To continue using this component you may need to update your scene by adding. Traceback (most recent call last):; File ""/home/sofa/SOFA/v22.06.00/bin/lapgym/sofa_env/sofa_env/scenes/reach/reach_env.py"", line 435, in; env.reset(); File ""/home/sofa/SOFA/v22.06.00/bin/lapgym/sofa_env/sofa_env/scenes/reach/reach_env.py"", line 380, in reset; super().reset(); File ""/home/sofa/SOFA/v22.06.00/bin/lapgym/sofa_env/sofa_env/base.py"", line 147, in reset; self._init_sim(); File ""/home/sofa/SOFA/v22.06.00/bin/lapgym/sofa_env/sofa_env/scenes/reach/reach_env.py"", line 216, in _init_sim; super()._init_sim(); File ""/home/sofa/SOFA/v22.06.00/bin/lapgym/sofa_env/sofa_env/base.py"", line 230, in _init_sim; self.scene_creation_result = getattr(self._scene_description_module, ""createScene"")(self._sofa_root_node, **self.create_scene_kwargs); File ""/home/sofa/SOFA/v22.06.00/bin/lapgym/sofa_env/sofa_env/scenes/reach/scene_description.py"", line 98, in createScene; add_scene_header(; File ""/",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:5778,Config,ConfigurationSetting,5778,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,2,['Config'],['ConfigurationSetting']
Modifiability,:/Users/hemingshan/Code/sofa/build/collections:/Users/hemingshan/Code/sofa/build/lib; [INFO] [runSofa] DataRepository paths = /Users/hemingshan/Code/sofa/src/share:/Users/hemingshan/Code/sofa/src/examples:/Users/hemingshan/Code/sofa/build:/Users/hemingshan/Code/sofa/build; [INFO] [runSofa] GuiDataRepository paths = /Users/hemingshan/Code/sofa/src/applications/projects/runSofa/resources:/Users/hemingshan/Code/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources:/Users/hemingshan/Code/sofa/build; [INFO] [runSofa] Loading automatically plugin list in /Users/hemingshan/Code/sofa/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Forward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Backward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.Mesh.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Playback.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SceneUtility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Constant.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Dynamic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Grid.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topolo,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:1539,Plugin,PluginManager,1539,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,:/github-clones/sofa/src/examples;D:/github-clones/sofa/build;D:/github-clones/sofa/build; [INFO] [runSofa] GuiDataRepository paths = D:/github-clones/sofa/src/applications/projects/runSofa/resources;D:/github-clones/sofa/src/modules/SofaGuiQt/src/sofa/gui/qt/resources;D:/github-clones/sofa/build; [INFO] [runSofa] Loading automatically plugin list in D:\github-clones\sofa\build\bin\RelWithDebInfo/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaSimpleFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaDeformable.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaEngine.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGraphComponent.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaBoundaryCondition.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralAnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/b,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:5905,Plugin,PluginManager,5905,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,":; def __init__(self, MO):; super().__init__(); self.MO = MO. def onAnimateBeginEvent(self, _):; print(""\n\nonAnimateBeginEvent""); random_disp = np.random.normal(0, 1e-2, self.MO.position.value.shape); self.MO.position.value = self.MO.rest_position.value + random_disp; print(f""{random_disp[0]=}""); print(f""{self.MO.position.value[0]=}""). def onAnimateEndEvent(self, _):; print(""onAnimateEndEvent""); print(f""{self.MO.position.value[0]=}""). def createScene(root):; root.addObject('RequiredPlugin', pluginName=['BugPosition']); root.addObject(""MechanicalObject"", name=""MO"", template=""Vec3d"", position=[1, 0, 0]); root.addObject(""TestComponent"", position=""@MO.position""); root.addObject(Controller(root.MO)); ```. **Steps to reproduce**; I've put everything needed to reproduce the issue here https://github.com/jnbrunet/BugPosition. Hence, the following steps can be taken (the SOFA installation path must be changed, and SofaPython3 plugin must be installed alongside SOFA):; ```bash; export SOFA_ROOT=/opt/sofa; export PYTHONPATH=$PYTHONPATH:$SOFA_ROOT/plugins/SofaPython3/lib/python3/site-packages; ```; Then, compile and launch the scene; ```bash; git clone git@github.com:jnbrunet/BugPosition.git; cmake -DCMAKE_PREFIX_PATH=$SOFA_ROOT/lib/cmake -S BugPosition -B BugPosition/build -DCMAKE_BUILD_TYPE=Release; cmake --build BugPosition/build; python3 BugPosition/scene.py; ```; which should produce the erroneous results (random displacement isn't taken into account).; ```; (...); onAnimateBeginEvent; random_disp[0]=array([-0.01092411, -0.00742505, -0.01442109]); self.MO.position.value[0]=array([1., 0., 0.]); onAnimateEndEvent; self.MO.position.value[0]=array([1., 0., 0.]); ```. **Expected behavior**; The correct behaviour can be obtained using the GUI. In the previous example, simply adding the `gui` parameter to the scene will do the trick:. ```commandline; python3 BugPosition/scene.py gui; (...); onAnimateBeginEvent; random_disp[0]=array([-0.00746889, -0.01065234, 0.00446683]); self.MO",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2761:2661,plugin,plugin,2661,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761,2,['plugin'],"['plugin', 'plugins']"
Modifiability,":\n pass\nprint('#################')\"" )""; > ```; > ; > ```; > --- sys.version ---; > 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ]; > --- PATH ---; > /usr/local/opt/python@3.8/bin/:/opt/anaconda3/envs/sofarl/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/share/dotnet:~/.dotnet/tools; > --- SOFA_ROOT ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > --- PYTHONPATH ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages:/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages:/path/to/SofaPython3/lib/python3/site-packages:; > --- sys.path ---; > ['', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/path/to/SofaPython3/lib/python3/site-packages', '/opt/anaconda3/envs/sofarl/lib/python38.zip', '/opt/anaconda3/envs/sofarl/lib/python3.8', '/opt/anaconda3/envs/sofarl/lib/python3.8/lib-dynload', '/opt/anaconda3/envs/sofarl/lib/python3.8/site-packages']; > #################; > ```; > ; > ### Logs; > **Full output**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT an",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:4183,plugin,plugins,4183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,":warning: depends on #1488. This refactoring guarantees size consistency between `position / forces / velocity / external_forces` buffers when resized. Since those fields are coupled, changing the size of one should change the size of the others. except it's not the case.; plus, there's a ""size"" datafield that is supposed to determine the size of the buffers. Thus it is now impossible to edit the size of those buffers directly. any insertion / removal of a line in the buffers must be preceded with a change of size, which in turn will redimension the buffers. Also: When creating the scene (before executing the simulation) init_size and init_position should be used.; The idea behind that last change is that we should have separate datafields for inputs and outputs, instead of mixing both concepts together. :warning: **THIS IS BREAKING** because there are probably tons of codes out there that resize position manually and then call` init / reinit / bwdInit` on MOs, hoping for them to update the component (I should know I've been doing it for 6years :D). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1489:33,refactor,refactoring,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1489,1,['refactor'],['refactoring']
Modifiability,"; /bd_targaryen/users/kleelakunwet/miniconda3/envs/sofa/bin:/bd_targaryen/users/kleelakunwet/miniconda3/condabin:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/snap/bin; --- SOFA_ROOT ---; --- PYTHONPATH ---; --- sys.path ---; ['', '/bd_targaryen/users/kleelakunwet/miniconda3/envs/sofa/lib/python39.zip', '/bd_targaryen/users/kleelakunwet/miniconda3/envs/sofa/lib/python3.9', '/bd_targaryen/users/kleelakunwet/miniconda3/envs/sofa/lib/python3.9/lib-dynload', '/bd_targaryen/users/kleelakunwet/.local/lib/python3.9/site-packages', '/bd_targaryen/users/kleelakunwet/miniconda3/envs/sofa/lib/python3.9/site-packages']; #################. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. [ 12%] Building CXX object Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/FileSystem.cpp.o; [ 12%] Building CXX object Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/PluginManager.cpp.o; [ 12%] Building CXX object Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/FileRepository.cpp.o; [ 12%] Building CXX object Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/FileMonitor_linux.cpp.o; /bd_targaryen/users/kleelakunwet/sofa/src/Sofa/framework/Helper/src/sofa/helper/system/FileRepository.cpp:34:10: fatal error: filesystem: No such file or directory; #include <filesystem>; ^~~~~~~~~~~~; compilation terminated.; Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/build.make:733: recipe for target 'Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/FileRepository.cpp.o' failed; make[2]: *** [Sofa/framework/Helper/CMakeFiles/Sofa.Helper.dir/src/sofa/helper/system/FileRepository.cpp.o] Error 1; make[2]: *** Waiting for unfinished jobs....; /bd_targaryen/users/kleelakunwet/sofa/src/Sofa/framework/Helper/src/sofa/helper/system/PluginManager.cpp:30:10: fatal error: filesystem: No such file or",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4527:2777,Plugin,PluginManager,2777,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4527,1,['Plugin'],['PluginManager']
Modifiability,; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collection SofaBoundaryCondition; Adding collection SofaGeneralAnimationLoop; Adding collection SofaGeneralDeformable; Adding collection SofaGeneralEngine; Adding collection SofaGeneralExplicitOdeSolver; Adding collection SofaGeneralImplicitOdeSolver; Adding collection SofaGeneralLinearSolver; Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:7734,plugin,plugin,7734,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,10,['plugin'],"['plugin', 'plugins']"
Modifiability,"; import Sofa; import Sofa.Core. def createScene(; root_node: Sofa.Core.Node,; ) -> Sofa.Core.Node:. plugin_list = [; ""Sofa.Component.Collision.Detection.Algorithm"", # [BVHNarrowPhase, BruteForceBroadPhase, DefaultPipeline]; ""Sofa.Component.Collision.Detection.Intersection"", # [NewProximityIntersection]; ""Sofa.Component.Collision.Geometry"", # [SphereCollisionModel]; ""Sofa.Component.Collision.Response.Contact"", # [DefaultContactManager]; ""Sofa.Component.Constraint.Projective"", # [FixedConstraint]; ""Sofa.Component.LinearSolver.Iterative"", # [CGLinearSolver]; ""Sofa.Component.Mass"", # [UniformMass]; ""Sofa.Component.ODESolver.Backward"", # [EulerImplicitSolver]; ""Sofa.Component.SolidMechanics.Spring"", # [StiffSpringForceField]; ""Sofa.Component.Topology.Container.Dynamic"", # [EdgeSetTopologyContainer, EdgeSetTopologyModifier]; ""Sofa.Component.Visual"", # [VisualStyle]; ""SofaCarving"", # [CarvingManager]; ""Sofa.Component.StateContainer"", # [MechanicalObject; ]. plugin_node = root_node.addChild(""Plugins""). for plugin in plugin_list:; plugin_node.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root_node.addObject(""DefaultAnimationLoop""); root_node.addObject(""DefaultVisualManagerLoop""); root_node.addObject(; ""VisualStyle"",; displayFlags=[""showVisual"", ""showForceFields"", ""showCollisionModels"", ""showBehaviorModels"", ""showInteractionForceFields""],; ). root_node.addObject(""DefaultPipeline""); root_node.addObject(""BruteForceBroadPhase""); root_node.addObject(""BVHNarrowPhase""); root_node.addObject(""DefaultContactManager"", response=""PenalityContactForceField""). root_node.addObject(; ""NewProximityIntersection"",; alarmDistance=3.0,; contactDistance=0.5,; ). root_node.gravity = [0.0, -918, 0.0]. scene_node = root_node.addChild(""scene""); #############; # Cutting Sphere; #############; cutting_sphere_node = scene_node.addChild(""cutting_sphere""); cutting_sphere_node.addObject(""CGLinearSolver""); cutting_sphere_node.addObject(""EulerImplicitSolver""); cutting_sphere_node.addObject(""Po",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1224323251:1065,Plugin,Plugins,1065,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1224323251,1,['Plugin'],['Plugins']
Modifiability,"; public CwiseBinaryOpImpl<; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:669:32: note: in instantiation of template class 'Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::SparseMatrix<double, 1, int>, const Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; return derived() = derived() + other.derived();; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyHelper.h:53:14: note: in instantiation of function template specialization 'Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 1, int> >::operator+=<Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; lval += rval;; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:536:27: note: in instantiation of function template specialization 'sofa::add<Eigen::SparseMatrix<double, 1, int>, Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; if( !empty(Jp0) ) add( it->J, shift_left<rmat>( 0, it->ff->getMechModel1()->getMatrixSize(), it->H.rows() ) * Jp0 );; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/util/XprHelper.h:539:66: note: partial specialization matches [with LhsKind = Eigen::Sparse, LhsOrder = 1, RhsOrder = 0]; template <typename LhsKind, int LhsOrder, int RhsOrder> struct cwise_promote_storage_order<LhsKind,Sparse,LhsOrder,RhsOrder> { enum { value = RhsOrder }; };; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/util/XprHelper.h:540:66: note: partial specialization matches [with RhsKind = Eigen::Sparse, LhsO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:5017,plugin,plugins,5017,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499,1,['plugin'],['plugins']
