quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Deployability,"> Do we need to use `peripheral_node` (defined in `Grids`) in `pressure_correct_velocities` kernel? eg here:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/ddf322f7faa47980bfe4de5bbd203696f419f9e2/src/Models/NonhydrostaticModels/pressure_correction.jl#L31-L37; > ; > perhaps filling the pressure halo regions ensures this works (eg the boundary-normal velocities are not updated, because `pNHS` has zero gradient across `Bounded` boundaries). I'm not sure there is any point in applying this to the peripheral nodes since that gradient will always be zero?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2147261868:377,update,updated,377,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2147261868,1,['update'],['updated']
Deployability,> Do you mean when we're computing a diagnostic like vorticity should the kernel include the boundary point?. > > Can you point me to where in the code this goes down?; > ; > It happens in this halo fill:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/45838a57dd5ebc1153c2c827f83cb848d20e4c92/src/Models/NonhydrostaticModels/pressure_correction.jl#L8-L20; > ; > after the tendency integration but before the pressure correction. Where is the halo filling code?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389163421:387,integrat,integration,387,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2389163421,1,['integrat'],['integration']
Deployability,"> Documenter 1.0 had a lot of breaking changes and the version isn't pinned here so maybe that's the issue?. Btw, just a note: . The version of Documenter is pinned since we use the Docs/Manifest.toml and build the docs _without_ calling `Pkg.develop`... See, e.g., . https://github.com/CliMA/Oceananigans.jl/blob/4f26afb2b509870a5448943198b1b5c404a86430/.buildkite/pipeline.yml#L614. https://github.com/CliMA/Oceananigans.jl/blob/4f26afb2b509870a5448943198b1b5c404a86430/docs/make.jl#L5-L11. The above enforce the docs built to use the package versions from the `docs/Manifest.toml`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3322#issuecomment-1755753805:366,pipeline,pipeline,366,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3322#issuecomment-1755753805,1,['pipeline'],['pipeline']
Deployability,"> Does Oceananigans.jl actually work with CubedSphere.jl v0.1? I'm just assuming stuff has been fixed/updated since then, but it's still in the `[compat]`. Tried it and `test_multiregion_cubedsphere.jl` was failing with CubedSphere v0.1 so I removed the compat entry! Good catch @ali-ramadhan",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3763#issuecomment-2333005350:102,update,updated,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3763#issuecomment-2333005350,1,['update'],['updated']
Deployability,"> Does it have to do with output? Do you know what the time-step is when this happens?I'm wondering if it has to do with using a very small time-step, leading to a round-off error issue. That would also explain why it doesn't affect dynamics, because huge pressure gradient integrated over a machine epsilon duration may not have an impact. Are you referring to the fact that sometimes `model` has to use a very tiny time-step to bridge the gap between the current time and the output time? If so, that's an interesting possibility that I hadn't considered. Although in the example above I'm fixing the time-step at `25`, while the output time interval is `200`, so I wouldn't expect any issues there. Also wouldn't that also affect simulations with `buoyancy=nothing` if the pre-output time-step were to blame?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3593#issuecomment-2103004854:274,integrat,integrated,274,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3593#issuecomment-2103004854,1,['integrat'],['integrated']
Deployability,"> Does this have advantages in terms of speed?. I think we hope the code is similar under the hood but it's hard to say without knowing more about Tullio. This update is more general though, because it will work out of the box on distributed systems / multiple GPUs / multi region scenarios like the cubed sphere (because we will support reductions for those cases).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2252#issuecomment-1044487498:160,update,update,160,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2252#issuecomment-1044487498,1,['update'],['update']
Deployability,"> Don't forget to rename the release with an emoji. Each release gets an emoji!. Mostly I was stressed about picking one that's why I wanted you to do it. But I should toughen up, take responsibilities, and pick the emoji myself. :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1343#issuecomment-775391965:29,release,release,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1343#issuecomment-775391965,2,['release'],['release']
Deployability,"> Go for it. Thanks! `Project.toml` is already at 0.90.14, while the last registered version is still at 0.90.13, so I'll just register a new version without bumping the patch number.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3567#issuecomment-2088701234:170,patch,patch,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3567#issuecomment-2088701234,1,['patch'],['patch']
Deployability,"> Greg, Doesn't Ali have a version of immersed boundary layers going?. @johncmarshall54, Ali experimented with a simple immersed boundary implemented via Oceananigans's user-defined forcing functions. The code is these 9 lines:. https://github.com/CliMA/Oceananigans.jl/blob/a921fc3edbf795bf4a2193cca84cad41ebdd5625/verification/flow_around_cylinder/flow_around_cylinder.jl#L18-L27. This implementation damps the velocity field to zero on a very fast time-scale (specified by the parameter `K`) within the immersed boundary. This is certainly a nice, simple immersed boundary implementation for Dirichlet / Value boundary conditions and could be a good starting point. However, I also think there's some good reasons to pursue an alternate immersed boundary implementation to what @ali-ramadhan has done:. 1. @ali-ramadhan's implementation doesn't obviously extend to other boundary conditions, like prescribed gradients or fluxes (the latter being crucial for the geophysical problems we're interested in). So, even if we use a continuous forcing method similar to @ali-ramadhan's implementation, we need to figure out how to enforce boundary conditions other than Dirichlet boundary conditions.; 2. @ali-ramadhan's implementation conforms exactly to the grid; however we would like to be able to model smoothly-varying boundaries.; 3. As noted by @whitleyv, @ali-ramadhan's ""continuous forcing method"" implementation introduces a time-step restriction due to the need to explicitly resolve the damping time-scale in the forcing function. It seems that a discrete forcing method overcomes this restriction and could prove crucial for geophysical problems that involve otherwise long time-steps.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1036#issuecomment-707412244:1029,continuous,continuous,1029,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1036#issuecomment-707412244,2,['continuous'],['continuous']
Deployability,"> Hello, @amontoison. Nice work. Do you see a performance improvement when switching to this package? There should be some benchmarks in the `benchmark` folder that we can test (probably we need to update that folder a bit, let me know if you have problems with it). Hi @simone-silvestri, `cg` is not too hard to implement, so I don't think we will see a significant performance improvement on CPU. ; However, for other methods like `gmres`, `Krylov.jl` easily outperforms `IterativeSolvers.jl`.; On GPU, though, we might see a difference because I try to dispatch to the BLAS/LAPACK routines of the GPU vendors as much as possible, whereas `IterativeSolvers.jl` relies on some broadcast. Also, to the best of my knowledge, only `cg` works on (NVIDIA) GPUs for `IterativeSolvers.jl`, while all solvers in `Krylov.jl` work on the GPUs of any vendor. I'll try to run some benchmarks before the end of the week.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2373076041:198,update,update,198,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2373076041,1,['update'],['update']
Deployability,"> Hi, is there a reason why this isn't in the official examples?. Is it ready? This comment suggests it's not:. > This PR in a work-in-progress and depends on #1091. I still need to make it Literate. Perhaps @ali-ramadhan wouldn't mind some help though. It's probably stale right now and would need a merge master and update.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1244#issuecomment-891817915:318,update,update,318,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1244#issuecomment-891817915,1,['update'],['update']
Deployability,"> Hmm I'll have a go at that tomorrow. Weirdly when I try and run the above script from the Oceananigans repo (i.e. not installed with Pkg) I do not get this problem. That might suggest its an interaction with another package, because when you use Oceananigans' repo you probably use the repo's Manifest.toml; otherwise you may be pulling in different packages. You can compare the Oceananigans Manifest to whatever Manifest gets used in the slow case. I think there may be tools for comparing Manifests?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1806472691:120,install,installed,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1806472691,1,['install'],['installed']
Deployability,> Hmmm I thought this line would be enough; > ; > https://github.com/CliMA/Oceananigans.jl/blob/723ff2d69bb486a856c9748f84e56aef5e524c9e/docs/make.jl#L150; > ; > but you're right we used to use the `TRAVIS_REPO_SLUG` environment variable for this I think.; > ; > Looks like the GitHub Actions equivalent is `GITHUB_REPOSITORY` like you linked to.; > ; > But there doesn't seem to be one for Buildkite... https://github.com/JuliaDocs/Documenter.jl/blob/fa459cf315425d4fc5bdfbd6769f3b0e78f4a795/src/deployconfig.jl#L644-L666. Perhaps you are right that nowadays (with more recent Documenter versions) ; https://github.com/CliMA/Oceananigans.jl/blob/723ff2d69bb486a856c9748f84e56aef5e524c9e/docs/make.jl#L150; suffices. Bit while ago it wasn't enough! :) . I'll test it though and we'll find out.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782353270:497,deploy,deployconfig,497,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782353270,1,['deploy'],['deployconfig']
Deployability,"> How is it possible for this to affect how we achieve anything? We never have the `condition` separate from the `classification`. We always have them together. At some point we have to get the external value, and if it's in the condition slot in `BoundaryCondition` we can get it like this:; https://github.com/CliMA/Oceananigans.jl/blob/77ee4980a32d39d802fc6c7b2a8ef81b4c6c0c1a/src/BoundaryConditions/fill_halo_regions_value_gradient.jl#L9. which can be e.g.; https://github.com/CliMA/Oceananigans.jl/blob/77ee4980a32d39d802fc6c7b2a8ef81b4c6c0c1a/src/BoundaryConditions/continuous_boundary_function.jl#L124-L133; which is called because of there being a `ContinuousBoundaryFunction` in the `BoundaryCondition` type:; https://github.com/CliMA/Oceananigans.jl/blob/77ee4980a32d39d802fc6c7b2a8ef81b4c6c0c1a/src/BoundaryConditions/continuous_boundary_function.jl#L119; which was automatically set-up and then `regularize`-d. https://github.com/CliMA/Oceananigans.jl/blob/77ee4980a32d39d802fc6c7b2a8ef81b4c6c0c1a/src/BoundaryConditions/boundary_condition.jl#L53-L67. https://github.com/CliMA/Oceananigans.jl/blob/77ee4980a32d39d802fc6c7b2a8ef81b4c6c0c1a/src/BoundaryConditions/continuous_boundary_function.jl#L74-L75. But if we have this as part of the condition we get something like:; ```julia; BoundaryCondition{<:Open, <:OpenConditions{ES, MS}}; ```. then we'd have to rewrite loads of stuff to make it so the user can specify whatever they want for the external state. In the existing code the condition and classification are never directly accessed (except from inside `getbc`) and all of the other bits are based on the types:. https://github.com/CliMA/Oceananigans.jl/blob/77ee4980a32d39d802fc6c7b2a8ef81b4c6c0c1a/src/BoundaryConditions/fill_halo_regions_value_gradient.jl#L15. so we can just write methods like:. ```julia; @inline function _fill_west_halo!(j, k, grid, c, bc::BoundaryCondition{Open{<:SomeMatchingScheme}}, loc, args...); ```. I don't really understand how it makes the code any",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1988307344:657,Continuous,ContinuousBoundaryFunction,657,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1988307344,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,> How permanent is the Bickley jet validation experiment? Is it worth adding to the validation experiment Buildkite pipeline in the future?. Let's hold off but discuss with @francispoulin about potentially turning it into something more quantitative (we can use [Poulin and Flierl (2003)](https://journals.ametsoc.org/view/journals/phoc/33/10/1520-0485_2003_033_2173_tneobu_2.0.co_2.xml) as a reference!),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1366#issuecomment-780567324:116,pipeline,pipeline,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1366#issuecomment-780567324,1,['pipeline'],['pipeline']
Deployability,"> How sure are you about the precise version? Is `GPUCompiler@0.16.5` the breaking release for you?. I haven't tried to find the precise version, but `GPUCompiler@0.16.7` already creates the errors, so the breaking release is either 0.16.7 or 0.16.6.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418274125:83,release,release,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418274125,2,['release'],['release']
Deployability,"> However, I need to know what to do, exactly. What code should I put in the verification folder, and what is the format? A few more questions:. If we structure it like the stratified Couette flow verification, then we just need two scripts:; 1. A script that setups up the verification experiments and outputs data necessary to produce verification experiment plots. Probably just https://github.com/glwagner/ColumnModelOptimizationProject/blob/master/les/deepening_mixed_layer.jl; 2. A script that produces plots from the data. Using these plots we should be able to say whether the verification experiment is a ""pass"". I think you already did most of these in https://github.com/glwagner/ColumnModelOptimizationProject/tree/master/les/analysis. Could be more than two scripts or could be one script I guess. > Where do we write documentation for the verification experiments?. I would add a Markdown file in https://github.com/climate-machine/Oceananigans.jl/tree/master/docs/src/verification where we can add the plots too. > Are we continuously testing verification experiments to ensure they run with new versions of the code, or should verification experiments be tagged to a particular version of the code?. Yeah we should but they are expensive to run... Maybe we should do this manually before releasing new versions?. > I think all these questions should themselves be answered in the documentation, also. Otherwise it is not clear how to contribute new verification experiments. True. I can add a `verification/overview.md` describing the purpose of the verification experiments and how they're structured, how to contribute a new one, etc. > I think we should shelve Kato and Phillips, and instead pursue verification based on oceanic observations. Reproducing ocean observations will be far more challenging, but aligns better with our ultimate goals. Sounds like a good idea!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-562190948:1037,continuous,continuously,1037,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-562190948,1,['continuous'],['continuously']
Deployability,"> However, there are a few packages that are different in the test environment (e.g., test environment uses DataDeps and TimesDates). Thus, often one needs to first install those packages before they are able to include(""this_other_test_script.jl""). If you find yourself running lots of tests then its best to put these packages in your global environment. Then this pattern will work.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000000552:165,install,install,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000000552,1,['install'],['install']
Deployability,"> I [paused](https://github.com/JuliaRegistries/General/pull/59278) the release of 0.75.3 when I realised the pinning was not done correctly. wow, I didn't know you could do that",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2488#issuecomment-1112098203:72,release,release,72,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2488#issuecomment-1112098203,2,['release'],['release']
Deployability,"> I agree that we can do better and am keen to try things out. I need to think about this a little more before I can suggest an alternative. We might need to update the operators so that they specify when a dimension is ""not flat"". For example, for x-spacing we need the function. ```julia; const NonFlat = Union{Periodic, Bounded}; @inline Δx(i, j, k, grid::RegularRectilinearGrid{FT, NonFlat}) where FT = grid.Δx; ```. Instead of just. ```julia; @inline Δx(i, j, k, grid::RegularRectilinearGrid) = grid.Δx; ```. Hopefully we can then dispatch on `AbstractGrid` (or `AbstractRectilinearGrid`) as in. ```julia; @inline Δx(i, j, k, grid::AbstractGrid{FT, Flat}) where FT = one(FT); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1504#issuecomment-805154965:158,update,update,158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1504#issuecomment-805154965,1,['update'],['update']
Deployability,"> I agree with docs changes. But it would disrupt a lot of important ongoing work to remove the `validation` directory from the repo without providing an alternative place / way to collaborate on new features. So I think we should leave the `validation` scripts in the repo and discuss what to do next before removing them. Is there ongoing work there? I thought all ongoing work was supposed to be confined to PRs. That's what I've been doing. If that's true and we need to keep the `validation` dir, then at the very least we should make it obvious that those scripts aren't ready for users. The name ""validation"" kinda implies that users can use those scripts to validate their installation, so it's not a surprise that a lot of newcomers try those scripts out and get error. Maybe rename that dir to `work_in_progress`? And then put a `README.md` file in it explaining that most of the scripts are out-of-date?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873213393:681,install,installation,681,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873213393,1,['install'],['installation']
Deployability,"> I am not sure about the purpose of this PR. What is the reason we do not want to calculate the periphery in the nonhydrostatic model tendencies?; > ; > If there is a specific reason, does this solution also apply to immersed boundaries with active cell map? It seems like nothing changed for that case. Because some open boundary conditions integrate an alternative PDE on the boundaries (eg for radiation conditions). In other words the algorithm we are using is only valid for simple open boundary conditions (we designed it for impenetrable condition). More generally, the algorithm is wrong. There are two other benefits. First, we do not use the tendencies on the periphery. So this increases the clarity of the code. Previously, it might not be obvious that even though we compute tendencies on the boundary, we overwrite the field values in `fill_halo_regions!`. It saves a little bit of computation as well...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3814#issuecomment-2397256988:343,integrat,integrate,343,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3814#issuecomment-2397256988,2,['integrat'],['integrate']
Deployability,"> I am on the fence. In the cubed sphere aquaplanet (not even MPI but just on one GPU) the gain of performance is a factor 5 by using the efficient split explicit rather than filling the halos at each substep. We do not have to tackle this problem here or now, but we have keep in mind that fill halo is very inefficient and probably not the way to go. Maybe @ali-ramadhan finds a better way to have a gpu-compatible code that does not require adding boundary conditions in the operators. For example, if the boundary is fixed and not dependent on the interior variables, it might be possible just to fix the BC once before the sub stepping and just iterate without needing to use any update",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3268#issuecomment-2353997319:685,update,update,685,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3268#issuecomment-2353997319,1,['update'],['update']
Deployability,"> I can't run the MPI. I need to be directed to some instructions to setup my MPI. @simone-silvestri pointed at the [MPI docs](https://juliaparallel.org/MPI.jl/stable/configuration/#Configuration). Do I need MPIPreferences? I don't know... @glwagner did you have to use that? If not, why must I... we are using the same machine... What is your setup? Is your MPI executable path exported in the bash? Do you have a `Localpreferences.toml` file generated from MPIPreferences? ; Another way to use MPI.jl is through the [mpiexecjl](https://github.com/JuliaParallel/MPI.jl/blob/master/bin/mpiexecjl) command. I typically just use the mpirun executable, but this other approach might help",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2282771458:167,configurat,configuration,167,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2282771458,2,"['Configurat', 'configurat']","['Configuration', 'configuration']"
Deployability,"> I can't run the MPI. I need to be directed to some instructions to setup my MPI. Can you just install MPI without Oceananigans and run the examples there? I think that's the first step. I don't know if you need preferences or whatever but I would think not, I think that's for using MPI on a cluster",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2283087210:96,install,install,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2283087210,1,['install'],['install']
Deployability,> I clicked on `this code` but then obtained a 404 error. Could the link not be quite right?. Sorry that was because I had linked to a branch that got merged and doesn't exist anymore. I updated the original issue with a working link,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2445#issuecomment-1101591884:187,update,updated,187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2445#issuecomment-1101591884,1,['update'],['updated']
Deployability,"> I couldn't think of a way to implement this as a forcing function before, but perhaps I could use a callback to update an auxiliary field with the tendencies of the particles, and then add this as a forcing function, although I imagine that could use a lot more memory if there were a large grid and small amount of particles. I'm still wondering about this solution, which may both be _more general_ (since users can effect arbitrary changes to tracer tendencies, not just source/sink terms) and is less heavy in the source code. Right now, this PR makes some significant source code changes for what I think is a rather narrow application, which is disproportional compared to most of the other features we have I think. > although I imagine that could use a lot more memory if there were a large grid and small amount of particles. It seems the memory requirement of the forcing function approach is proportional to the number of _tracers_, not the number of particles --- right? We would nee an ""auxiliary tendency"" for every tracer; the memory requirement doesn't change based on the number of particles. If for some reason we cannot use a forcing function approach, we'll have to think carefully about how to design a flexible user API for ""particle-induced tracer forcing"". I think if we are going to add this then it should be more general than just a source/sink calculation --- ie, we should attempt to have a small source code addition that makes a wide range of new behavior possible, if we can.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248417125:114,update,update,114,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248417125,1,['update'],['update']
Deployability,"> I don't know the details here to provide useful feedback. Sorry... :(. That's a good point. This PR changed from when it was first introduced and it's much simpler in scope, so I updated the PR description. If that's enough for you to give me feedback, feel free to do so :). I'm only modifying the `NonhydrostaticModel` for now, as I'm not familiar with the hydrostatic one. (Not sure if eventually the same thing should be that for that...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1223371379:181,update,updated,181,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1223371379,2,['update'],['updated']
Deployability,"> I don't understand why we'd want the external state to be part of the classification, if its just the condition we can reuse all of the infrastructure for users to specify it as continuous or discrete functions etc. I'm proposing that `Open` is the classification, and that the condition can be `nothing` (what we currently use to denote an impenetrable boundary), or `OpenCondition`, which in turn contains the external state and the method used to match the external and internal states. (Perhaps we can come up with a better name than `OpenCondition`.). I'm happy to consider other ideas. You have to propose them concretely with pseudocode and example usage.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1982357077:180,continuous,continuous,180,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1982357077,1,['continuous'],['continuous']
Deployability,"> I have also realised that we need to have an exterior value for every open boundary for when the flow spontaneously becomes an inflow so I think it would make sense to have every open boundary be the same and just be `OpenBoundaryCondition(external_value)`, and then put the tendencies etc in as arguments to `_fill_X_halo!`. Then when `U_b` is negative we either set the value or do nudging like in ROMS to prevent shocks (but I think this is a question for further down the line). We might also want to consider oblique waves but that shouldn't be too hard to extend to we might just have to calculate a lot of surrounding points which might motivate some other way to do it.; > ; > Does this make sense to everyone? I also can't see an obvious way to get Δt to the halo fill since it doesn't even make it into the `update_state!` so any suggestions would be appreciated. To clarify, the statement ""when U_b is negative"" means more generally ""when U_b implies inflow into the domain"". It makes sense to me that inflow is prescribed, whereas outflow is a little tricker, requiring us to smoothly advect information out of the domain. Having the boundary condition depend on the previous time-step does seem to break assumptions we have made about how information flows. For example, we call `update_state!` during model construction. How does the first time-step / initialization work with this kind of outflow model? It might help to consider that. Practically speaking it would not be hard to pass the time-step to update state. But it might be nice to understand the implications before committing, because a different design / redesign could make sense. For example I supposed we would need to have a default ""time step"" that is 0.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1972515289:1520,update,update,1520,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1972515289,1,['update'],['update']
Deployability,"> I m wondering if this issue is solved in the new version. It is! Although I'll move the masking from the model update to the output construction since it doesn't change model runs and it saves time. Tests should be passing, although apparently the GPU runs aren't running currently",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1218827709:113,update,update,113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1218827709,1,['update'],['update']
Deployability,"> I might suggest renaming DirectionalDiffusivity to AnisotropicDiffusivity for consistency. For some reason I convinced myself that it wasn't actually anisotropic. But thinking about it over a fresh cup of coffee I realize it is. I may also change `ScalarDiffusivity` to `IsotropicDiffusivity`... ?. > With the growing amount of notation for the operators and even things like G for source terms we should probably create a page in the docs that explains the code notation. Could be a useful reference. I like this idea. It also motivates us to be careful and systematic about using and introducing notation. The notation should be easy to read, concise, clear, and as meaningful as possible. This PR essentially proposed that we have a suite of operators that are denoted with a single symbol, appended by the direction they act in, and subscripted by the location at which they act (`caa` for something in x, `cca` for double interpolation, etc.). > We already have a subsection that describes the governing equations. I don't object to giving it its own page. That's what I meant. I am wondering if we can elevate the governing equations to a separate page (they are important!) I'd prefer not to characterize the governing equations as part of the numerics. The numerics discretize the continuous equations, and the continuous equations exist independently of numerics.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495596405:1291,continuous,continuous,1291,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495596405,2,['continuous'],['continuous']
Deployability,> I see that this PR moved LangangianParticles module inside Models. This is breaking change and we should bump minor release. Do I just need to change the version number in `Project.toml`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1532748737:118,release,release,118,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1532748737,1,['release'],['release']
Deployability,"> I sent a flurry of updates once I had the validation case coded up! It should work now. Wait, what should I do to test that? haha",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2390#issuecomment-1082109978:21,update,updates,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2390#issuecomment-1082109978,1,['update'],['updates']
Deployability,> I suggest a patch release?. yes that will be useful,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3585#issuecomment-2147991393:14,patch,patch,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3585#issuecomment-2147991393,2,"['patch', 'release']","['patch', 'release']"
Deployability,> I think CairoMakie is quite slow... that's one problem... Yea... I think we can install OpenCL on tartarus and then GLMakie will be fast.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1065032559:82,install,install,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1065032559,1,['install'],['install']
Deployability,"> I think it would be good to have the Stokes drift profile available somewhere. So even though only the Stokes shear is used in Oceananigans, I think it is still useful to get the Stokes drift at every level and then differentiate that to get the Stokes shear. I agree! Just to makes sure we're on the same page, it seems we need two separate functions to calculate both the Stokes velocity and Stokes shear averaged over a finite volume cell:. 1. The finite-volume-averaged Stokes _shear_ is the difference between a continuous expression for the Stokes velocity evaluated at the top and bottom of a cell; 2. The finite-volume-averaged Stokes velocity is the difference between a continuous expression for the total-depth-averaged Stokes velocity at the top and bottom of a cell. > In terms of implementation the ""theory wave"" is easier -- it's essentially a function of wind speed (the integration over the empirical wave spectrum is done analytically). We just need to apply it multiple time to different depths and then differentiate that to get the layer averaged Stokes drift. For the model used in Harcourt and D'Asaro (2008) we need to do the integration over the empirical wave spectrum numerically. And in addition to wind speed, it also depends on wave age. So I would probably start from the ""theory wave"". Very useful information, thank you!. > I guess it should be straightforward to convert [the Fortran function in GOTM](https://github.com/gotm-model/code/blob/master/src/stokes_drift/stokes_drift_theory.F90) to Julia?. That depends strongly on my fortran-reading skills but yes, I think so! We still need to write down a continuous expression for the Stokes velocity though, I think. There's some difficulties because the Stokes velocity diverges near the surface? We can perhaps make some approximation there.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2290#issuecomment-1055347887:519,continuous,continuous,519,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2290#issuecomment-1055347887,5,"['continuous', 'integrat']","['continuous', 'integration']"
Deployability,"> I think it's a nice idea to illustrate using `Oceanostics` for something that would be challenging for a user to implement themselves, like calculating viscous dissipation. Can we visualize dissipation and buoyancy flux, and then illustrate closing the domain-integrated TKE budget using domain-averages of those quantities?. It's definitely possible, but I think this isn't the example to do that. Since it's a tilted boundary layer, there's some extra complexity in the TKE budget. It's not a technical obstacle of anything, but it would require more explanation. I think the ocean convection example would be a much better option for a TKE budget.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-953910752:262,integrat,integrated,262,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-953910752,1,['integrat'],['integrated']
Deployability,"> I think prior to the changes we grouped into our ""upgrade to julia 1.6"" we were using the function `CUDA.pow` (from an ancient `CUDA.jl` version). Ah, in that case we were doing something pretty bad: https://github.com/JuliaGPU/CUDAnative.jl/blob/199f9b8ebb1f2fc9d7c14547efa9bcc14f4130c3/src/device/cuda/math.jl#L209. The new default, converting Int64 exponents to Float64, seems better. Unless `power_by_squaring` performs better in realistic applications?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869833684:52,upgrade,upgrade,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869833684,1,['upgrade'],['upgrade']
Deployability,"> I think see your point (I'm not sure I grasp the totality of it). Is your point that we are able to _re-use_ more existing code if we allow `ContinuousBoundaryFunction` and `DiscreteBoundaryFunction` as `condition`? I didn't understand this previously so thank you for clarifying. Sorry I wasn't clearer before. > To re-use that code with a new `condition`, we can use a nesting technique:; > ; > ```julia; > function getbc(open_bc::OpenBoundaryCondition, ...); > state_value = getbc(open_bc.condition.external_state, ...); > # other stuff related to matching; > end; > ```; > ; > This means that we don't have to rewrite anything, we just add new functionality for open boundary conditions on top. I can see how this could work. As it currently is `getbc` expects a full `BoundaryCondition` so we would need to-do some rewriting of that to unpack like `getbc(bc::BoundaryCondition, ...) = getbc(bc.condition, ...)` and then modify all of the existing `getbc` methods. > On the flip side, the advantage of making a new `OpenCondition` is that `getbc` retains its meaning as ""the function that returns the boundary condition value"". When we have an external state + matching scheme, the boundary condition values are not exactly the external state and are modified by the matching scheme. I see your point. For e.g. gradient boundary conditions it feels like the ""boundary condition value"" being the gradient at the boundary has about as much meaning as the boundary condition value for an open boundary condition being the external state and then we do some matching to get the internal solution to approximate it. But its quite unclear since an open boundary isn't mathematically defined like the other conditions so I think whatever we settle on is really equally as valid. . `getbc` is also not part of the API right? So if in the new code we say `external_value = getbc(...)` it should be clear enough to a future developer how it's being used and we shouldn't need to worry that a user would be",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1991781582:143,Continuous,ContinuousBoundaryFunction,143,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1991781582,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"> I think the hard part on giving instructions for running it on HPCs is that it all depends on the distribution, permissions, jobs manager etc..; > ; > It is hard to generalize, unless there is an easy way to do so that I haven't thought. I thought about creating a Docker image that could simply run for Julia with all dependencies, but Chris warned on how tricky it is to make Docker work with the GPU efficiently. So I just think this is not applicable.; > ; > I am trying to install Julia with the main packages and Oceananigans dependencies on the HPCs that I have access and this is not being easy. Sometimes Julia is outdated, or it doesn't precompile packages properly etc.; > ; > Python's Conda is very handy for these situations, but It might just be the case I am too new in Julia for the things I am trying to do. I hear ya. @glwagner suggested something interesting which is to leave a discussion open on installing Julia on HPCs where people could post their experiences and help each other. I quite like that idea and if you're willing to open a discussion you can be the first one to benefit from it :). We could you out regarding the troubles you've been having",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2312#issuecomment-1062500978:480,install,install,480,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2312#issuecomment-1062500978,4,['install'],"['install', 'installing']"
Deployability,"> I think the immersed boundary condition should be an `ImmersedBoundaryCondition`; > ; > ```; > @inline linear_drag(i, j, k, grid, clock, fields) = - 0.2 * fields.u[i, j, k]; > ; > drag_u = FluxBoundaryCondition(linear_drag, discrete_form=true); > u_immersed_bc = ImmersedBoundaryCondition(bottom = drag_u); > u_bcs = FieldBoundaryConditions(bottom = drag_u, immersed = u_immersed_bc); > ```; > ; > I do not think we can use the continuous form because `ImmersedBoundaryCondition` should behave just as another `FieldBoundaryCondition` which is 3D instead of 2D and I do not see a `getbc` defined for a `3DBoundaryFunction` (they are only defined for `XBoundaryFunction`, `YBoundaryFunction` and `ZBoundaryFunction`); > ; > we can probably add here the `getbc` method for a _continuous_ immersed boundary condition. This is a specific choice that depends on the boundary condition one is trying to implement. For ""simple"" boundary conditions, we don't need to invoke `ImmersedBoundaryCondition` because. https://github.com/CliMA/Oceananigans.jl/blob/95206ae73e10460beebb2ce9d5fc9945523e5724/src/ImmersedBoundaries/immersed_boundary_condition.jl#L242-L245. For boundary conditions that impose _only bottom drag_ but _not_ side drag, then we do need to use `ImmersedBoundaryCondition` as indicated.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2632#issuecomment-1171935502:430,continuous,continuous,430,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2632#issuecomment-1171935502,2,['continuous'],['continuous']
Deployability,"> I think the purpose of versioning is to communicate to users and developers about bug fixes and API changes, and we should stick to that when motivating our decisions. I pretty much agree with @glwagner, and I'm not arguing against that. Just to be clear, I never said not to follow SemVer. I'm also not advocating to release v1.0 _now_. I'm just saying I see a reason to tag v1 before all the items in the wishlist are done.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1234#issuecomment-885746605:320,release,release,320,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1234#issuecomment-885746605,1,['release'],['release']
Deployability,"> I think we kind of have a difference in the interface between particles and body forces. For tracers etc we always launch a kernel over every cell, get the arguments for the forcing at that point, and pass that to forcing functions. But for particles, the only way to add forcings (without making custom structs) is through the `custom_dynamics` where we just give the users forcing function all of the particles together and leave them to e.g. launch a kernel over all of them. Agree, but what point are you trying to make? I don't understand. > ; > It might be helpful to add this kind of forcing more similar to the first interface and ask users to define slip velocity functions with arbitrary arguments e.g. `w(x, y, z, t, $\rho$, d)`, and then we make the inside of the lagrangian particle advection kernel pass the correct particle properties to the function. This is basically what I was suggesting. > ; > I don't think it would be as simple to generalise particle forcings because we don't know what users want to do with the properties and in the current setup couldn't assume that they want every particle property integrated from some tendency function. I don't understand what you're trying to say. Can you elaborate or give an example?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1819351891:1128,integrat,integrated,1128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1819351891,2,['integrat'],['integrated']
Deployability,"> I think we need an required_biogeochemical_auxiliary_fields like required_biogeochemical_tracers because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field). Should the user specify this, or should the biogeochemical model add it its struct (taking in `grid` for this purpose) and evaluate it during `update_biogeochemical_state`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310889513:401,integrat,integrating,401,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310889513,1,['integrat'],['integrating']
Deployability,> I think we need stretched WENO with 2D coefficients. Now `WENO(grid)` assumes 1D coefficients which is okay for latitude-longitude and rectilinear but not for cubed sphere.; > ; > It will be straightforward to update WENO once everything is in place. Good point. So if I fall back to the default scheme for tracers then it should be OK?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3266#issuecomment-1723492480:212,update,update,212,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3266#issuecomment-1723492480,1,['update'],['update']
Deployability,"> I think we should link to https://julialang.org/learning/getting-started/; > ; > and also take care not to repeat any material there. I actually think we should give a bit of the gist here too. A little overlap is okay because I think it helps users get an overview in one place before committing to install Oceananigans (lets them know how easy it is). Although I agree we should link Julia's ""getting started page"" too and what I wrote may be on the side of too much information. > @tomchor do you mind if I edit this PR?. Not at all. Go for it!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2312#issuecomment-1060054262:302,install,install,302,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2312#issuecomment-1060054262,2,['install'],['install']
Deployability,"> I think we should write a `Field` tutorial that covers this (and everything else...) It's been on my todo list for so many eons. If you start a PR I can help populate it over time (I'm guessing other people would probably wanna contribute too). > `fill_halo_regions!` certainly is important. This function fills the halo regions of a field --- that is, a buffer of cells that surrounds the ""interior"" (physical part) of the domain. The halo regions are touched when we evaluate gradients or interpolate across boundaries. They are also used for distributed models (there the halo regions need to be communicated between different regions / processes). In general, the halo regions are linked to the interior values of the field --- so every time interior values are updated, halo regions must be updated for the entire state to be consistent. In short, we need to fill halo regions so that 1) spurious fluxes are not added while evaluating flux divergences across `Bounded` boundaries for `FluxBoundaryConditions`; 2) periodicity is correctly enforced in `Periodic` directions, 3) fluxes are correct for `Value/Gradient` boundary conditions.; > ; > I think our philosophy is generally that we want an API in which users don't need to call this function. It's just that people want to do ~crazy~ creative and cool!! things and writing an API that supports it all is hard. Or maybe more importantly its a chicken-egg problem so we (developers) need to _see_ the applications in action _first_, then we can design an API (at least for those wild applications out there).; > ; > That docs section would blur the boundaries between ""developer documentation"" and ordinary documentation (we also need developer documentation...). We could put that in a section called ""Information for advanced users"" or something like that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2442#issuecomment-1100305964:768,update,updated,768,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2442#issuecomment-1100305964,2,['update'],['updated']
Deployability,"> I think we want to introduce this major change to operators in a separate PR right? We also have to change derivatives, abstract operations, and grid metric operations?. @glwagner separate PR is fine too. I haven't been keeping up with where definitive immersed_boundary bits are. It seemed like there were some important updates in global-lat-lon. I am not clear if it can be a PR against main, since main may be missing some immersed bc bits this uses. There are still some bits to work on after the bits in this PR, to get everything fully consistent. I am surprised things run as well as they do at the moment!! I think somehow we must end up with the bathymetry shifted a bit weird. It would be nice to fix, both implicit solve and split explicit are going to struggle I think without this patched up somehow.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2055#issuecomment-966741761:324,update,updates,324,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2055#issuecomment-966741761,4,"['patch', 'update']","['patched', 'updates']"
Deployability,"> I tried to run, but can't find `AdvectiveForcing()`; > ; > But I noticed that this is listed in https://github.com/CliMA/Oceananigans.jl/blob/glw/forcing-features/src/Forcings/Forcings.jl; > ; > It also doesn't find `ContinuousForcing`, for instance. `ContinuousForcing` isn't exported by `using Oceananigans`; we have to get that name specifically: `using Oceananigans.Forcings: ContinuousForcing`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1081987518:219,Continuous,ContinuousForcing,219,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1081987518,3,['Continuous'],['ContinuousForcing']
Deployability,"> I updated the model equations and you can find the code here. Nice!. > It occurs to me that I didn't include the topography in the conservative form. I can fix that easily enough but are there other things people would like fixed?; > ; > https://github.com/CliMA/Oceananigans.jl/blob/ss-fjp/non-conservative-shallow-water/docs/src/physics/shallow_water_model.md. You mean ""other things people need to fix"" in the `.md` file or in the code?. I'll have a go a the docs. It may be easier to push changes instead of commenting on file. Is this OK @francispoulin?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1141502801:4,update,updated,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1141502801,1,['update'],['updated']
Deployability,"> I would add a minimal test given this feature could change, and hopefully make sure the test doesn't increase CI cost much. Added the most minimal test I could think of and bumped the patch version since this is a bug fix. If everyone's okay with it, I'll merge if the tests pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2213#issuecomment-1028191876:186,patch,patch,186,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2213#issuecomment-1028191876,1,['patch'],['patch']
Deployability,"> I would advocate again for moving both CUDA and AMDGPU support into package extensions (see #3066 for an outdated start); > ; > Having the user install both AMDGPU and CUDA unconditionally is both space and time consuming, loading them both should be unnecessary on most systems and they may at times be incompatible with each other since both are developed independently from each other. That's a good idea. Maybe we can start by developing AMD support (this PR) in an extension, and then move CUDA after that (just to relieve some pressure on @fluidnumerics-joe).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1935396471:146,install,install,146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1935396471,1,['install'],['install']
Deployability,> I'd vote for bumping up a patch release. yes of course,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3474#issuecomment-1948944363:28,patch,patch,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3474#issuecomment-1948944363,2,"['patch', 'release']","['patch', 'release']"
Deployability,"> I'm not sure I exactly understand whats changed here because of all the renaming. The important changes are here right?; > ; > https://github.com/CliMA/Oceananigans.jl/blob/7cc97812d42982b2c8bd5635b40f807e800b2472/src/Utils/kernel_launching.jl#L120-L158; > ; > And this makes it so that instead of being able to optionally fill the right boundary point, you can set it to `true` and it will instead compute 2:N for face fields (and presumably still 1:N for center fields)?. Heh, I'd argue that without the renaming it would also be hard (harder) to understand! Especially for me... The outcome of this PR is a key change to the computation of nonhydrostatic tendencies, here:. https://github.com/CliMA/Oceananigans.jl/blob/7cc97812d42982b2c8bd5635b40f807e800b2472/src/Models/NonhydrostaticModels/compute_nonhydrostatic_tendencies.jl#L104-L115. In addition to that, we do not update the periphery regardless:. https://github.com/CliMA/Oceananigans.jl/blob/7cc97812d42982b2c8bd5635b40f807e800b2472/src/TimeSteppers/runge_kutta_3.jl#L172. The keyword `exclude_periphery` propagates into `work_layout` as noticed. When we use the `:xyz` specification, ask for `exclude_periphery`, and the location is `Face` and the topology is `Bounded`, then the kernel is configured to loop from 2:N. Otherwise, it loops from 1:N as usual. Hope that helps.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3814#issuecomment-2393866646:877,update,update,877,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3814#issuecomment-2393866646,1,['update'],['update']
Deployability,"> I'm still wondering about this solution, which may both be _more general_ (since users can effect arbitrary changes to tracer tendencies, not just source/sink terms) and is less heavy in the source code. Right now, this PR makes some significant source code changes for what I think is a rather narrow application, which is disproportional compared to most of the other features we have I think. > If for some reason we cannot use a forcing function approach, we'll have to think carefully about how to design a flexible user API for ""particle-induced tracer forcing"". I think if we are going to add this then it should be more general than just a source/sink calculation --- ie, we should attempt to have a small source code addition that makes a wide range of new behavior possible, if we can. I've reconsidered this now and think we may not even need any source code change to properly implement this behaviour and integrate some particle induced tracer forcing. If we have a model with some tracers `(:A, :B)` which we want to force with some particles, we can define an auxiliary field `G\_p=TracerFields((:A, :B), grid)`. We can then have a particle dynamics function that modifies `model.auxiliary_fields.G\_p`, for example sets the points surrounding the particles to `-A[i, j, k]` for `A`, and `+A[i, j, k]` for `B` like in my example above. You can then define a discrete forcing function for each of the tracers like `a_forcing(i, j, k, grid, clock, model_fields) = model_fields.G\_p.A[i, j, k]` etc. (this would only work with my other PR #2733 added so that the `auxiliary_fields` are available). > It seems the memory requirement of the forcing function approach is proportional to the number of tracers, not the number of particles --- right? We would nee an ""auxiliary tendency"" for every tracer; the memory requirement doesn't change based on the number of particles. My reservation with this was that if there's e.g. 1 particle effecting loads of tracers you have to store lots mor",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1249434312:920,integrat,integrate,920,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1249434312,1,['integrat'],['integrate']
Deployability,"> I'm thinking about updating `benchmarks.md` with the new benchmark result tables and graphs. Should I do it now or wait until the docs get refactored?; > It's only a single file in the appendix section, but I'm not too sure how me opening a PR on it now to update it will affect the grander refactoring plan. As @glwagner said, this refactoring is a long term plan. I think running new benchmarks now will definitely be a positive change and (imo) a great contribution to the docs ;)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880742532:259,update,update,259,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880742532,1,['update'],['update']
Deployability,"> I'm wondering if it might be a bit much to put docstrings on every single AbstractGridMetric for this experimental feature? They aren't exported so not user-facing (I think we may end up using this internally only for things like IntegratedField down the line). Fair point. But internal docstrings also help I think. It's way easier for me to contribute, for example, when the internal functions are well-documented. I think the more we add these, the more likely we are to get contributions from people outside of the regular group, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1607#issuecomment-826008043:232,Integrat,IntegratedField,232,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1607#issuecomment-826008043,1,['Integrat'],['IntegratedField']
Deployability,"> I've also offered to help configure testing on our systems, if someone wants to provide what is needed to integrate with slurm. https://github.com/CliMA/slurm-buildkite is what is being used IIUC. . Oceananigans doesn't use this afaik, but instead just uses runners on a private compute node.; Looks like me, @glwagner or @charleskawczynski have the right priviliges to create an agent token.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328798736:108,integrat,integrate,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328798736,1,['integrat'],['integrate']
Deployability,"> I've been thinking and we definitely need a way to know if the halos are being filled before or after the pressure correction. The main reason is because if we are explicitly stepping the boundary point (e.g. in the bulk outflow case) then we will step twice when we only meant to step once. It does leave the question of what the correct thing todo to the boundary point after the pressure correction, but that is a different matter.; > ; > I'm going to update the top comment with a list of changes made here. The way our algorithm works, we must enforce the penetration / no-penetration boundary conditions on wall-normal velocities prior to the pressure correction. Calling `fill_halo_regions!` does a bit more; we actually don't need to fill the other halos. Then we `fill_halo_regions!` after the time step is complete.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2136275742:457,update,update,457,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2136275742,1,['update'],['update']
Deployability,"> I've now had a play trying to wrap VkFFT with https://github.com/JuliaInterop/Clang.jl/tree/master but it is proving difficult given my inexperience with C.; > ; > Does anyone working on Oceananigans have experience doing that sort of thing?. Could be worth asking on julia slack! You'll have to ship an independent wrapper package (eg `VkFFT.jl`) and figure out how to precompile the binaries, right (so we can install everything from the REPL)?. Could be good for this PR to focus on getting explicit free surface to work, then build up the rest of the features after that. Doing this for real will also require figuring testing out I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3288#issuecomment-1735314503:414,install,install,414,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3288#issuecomment-1735314503,1,['install'],['install']
Deployability,"> I've used xarray to analyze and plot Oceananigans NetCDF files quite a lot in the past with little difficulty (still really like xarray). Being on a regular Cartesian grid helps a lot obviously. You can use `xarray` on Oceananigans data blindly and be happy with it (I do it for the most part!), but their routines for interpolation and especially integration and differentiation don't match up with Oceananigans' finite volume scheme. So if you need to be precise with your calculations, you definitely shouldn't use the `xarray` default routines. And yes, this definitely overlaps with `AbstractOperations`, but I think that's okay, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1334#issuecomment-772627045:350,integrat,integration,350,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1334#issuecomment-772627045,1,['integrat'],['integration']
Deployability,"> If it is a parameter then the update state would need to check if there is a parameter before which might be more ambiguous to set up?. The user has to define `update_biogeochemical_state!` for the particular `BasicBiogeochemistry` they would like to use; if they want to compute light attenuation, they'll have to write that. However, I can envision child packages to Oceananigans providing more structured functionality for users. I think we just want to keep the Oceananigans interface as simple and general as possible since we expected it to be used by many different types of chemistry and biology models.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335278999:32,update,update,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335278999,2,['update'],['update']
Deployability,"> If the barotropic mode is not used in the AB2 scheme, which I presume is the case, then I agree it makes sense to compute it elsewhere.; > ; > `update_state!` seems like a good place to me. Basically we have to calculate the barotropic mode before doing the free surface update if we are using a `SplitExplicitFreeSurface`. But I think we can regard the barotropic mode as part of the ""auxiliary state"" of the problem. The rest of the auxiliary state is calculated in `update_state!`, so I think that's the appropriate place to calculate the barotropic mode as well.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2244#issuecomment-1039305740:273,update,update,273,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2244#issuecomment-1039305740,1,['update'],['update']
Deployability,"> If the slowdown is different on CPU than GPU that might be an important clue. I haven't had a chance to test this properly on GPUs, although I believe (from experience in a less controlled scenario) a similar slowdown occurs. > Relaxation uses ContinuousForcing so we should probably look into whether the problem comes from that code. It does seem possible there were changes after upgrading to 1.6. I also can't prove/test it right now, but I also think this issue has been there since before 1.6. Basically since I started using Oceananigans. Because I've always had simulations with `Relaxation` and the time it takes them to run has always been pretty much the same (apart from that WENO5 issue we found a couple of weeks ago). Only now I realized that the simulations run _much_ faster without these forcings though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875628358:246,Continuous,ContinuousForcing,246,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875628358,1,['Continuous'],['ContinuousForcing']
Deployability,"> If we are going to update this example, it's probably better to use `ImmersedBoundaryGrid` like in the other immersed boundary validation experiments... Good point and I can look into that before this is reviewed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1793#issuecomment-871638633:21,update,update,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1793#issuecomment-871638633,1,['update'],['update']
Deployability,"> If we change the name and that's a breaking change we will bump the version and all users will be happy or keep working with the Oceananigans version they want to. I understand that it'll just be a breaking release. My concern is that a user that has a tilted-domain simulation with `gravity_unit_vector=g` will update their Oceananigans version, the code will run possibly without any errors, give a completely different result since gravity just flipped, and they won't know that it's because now they should have `gravity_unit_vector=-g`. But if we think that's an acceptable price (I don't know how many people use this feature) and that keeping the name while changing the code is the way to go, then I'm fine moving forward with that. I do think we should decide this and resolve this though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2356#issuecomment-1455154184:209,release,release,209,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2356#issuecomment-1455154184,2,"['release', 'update']","['release', 'update']"
Deployability,"> If we ever get a divergence free solver then this would be exactly zero. But the damping occurs here because of the error of the divergence. Close! But we failed to mention that this damps the _horizontal_ divergence, not the 3D divergence... So it's not damping error; it's damping physical flows with non-small `dw/dz`. And you're right, we haven't implemented a separate ""rotational damping"" closure. But we could. And yeah, you can exchange those operators in continuous space, but not the discrete analogs. So the order of operators matters discretely.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2495#issuecomment-1112563320:466,continuous,continuous,466,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2495#issuecomment-1112563320,1,['continuous'],['continuous']
Deployability,"> Interesting that it modifies `field` in place. I think perhaps a starting point could be an implementation that puts the result in a new field, perhaps?. Yes, in my case, I created a copy of the field I wanted to integrate and then applied the function.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3582#issuecomment-2098913682:215,integrat,integrate,215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3582#issuecomment-2098913682,1,['integrat'],['integrate']
Deployability,"> Interesting, thanks for those details! That's odd that there are changes in memory allocation associated with building diagnostics. I don't think there's been changes to `Field` between 0.77.5 and 0.78.0. @navidcy might be able to say more. I think 0.78.0 only upgraded the tests to julia 1.8?; ; Maybe this indicates that the changes are due to changes in the dependencies when upgrading to 1.8?. > I'm also curious why the diagnostics consume so much memory. Are you producing a lot of 3D time averages (which can't be constructed in post-processing?) We've attempted to design the code so that reductions can be performed with minimal memory allocation. 3D diagnostics can simply be calculated from snapshots of the model state, so there's no need to allocate memory (assuming that static memory greatly exceeds GPU memory, this would be preferred). Are we missing a feature to help reduce memory requirements of diagnostics perhaps?. That's interesting. I'm actually also performing a significant amount of 3D averages, as you picked up on. The reason for that is because I want them at a higher frequency than the 3D snapshots that I'm outputting. I'd need a lot of disk-space to output the 3D fields at such high frequencies, so it's a storage limitation issue. That said, I wasn't aware that 3D averages in particular were memory-intensive, so I might rethink that rationale.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300682800:263,upgrade,upgraded,263,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300682800,2,['upgrade'],['upgraded']
Deployability,"> Is it possible to get julia to ignore the manifest (i.e. specify that we want to ignore it in the CI), so that when a user downloads it they can still use the manifest?; > ; > Having asked that I don't actually know what the manifest does that isn't already taken care of by the Project?. The Project compat is supposed to take care of everything. It's just that subtle bugs can creep into packages that might cause things to fail for us (for example something subtle can break type inference, causing everything to fail on the GPU). So using the Manifest is a bit more conservative, because we fix all of the packages that don't _need_ to be upgraded. On the other hand, we are better community members by deleting the Manifest because catching those bugs is important for everyone.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2361571344:645,upgrade,upgraded,645,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2361571344,1,['upgrade'],['upgraded']
Deployability,"> Is the vertical velocity generated over the piecewise constant topogrpahy something that is of a concern? When I increased the resolution I believe I saw the vertical velocity generated increased as well. I agree with @glwagner that it's concerning at least for your current configuration. My guess is that with bottom drag and a more turbulent simulation that might not be a huge problem. But as it stands it's definitely affecting the dynamics. (Btw, I say that because I've run a fair amount of turbulent simulations with immersed boundaries at this point and I've never seen this being an issue in my simulations. But they are always turbulent.). > I think so! Is this with GridFittedBottom or PartialCellBottom? I feel like this motivated cut / shaved cells. @glwagner reading the code [here](https://github.com/CliMA/Oceananigans.jl/blob/fjp/Test_ImmersedBoundaryMethod/validation/immersed_boundaries/linear_bottom_example_take1.jl) it seems that it's a `GridFittedBottom`. @francispoulin Like Greg mentioned, shaved cells would be ideal here, but since we don't have that yet, I'd suggest trying out the `PartialCellBottom`. I expect some improvement there.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3526#issuecomment-2028920617:277,configurat,configuration,277,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3526#issuecomment-2028920617,1,['configurat'],['configuration']
Deployability,> Is there any other model that may be impacted from this?. As mentioned in a DM I don't think `HydrostaticFreeSurfaceModel` supports vertically-flat configurations; even with one grid point in the vertical we may need vertically `Bounded`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2093#issuecomment-985522014:150,configurat,configurations,150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2093#issuecomment-985522014,1,['configurat'],['configurations']
Deployability,"> Is this for examples and docs? It does obviously read better; I'm not sure about the downside of name proliferation. Maybe we can stew on it and update in a future PR?. I was thinking both, i.e. encourage their use to improve script readability. Yeah we can just update things as we go along. I guess the downside is that new users may not immediately notice that these common words, e.g. `minutes`, are actually being exported by `Oceananigans.Utils`. Perhaps if they were exported by a submodule like `Oceananigans.Units` that would be clearer. Also, newcomers to Julia may not realize that you can write things like `2π` or `3hours` but this should not stop us from using this nice language feature.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1070#issuecomment-711026555:147,update,update,147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1070#issuecomment-711026555,2,['update'],['update']
Deployability,"> Is this for examples and docs? It does obviously read better; I'm not sure about the downside of name proliferation. Maybe we can stew on it and update in a future PR?. I was thinking both, i.e. encourage their use to improve script readability. Yeah we can just update things as we go along. I guess the downside is that new users may not immediately notice that these common words, e.g. `minutes`, are actually being exported by `Oceananigans.Utils`. Perhaps if they were exported by a submodule like `Oceananigans.Units` that would be clearer. Also, newcomers to Julia may not realize that you can write things like `2π` or `3hours` but this should not stop us from using this nice language feature. _Originally posted by @ali-ramadhan in https://github.com/CliMA/Oceananigans.jl/pull/1070#issuecomment-711026555_",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1075:147,update,update,147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1075,2,['update'],['update']
Deployability,"> It may be that several other dependencies need to be updated. Yep, a few others updated when I ran . ```julia; (Oceananigans) pkg> update SeawaterPolynomials; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488008980:55,update,updated,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488008980,3,['update'],"['update', 'updated']"
Deployability,"> It renders fine. Perhaps you tried before tge docs were deployed?. Yeah, I think you're right. It's rendering now. The new video looks good to me!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2646#issuecomment-1179633173:58,deploy,deployed,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2646#issuecomment-1179633173,1,['deploy'],['deployed']
Deployability,"> It's a significant refactor to remove hydrostatic pressure --- I don't think we want to do the hacky thing that we did to set up that PR that just keeps the same structures but sets pressure to `nothing`, we want to do it properly and update the docs. Agreed. https://github.com/CliMA/Oceananigans.jl/pull/3080 is for now just a start to see if anything significant breaks. So far everything looks OK there",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518198862:237,update,update,237,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518198862,1,['update'],['update']
Deployability,"> Its ok for there to be a divergence in the slip velocity. In the case of the ocean surface or seafloor that's exactly what you want since the particles will then accumulate at those surfaces depending on whether they are light or dense. Tracer is conserved in an integrated sense since the flux through the boundary vanishes. In some cases the user might want a flux across the boundary, e.g. for dense particles sinking through an open boundary at the bottom of the domain, so we probably want the profile of the slip velocity in the user's control. Also, note that for very buoyant tracers there will be numerical issues if the tracer all accumulates at the surface. Finer grid spacing can help a bit, but I think this is a drawback to using buoyant tracers and particles work better in those cases (Jenny discusses this in her draft paper on microplastics which is under review). That makes physical sense!. I believe supporting divergent slip velocities means we cannot use the ""flux form"" of the advection term, ie we cannot rewrite. ```; u_slip ⋅ ∇c = ∇ ⋅ (u_slip c); ```. correct? This means that we cannot use native Oceananigans operators for this advection term, since the operators we've implemented all assume that the advecting velocity field is non-divergent. This is not much of an issue since we can easily write a second-order discretization of `u_slip ⋅ ∇c`. In addition, we can support a flag in which users might optionally declare the velocity field as non-divergent, in which case we can use higher-order discretizations of `∇ ⋅ (u_slip c)`. Perhaps `SlipVelocity` is a better name than `AdvectiveForcing` since it parallels the literature?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1082424860:265,integrat,integrated,265,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1082424860,1,['integrat'],['integrated']
Deployability,"> Just a quick update, zero-viscosity Bicklet jet test case for `VectorInvariant`, `WENOVectorInvariant` (smoothness calculated based on `ζ`), modified VectorInvariant WENO with smoothness based on 2D stencils of `u` and `v`, here called `WENOVectorInvariantZVEL`; > ; > `VectorInvariant` https://user-images.githubusercontent.com/33547697/157745561-a8e5f128-2f4e-42e3-9305-3f624498590b.mp4; > ; > `WENOVectorInvariant` https://user-images.githubusercontent.com/33547697/157745569-41c52e2d-c80b-4d43-b2bf-8a914e8856a2.mp4; > ; > `WENOVectorInvariantZVEL` https://user-images.githubusercontent.com/33547697/157745571-725ea604-8dec-44bd-bd08-dcd70d9ed4b1.mp4; > ; > `WENOVectorInvariantZVEL` seems to perform actually very well compared to a (somewhat) standard ""vorticity-reconstruction"" `WENOVectorInvariant` and compared to the very noisy standard `VectorInvariant` in lie of the fact that; > ; > * Noise is reduced significantly despite dissipation not being too high; > * Agreement between different resolutions is much higher. Both the WENO vector invariant forms look great, and much less noisy than the non-WENO version. Why do you say the third is better than the second? I don't doubt that it us but my eyes don't see much of a difference. . Out of curiosity, have you computed a time series of the energy?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064467000:15,update,update,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064467000,1,['update'],['update']
Deployability,"> Just to be clear, the auxiliary field I'm using in my example has nothing to do with the forcing. The forcing is needed for physical reasons and I was using the auxiliary field (together with a callback) as a way to integrate something in time for a budget.; > ; > Since that worked for CPU I assumed it was supposed to work for GPUs as well. But since that's not the case and scalars aren't supported, I'll close this issue. I see. Did you try `Oceananigans.Fields.ConstantField`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1483381766:218,integrat,integrate,218,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1483381766,2,['integrat'],['integrate']
Deployability,"> Leave it. I approve. Let's just bump a minor release. We should have rules about what is ""official"" API and what isn't. Because it doesn't really make sense to bump here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3341#issuecomment-1763709750:47,release,release,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3341#issuecomment-1763709750,1,['release'],['release']
Deployability,> Looks good and hope the tests all pass.; > ; > Should any new tests be added?. I think we should test that we can use `ContinuousBoundaryFunction` on an auxiliary field and run `fill_halo_regions!` without error. Or better yet show that it produces the right thing.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1859#issuecomment-880639149:121,Continuous,ContinuousBoundaryFunction,121,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1859#issuecomment-880639149,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"> Looks good to me. It's breaking change so bump up minor release.. At the moment we have 3 PRs that are breaking releases: this one, https://github.com/CliMA/Oceananigans.jl/pull/2963, and https://github.com/CliMA/Oceananigans.jl/pull/2842. If it looks like all of them are going to be merged, can we coordinate and tag/register v0.80.0 only after all these are merged?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1460740439:58,release,release,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1460740439,2,['release'],"['release', 'releases']"
Deployability,"> Looks like a good interface to me.; > ; > But is it on purpose that there is only support for background fields in the `NonhydrostaticModel` and not for the `HydrostaticFreeSurfaceModel`?; > ; > @liuchihl will test it in our configurations. Well yes, it's substantial effort to support background fields. So we implemented it in the nonhydrostatic model first. Nobody has requested having background fields for the hydrostatic model. It's not impossible but might require some thinking if it's going to work with the more complicated turbulence closures (like CATKE or k-epsilon) that sometimes get used for hydrostatic applications. Since the nonhydrostatic model is fast (at least on one GPU) the hydrostatic model is mostly important for simulations on the sphere (although this statement needs to be evaluated more carefully for complex domains when we have a proper nonhydrostatic solver).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2206898460:227,configurat,configurations,227,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2206898460,1,['configurat'],['configurations']
Deployability,"> Looks like me, @glwagner or @charleskawczynski have the right privileges to create an agent token. I'm happy to help, but @glwagner is probably more familiar with the Oceananigans configuration.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328997644:182,configurat,configuration,182,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328997644,1,['configurat'],['configuration']
Deployability,"> Looks like this is a bad idea, so I'm closing. I'm not sure it's a bad idea. I've been having some issues with spurious waves in rotated domains and I'm thinking this might be the cause. (Since we're modifying the direction gravity is acting on, but we're still integrating the pressure in the model's z direction.). I still haven't been able to test my rotated domain on this branch, so I'm not sure. But if indeed this is the culprit, it might be a good idea to have a flag that turns the hydrostatic separation off for rotated domains.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-1480029672:264,integrat,integrating,264,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-1480029672,1,['integrat'],['integrating']
Deployability,"> Luckily, I found a reliable way to get NaNs immediately is to set both reltol and abstol to zero and maxiter to more than a thousand. The purpose is to test the numerical stability of the iteration method. I think this makes sense. When the residual is reduced to near machine precision then I think this is when the present instability is exposed, which occurs when the search direction is essentially a constant. I wonder if its possible that the instability was observed in the original simulations when, for some random reason of the flow configuration, the CG solution converged especially fast (thereby exposing the instability).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2420734546:545,configurat,configuration,545,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2420734546,1,['configurat'],['configuration']
Deployability,> Maybe it did need some of the overwrite existing because it writes different configurations to the same file; > ; > Update: passes locally if I add them back. hmm ok that's ok. Could also just manually delete the existing files which might save future pain / confusion,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570923051:79,configurat,configurations,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570923051,2,"['Update', 'configurat']","['Update', 'configurations']"
Deployability,"> Next week I will work on getting higher order methods working for ShallowWaterModels. That would be awesome!. Does it also make sense to work on producing some validation tests for `ShallowWaterModel` for a next PR? While we can test that operators are implemented correctly in isolation, we won't understand whether everything is integrated into `ShallowWaterModel` until we have some dynamics tests and larger validation runs that reproduce results in the literature, right? Or do we need these higher-order operators to use `ShallowWaterModel` at all?. To validate the generic implementation of higher-order operators, I think we can implement high-order diffusion and reuse some of the convergence validation tests for `IncompressibleModel`, like the forced flow fixed slip test. When `ShallowWaterModel` has similar validation tests we can also do the same for `ShallowWaterModel`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-744016928:333,integrat,integrated,333,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-744016928,1,['integrat'],['integrated']
Deployability,"> Not sure of all the changes, but from the changelog a big change is a new type encoder: https://github.com/JuliaIO/JLD2.jl/releases/tag/v0.5.0; > ; > Old JLD2 files should still be readable though. And new files are incompatible with JLD2 versions <= v0.4.53.; > ; > On that PR it seems like it resolves some JLD2.jl issues with saving functions to disk. Could this mean easy checkpointing of full simulations...? 😮. that'd be huge",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3769#issuecomment-2369183980:125,release,releases,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3769#issuecomment-2369183980,1,['release'],['releases']
Deployability,"> Not sure what ""squash and merge"" means . Ah it's one of the three merge options, e.g. ![image](https://user-images.githubusercontent.com/20099589/117980914-70e08180-b302-11eb-9179-9e8cbad457a3.png). where it combines all the commits into one commit then merges. Then intermediate changes (like a file that was created then deleted) do not enter git history. > I deleted the file locally and then wanted to push the change but couldn't. If someone can tell me how to delete it I'm happy to do it. That should be all it takes... What error does git produce? I can also try locally. > Also, I see that the tests pass so my use of `Polynomials` presumably worked?. Ah I don't think `plot_rates_convergence_advection.jl` is actually run as part of CI right now. We could add it in this PR if you're interested. I think we'd want to actually add it to the validation pipeline (not the main pipeline) so we would add a new test set in https://github.com/CliMA/Oceananigans.jl/blob/master/test/test_convergence.jl and add a new build step in https://github.com/CliMA/Oceananigans.jl/blob/master/.buildkite/validation-pipeline.yml then it would show up in these builds with plots, e.g.: https://buildkite.com/clima/oceananigans-validation-experiments/builds/208. > Anything else that people would like done before someone approves this PR?. I think it looks good to merge, just without the extra image file!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1650#issuecomment-839764128:863,pipeline,pipeline,863,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1650#issuecomment-839764128,3,['pipeline'],['pipeline']
Deployability,> Note that we have pinned CUDA at v3.3.6. Any time I tried to update beyond that version things seem to break. I'll press on with the efforts in #2005... Is it worth upgrading until we are ready to tackle this issue?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2202#issuecomment-1025054383:63,update,update,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2202#issuecomment-1025054383,1,['update'],['update']
Deployability,"> Note the the distributed CI still does not have Julia v1.11 (right @Sbozzolo?) so there Julia v1.10 is used. This is possible because there are two Manifests. I installed julia 1.11 on the Caltech cluster, but we haven't made a module yet (but it's coming today or so)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3836#issuecomment-2400684833:163,install,installed,163,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3836#issuecomment-2400684833,1,['install'],['installed']
Deployability,"> Now that you have a basic example that illustrates an open boundary condition implementation with no matching scheme, you are in a position to implement a non-trivial matching scheme, and demonstrate its benefit. If the matching scheme has some benefit, then we are motivated to support it by adding source code and tests... Okay I started doing this and realised that the other source code change we need is some way to update the boundary conditions as discussed a while ago. Are you happy with how I've done this? It's a line in `update_state!` just before `fill_halo_regions!` but I guess it could be moved into `fill_halo_regions!`. I'll also add it to the hydrostatic model for future use.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2027527300:423,update,update,423,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2027527300,1,['update'],['update']
Deployability,"> OK, I approve (and can also formally approve) but we also need to update the CATKE default parameters, correct?. Yes, and as you probably noticed, done.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3484#issuecomment-1967350857:68,update,update,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3484#issuecomment-1967350857,1,['update'],['update']
Deployability,"> OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Apparently yes. This doesn't happen when the buoyancy acceleration is aligned with the model's z-coordinate. > Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. That's a good point and as far as I can tell this system should have a a finite, non-increasing total energy since the background buoyancy is stable. So the background buoyancy shouldn't be introducing any extra energy reservoirs (unlike, for example, an Eady set-up, which constantly injects energy into the system by imposing a horizontal buoyancy gradient). My understanding of this comes mainly from [Umlauf et al (2015)](https://journals.ametsoc.org/configurable/content/journals$002fphoc$002f45$002f12$002fjpo-d-15-0041.1.xml?t:ac=journals%24002fphoc%24002f45%24002f12%24002fjpo-d-15-0041.1.xml). Their equation (24) applied to the set-up above (i.e. without any boundary stresses and without applying a Reynolds decomposition) reads. ```math; \frac{d}{dt}\int_V \left[ \frac{u_i u_i}{2} + \frac{b^2}{2N^2} \right] dV = ; - \int_V \left[ ; \kappa \frac{\partial_j b \partial_j b}{N^2} ; + \nu {\partial_j u_i \partial_j u_i}; \right] dV \le 0; ```. Also it's worth noting that even in a `(Bounded, Flat, Bounded)` domain I still get an energy buildup, although in this case the KE stops growing after a while:. https://user-images.githubusercontent.com/13205162/228590310-51b59910-2550-48c9-93a7-f22d70c2474e.mp4. I say that because this may be a more familiar set-up and because sometimes a tilted, periodic domain might introduce some unexpected effects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882:362,continuous,continuous,362,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882,1,['continuous'],['continuous']
Deployability,"> OK, this is now ready to review.; > ; > I have hardcoded the boundary condition parameters! Any attempt to include them via parameters failed. Please help by showing me how (try building the docs though first before you claim success :) --- I tried a million times!); > ; > Also, I get a lot of these warnings:; > ; > ```; > ┌ Warning: type FieldBoundaryConditions{BoundaryCondition{Flux, Nothing},BoundaryCondition{Flux, Nothing},Nothing,Nothing,BoundaryCondition{Flux, Nothing},BoundaryCondition{Value,Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center,Center,Nothing,64,Main.__atexample__named__horizontal_convection.#bˢ,Nothing,Tuple{},Tuple{},Tuple{}}},BoundaryCondition{Flux, Nothing}} does not exist in workspace; reconstructing; > └ @ JLD2 ~/.julia/packages/JLD2/sFiXk/src/data/reconstructing_datatypes.jl:358; > ```; > ; > Any idea why? My instinct says that these issues are intertwined but I can't figure out why... What's the error?. I believe that warning comes from `FieldTimeSeries`. But that's a warning, not an error, so its ok.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-881793492:538,Continuous,ContinuousBoundaryFunction,538,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-881793492,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"> On a different note, if a `BackgroundField` is time dependent then evaluating it at every time step makes sense. But if it's time independent, as in this case, then it's working a lot more than it should. Agreed!. > If we have an array, say b_array, then can we can turn it into a field using b_field = ComputedField(b_array)?. Just `b_field .= b_array`. > Would it be of interest to have an option for it to not compute it at every time?. There are two ways to achieve this. The underlying data for a concrete `BackgroundField` can be updated via the `progress` callback every time step. A better method that's currently only possible currently with `HydrostaticFreeSurfaceModel` is to add it to the model's list of `auxiliary_fields`. In this case `compute!(field)` is called on every member of that list, so if the `BackgroundField` has a `compute!` method (eg if it's a `ComputedField`, or some other custom `Field` with a `compute!` method) then it will be updated.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1826#issuecomment-875586940:538,update,updated,538,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1826#issuecomment-875586940,2,['update'],['updated']
Deployability,"> On a side note, since you asked, I am going through some difficulties running the same example with a GPU. My inexperience with GPUs is keeping me from figuring this one out. What GPU are you running on? You'll need an Nvidia GPU and the CUDA library installed. Installing Oceananigans through the Julia package manager should install all the required Julia package dependencies (but won't install CUDA itself). Are you getting any errors?. Hmmm, so there is a small caveat that `Nx` and `Ny` need to be multiples of 16 on the GPU right now, although you'd get an error about this. > Should I create another issue?. Hmmm yeah that might be a good idea just to keep each issue self-contained. > (I'm not sure how much you guys want to be involved in these debugging processes...). We're very interested in being involved with the debugging process! We're still in early development so I'd expect things to break quite often, and we still haven't ironed out all the bugs and usability issues. We've also mostly been using the model ourselves (hard to improve usability if you know all the internals haha), so if you're willing to report issues it would be a huge help with development!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/449#issuecomment-539736740:253,install,installed,253,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/449#issuecomment-539736740,3,['install'],"['install', 'installed']"
Deployability,"> One concern that I have is, as nice as these figures are, I can't really tell much of a difference between column 1 and column 2. Actually, they look pretty identical to me. Yeah, same here. But I guess the more important question is: how are the statistics affected? Does this loss of accuracy impact second order statistics significantly? That could happen with the solutions looking pretty identical to the naked eye. If that's the case then I'd say the case for solving this issue is pretty strong. > Because I am interested in understanding the nuts and bolts of WENO, I will look deeper into this paper and try and figure out exactly what needs to change to upgrade to ""Algorithm 5"". Awesome! :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1705#issuecomment-876038447:666,upgrade,upgrade,666,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1705#issuecomment-876038447,1,['upgrade'],['upgrade']
Deployability,> One strange version jump seems to be backwards but I suspect it's because I misunderstood something. @francispoulin you misunderstood :); the manifest here implies that EzXML is removed completely and ExprTools upgraded from 0.1.3 -> 0.1.6,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1837#issuecomment-876069493:213,upgrade,upgraded,213,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1837#issuecomment-876069493,1,['upgrade'],['upgraded']
Deployability,"> One thing that I noticed is that advection seemed to be commented out for tracers. Did I read that right?. Yes --- because we are still finalizing the user interface that controls the advection term + advection scheme for momentum and tracers. I think ideally we want to preserve the ability to use high-order advection schemes for momentum when we are on a `RegularCartesianGrid`. However, we also have to use a ""vector-invariant form"" of the advection term when running on curvilinear grids. So we need a way to specify both continuous and numerical aspects of the advection term implementation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1349#issuecomment-776767674:529,continuous,continuous,529,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1349#issuecomment-776767674,1,['continuous'],['continuous']
Deployability,"> Or, given a geostrophic buoyancy field we can integrate in z (eg summation of b * dz). This would be the intent of IntegratedField, but nobody has implemented that yet. That was more along the lines of what I was thinking. Basically showing users how to create a `u`, find out what `b` is, and then indicate if it's best to use that as `BackgroundField`, or an `Array` or something. But it seems like `IntegratedField` needs to be in place for something as simple as what I'm envisioning?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1846#issuecomment-877483764:48,integrat,integrate,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1846#issuecomment-877483764,4,"['Integrat', 'integrat']","['IntegratedField', 'integrate']"
Deployability,"> Particle setup: particles can get a parameter called active_properties which is a tuple of named tuples of particle properties and tracers (e.g. ((property=:t, tracer=:x),).) The idea being that the particle dynamics function (as already implemented) changes the particle property to set a rate of uptake/exudation of a tracer, and the below function would integrate this change to the specified tracer. Can you please restate this? I think a code example would be helpful with an explanation on what's being accomplished. Also can you explain why this can't be implemented with a Callback (or forcing function)? I.e., why do we desire this as a source code feature? Just to be clear, I'm not saying it should be one way or another, but it's good to have explicit justification for source code features (which are expensive to maintain and require resources to test)!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1238507827:359,integrat,integrate,359,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1238507827,2,['integrat'],['integrate']
Deployability,> Perhaps we should also update this docstring in this PR?; > ; > https://github.com/CliMA/Oceananigans.jl/blob/075d42cf3487532c14b9cca7356d5de11061e5eb/src/DistributedComputations/distributed_architectures.jl#L174-L209; > ; > The docstring function signature does not mirror the actual signature + some explanation on `partition` could be handy. (#3448 made an attempt to update this docstring.). Definitely fix if its not accurate,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915058613:25,update,update,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915058613,2,['update'],['update']
Deployability,"> Perhaps we should update https://github.com/CliMA/Oceananigans.jl/blob/ss-fjp/non-conservative-shallow-water/docs/src/physics/shallow_water_model.md ?. Yes, good idea, and I can put something together, unless you prefer to @simone-silvestri ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1141146381:20,update,update,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1141146381,1,['update'],['update']
Deployability,"> Possibly related to discussion on #2347 ? Broadcasting ordinary arrays with PencilArrays is fragile. It needs to be fixed... I think that's correct. A way to test this is to change the following lines: ; https://github.com/CliMA/Oceananigans.jl/blob/3ba95e07a27d93129a87f266aecc3c11d20aac14/test/test_distributed_models.jl#L471-L472. to . ```julia; arch = MultiArch(ranks=(1, 4, 1)) ; grid = RectilinearGrid(arch, topology=topo, size=(8, 2, 8), extent=(1, 2, 3)) ; ```. And it should make tests pass. For some reason I found that the condition `Rx*Nx == Ry*Ny == Rz*Nz` needs to be satisfied in order to make tests pass (see https://github.com/CliMA/Oceananigans.jl/issues/2445). I don't necessarily recommend merging that way, since this doesn't fix the issue, instead it circumvents it, but I'm pretty sure we won't be able to update the packages (including updating to julia 1.7) before fixing this issue. On the other hand, this test passes right now on main only because of a coincidence, and there's most likely a bug in code (based on answer by @glwagner and @jipolanco), so the test is not doing its intended purpose. That might be an argument for removing that test until we have time to fix the issue, since it's keeping us from updating other packages.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1105085657:831,update,update,831,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1105085657,1,['update'],['update']
Deployability,"> Probably AveragedTimeInterval needs to be updated to align more with the (new) criteria currently being used for TimeInterval eg we need a similar criteria as used for next_actuation_time:. @glwagner Could you maybe provide some hints on where the source code in AveragedTimeInterval should be modified to align with the implementation in TimeInterval? So far I haven't been able to fix the bug. My guess is something along these lines, but I could be wrong: https://github.com/CliMA/Oceananigans.jl/blob/406eb9c5c7a9fc86947747116128c8c1ba4c93d4/src/OutputWriters/windowed_time_average.jl#L130-L142",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2285081414:44,update,updated,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2285081414,1,['update'],['updated']
Deployability,"> Probably `AveragedTimeInterval` needs to be updated to align more with the (new) criteria currently being used for `TimeInterval`. @glwagner, are you working on this or would you like me and @liuchihl to take it on?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2276360920:46,update,updated,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2276360920,1,['update'],['updated']
Deployability,"> Probably good to bump version and tag a patch release with this, no?. Yes of course.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-924129306:42,patch,patch,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-924129306,2,"['patch', 'release']","['patch', 'release']"
Deployability,> Probably not a major problem but any ideas what might have changed?. That is mysterious. Is this with `ShallowWaterModel` or with `IncompressibleModel`?. The main thing that's changed is our update to julia 1.6 and CUDA 3.0. But I can't recall if there have been changes to the way that the `ShallowWaterModel` implements advection.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-862714588:193,update,update,193,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-862714588,1,['update'],['update']
Deployability,"> Seems like @glwagner's nuking of `restore_from_checkpoint` worked well. I'm gonna merge this soon.; > ; > Is this worth bumping a patch release since the initial diffusivities might be wrong without this?. This is breaking, so I think we should bump a major release.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-887484538:132,patch,patch,132,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-887484538,3,"['patch', 'release']","['patch', 'release']"
Deployability,"> Should I put together a PR for this part and then work on the momentum? I'm also happy to wait for more feedback. @navidcy , what do you think?. My two cents is that it might be better to add as much content as possible in one PR. I thinks docs PRs can be a bit painful. It's not as crucial either for docs updates that the PRs are tight and focused. I think it's simpler to keep things general for curvilinear grids than to assume constant cell spacings by the way. We should discuss 2D versus 3D a bit more. While 2D is simpler, we will almost certainly need 3D as well at some point (when we resolve #1679). So we can have a ""tutorial"" 2D section, and then a ""fully descriptive"" 3D development --- or we can just do 3D from the start.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1318#issuecomment-874268303:309,update,updates,309,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1318#issuecomment-874268303,2,['update'],['updates']
Deployability,"> Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?; > ; > Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously. To follow up with @vchuravy, it seems that rewriting just _some_ of the code was sufficient, so we are (probably) in the clear! The lesson learned is that we cannot slurp / splat `@kernel` function arguments, because it prevents the kernel code from being inlined.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741:583,rolling,rolling,583,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741,2,['rolling'],['rolling']
Deployability,"> So seems that all is good? So the problem comes when I continue the integration longer?. It appears that the issue does get worse the longer you run, yes. The original MWE I posted runs for 18 time steps and it looks like this:. ![image](https://user-images.githubusercontent.com/13205162/219516253-394a7e77-8c7e-4be1-be29-d2bdfadacdb3.png). Running it for 2 time steps it looks like this:. ![image](https://user-images.githubusercontent.com/13205162/220152519-7dab5501-6636-4c57-851d-5a944ab1d524.png). The results are still different from different tracers, but not visibly so. (The order of magnitude of the differences is around 1e-5 in this case)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437234615:70,integrat,integration,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437234615,1,['integrat'],['integration']
Deployability,"> So the problem comes when I continue the integration longer?. This could be worth trying, note that. ```julia; julia> using Oceananigans.Units. julia> 0.15hours / 30; 18.0; ```. So you can run for 18 steps instead of 4. (@tomchor why 18?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436104605:43,integrat,integration,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436104605,1,['integrat'],['integration']
Deployability,"> So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?! The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. yeah most of it is updates in main",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448201010:353,update,updates,353,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448201010,1,['update'],['updates']
Deployability,"> Some benchmarks from running `implicit_surface_solvers_benchmark.jl`; > ; > On GPU: FFT: 0.902434 seconds (1.58 M allocations: 549.219 MiB, 13.25% gc time) PCG: 37.329798 seconds (17.07 M allocations: 2.563 GiB, 1.85% gc time) Heptadiagonal: 4.323861 seconds (6.06 M allocations: 675.694 MiB, 4.72% gc time, 1.32% compilation time) MG: 4.495123 seconds (1.50 M allocations: 492.900 MiB, 2.16% gc time) PCG with FFT preconditioner: 22.673894 seconds (3.53 M allocations: 864.587 MiB, 0.77% gc time); > ; > On CPU: FFT: 6.548544 seconds (3.61 M allocations: 1.910 GiB, 14.07% gc time, 1.30% compilation time) PCG: 32.354310 seconds (20.29 M allocations: 7.041 GiB, 5.80% gc time) Heptadiagonal: 9.795938 seconds (3.51 M allocations: 1.595 GiB, 39.13% gc time) MG: 11.868795 seconds (3.85 M allocations: 3.991 GiB, 43.10% gc time) PCG with FFT preconditioner: 10.473279 seconds (5.38 M allocations: 2.654 GiB, 9.37% gc time). nice. A problem with having an iterative matrix solver algorithm (like the pcg) is going to high resolutions (or conversely large time steps). ; The matrix becomes poorly conditioned because the diagonal (which depends on `Δt²`) decreases faster than the off-diagonals (which depend on the integrated areas) and the number of iterations required to converge spike up.; This means that on a GPU both eddy-permitting and resolving simulations are dominated by the cost of the implicit solver.; Our default preconditioner (for the Heptadiagonal solver) also loses efficiency when increasing `Δt` (or increasing resolution) because it assumes that the matrix is diagonally dominant. This is a problem that the FFT solver does not have.; I would be very interesting to know if with a multigrid algorithm this problem is less severe.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1241929577:1215,integrat,integrated,1215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1241929577,1,['integrat'],['integrated']
Deployability,"> Some of the points that could be in the Goals/Mission section:; > ; > * Easy to install, understand and use; > * Versatile: model is made in blocks that could be combined and easily configured across scales; > * Modern: this might be no independent from the others. Yeah! ""Easy to install"" are ""versatile"" are definitely very important motivators of Julia. Here's some additional points from the ""Vision"" slide presented at Ocean Sciences 2022 Oceananigans town hall:. ![image](https://user-images.githubusercontent.com/15271942/156891514-6ae309ea-597c-4a6a-9ea4-aed1da6f231f.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2308#issuecomment-1059790533:82,install,install,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2308#issuecomment-1059790533,2,['install'],['install']
Deployability,"> Sorry I don't quite understand: Is this potentially affecting the calculations right now, or will it only be an issue if we upgrade to CUDA 3.5+?. CUDA 3.8 includes features that may allow us to decrease register pressure or implement performance optimizations that would otherwise be difficult or impossible.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2202#issuecomment-1025963063:126,upgrade,upgrade,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2202#issuecomment-1025963063,1,['upgrade'],['upgrade']
Deployability,"> Sorry I meant that we can now initialize field tuples (VelocityFields, TracerFields, etc.) with non-zero data. I updated the title. This change was important because it's required for checkpointing/restoring large model (implemented in #628). The field tuple constructors are further generalized in #631. Sounds good. Just for the record, `model.velocities` is just a named tuple, so if individual fields can be manually built with pre-allocated data, then so can the named tuples that hold velocity field data and tracer data. I suppose the change here is a function that achieves the same. If the current changes make the checkpointer code clearer, than I am for it. > fill_halo_regions! assumes field.data has a certain size consistent with the size of the grid. Let's be specific here. `fill_halo_regions!` does not assume anything about the ""size"" of data. Specifically, it invokes `getindex` on the property `parent` of `.data` at certain indices. Therefore such a method call must work for `.data`. In the case that `.data` is either a plain `Array` or a `CuArray`, we *know* from the properties of those types when such a `getindex` call for certain indicies will fail. Therefore, we should feel free to intercept such an error during `Field` construction. In other cases we cannot be sure that such a method will fail because we don't know how `getindex` works on `.parent` for arbitrary types. In the spirit of ""not assuming what we don't know"", we should opt to throw errors only in cases that we *know* an error should occur.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/627#issuecomment-587006980:115,update,updated,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/627#issuecomment-587006980,1,['update'],['updated']
Deployability,"> Sorry for not following, but I don't see what breaks here for the end user! Could someone give a quick example/explanation?. Apologies that my explanation was not clear. It's a breaking change because the same user input, such as. ```julia; tke = @at (Center, Center, Center) ((u - U)^2 + (v - V)^2 + w^2) / 2; ```. produces a different object after this update:. * Before this PR, `u - U` would be interpolated to `(Center, Center, Center)`, and then the binary operation `^(2, u - U)` would be calculated at `(Center, Center, Center)`.; * After this PR, both `u - U` and `^(2, u - U) = (u - U)^2` are calculated at `(Face, Center, Center)`. Interpolation is then performed to `(Center, Center, Center)` _after_ the exponentiation to form the three-part sum. Let me know if that makes sense or if another example would be useful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1599#issuecomment-823698116:357,update,update,357,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1599#issuecomment-823698116,2,['update'],['update']
Deployability,> Sorry validation pipeline was accidently triggered so I canceled it. Fixed it so shouldn't happen in the future. Does that mean it will retry the tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1325#issuecomment-769911007:19,pipeline,pipeline,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1325#issuecomment-769911007,1,['pipeline'],['pipeline']
Deployability,"> Sorry, let me rephrase, users shouId pass clock and fields only when boundary conditions require it, so we need some type of warning to make sure the error is well documented.; > ; > I think it is nice to have `fill_halo_regions!(field)`, it will be a bit cumbersome to always have to pass a clock and fields also when non using complex BCs. It's not even possible to construct a field with `ContinuousForcing` outside a model constructor. The model constructor has to do things like compute the index of `fields(model)` that a field name belongs to. So its more than cumbersome, its not possible. Also we need to prioritize. We are trying to do simulations, not have uber fancy flexible field abstractions (this is just an auxiliary feature that's very nice).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2179186646:394,Continuous,ContinuousForcing,394,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2179186646,1,['Continuous'],['ContinuousForcing']
Deployability,"> Sounds good to update the code! Perhaps we should also add a warning or note of some kind about the lack of validation (we've taken to doing this recently and I think it's a good thing).; > ; > @navidcy would be happy not to use `ς`!; > ; > `\Upsilon` is disturbingly similar to ""Y"":; > ; > ```julia; > julia> Υ = 1; > 1; > ```; > ; > maybe there's a better choice? We could also change the docs. Yeah, and I ended up realizing the same thing. I changed the docs instead.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889257253:17,update,update,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889257253,1,['update'],['update']
Deployability,"> Thank you for your help! I have installed the updated version of Julia and when running it appears to be Segfaulting when trying to add CUDA. I will open an issue with them if I cannot figure out how to solve it. Thank you again. @logan can you link the CUDA issue here please?. Also, if you haven't tried, erase everything on your `$JULIA_DEPOT_PATH` (really to be safe you should make a backup of everything there first) and then run the same script you've been running with `using Pkg; Pkg.instantiate()` on the first line. This should ""re-install"" all the packages from scratch. For context [`$JULIA_DEPOT_PATH`](https://docs.julialang.org/en/v1/manual/environment-variables/#JULIA_DEPOT_PATH) by default is `~/.julia`, I think, and that's where julia stores the package files it downloads. The hypothesis here is that at some point some package download/compilation went wrong and you have some broken code there.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245639622:34,install,installed,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245639622,3,"['install', 'update']","['install', 'installed', 'updated']"
Deployability,"> Thanks @ali-ramadhan . I hope they will update a newer version, otherwise I can try and install it myself and I don't imagine they will have any problem with that. We will see. Install Julia yourself and don't rely on IT... :); (that's what I do on Australia's HPC...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1468#issuecomment-799814031:42,update,update,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1468#issuecomment-799814031,3,"['Install', 'install', 'update']","['Install', 'install', 'update']"
Deployability,"> The CUDA.jl docs recommend using artifacts (https://cuda.juliagpu.org/dev/installation/overview/#CUDA-toolkit). True, but CI may be a special case, eg. https://github.com/JuliaGPU/CUDA.jl/blob/b25d9b751516240dc9a436b94c5617ffe4d6b719/deps/bindeps.jl#L62-L63. I actually agree its better to use artifacts in general, just seems inconvenient right now...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872491917:76,install,installation,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872491917,1,['install'],['installation']
Deployability,"> The GPU validation should be identical. You just need to; > ; > 1. Make sure you have enough gpus and the MPI installation is cuda-aware (MPI.has_cuda() == true); > 2. Switch CPU to GPU in the script.; > ; > The rest of the script does not change. We still need actual, explicit code. That way you don't have to make this comment ""it doesn't change"" every time.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-2088554792:112,install,installation,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-2088554792,1,['install'],['installation']
Deployability,"> The dependency on OrthogonalSphericalShellGrids here is blocking the progress (the `SplitExplicitAuxiliaryFields` type has changed in this PR). How do we deal with this? We could remove the dependency in the tests of Oceananigans and move those tests over at OrthogonalSphericalShellGrids. Shall we do this? In case we want to do it I have prepared https://github.com/CliMA/OrthogonalSphericalShellGrids.jl/pull/47.; If yes, we can merge that one then this one, then update OrthogonalSphericalShellGrids with the new interface",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3841#issuecomment-2437244222:469,update,update,469,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3841#issuecomment-2437244222,1,['update'],['update']
Deployability,"> The issue was that buoyancy was not reconstructed properly in the vertical. (There was also a problem with reconstructing buoyancy in the horizontal, but this only affects tilted domains.) So there was a bug and the discretization was incorrect. I'm aware of that. My point was more that I don't quite remember how the issue was manifested in the dynamics (the recognition of which was what prompted us to abandon https://github.com/CliMA/Oceananigans.jl/pull/1910). > @tomchor I updated the PR description. Feel free to edit it further. Thanks, that's a great detailed description. I only added one item to the advantages: simpler code and user interface.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622165197:482,update,updated,482,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622165197,2,['update'],['updated']
Deployability,"> The longitude plots look better, and once I gain confidence in their accuracy, I will proceed to close issue #3217. You mean with the latest `#main` they look better? Better or perfect? Can you update the issue #3217?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3222#issuecomment-1724858256:196,update,update,196,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3222#issuecomment-1724858256,1,['update'],['update']
Deployability,"> The main downside I think is that the validation repo goes stale by design. Wouldn't JuliaRegistrator keep this from happening? ; If we list Oceananigans as a dependence, it'll create a new PR with the an updated version of Oceananigans everytime we update Oceananigans.jl, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1634#issuecomment-832153423:207,update,updated,207,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1634#issuecomment-832153423,2,['update'],"['update', 'updated']"
Deployability,"> The purpose of this PR was to save mutliple scalars using `NetCDFOutputWriter` and there seemed to be some problems, i.e. some checks fail.; > ; > @glwagner mentioned that maybe `using Statistics: norm` might work without any additional work. Is this the case? If yes then I am happy to close this PR and give it a try on the shallow water Bickley jet example. Ah... the change is fairly innocuous, there's just a few things that make me nervous. 1) It _shouldn't_ fix the problem that it's intended to fix. Unless there's something I am missing... if it fixes the problem that was raised, it's due to some unintended side effect that we don't understand? (Providing some detail and the error message that was received could help, or it could be raised in an issue). A more grave concern is 2) it will slow down the code and cause memory allocation. This is almost always completely negligible since other parts of the code matter more, but it could affect small models, our CI pipeline, etc. It's hard to intentionally throw away type stability :-/ So in a way it's creating technical debt and possibly creating work for us in the future...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1558#issuecomment-824916415:980,pipeline,pipeline,980,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1558#issuecomment-824916415,1,['pipeline'],['pipeline']
Deployability,"> There is definitely a wrong assumption somewhere in this pipeline.; > ; > Maybe we can focus on this:; > ; > > since it try to access the indexes (4:8, 4:8, 4:5) rather than (4:8, 4:8, 1:0). I had a typo here, the indexes that it tries to access are `(4:8, 4:8, 4:8)` as if the field was 3D (See the error below). > ; > First of all I think this means that we are using `with_halo=true`? Just want to confirm that. Nope, that is without the halo (`with_halo=False`), when using `with_halo=true` the indexes passed are `(Colon(), Colon(), Colon())` so there is no issue accessing the indexes of the `output`.; ; > Second there is a typo right @josuemtzmo ? You meant to say that the indices should be `(4:8, 4:8, 1:1)`?. When I print the indexes I get `(4:8, 4:8, 1:0)` but I agree that there is something strange, since I also expected what you said `(4:8, 4:8, 1:1)`.; ; > This is maybe where the incorrect assumption is. If we need `(4:8, 4:8, 1:1)`, then we are looking for the indices of the underlying _view_ --- but not the indices of the Field. Because, the indices of `eta` are definitely `(4:8, 4:8, 4:5)`. That's the whole point of the windowed fields abstraction is to be able to properly locate a field in the 3D index space. `eta` is the free surface, so it's indices are at the top of the domain. That's likely the case, since it seems that we are accessing the indexes of the __view__. For example, doing `eta.indices` I get `(Colon(), Colon(), 5:5)`. However, the only way I manage to make work `Field(eta, indices = indices)` is using `indices = (4:8,4:8,-2)`. I think the reason it only works by pass a `-2` (`z` index) results from the fact that the view uses `-2+3`, where 3 is the size of the halo. I've confirmed that changing the halo in the `RectilinearGrid`, changes the value of the (`z` index) to pass to access the `Field`. ```; julia> Field(eta, indices = (1:5,1:5,-2)); 5×5×1 Field{Center, Center, Face} on RectilinearGrid on CPU; ├── grid: 5×5×4 RectilinearGrid{Float6",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3260#issuecomment-2014615658:59,pipeline,pipeline,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3260#issuecomment-2014615658,1,['pipeline'],['pipeline']
Deployability,"> There was a bug in some recent updates to KernelAbstractions.jl that caused Enzyme to break on broadcasting arrays in Oceananigans. This PR includes a test to make sure this bug doesn't occur again. Interesting! I think it's ok to add a broadcasting test. But it will be confusing to future developers if the test is explained / written as somehow testing a bug in _another_ package. If there's a bug somewhere else, we need a test in that packge (presumably that has been added). . This test also seems a little complicated. Why not just write a simple function that does a broadcast, and then try to autodiff that? Why do we need initial conditions, models, etc?. For example. ```julia; function times_c!(a, b, c); a .= b .* c # c is a number; return sum(a) # or whatever we gotta return; end. grid = RectilinearGrid(arch, size=(1, 1, 1), extent=(1, 1, 1)); a = CenterField(grid); b = CenterField(grid); c = 2; @test try ; autodiff(times_c!, a, b, c... # or something); true; catch; false; end; ```. It's super important for tests to be as short and easy to understand as possible, because maintaining test code is one of the main bottlenecks on development.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2105014020:33,update,updates,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2105014020,2,['update'],['updates']
Deployability,"> Third, what exactly is computed in the last plot fo the integrated stress tensor? Also, have you computed these for the nonIBM case to see what the real wall does?. Sorry probably could have been clearer on this. This is just du/dy, calculated with a centered difference between the closest two fluid cells to the boundary, then integrated along the boundary line (ie. du/dy summed and multiplied by Lx). The plot above is the error between the IBM and nonIBM case. This plot here is the values themselves (dashed is nonIBM, solid is IBM); ![Bickley_dudy](https://user-images.githubusercontent.com/67593861/122993772-b4a0bf00-d375-11eb-9b60-2243077ce838.png); ; > > First, if `c` is the concentration of a tracer it should be non-negative. If you are picking it to be a `sine` I might suggest having `1 + sin` just to avoid negative values. That being said, I don't think it's going to have any impact on the results but might be worth trying.; > ; > Fair point; using `1 + sin(x)` as the initial condition would measure leakage since the total ""mass"" is then Lx * Ly. I propose adding another tracer though specifically for that purpose since it's easy. You are correct. I think the added tracer idea would be perfect. My mind was stuck on the cylinder concentration one I've done before, and didn't think about the difference here!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866308816:58,integrat,integrated,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866308816,4,['integrat'],['integrated']
Deployability,"> This PR removes the PencilFFT library from Oceananigans and builds a distributed FFT solver using Oceananigans' inhouse transforms. This allows us to run on GPUs both periodic and bounded domains. No stretched mesh is supported at the moment (that will come in a later PR); > ; > The transposition is performed through a custom `transpose` routine built for Oceananigans' fields that assumes; > ; > * the starting configuration is always a _z-free_ configuration.; > * the transpose directions are _z-free_ -> _y-free_ -> _x-free_ -> _y-free_ -> _x-free_; > * the y-direction is integer divisible by the number of ranks that divide the x-direction; > * the z-direction is integer divisible by the number of ranks that divide the y-direction; > ; > An additional assumption is that:; > ; > * if TY is Bounded, also TZ needs to be Bounded; > * if TX is Bounded, also TY needs to be Bounded; > ; > All these assumptions can be relaxed in following PRs. Are these statements still accurate?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-2197303850:416,configurat,configuration,416,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-2197303850,2,['configurat'],['configuration']
Deployability,"> This is great! Have you started a PR already to support Sparse in AMDGPU proper?. @vchuravy yes here's the PR: https://github.com/JuliaGPU/AMDGPU.jl/pull/298. We're stuck for some time since we're getting some timing issues on a couple of tests; We get incorrect results depending on the timing of the operations. Even after adding synchronization after each operation, the error still persists. Other than that they seem to work fine. @jpsamaroo can update you on that. > So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?!; > The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. @navidcy @simone-silvestri I don't have write access to this branch so you can update the branch first before reviewing the PR. This work is not yet ready to be merged yet to the main branch so we decided in the past that this might be the place for it while we test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562:453,update,update,453,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562,2,['update'],['update']
Deployability,"> This is great, though I'm wondering what it's role in the Oceananigans code base is. Is the intention to remove these bits once WENO is actually implemented in the code?. Yeah so the point of this PR was to test the WENO operators independently of Oceananigans.jl (also to play around with how advection schemes interact with different time steppers). The WENO operators were coded so that we can readily integrate them with the existing operators in `tracer_advection_operators`. So when an advection scheme abstraction is implemented and `weno.jl` is integrated into the main code, `verification/tracer_advection_1d/tracer_advection_1d.jl` can be converted into an Oceananigans.jl verification experiment. Right now it's just a WENO-5 verification experiment. > Why not?. Ah sorry I wasn't clear. I just didn't think running with CFL=4 would be possible in 3D. > I think the first course of action may be to do something similar to what we did for the nonlinear equation of state: implement a simple new advection scheme (even as simple as first order upwind?) for the purpose of designing an `Advection` abstraction. Agreed. First-order upwind is actually included in this PR; ```julia; @inline ∂x_advective_flux(i, Δx, u, ϕ, ::FirstOrderUpwind) =; max(u[i], 0) * (ϕ[i] - ϕ[i-1])/Δx + min(u[i], 0) * (ϕ[i+1] - ϕ[i])/Δx; ```; but it's so diffusive I don't know if we want to include it as an option (although it's up to the users, they may have a good reason to use first-order upwind).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-579900751:407,integrat,integrate,407,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-579900751,2,['integrat'],"['integrate', 'integrated']"
Deployability,"> This update just fixes a trivial problem with the test though, which we need so that tests pass on `main` (we can't merge any PRs until we fix this urgent issue).; > ; > I suggest that we fix more substantial issues with the test in a future PR? It might be helpful to open an issue with some of your comments too @christophernhill. @glwagner that sounds OK. the include(""dependencies_for_runtests.jl"") breaks. ```; export TEST_FILE=test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl; /Applications/Julia-1.7.app/Contents/Resources/julia/bin/julia --project=. test/runtests.jl ; ```. workflow because of. ```; const AB2Model = NonhydrostaticModel{<:QuasiAdamsBashforth2TimeStepper}; ```. in ; ```; utils_for_runtests.jl; ```. which can't be redeclared since its const? Is there a trick to fix that?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002698278:7,update,update,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002698278,1,['update'],['update']
Deployability,> This warning means that you didn't configure MPI correctly to work with julia. There is some documentation on how to do it [here](https://juliaparallel.org/MPI.jl/stable/configuration/). We should add a link in the docs to this webpage. So I went to that doc pages but I wasn't sure -- do I need to install MPIPreferences? There is no other way?; We should definitely add a link to that docs page then.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3673#issuecomment-2278718087:172,configurat,configuration,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3673#issuecomment-2278718087,2,"['configurat', 'install']","['configuration', 'install']"
Deployability,> Under ColPrac people should merge their own PRs to avoid surprises but I'll take your comment as permission to merge and tag a new release :P. I have been doing that. I'm just not sure about the tagging thing so I thought it was best if you did it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1367#issuecomment-780208984:133,release,release,133,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1367#issuecomment-780208984,1,['release'],['release']
Deployability,"> Update: I used the formulas in the paper to approximate the gradient of pressure. In a test case that is pressure dominated, I found that the accuracy imporoved by more than what the theory predicted (> 16), but that is very encouraging that we are doing something right. Note that ""4th-order"" refers to the rate of convergence of the scheme as the grid spacing is reduced. For a particular resolution (and assuming that you are in the ""asymptotic regime of convergence""), the improvement gained from higher-order scheme involves both the rate of convergence / slope of the error estimate as well as a constant (the intercept) that's specific to the problem. As a result, you usually don't have a theoretical prediction for improvement at fixed resolution, I don't think (though I suppose you might be able to generate an estimate if you are differentiating a function with easily knowable properties). Empirically we usually find that higher-order schemes reduce the constant by quite a bit! Which is good --- since we often run marginally resolved problems, improving the constant (rather than the slope/rate of convergence) turns out to be the most important benefit of a high-order scheme. The plot is super busy, but the point is hopefully illustrated: higher-order advection schemes not only converge _more quickly_ to the exact solution as resolution is increased (eg, the slopes of the lines are steeper) but _also_ have reduced error at a _fixed_ resolution (eg, the error is less for WENO5 than CenteredSecondOrder at the fixed resolution 2^7):. ![image](https://user-images.githubusercontent.com/15271942/101667154-fba01600-3a1c-11eb-824e-f3ec82367229.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741942088:2,Update,Update,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741942088,1,['Update'],['Update']
Deployability,> Update: changed the API such that it is possible to specify the preconditioner and the settings:; > ; > `preconditioner_method = :None` is no preconditioner. Why not `preconditioner_method = nothing`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2105#issuecomment-997059293:2,Update,Update,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2105#issuecomment-997059293,1,['Update'],['Update']
Deployability,"> Using a discretized version of the thermal wind balance is a sound suggestion, but it does not explain why the error only appears when evolving the total fields. Why not? When evolving the total fields, the condition of geostrophic balance is computed during the prognostic evolution of the total variables. When evolving just the perturbation, the algorithm for mean-perturbaiton decomposition _assumes_ that the mean fields are balanced. There is no need to worry about the tiny difference between discrete and continuous balance in the case that you only evolve perturbations. But if you want to evolve the geostrophically balanced state, you must ensure that it is perfectly balanced to within machine precision, or you will have an adjustment. That's the basis for my suggestion. I'm not sure the computation I recommended achieves numerical balance (something might be missing) --- that should be checked.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3251#issuecomment-1712196487:515,continuous,continuous,515,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3251#issuecomment-1712196487,1,['continuous'],['continuous']
Deployability,"> Very nice!; > ; > Could we add to the `show` function a `max` and `min` value of the field (if concrete)?. I agree strongly that we should show some information about field _value_ (not just type info like we show now). Showing some statistics might be a nice step (for small fields, we could also just show the whole array?). However, do you mind if we address this in a future PR? I think it can be resolved along with #2064 (which I just updated to encompass fields)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2121#issuecomment-1012207736:443,update,updated,443,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2121#issuecomment-1012207736,1,['update'],['updated']
Deployability,"> We could procede in a couple of ways from here:. Let me provide a few other options:. * Compute the 2D boolean masks for reduced operations in `x`, `y`, and `z` when forming `ImmersedBoundaryGrid`. Then, use those masks for conditional differencing of reduced fields, rather than calling `immersed_inactive_node`. * For `GridFittedBottom` and `PartialCellBottom`, as a stop gap, define these methods:. ```julia; @inline conditional_δx_f(ℓy, ℓz, i, j, k, ibg::GFBIBG, δx, r::ZIRF, args...) = ifelse(immersed_inactive_node(i, j, ibg.Nz, ibg, c, ℓy, ℓz) |; immersed_inactive_node(i-1, j, ibg.Nz, ibg, c, ℓy, ℓz),; zero(ibg),; δx(i, j, k, ibg.underlying_grid, r, args...)). ```. That use a condition based on whether `k == Nz` is immersed. This will fix fields that are reduced in `z` without increasing memory storage or doing a computation in the immersed boundary grid constructor. And that's the most common case anyways. * When building a `ReducedField`, compute the mask that has to be applied to abstract operations. Then, extend the `_derivative` constructor for the combination of a `ReducedField` argument + `ImmersedBoundaryGrid` using conditional operation. This has the advantage of avoiding the mask computation in `ImmersedBoundaryGrid` (since its only needed to do operations on reduced fields). The disadvantage is that different reduced fields have to redo the computation. Also, this only fixes abstract operations and does not fix the internal operators. We also have to update the conditional operators to throw away the immersed boundary grid for reduced fields, or throw away the immersed boundary grid inside the abstract operation. * A variant on the above approach is to compute the mask when forming `Derivative`. But then a new mask is computed for every operation. There's probably a lot of other options. Keep the brainstorming coming.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3588#issuecomment-2099195353:1489,update,update,1489,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3588#issuecomment-2099195353,1,['update'],['update']
Deployability,"> We need some PlotRecipes for fields...; > ; > (In general, not for this PR!). We need that badly... I think we should take the approach in `ClimaCore.jl` which is to develop an ""external"" package that lives in `/lib`. Perhaps `Makinanigans.jl` or `Vizinanigans.jl`. Performing new releases is a little more arduous with that setup but its probably worth it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2238#issuecomment-1034179606:283,release,releases,283,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2238#issuecomment-1034179606,1,['release'],['releases']
Deployability,"> We should also bump the patch version number by editing `Project.toml` so this gets captured by a tagged release I think. I can do that if you like!. I'm not sure what you'd need to do here, so probably best for you to do that!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1935#issuecomment-900571106:26,patch,patch,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1935#issuecomment-900571106,2,"['patch', 'release']","['patch', 'release']"
Deployability,"> We would need CUDA 3.8.0 to develop multiGPU architectures without having to use MPI.; > ; > You mind if I revamp this PR and try to see what we need to do to update CUDA? I think the tests not passing comes from the fact that we also need to update CUDAKernels to version 0.3.3 (we are now using 0.3.0); > ; > Actually for me everything works very good from main just switching to CUDA 3.8.0 and CUDAKernels 0.3.3. That is very exciting! Do you know of any scaling results that people have done using this multiGPU approach? I'd be keen to try this with Oceananigans when it's working. I know that we tried using MPI and GPU last summer and had some problems. One, getting it to work was a pain. Two, the effiicency dropped down to 60% when going fro 1 to 2 GPUs. I now we can do better, and maybe this is a way of doing that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1044679744:161,update,update,161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1044679744,2,['update'],['update']
Deployability,"> Well, that is removed for `VectorInvariantFormulation`; > ; > ```; > @inline x_pressure_gradient(i, j, k, grid, g, h, hB, formulation) = ∂xᶠᶜᶜ(i, j, k, grid, half_g_h², h, g); > @inline y_pressure_gradient(i, j, k, grid, g, h, hB, formulation) = ∂yᶜᶠᶜ(i, j, k, grid, half_g_h², h, g); > ; > @inline x_pressure_gradient(i, j, k, grid, g, h, hB, ::VectorInvariantFormulation) = g * ∂xᶠᶜᶜ(i, j, k, grid, h_minus_hB, h, hB); > @inline y_pressure_gradient(i, j, k, grid, g, h, hB, ::VectorInvariantFormulation) = g * ∂yᶜᶠᶜ(i, j, k, grid, h_minus_hB, h, hB); > ; > @inline x_bathymetry(i, j, k, grid, g, h, hB, formulation) = g * h[i, j, k] * ∂xᶠᶜᶜ(i, j, k, grid, hB); > @inline y_bathymetry(i, j, k, grid, g, h, hB, formulation) = g * h[i, j, k] * ∂yᶜᶠᶜ(i, j, k, grid, hB); > ; > @inline x_bathymetry(i, j, k, grid, g, h, hB, ::VectorInvariantFormulation) = zero(grid); > @inline y_bathymetry(i, j, k, grid, g, h, hB, ::VectorInvariantFormulation) = zero(grid); > ```. Sorry, I didn't see the updated version. Since it's zero, i agree that the bathymetry terms don't do anything. . And we both agree that we should have `h - b` or `h - hB`, as you have in the code. The code looks good to me. Hmm, but we still have blow up very quickly?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1129228701:990,update,updated,990,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1129228701,1,['update'],['updated']
Deployability,"> What I meant about trusting users for auxiliary fields is that you can do e.g. this: `model = NonhydrostaticModel(; grid, auxiliary_fields=(; A = randn(1, 2))` and it doesn't error. Why do we want to support arrays in `auxiliary_fields`?. The main usage for `auxiliary_fields` is that they can be invoked in continuous-form forcing functions. In that usage they have to be `AbstractField`, otherwise we can't figure out how to interpolate them into a forcing function. `auxiliary_fields` isn't meant to be a place to store just any information needed for a model (what would the purpose of that be?) We can adapt `auxiliary_fields` but it would be good to understand why. Separately, perhaps we should check that all `auxiliary_fields` are `AbstractField`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3676#issuecomment-2269340649:310,continuous,continuous-form,310,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3676#issuecomment-2269340649,1,['continuous'],['continuous-form']
Deployability,"> What about on a non-immersed rectilinear spaced grid? The reduction is a little different in that case. That seems OK:. ```Julia; julia> using Oceananigans; [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; WARNING: Method definition next_stream() in module CUDAKernels at /g/data/v45/nc3020/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:33 overwritten in module Architectures at /g/data/v45/nc3020/Oceananigans.jl/src/Architectures.jl:23.; ** incremental compilation may be fatally broken for this module **. [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads. julia> using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom. julia> Lx, Ly, Lz = 500, 600, 3; (500, 600, 3). julia> Nx, Ny, Nz = 128, 128, 64; (128, 128, 64). julia> σ = 1.04 # linear stretching factor; 1.04. julia> linearly_spaced_faces(k) = - Lz * (1 - σ^(1 - k + Nz)) / (1 - σ^Nz); linearly_spaced_faces (generic function with 1 method). julia> rectilinear_grid = RectilinearGrid(GPU(),; topology = (Periodic",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2744#issuecomment-1256161457:920,Configurat,Configuration,920,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2744#issuecomment-1256161457,1,['Configurat'],['Configuration']
Deployability,"> What's happening presently is KA is forcing an older version of Enzyme to be used in the tests, that doesn't have the inactive_type used by the testing infra.; > ; > This PR [JuliaGPU/KernelAbstractions.jl#426](https://github.com/JuliaGPU/KernelAbstractions.jl/pull/426) added relevant parts to KA, which currently is waiting for the julia registry to release a new patch release: [JuliaRegistries/General#93272](https://github.com/JuliaRegistries/General/pull/93272); > ; > Once that lands, this should succeed. Ok great!. Also let me know if its ok with you if I set up a new buildkite step for the enzyme extension.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1759975633:354,release,release,354,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1759975633,3,"['patch', 'release']","['patch', 'release']"
Deployability,> Yeah I encountered it when trying to put some interpolations with arrays in a DiscreteForcing. I guess they're not as commonly used as ContinuousForcing. Might be nice to have an interface for that for `ContinuousForcing`!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1642#issuecomment-836949524:137,Continuous,ContinuousForcing,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1642#issuecomment-836949524,2,['Continuous'],['ContinuousForcing']
Deployability,"> Yeah okay, both of those suggestions make sense and adding a line in update state is probably the most general solution too.; > ; > Once I've cleaned up a bit I guess the only the last we would need to settle on for the simplest case is how we specify the form of ϕn+1 (and how I've written the fill_bulk_outflow_halo file). Currently, it is hardcoded that it is upwinded when there is an outflow and relaxed to an external solution when it inflows as:; > ; > `(1 - Ūᵇ - 1/τ̄) * ϕⁿ + Ūᵇ * ϕᵢ₋₁ + ϕᵉ / τ̄`,; > ; > where 0<Ub<1, but conceivably it could be something along the lines of unwinding both ways like:; > ; > `(1 - Ūᵇ) * ϕⁿ + max(0, Ūᵇ) * ϕᵢ₋₁ - min(0, Ūᵇ) * ϕᵉ`; > ; > Perhaps if we change to:; > ; > ```julia; > struct BulkOutflow{IS, OS} <: AbstractBoundaryConditionClassification; > inflow_speed :: IS; > outflow_speed :: OS; > end; > ```; > ; > then we can make it the general form:; > ; > ϕin+1=(1−Ui−Uo)ϕn+Uiϕe+Uoϕi−1n; > ; > with 0<Ui,Uo<1 and only Ui or Uo can be non-zero. Could this be formulated as a condition, using the `Open` classification?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1979243985:71,update,update,71,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1979243985,2,['update'],['update']
Deployability,"> Yeah, I've done some tests here: [#3646 (comment)](https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2211254101); > The 1D test is consistent with the analytical solution, which works great!. @liuchihl, I think @navidcy is asking about smaller unit tests that could be run in Continuous Integration (CI) to automatically test the package whenever any changes get made. The simplest test would be a 1D simulation with a background linear tracer profile with boundary conditions of $\text{Flux} = - \kappa \partial_{z} c$ at the top and bottom. The correct solution would be that nothing happens when the simulation is time-stepped.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287291950:292,Continuous,Continuous,292,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287291950,2,"['Continuous', 'Integrat']","['Continuous', 'Integration']"
Deployability,"> Yes, that seems promising! For some problems of that nature we have recommended that people write functions to interpolate their discrete data, since one can then change resolution seamlessly... but perhaps there's a case where writing an interpolator doesn't make sense or is too cumbersome for a simple setup. 🤔. Writing an interpolator function would certainly be the most elegant way but some user might already be used to other regridding tools (like nco) and would prefer to read in some fields?. A simple fun example for using array inputs:. Prepare a tracer field by backward advecting the attached image or a logo in a Stommel gyre. Save the distorted image and now prepare the example using this distorted image as the initial condition for a forward advection :-). More seriously you could do the example including backward and forward integration to show the quality difference of several advection schemes. ![image](https://user-images.githubusercontent.com/19711382/118604859-ef7f6800-b7b5-11eb-87de-98934b4df17d.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1656#issuecomment-842903736:849,integrat,integration,849,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1656#issuecomment-842903736,2,['integrat'],['integration']
Deployability,"> You can use `FluxBoundaryCondition` with `closure=nothing` (it's `Value` and `Gradient` that won't work). You can obtain global dissipation by differencing globally integrated TKE (and perhaps a pointwise dissipation by evaluating the TKE budget), but I agree that it's probably more difficult. @simone-silvestri may have some tips as he has been developing an implicit LES scheme for mesoscale turbulence.; > ; > Does `AnisotropicMinimumDissipation` work? Or other closures?. Nice catch! It does work for AMD. I hadn't tried that before because I assumed it wasn't gonna work. Unfortunately I can't really use AMD because it produces a lot of noise in the stratified regions of my domain, but hopefully adapting Smag isn't too hard?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403796249:167,integrat,integrated,167,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403796249,1,['integrat'],['integrated']
Deployability,"> You mean ""install MPI.jl"" or by MPI you mean something else?. Right, `Pkg.add(""MPI"")`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2283089067:12,install,install,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2283089067,1,['install'],['install']
Deployability,"> `benchmarks/Manifest.toml` had CUDA updated to 3.7 which caused problems when benchmarking Oceananigans restricted to 3.3.6. This PR adds a `compat` to `benchmarks/Project.toml` and downgrades `CUDA`.; > ; > I think maybe a better solution would be to add Oceananigans explicitly to `benchmarks/Project.toml`. But then to run the benchmarks on the current repo we'd have to update the environment every time. Is it possible to automatically pull compat entries from the repo's `Project.toml`? (If it is, should we?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090355921:38,update,updated,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090355921,2,['update'],"['update', 'updated']"
Deployability,"> `w` is not a prognostic field for the hydrostatic free surface model so it cannot be used as a dependency in continuous boundary functions.; > ; > We could think to change the dependencies to all fields instead of only the prognostic ones. I wasn't aware of that. Is there a way to use `w` as a dependency here? In the MWE `w` is superfluous, but on complex bottom topography the drag on the sides should physically depend on `w`, among other things.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2711#issuecomment-1225760667:111,continuous,continuous,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2711#issuecomment-1225760667,1,['continuous'],['continuous']
Deployability,"> any suggestions for tests I might add to get the coverage up?. Hmmm, I think for now it's sufficient that the regression tests pass as this PR should preserve existing functionality. If you're going to implement more rigorous/high-level LES tests in the future then the coverage will go up. And it'll probably become clearer which unit tests are needed. > Lastly, I am thinking that all the doc strings in closure_operators.jl are actually a detriment to readability and understandability. Thoughts?. I kind of agree, but with the docstrings we can integrate them into the documentation, and if the docstrings have LaTeX then we can view the operators alongside the math in the docs. I guess it's readable documentation vs. more readable code? Good practice says we should probably keep them, but maybe we can separate them somehow? I guess right now we only read the code but maybe in the future we'll mainly be reading the docs and not the code.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496471848:551,integrat,integrate,551,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496471848,1,['integrat'],['integrate']
Deployability,"> as mentioned on slack here's @jlk9 's Enzyme integration test PR #3480; > ; > We should check that the tuple doesn't also break that (or try to find the correct mutually happy solution like maybe vararg type). @jlk9 , the test on #3480 does not pass right now, is that correct?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1946397811:47,integrat,integration,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1946397811,1,['integrat'],['integration']
Deployability,"> discourage the use of frequent updates of the time step when using AB2. This is just buyer beware, as with anything. There are no examples currently that update the time-step at all while using AB2...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3738#issuecomment-2313383489:33,update,updates,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3738#issuecomment-2313383489,2,['update'],"['update', 'updates']"
Deployability,"> forcepush a boolean that specifies the behavior of the git-deployment. The default (forcepush = false) is to push a new commit, but when forcepush = true the changes will be combined with the previous commit and force pushed, erasing the Git history on the deployment branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2243#issuecomment-1038569210:61,deploy,deployment,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2243#issuecomment-1038569210,2,['deploy'],['deployment']
Deployability,"> hmmm, I am not sure. What does `mask_immersed_field!` mean for a `FunctionField`? We probably need to specialize `mask_immersed_field_xy!` for `Field`s only and add a fallback for `mask_immersed_field!`; > ; > ```julia; > mask_immersed_field!(field, args...; kw...) = nothing; > ```; > ; > why was the wrong mask called in the update?. Indeed I think it's ok if `mask_immersed_field!` does `nothing` for non-Fields. But also not sure why we don't already have that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3503#issuecomment-1997786025:329,update,update,329,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3503#issuecomment-1997786025,1,['update'],['update']
Deployability,"> never seen actually, can it have something to so with the conditionals?. This PR doesn't touch conditionals though! My only guess is that the `GPUArray` update did it. But. https://github.com/JuliaGPU/GPUArrays.jl/pull/401/commits/5896c28b003ccfc12b67bea6d9c4b5c130424f0a. seems innocuous...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1116030533:155,update,update,155,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1116030533,1,['update'],['update']
Deployability,"> nono we are adding another pipeline for distributed as part of #3326. You can disregard the erroring of `buildkite/oceananigans-distributed`. I see, thank you!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3323#issuecomment-1756080047:29,pipeline,pipeline,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3323#issuecomment-1756080047,1,['pipeline'],['pipeline']
Deployability,"> note that our input is the Stokes shear, so I think the most convenient thing to have is the Stokes drift at every level. We can difference that between the top and bottom of a cell to get the ""finite volume averaged Stokes shear"". What do you think about that?. I think it would be good to have the Stokes drift profile available somewhere. So even though only the Stokes shear is used in Oceananigans, I think it is still useful to get the Stokes drift at every level and then differentiate that to get the Stokes shear. >Perhaps it makes sense to start with the Harcourt and D'Asaro 2008 model then? I'll look into that and document what I find here... In terms of implementation the ""theory wave"" is easier -- it's essentially a function of wind speed (the integration over the empirical wave spectrum is done analytically). We just need to apply it multiple time to different depths and then differentiate that to get the layer averaged Stokes drift. For the model used in Harcourt and D'Asaro (2008) we need to do the integration over the empirical wave spectrum numerically. And in addition to wind speed, it also depends on wave age. So I would probably start from the ""theory wave"". I guess it should be straightforward to convert [the Fortran function in GOTM](https://github.com/gotm-model/code/blob/master/src/stokes_drift/stokes_drift_theory.F90) to Julia? . In terms of the resulting Stokes drift profile, ""theory wave"" usually gives a weaker Stokes shear under the same wind. The Donelan et al. (1985) spectrum used in Harcourt and D'Asaro (2008) is for pure wind-wave and gives a strong Stokes shear especially very close to the surface. . I have never used ""theory wave"" to drive an LES. But if we want to approximate the Stokes drift under a wide range of wave conditions with both wind waves and swell, I guess it might not be a bad option at least in an averaged sense?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2290#issuecomment-1055347882:763,integrat,integration,763,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2290#issuecomment-1055347882,2,['integrat'],['integration']
Deployability,"> shallow_water_global.mp4 ; > @francispoulin I ll take a look on why it doesn't work. Thanks @simone-silvestri for the update. . Yes, I agree that there is some weird behaviour near the poles. Maybe ringing, but I usually those of that only happening in spectral methods. Also, no western boundary currents seem to develop, or if they do, they don't develop any eddies. Maybe because of the viscosity?. I'm happy to try and run this and take a look but the code that is pushed doesn't run for me.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1130310286:120,update,update,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1130310286,1,['update'],['update']
Deployability,"> that looks very weird! But it is structured in some sense, it looks like the initial condition has some inbalances that generate noise which gets cleaned up by numerical diffusion. Interesting also that buoyancy extrema are continuously increasing in magnitude. If this is not happening with z-directed gravity, it might really be that there is some bug/incorrectness in the buoyancy model. A way to test this would be to recreate the same setup with z-directed gravity and use an immersed boundary to represent the tilt. If that case behaves as expected we know where to focus. @simone-silvestri I'm not sure if that'd be an apples-to-apples comparison. We'd be comparing a domain with smooth tilted boundaries (using the rotated buoyancy) against a domain with jagged tilted boundaries (using our grid-fitted IB). So I'm not sure what we could learn there (please lmk if I'm missing something here). That said, I think it's worth the shot so I might try to implement that soon and see what happens.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517948385:226,continuous,continuously,226,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517948385,2,['continuous'],['continuously']
Deployability,"> then we'd have to rewrite loads of stuff to make it so the user can specify whatever they want for the external state. I think see your point (I'm not sure I grasp the totality of it). Is your point that we are able to _re-use_ more existing code if we allow `ContinuousBoundaryFunction` and `DiscreteBoundaryFunction` as `condition`? I didn't understand this previously so thank you for clarifying. To re-use that code with a new `condition`, we can use a nesting technique:. ```julia; function getbc(open_bc::OpenBoundaryCondition, ...); state_value = getbc(open_bc.condition.external_state, ...); # other stuff related to matching; end; ```. This means that we don't have to rewrite anything, we just add new functionality for open boundary conditions on top. You could make the point that we have less _new_ code to write though, if we implement a design that allows conditions to be the same. And for users, this could be clearer, so I see the advantage of that. On the flip side, the advantage of making a new `OpenCondition` is that `getbc` retains its meaning as ""the function that returns the boundary condition value"". When we have an external state + matching scheme, the boundary condition values are not exactly the external state and are modified by the matching scheme. So I see pros and cons to both, but the good news is that we can actually talk coherently about the pros and cons. And if there are other pros and cons please mention them.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1988781194:262,Continuous,ContinuousBoundaryFunction,262,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1988781194,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"> this is a breaking change so let's bump up a minor release @iuryt, could you bump up the minor version number in the Project.toml?; > ; > https://github.com/iuryt/Oceananigans.jl/blob/ef5e0aa1a8130f26117d06b82d6b8eba420e384f/Project.toml#L4. Also, when this happens, rename the PR to add the new version in front; see [#3147](https://github.com/CliMA/Oceananigans.jl/issues/3147#issuecomment-1595628085).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3190#issuecomment-1639635132:53,release,release,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3190#issuecomment-1639635132,1,['release'],['release']
Deployability,"> v1.0 isn't gonna be the last version we ever release, so I think it's okay to release a v1 with a subset of these features and push the other items to a v2.0 that might come out afterwards. I agree with this in general. But the API is changing week by week, and not just small changes either. I think we are designing a really complex system without a good guide to take from.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1234#issuecomment-885738155:47,release,release,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1234#issuecomment-885738155,2,['release'],['release']
Deployability,> very nice! Is tapering planned as being a part of this PR or will that be saved for a future update?. We need to discuss what the API for tapering would look like.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1994#issuecomment-924056580:95,update,update,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1994#issuecomment-924056580,1,['update'],['update']
Deployability,> when I run; > ; > ```shell; > (base) navid:OceananigansDistributedExamples/ (glw/docs2) $ mpiexec -n 2 julia --project distributed_example.jl; > ┌ Warning: You appear to have run julia under a different `mpiexec` than the one used by MPI.jl.; > │ See the documentation for details.; > └ @ MPI ~/.julia/packages/MPI/is7GN/src/environment.jl:26; > ```. This warning means that you didn't configure MPI correctly to work with julia. There is some documentation on how to do it [here](https://juliaparallel.org/MPI.jl/stable/configuration/). We should add a link in the docs to this webpage,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3673#issuecomment-2278388760:523,configurat,configuration,523,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3673#issuecomment-2278388760,1,['configurat'],['configuration']
Deployability,"> with bathymetry we would have -g∂ₓ(h + b - H) = -g∂ₓh -g∂ₓb, and in conservative form, -g∂ₓ(h²/2) -gh∂ₓb, right?. Oh, this seems right. Apologies for the confusion. I'm still not sure we want to analytically integrate one of the pressure gradient terms `h dx(h) = dx(h^2/2)` but leave the other unchanged. If we treat them both similarly then we would write the pressure gradient term. ```; -g h * ∂ₓ(h + b); ```. It might be worth testing both possibilities to see if one has favorable numerical properties?. Perhaps this is related to the whole issue re: well-balanced methods, etc... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1115162071:210,integrat,integrate,210,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1115162071,1,['integrat'],['integrate']
Deployability,"> yep broadcasting works. My thought was that `plan` can be hacked to store unified memory. I still have to look at the data structure to see how to do it.; > ; > cufftxt basically works in the same way (local FFT direction distributed among the workers then transpose and nonlocal FFT). I am not sure they use unified memory but they for sure use transposes https://on-demand.gputechconf.com/gtc/2014/presentations/S4788-rapid-multi-gpu-programming-cuda-libraries.pdf. Mmm ok. Is this proposal a way to avoid cuffxt basically? I think what you outlined is somehow roughly how PencilFTTs work:. 1. FFT along local direction (dim=1); 2. Simultaneously communicate and permute data to (2, 1, 3) (or is it (2, 3, 1)?); 3. FFT along local direction (dim=2); 4. Simultaneously communicate and permute data to (3, 2, 1); 5. FFT along dim=3. At the end, the data has permutation (3, 2, 1). The backwards transform then reverses this process. `solver.storage` is actually a tuple of 3 preallocated arrays to support this algorithm. For the tridiagonal solver I think we want to use the same algorithm, except that we skip step 1 (ie the first step is to communicate and permute data with no transform). Once the two other transforms are complete we have data in the configuration (x, y, z) where z is local, and we can do a tridiagonal solve in eigenfunction space. Then we transform back and obtain data back in the (z, y, x) permutation, with z local, and copy into the pressure. We have to extend the tridiagonal solver to accomodate this kind of permutation for distributed CPU, so if we have an algorithm like the one above we can then also use it for MultiRegionGrid solves on the GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2523#issuecomment-1119916674:1258,configurat,configuration,1258,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2523#issuecomment-1119916674,1,['configurat'],['configuration']
Deployability,"> ~Is there a way around the order of `includ`ing files so that this works? If not, it probably isn't necessary to force that the `particles` slot in models is taken by a `Nothing` or `LagrangianParticles` as it is now? So we could get rid of the particles dependency in models and change the order to `include` particles after models?~; > ; > ~The only thing I can think of is that if a user passes something other than particles it might give a confusing error.~; > ; > ~I think I found a use case for removing the typing of the particles slot and overloading the update functions too but I can't remember what it was now.~; > ; > This won't work because particles need to already be defined for the timesteppers. My other solution would be to define a function `total_velocities` that is defined somewhere early on, and then define new methods for each model?. What is the problem you are trying to solve?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493406171:566,update,update,566,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493406171,1,['update'],['update']
Deployability,">On #1962 we add bars capability, which will allow us to separate the tests into a few categories: fast-running, crucial tests will run on every commit to a PR, and slower, more comprehensive integration tests will run only when bors try or bors r+ is invoked. This might help streamline the development workflow. Also if we are using Caltech's central cluster for CI we can potentially split the jobs amongst more workers, which might help speed up tests overall. Definitely looking forward to that PR. > Even more important is simplifying the test implementation. Right now updating tests and validation experiments is a time sink for developers that change the API and has really slowed development down lately. So we shouldn't rewrite tests in a way that makes development more difficult (eg keeping the maintenance burden of the test infrastructure small is more important than decreasing the computational cost of tests). This is really a side comment --- we should be able to improve the tests both so they are faster and easier to maintain, if we are careful. I definitely agree with that. I just don't see how to do it. Being thorough with the tests (which I believe is something we want) necessarily comes with using the API many times, making changes to it a bit slower to implement, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-922529440:192,integrat,integration,192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-922529440,2,['integrat'],['integration']
Deployability,">This is breaking, so I think we should bump a major release. Bumped and merged. @glwagner I'm waiting for https://github.com/CliMA/Oceananigans.jl/pull/1892 to be merged as well before actually tagging a new release, but feel free to go ahead and just tag one if that's not good practice.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-887894341:53,release,release,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-887894341,2,['release'],['release']
Deployability,"@EavenW here is some code for you:. ```julia; using Oceananigans; using Oceananigans.Fields. f = 1e-4 # [s⁻¹] Coriolis parameter. # Use 'const' so boundary functions work on the GPU.; const ω = 2π/f # [s] Inertial period; const u★ = 0.01 # [m s⁻¹], friction velocity. # fluxes *kinematic* because they are applied to the velocity field. ; x_momentum_flux(x, y, t) = u★^2 * cos(ω * t); y_momentum_flux(x, y, t) = u★^2 * sin(ω * t). τˣ = BoundaryFunction{:z, Face, Cell}(x_momentum_flux); τʸ = BoundaryFunction{:z, Cell, Face}(y_momentum_flux). u_boundary_condition = HorizontallyPeriodicBCs(top=BoundaryCondition(Flux, τˣ)); v_boundary_condition = HorizontallyPeriodicBCs(top=BoundaryCondition(Flux, τʸ)); ```. As @ali-ramadhan we are redesigning this API this week. So expect changes very soon if you keep `Oceananigans` updated. We think the API will become clearer and easier to use. This code is young so we certainly appreciate comments and criticism that will help us make the code easier-to-use. I just noticed that the docstring defined inside the struct does not print at the REPL, so here it is:. ```julia; """"""; BoundaryFunction{B, X1, X2}(func); A wrapper for user-defined boundary condition functions on the; boundary specified by symbol `B` and at location `(X1, X2)`. Example; =======; julia> using Oceananigans: BoundaryCondition, BoundaryFunction, Flux, Cell. julia> top_tracer_flux = BoundaryFunction{:z, Cell, Cell}((x, y, t) -> cos(2π*x) * cos(t)); (::BoundaryFunction{:z,Cell,Cell,getfield(Main, Symbol(""##7#8""))}) (generic function with 1 method). julia> top_tracer_bc = BoundaryCondition(Flux, top_tracer_flux);; """"""; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/629#issuecomment-587013856:821,update,updated,821,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/629#issuecomment-587013856,1,['update'],['updated']
Deployability,@JuliaRegistrator register(). Bug fix #322 was pretty important so releasing a new patch.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/331:83,patch,patch,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/331,1,['patch'],['patch']
Deployability,@JuliaRegistrator register(). Bug fix in PR #337 is important for GPU usability so releasing a new patch.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/339:99,patch,patch,99,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/339,1,['patch'],['patch']
Deployability,@JuliaRegistrator register(). The sophisticated `set!` function introduced in PR #343 is important for usability so releasing a new patch that incorporates it.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/345:132,patch,patch,132,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/345,1,['patch'],['patch']
Deployability,@Sbozzolo am I reading this right that ClimaAtmos does not (always) use climacommon? . https://github.com/CliMA/ClimaAtmos.jl/blob/a0e8612fd602ff33349e46ed34875ed8af45fd3a/.buildkite/gpu_pipeline/pipeline.yml#L4C55-L4C68. EDIT I suspect these are unused in favor of https://github.com/CliMA/ClimaAtmos.jl/blob/main/.buildkite/pipeline.yml,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2455810200:196,pipeline,pipeline,196,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2455810200,2,['pipeline'],['pipeline']
Deployability,@Sumanshekhar17 can you update to the latest version of Oceananigans and check whether the problem persists?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1741#issuecomment-863723847:24,update,update,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1741#issuecomment-863723847,1,['update'],['update']
Deployability,"@adelinehillier these updates are relevant to you too. Not sure what the effect this change will have on the closure + closure accuracy, so we'll have to see.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2449#issuecomment-1104259906:22,update,updates,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2449#issuecomment-1104259906,1,['update'],['updates']
Deployability,"@ali-ramadhan @francispoulin I propose that for the time being we use an abstraction where `advection` has a field `momentum` and a field for every tracer. The value of this field controls the implementation of the `advection` term, with continuous and numerical aspects ""flattened"" into a single spec. If one writes `VectorInvariant`, then we implement a second-order `VectorInvariant` form of the momentum equations. If one provides an advection scheme, when we implement a conservation form of the momentum / tracer equations with the associated stencil. When we have curvilinear grids we will need a function `validate_advection(advection, grid)` to ensure that a conservation form scheme isn't used on a curvilinear grid (for example). There's a similar consideration for stretched grids and our current WENO implementation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1349#issuecomment-776771313:238,continuous,continuous,238,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1349#issuecomment-776771313,1,['continuous'],['continuous']
Deployability,"@ali-ramadhan and @glwagner I tried the code below in some simple tests while waiting; for my car to be serviced. . ```; using Pkg; Pkg.add(""LinearAlgebra""); using LinearAlgebra. function solveLinearSystem(A,f); # Solve Aϕ=f; tol=1.e-12; E=eigen(A);; L=E.values;; V=E.vectors;; # Get amplitudes, F, of eigenvectors that give f; F=V'*f; # Get inverse eigenvalues (zeroing inverse for v. small ones); rL=map(x -> if (abs(x)>tol) 1.0/x; else 0. ; end , L);; # Get amplitudes, Φ, of eigenvectors that give ϕ; Φ=F.*rL; # Solve for ϕ given Φ; ϕ=V*Φ; println(A*ϕ,f,ϕ); return ϕ; end. Acyc=[-2. 1 1; 1 -2. 1; 1 1 -2.];; Aneu=[-1 1 0; 1. -2. 1; 0. 1. -1];; s=size(Acyc);; nx=s[1];; g=rand(nx+1,1);; divg=g[1:end-1]-g[2:end]; mdivg=sum(divg)./size(divg)[1]; divg=divg.-mdivg; solveLinearSystem(Acyc,divg); solveLinearSystem(Aneu,divg); ```. This is algorithm that underlies the FFT approach. The FFT just optimizes (and makes it more complicated) by utilizing the fact that the eigenvector/eigenvalue coefficients for the simple, constant spacing Poisson problem, are the cos and sin terms in an FFT. Code appears to work so I am going to try and hack together a ""_plugin_"" for ```solve_poisson_3d_mbc```. . The code won't be super high performance (or work for really big problems) but (fingers crossed) it should give something clean (and short) to get started and help with debugging/optimizing on GPU. Then we can work on various FFT approaches on CPU and GPU (3-d FFT, 2-d + cyclic reduction), Greg's thought on saving for gradients in continuous form. . In principle the eigenvectors and eigenvalues above should correspond with amplitudes that come out of FFTW - except that there are a bunch of 1/2 factors, N versus m numbers, complex versus split cos/sin notation bits that need to be carefully understood etc.... . Just going to learn a little about sparse matrices in Julia - I assume they must exist! Hopefully the car will take a little longer to be finished. . Chris",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/8#issuecomment-442521365:1531,continuous,continuous,1531,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/8#issuecomment-442521365,1,['continuous'],['continuous']
Deployability,@ali-ramadhan that sounds neat! Also integrate DimArray with AbstractField so the spatial dimensions can also be named? That might be the first thing to do; then we just have to add Time to DiskTimeSeries. You are a lot more familiar with DimArray so whatever makes sense.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1493#issuecomment-801953852:37,integrat,integrate,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1493#issuecomment-801953852,1,['integrat'],['integrate']
Deployability,"@ali-ramadhan, the docs log says:; ```; ┌ Info:;   | │ Buildkite config:;   | │ Commit branch: ""tomchor-patch-1"";   | │ Pull request: ""false"";   | │ Commit tag: """";   | │ Detected build type: devbranch;   | │ - ✘ ENV[""BUILDKITE_BRANCH""] matches devbranch=""master"";   | │ - ✔ ENV[""DOCUMENTER_KEY""] exists;   | └ Deploying to folder ""dev"": ✘; ```; Seems like buildkite will only reply from master? I don't see where that setting in buildkite is though...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782282187:104,patch,patch-,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782282187,2,"['Deploy', 'patch']","['Deploying', 'patch-']"
Deployability,@apaloczy just wanted to thank you for raising this issue!. I'm going to take this strategy to fix it:. 1. First merge #2426 (this changes `fill_halo_regions!`); 2. Update the halo filling interface so that field _location_ is passed into the boundary kernels. We can then use field location to infer the correct metrics. It might make sense to include 2. as part of #2437 .,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2430#issuecomment-1100210727:165,Update,Update,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2430#issuecomment-1100210727,1,['Update'],['Update']
Deployability,@charleskawczynski Ah no just a random error but I reran the Buildkite pipeline out of habit. Feel free to merge!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1435#issuecomment-793202207:71,pipeline,pipeline,71,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1435#issuecomment-793202207,1,['pipeline'],['pipeline']
Deployability,"@christophernhill @glwagner @weymouth ; I have been looking into what is the best way to implement an immersed boundary method here, and I hope to be able to model complex topography and possibly moving boundaries with it, for at least Dirichlet and Neumann boundary conditions, within the next year. The immersed boundary method (IBM) is a way to deal with complex topography without a complicated mesh or coordinate transformations. Instead of conforming the mesh to the fluid domain, a cartesian grid is generated over the whole area. Then, an added forcing term incorporates the boundary conditions into the equations. [Mittal and Iaccarino (2003)](https://www.annualreviews.org/doi/abs/10.1146/annurev.fluid.37.061903.175743), outline several ways we could do this, which all fall into two large categories:. 1. Continuous Forcing: We add a forcing term to the continuous equations, discretize the new system, and solve as normal. If the IB is set to coincide with the mesh nodes, then you get a “stairstep” like boundary, whereas if the IB intersects the mesh arbitrarily, you must distribute the forcing to several nearby nodes. Either way, it may not give you a sharp enough boundary, and you get stability constraints on rigid boundaries. . 2. Discrete Forcing: We discretize, then determine what the forcing needs to be at each time step to satisfy the boundary conditions. This method usually takes a predictor-corrector type approach as described by [Balaras (2004)](https://www.sciencedirect.com/science/article/abs/pii/S0045793003000586). You would use a predictor step to interpolate the correct values at the boundary with nearby nodes. Then, you can solve for the necessary forcing in the discretized time stepper. Finally, you recompute the true solution for the next time step, with the correct forcing term. This method does not have the stability constraints and can create a sharper boundary, but implementation will involve more changes to create this routine. . I'm leaning tow",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1036:817,Continuous,Continuous,817,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1036,2,"['Continuous', 'continuous']","['Continuous', 'continuous']"
Deployability,"@christophernhill is it possible to come up with a benchmark that does not use `ContinuousBoundaryFunction`, thereby avoiding the bug in #1928 ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-894674873:80,Continuous,ContinuousBoundaryFunction,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-894674873,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"@elise-palethorpe, I don't see the AMGX package in `Project.toml` nor in `Manifest.toml`. Btw, when I tried to add it locally on my Mac I got this:. ```Julia; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. (Oceananigans) pkg> st; Project Oceananigans v0.77.1; Status `~/Research/OC.jl/Project.toml`; [c963dde9] AMGX v0.1.2; [79e6a3ab] Adapt v3.3.3; [2169fc97] AlgebraicMultigrid v0.5.1; [052768ef] CUDA v3.11.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.5.0; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.12.6; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.5; [4a48f351] PencilFFTs v0.14.0; [6038ab10] Rotations v1.3.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.11; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [2f01184e] SparseArrays; [10745b16] Statistics. (Oceananigans) pkg> precompile; Precompiling project...; ✗ Oceananigans; 0 dependencies successfully precompiled in 11 seconds (99 already precompiled). ERROR: The following 1 direct dependency failed to precompile:. Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]. Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /Users/navid/.julia/compiled/v1.6/Oceananigans/jl_Z5b4Xf.; ERROR: LoadError: LoadError: LoadError: InitError: UndefVarError: libamgxsh not defined; Stacktrace:; [1] getproperty; @ ./Base.jl:26 [i",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1217694987:418,release,release,418,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1217694987,1,['release'],['release']
Deployability,"@elise-palethorpe, let's also update this. https://github.com/CliMA/Oceananigans.jl/blob/36596d384684c33c1c235f092da4b9b33375eaef/src/Models/HydrostaticFreeSurfaceModels/implicit_free_surface.jl#L60-L63. to add the multigrid.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1169548063:30,update,update,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1169548063,1,['update'],['update']
Deployability,"@francispoulin ! No worries about the question. I like questions. To answer your latest question --- our nonhydrostatic pressure solver is based on FFTs for regular grids and is therefore quite fast. In simple benchmarks long ago we found that other parts of the algorithm dominated the cost of a time-step. Because of that we aren't sure that having a hydrostatic-only solver would help. Of course, the story is different if we need to stretch the grid in horizontal directions. That said, it would still be interesting to be able to solve hydrostatic-only problems. This would complicate the algorithm a bit because you have to distinguish the barotropic mode, and perform a 2D pressure solve. We already have a function to integrate the buoyancy field to obtain the hydrostatic pressure. For ""things I want worked on"" my wish list falls into three categories: new physics features, new numerics / algorithms, and more boring software / UI work. Here's a couple... 1. Finishing the vertically-stretched grid implementation (numerics). We started work on this but its incomplete. This is a tricky and arduous task but would be quite nice to have... 2. Vertically-implicit time-stepping for diffusion terms (numerics). Ocean models typically use a time-stepping method that treats vertical diffusion terms implicitly. We haven't worried about this because we are focused on LES for the most part, or problems with very little diffusion. But ultimately we will need this, especially when we get around to implementing boundary layer closures. We have a tridiagonal solver that works on the GPU, so in some respects the hard work is already done for this problem. 3. Closures for LES and ocean modeling (Dynamic Smagorinsky, Deardorff, k-epsilon, Gent-McWilliams, convective adjustment (?) etc --- physics). We have a need to implement new turbulence closures new and old alike. Gent-McWilliams is probably easy since we already have a Leith closure implemented which calculates the tensor needed to rot",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724262281:726,integrat,integrate,726,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724262281,1,['integrat'],['integrate']
Deployability,"@francispoulin @glwagner ; > problem is that the velocity field is far from uniform at the outlet where a constant outflow of 1.0 is being prescribed. I wonder if this would cause numerical issues. To use `NormalFlow` we may either need a sponge layer, or to implement a more sophisticated outlet condition like an Orlanski condition. I have a version with a sponge layer I used for my own testing I could add. I updated the arbitrary grid branch to have the validation correct with normal flow's location specified, but the master version never got changed. > > If we are going to update this example, it's probably better to use `ImmersedBoundaryGrid` like in the other immersed boundary validation experiments...; > ; > Good point and I can look into that before this is reviewed. I was waiting for no-slip condition on the `ImmersedBoundaryGrid` before this validation is useful again, because otherwise you just get fun videos, but no actual validation. I have a work in progress script with a bunch of analysis I can add when we're ready to do so. Until then it might be best just to remove this file completely because it's so out of date.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1793#issuecomment-871667459:413,update,updated,413,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1793#issuecomment-871667459,2,['update'],"['update', 'updated']"
Deployability,"@francispoulin @glwagner @ali-ramadhan @christophernhill ; I took a look at all the benchmarking scripts in our benchmarks folder and realized that many of them are very similar and can be unified. For example, the single script for shallow water model's strong and weak scaling differ only by one substring. ; The latest commit I pushed to this branch unifies all of the launcher and single scripts for shallow water model into three scripts. Now, at the top of the launcher script `distributed_shallow_water_model.jl`, there are two boolean variables that the user can toggle for strong vs weak scaling and mpi vs threaded parallel execution. Everything including output graphs, HTML tables, and info messages also change accordingly based on the two booleans. There are some other features that Francis and I have discussed but would like your approval first before adding them in.; Other possible additions to the script can include a for loop which wraps around the whole launcher script which loops through the strong/weak scaling and mpi/threaded parallelism options to allow for running 4 benchmarks at once. Another possible addition is to have what model is benchmarked also be an option. Granted, I could just copy and paste the shallow water model scripts and replace all instances of `shallow water` with `nonhydrostatic` or `hydrostatic` and tune some options a little bit, but then this would again cause avoidable clutter. Having what model is benchmarked as an easily changeable option can be achieved through a model setup function that dispatches what model is initialized based on a custom model type object that's passed to it. Everything else would be cosmetic formatting of outputs and info messages.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-899928441:571,toggle,toggle,571,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-899928441,1,['toggle'],['toggle']
Deployability,@francispoulin I'll do that as soon as I have something that I know it's right. So far the results aren't exactly as expected (I updated the PR heading to give a better description of what's missing!),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-802876917:129,update,updated,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-802876917,1,['update'],['updated']
Deployability,"@francispoulin and I ran some of the strong and weak scaling scripts recently up to 128 CPU cores. An extra bit of code was added into the files that handled the plotting. Also added was a small but vital configuration adjustment for the @benchmark macro which allowed for more than 64 cores to be benchmarked without what is perceived as deadlocking from occurring. I will PR my all my changes made to the benchmarking scripts shortly. Here are the results:. weak scaling shallow water model, with grid size being 8192 x 512R where R is the number of cores:; ```; ┌───────────────┬──────────┬─────────┬─────────┬─────────┬─────────┬──────────┬────────┬─────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼──────────┼─────────┼─────────┼─────────┼─────────┼──────────┼────────┼─────────┤; │ (8192, 512) │ (1, 1) │ 1.464 s │ 1.464 s │ 1.465 s │ 1.466 s │ 1.60 MiB │ 2804 │ 4 │; │ (8192, 1024) │ (1, 2) │ 1.475 s │ 1.475 s │ 1.477 s │ 1.486 s │ 1.49 MiB │ 3146 │ 8 │; │ (8192, 2048) │ (1, 4) │ 1.472 s │ 1.475 s │ 1.477 s │ 1.509 s │ 1.49 MiB │ 3146 │ 16 │; │ (8192, 4096) │ (1, 8) │ 1.500 s │ 1.503 s │ 1.508 s │ 1.537 s │ 1.49 MiB │ 3146 │ 32 │; │ (8192, 8192) │ (1, 16) │ 1.545 s │ 1.578 s │ 1.593 s │ 1.682 s │ 1.49 MiB │ 3146 │ 64 │; │ (8192, 16384) │ (1, 32) │ 1.744 s │ 1.803 s │ 1.805 s │ 1.894 s │ 1.49 MiB │ 3146 │ 96 │; │ (8192, 32768) │ (1, 64) │ 1.723 s │ 1.792 s │ 1.795 s │ 1.868 s │ 1.49 MiB │ 3155 │ 192 │; │ (8192, 65536) │ (1, 128) │ 1.679 s │ 1.809 s │ 1.811 s │ 1.907 s │ 1.49 MiB │ 3155 │ 384 │; └───────────────┴──────────┴─────────┴─────────┴─────────┴─────────┴──────────┴────────┴─────────┘. Shallow water model weak scaling speedup; ┌───────────────┬──────────┬──────────┬────────────┬──────────┬─────────┐; │ size │ ranks │ slowdown │ efficiency │ memory │ allocs │; ├───────────────┼──────────┼──────────┼────────────┼──────────┼─────────┤; │ (8192, 512) │ (1, 1) │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ (8192, 1024) │ (1, 2) │ 1.00706",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-864572422:205,configurat,configuration,205,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-864572422,1,['configurat'],['configuration']
Deployability,"@francispoulin and I recently ran some of the benchmark scripts with Julia 1.6.0 and Oceananigans v0.58.1.; If these benchmarks differ enough from the ones currently shown on [`benchmarks.md`](https://github.com/CliMA/Oceananigans.jl/blob/master/docs/src/benchmarks.md) then I'll make a PR to update them. The hardware these new benchmarks were run on are mostly the exact as the old benchmarks save for a few that were ran on Titan V GPUs but are now run on Tesla V100 GPUs. The shallow water model benchmarks were run without problems. With CPU, when the grid size exceeded 2048 x 2048, only one sample could be benchmarked. Trying to get more samples benchmarked by increasing the sampling time limit resulted in out of memory exceptions.; ```; Oceananigans v0.58.1; Julia Version 1.6.0; Commit f9720dc2eb (2021-03-24 12:55 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; EBVERSIONJULIA = 1.6.0; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0/easybuild/avx2-Core-julia-1.6.0-easybuild-devel; JULIA_LOAD_PATH = :; GPU: Tesla V100-SXM2-32GB. Shallow water model benchmarks; ┌───────────────┬─────────────┬──────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼──────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.041 ms │ 2.154 ms │ 2.246 ms │ 3.207 ms │ 1.36 MiB │ 2253 │ 10 │; │ CPU │ Float64 │ 64 │ 3.224 ms │ 3.367 ms │ 3.408 ms │ 4.031 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 128 │ 7.495 ms │ 7.620 ms │ 7.661 ms │ 8.193 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Flo",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722:293,update,update,293,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722,1,['update'],['update']
Deployability,"@francispoulin explained the situation well for `Gradient` and `Value` boundary conditions. I'd like to restate what he said in the context of the finite volume method and clarify the situation for `Flux` boundary conditions because I said something wrong above... Oceananigans uses a weak formulation of PDEs via the finite volume method. We evolve the average value of fields, integrated over a cell volume. In this integral formulation there are two contributions to the tendency of a field: fluxes across cell interfaces (advective and diffusive usually, but also possibly others via user-defined forcing), and interior ""sources"" (such as pressure gradients, Coriolis forces, gravitational forces). When users invoke `Gradient` or `Value` boundary conditions, then the same model is used for fluxes across interior cell interfaces as for ""exterior"" interfaces (domain boundaries). Thus if users set `closure=nothing` and zero out diffusive fluxes, boundary fluxes are _always_ zero regardless of what `Gradient` or `Value` are specified. More specifically, we enforce `Gradient` or `Value` boundary conditions by filling halo regions and then calculating exterior fluxes using the same kernel that's evaluated in the interior. As @francispoulin points out this is not some quirk of our algorithm or numerics; this follows from the properties of the underlying PDE. Something different happens when `Flux` boundary conditions are specified and this is where I was wrong above. With `Flux` boundary conditions, users are really specifying two _different_ models for fluxes: one across ""interior"" cell interfaces, and another for fluxes across domain boundaries. Setting `closure=nothing` in this case only nullifies _interior_ diffusive fluxes. But since boundary fluxes are explicitly specified in this case, they still do have an impact on interior tendency values. . A further subtlety is that `Value` and `Gradient` boundary conditions do actually have an impact if there is non-zero `NormalFlow",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1630#issuecomment-832093191:379,integrat,integrated,379,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1630#issuecomment-832093191,1,['integrat'],['integrated']
Deployability,"@francispoulin sounds like a good plan! Then we can see how to proceed. Concerning the way forward with `WENOVectorInvariant`, it seems that it is very diffusive when compared to standard WENO. an example on a 256^2 periodic Bickley jet below, contours are of vertical vorticity (left) and zonal velocity (right). WENO5. https://user-images.githubusercontent.com/33547697/157509797-d61f45ba-8284-40f2-b9e9-4cafcba6db68.mp4. WENOVectorIvariant. https://user-images.githubusercontent.com/33547697/157533165-9281949b-1579-462d-ad16-e27b2f954969.mp4. Integrated Enstrophy (blue is 64^2, red is 128^2, green is 256^2, solid lines are WENO5, dashed are WENOVectorInvariant); ![enstrophy](https://user-images.githubusercontent.com/33547697/157510310-3acfaeaf-4d05-4fac-b332-e7b66563147e.png). @sandreza was pointing out that maybe the extra diffusivity comes from the fact that we are advecting vorticity which contains much thinner structures than velocity, then maybe the ""optimal WENO weight"" are not so optimal anymore. These weights are 3 constant parameters, which are quite empirical and ""free-to-choose"" (in our case just `1/10` for the downstream, `6/10` for the central and `3/10` for the upstream stencil). Dissipation can be reduced by increasing the ""central stencil weight"". The idea with @sandreza was to perform an easy calibration to try to ""reasonably"" preserve enstrophy in the Bickley jet (then maybe calibrate it also against the spherical bicklet jet or R-H waves where also Coriolis is involved). The objective is to completely eliminate explicit viscous dissipation in the horizontal direction (harmonic and/or biharmonic) for the global simulation",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1063249741:547,Integrat,Integrated,547,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1063249741,1,['Integrat'],['Integrated']
Deployability,"@francispoulin thanks for starting this discussion!. Broadly speaking I think we would like to implement an arbitrary Lagrangian-Eulerian vertical coordinate in the long run. As far as I understand, implementing an ALE scheme would require more changes than just a new `AbstractGrid`. We need to modify the time-stepping to include a regridding / interpolation stage, and I believe we also need to change the equations being solved (the tendency kernels). . My preliminary thought on software design is that this might be a new model property, something like `HydrostaticFreeSurfaceModel.vertical_coordinate`. Then one needs to interpret the z-coordinate in the chosen `HydrostaticFreeSurfaceModel.grid` in light of the choice of `HydrostaticFreeSurfaceModel.vertical_coordinate`. Other design ideas are certainly welcome!. Something less clear is what happens if we design a terrain following coordinate. Perhaps you are write @francispoulin that terrain following coordinates can be implemented purely by introducing a new type of grid (because the grid is not moving... ?) I think terrain-following, curvilinear grid would require three-dimensionally curvilinear operators, correct? So we would have to update the implementation of the `HydrostaticFreeSurfaceModel` operators as well. As for a horizontal grid for `ShallowWaterModel`, since we have horizontally-curvilinear operators I think you might be able to do `boundary_following` in the horizontal once you refactor `ShallowWaterModel` to use horizontally-curvilinear operators.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1549#issuecomment-814206629:1206,update,update,1206,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1549#issuecomment-814206629,2,['update'],['update']
Deployability,"@glwagner ; I am really impressed with your effort to explain to me all details of the implementation. Thanks you!; In the past few days I am learning a lot reading the code/documentation and examples of Oceananigans. When I started this issue, I wasn't really expecting to have Pacanowski-Philander parameterization implemented in a few hours. Kudos to you!!; I know this parameterization is very simple, but implementing it on a FORTRAN-based GCM from scratch would take waaaay more time, at least for me. Can you help me to see if I understood everything correctly? Please, sorry if I am asking too-trivial questions. Why you need to define `f²`, wouldn't work simply using `∂zᶠᶜᶠ` and squaring the operation?. I understand that you create a fake model and don't run it, simply use it to update the auxiliary field. I don't understand why you could not do the same for the main model. For instance, you could first create the model, define Ri and closure and then `set!` the model with this new closure and auxiliary field. Does that makes sense? I understand the in the background this might not work the way it is now. Something like this:. ```; model = HydrostaticFreeSurfaceModel(; grid, tracers=:b, buoyancy=BuoyancyTracer()). Ri = Field(KernelFunctionOperation{Center, Center, Center}(Riᶜᶜᶜ, grid, computed_dependencies=(model.velocities, model.tracers.b))). ν = ν₀ + ν₁ / (1 + c * Ri^n); κᵇ = κ₀ + κ₁ / (1 + c * Ri^(n+1)). closure = ScalarDiffusivity(VerticallyImplicitTimeDiscretization(); ν, κ=(; b=κᵇ)). set!(model, closure = closure, auxiliary_fields = (; Ri)); ```. Thinking on a more general way, it would be awesome to give a general function that could depend on any field in the model, including auxiliary. I am thinking that this way it would be easier for users to create and implement their own parameterizations. Including using any model in general that could come in a form of a function. For instance, a ML model could be simply used as a turbulence closure. Again, thanks fo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066110688:791,update,update,791,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2337#issuecomment-1066110688,2,['update'],['update']
Deployability,"@glwagner @simone-silvestri @jm-c - does this look OK for an approve 👍 ; Buildkite is back and happy now! . Its a validation update, but it will make it easier to do next steps (i.e. add new and improved immersed etc.. ) with some tests. . Thx,. Chris",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2170#issuecomment-1019292768:125,update,update,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2170#issuecomment-1019292768,1,['update'],['update']
Deployability,"@glwagner @simone-silvestri I took the liberty to modifying the [release notes for v0.84.0](https://github.com/CliMA/Oceananigans.jl/releases/tag/v0.84.0) to illustrate what my idea here was. @glwagner had already included something but I extended it a bit. Basically a user reading the release notes know quickly what changed: `compression` kwarg is gone and is replaced by `deflatelevel` (which also link directly to https://github.com/CliMA/Oceananigans.jl/pull/3153 for more info) and there's a quick summary of changes to `VectorInvariant` also with a link to https://github.com/CliMA/Oceananigans.jl/pull/3091. @simone-silvestri reading the description of https://github.com/CliMA/Oceananigans.jl/pull/3091 I couldn't understand what was breaking about that change. Seems like it just added more features/kwargs, with isn't necessarily breaking. Feel free to modify my description to clairfy. I also included a ""highlights"" section, which quickly points to a user what new features are available. At this point it only references to https://github.com/CliMA/Oceananigans.jl/pull/3145, but I think https://github.com/CliMA/Oceananigans.jl/pull/3145 probably should be there too; I just don't understand it well enough to be sure and summarize everything with a simple sentence. Feel free to add. This ""highlights"" section may be a bit repetitive, since similar information is contained in the list of PRs at the bottom. But my rationale is that most of those PRs don't really affect an average user (for example the doc examples parallelization is super important, but not relevant to users), so most people probably won't read their description. In any case, feel free to modify or undo what I wrote there. I did it mostly for illustration purposes :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3147#issuecomment-1613894754:65,release,release,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3147#issuecomment-1613894754,6,['release'],"['release', 'releases']"
Deployability,"@glwagner I tested the no-slip boundary condition on the classic case of a lock-release gravity current in a rectilinear channel (see video) and compared the position of the front of the dense current as a function of time for the case of an immersed boundary with the no-slip condition, a real boundary with the no-slip condition, and an immersed boundary with the slip condition. . https://user-images.githubusercontent.com/31293515/164257859-0deb6cf1-f6b7-414a-a86d-8b47d194b98a.mp4. ![Xfr](https://user-images.githubusercontent.com/31293515/164257805-0ac9a5e4-a575-442c-b676-1660c052a2ed.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104021544:80,release,release,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104021544,1,['release'],['release']
Deployability,"@glwagner This Makes sense to me. And thank you for your help. ; Also, I want to give you an update. I ran ten simulations with the same .jl file with T=4days. I got the same profiles (ww, www, T, etc). I can share the .jl file, it might useful to other users. What would be the best way?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1295952303:93,update,update,93,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1295952303,1,['update'],['update']
Deployability,"@glwagner and @simone-silvestri : . I updated the Overleaf document to include what form of viscosity we should be using. In summary, following [Gent (1993) ](https://www.cgd.ucar.edu/staff/gent/swe.pdf), I think the should choose the viscosity for `ShallowWaterModel` to be. ν/h ∇⋅ ( h ∇ 𝐯 ) . The reasons he states are as follows:. - h ∇ 𝐯 is a parameterization of the turbulent flux and therefore should be proportional to the depth.; - This ensures that the diffusion of momentum is in the form of the divergence of a stress tensor (Schar and Smith 1993); - It has a negative definite effect on the KE budget if the viscous boundary condition is either no slip or free slip. Of course a problem occurs where h=0 but I guess we just don't apply viscosity where there is no fluid. If we wanted to generalize this to biharmonic viscosity, I would guess the following, . ν/h ∇² ( h ∇² 𝐯) . but this is something that should be done later, of course.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2403:38,update,updated,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2403,1,['update'],['updated']
Deployability,@glwagner are you okay if we register a new patch release version so that we can move forward with https://github.com/tomchor/Oceanostics.jl/pull/169 in Oceanostics?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3567#issuecomment-2088305544:44,patch,patch,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3567#issuecomment-2088305544,2,"['patch', 'release']","['patch', 'release']"
Deployability,@glwagner at some point it might good to think about whether exposing similar interfaces to DiffEq ( e.g. https://diffeq.sciml.ai/dev/features/callback_functions/#The-Callback-Types ) makes sense. Probably for the future. . Same could go for run! (e.g. https://diffeq.sciml.ai/dev/basics/integrator/#Initialization-and-Stepping ) too?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1894#issuecomment-885969109:288,integrat,integrator,288,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1894#issuecomment-885969109,1,['integrat'],['integrator']
Deployability,@glwagner bump up a patch release for this PR,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869054913:20,patch,patch,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869054913,2,"['patch', 'release']","['patch', 'release']"
Deployability,@glwagner bump up patch release?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2147#issuecomment-1009572063:18,patch,patch,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2147#issuecomment-1009572063,2,"['patch', 'release']","['patch', 'release']"
Deployability,@glwagner can we bump the patch version and register a new release when you think this is ready?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518199728:26,patch,patch,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518199728,2,"['patch', 'release']","['patch', 'release']"
Deployability,@glwagner suggested that this test could pass at t=0 but fail for t>0 in certain situations (not yet isolated). We should upgrade this test to include some time dependence. https://github.com/climate-machine/Oceananigans.jl/blob/22088d335973553b298a67bacebfa80b32e66acf/test/test_diagnostics.jl#L1-L15,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/737:122,upgrade,upgrade,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/737,1,['upgrade'],['upgrade']
Deployability,"@glwagner the idea is that the flow of the script for a user would be something like this:. (1) define a grid; (2) choose an architecture; .; .; code does not change from here on; .; . for this reason I was thinking you cannot have a `DistributedNonhydrostaticModel` vs a `NonhydrostaticModel` as much as you don't have a `CPUNonhydrostaticModel` vs a `GPUNonhydrostaticModel`. About the future direction: I was thinking that `Distributed` could be as much of an architecture as `CPU` and `GPU` are. As an example, there is no GPU.jl module which individually extends all the other modules for gpu execution like the extending the Fields.jl module with a `gpu_fields.jl` in GPU.jl. But I see what you mean when you say boundary conditions and fields have to take the precedence over distributed because it is maybe more linear to extend them in a separate module. Maybe integrating fields and boundary conditions in the respective modules (how is done for CPU and GPU which are not separated) for Distributed might make the code a little too complex and keeping it separate is the way to go. I am all up for that. . Now, discussing the `architecture` vs `grid` problem, step (1) and (2) are interlocked, and choosing which goes first (i.e. grid depend on architecture or other way around?) will make a big difference. At the moment they are kind of independent one another (i.e. some `grids` have an `architecture` field, distributed architecture depends on a grid). . In the future I believe we don't want to have the users fiddling with local_ and parent_ grids. I believe you want them to specify the parent grid, an architecture, and the code takes care of the rest. To achieve that, either a copy of the local or parent grid has to be stored in the architecture type when running `MultiArch`. For the constructor you where talking about `RectilinearGrid(arch=MultiArch; kwargs...)` which returns the local grid, we can do that, but the problem is that the connectivity of the architecture depends",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2073#issuecomment-974677724:870,integrat,integrating,870,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2073#issuecomment-974677724,1,['integrat'],['integrating']
Deployability,"@glwagner the prerequisites have landed with releases cut. Hopefully this is happy (and finds the correct versions of KA/Enzyme), but it was just tagged a few hours ago, so we'll see",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1760548442:45,release,releases,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1760548442,1,['release'],['releases']
Deployability,"@glwagner, @ali-ramadhan, @francispoulin and other developers:. What follows may be a side-track of the particular issue.; I feel that a lot of times problems arise when users try to run Oceananigans without activating a particular project and rather running on their general `(v1.5)` project that possibly includes a lot of other packages for many other things, irrelevant to Oceananigans.jl. Perhaps a section in the Docs, e.g., explaining the basics of package manager and, more importantly, that the advise would be to make a new folder locally, activate a project in that folder, and run your favourite Oceananigans example there or develop your own? This way there is much more control on what packages are installed via Manifest.toml. ; What do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-826249658:713,install,installed,713,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-826249658,1,['install'],['installed']
Deployability,"@glwagner, bump a patch release. :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1807#issuecomment-873275755:18,patch,patch,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1807#issuecomment-873275755,2,"['patch', 'release']","['patch', 'release']"
Deployability,"@glwagner, it looks like something happened in between early stages of this PR (https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100709220), when the BC were working as intended, and the main branch of [v.086.0](https://github.com/CliMA/Oceananigans.jl/releases/tag/v0.86.0).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3208#issuecomment-1659297199:269,release,releases,269,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3208#issuecomment-1659297199,1,['release'],['releases']
Deployability,"@glwagner, yes, I purposely used that branch to test the Vertically stretched grid function, but this problem appeared before that. ; I will try to use it with an updated version and get back to you.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-826101641:163,update,updated,163,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-826101641,1,['update'],['updated']
Deployability,"@glwagner:; > I'm still not sure we want to analytically integrate one of the pressure gradient terms `h dx(h) = dx(h^2/2)` but leave the other unchanged. If we treat them both similarly then we would write the pressure gradient term; > ; > ```; > -g h * ∂ₓ(h + b); > ```; > ; > It might be worth testing both possibilities to see if one has favorable numerical properties?; > ; > Perhaps this is related to the whole issue re: well-balanced methods, etc... ?. @francispoulin:; > I agree with @glwagner . Currently, `ShallowWaterModel` separates out the advection terms and the pressure term, which makes sense since they are inherently different.; > ; > One issue is that since we are using a finite volume method, the above term presents a bit of a problem as it's not in divergence form However, even in the other formulation, as you can see from the paper cited above, we still end up getting a term that is not in divergence form, `h dh_B/dx`.; > ; > I support trying @glwagner 's proposal of keeping the pressure term as he wrote it above. So it seems the best way forward for implementing bathymetry is to do it in the non-conservative form of the equations after #2522 is merged. Do we then want to have the conservative form of `ShallowWaterModel` be available only for `bathymetry == nothing`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1120402030:57,integrat,integrate,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1120402030,1,['integrat'],['integrate']
Deployability,"@ilyascfd welcome and thanks for opening this issue, it's very helpful!. The problem here is that `Value` is not exported by default when we write `using Oceananigans` anymore. As a result, these lines:. https://github.com/CliMA/Oceananigans.jl/blob/ff19b7e0d328557dc198eb23349db5eed0680c65/validation/stratified_couette_flow/stratified_couette_flow.jl#L103-L110. do not work. . The recommended syntax nowadays is, for example,. ```; bc = ValueBoundaryCondition(0); ```. rather than `BoundaryCondition(Value, 0)`. This change was made to avoid name conflicts with some common names in the Julia ecosystem (like `Flux`). But, it looks like the validation script was not updated when this change was made to our exported names. I opened a PR to fix it in #1982. You can fix the script yourself as well by replacing `BoundaryCondition(Value, ` with `ValueBoundaryCondition(`. PS @ilyascfd here are a few tips for writing issues that will help us solve your problem as fast as possible; * Include links to the lines that are failing so we don't have to look for them ourselves. Github is really handy for this!; * When including code in an issue, please format it with triple backticks (```). Note: we run this script during CI, so at first I was surprised that we hadn't caught this yet. But when we run the tests, we do indeed import `Oceananigans.BoundaryConditions.Value` via. https://github.com/CliMA/Oceananigans.jl/blob/ff19b7e0d328557dc198eb23349db5eed0680c65/test/runtests.jl#L20. and. https://github.com/CliMA/Oceananigans.jl/blob/ff19b7e0d328557dc198eb23349db5eed0680c65/src/BoundaryConditions/BoundaryConditions.jl#L3-L4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1981#issuecomment-918194547:669,update,updated,669,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1981#issuecomment-918194547,1,['update'],['updated']
Deployability,"@iuryt speaks truth... it's hard to say something _isn't_ ""feasible"". However, I do think that polishing off an n-layer extension of the existing ShallowWaterModel would require some time. I think you want to write not only the continuous equations, but also the finite volume discretization (and there's some issues around discretization of the advection operator now see #1866). There are some design questions regarding the user interface and the use of existing grids. One possibility is to use the existing grids (which all have a z-coordinate) to specify the _number_ of layers (via the vertical size), but to ignore the vertical grid. Then users would also have to input the buoyancy of each layer (I think I'd prefer buoyancy to density, if that's possible...) But another design might be possible that ""re-uses"" whatever users provide for the vertical grid. I just took a look at the code and was surprised to notice that all of the kernels and fields are already three-dimensional. That means that once the user interface is figured out and appropriate model modifications are made, the ""only"" thing left might be to generalize the kernels... I'm not sure how you do immersed boundaries, or how you blend ""explicit"" bathymetry (added through the pressure gradient) and immersed boundaries. Does anyone know?. @apaloczy may also be interested in this discussion.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1115530176:228,continuous,continuous,228,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1115530176,1,['continuous'],['continuous']
Deployability,@jagoosw I think we should update the link and merge,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1366915985:27,update,update,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1366915985,1,['update'],['update']
Deployability,@jagoosw I updated the docstrings to mention auxiliary fields. I'll merge when tests pass. Thanks!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1257455355:11,update,updated,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1257455355,1,['update'],['updated']
Deployability,@jagoosw let's update the link? @glwagner was it you that wrote this? Is the links that @jagoosw points to above correct?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1366633576:15,update,update,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1366633576,1,['update'],['update']
Deployability,"@jakebolewski I'm wondering what you think about the strategy of running a few key integration tests via GitHub actions, in addition perhaps to unit tests that have low compilation costs. For example, we have a couple ""regression tests"" that ensure the output of a simulation is identical to one run previously. These regression tests are imprecise (we only know that something has changed, but can't identify exactly what it is), but nevertheless catch both obvious API bugs and subtle numerics bugs incurred by refactoring. Another nice feature is that regression tests invoke (or are supposed to invoke) configurations that are most common / most valuable to users. They are also relatively cheap since we load states from a file and run for 10-100 time-steps at modest resolutions, and there are a small number of them which mitigates compilation cost. When I undertake a major refactor I often find myself running regression tests first. Testing corner cases and/or catching bugs associated with interactions between model components in less-frequently used configurations requires more extensive testing (a combinatorial explosion of cases...) and incurs heavier compilation costs; so these are probably better tested via `bors try`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906570444:83,integrat,integration,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906570444,3,"['configurat', 'integrat']","['configurations', 'integration']"
Deployability,@jklymak and/or @francispoulin could you have a look on the updated version and let me know how does it read?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1298#issuecomment-759761482:60,update,updated,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1298#issuecomment-759761482,1,['update'],['updated']
Deployability,@jm-c also pointed out that I forgot to update the indices in computing the friction velocity in `stratified_couette_flow.png` after the k index was reversed.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/597:40,update,update,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/597,1,['update'],['update']
Deployability,"@johncmarshall54 agreed, that's a challenge we have to confront. If we implement immersed boundaries using the ""continuous forcing technique"", then a boundary may be defined essentially by a masking function of `(x, y, z)` (it is also possible for it to be a function of time). In this case, we might be able to ""label"" each boundary / masking function with a name or number. The boundary condition objects we then give to fields would have to define a condition to be applied both at the boundaries of the numerical grid (which we currently support), as well as any immersed boundaries, where immersed boundaries are referenced by name or number. By the way, if we use a continuous forcing technique, we do not have to change the pressure solver. This is a major simplification. Recent work suggests there is no disadvantage in terms of accuracy in using the continuous forcing technique over discrete forcing techniques (which I think is the category the MITgcm solver falls under). I'm not sure if this is too good to believe or not --- we should discuss and take a deeper look at the literature.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/721#issuecomment-605461456:112,continuous,continuous,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/721#issuecomment-605461456,3,['continuous'],['continuous']
Deployability,"@josuemtzmo could you update the first PR comment to reflect the latest status? As far as I can see there was not any new type introduced; just the tests, right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3523#issuecomment-2023361765:22,update,update,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3523#issuecomment-2023361765,1,['update'],['update']
Deployability,"@loganpknudsen, any update on the status of this issue?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1979514042:20,update,update,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1979514042,1,['update'],['update']
Deployability,"@maleadt, I tried all combinations I could think of but I couldn't get `Codecov.submit()` to work using the `SECRET_CODECOV_TOKEN`. It was only when I added the actual token as a kwarg that worked, e.g.,; https://github.com/CliMA/Oceananigans.jl/blob/ed1fe321199fd08c28052cd23a8c1b9d68368345/.buildkite/pipeline.yml#L540. Any ideas how to avoid using the token per se?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063818500:303,pipeline,pipeline,303,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063818500,1,['pipeline'],['pipeline']
Deployability,"@matinraayai I made a bunch of suggestions!. I suggest leaving the tests untouched right now. The reason is that I think we should refactor the tests to be more architecture-indepedent _before_ merging this PR into `main`. Perhaps as an alternative, we can pick one of the validation tests in `validation/` to focus on as an integration test. We'll use that example script to test whether functionality works. As a starting point, something like. ```julia; using Oceananigans; grid = RectilinearGrid(GPU(), size=(128, 128), x=(0, 2π), y=(0, 2π), topology=(Periodic, Periodic, Flat)); model = NonhydrostaticModel(; grid, advection=WENO5()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ); simulation = Simulation(model; Δt=0.01, stop_time=4); run!(simulation); ```. should be enough?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112412085:325,integrat,integration,325,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112412085,1,['integrat'],['integration']
Deployability,"@matinraayai is working on making PencilArrays performant. This PR is exploratory and is a fallback that might not be merged if we find an efficient way to do GPU transposes with PencilArrays (requires reducing memory allocations and improving the efficiency of permute operations) and implement r2r Fourier transforms in PencilFFTs. ; For the moment those two elements are part of this PR. This PR follows the (simple) configuration of the 2decomp library https://github.com/2decomp-fft/2decomp-fft,; the difference between PencilFFT/PencilArray and this PR (a part bounded domain ffts) is that here (at the moment) we impose the stricter limitation that `Ny` has to be divisible by `Rx` and `Ry` while `Nz` has to be divisible by `Ry`, where `Rx` and `Ry` are the number of ranks (divisions) in the x and y direction. Relaxing the requirements should not be too difficult.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1727661521:420,configurat,configuration,420,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1727661521,2,['configurat'],['configuration']
Deployability,@mukund-gupta it looks like your CUDA installation may not be working on 1.6. Can you report the output of `CUDA.has_cuda()`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1555#issuecomment-815162605:38,install,installation,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1555#issuecomment-815162605,1,['install'],['installation']
Deployability,"@navidcy @glwagner this should superceded all previous enzyme prs (including compatbwlper), which I've gone ahead and closed just now. Some non enzyme tests had a nondeterministic ci failure about a directory not being empty, but otherwise all pass (incl enzyme tests). Once landed we should add a lot more integration test cases like @jlk9 your flux boundary",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3618#issuecomment-2195453317:307,integrat,integration,307,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3618#issuecomment-2195453317,1,['integrat'],['integration']
Deployability,"@navidcy @simone-silvestri any thoughts?. I thought of a few more considerations:. It may be easier to document this feature if it's in `Simulation`, because it can be explained in conjunction with ""normal"" `Callback`. Ie, ""Here are different flavors of callback users can employ to alter their simulation..."". An even more radical suggestion is to actually combine this feature with `Simulation.callbacks`. In other words, we don't nee d a separate _list_, but rather an additional identifier that says _where and how_ the callback will be employed. Right now a `Callback` has the properties `func`, `parameters`, and `schedule`. We could add a fourth property, something like `callsite`, which would be:. * `callsite=TimeStep()` when called every time-step / iteration; * `callsite=UpdateState()` when called inside `update_state()`; * and more. Another name / classification scheme might be better, that's just what floated to the top of my head.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1278118477:784,Update,UpdateState,784,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1278118477,1,['Update'],['UpdateState']
Deployability,"@navidcy Hmmm, digging into Documenter.jl's Buildkite config it looks like push previews are only provided if the build belongs to a PR?. https://github.com/JuliaDocs/Documenter.jl/blob/4be8243d31a6ffdbc64d779e3f8c2fb7c61de075/src/deployconfig.jl#L719-L725 . Maybe there was no push preview here since @tomchor pushed this branch at which Buildkite ran, before the PR existed, so Buildkite did not publish a preview. Maybe if a second commit was made on this PR, it would be detected by Buildkite as a PR and therefore a preview would be published?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782289428:231,deploy,deployconfig,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782289428,1,['deploy'],['deployconfig']
Deployability,"@navidcy I have changed a couple of settings. It's almost ready, I'll update in an hour or so",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-973228896:70,update,update,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-973228896,1,['update'],['update']
Deployability,"@navidcy I think its a red herring. The issue is that the update of some package is causing `run!(simulation)` to hang. For prior builds this problem only affects the documentation build (because only `docs/Manifest.toml` was updated, not `Oceananigans.jl/Manifest.toml`). Here, we have updated _all_ packages and now the issue has infected the entire build.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-817041693:58,update,update,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-817041693,3,['update'],"['update', 'updated']"
Deployability,@navidcy Yes sorry. Looks like tests are passing. Once they do I'll merge and tag/release v0.63.1.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1903#issuecomment-930278040:82,release,release,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1903#issuecomment-930278040,1,['release'],['release']
Deployability,"@navidcy and @glwagner, I created this halo test branch from your tracer advection branch the day before yesterday, prior to its merger with the main. Given that the tracer advection, along with other branches, was integrated into the main branch yesterday, this branch started displaying numerous reverse changes. To address this, I merged the main branch into this one, resolved the conflicts manually by accepting the incoming changes. This process led to several commits. I will close this PR and create a fresh branch from the main. I will then push my commits. Please bear with me for a few minutes while I do this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3277#issuecomment-1728121401:215,integrat,integrated,215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3277#issuecomment-1728121401,1,['integrat'],['integrated']
Deployability,@navidcy do you remember how we fixed this? I think we just have to generalize the functors for ContinuousBoundaryFunction.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1928#issuecomment-894599227:96,Continuous,ContinuousBoundaryFunction,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1928#issuecomment-894599227,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"@navidcy it shouldn't impact developer workflow too much. When going over the test structure with @glwagner on Tues. I suggested the following restructuring:. * Break-out ""quick"" unit-tests to be run by github actions under a single configuration (ex: linux, julia 1.6) and be able to run them in parallel. We have a ""Team"" account donated by Github so we can have tons of concurrent GitHub actions so this is beneficial if you can take advantage (might be limited by compilation costs). These tests will be run for every PR push and fast fail on error.; * `bors try` trigger a more expensive CI job to be submitted to the cluster, allowing for GPU / MPI tests. The logic here is that if the cpu tests are not working then the GPU tests almost certainly won't so you can get away with executing them less often. We have a daemon running on the cluster that synchronizes the jobs from buildkite with the local slurm controller, so every step in the buildkite config is submitted as a separate slurm job and canceling buildkite jobs kills them with slum. What is nice about that setup is you can tailor the resources used for each buildkite step just as you would slurm (ex. ""gres:1"" for 1 gpu). You can run jobs on multiple ranks, multiple GPU's, different resource limits, timeouts, etc. basically anything you can pass through to as a cli argument to a slurm batch job is supported. Also it's running on a cluster so obviously your job parallelism is very good.; * `bors r+` trigger merging the PR into `main` branch. This serializes the commits to `main` (and roll-up concurrent PR's to be submitted) so that all merge commits will pass the tests. This is an opportunity to also maybe run more expensive tests (it's easy in buildkite to conditionally run steps if running on `staging` branch) because you'll probably only run the staging CI step one or at most a few times at the very end,. the general strategy is to tier the tests so that they get progressively more expensive and to maximize ci-p",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906541778:233,configurat,configuration,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906541778,1,['configurat'],['configuration']
Deployability,@navidcy should we close this pr now that KA was updated?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2782#issuecomment-1421915427:49,update,updated,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2782#issuecomment-1421915427,1,['update'],['updated']
Deployability,@sandreza do you want to take on reading the parameters off @adelinehillier figure and updating the defaults? It could be fun to test CATKE with the updated parameters in the 1 deg simulation too.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2461#issuecomment-1117378118:149,update,updated,149,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2461#issuecomment-1117378118,1,['update'],['updated']
Deployability,"@siddharthabishnu another question:. This PR also establishes single-pass halo filling, right? We should update the PR's title to reflect this. Could you change please these lines in the tests to do the fill of the halos with the updated way?. https://github.com/CliMA/Oceananigans.jl/blob/81d0e790594e16f1815dba73d3441433929e9a38/test/test_multi_region_cubed_sphere.jl#L374-L378. https://github.com/CliMA/Oceananigans.jl/blob/81d0e790594e16f1815dba73d3441433929e9a38/test/test_multi_region_cubed_sphere.jl#L623-L625",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2026031394:105,update,update,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2026031394,2,['update'],"['update', 'updated']"
Deployability,@simone-silvestri . This is a result from our updated code that shows the free-surface height restricted to 9.9 and 10.1. You can clearly see that the instabilities happend around three particular regions. https://github.com/CliMA/Oceananigans.jl/assets/8239041/af15615a-7194-4ffc-88aa-69276b2e4c9a,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2007643399:46,update,updated,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2007643399,2,['update'],['updated']
Deployability,@simone-silvestri @tomchor @Yixiao-Zhang I updated the docs on `ImmersedBoundaryGrid`. See what you think.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1588245720:43,update,updated,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1588245720,1,['update'],['updated']
Deployability,"@simone-silvestri Can I ask a few clarification questions about this PR so that I can review it better?. > * Rework of the `VectorInvariant` advection scheme. Now the constructor accepts a `vorticity_scheme`, a `vertical_scheme` and an `upwinding` keyword argument which specifies what implementation will be used. The choice is between `OnlySelfUpwinding`, `CrossAndSelfUpwinding` and `VelocityUpwinding` (see documentation); > * Implementation of the flux-form advection scheme for `LatitudeLongitudeGrid`s. I understand these as mainly being relevant for the hydrostatic model. Is that correct?. > * Implementation of a 5th order centered WENO scheme to be used for truly multi-dimensional reconstructions. Can you clarify what you mean by ""truly multi-dimensional reconstructions""? Also what would be the expected impact of this on simulations using it compared to the main?. I also see that you bumped the minor version, implying a breaking release. Can you include an explanation (or perhaps even a quick snippet) of the break?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1600910504:946,release,release,946,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1600910504,1,['release'],['release']
Deployability,@simone-silvestri I opened #2255 in which I just upgraded CUDA and CUDAKernels. Feel free to work on that and make it work? Then we can close this one.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1045537824:49,upgrade,upgraded,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1045537824,1,['upgrade'],['upgraded']
Deployability,@simone-silvestri I see you've rebased ```amdgpu``` to master but for some reason the PR's view doesn't update. On my side I'm only 97 commits ahead and 12 behind. Maybe this is a GitHub issue? I can maybe open the same PR again and link it here after closing this one.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450686514:104,update,update,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450686514,1,['update'],['update']
Deployability,@simone-silvestri I tried to update this script but still it won't run. Could you have a look?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2985:29,update,update,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2985,1,['update'],['update']
Deployability,"@simone-silvestri and I have updated the parameters by inspecting the figure and copying the values into the source code. However, the scale of the plots doesn't allow us to accurately infer some very small, but very-importantly-non-zero parameter values (like `Cᵇc`, `Cᴷcʳ`, and `Cᵂu★`).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2461#issuecomment-1121385581:29,update,updated,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2461#issuecomment-1121385581,1,['update'],['updated']
Deployability,@simone-silvestri and I think there is a missing synchronization for one of the boundary updates,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1427297511:89,update,updates,89,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1427297511,1,['update'],['updates']
Deployability,@simone-silvestri bump patch version and merge?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1611771342:23,patch,patch,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1611771342,1,['patch'],['patch']
Deployability,"@simone-silvestri can I convince you to rewrite this section with updated benchmarks, and include results for distributed systems?. https://github.com/CliMA/Oceananigans.jl?tab=readme-ov-file#performance-benchmarks",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3684:66,update,updated,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3684,1,['update'],['updated']
Deployability,@simone-silvestri can you update the docstring for `time_step!`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3565#issuecomment-2258971243:26,update,update,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3565#issuecomment-2258971243,1,['update'],['update']
Deployability,"@simone-silvestri discussed a bit the user interface for building models with a z* vertical coordinate. Here's a prototype design we came up with:. ```julia; reference_levels = exponential_z_faces(Nz=40, depth=6000). Nx = 1440; Ny = 600; Nz = length(reference_levels) - 1. grid = LatitudeLongitudeGrid(arch;; size = (Nx, Ny, Nz),; halo = (7, 7, 7),; z = ZStarVerticalCoordinate(reference_levels),; latitude = (-75, 75),; longitude = (0, 360)); ```. We like this because with z*, the znodes, and zspacings are always changing. We think this makes that semantically clear. Note there are some challenges for output that we have to solve, because the grid has to be updated to do computations. But I think we can solve these with `FieldTimeSeries`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3411#issuecomment-2400477009:663,update,updated,663,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3411#issuecomment-2400477009,2,['update'],['updated']
Deployability,"@simone-silvestri do you have anything to offer?. I think issues like this do make it a bit more pressing to update to latest CUDA + KernelAbstractions, which we've been slacking on for quite a while now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2479#issuecomment-1111123328:109,update,update,109,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2479#issuecomment-1111123328,1,['update'],['update']
Deployability,"@simone-silvestri if we want to unify the user interface across all models, we could introduce the type `AdvectionScheme` (which will be rather trivial now, but we can update it in the future). Then we can have syntax like. ```julia; advection = AdvectionScheme(momentum=WENO5(grid), tracers=UpwindBiasedThirdOrder()); model = NonhydrostaticModel(; grid, advection); ```. Or,. ```julia; model = NonhydrostaticModel(; grid, advection=WENO5()); ```. which the model constructor interprets as. ```julia; advection = AdvectionScheme(momentum=WENO5(grid), tracers=WENO5(grid)); ```. (this is nice too, because we can build `WENO5` on the grid under the hood). We could also _always_ ""regularize"" the advection scheme with `grid`, so that. ```julia; advection = AdvectionScheme(momentum=WENO5(), tracers=UpwindBiasedThirdOrder()); model = NonhydrostaticModel(; grid, advection); ```. translates to. ```julia; advection = AdvectionScheme(momentum=WENO5(grid), tracers=UpwindBiasedThirdOrder()); ```. under the hood.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2454#issuecomment-1130036113:168,update,update,168,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2454#issuecomment-1130036113,1,['update'],['update']
Deployability,@simone-silvestri if you can figure out the shenanigans with CUDA > 3.3.6 I'd be delighted! I just merged main and updated packages but I doubt that this is all what's needed.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1043620708:115,update,updated,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1043620708,1,['update'],['updated']
Deployability,"@simone-silvestri the reconstruction of the tracer after the `solid_body_rotation_test` still shows some problems. Have a look at this MWE:. ```Julia; include(""dependencies_for_runtests.jl""). using Oceananigans.MultiRegion; using Oceananigans.MultiRegion: reconstruct_global_field. # Tracer patch for visualization; Gaussian(x, y, L) = exp(-(x^2 + y^2) / 2L^2). function Δ_min(grid) ; Δx_min = minimum_xspacing(grid, Center(), Center(), Center()); Δy_min = minimum_yspacing(grid, Center(), Center(), Center()); return min(Δx_min, Δy_min); end. function solid_body_rotation_test(grid; P = XPartition, regions = 1). if architecture(grid) isa GPU; devices = (0, 0); else; devices = nothing; end. mrg = MultiRegionGrid(grid, partition = P(regions)). free_surface = ExplicitFreeSurface(gravitational_acceleration = 1); coriolis = HydrostaticSphericalCoriolis(rotation_rate = 1). model = HydrostaticFreeSurfaceModel(grid = mrg,; momentum_advection = VectorInvariant(),; free_surface = free_surface,; coriolis = coriolis,; tracers = :c,; tracer_advection = WENO(),; buoyancy = nothing,; closure = nothing). g = model.free_surface.gravitational_acceleration; R = grid.radius; Ω = model.coriolis.rotation_rate. uᵢ(λ, φ, z) = 0.1 * cosd(φ) * sind(λ); ηᵢ(λ, φ, z) = (0.1 * Ω * R + 0.1^2 / 2) * sind(φ)^2 / g * sind(λ); cᵢ(λ, φ, z) = Gaussian(λ - 1, φ - 5, 10). set!(model, u=uᵢ, η=ηᵢ, c=cᵢ). Δt = 0.1 * Δ_min(grid) / sqrt(g * grid.Lz) . for _ in 1:20; time_step!(model, Δt); end. return merge(model.velocities, model.tracers, (; η = model.free_surface.η)); end. Nx = 32; Ny = 32. grid = LatitudeLongitudeGrid(CPU(), size = (Nx, Ny, 1),; halo = (3, 3, 3),; latitude = (-80, 80),; longitude = (-160, 160),; z = (-1, 0),; radius = 1,; topology=(Bounded, Bounded, Bounded)). us, vs, ws, cs, ηs = solid_body_rotation_test(grid). regions = 2; P = XPartition. @info "" Testing $regions $(P)s on $(typeof(grid).name.wrapper) on the $arch""; u, v, w, c, η = solid_body_rotation_test(grid; P=P, regions=regions). u = reconst",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737:291,patch,patch,291,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737,1,['patch'],['patch']
Deployability,"@simone-silvestri, I would like to use the `update_diag!` function similarly to how it's used [here ](https://github.com/CliMA/Oceananigans.jl/blob/dcce559f2cc8d417735eee2f5ce6d9ccdb9b5570/src/Solvers/heptadiagonal_iterative_solver.jl#L307) but I'm a bit confused as to how it works. I'm fairly sure the first two terms of eq 13 in [poisson solvers](https://clima.github.io/OceananigansDocumentation/stable/numerical_implementation/poisson_solvers/) contribute to the diagonal as well as the 3rd term (ie even though `Δt` only contributes to the diagonal it is not the only term which does so). If this is the case then to update the diagonal without recalculating the first two terms I believe we have to keep track of the previous `Δt` so we can subtract off the old term and then add back on the new term. However `update_diag!` only takes the new `Δt` so I don't understand how it could be doing this update. Any chance you could clarify this? Thanks!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1179412493:623,update,update,623,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1179412493,2,['update'],['update']
Deployability,"@simone-silvestri, from symmetry arguments, the metrics on the halo on one face should be the same as the metrics on some other face. E.g., `Δxᶠᶠᵃ[0]` on one face should be either `Δxᶠᶠᵃ[grid.Nx+1]` or `Δyᶠᶠᵃ[grid.Ny+1]` on the other face (or something like that, depending on whether a rotation applies). Right?. So we could hardcode these in from a single face instead of constructing 6 faces and filling halos to fill the halo metrics. It will assume, thought, that a specific face configuration is implied.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384677447:485,configurat,configuration,485,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384677447,1,['configurat'],['configuration']
Deployability,"@simone-silvestri, shall I bump up the release? ; I'm not sure what the bug affects...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2957#issuecomment-1456412180:39,release,release,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2957#issuecomment-1456412180,1,['release'],['release']
Deployability,"@tomchor ; > Using the more fundamental definition of `z_*` does circumvent some of the issues mentioned by @hdrake, no? (Like topography.). Somewhat, but even with the ""fundamental"" definition below there are some implicit assumptions. Winters et al. assume the area A is constant with depth. It's not clear to me that this formula still holds if A=A(z). Also not clear how to calculate a continuous A(z) from a discrete grid in a consistent way, especially with unstructured grids / or partial cells.; ![img](https://user-images.githubusercontent.com/13205162/117906167-3edf0900-b289-11eb-9f0e-a4b7accab2a0.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1297#issuecomment-845144418:390,continuous,continuous,390,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1297#issuecomment-845144418,2,['continuous'],['continuous']
Deployability,@tomchor Ah are you okay with committing my suggestion before merging? . I think docs did get built and deployed:; https://buildkite.com/clima/oceananigans/builds/2048#0d49a5b8-1dec-4f7b-b82a-cf6f8809e234/40-574; https://clima.github.io/OceananigansDocumentation/previews/PR1543/simulation_tips/. Working on getting you guys access to Buildkite so you can control it as well. I'm not a Buildkite admin so I have to ask one to invite other people...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1543#issuecomment-819560412:104,deploy,deployed,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1543#issuecomment-819560412,1,['deploy'],['deployed']
Deployability,@tomchor I have updated the oceananigans and it updated to version ```v0.57.3``` may be because I am using julia version ```v1.5.2```. I think to use ```v0.58.3``` I have to use updated julia version.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1741#issuecomment-864073115:16,update,updated,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1741#issuecomment-864073115,3,['update'],['updated']
Deployability,"@tomchor I think it's done now and I've updated the top comment. I'm happy that this PR puts in place all the bits needed for open boundaries to be possible, and future work can implement the matching schemes as necessary. I'm also happy that the code is correct and being tested because all of the existing tests that have impenetrable boundaries implicitly test the changes we have made.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2208508424:40,update,updated,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2208508424,1,['update'],['updated']
Deployability,@tomchor I updated the PR description. Feel free to edit it further.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622028780:11,update,updated,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622028780,1,['update'],['updated']
Deployability,@tomchor Might also be good to tag a patch release (v0.53.1) so it's easier to make use of this fix.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1467#issuecomment-799625441:37,patch,patch,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1467#issuecomment-799625441,2,"['patch', 'release']","['patch', 'release']"
Deployability,"@tomchor check out my changes to the tilted bottom boundary layer example: https://github.com/CliMA/Oceananigans.jl/pull/2333/commits/d8b455ffe1eabac34e9ef1c21ec70731eae03a74. The most important changes:. * I removed the `BackgroundField` v-velocity, which had no effect on the solution because the domain is `Flat` in y. The only effect of the background flow is through the bottom drag boundary condition.; * I reduced the domain aspect ratio to 400 x 100 because based on the visualization it seemed the domain didn't need to be so wide. This lets us increase the resolution and reduce the diffusivity, which is neat. It's a bit more turbulent now. Minor changes:. * Update style to be consistent with other examples / source code (commas, spaces, etc); * Reorganized the script to read like the other examples / tutorials (like a paper, parameters are introduced when they are used rather than at the top); * Reorganized a few other misc stuff for pedagogical reasons, like building buoyancy + coriolis together; * Note using a tuple for `ĝ` rather than `Array` means it can be used as a parameter on the GPU, so that's probably preferred. Arrays are needed only if we need to mutate elements or perform linear algebra.; * Change tilting angle to 3 degrees rather than 0.05 radians; * Don't import CUDA because the example wasn't GPU friendly anyways (if you like, we can make it GPU friendly but I don't think it should be ""partially"" GPU friendly since it just makes the code more complicated); * When I try to run the example multiple times I get `ERROR: LoadError: NetCDF error: Permission denied (NetCDF error code: 13)`. How can we avoid this error? I think it's important that users can easily change parameters and re-run without having to manually delete a file; this is key to productivity; * Plotting fewer contours makes the animation faster (the most expensive part of this example); * We don't need to form `Field`s any more for the output writers any more. Idle thoughts:. * This i",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1065127449:670,Update,Update,670,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1065127449,1,['Update'],['Update']
Deployability,"@tomchor unfortunately we don't have an issue for this problem. @sandreza is it possible to open an issue to document the problem that we are seeing? In the case that this PR does not resolve the issue, we'd like to have an issue open... I don't have much hard evidence to provide but I can describe the problem as I've seen it. Basically, very rare, subtle irregularities have been observed on the GPU when using `HydrostaticFreeSurfaceModel` in a `Periodic, Bounded, Bounded` configuration. I think that it is possible the main issue is an interaction (a read-write race condition) associated with both impenetrable boundary conditions and periodic boundary conditions that affects the 8 corner points. The race condition affects model trajectories via the Coriolis force (which is the only term as far as I know that touches the 8 ""corner"" points affected by this race condition). Because the race condition only manifests when a `Coriolis` or `VectorInvariant` stencil touches corner points, it may not affect _most_ `Periodic, Periodic, Bounded` models, which could explain why we haven't caught it. The reason it doesn't affect those models is because this race condition would only affect the corner points of `w`, which are not touched when using an `FPlane` Coriolis model. However, it's possible (I'm not sure) that the race condition could affect models using `NonTraditionalFPlane` in `Periodic, Periodic, Bounded` configurations. More generally, it will also affect models that are bounded in the `y`-direction, because in those models the corner points of the `y`-velocity are affected and also invoked when using `FPlane` or `BetaPlane` coriolis. That's as much as I know. It's very hard to gather information about this bug because it's so rare are subtle. In other words, only one grid point among 10,000 iterations might be affected, and the errors induced are very small. To find this issue, we have to run tens of thousands of iterations of identical models on the GPU, and then co",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-921143865:478,configurat,configuration,478,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-921143865,1,['configurat'],['configuration']
Deployability,"@tomchor, I haven't implemented `MultiRegion` for `NonhydrostaticModel` yet. It would be quite easy to extent it if it weren't for the pressure solver which is done in two different ways and both of them are global (`FFT` and `TridiagonalFFT`). A quick and dirty solution would be to do as I have done with the `ImplicitFreeSurface` and reserve the calculation on 1 GPU only. The problem is that the pressure solve is 3D and not 2D so we would probably like to use the `cuFFT` multi-gpu functionality (in particular the cuFFTxt library, which I hope is implemented in `CUDA.jl` although I haven't checked yet) I ll open a PR to start implementing it. Regarding the `OutputWriters`, they are implemented in jld2 trivially with `reconstruct_global_field`. ; You can specify a `JLDOutputWriter` as you do for a single region grid, provided you don't want to slice the direction across the regions ; for example you cannot do; ```; indices = (1:10, :, :) ; ```; for an `XPartition` or ; ```; indices = (:, 1:10, :); ```; for a `YPartition`; (`MultiRegion` does not play well with `indices` at the moment). . It runs, but there is a weird bug for which the fields are not updated as the model timesteps (i.e., all the outputs are the initial condition). I think it is easily solvable but I have to take a deeper look. So basically, it is not working at the moment... On the other hand, to anticipate the `CubedSphere` refactor, we probably want to have `OutputWriters` which output all regions separately (as `reconstruct_global_field` does not mean much in a cubed sphere context). The `OutputReaders`, on the other hand, are completely undefined",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116860842:1167,update,updated,1167,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116860842,1,['update'],['updated']
Deployability,"@tomchor:. - I don't understand what ""really"" means in ""it didn't really work"". Did it work or it didn't work?. - In case there was an issue, can you elaborate what that was and why `Adapt` is the solution?. - Last, if there is still an issue and this PR fixes it then it worths a patch release. There is no quota of patch releases. We can release as many as we need to.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2030#issuecomment-953473616:281,patch,patch,281,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2030#issuecomment-953473616,5,"['patch', 'release']","['patch', 'release', 'releases']"
Deployability,@vchuravy I also an attempt to upgrade in #2782. If you feel that's useful then pick up that one?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416874430:31,upgrade,upgrade,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416874430,1,['upgrade'],['upgrade']
Deployability,"@vchuravy thank you that is very helpful! I don't think it will be too difficult to build up a small test suite for AMD. We can start with unit tests and a handful of cheap integration tests. @fluidnumerics-joe we don't have any current plans to get AMD GPU resources, but that could change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937323799:173,integrat,integration,173,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937323799,1,['integrat'],['integration']
Deployability,@wsmoses any idea why this appeared?. https://buildkite.com/clima/oceananigans/builds/18550#0192eaa0-74f7-424b-a987-f65a73e6b3cc/16-591. an update of a package?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3866#issuecomment-2452814407:140,update,update,140,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3866#issuecomment-2452814407,1,['update'],['update']
Deployability,A bug in the limiting by `maximum_diffusivity` caused this scheme to blow up in default configuration (and be generally incorrect). This PR fixes that and makes a few more tweaks: horizontal filtering can be optionally added (and we implement an interface for adding new horizontal filters). We also add a minimum entrainment buoyancy gradient. Closes #3283,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3510:88,configurat,configuration,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3510,1,['configurat'],['configuration']
Deployability,A few updates. Closes #2194.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2195:6,update,updates,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2195,1,['update'],['updates']
Deployability,"A lot of times the docs build fail. I notice that there are errors in the installation of deps and precompilation part of the docs build. I'm not totally sure that Manifest.toml is the culprit but shipping docs with its Manifest does require us to use non-conventional ways to build the docs. Specifically, we can't use `Pkg.develop` to install the required deps eg. ```; julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'; ```. and instead we have to rely to. https://github.com/CliMA/Oceananigans.jl/blob/adb728c8f5bdcd24729b8b9282459fc0344bca5b/docs/make.jl#L5-L11. I would like to experiment whether removing docs/Manifest.toml and using proper compat entries in docs/Project.toml will alleviate some of the issues",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3520:74,install,installation,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3520,2,['install'],"['install', 'installation']"
Deployability,A more detailed session for installation instructions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2312:28,install,installation,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2312,1,['install'],['installation']
Deployability,"A more hierarchical organization of the docs is. 1. Introduction; * What's Oceananigans?; * Installation; * Writing your first script; * Do you want to save the world? (by contributing to Oceananigans); - Contributing guide; - Features that need validating; - Features that need documenting and examples; * Gallery; 2. Examples; 3. Building models, running simulations, and post processing; * Grids and computer architectures; * Fields, BoundaryCondition, and AbstractOperations; * IncompressibleModel; * HydrostaticFreeSurfaceModel; * ShallowWaterModel; * Setting initial conditions; * Diffusion, viscosity, and TurbulenceClosures; * Forcing functions; * Coriolis forces; * Buoyancy forces; * Simulation; * OutputWriters; * OutputReaders, post-processing, and plotting; 5. Useful tips; * Using Graphics Processing Units (GPUs); * Common errors and performance pitfalls; 8. Fluid dynamics and ocean physics; * Navier-Stokes and tracer conservation equations; * The hydrostatic approximation and shallow water equations; * The Boussinesq approximation and equations of state for seawater; * Rotating domains and Coriolis forces; * Diffusion, hyperdiffusion, and parameterization of subgrid processes; - Basic models for diffusive processes; - Large eddy simulation; - Boundary layer parameterization; 9. Numerical implementation; * The finite volume discretization on a staggered grid; * Interpolation, differencing, and advection schemes; * Boundary conditions and immersed boundaries; * The pressure correction method for enforcing mass conservation; * Discretization of hydrostatic and non-hydrostatic pressure; * Implicit time-stepping; * Multi-domain simulations and the cubed sphere; 10. Developer guide; 11. Appendix; * References",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-879259142:92,Install,Installation,92,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-879259142,1,['Install'],['Installation']
Deployability,"A question for @glwagner . At the moment the tendencies in the evolution equation for height is computed here using essentailly a second-order finite difference method. This is fine for a start, but as discussed elsehwere, it would be better to use finite volume and therefore using the advection schemes that already exist. https://github.com/CliMA/Oceananigans.jl/blob/fjp/update-convergence-tests/src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl#L71. In line 69 above you will see that I tried doing this by definig a new operator, div_UV, for partial_x U + partial_y V. This was clunky because I needed to pass variables U and V, and I had an error. The details can be found here,. https://github.com/CliMA/Oceananigans.jl/blob/9402a90af072a495ef130d540661be9327a51552/src/Models/ShallowWaterModels/shallow_water_advection_operators.jl#L24. Can you suggest a better way of doing this?. When I try running the tests most of the pass except at line 82 I get the following error . ```; [2021/01/11 15:36:04.735] INFO Testing time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]...; ERROR: a exception was thrown during kernel execution.; Run Julia on debug level 2 for device stack traces.; Time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]: Error During Test at /home/fpoulin/software/Oceananigans.jl/test/test_shallow_water_models.jl:82; Test threw exception; Expression: time_stepping_shallow_water_model_works(arch, topo, nothing); KernelException: exception thrown during kernel execution on device Quadro P400; Stacktrace:; [1] check_exceptions() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/compiler/exceptions.jl:94; [2] prepare_cuda_call() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/state.jl:85; [3] initialize_api() at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/error.jl:92; [4] macro expansion at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/libcuda.jl:975 [inlined]; [5] macro expansion at /home/fpoulin/.j",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952:375,update,update-convergence-tests,375,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952,1,['update'],['update-convergence-tests']
Deployability,A; ```; I got:; ```; [57577] signal (11.1): Segmentation fault; in expression starting at /glade/u/home/knudsenl/.julia/packages/CUDA_Runtime_jll/YgJCI/.pkg/platform_augmentation.jl:210; Allocations: 2907 (Pool: 2898; Big: 9); GC: 0; Activating new project at `/glade/derecho/scratch/knudsenl/BottomBoundaryLayer`; Installing known registries into `~/.julia`; Updating registry at `~/.julia/registries/General.toml`; Resolving package versions...; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Adapt ─────────────────────── v4.0.4; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed SentinelArrays ────────────── v1.4.5; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed FixedPointNumbers ─────────── v0.8.5; Installed Tables ────────────────────── v1.12.0; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed GPUCompiler ───────────────── v0.26.7; Installed StaticArraysCore ──────────── v1.4.3; Installed TimerOutputs ──────────────── v0.5.24; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed AbstractFFTs ──────────────── v1.5.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArrays ──────────────── v1.9.7; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed LaTeXStrings ──────────────── v1.3.1; Installed OrderedCollections ────────── v1.6.3; Installed NVTX ──────────────────────── v0.3.4; Installed UnsafeAtomicsLLVM ─────────── v0.1.5; Inst,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900:1197,Install,Installed,1197,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900,1,['Install'],['Installed']
Deployability,"According to https://pkgdocs.julialang.org/v1/compatibility/, `MPICH_jll = ""4.0.1""` means `[4.0.1 - 5.0.0)` and it's not what we wanted!. (And indeed, when I called `using Pkg; Pkg.update()` MPICH_jll got updated to 4.0.2.)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2488:181,update,update,181,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2488,2,['update'],"['update', 'updated']"
Deployability,"Actually now that I think about it, this is a breaking release. Idk how many people use this feature, but I wonder if we should do something similar to https://github.com/CliMA/Oceananigans.jl/pull/2990 and throw a warning whenever `ImmersedBoundaryCondition` is used so that previously working user scripts don't break silently.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1611801879:55,release,release,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3142#issuecomment-1611801879,1,['release'],['release']
Deployability,"Actually though these are not installation instructions at all but more ""best practices"". How bout a new wiki page ""Tips and best practices when using Oceananigans""?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2472#issuecomment-1109068879:30,install,installation,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2472#issuecomment-1109068879,1,['install'],['installation']
Deployability,"Actually, I think those docs are misleading. The straightforward way to arrive at the implicit step equation is to first discretize in space, and then after that derive the fractional step method. The key steps are:. 1. Discretize the continuity equation, and then sum in the vertical to obtain the finite-volume discretized free surface equation in terms of the vertically integrated transports; 2. Introduce the predictor velocities in the discretized momentum equation, and then sum the discretized momentum equation in the vertical.; 3. Combine the discretized momentum equation with the free surface equation by taking the divergence of the vertically-summed momentum equation. Steps 2 introduces the vertical sum of the discretized barotropic pressure gradient into the implicit step equation, which is how we see that these two contributions in fact come from the same place.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2475#issuecomment-1109690145:374,integrat,integrated,374,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2475#issuecomment-1109690145,1,['integrat'],['integrated']
Deployability,"Add ""citing"" section and list of publications using Oceananigans.jl (also update README)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1518:74,update,update,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1518,1,['update'],['update']
Deployability,Add Buildkite CI pipeline,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1006:17,pipeline,pipeline,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1006,1,['pipeline'],['pipeline']
Deployability,Add `branch_previews` kwarg in `deploydocs`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2604:32,deploy,deploydocs,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2604,1,['deploy'],['deploydocs']
Deployability,Add a test to check surface bc continuous functions work with ImmersedBoundary,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1928:31,continuous,continuous,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1928,1,['continuous'],['continuous']
Deployability,Add distributed test pipeline,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3326:21,pipeline,pipeline,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3326,1,['pipeline'],['pipeline']
Deployability,"Adding a Manifest + Project toml files in each validation scripts directory is a good idea!; However, if we do it while we are working on them in a PR, then the Manifest comes with an Oceananigans dependency that points to the branch, e.g.,. https://github.com/CliMA/Oceananigans.jl/blob/1c2a6f8752b6425bf30d856f8ba0aa681c0ab818/validation/stokes_drift/Manifest.toml#L1202. and the branch gets deleted after the PR is merged. . So what one would need to do is to make another PR with a Manifest pointing to the specific commit on `main` or to the next tagged release? Sounds like too much work to be sustainable...?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915:559,release,release,559,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915,1,['release'],['release']
Deployability,"Adding this before I forget. It could be useful to have builtin support for getting wall clock time spent in key ""blocks"" of code during any; simulation. . For example knowing how long is spent in iterative solver, how long in I/O, how long in time stepping, how long in initialization, how long in dynamics computations, how long in tracer computations, how long in communication etc.. can be a useful check and help see what is requiring resources in different configurations.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1862:463,configurat,configurations,463,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1862,1,['configurat'],['configurations']
Deployability,Adds FieldSlicer and integrates with JLD2OutputWriter and WindowedTimeAverage,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/932:21,integrat,integrates,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/932,1,['integrat'],['integrates']
Deployability,Adds adapt_structure for ContinuousForcing,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1016:25,Continuous,ContinuousForcing,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1016,1,['Continuous'],['ContinuousForcing']
Deployability,Adds diffusive criterion to dt update in TimeStepWizard,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/729:31,update,update,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/729,1,['update'],['update']
Deployability,Adds incompressiblity enforcement and state update to set!,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1259:44,update,update,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1259,1,['update'],['update']
Deployability,"After adding `MPI.Init()` back to `distributed_nonhydrostatic_model_mpi.jl`, the script seems to run (it's still running...). Here's a few idle thoughts (independent of this PR, just leaving here for future reference):. * The ""Benchmarks"" module in `/benchmarks/src` causes a few issues like:; ```julia; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ```; It'd be nice to fix that eventually. * The output is kind of annoying:. ```julia; [2022/03/13 13:17:49.875] INFO Benchmarking weak scaling nonhydrostatic model with Slab decomposition [N=(128, 128, 32), ranks=(1, 2, 1)]...; Invalid MIT-MAGIC-COOKIE-1 keyInvalid MIT-MAGIC-COOKIE-1 keyNo protocol specified; [ Info: Oceananigans will use 24 threads; [ Info: Oceananigans will use 24 threads; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590:497,update,updated,497,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590,2,['update'],['updated']
Deployability,Ah I can have a look at this. @glwagner bumped v0.52.1 but we haven't tagged a release yet so if we can fix/merge this soon it can make it into v0.52.1.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1419#issuecomment-790728343:79,release,release,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1419#issuecomment-790728343,1,['release'],['release']
Deployability,"Ah Julia 1.7!. Results look similar... ```julia; gregorywagner:~/ $ julia [16:23:13]; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.7.0 (2021-11-30); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> const a = 1; 1. julia> const a = 1; 1. julia> const a = ""hi""; ERROR: invalid redefinition of constant a; Stacktrace:; [1] top-level scope; @ REPL[3]:1; ```. but I'll take that into account...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1004424163:345,release,release,345,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1004424163,1,['release'],['release']
Deployability,"Ah Julia installed Oceananigans v0.5.1 (an extremely ancient version), probably due to conflicts between dependency versions. The latest release is Oceananigans v0.57.1. To grab the latest version you can try to explicitly update by typing `] add Oceananigans@0.57.1` in the REPL. There may be conflicts with some other packages like CUDA v3.1.0. Oceananigans is still depending on CUDA v2 so you might have to `] rm CUDA` to be able to `] add Oceananigans@0.57.1`. This might also explain the weird error you reported in #1635. PS: You might encounter issues when using Oceananigans.jl with Julia 1.6 right now. It still requires Julia 1.5 for now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1636#issuecomment-832291603:9,install,installed,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1636#issuecomment-832291603,3,"['install', 'release', 'update']","['installed', 'release', 'update']"
Deployability,Ah haha honest mistake. Not sure why CompatHelper fails but I think Buildkite adds Oceananigans.jl locally with this command. https://github.com/CliMA/Oceananigans.jl/blob/c34e6cd2166bbaa057186ffa795d348c1802485f/.buildkite/pipeline.yml#L326. so perhaps Buildkite won't fail because of this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1469#issuecomment-799665254:224,pipeline,pipeline,224,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1469#issuecomment-799665254,1,['pipeline'],['pipeline']
Deployability,Ah is it worth doing something with #3740 then so the model doesn't error with `free_surface = nothing` or would that just be misleading?. I can also update the PR to get rid of `rigid_lid.jl` to avoid confusing users into thinking a rigid lid mode exists.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3735#issuecomment-2313395254:150,update,update,150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3735#issuecomment-2313395254,1,['update'],['update']
Deployability,"Ah ok I see why your original script didn't work now. When executing. ```julia; model = IncompressibleModel(grid=grid,; closure = closure,; boundary_conditions = (v=v_bcs); ); ```. this assigned `v_bcs` to the new variable `v` and passes it to the `IncompressibleModel` function. `v_bc` itself is a `NamedTuple` containing `x, y, z` properties so the `IncompressibleModel` constructor does not complain. Since the named tuple that is passed does not not have a `v` property, the velocities get the default boundary conditions (free slip and no normal flow). Then when you call `set!(model, v=-0.5)` it fills v to be -0.5 everywhere but then `update_state!(model)` is called to ensure that the velocity field is incompressible (divergence-free) by performing a pressure projection step. Since the default boundary condition enforces no-normal flow, the velocity cannot be -0.5 everywhere so the pressure field updates it to be zero to enforce incompressibility. This is a pretty subtle bug (related to #1204)... Since the proper named tuple can't be checked for in the constructor function signature, I wonder if it's worth adding a manual check to make sure a `NamedTuple{(:x,:y,:z)}` was not passed to the model constructor.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1294#issuecomment-756979930:909,update,updates,909,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1294#issuecomment-756979930,1,['update'],['updates']
Deployability,Ah once the PR is merged you just do it via a comment (we comment on the latest commit): https://github.com/CliMA/Oceananigans.jl/commit/47caa85138047acb4584cf97092c62c3e59b3543#comments. You're a repo collaborator so you should be able to tag new releases. Under ColPrac people should merge their own PRs to avoid surprises but I'll take your comment as permission to merge and tag a new release :P,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1367#issuecomment-780201946:248,release,releases,248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1367#issuecomment-780201946,2,['release'],"['release', 'releases']"
Deployability,"Ah sorry I must have misunderstood your question. Yeah I think broadcasts; tend to perform really well on scalar operations so I don't see why not. On Tue, Mar 5, 2019, 12:13 PM Gregory L. Wagner <notifications@github.com>; wrote:. > I'm not suggesting we should always use broadcasting. I'm just wondering; > if it's ok to use it for simple operations. It's a nice abstraction that; > works on CPUs and GPUs for simple calculations / global array updates (for; > example; > <https://github.com/glwagner/StaggeredPoisson.jl/blob/d104825ba33f184af3b90ca0d958247d0011c7ad/src/solvers.jl#L148>; > ).; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/issues/108#issuecomment-469768233>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ATKyBSiIR6hlh-r4hjpSmahUJhp3x7Gzks5vTqXEgaJpZM4bfFUj>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/108#issuecomment-469769111:448,update,updates,448,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/108#issuecomment-469769111,1,['update'],['updates']
Deployability,Ah sorry for the slow reply. Docs build on `tartarus.mit.edu` through Buildkite which has GPUs but we disable the GPU through the Buildkite config. I think if we just remove this line we can build examples on the GPU!. https://github.com/CliMA/Oceananigans.jl/blob/81d9c0e061cae4aa5a0ec770ff8348be7517aa53/.buildkite/pipeline.yml#L324. Doesn't have to happen in this PR of course.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1495#issuecomment-802307902:317,pipeline,pipeline,317,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1495#issuecomment-802307902,1,['pipeline'],['pipeline']
Deployability,"Ah sorry you're right, good catch! I updated the original list with the actually supported topologies. Although I guess a side note worth mentioning is that I think you can create a grid with any topology and it won't error until it tries to construct a pressure solver. Might be clearer and more user friendly to print a useful error/warning when constructing the grid.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1192#issuecomment-732278652:37,update,updated,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1192#issuecomment-732278652,1,['update'],['updated']
Deployability,Ah that looks quite nice. Would it make sense to try and integrate `DiskTimeSeries` with a `DimensionalData.DimArray` to get named axis behavior?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1493#issuecomment-801936801:57,integrat,integrate,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1493#issuecomment-801936801,1,['integrat'],['integrate']
Deployability,Ah you're right! I forgot that `Pkg.test()` did that. I found the docs for it: https://pkgdocs.julialang.org/v1/api/#Pkg.test. I think the `-O0` flag is something Oceananigans.jl does on Buildkite though: https://github.com/CliMA/Oceananigans.jl/blob/main/.buildkite/pipeline.yml,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3747#issuecomment-2318407806:267,pipeline,pipeline,267,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3747#issuecomment-2318407806,1,['pipeline'],['pipeline']
Deployability,"Ah, interesting. I think you're right that it seems probable to be a KernelAbstractions thingy (but want to point out that `wait` can be called in other contexts / packages and has usage outside `KernelAbstactions`). Also explains why it mysteriously started happening due to auto update of `docs/Manifest.toml`. Should we stop updating `docs/Manifest.toml`? Is that possible?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816726007:281,update,update,281,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816726007,1,['update'],['update']
Deployability,"Ah, it's true that in the continuous equations a Dirichlet condition can be specified without invoking the boundary normal. I'm not sure that holds for us though because we use the weak form of the equations. This means that all the boundary conditions boil down to specification of a `Flux`. In a sense `Value` and `Gradient` are really convenience features that _infer_ what the flux needs to be (assuming second order evaluation of the gradient across the boundary). So I think we need to know about the boundary normal for all boundary conditions... The name ""vector invariant"" is confusing but only refers to the advection of momentum, so I don't think it helps. After thinking about it a little bit I think we can implement a hack that will allow us to proceed for most cases. I think we can prescribe a priori a zero component of the boundary normal component of the viscous momentum flux. This will allow users to specify drag conditions. For example, a drag condition specifies only boundary-tangential viscous fluxes, and has the form `flux = C * u | u |` for boundaries with both `y` and `z` normal vectors (where `| u |` can be correctly evaluated due to masking). To specify a no-slip condition we would also have a normal component of the viscous flux, so we'll have to get a little smarter for that case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1720#issuecomment-849952733:26,continuous,continuous,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1720#issuecomment-849952733,1,['continuous'],['continuous']
Deployability,"Ah, thanks for clarifying as clearly I was mistaken. I thought I needed to impose the boundary conditions on the total field, background + deviation. If that's not the case then the boundary conditions are set up correctly. I believe the next thing to try is the same set up but without `BackgroundField` and imposing the Neumann boundary conditions associated with the buoyancy frequency. If that behaves correctly, then the problem would appear to be in `BackgroundField`, as you suspect. . **Update:** ; I made the following changes,. - Removed the background field from model,; - Added `N^2 * (z + D)` into the initial conditiosn of the buoyancy,; - Imposed `buoyancy_gradient_bc` at the top and bottom of the domain. Unfortunately, the same problems occur at the boundary. . This does not seem to be imposing the correct boundary conditions on a tracer field at the top and bottom. **Periodic condition:**; I did try setting the vertical direction to periodic and unfortunately that gave an error, copied below. . Is this a seperate problem or do people think it's related?. ```; ERROR: LoadError: ArgumentError: batching dims must be sequential; Stacktrace:; [1] create_plan(::CUDA.CUFFT.cufftType_t, ::Tuple{Int64,Int64,Int64}, ::Array{Int64,1}) at /home/fpoulin/.julia/packages/CUDA/wTQsK/lib/cufft/fft.jl:140; [2] plan_fft! at /home/fpoulin/.julia/packages/CUDA/wTQsK/lib/cufft/fft.jl:256 [inlined]; [3] plan_forward_transform at /home/fpoulin/software/Oceananigans.jl/src/Solvers/plan_transforms.jl:42 [inlined]; [4] plan_transforms(::GPU, ::RegularRectilinearGrid{Float64,Flat,Bounded,Periodic,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, ::CUDA.CuArray{Complex{Float64},3}, ::UInt32) at /home/fpoulin/software/Oceananigans.jl/src/Solvers/plan_transforms.jl:106; [5] Oceananigans.Solvers.FFTBasedPoissonSolver(::GPU, ::RegularRectilinearGrid{Float64,Flat,Bounded,Periodic,OffsetArrays.OffsetArray{Float64,1,StepRangeL",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815670594:495,Update,Update,495,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815670594,1,['Update'],['Update']
Deployability,"Ah, thanks for that @maleadt. So microbenchmarks suggest squaring by `Float64` and `Int32` are virtually indistinguishable in simple code. Is there any way that this change is somehow affected by compiler heuristics; eg code inlining is somehow much more effective / optimized when we can invoke `nv_pow`... ? Otherwise I'm at a loss. I think prior to the changes we grouped into our ""upgrade to julia 1.6"" we were using the function `CUDA.pow` (from an ancient `CUDA.jl` version).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869812530:385,upgrade,upgrade,385,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869812530,2,['upgrade'],['upgrade']
Deployability,"Ali, can I think of this as a shallow water model that knows about reduced; gravity? John. On Wed, Apr 21, 2021, 1:45 PM Ali Ramadhan ***@***.***> wrote:. > This PR adds an eddying aquaplanet validation experiment that's still a; > work-in-progress (early stage PR).; >; > The idea is to force a HydrostaticFreeSurfaceModel on a CubedSphereGrid; > with a ""tradewind-like"" zonal wind stress pattern akin to Marshall et al.; > (2007); > <https://journals.ametsoc.org/view/journals/atsc/64/12/2007jas2226.1.xml>.; >; > This is figure 3 from the paper:; >; > [image: i1520-0469-64-12-4270-f03]; > <https://user-images.githubusercontent.com/20099589/115593956-293a7d00-a2a3-11eb-98cd-4874b6b3d638.gif>; >; > and this is the analytic formula I'm using to mimic it:; >; > [image: image]; > <https://user-images.githubusercontent.com/20099589/115593657-c8ab4000-a2a2-11eb-8090-b584e88b7e72.png>; >; > We integrate τ to obtain a streamfunction for the wind stress which we; > then use to diagnose the surface; > momentum fluxes on the cubed sphere. *I think I got the magnitude wrong; > so I fixed it with a scaling factor...*; >; > I tried adding a lot of noise to the initial velocities but the wind; > stress smoothed it away.; > cubed_sphere_eddying_aquaplanet.mp4; >; > @christophernhill <https://github.com/christophernhill> suggested adding; > some random noise to the wind stress as well. And we probably also need a; > mechanism to remove energy otherwise the wind stress keeps accelerating the; > fluid until the model blows up. Maybe we need some bottom drag even though; > we only have one vertical level?; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/CliMA/Oceananigans.jl/pull/1602; > Commit Summary; >; > - Regularize cubed sphere boundary conditions; > - First draft of eddying aquaplanet; > - Run with diffusion for 7 days and copy paste plotting script; >; > File Changes; >; > - *M* src/CubedSpheres/CubedSphere",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1602#issuecomment-824303767:896,integrat,integrate,896,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1602#issuecomment-824303767,1,['integrat'],['integrate']
Deployability,All the arrays right now are of size `Nx*Ny*Nz` but technically there are `Nx` volumes in the _x_-direction and `Nx+1` faces so the output should match this and make sense. The easiest thing to do with the doubly periodic configuration we have right now is to have row `Nx+1` be a repeat of row `1` but writing out the fields at the very bottom (`k=Nz+1`) might require some extra computation?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/92:222,configurat,configuration,222,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/92,1,['configurat'],['configuration']
Deployability,Allow the default_bc to be a `ContinuousBoundaryFunction`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3196:30,Continuous,ContinuousBoundaryFunction,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3196,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,Allows field-dependent SimpleForcing. Updates plankton growth example.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/744:38,Update,Updates,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/744,1,['Update'],['Updates']
Deployability,"Also I'll post here my implementation of the sorting just in case it's useful for some people. . ```julia; function flattenedsort(A, dim_order::Union{Tuple, AbstractVector}); return reshape(sort(Array(permutedims(A, dim_order)[:])), (grid.Nx, grid.Ny, grid.Nz)); end. function sort_b(model; average=false); b = model.tracers.b; sorted_B = flattenedsort(interior(b), [3,2,1]); if !average; return sorted_B; else; return dropdims(mean(sorted_B, dims=(1,2)), dims=(1,2)); end; end; mean_sort_b = (mod)->sort_b(mod; average=true); ```. I bet this can be done more elegantly but here it is. Thanks to @glwagner for pointing me in the right direction for this. Note: Right now I have to explicitly transform `b` into an `Array` before sorting because the version of CUDA that Oceananigans currently uses doesn't have `sort` implemented. After we upgrade to Julia 1.6 we'll be able to use the most recent CUDA version and that transformation won't be necessary anymore (I think).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1297#issuecomment-839373431:840,upgrade,upgrade,840,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1297#issuecomment-839373431,1,['upgrade'],['upgrade']
Deployability,Also bump a patch release.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1997#issuecomment-933991833:12,patch,patch,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1997#issuecomment-933991833,2,"['patch', 'release']","['patch', 'release']"
Deployability,"Also this doesn't blow up, right? I think with increasing energy, eventually nonlinearities and numerical diffusion would kick in. The integrated KE might exhibit oscillatory behavior on long time-scales. (The example in the OP only blows up because the `TimeStepWizard` increases the time step too much.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445270762:135,integrat,integrated,135,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445270762,1,['integrat'],['integrated']
Deployability,"Also to be clear, declaring something as `const`, and then inserting that variable's value into another data structure does not guarantee that the value in the second data structure is fixed. `const` attaches to a name and does not ""propagate"" into other data structures like `ContinuousBoundaryFunction.parameters`. So things like the following are valid:. ```julia; julia> mutable struct Test{T}; a :: T; end. julia> const b = 2; 2. julia> t = Test(b); Test{Int64}(2). julia> t.a = 3; 3. julia> t; Test{Int64}(3); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881686691:277,Continuous,ContinuousBoundaryFunction,277,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881686691,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Also update on correctness / testing: there are now tests that fluxes are correctly imposed:. https://github.com/CliMA/Oceananigans.jl/blob/22739d6a5d410317b0a6fa5cf538ba43dabe16bf/test/test_boundary_conditions_integration.jl#L226-L227. I don't believe there are any simple tests that `Value` / `Gradient` boundary conditions are imposed correctly --- even without an immersed boundary. Instead, we have relied on validation tests to check that. I think it does make sense though to have some tests in that direction... maybe something like a test that 1D couette flow is maintained (for momentum) and that a simple linear tracer gradient is maintained (for tracers). Those would go here: https://github.com/CliMA/Oceananigans.jl/blob/glw/immersed-bcs/test/test_dynamics.jl. Since we don't have that yet we should probably add in another PR. It'd be nice therefore to have a few validation experiments in hand before merging that indicate no-slip ""seems to work"". cc @raphaelouillon",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105451882:5,update,update,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105451882,2,['update'],['update']
Deployability,"Also, I don't understand why we're calling masking events at update for every `NonhydrostaticModel` regardless of it having an `ImmersedGrid` or not:. https://github.com/CliMA/Oceananigans.jl/blob/d4a45adf21918f95ca4d23ec7167e720c44c501b/src/Models/NonhydrostaticModels/update_nonhydrostatic_model_state.jl#L14-L19. The same goes for the hydrostatic model. Why not something like. ```julia; if model.grid isa ImmersedBoundaryGrid; # call masking; end; ```; ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1225936417:61,update,update,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1225936417,1,['update'],['update']
Deployability,"Also, before I forget, could we also bump either the patch or minor version (whatever is appropriate here) before merging?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1177973368:53,patch,patch,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1177973368,1,['patch'],['patch']
Deployability,"Also, for open boundary conditions, we probably want to have a z-star coordinate and a non-linear free surface to make sure we conserve volume (@jm-c could advise). There is one open PR for ZStar if you want to take a look and test it out (#3411), it is not stale because I am keeping it updated (and should be working), but it's still in a testing phase, and it is still not correct for immersed boundaries.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2312743274:288,update,updated,288,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2312743274,1,['update'],['updated']
Deployability,"Also, this PR shows that tests have passed. But do the tests run the benchmarks? @ali-ramadhan is there a benchmark pipeline and how can we trigger it if so?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866291414:116,pipeline,pipeline,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866291414,1,['pipeline'],['pipeline']
Deployability,"Among the packages that are loaded in `dependencies_for_runtests.jl` are `DataDeps` and `TimeDate`, which aren't part of Oceananigans dependencies. So I always have to either install those packages or comment out those lines when running tests locally. (Unless there's an easier solution that I'm not aware of!). While this isn't a huge hassle, it does make it less likely (at least for me) to test my changes locally, so I'm attempting this slight change in the loading of packages where only standard Julia packages and Oceananigans dependencies are loaded in `dependencies_for_runtests.jl` and the rest are loaded only in the scripts where they used. Hopefully this should make testing changes locally easier for everyone.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2715:175,install,install,175,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2715,1,['install'],['install']
Deployability,"An update:. ```Julia; using Oceananigans. using Statistics; using Oceananigans.Units; using Oceananigans.Architectures: device_event; using Oceananigans.TimeSteppers: update_state!; using LinearAlgebra: norm. using Oceananigans.Models.HydrostaticFreeSurfaceModels:; ImplicitFreeSurface,; FreeSurface,; PCGImplicitFreeSurfaceSolver,; implicit_free_surface_step!. function set_simple_divergent_velocity!(model); # Create a divergent velocity; grid = model.grid. u, v, w = model.velocities; η = model.free_surface.η. u .= 0; v .= 0; η .= 0. # pick a surface cell at the middle of the domain; i, j, k = Int(floor(grid.Nx / 2)) + 1, Int(floor(grid.Ny / 2)) + 1, grid.Nz. inactive_cell(i, j, k, grid) && error(""The nudged cell at ($i, $j, $k) is inactive.""). if grid isa RectilinearGrid; Δy = grid.Δyᵃᶜᵃ; end. if grid isa LatitudeLongitudeGrid; Δy = grid.Δyᶜᶠᵃ; end. if grid isa ImmersedBoundaryGrid; if grid isa ImmersedBoundaryGrid && grid.underlying_grid isa RectilinearGrid; Δy = grid.underlying_grid.Δyᵃᶜᵃ; elseif grid.underlying_grid isa LatitudeLongitudeGrid; Δy = grid.underlying_grid.Δyᶜᶠᵃ; end; end. Δz = CUDA.@allowscalar grid.Δzᵃᵃᶜ. # We prescribe the value of the zonal transport in a cell, i.e., `u * Δy * Δz`. This; # way `norm(rhs)` of the free-surface solver does not depend on the grid extensd/resolution.; transport = 1e5 # m³ s⁻¹; CUDA.@allowscalar u[i, j, k] = transport / (Δy * Δz). update_state!(model). return nothing; end. arch = CPU(). rectilinear_grid = RectilinearGrid(arch, size = (128, 1, 5),; x = (-5000kilometers, 5000kilometers),; y = (0, 100kilometers),; z = (-500, 0),; topology = (Bounded, Periodic, Bounded)). Lz = rectilinear_grid.Lz; width = rectilinear_grid.Lx / 20. bump(x, y) = - Lz * (1 - 0.2 * exp(-x^2 / 2width^2)). grid = ImmersedBoundaryGrid(rectilinear_grid, GridFittedBottom(bump)). free_surface = ImplicitFreeSurface(solver_method=:PreconditionedConjugateGradient,; abstol=1e-15, reltol=0). model = HydrostaticFreeSurfaceModel(; grid,; momentum_advection = ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2723#issuecomment-1247333938:3,update,update,3,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2723#issuecomment-1247333938,1,['update'],['update']
Deployability,"And continuous form doesn't work at all, and it can't. You would have to build the continuous form manually, I don't think there's a point.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2179189503:4,continuous,continuous,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2179189503,2,['continuous'],['continuous']
Deployability,And new release after?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766390001:8,release,release,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766390001,1,['release'],['release']
Deployability,Another CATKE update,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2844:14,update,update,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2844,1,['update'],['update']
Deployability,"Another benefit of removing the hydrostatic pressure is that we can improve the documentation and user interface too. For example, the hydrostatic pressure in the hydrostatic model is stored in something like. ```; model.pressure.pHY; ```. since for the nonhydrostatic model its. ```; model.pressures.pNHS; model.pressures.pHY; ```. With just one pressure field we should simply write `model.pressure` for both cases. It's a significant refactor to remove hydrostatic pressure --- I don't think we want to do the hacky thing that we did to set up that PR that just keeps the same structures but sets pressure to `nothing`, we want to do it properly and update the docs.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518172281:653,update,update,653,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518172281,2,['update'],['update']
Deployability,Another place I think we need to change is particle advection:; https://github.com/CliMA/Oceananigans.jl/blob/f3113c492f309846f026e0ac150dc8480f96e0f2/src/LagrangianParticleTracking/update_particle_properties.jl#L157-L161. Because currently background velocity fields don't get integrated which I think is wrong? At least in the case I was using them for I had to add the background velocities manually.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482931094:278,integrat,integrated,278,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482931094,1,['integrat'],['integrated']
Deployability,"Apologies - other urgent work and family needs have delayed me. I'm using; Julia 1.9.3; CairoMakie v0.9.4; and have in my status report; GLMakie v0.7.4 and Makie v0.18.4. I tried to use update with the pkg manager to no effect, but see I should be using CairoMakie@0.11, which I am now installing.; This was not successful. For example the file S7LmV_3TYIX.dll would not load giving a permission denied error, but my check of the properties/security did not reveal a deficiency. However, the example worked fine. Many thanks - Kevin",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3442#issuecomment-1920152651:186,update,update,186,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3442#issuecomment-1920152651,2,"['install', 'update']","['installing', 'update']"
Deployability,"Apologies, currently using `v0.76.1`. I can try to update if you think that could solve it?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2700#issuecomment-1219154617:51,update,update,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2700#issuecomment-1219154617,1,['update'],['update']
Deployability,"As @glwagner pointed out, the code is not set up to support this feature. . `ContinuousBoundaryFunction`s and `DiscreteBoundaryFunction`s are supported only for `Flux` boundary conditions at the moment, where the boundary contribution is added as an additional tendency rather than filling the halo regions. . If we want to support these more complicated BC for `Open`, `Value` and `Gradient`, we have to make sure that in all places where we use the `fill_halo_regions!` we also pass as arguments the `clock` and all the `model_fields`, which might be doable. In this case you are hitting this problem in the hydrostatic model because in the `ImplicitFreeSurfaceSolver` there is a `fill_halo_regions!` for velocities that does not pass `clock` and `model_fields`, making julia complain. https://github.com/CliMA/Oceananigans.jl/blob/d4bcc095be66c7b5c98a462106285a6f6d341fe1/src/Models/HydrostaticFreeSurfaceModels/implicit_free_surface.jl#L137. If you use the SplitExplicit the error disappears. This is not to say that the solution will be correct because still the barotropic velocities and barotropic volume fluxes will not account for those open boundary conditions.; Also for `Nonhydrostatic`, even if the script does not error, there might be some subtleties for which the result is incorrect. The correct implementation of open boundary conditions should be in #3842",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2178789178:77,Continuous,ContinuousBoundaryFunction,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2178789178,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"As HydrostaticFreeSurfaceModel is further developed we're going to have to restructure the docs significantly. In addition to that the docs have grown a bit stale and could probably use a refresh. I think it's a good time too to leverage the year or two of experience we've accumulated using Oceananigans to refactor the docs to make them more useful and practical. Here's the current structure:. 1. Home; 2. Installation instructions; 3. Using GPUs; 4. Examples; 5. Physics; 6. Numerical implementation; 7. Model setup; 8. Simulation tips; 9. Contributor's guide; 10. Gallery; 11. References; 12. Appendix. I propose refactoring this in a few ways:. * Adding a sort of ""quick start"" section (perhaps named just that) after ""Installation"". This will implement a similar simple example as `one_dimensional_diffusion.jl`, except with even more text, explaining basic important types and functions and providing links to other parts of the docs to obtain more information.; * ""Flattening"" the model setup section by bringing its sections out into the main list. I think this list should be refactored too according to what's important. For example, we don't need a whole section on `Clock`.; * Adding independent sections for each model type; * Moving ""Physics"" and ""Numerical implementation"" down in the docs to emphasize code documentation. The resulting structure might be something like. 1. What's Oceananigans?; 2. Installation; 3. Getting started; 4. Examples; 5. Grids; 6. Fields, BoundaryCondition, and AbstractOperations; 7. IncompressibleModel; 8. HydrostaticFreeSurfaceModel; 9. ShallowWaterModel; 10. Setting initial conditions; 11. Diffusion, viscosity, and TurbulenceClosures ; 12. Forcing functions; 13. Coriolis forces; 14. Buoyancy forces; 15. OutputWriters; 16. OutputReaders, post-processing, and plotting; 17. Using Graphics Processing Units (GPUs); 18. Useful tips and common pitfalls (from ""simulation tips""); 19. Contributor's guide; 20. Gallery (this should be way higher eventual",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1852:409,Install,Installation,409,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1852,2,['Install'],['Installation']
Deployability,"As an update, I have pushed a commit consisting of a working version of the double gyre example, where Δz is replaced by zspacings and znodes, the plots are improved with additional attributes, and visualization is performed on the CPU even if the code runs on the GPU. I still need to incorporate some of the suggested modifications listed above. I am uploading the plots and animation here. In today's meeting with Navid and Simone, we looked at switching to the lat-lon grid and more. In the upcoming commits, I will run for longer time on a lat-lon grid, introduce checkpoints for restarting the simulation, and add a topography. . [double_gyre_grid_spacing.pdf](https://github.com/CliMA/Oceananigans.jl/files/11493173/double_gyre_grid_spacing.pdf). [double_gyre_circulation.pdf](https://github.com/CliMA/Oceananigans.jl/files/11493174/double_gyre_circulation.pdf). https://github.com/CliMA/Oceananigans.jl/assets/12926768/cf148a0c-58c8-4ba2-b649-cb40418d0665",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-1550535207:6,update,update,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-1550535207,1,['update'],['update']
Deployability,"As discussed with @jm-c, the organization of physical constants and parameters is somewhat confusing. Currently, constants are stored in three places:. 1. `PlanetaryConstants`, which stores a rotation rate, gravitational acceleration, and a Coriolis parameter used in an f-plane approximation; 2. `ModelConfiguration`, which stores anisotropic (potentially turbulent) viscosities and diffusivities; 3. `EquationOfState`, of which there is only one kind: `LinearEquationOfState`, which stores both parameters associated with the equation of state in addition to a reference density. I see a few problems:. * `f` is not a property of a planet.; * 'Model configuration' is an obscure name for turbulent or molecular transport coefficients.; * A reference density is not a parameter in an equation of state. I propose that we consolidate these three types into two, removing the reference density from `EquationOfState` and define a new type containing f, g, ρ0, ν, and κ. I'm not sure what to call the new type. One possibility is `FluidParameters` or `PhysicalParameters` or `PhysicalConstants`. I also propose that we cease support for anisotropic transport coefficients as parameters, defined generally, at least for the moment. We can support constant anisotropic transport coefficients as a type of LES closure in the future.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/217:652,configurat,configuration,652,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/217,1,['configurat'],['configuration']
Deployability,"As for the titular issue, `accumulate_result!` tries to accumulate a time-average of it's `output` whenever it's called. The important line is. https://github.com/CliMA/Oceananigans.jl/blob/d17f926b2c4787bf44f619439e81bfb82937aabf/src/OutputWriters/windowed_time_average.jl#L138. where. * `T_previous` is elapsed model time between the averaging start time and the time at which the average was ""previously"" accumulated; ie `T_previous = wta.previous_collection_time - wta.window_start_time`; * `Δt` is the time-interval between the end of `T_previous` and the current time, ie `Δt = model.clock.time - wta.previous_collection_time`; * `integrand` is the current value of the integrand from `integrand = fetch_output(wta.operand, model, wta.field_slicer)`; * `T_current` is the current time-interval, ie `model.clock.time - wta.window_start_time`. After the average is updated, the new ""previous"" collection time is also updated:. https://github.com/CliMA/Oceananigans.jl/blob/d17f926b2c4787bf44f619439e81bfb82937aabf/src/OutputWriters/windowed_time_average.jl#L141",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872459502:869,update,updated,869,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872459502,2,['update'],['updated']
Deployability,"As well as more general decompositions, and greatly expand the docstring. Much help was provided by @jipolanco on this journey. Note right now we depend on `PencilFFTs#master` but hopefully that'll change with https://github.com/jipolanco/PencilFFTs.jl/pull/47. This required a bit of thinking and logic about pencil decompositions. What I learned is hopefully well-summarized in the docstring:. ```; """"""; DistributedFFTBasedPoissonSolver(global_grid, local_grid). Return a FFT-based solver for the Poisson equation,. ∇²x = b. for `MultiArch`itectures. Supported configurations; ========================. We support two ""modes"":. 1. Two-dimensional decompositions in (x, y) for problems with either; `Nz > Rx` or `Nz > Ry` (therefore, three-dimensional). 2. One-dimensional decompositions in either x or y for problems that are; either two-dimensional, or have limited dimensionality in z. Above, `Nz = size(global_grid, 3)` and `Rx, Ry, Rz = architecture(local_grid).ranks`. Other configurations that are decomposed in (x, y) but have too few Nz,; or any configuration decomposed in z, are not supported. Algorithm for two-dimensional decompositions; ============================================. When decomposition in two-dimensions for a three-dimensional problem,; there are three forward transforms, three backward transforms,; and 4 transpositions requiring MPI communication. In the following schematic, the first; dimension is always the local dimension. The following algorithm requires that `Nz > Rx`,; where `Nz` is the number of vertical cells and `Rx` is the number of ranks in x.; For `Nz < Rx` but `Nz > Ry`, a similar algorithm applies with x and y swapped:. 1. `first(storage)` is initialized with layout (z, x, y).; 2. Transform along z.; 3 Transpose + communicate to storage[2] in layout (x, z, y),; which is distributed into `(Rx, Ry)` processes in (z, y).; 4. Transform along x.; 5 Transpose + communicate to last(storage) in layout (y, x, z),; which is distributed into `(Rx, Ry)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2536:563,configurat,configurations,563,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2536,1,['configurat'],['configurations']
Deployability,At some point we'd need to revisit the benchmarks. (https://clima.github.io/OceananigansDocumentation/stable/appendix/benchmarks/). We might wanna discuss what to include there and how we could perhaps automate the procedure? It doesn't need to be completely automated but perhaps we should have a workflow that we could run every now and again that produces a set of figures that are stored in OceananigansArtifacts.jl or somewhere so the docs update automatically?. (Feel free to convert this to a Discussion if it's more appropriate.),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3166:445,update,update,445,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3166,1,['update'],['update']
Deployability,At the moment it was there but never used. So only wasting time by installing and precompiling when building the docs.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2070:67,install,installing,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2070,1,['install'],['installing']
Deployability,At the moment the docs only mention the uniform unidirectional Stokes drift implementation . https://clima.github.io/OceananigansDocumentation/stable/physics/surface_gravity_waves/. We need to update the docs to take into account the 3D Stokes implementation that was introduced with #3384. cc @BrodiePearson @glwagner @LeeAra0,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3432:193,update,update,193,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3432,1,['update'],['update']
Deployability,"At the moment we hardcode the locations where output files in docs builds are so we can delete them before deploying the docs. See:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/docs/make.jl#L165-L169. We should find a way to automatically search for output files recursively in the `docs` directory and delete them before deploying the docs. I've asked in Julia slack how to do this and some ideas include:. ```Julia; julia> function recursive_find(dir, pattern); mapreduce(vcat, walkdir(dir)) do (root, dirs, files); joinpath.(root, filter(contains(pattern), files)); end; end; recursive_find (generic function with 1 method). julia> recursive_find(DEPOT_PATH[end], r""\.jl$""); 988-element Vector{String}:; ""/opt/julia/julia-1.9.0/share/julia/julia-config.jl""; ""/opt/julia/julia-1.9.0/share/julia/base/Base.jl""; ""/opt/julia/julia-1.9.0/share/julia/base/Enums.jl""; ""/opt/julia/julia-1.9.0/share/julia/base/abstractarray.jl""; ⋮; ""/opt/julia/julia-1.9.0/share/julia/test/testhelpers/llvmpasses.jl""; ""/opt/julia/julia-1.9.0/share/julia/test/testhelpers/withlocales.jl""; ""/opt/julia/julia-1.9.0/share/julia/test/unicode/utf8.jl""; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3112:107,deploy,deploying,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3112,2,['deploy'],['deploying']
Deployability,"At the moment, the tendencies were updated at each call of `update_state!`. This PR makes it so that the tendencies are computed only inside the time-stepping where we need them. see [ClimaOcean#164](https://github.com/CliMA/ClimaOcean.jl/issues/164)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3741:35,update,updated,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3741,1,['update'],['updated']
Deployability,"At the moment, this PR allows slab decomposition in x and y, and pencil decomposition in x, y.; This PR implements these transposes:; ```julia; z -> y; y -> x; x -> y ; y -> z; ```; where the above letter stands for the ""free"" direction (the direction that is completely local). We always start from the `z` configuration because we do not want to support z-decompositions (because of possible vertical integrals and implicit vertical diffusion). ; The FFT based algorithm is ; ```julia; z_transform! ; z -> y; y_transform!; y -> x; x_transform!; division by λ; x_transform!; x -> y ; y_transform!; y -> z; z_transform!; ```; The whole procedure needs 4 transposes for pencil decomposition and 2 for slab decomposition.; I am still working on implementing the Fourier tridiagonal solver, which is very easily done naively by increasing the number of transposes:; ```julia; z -> y; y_transform!; y -> x; x_transform!; x -> y ; y -> z; tridiagonal_solve!; z -> y; y_transform!; y -> x; x_transform!; x -> y; y -> z; ```; This requires 8 transposes though, which would kill any possibility of scaling even if we completely fill the GPU memory.; I would like to ensure that we always do a maximum of 4 transposes (2 forward and 2 backward).; This means playing with memory in the background, I still have to do a little bit of thinking to ensure it, maybe I have to define other transposes like; ```julia; x -> z; z -> x; ```; which would remove two of them but it is slightly more complicated. This is because, in the previous transposes we switch partitioning between the in and out free direction while the third dimension remains untouched. On the other hand, z-configuration and x-configuration also have a differently partitioned y-direction which makes the transpose process between `x` and `z` non-trivial",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1731333132:308,configurat,configuration,308,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1731333132,3,['configurat'],['configuration']
Deployability,Avoid executing the lines to install dependencies within examples,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1316:29,install,install,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1316,1,['install'],['install']
Deployability,"Awesome, I just marked it as ready-for-review. I'm planning on reviewing it soon. I'd advise you to update the branch with main though, since we can only merge up-to-date branches. Also, there seem to be a few comments throughout the code that should probably be `resolve`d prior to merging. Do you mind going through those to make sure we're not missing anything important?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2209049427:100,update,update,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2209049427,1,['update'],['update']
Deployability,"B1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `66.66% <0.00%> (-33.34%)` | :arrow_down: |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `76.54% <0.00%> (-5.28%)` | :arrow_down: |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `65.07% <0.00%> (-0.55%)` | :arrow_down: |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `95.23% <0.00%> (-0.12%)` | :arrow_down: |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [docs/bibliography.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-ZG9jcy9iaWJsaW9ncmFwaHkuamw=) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | ... and [44 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881?src=pr&el=footer). Last update [810a3a1...9128ab2](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/881#issuecomment-682318992:3283,update,update,3283,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/881#issuecomment-682318992,1,['update'],['update']
Deployability,"BTW, in the next release of `NCDatasets.jl`,`defVar` will throw an error if there is an unrecognized keyword \(See this [change](https://github.com/Alexander-Barth/NCDatasets.jl/issues/212)\). That means that older versions of `Oceananigans.jl` \(\< 0.84\) will not work with newer versions of `NCDatasets.jl` \(\>0.12.17\).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3153#issuecomment-1608564895:17,release,release,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3153#issuecomment-1608564895,1,['release'],['release']
Deployability,"Bah, I realized this won't work because we have to call `compute!` on all leaves of an expression tree. For that it's important that `compute!(::AbstractOperation)` doesn't do anything. We can support this if we change that interface, eg if we add something `compute_leaf!`. Then we can adapt `compute!` for public use and update the private methods like `compute_leaf!` as needed. Might not be worth it, probably there's other stuff we also need to work on if we want totally beautiful REPLness.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2235#issuecomment-1032963432:323,update,update,323,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2235#issuecomment-1032963432,1,['update'],['update']
Deployability,"Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, Float64}}}}}, NamedTuple{(:u, :v, :w), Tuple{Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(drag_u), NamedTuple{(:cᴰ, :V∞), Tuple{Float64, Float64}}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Field{Center, Face, Center, Nothing, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.Offset",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3412:5952,Continuous,ContinuousBoundaryFunction,5952,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3412,3,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Base.show` very slow since showing a `FieldTimeSeries` prints its min, mean, and max. So it's harder to work with `FieldTimeSeries` interactively. Seems fine when not on a `ImmersedBoundaryGrid`. I'm guessing it's slower because it's masking out the immersed values but I don't know if we expect it to be ~2000x slower than without an immersed boundary. It's those memory allocations... A quick quality-of-life fix could be to not call `data_summary` when showing a `FieldTimeSeries`. ## MWE. ```julia; using Oceananigans. arch = CPU(). L = 1; H = 1. underlying_grid = LatitudeLongitudeGrid(; arch;; topology = (Bounded, Bounded, Bounded),; size = (512, 512, 64),; latitude = (-L/2, L/2),; longitude = (-L/2, L/2),; z = (-H, 0),; halo = (4, 4, 4); ). h = L/2; w = L/5 ; mount(x, y) = h * exp(-x^2 / 2w^2) * exp(-y^2 / 2w^2); bottom(x, y) = -H + mount(x, y). grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bottom)). model = HydrostaticFreeSurfaceModel(; grid). simulation = Simulation(model, Δt=1, stop_iteration=1). simulation.output_writers[:fields] =; JLD2OutputWriter(; model,; model.velocities;; filename = ""test.jld2"",; schedule = IterationInterval(1),; overwrite_existing = true; ). run!(simulation). u = FieldTimeSeries(""test.jld2"", ""u""); u2 = u[2]; ```. Reduction over the `FieldTimeSeries`:. ```julia; julia> @time minimum(u2); 20.954897 seconds (118.72 M allocations: 130.792 GiB, 25.74% gc time); 0.0; ```. Reduction over the underlying data:. ```julia; julia> @time minimum(u2.data); 0.011304 seconds (3 allocations: 1.562 KiB); 0.0; ```. or almost 2000x faster. ## Environment. Oceananigans.jl `main` branch with. ```; Julia Version 1.10.5; Commit 6f3fdf7b362 (2024-08-27 14:19 UTC); Build Info:; Official https://julialang.org/ release; Platform Info:; OS: Linux (x86_64-linux-gnu); CPU: 48 × AMD Ryzen Threadripper 7960X 24-Cores; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-15.0.7 (ORCJIT, znver3); Threads: 1 default, 0 interactive, 1 GC (on 48 virtual cores); ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3750:1793,release,release,1793,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3750,1,['release'],['release']
Deployability,"Based on the discussion with @iuryt on slack I realized that our ""Installation instructions"" session was a bit barebones. Here's attempt to re-write with a bit more explanation and ""hand-holding"", which I think will help users in general. Basically I think we need to touch on how to install Julia (both for personal computers and HPC systems), since that's often the hardest step, and also touch on running the simulations on HPC systems when you need GPUs (which basically means you have to deal with the job scheduler). This is only my first draft, but suggestions are welcome!",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2312:66,Install,Installation,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2312,2,"['Install', 'install']","['Installation', 'install']"
Deployability,"Basically a ""callback"" is a way to run any function that takes a `Simulation` as an argument at a given schedule? Be it a function that prints things, updates model parameters (like `TimeStepWizard`) or whatever?. If so, I'm very much onboard with this feature :+1:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1894#issuecomment-885815090:151,update,updates,151,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1894#issuecomment-885815090,1,['update'],['updates']
Deployability,Been a lot of changes since v0.44.1 (including some bug fixes) but don't think there have been any breaking changes (or massive new features) so was thinking we should tag and release v0.44.2.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1200:176,release,release,176,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1200,1,['release'],['release']
Deployability,"Before I merge, I don't think this is a breaking change any more because I added a method:; ```julia; BoundaryCondition(Classification::DataType, args...) = BoundaryCondition(Classification(), args...); ```; so the ""old"" syntax of e.g. `BoundaryCondition(Value, 1)` (v.s. `BoundaryCondition(Value(), 1)`) still works, do we want to support this legacy way of creating a boundary condition (and change the version number to just a patch increase), or should I remove this method and make this a breaking change?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2273997452:430,patch,patch,430,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2273997452,1,['patch'],['patch']
Deployability,Before I updated and induced the problem I was getting O(seconds) initialisation time on M1 Mac so I think you're experiencing the problem with both versions @navidcy . I tried using JLD2 and got the same slow initialisation. Do they have a common dependency that does something to the field?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1805861775:9,update,updated,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1805861775,1,['update'],['updated']
Deployability,Better Buildkite CI pipeline,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1031:20,pipeline,pipeline,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1031,1,['pipeline'],['pipeline']
Deployability,Better installation instructions.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/152:7,install,installation,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/152,1,['install'],['installation']
Deployability,"Borrowing on previous code that a student and I wrote, I have created a julia code that will solve the linear stability problem for a Bickley Jet in the context fo the `ShallowWaterModel`. It doesn't actually use Oceananigans at all, yet, but produces the followin four figures. This is something that I plan to use to validate the growth rates in the nonlinear evolution of the Bickely jet in the `ShallowWaterModel`, but can easily be extended to other profiles and other models as well. Is there any interest in integrating this in Oceananigans?. **Velocity and free-surface height of the basic state:**. ![basic_state](https://user-images.githubusercontent.com/8239041/105401802-93844880-5bf4-11eb-8a7f-32878e09698c.png). **Growth rates of the two most unstable modes:**. ![growth_rates](https://user-images.githubusercontent.com/8239041/105401818-9717cf80-5bf4-11eb-9c12-79f755ce84ed.png). **Plots of the 1D spatial strucutre of the most unstable mode:**. ![modes_1D](https://user-images.githubusercontent.com/8239041/105401831-9bdc8380-5bf4-11eb-8226-c531129dc7ae.png). **Plots of the 2D spatial strucutre of the most unstable mode:**. ![modes_2d](https://user-images.githubusercontent.com/8239041/105401841-9da64700-5bf4-11eb-9cf6-c7efb9fce62e.png)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1310:515,integrat,integrating,515,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1310,1,['integrat'],['integrating']
Deployability,"Both `IncompressibleModel` and `ShallowWaterModel` use the more general `model_forcing` now, but I had to refactor `regularize_forcing` a bit as it needs the `model_field_names` when constructing `Relaxation` forcings and `ContinuousForcing`s with field dependencies. Tests passed on Tartarus but might be good if @glwagner had a quick look to make sure it's okay.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1291#issuecomment-756838133:223,Continuous,ContinuousForcing,223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1291#issuecomment-756838133,1,['Continuous'],['ContinuousForcing']
Deployability,Boundary condition API kernels should use dynamic launch configuration,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/363:57,configurat,configuration,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/363,1,['configurat'],['configuration']
Deployability,Build and test but do not deploy docs on Buildkite,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1018:26,deploy,deploy,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1018,1,['deploy'],['deploy']
Deployability,Bump a patch release?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3487#issuecomment-1985947162:7,patch,patch,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3487#issuecomment-1985947162,2,"['patch', 'release']","['patch', 'release']"
Deployability,Bump patch release,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3729:5,patch,patch,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3729,2,"['patch', 'release']","['patch', 'release']"
Deployability,Bump patch release?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1868239088:5,patch,patch,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1868239088,2,"['patch', 'release']","['patch', 'release']"
Deployability,Bump patch release?; Perhaps a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069647760:5,patch,patch,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069647760,2,"['patch', 'release']","['patch', 'release']"
Deployability,Bump patch version before merging so that we can tag a release?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2687#issuecomment-1198703652:5,patch,patch,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2687#issuecomment-1198703652,2,"['patch', 'release']","['patch', 'release']"
Deployability,Bump v0.36.0 (JOSS release),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/916:19,release,release,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/916,1,['release'],['release']
Deployability,"Bumps [julia-actions/setup-julia](https://github.com/julia-actions/setup-julia) from 1 to 2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/julia-actions/setup-julia/releases"">julia-actions/setup-julia's releases</a>.</em></p>; <blockquote>; <h2>v2.0.0 - Update to Node20</h2>; <h2>What's Changed</h2>; <ul>; <li>update to node20 by <a href=""https://github.com/ranocha""><code>@​ranocha</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/209"">julia-actions/setup-julia#209</a></li>; </ul>; <p>Note the rationale for the breaking change was discussed in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/209"">julia-actions/setup-julia#209</a></p>; <h3>Dependencies and misc</h3>; <ul>; <li>Bump nock from 13.5.1 to 13.5.4 by <a href=""https://github.com/dependabot""><code>@​dependabot</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/224"">julia-actions/setup-julia#224</a></li>; <li>Bump <code>@​types/semver</code> from 7.5.6 to 7.5.8 by <a href=""https://github.com/dependabot""><code>@​dependabot</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/222"">julia-actions/setup-julia#222</a></li>; <li>Bump <code>@​types/node</code> from 20.11.16 to 20.11.30 by <a href=""https://github.com/dependabot""><code>@​dependabot</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/226"">julia-actions/setup-julia#226</a></li>; <li>Bump the version number to <code>2.0.0</code> in <code>package.json</code> and <code>package-lock.json</code> by <a href=""https://github.com/DilumAluthge""><code>@​DilumAluthge</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/228"">julia-actions/setup-julia#228</a></li>; </ul>; <h2>New Contributors</h2>; <ul>; <li><a href=""https://github.com/ranocha""><code>@​ranocha</code></a> made their first contribution in <a href=""https://redirect.github.com/julia-actions/s",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3544:114,Release,Release,114,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3544,5,"['Release', 'Update', 'release', 'update']","['Release', 'Update', 'releases', 'update']"
Deployability,Bumps patch release after bug fixes via #1744,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1973:6,patch,patch,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1973,2,"['patch', 'release']","['patch', 'release']"
Deployability,Buoyancy update in linear time.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/172:9,update,update,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/172,1,['update'],['update']
Deployability,But I wonder also if we should add a feature to `BackgroundFields` that allows this to be toggled on and off,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2201445635:90,toggle,toggled,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2201445635,1,['toggle'],['toggled']
Deployability,"But `Δt = clock.time - wta.previous_collection_time ` is not the simulation time-step. It's the time increment between collections. We can change the symbol to `T = clock.time - wta.previous_collection_time` to help clarify this. Moreover, do you think that a small error in `T` would cause the kind of issue that @liuchihl is seeing? It looks to me like the average is not calculated at all --- rather than having a small round-off error. . PS I updated your comment to show more of the code so that we could see explicitly the part of the code you were referring to. EDIT: and just to clarify the time increment between collections can be more than one time-step because we support strided averages (eg computing the averaged quantity less frequently than every time step).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2263780904:447,update,updated,447,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2263780904,1,['update'],['updated']
Deployability,"But still, I think that you first derive the equation for \eta (after the time discretization) and then integrate in volume. In the end it is still a derivative of a derivative (Following the docs from mitgcm https://mitgcm.readthedocs.io/en/latest/algorithm/algorithm.html). So the \partial x on the LHS should be correct. You 'll see that the term that doesn't cancel (as you derived above) is contained in the integral of the area. On the other hand, I think we should change the batropic pressure gradient correction",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2475#issuecomment-1109623966:104,integrat,integrate,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2475#issuecomment-1109623966,1,['integrat'],['integrate']
Deployability,"But this is confusing notation... can we update to use the triple notation that we use throughout the code?. The confusion is that MITgcm uses the notation `ΔzF` to denote the _difference of_ `zF`. This is _opposite_ the meaning of our superscripts, which indicate the _location_. In our notation `Δz^aaf` is the _difference of_ `z^aac`. . I suggest we just avoid these capital letters and use only superscripts...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2150#issuecomment-1012204391:41,update,update,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2150#issuecomment-1012204391,1,['update'],['update']
Deployability,CATKE and GM in a near-global 1 degree simulation + updates Ri-based vertical diffusivity,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2786:52,update,updates,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2786,1,['update'],['updates']
Deployability,"Call them system tests, model verification tests, or end-to-end tests, that's what this PR is about. Currently a work in progress as I hit a roadblock with checkpointing so **the tests will fail**. See #141. BUT, for testing we can just set `model.forcings = nothing` and manually reconstruct the forcings as we know them. Tests implemented so far:; 1. Checkpointing integration test: Run two coarse rising thermal bubble simulations and make sure that when restarting from a checkpoint, the restarted simulation matches the non-restarted simulation numerically.; 2. NetCDF output integration test: Run a coarse thermal bubble simulation and save the output to NetCDF at the 10th time step. Then read back the output and test that it matches the model's state.; 3. Thermal bubble golden master test: Run the coarse thermal bubble simulation for 10 time steps and check that the model output matches a golden master output.; 4. Deep convection golden master test. @jm-c @christophernhill: do post any ideas for tests that should be implemented in this PR.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/140:367,integrat,integration,367,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/140,2,['integrat'],['integration']
Deployability,Can I bump the patch version and release a new version?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3235#issuecomment-1709338556:15,patch,patch,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3235#issuecomment-1709338556,2,"['patch', 'release']","['patch', 'release']"
Deployability,Can we resolve the conflicts? for `.buildkite/pipeline.yml` just accept all incoming changes from`main`. For the `interpolate.jl` I'm not sure what we want...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1442585957:46,pipeline,pipeline,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1442585957,1,['pipeline'],['pipeline']
Deployability,Can we update also cuda to the 3.12 version?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2775#issuecomment-1276358093:7,update,update,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2775#issuecomment-1276358093,1,['update'],['update']
Deployability,"Can we update the PR description to state this goal? ""This feature adds support for using a checkpoint file to initialize a model that contains additional passive tracers...""",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440485748:7,update,update,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440485748,1,['update'],['update']
Deployability,Can you tell me if you still get the same error in the latest tagged release or on master?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-826107695:69,release,release,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-826107695,1,['release'],['release']
Deployability,"Can you tell us a bit more about your system?. What is `versioninfo(verbose=true)` and `] status -m`?. Was there anything more printed above the message that precompilation; failed?. One thing you might want to try is using Julia 1.10, instead of 1.9, but; right now I don't have information to pinpoint what is causing the; segmentation fault. On Wed, Jul 17, 2024, 12:23 Logan Knudsen ***@***.***> wrote:. > Update: I have been able to reduce the error to be a procompiling error in; > oceananigans.jl:; >; > ERROR: LoadError: Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to ""/glade/u/home/knudsenl/.julia/compiled/v1.9/Oceananigans/jl_AMNEzH"".; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::IO, internal_stdout::IO, keep_loaded_modules::Bool); > @ Base ./loading.jl:2300; > [3] compilecache; > @ ./loading.jl:2167 [inlined]; > [4] _require(pkg::Base.PkgId, env::String); > @ Base ./loading.jl:1805; > [5] _require_prelocked(uuidkey::Base.PkgId, env::String); > @ Base ./loading.jl:1660; > [6] macro expansion; > @ ./loading.jl:1648 [inlined]; > [7] macro expansion; > @ ./lock.jl:267 [inlined]; > [8] require(into::Module, mod::Symbol); > @ Base ./loading.jl:1611; > in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:1; >; > I have been trying to make sure that everything is up to date, and I am; > running on Julia version 1.9.2. My code is just; >; > using Oceananingans; >; > as I have been trying to get the library to loas properly. Does anyone; > have any experience with this error or does it make things any clearer?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233710372>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AABDO2XAIMUIHCDCBIJA4NLZM2K75AVCNFSM6AAAAABK643UJWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDEMZTG4YTAMZXGI",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233731098:410,Update,Update,410,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233731098,1,['Update'],['Update']
Deployability,"Can you update the top-level description, and add a docstring for `Partition` with a few examples that enumerates the various possible syntaxes for common important cases?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3339#issuecomment-1783140367:8,update,update,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3339#issuecomment-1783140367,1,['update'],['update']
Deployability,Captures immersed boundary condition API #2437 docs update #2474,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2484:52,update,update,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2484,1,['update'],['update']
Deployability,"Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}, NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}) failed; KernelError: passing and using non-bitstype argument. Argument 13 to your kernel function is of type NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, which is not isbits:; .T is of type Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}} which is not isbits.; .field_dependencies is of type Tuple{Symbol} which is not isbits.; .1 is of type Symbol which is not isbits. Passing non-isbits types is only allowed if they they are unused by the kernel. Stacktrace:; [1] check_invocation(::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget,CUDA.CUDACompilerParams}, ::LLVM.Function) at /home/ptuckman/.julia/packages/GPUCompiler/4e9CU/src/validation.jl:75; [2] macro expansion at /home/ptuckman/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:240 [inlined]; [3] macro expansion at /home/ptuckman/.julia/packages/TimerOutputs",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:3352,Continuous,ContinuousForcing,3352,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}, NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}) failed; KernelError: passing and using non-bitstype argument. Argument 13 to your kernel function is of type NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, which is not isbits:; .T is of type Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}} which is not isbits.; .field_dependencies is of type Tuple{Symbol} which is not isbits.; .1 is of type Symbol which is not isbits. Passing non-isbits types is only allowed if they they are unused by the kernel. Stacktrace:; [1] check_invocation(::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget,CUDA.CUDACompilerParams}, ::LLVM.Function) at /home/ptuckman/.julia/packages/GPUCompiler/4e9CU/src/validation.j",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:3179,Continuous,ContinuousForcing,3179,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}, NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}) failed; KernelError: passing and using non-bitstype argument. Argument 13 to your kernel function is of type NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, which is not isbits:; .T is of type Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}} which is not isbits.; .field_dependencies is of type Tuple{Symbol} which is not isbits.; .1 is of type Symbol which is not isbits. Passing non-isbits types is only allowed if they they are unused by the kernel. Stacktrace:; [1] check_invoc",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:3006,Continuous,ContinuousForcing,3006,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"Center, Nothing, ImmersedBoundaryGrid{Float64, Flat, Periodic, Bounded, RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, GPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, CuArray{Float64, 2, CUDA.Mem.DeviceBuffer}}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity1), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:16275,Continuous,ContinuousBoundaryFunction,16275,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,Checkpoint is never created after upgrade (both with Julia 1.5 and 1.6),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1547:34,upgrade,upgrade,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1547,1,['upgrade'],['upgrade']
Deployability,Choose 2-4 examples that are always updated and improved.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/221:36,update,updated,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/221,1,['update'],['updated']
Deployability,Circulation and vorticity operators need to be updated at the cubed sphere corners,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1584:47,update,updated,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1584,1,['update'],['updated']
Deployability,"Closes #1995 and closes #1996. (I'm not sure when the bug was introduced, so I capped the version up to 3.3.6. Feel free to change if there's a newer version that's also safe.). Also we need to remember to remove this after the bug gets put into a tagged release. (Can we exclude only version 3.4.2 using compat?)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1997:255,release,release,255,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1997,1,['release'],['release']
Deployability,Closes #3309 . Breaking changes for 0.13 are listed here:. https://github.com/Alexander-Barth/NCDatasets.jl/releases/tag/v0.13.0,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3313:108,release,releases,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3313,1,['release'],['releases']
Deployability,"Closes https://github.com/CliMA/Oceananigans.jl/issues/3795 by changing the default configuration of `NonhydrostaticModel` to `hydrostatic_pressure_anomaly = CenterField(grid)`. The spurious large-scale flow is developed due to numerical noise in the buoyancy field when the hydrostatic pressure anomaly is treated explicitly. When hydrostatic pressure anomaly is computed using the implicit integral of the buoyancy field, no spurious kinetic energy is introduced.; Here's the MWE as in https://github.com/CliMA/Oceananigans.jl/issues/3795:; ```julia; using Oceananigans; using Oceananigans.Units; using SeawaterPolynomials; using SeawaterPolynomials.TEOS10; using Printf. eos = TEOS10.TEOS10EquationOfState(). arch = CPU(); grid = RectilinearGrid(CPU(), Float64,; topology = (Bounded, Flat, Bounded),; size = (100, 100),; halo = (4, 4),; x = (0, 100),; z = (-100, 0)). model = NonhydrostaticModel(; grid = grid,; buoyancy = SeawaterBuoyancy(),; advection = UpwindBiased(order=1),; timestepper = :RungeKutta3,; tracers = (:T, :S)). @inline T_initial(x, z) = 20; @inline S_initial(x, z) = 35; @inline w_initial(x, z) = rand() * 1e-6. set!(model, T=T_initial, S=S_initial, w=w_initial). u, v, w = model.velocities; T, S = model.tracers.T, model.tracers.S. KE = @at (Center, Center, Center) 0.5 * (u^2 + v^2 + w^2); KE_total = Field(Integral(KE)). simulation = Simulation(model, Δt=1e-3, stop_time=40days); wizard = TimeStepWizard(max_change=1.05, max_Δt=10minutes, cfl=0.6); simulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10)). wall_clock = [time_ns()]. function print_progress(sim); compute!(KE_total); @printf(""[%05.2f%%] i: %d, t: %s, wall time: %s, max(u): (%6.3e, %6.3e, %6.3e) m/s, max(T) %6.3e, max(S) %6.3e, Total KE %6.3e, next Δt: %s\n"",; 100 * (sim.model.clock.time / sim.stop_time),; sim.model.clock.iteration,; prettytime(sim.model.clock.time),; prettytime(1e-9 * (time_ns() - wall_clock[1])),; maximum(abs, sim.model.velocities.u),; maximum(abs, sim.model.velocities.v",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3796:84,configurat,configuration,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3796,1,['configurat'],['configuration']
Deployability,"Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/148?src=pr&el=h1) Report; > Merging [#148](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/148?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/068da17959c1e125e4d1f9e62f0e287370f4de71?src=pr&el=desc) will **increase** coverage by `0.05%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/148/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/148?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #148 +/- ##; ==========================================; + Coverage 65.97% 66.03% +0.05% ; ==========================================; Files 19 19 ; Lines 629 630 +1 ; ==========================================; + Hits 415 416 +1 ; Misses 214 214; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/148?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/148/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/148/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `80.76% <100%> (+0.76%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/148?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/148?src=pr&el=footer). Last update [068da17...bcfacda](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/148?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/148#issuecomment-475479721:1813,update,update,1813,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/148#issuecomment-475479721,2,['update'],['update']
Deployability,"Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/378?src=pr&el=h1) Report; > Merging [#378](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/378?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8c1c776b50df17ff10735e57488f22b20d455303?src=pr&el=desc) will **decrease** coverage by `0.05%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/378/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/378?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #378 +/- ##; ==========================================; - Coverage 78.37% 78.32% -0.06% ; ==========================================; Files 22 22 ; Lines 1244 1241 -3 ; ==========================================; - Hits 975 972 -3 ; Misses 269 269; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/378?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/378/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <100%> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/378/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.68% <100%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/378?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/378?src=pr&el=footer). Last update [8c1c776...3e13ace](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/378?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/378#issuecomment-525945184:1813,update,update,1813,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/378#issuecomment-525945184,1,['update'],['update']
Deployability,Completely trivial update to a comment about continguous CuArrays,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2561:19,update,update,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2561,1,['update'],['update']
Deployability,"Conditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, Nothing, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.DeviceMemory}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, var""#drag_v#12"", @NamedTuple{cᴰ::Float64}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity1)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, var""#immersed_drag_v#14"", @NamedTuple{cᴰ::Float64}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity2)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, w::Field{Center, Center, Face, Nothing, ImmersedBoundaryGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2428001700:43181,Continuous,ContinuousBoundaryFunction,43181,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2428001700,5,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Conditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, Nothing, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.DeviceMemory}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, var""#drag_u#11"", @NamedTuple{cᴰ::Float64}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, var""#immersed_drag_u#13"", @NamedTuple{cᴰ::Float64}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, v::Field{Center, Face, Center, Nothing, ImmersedBoundaryGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2428001700:39824,Continuous,ContinuousBoundaryFunction,39824,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2428001700,5,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Condition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}} which is not isbits.; .condition is of type Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}} which is not isbits.; .field_dependencies is of type Tuple{Symbol, Symbol} which is not isbits.; .1 is of type Symbol which is not isbits.; .2 is of type Symbol which is not isbits.; .bottom is of type BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}} which is not isbits.; .condition is of type Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}} which is not isbits.; .field_dependencies is of type Tuple{Symbol, Symbol} which is not isbits.; .1 is of type Symbol which is not isbits.; .2 is of type Symbol which is not isbits.; .top is of type BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:8169,Continuous,ContinuousBoundaryFunction,8169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Condition{Oceananigans.BoundaryConditions.Open, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity1)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.identity2)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(τᶻʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.identity3)}}}, Nothing, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}}}, ::Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{F",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:39613,Continuous,ContinuousBoundaryFunction,39613,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Condition{Oceananigans.BoundaryConditions.Open, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity1)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.identity2)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(τᶻʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.identity3)}}}, Nothing, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}}}, NamedTuple{(:b,), Tuple{Field{Center, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.Offset",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:56770,Continuous,ContinuousBoundaryFunction,56770,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Condition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Flux,Nothing},BoundaryCondition{Flux,Nothing}}}}},Field{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Flux,Nothing},BoundaryCondition{Flux,Nothing}}}}}}},NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},Oceananigans.Advection.CenteredSecondOrder,Oceananigans.Solvers.PressureSolver{Oceananigans.Solvers.HorizontallyPeriodic,GPU,NamedTuple{(:kx², :ky², :kz²),Tuple{CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3}}},CUDA.CuArray{Complex{Float64},3},NamedTuple{(:FFTxy!, :FFTz!, :IFFTxy!, :IF",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:29622,Continuous,ContinuousForcing,29622,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,3,['Continuous'],['ContinuousForcing']
Deployability,Confirmed and approved. Would be good to release a new version with this asap.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868927232:41,release,release,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868927232,1,['release'],['release']
Deployability,Continuous CPU + GPU benchmarks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/67:0,Continuous,Continuous,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/67,1,['Continuous'],['Continuous']
Deployability,Continuous boundary functions don't use grids' native coordinates,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3073:0,Continuous,Continuous,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3073,1,['Continuous'],['Continuous']
Deployability,ContinuousForcing doesn't compile when diffusivities is not `nothing`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1059:0,Continuous,ContinuousForcing,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1059,1,['Continuous'],['ContinuousForcing']
Deployability,Convergence test and validation experiment Buildkite pipeline,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1223:53,pipeline,pipeline,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1223,1,['pipeline'],['pipeline']
Deployability,Convergence tests pipeline takes several hours to finish,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1420:18,pipeline,pipeline,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1420,1,['pipeline'],['pipeline']
Deployability,"Cool. Getting to the finish line will be a bit of work I guess. I think we usually want to integrate downwards so that's annoying. Not sure if that exists exactly, or we have to implement some lazy version of `reverse` to achieve it",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3590#issuecomment-2098991202:91,integrat,integrate,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3590#issuecomment-2098991202,1,['integrat'],['integrate']
Deployability,Could be good to put together a benchmarking script for `ContinuousForcing` and `Relaxation` so that we can test ideas.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875598604:57,Continuous,ContinuousForcing,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875598604,1,['Continuous'],['ContinuousForcing']
Deployability,Could we have a patch release soon so that this fix gets out?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3161#issuecomment-1623532631:16,patch,patch,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3161#issuecomment-1623532631,2,"['patch', 'release']","['patch', 'release']"
Deployability,"Coverage Diff @@; ## master #1083 +/- ##; ==========================================; + Coverage 56.76% 56.79% +0.03% ; ==========================================; Files 161 161 ; Lines 3793 3796 +3 ; ==========================================; + Hits 2153 2156 +3 ; Misses 1640 1640 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `80.00% <ø> (ø)` | |; | [src/TimeSteppers/update\_state.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy91cGRhdGVfc3RhdGUuamw=) | `87.50% <0.00%> (ø)` | |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `87.93% <100.00%> (+0.21%)` | :arrow_up: |; | [src/TimeSteppers/quasi\_adams\_bashforth\_2.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9xdWFzaV9hZGFtc19iYXNoZm9ydGhfMi5qbA==) | `76.31% <100.00%> (+0.64%)` | :arrow_up: |; | [src/TimeSteppers/runge\_kutta\_3.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9ydW5nZV9rdXR0YV8zLmps) | `79.16% <100.00%> (+0.29%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083?src=pr&el=footer). Last update [e2c1ee4...6dc402c](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1083#issuecomment-713749219:2412,update,update,2412,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1083#issuecomment-713749219,1,['update'],['update']
Deployability,Create central-pipeline.yml and add bors capability,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1962:15,pipeline,pipeline,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1962,1,['pipeline'],['pipeline']
Deployability,"Currently it is not generically possible to call. ```julia; fill_halo_regions!(field); ```. Part of this is trivial as noted in #969. But another part is that boundary conditions on fields can depend on other _other_ fields, to which `field` contains no reference. We allow field boundary conditions to depend on anything in `state(model)`, which includes the model velocity fields, tracer fields, pressure fields, and diffusivities. Because references to `state(model)` are required to fill halo regions in general, we are unable to fill halo regions prior to computing an `AveragedField` (for example). We may not _want_ to solve this problem because it require too-invasive changes. For example, we certainly want to support the concept of fields that are independent of other fields. General support for interdependent fields may be too difficult. Some possible solutions:. * an ""optional"" `state` property of `Field` which is set to `nothing` by default. We can ensure that `state` is properly determined in the constructor for `IncompressibleModel` for the model fields. * an ""optional"" `state` or `fields` property within each individual boundary condition (with a similar function as the optional property above). This property could be activated only for boundary conditions that need it (currently, only discrete form boundary conditions, though this could be extended to continuous form boundary conditions in the future via #897). Solving this will simplify time-stepping code a bit and permit simpler halo region filling via `fill_halo_regions!(field)` with no additional arguments.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/971:1382,continuous,continuous,1382,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/971,1,['continuous'],['continuous']
Deployability,"Currently the example tests are ""broken"", i.e. not run because having PyPlot as a dependency caused the Travis CI pipeline to frequently fail for different reasons. I still really like matplotlib and PyPlot but after playing around with Plots.jl I think it'll be worth switching over. As it doesn't get installed through conda it should be more stable on Travis. Would be really cool if Documenter.jl works with Plots.jl [animations](http://docs.juliaplots.org/latest/animations/). I'll give it a try.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/536:114,pipeline,pipeline,114,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/536,2,"['install', 'pipeline']","['installed', 'pipeline']"
Deployability,"Cut cells use piecewise linear representations of bathymetry (as opposed to full or partial cells which use piecewise constant ones). Here’s a tentative work plan for implementing cut cells:. 1. Develop the following test cases: . (a) Tracer advection with no momentum on a seamount ([Adcroft](https://journals.ametsoc.org/view/journals/mwre/125/9/1520-0493_1997_125_2293_rotbsc_2.0.co_2.xml) or [Schär](https://journals.ametsoc.org/view/journals/mwre/130/10/1520-0493_2002_130_2459_antfvc_2.0.co_2.xml) configuration); ; (b) Internal wave or overflow with momentum;; ; Run these test cases for full and partial cells. As suggested by @jm-c, compare a simulation using low vertical resolution (~10 vertical layers) and partial cells with one using high vertical resolution (~500 vertical layers) and full cells at the same horizontal resolution (to verify the effectiveness of partial cells). To ensure that a stratified ocean remains at rest, implement the technique in [Lin](https://rmets.onlinelibrary.wiley.com/doi/abs/10.1002/qj.49712354214?casa_token=4s6PejUyFLMAAAAA:RtWYxrnbDlgN8ZzMepSndBPomZX_nlXMFUWhU5nCMDE6qeyN2fWb5fb2QxQFUPYTCqZVjzG2jtpGPFs) for partial cells. . 2. Implement two-dimensional cut cells in the y-z plane:. (a) Implement `CutCellBottom` in ImmersedBoundary module similar to PartialCellBottom;; (b) Implement a special compute_w_from_continuity for `CutCellBottom`. ; https://github.com/CliMA/Oceananigans.jl/blob/8e6b5cd540b7a710955edf9846959966efbb6ea0/src/Models/HydrostaticFreeSurfaceModels/compute_w_from_continuity.jl#L15-L16. (c) Implement the ""algorithm"" for partial cells to compute the hydrostatic pressure for `CutCellBottom`.; https://github.com/CliMA/Oceananigans.jl/blob/8e6b5cd540b7a710955edf9846959966efbb6ea0/src/Models/NonhydrostaticModels/update_hydrostatic_pressure.jl#L24. 3. Extend the cut cell implementation to 3D and consider improving the pressure gradient calculation. . # References. [Advection on Cut-Cell Grids for an Idealized Mountain of Cons",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3123:504,configurat,configuration,504,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123,1,['configurat'],['configuration']
Deployability,"Dear Oceananigans team,. I am new to Julia and Oceananigans.; I installed Julia version 1.6.2 (2021-07-14) on Ubuntu 20.04 LTS, then Oceananigans v0.62.1 as instructed. I am interested in ""stratified plane Couette flow"" .; When I run the case using ""julia run_stratified_couette_flow_simulations.jl"", I am having following error;. **""; ERROR: LoadError: UndefVarError: Value not defined; Stacktrace:; [1] simulate_stratified_couette_flow(; Nxy::Int64, Nz::Int64, arch::GPU, h::Int64, U_wall::Int64, Re::Int64, Pr::Float64, Ri::Int64, Ni::Int64, end_time::Int64); @ Main ~/Desktop/stratified_couette_flow/stratified_couette_flow.jl:103; [2] top-level scope; @ ~/Desktop/stratified_couette_flow/run_stratified_couette_flow_simulations.jl:3; in expression starting at /home/ilyas/Desktop/stratified_couette_flow/run_stratified_couette_flow_simulations.jl:3; ""****. It complaints about undefined Boundary Condition Value (stratified_couette_flow.jl:103).; Can you help me to fix it?. Please forgive me if I missed something obvious or made a trivial mistake.; Thanks,. Ilyas",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1981:64,install,installed,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1981,1,['install'],['installed']
Deployability,"Definitely agree with everything @glwagner said!. > I am very curious to learn about what is currently being worked on. I can share a bit about what I've been working on (and hope to work on). Right now I'm almost done adding some support for Lagrangian particle tracking (PRs #1090 and #1091). After that I'm hoping to upgrade the pressure solver to use 1D FFTs and DCTs for the CPU and GPU (#586, #1007). This would allow us to support all possible topologies on the GPU but might require some playing around with the CuFFT library (see https://github.com/JuliaGPU/CUDA.jl/issues/119). So if you know someone who's interested in FFTs and GPUs (or interested in learning about them!), this might be useful problem to work on! I think some other members of the Julia community would benefit from figuring this out as well. Also hoping to revisit trying to support distributed parallelism with MPI (#590). So if there's someone interested in the nuts and bolts of distributed parallelism, might be great to work on this together!. We also have an early/experimental compressible version of Oceananigans.jl (see #1079 and https://github.com/ali-ramadhan/Atmosfoolery.jl) if you guys are interested in compressible fluid dynamics. > (and I can look at the issues for that I suppose). We should definitely clean those up! We have a ""good first issue"" tag that should be useful in these situations but we should use the tag more often.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724264485:320,upgrade,upgrade,320,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724264485,1,['upgrade'],['upgrade']
Deployability,"Definitely in favor of an MPI example!. I think the point is that the script is not an example now, so it could make sense to put the script in `validation/` until it's ready / someone has time to write the example in Literate style and built into the documentation, and perhaps implement the suggested updates to the physics.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1658#issuecomment-842408398:303,update,updates,303,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1658#issuecomment-842408398,1,['update'],['updates']
Deployability,"Definitely looks good! I guess it belongs more in `validation/`?. We can eventually run it as part of the validation pipeline to generate the plot every night and make sure everything still converges. Also noticed that `examples/Inertial_Instability_2D_old.mp4` was somehow included in this PR (I thought `*.mp4` was in `.gitignore`). I think we'll want to remove it then make sure to ""squash and merge"" this PR so the mp4 file doesn't enter git history (and increase the repo size).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1648#issuecomment-839116955:117,pipeline,pipeline,117,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1648#issuecomment-839116955,1,['pipeline'],['pipeline']
Deployability,Definitely new release after this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773654354:15,release,release,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773654354,1,['release'],['release']
Deployability,Delete leftover JLD2 files before deploying docs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/558:34,deploy,deploying,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/558,1,['deploy'],['deploying']
Deployability,Delete validation-pipeline.yml,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3176:18,pipeline,pipeline,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3176,1,['pipeline'],['pipeline']
Deployability,Deploy docs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1940:0,Deploy,Deploy,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1940,1,['Deploy'],['Deploy']
Deployability,Deploy docs from Buildkite,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1209:0,Deploy,Deploy,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1209,1,['Deploy'],['Deploy']
Deployability,Deploy docs with `forcepush = true`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2243:0,Deploy,Deploy,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2243,1,['Deploy'],['Deploy']
Deployability,Deploy documentation through Buildkite.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1051:0,Deploy,Deploy,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1051,1,['Deploy'],['Deploy']
Deployability,Deploy of gh-pages at OceananigansDocumentation repo seems OK now. I think it was just a glitch...; https://github.com/CliMA/OceananigansDocumentation/actions/runs/6109843276. But the tags don't seem to push docs in the repo. I believe it has something to do with buildkite settings...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3191#issuecomment-1711356979:0,Deploy,Deploy,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3191#issuecomment-1711356979,1,['Deploy'],['Deploy']
Deployability,Deploys docs to clima.github.com/OceananigansDocumentation,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/801:0,Deploy,Deploys,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/801,1,['Deploy'],['Deploys']
Deployability,Do not install/load CUDA packages if no GPU is detected.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/178:7,install,install,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/178,1,['install'],['install']
Deployability,"Do we need to use `peripheral_node` (defined in `Grids`) in `pressure_correct_velocities` kernel? eg here:. https://github.com/CliMA/Oceananigans.jl/blob/ddf322f7faa47980bfe4de5bbd203696f419f9e2/src/Models/NonhydrostaticModels/pressure_correction.jl#L31-L37. perhaps filling the pressure halo regions ensures this works (eg the boundary-normal velocities are not updated, because `pNHS` has zero gradient across `Bounded` boundaries)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2145549952:363,update,updated,363,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2145549952,1,['update'],['updated']
Deployability,"Do we want to update the one and two dimensional examples to include `Flat`? . If not then we can ignore this PR. . If yes, then this is my attempt to do so. The good news is that most of the one and two dimensional examples work very easily. Unfortunately, a couple of them, geostrophic adjustment and convecting plankton, do not. I don't know why at the moment and these should certainly be fixed before a merge happens. If it happens. The error get I get is `NaN` after (I believe) the first interval. So I suspect one of the tendencies is not being computed correctly.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1513:14,update,update,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1513,1,['update'],['update']
Deployability,"Do you want to add this here: https://github.com/CliMA/Oceananigans.jl/wiki/Installation-and-getting-started-with-Oceananigans ? . Let's phase these ""extended instructions"" out of the Documenter-based docs?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2472#issuecomment-1109068285:76,Install,Installation-and-getting-started-with-Oceananigans,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2472#issuecomment-1109068285,1,['Install'],['Installation-and-getting-started-with-Oceananigans']
Deployability,"Do you want to fix it? Then you get full credit for it 😄 Note that your ""y'all"" includes _you_! We're all developing this... PS this is a syntax change in Oceananigans, not a Julia update. We made it so that `Flat` directions are always omitted from background fields, forcing, initial conditions, etc (though there is still a bit of work to do with particles).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1866992025:181,update,update,181,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1866992025,1,['update'],['update']
Deployability,Docker file for easy installation and CI testing,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/151:21,install,installation,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/151,1,['install'],['installation']
Deployability,Docs don't build for tagged releases,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3191:28,release,releases,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3191,1,['release'],['releases']
Deployability,Docs/Bibliography patch,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1721:18,patch,patch,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1721,1,['patch'],['patch']
Deployability,Docstring did not match the actual constructor. They do now. @suyashbire1 Do you think `clobber` should be true or false by default?. Also updated the docstring to make it clear that `outputs` needs to be a `Dict` for now. Resolves #553,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/556:139,update,updated,139,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/556,1,['update'],['updated']
Deployability,Documenter.jl uses KaTeX by default but MathJax3 might be better for us. Will wait for Buildkite to build and deploy the docs to see 🤞 . Resolves #528 (hopefully),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1530:110,deploy,deploy,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1530,1,['deploy'],['deploy']
Deployability,"Does anyone know how I can add Codecov coverage in our [buildkite pipeline](https://github.com/CliMA/Oceananigans.jl/blob/ncc/adds-codecov/.buildkite/pipeline.yml)?. From what I read at [`JuliaGPU/buildkite/README`](https://github.com/JuliaGPU/buildkite/blob/main/README.md) here, I get that I have to add:. ```Julia; plugins:; - JuliaCI/julia#v1:; version: ""1""; - JuliaCI/julia-test#v1: ~; - JuliaCI/julia-coverage#v1:; codecov: true; ```. in *every* step in our buildkite pipeline. Is this correct?. cc @maleadt, @vchuravy",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063309592:66,pipeline,pipeline,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063309592,3,['pipeline'],['pipeline']
Deployability,"Does it have to do with output? Do you know what the time-step is when this happens? I'm wondering if it has to do with using a very small time-step, leading to a round-off error issue. That would also explain why it doesn't affect dynamics, because huge pressure gradient integrated over a machine epsilon duration may not have an impact.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3593#issuecomment-2102989649:273,integrat,integrated,273,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3593#issuecomment-2102989649,1,['integrat'],['integrated']
Deployability,"Does it need to be maintained in any way other than keeping that page up and making sure that it renders fine? If that's all it needs, then I'd say it's worth keeping. Or are you suggesting that we keep re-running these tests with every minor Oceananigans release or something?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872331397:256,release,release,256,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872331397,1,['release'],['release']
Deployability,Don't forget to rename the release with an emoji. Each release gets an emoji!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1343#issuecomment-775390912:27,release,release,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1343#issuecomment-775390912,2,['release'],['release']
Deployability,Don't forget to update the title of the PR,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3235#issuecomment-1709385664:16,update,update,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3235#issuecomment-1709385664,1,['update'],['update']
Deployability,Dynamically install packages like Plots.jl and ArgParse.jl for examples.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/195:12,install,install,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/195,1,['install'],['install']
Deployability,"EDIT: there were a number of mistakes in the original post here. I've updated it. As for the _profiles_, there are some interesting differences between the ""Brevik"" and ""Lenain"" formulations. In particular, the Lenain profile depends on the _air_ friction velocity `u★`, while the Brevik does not. This is because Lenain divide the spectrum into saturation and equilibrium ranges, and the transition wavenumber between the two _depends on the friction velocity_ (it scales with `1 / u★^2`. Lenain also introduce an ""isotropic wavenumber"", which is an upper cutoff above which short waves do not contribute to the net Stokes drift. This isotropic wavenumber also scales with `1 / u★^2`. In all cases the Lenain model has strong shear at the surface. The effect is less pronounced on a (relatively coarse) grid with dz = 1 m, but still significant. The shear is also not monotonic in `u★`, possibly because the lower-frequency components start to contribute more at higher wind speeds, reducing the shear relative to the surface value of the Stokes drift. Check out the results:. ![image](https://user-images.githubusercontent.com/15271942/156649792-02639f67-5d0d-47f3-93f7-e1faa7ad92f9.png). Code:. ```julia; using SpecialFunctions; using GLMakie; using Printf. # Parameters; Cᵝ = 0.105 # Toba's constant; Cʳ = 9.7e-3 # Transition wavenumber parameter, Lenain and Pizzo 2020 eq 4; Cⁱ = 0.072 # Cutoff / isotropic wavenumber parameter; # exp(π/2 - θ₀) / γ) from Lenain and Pizzo 2020 Appendix A; Cᴮ = 7e-3 # Saturation constant; g = 9.81 # m s⁻², gravitational acceleration; ρʷ = 1024 # kg m⁻³, water density; ρᵃ = 1.225 # kg m⁻³, air density. #####; ##### Stokes drift profile from Brevik et al 2016; #####. T₁(k, z) = exp(2k * z); T₂(k, z) = sqrt(2π * k * abs(z)) * erfc(sqrt(2k * abs(z))); brevik(k, z) = T₁(k, z) - T₂(k, z). #####; ##### Stokes drift profile from Lenain and Pizzo 2020; #####. kⁿ(u★) = Cʳ * g / u★^2 # Transition wavenumber; kⁱ(u★) = Cⁱ * g / u★^2 # Isotropic wavenumber / upper wav",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2290#issuecomment-1058221264:70,update,updated,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2290#issuecomment-1058221264,1,['update'],['updated']
Deployability,Employ new halo-filling functions to update halos of prognostic variables on the cubed sphere,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3570:37,update,update,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3570,1,['update'],['update']
Deployability,Ensure that all `.jld2`/`.nc` files are deleted before docs deployment,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3109:60,deploy,deployment,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3109,1,['deploy'],['deployment']
Deployability,"EquationOfState{Float64},Nothing,Float64}, ::Nothing, ::AnisotropicDiffusivity{Float64,Float64,Float64,NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}}}, ::NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}, ::Nothing, ::NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, ::Clock{Float64}) at /home/ptuckman/.julia/packages/Oceananigans/KJCVx/src/TimeSteppers/time_stepping_kernels.jl:18; [22] calculate_tendencies!(::NamedTuple{(:u, :v, :w, :T),NTuple{4,OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::NamedTuple{(:pHY′, :pNHS),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:20113,Continuous,ContinuousForcing,20113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,Error in update,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1468:9,update,update,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1468,1,['update'],['update']
Deployability,Error tagging new release,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/87:18,release,release,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/87,2,['release'],['release']
Deployability,"Excellent advice @navidcy , I will probably do just that. I do install it on my ubuntu machine but suppose I need to learn to install it for a user only. A good thing to learn.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1468#issuecomment-799894716:63,install,install,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1468#issuecomment-799894716,4,['install'],['install']
Deployability,Explicit install of deps in Examples,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1184:9,install,install,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1184,1,['install'],['install']
Deployability,FYI: This changed the compat entry only. Didn’t update the SeawaterPolynomials version.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2777#issuecomment-1279915232:48,update,update,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2777#issuecomment-1279915232,1,['update'],['update']
Deployability,"Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}, NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}) failed; KernelError: passing and using non-bitstype argument. Argument 13 to your kernel function is of type NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, which is not isbits:; .T is of type Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}} which is not isbits.; .field_dependencies is of type Tuple{Symbol}",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:2833,Continuous,ContinuousForcing,2833,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,Faster model with dynamic launch configuration by @maleadt,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/302:33,configurat,configuration,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/302,1,['configurat'],['configuration']
Deployability,"Finally all tests pass 🎉 Thanks @navidcy and @vchuravy for all your help!. @glwagner Let me know when it would be a good time to merge this PR and tag a new release. Ran the incompressible model benchmarks and in general it seems that with Julia 1.6 Oceananigans allocates more memory and is a bit slower on the CPU but a bit faster on the GPU. # Quick benchmark. ## Julia 1.6. ```; Oceananigans v0.57.2; Julia Version 1.6.1; Commit 6aaedecc44 (2021-04-23 05:59 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); GPU: TITAN V; ```. ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 4.996 ms │ 5.047 ms │ 5.113 ms │ 5.770 ms │ 1.77 MiB │ 2301 │ 10 │; │ CPU │ Float64 │ 64 │ 34.951 ms │ 35.967 ms │ 36.414 ms │ 41.417 ms │ 1.77 MiB │ 2301 │ 10 │; │ CPU │ Float64 │ 128 │ 301.074 ms │ 301.964 ms │ 302.498 ms │ 307.989 ms │ 1.77 MiB │ 2301 │ 10 │; │ CPU │ Float64 │ 256 │ 2.894 s │ 2.895 s │ 2.895 s │ 2.896 s │ 1.77 MiB │ 2301 │ 2 │; │ GPU │ Float64 │ 32 │ 2.859 ms │ 2.923 ms │ 3.025 ms │ 3.987 ms │ 2.80 MiB │ 6914 │ 10 │; │ GPU │ Float64 │ 64 │ 2.912 ms │ 3.101 ms │ 3.308 ms │ 5.368 ms │ 2.78 MiB │ 6993 │ 10 │; │ GPU │ Float64 │ 128 │ 4.894 ms │ 5.019 ms │ 5.360 ms │ 8.565 ms │ 2.80 MiB │ 8667 │ 10 │; │ GPU │ Float64 │ 256 │ 33.569 ms │ 36.266 ms │ 36.029 ms │ 36.883 ms │ 3.24 MiB │ 37307 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴──────────┴────────┴─────────┘; ```. ## Julia 1.5. ```; Oceananigans v0.57.2; Julia Version 1.5.2; Commit 539f3ce943 (2020-09-23 23",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-843636118:157,release,release,157,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-843636118,1,['release'],['release']
Deployability,"FittedBottom{OffsetArrays.OffsetMatrix{Float64, CuDeviceMatrix{Float64, 1}}}, Nothing}, CenteredSecondOrder, Nothing, Nothing, Nothing, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, OffsetArrays.Offset",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:3296,Continuous,ContinuousBoundaryFunction,3296,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,Fix `pipeline.yml`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1066:5,pipeline,pipeline,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1066,1,['pipeline'],['pipeline']
Deployability,Fix bug for horizontal diffusivity with Flat horizontal dimension + updates baroclinic adjustment validation script,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2284:68,update,updates,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2284,1,['update'],['updates']
Deployability,Fix deploying docs to OceananigansDocumentation,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/804:4,deploy,deploying,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/804,1,['deploy'],['deploying']
Deployability,Fix implicit type conversions in Adams-Bashforth update kernel,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/252:49,update,update,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/252,1,['update'],['update']
Deployability,Fix location of Integrated areas derivatives in the PCG solver,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2710:16,Integrat,Integrated,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2710,1,['Integrat'],['Integrated']
Deployability,Fixes #655. `convert_to_arch` was defined in two places. Will release patch v0.24.1 once merged.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/656:62,release,release,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/656,2,"['patch', 'release']","['patch', 'release']"
Deployability,Fixes off-by-one indexing error in hydrostatic pressure integrat…,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/612:56,integrat,integrat,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/612,1,['integrat'],['integrat']
Deployability,Fixing `AveragedField` and implementing `IntegratedField` using `GridMetricOperation`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2051:41,Integrat,IntegratedField,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2051,1,['Integrat'],['IntegratedField']
Deployability,"Float32 global simulations are near!. This is the u-velocity at the surface of a simple baroclinic adjustment case: left -> Float64, center -> Float32 right -> difference (u64 - u32). https://github.com/CliMA/Oceananigans.jl/assets/33547697/4ed0e547-416f-4597-8e2c-a38de7cb9fa5. integrated KE energy time series. ![ke](https://github.com/CliMA/Oceananigans.jl/assets/33547697/941883a9-84a8-4e92-90b0-277fdc2a2063). more in-depth statistics from @milankl incoming",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3212#issuecomment-1670259168:279,integrat,integrated,279,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3212#issuecomment-1670259168,2,['integrat'],['integrated']
Deployability,"Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Float64, typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.identity5), ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, Float64}}}}}}, NamedTuple{(:u, :v, :w, :b), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:H, :D, :σ, :sp_length, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Int64, Float64, Float64, Float64}}, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:H, :D, :σ, :sp_length, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Int64, Float64, Float64, Float64}}, typeof(forc_v), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:H, :D, :σ, :sp_length, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Int64, Float64, Float64, Float64}}, typeof(forc_w), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:H, :D, :σ, :sp_length, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Int64, Float64, Float64, Float64}}, typeof(forc_b), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}}}, Field{Center, Center, Cent",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:62924,Continuous,ContinuousForcing,62924,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,2,['Continuous'],['ContinuousForcing']
Deployability,Following the discussion on testing infrastructure from a long time ago (PR #139) it would be good to convert any verification tests that result from #346 into an actual end-to-end test of the model. Not sure how the comparison with MITgcm would be implemented but maybe the others are good enough. `test/verification/` might be a good directory for them?. They can be run separately (separate pipeline) so they don't have to run quickly and can take a while so they can be comprehensive.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/347:394,pipeline,pipeline,394,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/347,1,['pipeline'],['pipeline']
Deployability,Following the reversal of the k index (PR #462) we need to regenerate all regression test data to correspond to the new convention. This PR does that. Had to update some of the tests as the output data format has changed (e.g. now has halos) and was originally generated a long time ago. I also increased code reuse among the regression tests for summarizing the result of each regression test. This PR is part of #471,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/526:158,update,update,158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/526,1,['update'],['update']
Deployability,"For a single gaussian vortex in geostrophic balance integrated to `t=10` the results are the following (`N^2 = 64^2`):. ```; ╭──────────────┬───────┬─────────────┬───────────────────┬─────────────┬───────────────────╮; │ Formulation │ Order │ L₂ error(h) │ L₂ error(u or uh) │ L∞ error(h) │ L∞ error(u or uh) │; ├──────────────┼───────┼─────────────┼───────────────────┼─────────────┼───────────────────┤; │ Conservative │ 3 │ 1.66e-03 │ 9.43e-03 │ 5.05e-02 │ 3.86e-01 │; │ VI_Vorticity │ 3 │ 6.80e-04 │ 2.50e-03 │ 1.63e-02 │ 8.11e-02 │; │ VI_Velocity │ 3 │ 6.20e-04 │ 2.30e-03 │ 1.49e-02 │ 7.33e-02 │; │ Conservative │ 5 │ 1.63e-03 │ 9.03e-03 │ 4.95e-02 │ 3.73e-01 │; │ VI_Vorticity │ 5 │ 5.30e-04 │ 1.95e-03 │ 1.03e-02 │ 5.63e-02 │; │ VI_Velocity │ 5 │ 4.93e-04 │ 1.94e-03 │ 9.35e-03 │ 5.04e-02 │; │ Conservative │ 7 │ 1.63e-03 │ 8.87e-03 │ 4.93e-02 │ 3.67e-01 │; │ VI_Vorticity │ 7 │ 4.99e-04 │ 1.86e-03 │ 9.17e-03 │ 5.24e-02 │; │ VI_Velocity │ 7 │ 4.84e-04 │ 1.86e-03 │ 8.93e-03 │ 4.93e-02 │; │ Conservative │ 9 │ 1.64e-03 │ 8.63e-03 │ 4.96e-02 │ 3.62e-01 │; │ VI_Vorticity │ 9 │ 4.66e-04 │ 1.73e-03 │ 7.81e-03 │ 4.52e-02 │; │ VI_Velocity │ 9 │ 4.55e-04 │ 1.74e-03 │ 7.57e-03 │ 4.61e-02 │; ╰──────────────┴───────┴─────────────┴───────────────────┴─────────────┴───────────────────╯; ```. So, indeed, conservative formulation is not as good as the vector invariant formulation (at least in this case), especially when looking at momentum. . @francispoulin the resolution of the figures above is 400^2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2615#issuecomment-1164692715:52,integrat,integrated,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2615#issuecomment-1164692715,1,['integrat'],['integrated']
Deployability,For example if you updated Oceananigans.jl from a version `0.X.any` to a version `0.X+1.any` then there will be breaking changes.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2077#issuecomment-975486083:19,update,updated,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2077#issuecomment-975486083,1,['update'],['updated']
Deployability,"For future reference, I believe that updating the ssh deploy keys requires two things:. 1. Access to tartarus; 2. Admin privileges on the documentation repo, https://github.com/CliMA/OceananigansDocumentation. The [`Documenter.jl` documentation for generating deploy keys](https://juliadocs.github.io/Documenter.jl/stable/man/hosting/#travis-ssh) reads confusingly because we don't use Travis CI, but I do think we need to do something like what's outlined.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1909#issuecomment-899744147:54,deploy,deploy,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1909#issuecomment-899744147,2,['deploy'],['deploy']
Deployability,"For run, I just ran `barotropic_gyre.jl` found [here](https://github.com/CliMA/Oceananigans.jl/blob/main/validation/barotropic_gyre/barotropic_gyre.jl). The simulation part ran nicely but when it came to visualization I got the following error. I guess the plotting needs to be updated?. ```; ERROR: LoadError: LoadError: setting show_axis for scene via plot attribute not supported anymore; Stacktrace:; [1] error(s::String); @ Base ./error.jl:33; [2] plot!(scene::Scene, P::Type{Combined{Makie.wireframe, Tuple{Sphere{Float32}}}}, attributes::Attributes, input::Tuple{Observable{Sphere{Float32}}}, args::Observable{Tuple{Sphere{Float32}}}); @ Makie ~/.julia/packages/Makie/umL6V/src/interfaces.jl:399; [3] plot!(scene::Scene, P::Type{Combined{Makie.wireframe, ArgType} where ArgType}, attributes::Attributes, args::Sphere{Float32}; kw_attributes::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Makie ~/.julia/packages/Makie/umL6V/src/interfaces.jl:320; [4] plot!; @ ~/.julia/packages/Makie/umL6V/src/interfaces.jl:288 [inlined]; [5] plot!(lscene::LScene, P::Type{Combined{Makie.wireframe, ArgType} where ArgType}, attributes::Attributes, args::Sphere{Float32}; kw_attributes::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Makie.MakieLayout ~/.julia/packages/Makie/umL6V/src/makielayout/blocks/scene.jl:6; [6] plot!; @ ~/.julia/packages/Makie/umL6V/src/makielayout/blocks/scene.jl:6 [inlined]; [7] plot!(P::Type{Combined{Makie.wireframe, ArgType} where ArgType}, ls::LScene, args::Sphere{Float32}; kw_attributes::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:show_axis,), Tuple{Bool}}}); @ Makie.MakieLayout ~/.julia/packages/Makie/umL6V/src/makielayout/blocks/scene.jl:14; [8] #wireframe!#600; @ ~/.julia/packages/MakieCore/aD9Dy/src/recipes.jl:37 [inlined]; [9] visualize_barotropic_gyre(filepath::String); @ Main ~/Software/Oceananigans.jl/validation/barotropic_gyre/visualize_barotropic_gyre.jl:64; [10] top-level scop",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2542:278,update,updated,278,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2542,1,['update'],['updated']
Deployability,"For some reason when I tested the code after merging https://github.com/CliMA/Oceananigans.jl/pull/2028 it didn't really work on my main code for GPUs. . It worked for a MWE when I tested it [here](https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-952089949) but I guess I must have done something wrong? In any case, I apologize!. I also expanded the test to test grids on GPUs (which would have caught this error) so I think this'll help. Given that we _just_ released a new version, I didn't bump this to 0.63.4 here. But let me know if I should do that. CC: @navidcy",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2030:476,release,released,476,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2030,1,['release'],['released']
Deployability,"For the last few days I've been getting weird errors running hydrostatic-free surface models with immersed boundaries on GPUs. First I was getting some ""illegal instruction"" core dump errors from CUDA but upgrading various things and playing around with the CUDA configurations fixed that (and I don't think this is an Oceananigans issue), but now with `v0.85.0` I get this error:; ```; ERROR: LoadError: DivideError: integer division error; Stacktrace:; [1] macro expansion; @ ~/.julia/packages/CUDA/pCcGc/lib/cublas/libcublas.jl:102 [inlined]; [2] #21; @ ~/.julia/packages/CUDA/pCcGc/lib/utils/call.jl:27 [inlined]; [3] #1; @ ~/.julia/packages/CUDA/pCcGc/lib/cublas/libcublas.jl:17 [inlined]; [4] retry_reclaim(f::CUDA.CUBLAS.var""#1#2""{CUDA.CUBLAS.var""#21#22""{Ptr{CUDA.CUBLAS.cublasContext}, Int64, CUDA.CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Int64, Base.R$; @ CUDA ~/.julia/packages/CUDA/pCcGc/src/pool.jl:337; [5] check; @ ~/.julia/packages/CUDA/pCcGc/lib/cublas/libcublas.jl:16 [inlined]; [6] cublasDnrm2_v2; @ ~/.julia/packages/CUDA/pCcGc/lib/utils/call.jl:26 [inlined]; [7] nrm2; @ ~/.julia/packages/CUDA/pCcGc/lib/cublas/wrappers.jl:172 [inlined]; [8] nrm2; @ ~/.julia/packages/CUDA/pCcGc/lib/cublas/wrappers.jl:177 [inlined]; [9] norm; @ ~/.julia/packages/CUDA/pCcGc/lib/cublas/linalg.jl:131 [inlined]; [10] norm; @ ~/.julia/packages/CUDA/pCcGc/lib/cublas/linalg.jl:130 [inlined]; [11] cg_iterator!(x::CUDA.CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CUDA.CuArray{Float64, 1, CUDA.Mem.DeviceBuff$; @ IterativeSolvers ~/.julia/packages/IterativeSolvers/rhYBz/src/cg.jl:140; [12] cg_iterator!; @ ~/.julia/packages/IterativeSolvers/rhYBz/src/cg.jl:120 [inlined]; [13] cg!(x::CUDA.CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CUDA.CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}; abst$; @ IterativeSolvers ~/.julia/packages/IterativeSolvers/rhYBz/src/cg.jl:224; [14] cg!; @ ~/.julia/pack",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3189:263,configurat,configurations,263,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3189,1,['configurat'],['configurations']
Deployability,Forward Euler + 3rd order Runge-Kutta time-stepping (or integration with DifferentialEquations.jl),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/506:56,integrat,integration,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/506,1,['integrat'],['integration']
Deployability,"Friendly ""getting started"" section that encompasses installation + running examples for new users?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1149:52,install,installation,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1149,1,['install'],['installation']
Deployability,"GFyeUNvbmRpdGlvbnMuamw=) | `100% <ø> (ø)` | :arrow_up: |; | [src/BoundaryConditions/show\_boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/601/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9zaG93X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `0% <ø> (ø)` | :arrow_up: |; | [src/BoundaryConditions/fill\_halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/601/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWxsX2hhbG9fcmVnaW9ucy5qbA==) | `93.75% <100%> (+0.89%)` | :arrow_up: |; | [src/Utils/with\_tracers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/601/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3dpdGhfdHJhY2Vycy5qbA==) | `100% <100%> (ø)` | :arrow_up: |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/601/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `73.68% <100%> (ø)` | :arrow_up: |; | [src/Models/model.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/601/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9tb2RlbC5qbA==) | `91.66% <100%> (ø)` | :arrow_up: |; | [...nditions/solution\_and\_model\_boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/601/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9zb2x1dGlvbl9hbmRfbW9kZWxfYm91bmRhcnlfY29uZGl0aW9ucy5qbA==) | `94.59% <94.59%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/601?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/601?src=pr&el=footer). Last update [ea74667...f1d341a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/601?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/601#issuecomment-579024761:3052,update,update,3052,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/601#issuecomment-579024761,1,['update'],['update']
Deployability,"Going to release a new version as quite a bit has been merged since v0.11.0, and arbitrary tracers (PR #452) will probably be the focus of v0.12.0.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/477:9,release,release,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/477,1,['release'],['release']
Deployability,Good catch. This should be made very clear as it has confused us in the past... I'll make sure to address this issue on the (increasingly stale =/) `ar/integrate-vs-grid` branch...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/696#issuecomment-597581523:152,integrat,integrate-vs-grid,152,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/696#issuecomment-597581523,1,['integrat'],['integrate-vs-grid']
Deployability,"Good idea! Does this mean tagging v0.94.0 (and one stop closer to v0.100) as it's a change to the public interface?. > Remove `OceananigansLogger`: rarely used. I use it in almost every script I write haha, but that's because I wrote it to my liking. There's a strong argument to be made that a logger configuration does not belong in Oceananigans.jl. I feel it's similar to Oceananigans' decision to not provide a default progress callback seeing as each user will probably want a different one. > Remove `StateChecker`: not used as far as I know. Yeah I think I used that to debug cubed sphere stuff. Could easily be defined in a validation script though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3872#issuecomment-2439726627:302,configurat,configuration,302,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3872#issuecomment-2439726627,1,['configurat'],['configuration']
Deployability,"Good idea. Maybe even suggest the user try `ShallowWaterModel`, as that is a better way to try this configuration? ;)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2198#issuecomment-1023127291:100,configurat,configuration,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2198#issuecomment-1023127291,1,['configurat'],['configuration']
Deployability,Good to keep packages updated to avoid abrupt changes in dependencies.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/404:22,update,updated,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/404,1,['update'],['updated']
Deployability,"Greg, I have notes on a 'capacitance method' that we used in qg models in; complex geometries in the 1980s. That also would not require us to change; the solver. You carry out Green's function calculations in a rectangular; region where the delta-functions vorticities are placed at the positions of; the irregular boundary within the larger rectangular region. I will look; them out. John. On Sat, Mar 28, 2020 at 11:20 AM Gregory L. Wagner <notifications@github.com>; wrote:. > @johncmarshall54 <https://github.com/johncmarshall54> agreed, that's a; > challenge we have to confront.; >; > If we implement immersed boundaries using the ""continuous forcing; > technique"", then a boundary may be defined essentially by a masking; > function. In this case, we might be able to ""label"" each boundary / masking; > function with a name or number.; >; > The boundary condition objects we then give to fields would have to define; > a condition to be applied both at the boundaries of the numerical grid; > (which we currently support), as well as any immersed boundaries, where; > immersed boundaries are referenced by name or number.; >; > By the way, if we use a continuous forcing technique, we do not have to; > change the pressure solver. This is a major simplification. Recent work; > suggests there is no disadvantage in terms of accuracy in using the; > continuous forcing technique, either. I'm not sure if this is too good to; > believe or not --- we should discuss and take a deeper look at the; > literature.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/issues/721#issuecomment-605461456>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKXUEQQHGXSSKOU7EIXSLBTRJYIVFANCNFSM4LVSZPAA>; > .; >. -- ; ==========================================; John Marshall; Cecil and Ida Green Professor of Oceanography; Massachusetts Institute of Technology; http:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/721#issuecomment-605466623:638,continuous,continuous,638,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/721#issuecomment-605466623,1,['continuous'],['continuous']
Deployability,"Greg, I still got the same results. I don't know why copy/pasting is not working. It seems like it updates to the current status and kind of ignoring what is present in the Project.toml",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827261385:99,update,updates,99,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827261385,1,['update'],['updates']
Deployability,"Greg, is this something to be be done now? Let's get what we have now; completed and out to the community, get feedback etc. Development will; continue but we need to engage users. John. On Fri, Oct 25, 2019, 1:25 AM Gregory L. Wagner <notifications@github.com>; wrote:. > We need better and more stable time-steppers. One option is to implement; > by hand a 3rd-order low storage Runge Kutta scheme.; >; > Another interesting avenue is to figure out how to integrate with; > DifferentialEquations.jl, which would give us access to a large number of; > new time-steppers.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/issues/506?email_source=notifications&email_token=AKXUEQROLPK63OJDILUPELLQQI4IFA5CNFSM4JE5AV32YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HUIGFOQ>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKXUEQRRJKIBWQ77UVXKGZDQQI4IFANCNFSM4JE5AV3Q>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/506#issuecomment-546217327:458,integrat,integrate,458,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/506#issuecomment-546217327,1,['integrat'],['integrate']
Deployability,"Ha, @rabernat beat me to it. I just wanted to mention that I am also available for questions and maybe clarify one more point of confusion that seems to stem from our current docs (working on improving that with @tomchor s input). . There are two parts in the NetCDF output that would make the integration with xgcm smooth: ; - Proper metadata for the dimensions (as mentioned by @rabernat above); - Output of grid metrics, which are distances, areas and cell volume of the grid. An important detail there is that each of the metrics should describe properties of the *surrounding cell*. So if you have a tracer value on the point `xT` and the cell bounds are given by a staggered coordinate `xC`, the distance (lets call it `dx`) for each `xT` point should describe the distance between the two surrounding `xC` points (and have `xC` as coordinate, so it can be matched correctly by xgcm). Currently the user has to input these manually but it might be convenient to add the [cf-attribute `cell_measures`](http://cfconventions.org/cf-conventions/cf-conventions.html#cell-measures), which we might support in the future with a more complete support for cf-metadata (see e.g. https://github.com/xgcm/xgcm/issues/127)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1334#issuecomment-777081849:294,integrat,integration,294,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1334#issuecomment-777081849,1,['integrat'],['integration']
Deployability,"Had an earlier clone, was on master branch, everything was in order as ""git status"" ; ; nothing to commit, working tree clean. Then I updated my clone the usual way, just typing ""git pull"", but got plenty of warnings about; conflicts and so on. After that, ""git status"" reports:. On branch master; Your branch and 'origin/master' have diverged,; and have 1106 and 2212 different commits each, respectively.; (use ""git pull"" to merge the remote branch into yours); You have unmerged paths.; (fix conflicts and run ""git commit""); (use ""git merge --abort"" to abort the merge). so it looks like I am far from a clean update. My question: how to proceed when trying to update my Oceananigans local clone and; why the standard way does not work for this repos ?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/598:134,update,updated,134,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/598,3,['update'],"['update', 'updated']"
Deployability,"Happy to open an issue (or post to #1634) when I have the time to work on CI. What should we do with this PR? I think it's a net positive change so I'm happy to approve as long as the images aren't in git history. If we decide to nuke this part of the docs then I suppose this PR is moot and should be closed. > _when_ / _if_ somebody can take responsibility for maintaining it. I think responsibility for maintaining the pipeline should fall on all maintainers/developers, otherwise it's not sustainable. Ideally if you open a PR that breaks a validation experiment you should fix it. If done concurrently it should only consist of small changes so it should only be a small burden (although burdens to add up). I guess we don't run the validation CI on every PR since it's too expensive so maintenance is tough right now. Maybe we can run validation CI before every tagged release or something? Better infrastructure is needed I suppose.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872481889:422,pipeline,pipeline,422,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872481889,2,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"Heh, well the `stratified_fluid_remains_at_rest_with_tilted_gravity_temperature_tracer` test fails. The log suggests that the problem is confined to a few grid points, since the mean is correct:. ```; [2021/07/29 16:10:56.038] INFO Simulation is stopping. Model time 1 hour has hit or exceeded simulation stop time 1 hour.; --;   | [2021/07/29 16:10:57.288] INFO ∂T∂z * g̃[2] = 0.0001065658790393914, mean(∂y_T) = 0.0001065658790360618, Δ = 3.32959842423014e-15 at t = 1 hour with θ=1°;   | [2021/07/29 16:10:57.288] INFO ∂T∂z * g̃[3] = 0.006105155121314884, mean(∂z_T) = 0.006105155121314366, Δ = 5.178149575790769e-16 at t = 1 hour with θ=1°;   | Tilted gravity: Test Failed at /var/lib/buildkite-agent/builds/tartarus-5/clima/oceananigans/test/test_dynamics.jl:290;   | Expression: all(∂T∂z * g̃[2] .≈ interior(∂y_T)); ```. https://github.com/CliMA/Oceananigans.jl/blob/9ecddac3fe2666e05f21e51b81ec2c403094e5ea/test/test_dynamics.jl#L241. I am skeptical about the value of this test. In general, discretizations _do not necessarily_ represent the balance states of the continuous systems they approximate. Thus in general this test should fail! It will succeed of course in the case that the discrete system shares a balanced state with the continuous state. I think this is flawed as a _test_ because, while certainly formulating discrete systems that share balanced states with their continuous systems is _desirable_, I'm not sure it's something we want to guarantee via CI. We should be allowed to violate this prescription if the discrete system has other _more important_ desirable properties. It could be a nice validation test though. In this particular case, the nonhydrostatic useful is most often used for simulations of _vigorous_ turbulence in which weak flows induced by a violation of hydrostatic balance are likely irrelevant.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890017453:1072,continuous,continuous,1072,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890017453,3,['continuous'],['continuous']
Deployability,"Hello, . I've tested it in `Oceananigans v0.91.8` with:. ```; julia> versioninfo(); Julia Version 1.10.4; Commit 48d4fd48430 (2024-06-04 10:41 UTC); Build Info:; Official https://julialang.org/ release; Platform Info:; OS: Linux (x86_64-linux-gnu); CPU: 64 × Intel(R) Xeon(R) Gold 6130 CPU @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-15.0.7 (ORCJIT, skylake-avx512); Threads: 1 default, 0 interactive, 1 GC (on 64 virtual cores); Environment:; JULIA_CUDA_MEMORY_POOL = none. julia> Oceananigans.CUDA.versioninfo(); CUDA runtime 12.1, artifact installation; CUDA driver 12.1; NVIDIA driver 530.30.2. CUDA libraries:; - CUBLAS: 12.1.3; - CURAND: 10.3.2; - CUFFT: 11.0.2; - CUSOLVER: 11.4.5; - CUSPARSE: 12.1.0; - CUPTI: 2023.1.1 (API 18.0.0); - NVML: 12.0.0+530.30.2. Julia packages:; - CUDA: 5.4.3; - CUDA_Driver_jll: 0.9.2+0; - CUDA_Runtime_jll: 0.14.1+0. Toolchain:; - Julia: 1.10.4; - LLVM: 15.0.7. Environment:; - JULIA_CUDA_MEMORY_POOL: none. Preferences:; - CUDA_Runtime_jll.version: 12.1. 1 device:; 0: Tesla V100-PCIE-32GB (sm_70, 30.884 GiB / 32.000 GiB available); ```; and the issue seems solved. ; I agree with @ali-ramadhan, it seems that this issue was fixed at some point, although I haven't managed to pinpoint the version, I think I had the issue when I was using `CUDA v5.1.2`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-2298503471:194,release,release,194,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-2298503471,2,"['install', 'release']","['installation', 'release']"
Deployability,"Hello, @amontoison. Nice work. Do you see a performance improvement when switching to this package?; There should be some benchmarks in the `benchmark` folder that we can test (probably we need to update that folder a bit, let me know if you have problems with it)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2353126955:197,update,update,197,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2353126955,1,['update'],['update']
Deployability,"Hello, I am getting this error while trying to add Oceananigans on the NASA Pleiade cluster. Any ideas? Thanks a lot ! Lia. (@v1.6) pkg> update Oceananigans; Updating registry at `~/.julia/registries/General`; Installed HDF5_jll ─── v1.10.5+7; Installed ColorTypes ─ v0.11.0; Installed HTTP ─────── v0.9.8; Installed HDF5 ─────── v0.13.7; Installed URIs ─────── v1.3.0; Downloaded artifact: HDF5; No Changes to `~/.julia/environments/v1.6/Project.toml`; Updating `~/.julia/environments/v1.6/Manifest.toml`; [3da002f7] ↑ ColorTypes v0.10.12 ⇒ v0.11.0; [f67ccb44] ↑ HDF5 v0.13.6 ⇒ v0.13.7; [cd3eb016] ↑ HTTP v0.8.19 ⇒ v0.9.8; [5c2747f8] + URIs v1.3.0; [0234f1f7] ↓ HDF5_jll v1.12.0+1 ⇒ v1.10.5+7; Building HDF5 → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/0b812e7872e2199a5a04944f486b4048944f1ed8/build.log`; Precompiling project...; ✗ Oceananigans; 15 dependencies successfully precompiled in 101 seconds (143 already precompiled); 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1635:137,update,update,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1635,6,"['Install', 'update']","['Installed', 'update']"
Deployability,"Hello, I am having some technical trouble installing and using Oceananigans. I am new to Julia and would like to try to set up Oceananigans on a Macbook. But it is running into issues. . (1) - installation process says some things are missing:; Building MPI → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/d56a80d8cf8b9dc3050116346b3d83432b1912c0/build.log`; Precompiling project...; ✗ MPI; ✗ PencilArrays; ✗ PencilFFTs; ✗ Oceananigans; 89 dependencies successfully precompiled in 41 seconds; 4 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages. (2) - using Oceananigans is looking for MPI, but to my knowledge if I want to run on my computer, it shouldn't need MPI, like MITgcm using serial instead of parallel. But I don't know where to change the setting? This is what happens when I call using Oceananigans:. julia> using Oceananigans; [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; ERROR: LoadError: MPI.jl not properly configured, please run `Pkg.build(""MPI"")`.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:33; [2] top-level scope; @ ~/.julia/packages/MPI/08SPr/src/MPI.jl:38; [3] include; @ ./Base.jl:418 [inlined]; [4] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::String); @ Base ./loading.jl:1318; [5] top-level scope; @ none:1; [6] eval; @ ./boot.jl:373 [inlined]; [7] eval(x::Expr); @ Base.MainInclude ./client.jl:453; [8] top-level scope; @ none:1; in expression starting at /Users/sean/.julia/packages/MPI/08SPr/src/MPI.jl:1. caused by: LoadError: InitError: could not load library ""/Users/sean/.julia/artifacts/48a9a608db31268626d8b8d4d1272c3e7ccbf7d5/lib/libmpifort.12.dylib""; dlopen(/Users/sean/.julia/artifacts/48a9a608db31268626d8b8d4d1272c3e7ccbf7d5/lib/libmpifort.12.dylib, 0x0001): Library not loaded: @rpath/libquadm",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2480:42,install,installing,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2480,2,['install'],"['installation', 'installing']"
Deployability,"Hello,. I've been working with @johnryantaylor, and we've been using Lagrangian Particles but have come across an issue. To preface, the issue be my miss understanding of how to use tracked fields but I can't find an obvious solution. Essentially the problem seems to be that to define an tracked field for a tracer you have to already have the model defined, but to do that you have to have the particles defined. A work around for this was to make the model, then define the particles, then redefine the model. This would run and not error, but would result in the tracked field property of the particles not actually being updated. Running it yet again appears to fix it and make it; work. In order to fix this I've modified the `update_particle_properties!` function to explicitly use the models tracer fields when it is a tracer field being tracked. I've also updated the tests which seem to run. If you run the tests on the previous version of the code then the property t does not get updated (but will run with this set up). I hope this is the best place for me to make this pull request since you're updating particle tracking anyway!. Jago",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2662:626,update,updated,626,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2662,3,['update'],['updated']
Deployability,"Hello,; My [fork](https://github.com/matinraayai/Oceananigans.jl) of Oceananigans.jl is in the process of adding AMDGPU support for the code base. I've added a new architecture called ROCMGPU, and changed the name of the GPU architecture to CUDAGPU. ; Some of the operations are ported, and the tests are updated to use ROCMGPU as well. @christophernhill and I are in the process of running each test suite to see what other operations need to be tweaked for AMDGPU.; 1. I would like to push this work on a branch on the main codebase, called amdgpu for it to get more attention.; 2. Any help on getting the tests working would be much appreciated.; Thanks",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2493:305,update,updated,305,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2493,1,['update'],['updated']
Deployability,"Here are a couple of comments that come to mind when looking at your code. 1. You're using a call to `znodes(Center,grid)`, which indicates that you're using an out-of-date version of the code. I suggest you update the code to the latest version and then try again. It's good to always keep your code up-to-date (especially when posting here) because the code is always being improved upon (and in some instances some bugs get fixed which may be important to your example!). 2. That said, about this:. > Finally, in this case the z-axis is range from -15 to 0, so I can't use `const z₁ = -1*znodes(Center,grid)[1]` because if I do that, the value of z1 will change to 14.88. My code `const z₁ = -1*znodes(Center,grid)[grid.Nz]` will keep z1 equals to Closest grid center to the bottom (0.12). This isn't the best way to define $z_1$. The current statement will break if you, for example, decide to stretch the grid vertically. The more robust way to define $z_1$ is. ```julia; julia> grid = RectilinearGrid(CPU(), size=(64,64,64), extent=(π*H, π*H, H)); 64×64×64 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [1.54466e-16, 47.1239) regularly spaced with Δx=0.736311; ├── Periodic y ∈ [1.54466e-16, 47.1239) regularly spaced with Δy=0.736311; └── Bounded z ∈ [-15.0, 0.0] regularly spaced with Δz=0.234375. julia> using Oceananigans.Grids: zspacing. julia> zspacing(1, 1, 1, grid, Center(), Center(), Center())/2 # Half the distance around a center point; 0.1171875; ```. This is clearer, and will give you the correct value even if you change the grid in the future. Note that in the call to `zspacing()` above, we need to specify the x, y and z positions to get the spacing, but in a `RectilinearGrid` Δz is constant in x and y so those arguments don't really matter. Also note that the code above is written for the most recent Oceananigans version (for which you'll need Julia 1.9). 3. Now to your main point (sorry for the tangents! :grimacing:), I",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1649999408:208,update,update,208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1649999408,2,['update'],['update']
Deployability,"Here are some profiling results that were done on Satori with nvprof. This is a GPU profile of the nonhydrostatic model.; ```; ==104758== NVPROF is profiling process 104758, command: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project benchmarkable_incompressible_model.jl. Oceananigans v0.60.0; Julia Version 1.6.2; Commit 1b93d53fc4 (2021-07-14 15:36 UTC); Platform Info:; OS: Linux (powerpc64le-unknown-linux-gnu); CPU: unknown; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, pwr9); GPU: Tesla V100-SXM2-32GB. CUDA toolkit 10.2.89, local installation; CUDA driver 10.2.0; NVIDIA driver 440.64.0. Libraries: ; - CUBLAS: 10.2.2; - CURAND: 10.1.2; - CUFFT: 10.1.2; - CUSOLVER: 10.3.0; - CUSPARSE: 10.3.1; - CUPTI: 12.0.0; - NVML: 10.0.0+440.64.0; - CUDNN: missing; - CUTENSOR: missing. Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5; - Device capability support: sm_30, sm_32, sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 31.432 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 31.738 GiB / 31.749 GiB available); nothing. [2021/07/30 10:27:44.108] INFO Setting up benchmark: (GPU, Float64, 128)...; [2021/07/30 10:28:25.970] INFO warming up; [2021/07/30 10:29:55.456] WARN Calling CUDA.@profile only informs an external profiler to start.; The user is responsible for launching Julia under a CUDA profiler. It is recommended to use Nsight Systems, which supports interactive profiling:; $ nsys launch julia -@-> /home/henryguo/.julia/packages/CUDA/lwSps/lib/cudadrv/profile.jl:71; [2021/07/30 10:29:58.016] INFO done profiling (GPU, Float64, 128); ==104758== Profiling application: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project benchmarkable_incompressible_model.jl; ==104758== Profiling result:; Type Time(%) Time Calls Avg Min Max Name; GPU activities: 12.29% 502.36u",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912:583,install,installation,583,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912,1,['install'],['installation']
Deployability,"Here's a few notes on a model with fetch dependence. ## Time-dependence of the spectral peak. Under persistent winds, the sea state continuously evolves. This is captured by the concept of _fetch_, which is more or less the distance over which the wind blows. The fetch dependence of the sea state is strikingly captured by this figure from [JONSWAP](https://pure.mpg.de/rest/items/item_3262854/component/file_3282032/content):. <img width=""671"" alt=""image"" src=""https://user-images.githubusercontent.com/15271942/156589227-c6f5f778-3cfd-4d4b-b199-34d4ad3756b1.png"">. which shows the _fetch dependence_ of the surface wave spectrum: as the fetch gets longer (as the winds blow for a longer period of time), the peak wavenumber decreases (the waves get longer) and the spectrum spreads out. [Lenain and Melville 2017](https://airsea.ucsd.edu/wp-content/uploads/sites/10/2019/06/2017_Lenain_Melville-Journal_of_Physical_Oceanography_vol_47-2.pdf) derive fetch relationships between peak frequency and non-dimensional fetch in their equations 11 and 12. Putting ourselves in a reference frame moving at the phase speed of the peak wavenumber, and rewriting these relationships in terms of peak wavenumber yields. ![image](https://user-images.githubusercontent.com/15271942/156588626-19b01ba3-5557-4f17-af1d-4d93b8c4fb9f.png). The above is a model for a time-dependent peak wavenumber for a given constant friction velocity. This is an alternative to a constant peak wavenumber scaling.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2290#issuecomment-1058124701:132,continuous,continuously,132,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2290#issuecomment-1058124701,1,['continuous'],['continuously']
Deployability,"Here's a screenshot of the top row from the final time-step:. ![image](https://user-images.githubusercontent.com/15271942/160630444-6b07529f-cf8b-4d03-8421-a6027153298e.png). showing significantly more small scale features on the left. The difference (the key to this PR) is using the velocity field in the smoothness metric for vorticity reconstruction, rather than the vorticity field. The ordinary WENO algorithm uses the smoothness of the field being reconstructed to produce weights for the candidate stencils. This method is therefore an innovation, since we are using the _velocity_ field to evaluate smoothness for reconstructing _vorticity_. The velocity field is smoother than vorticity, so this generally leads to less-dissipative stencils (but still ""enough"" dissipation to stabilize the simulation). @simone-silvestri definitely has more plots showing differences in spectra and time-series of integrated enstrophy, perhaps he will share!. I'm also going to paste an example of using this scheme in the code once I figure that out.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1081922042:907,integrat,integrated,907,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1081922042,1,['integrat'],['integrated']
Deployability,"Here's another observation:; ```julia; u[region][1, 1-Hc:0, k] .= view(u[region_W], Nc+1-Hc:Nc, 1, k); ```; neither updates the LHS with any value nor triggers an error. The fix is either; ```julia; u[region][1, 1-Hc:0, k] = u[region_W][Nc+1-Hc:Nc, 1, k]; ```; or; ```julia; view(u[region], 1, 1-Hc:0, k).data .= reshape(view(u[region_W], Nc+1-Hc:Nc, 1, k).data, 1:1, 1-Hc:0, k:k); ```; (preferred).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3361#issuecomment-2034695371:116,update,updates,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3361#issuecomment-2034695371,1,['update'],['updates']
Deployability,Here's the differences in how `docs/Manifest.toml` is updated for a successful and the current build:. | [build 1872](https://buildkite.com/clima/oceananigans/builds/1872#a5258c04-eef6-400d-88ab-7523a0ed366c) | [build 1983](https://buildkite.com/clima/oceananigans/builds/1983#8cacbe56-6c7e-403b-8ef2-18cdd7f6ef68) from this PR |; :-------------------------:|:-------------------------:; | Docs build successfully! | Build is hanging? |; | ![image](https://user-images.githubusercontent.com/15271942/114252127-9d4a5c00-9958-11eb-8b20-eb200fb285f6.png) | ![image](https://user-images.githubusercontent.com/15271942/114252174-c2d76580-9958-11eb-8520-a61a48620412.png). The differences are:. * ArrayInterface (3.1.6 -> 3.1.7); * CUDA (2.4.1 -> 2.4.3); * ChainRulesCore (0.9.36 -> 0.9.37); * GPUArrays (6.2.1 -> 6.2.2); * NNlib (0.7.17 -> 0.7.18); * StructTypes (1.5.0 -> 1.5.2); * TaylorSeries (0.10.11 -> 0.10.12),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-817041290:54,update,updated,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-817041290,1,['update'],['updated']
Deployability,"Here's what I got now!. ```julia; using Oceananigans; using Oceananigans.Units; using GLMakie. grid = RectilinearGrid(size=(128, 128), x=(0, 128), z=(-64, 0), topology=(Periodic, Flat, Bounded)). b_bcs = FieldBoundaryConditions(top=FluxBoundaryCondition(1e-8)). @inline growth_func(x, y, z, t, p) = 1 / p.τ * exp(z / p.h); growth = Forcing(growth_func, parameters=(τ=1hour, h=4.0)); sinking = AdvectiveForcing(WENO5(), w=-1). model = NonhydrostaticModel(; grid,; tracers = (:b, :P),; buoyancy = BuoyancyTracer(),; boundary_conditions = (; b=b_bcs),; forcing = (; P = (growth, sinking))). bᵢ(x, y, z) = 1e-5 * z + 1e-9 * rand(); set!(model, b=bᵢ). Δz = grid.Δzᵃᵃᶜ; Δt = 0.1 * Δz # for a sinking velocity w=1; simulation = Simulation(model; Δt, stop_iteration = 1000). fig = Figure(); ax = Axis(fig[1, 1]). P = model.tracers.P; hm = heatmap!(ax, interior(P, :, 1, :)). function update!(sim); hm.input_args[1][] = interior(P, :, 1, :); return nothing; end. simulation.callbacks[:plot] = Callback(update!, IterationInterval(100)). display(fig). run!(simulation); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1082024483:876,update,update,876,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1082024483,2,['update'],['update']
Deployability,"Hi @EavenW hope it wasn't too hard to get started (the documentation needs some more work, sorry about that). Not totally sure what you mean by a flux boundary condition with two components (sounds like the u and v velocity fields might be further coupled via this boundary condition?). Sounds like you're trying to impose a (time-dependent?) surface flux boundary condition which can be done a few different ways.; * If it's independent of time then [imposing a flux BC with a 2D array](https://climate-machine.github.io/Oceananigans.jl/stable/model_setup/boundary_conditions/#Creating-individual-boundary-conditions-1) is one option.; * If it's time-dependent then [imposing the flux BC as a function](https://climate-machine.github.io/Oceananigans.jl/stable/model_setup/boundary_conditions/#Specifying-boundary-conditions-with-functions-1) is probably the way to go. The function signature for boundary conditions is `f(i, j, grid, t, U, C, params)` so the boundary condition can depend on time `t`, the velocity fields `U = (u, v, w)` and any tracer quantity in `C`.; * If you can write your surface flux BC as a function of only (x, y, t) then a [`BoundaryFunction`](https://github.com/climate-machine/Oceananigans.jl/blob/master/src/BoundaryConditions/boundary_function.jl) can simplify the setup a little. I just realized this isn't showing up in the documentation but the docstring in the file I linked to has an example of how to use it. PS: Not sure which version you're running but we've been making some improvements to the user interface lately which may break certain things if you upgrade to v0.21 or v0.22. Please don't hesitate to ping us if you have any questions or if something isn't working. We're more than happy to help.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/629#issuecomment-586708085:1596,upgrade,upgrade,1596,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/629#issuecomment-586708085,1,['upgrade'],['upgrade']
Deployability,"Hi @ma-sadeghi, thanks for opening an issue. This should be possible using a continuous forcing immersed boundary method. It's somewhat crude as it just damps the velocity inside the boundary but is simple to implement and requires no significant changes to the model. For fast flows you might need to damp more strongly (and thus decrease the time step) but the solution should converge as you do so. It's not a built-in feature but is pretty easy to implement by adding appropriate forcing functions to an Oceananigans model. For example, in PR #693 we used such a method to simulate viscous flow around a cylinder (in 2D). Here is the simulation script: https://github.com/climate-machine/Oceananigans.jl/blob/ar/flow-around-cylinder/verification/flow_around_cylinder/flow_around_cylinder.jl. These are the most relevant lines: https://github.com/climate-machine/Oceananigans.jl/blob/a921fc3edbf795bf4a2193cca84cad41ebdd5625/verification/flow_around_cylinder/flow_around_cylinder.jl#L18-L27. In this case the boundary was described analytically and `boundary(x, y, z)` evaluates to `1` inside the cylinder and to `0` outside. In your case maybe it's easier to describe the boundary or missing nodes with a mask or array (also updated snippet for v0.29):; ```julia; # ... Create boundary[i, j, k] array that's 1.0 inside the boundary and 0.0 outside ... K = 50.0 # ""Spring constant"" for immersed boundary method ; parameters = (boundary=boundary, K=K). # Continuous forcing immersed boundary method ; @inline u_immersed_boundary(i, j, k, grid, clock, state, params) =; @inbounds -params.boundary[i, j, k] * params.K * state.velocities.u[i, j, k] ; @inline w_immersed_boundary(i, j, k, grid, clock, state, params) =; @inbounds -params.boundary[i, j, k] * params.K * state.velocities.w[i, j, k] . u_forcing = ParameterizedForcing(u_immersed_boundary, parameters); w_forcing = ParameterizedForcing(w_immersed_boundary, parameters). forcing = ModelForcing(u=u_forcing, w=w_forcing) ; ```. Note that the ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/743#issuecomment-622406785:77,continuous,continuous,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/743#issuecomment-622406785,1,['continuous'],['continuous']
Deployability,Hi @maeckha sorry for the out-of-date scripts. I've been meaning to add the validation experiments to CI so this doesn't happen. I can open a PR later today with an updated lid-driven cavity script if that would be helpful.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-809320083:165,update,updated,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-809320083,1,['update'],['updated']
Deployability,"Hi @navidcy - it is still outstanding, but there's been some progress lately:. https://github.com/JuliaDebug/JuliaInterpreter.jl/issues/574#issuecomment-1674729615. https://github.com/julia-vscode/julia-vscode/issues/3349#event-10200480814. I will update this thread as soon as it's resolved - hope that sounds good - thank you",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1697286595:248,update,update,248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1697286595,1,['update'],['update']
Deployability,"Hi @navidcy - you have great timing - it looks like the most recent release of the julia-vscode extension fixed the issue - I have tested it on a basic Oceananigans script and the debugger seems to be working now. the core issue here was with JuliaInterpreter.jl which was fixed and updated in the julia-vscode extension, which then fixed the issue. thank you so much for your help and patience!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1697433147:68,release,release,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1697433147,2,"['release', 'update']","['release', 'updated']"
Deployability,"Hi @simone-silvestri ; Thank for the suggestion.; I see the change in `flat_advective_fluxes`. I will do some test to see if I can reproduce my previous result. ; However, I think it is quite weird to keep other terms without the advection. Why don't we turn off whole u momentum calculation? Also, I think several examples still treat `flat` as a flat periodic boundary (e.g., Tilted BBL). . @glwagner I update the grid layout in the main text.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2742#issuecomment-1252620822:405,update,update,405,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2742#issuecomment-1252620822,1,['update'],['update']
Deployability,"Hi All,. I rerun the simulations using the newest version of the code, . julia>; [17:03]fspereira@ch-fe1[/lustre/scratch5/fspereira/OCEANANIGANS/test/case5]# julia; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> import Pkg. julia> Pkg.status(""Oceananigans""); Status `~/.julia/environments/v1.6/Project.toml`; [9e8cae18] Oceananigans v0.77.5. and a script based on the one available on oceananigans webpage (I only changed the grid size, constant, and set the random seed. I also tried without these changes):. [https://github.com/CliMA/Oceananigans.jl/blob/main/examples/ocean_wind_mixing_and_convection.jl](https://urldefense.com/v3/__https://github.com/CliMA/Oceananigans.jl/blob/main/examples/ocean_wind_mixing_and_convection.jl__;!!Bt8fGhp8LhKGRg!Hq-26fs0ZjyKWL5dfg0ho6lLfmeo_jfgVK18dHbvsUBFODEetRH9g_Jail-Z6ZLUs4OLQeSzVSKFWq6Ve2_bO315jP8wE0frJVA$). Unfortunately, the new code/script led to the same reproducibility problem. I ran 4 simulations using the same script (attached) and obtained 4 different average ww profiles. . ![tec_ww_time_c1](https://user-images.githubusercontent.com/80914369/193948250-57bde9a3-ab27-4224-a443-341599e2107e.png). [c16_128_128m.jl.zip](https://github.com/CliMA/Oceananigans.jl/files/9711438/c16_128_128m.jl.zip). Any ideas or suggestions?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1267712816:424,release,release,424,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1267712816,1,['release'],['release']
Deployability,Hi all! . Thank you for the helpful advice and sorry for my delayed response! I am using shared gpu resources on my school's HPC and have not been able to access any resources to test anything out yet so I will update here once I can get some testing done on my side. Thank you again for the help!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1509#issuecomment-812702328:211,update,update,211,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1509#issuecomment-812702328,1,['update'],['update']
Deployability,"Hi all, . I am currently working on a biogeochemistry modelling environment with @johnryantaylor using Oceananigans, and as part of this have have up with a scheme to have ""active"" particles that interact with tracers. How I currently have this set up: when the particle dynamics are run, the particles can increase/decrease the concentration of tracers in the cells surrounding them, but this only allows for explicit Euler integration. A better way todo this seems to be to have the particles uptake/exudation of tracers contribute to their tendencies during the time stepping as I have implemented here. I'm unsure if this is implemented in the best way throughout but I'm fairly satisfied that I have it working as desired. . Hope everyone is happy with this?. --------. To summaries what I have changed:. - Particle setup: particles can get a parameter called `active_properties` which is a tuple of named tuples of particle properties and tracers (e.g. `((property=:t, tracer=:x),).`) The idea being that the particle dynamics function (as already implemented) changes the particle property to set a rate of uptake/exudation of a tracer, and the below function would integrate this change to the specified tracer. - `calculate_particle_tendency_contributions!` added after each `calculate_tendencies!` call: function goes through each particle, finds its 8 nearest cells, and adds the relevant fraction of each particle property (divided by the cell volume) to the tracer tendencies so it can be integrated by the time stepper (like tracer forcing)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724:425,integrat,integration,425,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724,3,['integrat'],"['integrate', 'integrated', 'integration']"
Deployability,"Hi all, I recently switched from using v0.30.0 to using the latest version of the master branch, and I am now unable to add the CuArrays package, as it seems to clash with some of the packages used by Oceananigans. Has anyone else experienced this? I was able to reproduce this issue on two computers. When reverting back to v0.30.0, I have no such problem and can add CuArrays without packages clashing. Thanks for letting me know if you get the same issue!. Full error message suggest that Adapt, GPUArrays, CUDA and NNlib are clashing with CuArrays but I am a beginner at Julia so not sure I interpret the error correctly. I tried removing Oceananigans and all dependencies, installing CuArrays first and then adding Oceananigans, but I get the same problem doing things in that order. ```; ERROR: Unsatisfiable requirements detected for package CuArrays [3a865a2d]:; CuArrays [3a865a2d] log:; ├─possible versions are: [0.2.1, 0.3.0, 0.4.0, 0.5.0, 0.6.0-0.6.2, 0.7.0-0.7.3, 0.8.0-0.8.1, 0.9.0-0.9.1, 1.0.0-1.0.2, 1.1.0, 1.2.0-1.2.1, 1.3.0, 1.4.0-1.4.7, 1.5.0, 1.6.0, 1.7.0-1.7.3, 2.0.0-2.0.1, 2.1.0, 2.2.0-2.2.2] or uninstalled; ├─restricted to versions * by an explicit requirement, leaving only versions [0.2.1, 0.3.0, 0.4.0, 0.5.0, 0.6.0-0.6.2, 0.7.0-0.7.3, 0.8.0-0.8.1, 0.9.0-0.9.1, 1.0.0-1.0.2, 1.1.0, 1.2.0-1.2.1, 1.3.0, 1.4.0-1.4.7, 1.5.0, 1.6.0, 1.7.0-1.7.3, 2.0.0-2.0.1, 2.1.0, 2.2.0-2.2.2]; ├─restricted by compatibility requirements with Adapt [79e6a3ab] to versions: [0.2.1, 0.3.0] or uninstalled, leaving only versions: [0.2.1, 0.3.0]; │ └─Adapt [79e6a3ab] log:; │ ├─possible versions are: [0.3.0-0.3.1, 0.4.0-0.4.2, 1.0.0-1.0.1, 1.1.0, 2.0.0-2.0.2] or uninstalled; │ └─restricted to versions 2 by Oceananigans [9e8cae18], leaving only versions 2.0.0-2.0.2; │ └─Oceananigans [9e8cae18] log:; │ ├─possible versions are: 0.30.0 or uninstalled; │ └─Oceananigans [9e8cae18] is fixed to version 0.30.0; ├─restricted by compatibility requirements with GPUArrays [0c68f7d7] to versions: 0.2.1",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/796:678,install,installing,678,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/796,1,['install'],['installing']
Deployability,"Hi all,. I run a 2D grid setup (y-z) for a while and I get advection terms through a kernel function below. ; With the recent upgrade, I switched the advection scheme from WENO5() to WENO(). ; However, the output of the u advection (fluctuation and background) becomes zero. And x-momentum is perfectly balanced between Coriolis force and viscosity.; The problem only happens in the flat direction and it remains with 5th order upwind too. I wonder if I write the function wrong, or the model really does not calculate the advection for the velocity in the flat direction. ```; @inline function _Duu_div(i,j,k,grid,dep,params); return div_𝐯u(i, j, k, grid,params.adv,params.vel,params.tracer);; end; Duu_div = Field(KernelFunctionOperation{Face, Center, Center}(_Duu_div,model.grid;parameters=(; adv = model.advection, vel = model.velocities, tracer = model.velocities.u),computed_dependencies = (1)));; ```. _My model Setup:_. ```; ## Grid ; L = 1e3;; H = 100;. Ny = 1024;; Nz = 128;. ## Streched Grid; hc = 1.37;; theta_s = 3.53;. @inline Space_z(k) = (hc*(k-Nz-1)/Nz + (H-hc)*sinh(theta_s*(k-Nz-1)/Nz)/sinh(theta_s));. grid = RectilinearGrid(GPU(); topology = (Flat, Periodic, Bounded),; size = (Ny, Nz),; y = (0, L),; z = Space_z,; );; ```. ```; model = NonhydrostaticModel(; grid, buoyancy = BuoyancyTracer(),; advection = WENO(; grid = grid),; timestepper = :RungeKutta3,; tracers = (:b), ; coriolis = FPlane(f=f),`; forcing = (b=b_force, u=u_force, v=v_force, w=w_force),; closure = (vertical_diffusive_closure, horizontal_diffusive_closure),; boundary_conditions = (u = u_bcs,),; background_fields = (u = U_bfield, b = B_bfield)); ```; Let me know if more information is needed.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2742:126,upgrade,upgrade,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2742,1,['upgrade'],['upgrade']
Deployability,"Hi all,; Thank you very much for your quick response. But I run the above working sample with the following errors. I just updated Oceananigans this morning to v0.73.5 and then changed interpolate.jl as #2397 suggested. . The line number could be a little different than yours. So I attached my interpolate.jl. Thanks. . Best,; Si; [interpolate.zip](https://github.com/CliMA/Oceananigans.jl/files/8388789/interpolate.zip). <details open>; <summary>Error info after #2397 produced from the above Minimum Working Example</summary>. ```; TaskFailedException. nested task error: BoundsError: attempt to access 30-element OffsetArray(::Vector{Float64}, -2:27) with eltype Float64 with indices -2:27 at index [28]; Stacktrace:; [1] throw_boundserror(A::OffsetArrays.OffsetVector{Float64, Vector{Float64}}, I::Tuple{Int64}); @ Base ./abstractarray.jl:691; [2] overdub; @ ~/.julia/packages/KernelAbstractions/3ZHln/src/compiler.jl:51 [inlined]; [3] overdub; @ ./abstractarray.jl:656 [inlined]; [4] getindex(::OffsetArrays.OffsetVector{Float64, Vector{Float64}}, ::Int64); @ ~/.julia/packages/OffsetArrays/I5Pfg/src/OffsetArrays.jl:425 [inlined]; [5] overdub; @ ~/.julia/packages/OffsetArrays/I5Pfg/src/OffsetArrays.jl:425 [inlined]; [6] overdub; @ ~/.julia/packages/Oceananigans/Yz6ub/src/Fields/interpolate.jl:9 [inlined]; [7] fractional_z_index(::Float64, ::Center, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}); @ ~/.julia/packages/Oceananigans/Yz6ub/src/Fields/interpolate.jl:44 [inlined]; [8] overdub; @ ~/.julia/packages/Oceananigans/Yz6ub/src/Fields/interpolate.jl:44 [inlined]; [9] overdub; @ ~/.julia/package",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2395#issuecomment-1084429618:123,update,updated,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2395#issuecomment-1084429618,1,['update'],['updated']
Deployability,"Hi, is that expected that the docs is not yet updated?. https://clima.github.io/OceananigansDocumentation. For me, it is still showing that you could use 1.6. ![image](https://github.com/CliMA/Oceananigans.jl/assets/5797727/fc26483d-0518-4bb0-b399-bae80d6e3345)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3190#issuecomment-1642612901:46,update,updated,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3190#issuecomment-1642612901,1,['update'],['updated']
Deployability,Highlighting important breaking changes in releases,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3147:43,release,releases,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3147,1,['release'],['releases']
Deployability,"Hm, I see... you might be trying to run the one found inside the `validation` directory, right?. I suggest you start of by trying to run the scripts in the `examples` directory. They are continuously tested and should run with the latest version. We'll figure out though the issues and fix the problems for the scripts that live in the `validation` directory (if you are specifically interested on one of those).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-807697594:187,continuous,continuously,187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-807697594,1,['continuous'],['continuously']
Deployability,Hm... You didn't rush to merge. Tests on master look OK: https://buildkite.com/clima/oceananigans/builds/1587. Also the example seems to be in its latest and greatest version :); https://github.com/CliMA/Oceananigans.jl/blob/27b1324dca660ce8cb7f5e205dd7400bdd23cb3d/examples/Bickley_jet_shallow_water.jl#L83-L86. Also the `dev` version of the docs includes the example: https://clima.github.io/OceananigansDocumentation/dev/generated/Bickley_jet_shallow_water/; (without the `\begin{align}...`) You may need to refresh the browser to see it? Or make sure you select `dev` version from the dev; I think the default version of the docs you see is the latest stable tagged release. The buildkite icon status I think is confused...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798958905:670,release,release,670,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798958905,1,['release'],['release']
Deployability,"Hm.... what version of Oceananigans did you try the quick_start example with? I'd bet you used a very old version, e.g., a version _before_ the breaking release [v0.90.0](https://github.com/CliMA/Oceananigans.jl/releases/tag/v0.90.0)?. The quick start example works on `main` for me:. ```julia; julia> using Oceananigans; Precompiling Oceananigans; 1 dependency successfully precompiled in 12 seconds. 160 already precompiled.; [ Info: Oceananigans will use 8 threads. julia> grid = RectilinearGrid(size=(128, 128), x=(0, 2π), y=(0, 2π), topology=(Periodic, Periodic, Flat)); 128×128×1 RectilinearGrid{Float64, Periodic, Periodic, Flat} on CPU with 3×3×0 halo; ├── Periodic x ∈ [-7.51279e-18, 6.28319) regularly spaced with Δx=0.0490874; ├── Periodic y ∈ [-7.51279e-18, 6.28319) regularly spaced with Δy=0.0490874; └── Flat z. julia> model = NonhydrostaticModel(; grid, advection=WENO()); NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0); ├── grid: 128×128×1 RectilinearGrid{Float64, Periodic, Periodic, Flat} on CPU with 3×3×0 halo; ├── timestepper: QuasiAdamsBashforth2TimeStepper; ├── advection scheme: WENO reconstruction order 5; ├── tracers: (); ├── closure: Nothing; ├── buoyancy: Nothing; └── coriolis: Nothing. julia> ϵ(x, y) = 2rand() - 1; ϵ (generic function with 1 method). julia> set!(model, u=ϵ, v=ϵ). julia> simulation = Simulation(model; Δt=0.01, stop_iteration=100); Simulation of NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0); ├── Next time step: 10 ms; ├── Elapsed wall time: 0 seconds; ├── Wall time per iteration: NaN days; ├── Stop time: Inf days; ├── Stop iteration : 100.0; ├── Wall time limit: Inf; ├── Callbacks: OrderedDict with 4 entries:; │ ├── stop_time_exceeded => Callback of stop_time_exceeded on IterationInterval(1); │ ├── stop_iteration_exceeded => Callback of stop_iteration_exceeded on IterationInterval(1); │ ├── wall_time_limit_exceeded => Callback of wall_time_limit_exceeded on IterationInterval(1); │ └─",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3551#issuecomment-2051288613:153,release,release,153,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3551#issuecomment-2051288613,2,['release'],"['release', 'releases']"
Deployability,Hmm I just hit merge but then thought I should probably have bumped the patch number right?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3383#issuecomment-1804206049:72,patch,patch,72,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3383#issuecomment-1804206049,1,['patch'],['patch']
Deployability,Hmm I'll have a go at that tomorrow. Weirdly when I try and run the above script from the Oceananigans repo (i.e. not installed with Pkg) I do not get this problem.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1806441042:118,install,installed,118,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1806441042,1,['install'],['installed']
Deployability,"Hmm ok the one you've linked to is a later build than the one displayed on the PR (the PR displayed 1923, but you linked to 1965). I'm not 100% sure what's up. Perhaps normally we would just restart the build. Unfortunately we cannot restart it now because the documentation build will _never_ finish. We need to solve this docs issue in order to get our CI pipeline functioning correctly again.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817011090:358,pipeline,pipeline,358,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817011090,1,['pipeline'],['pipeline']
Deployability,"Hmm ok. But just to make sure I understand --- you are saying that you _disagree_ with Yang, Park, and Moin (2017) paper, correct? In that paper, they apparently use the Lagrangian-scale-averaged (LSA) SGS model. <img width=""1040"" alt=""image"" src=""https://github.com/CliMA/Oceananigans.jl/assets/15271942/b67188a4-a2e9-4705-955c-7ba42bdd4d3a"">. Of course, whether or not this LSA closure has an issue, there could _still_ be a problem with wall-modeled stresses when using `AnisotropicMinimumDissipation`. (In the above paper, they claim that the SGS model doesn't matter.). I'm curious what happens if you try. ```julia; advection = WENO(order=9); ```. You may also need to add something like `halo = (4, 4, 4)` or `halo = (5, 5, 5)` to the `RectilinearGrid` constructor. I'm also curious what happens if you use `advection = WENO(order=9)` with `closure = nothing`. > Now the problem is that if someone can implement this filtering in the code or not. Are you referring to the time-filtering described in equation 2?. <img width=""1047"" alt=""image"" src=""https://github.com/CliMA/Oceananigans.jl/assets/15271942/f9bb4cf7-06bd-4aef-9965-f7ace6530a44"">. It is not necessary to change Oceananigans to implement this --- it can be implemented in your script. You need to introduce a new field to store the time-filtered wall velocity, and update this field in a `Simulation.callbacks`. It should be straightforward. By the way, I think this should be a Discussion (rather than an issue), because this does not (as far as I can tell) involve a bug of some kind in Oceananigans. It could motivate implementing a new SGS model, but that's a discussion for another day perhaps...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1653726059:1335,update,update,1335,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1653726059,1,['update'],['update']
Deployability,"Hmm, it could make sense to make benchmarking results more prominent. Please feel free to update the benchmarks. More generally I think we need a streamlined way of updating the benchmarks so that we can recreate them easily for (for example) every minor release.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880829840:90,update,update,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880829840,2,"['release', 'update']","['release', 'update']"
Deployability,"Hmm, so after working on `ContinuousForcing` a bit, I think this discussion needs to be updated:. 1. The keyword we'll provide is `field_dependencies`, as in `field_dependencies=(:u, :v, :T)`.; 2. We'll have to put a function `regularize_boundary_conditions` inside the constructor for `IncompressibleModel`, since fundamentally this function needs to know what the `model_fields` are.; 3. Since `regularize_boundary_conditions` goes inside `IncompressibleModel`, we don't need to modify `FieldBoundaryConditions`. Instead, the boundary conditions can be ""regularized"" prior to being passed to the various field tuples. This may simplify `FieldBoundaryConditions`.; 4. The implementation within `BoundaryFunction` can basically follow what was done for `ContinuousForcing`; the only difference being that, as mentioned above, the `side` at which the boundary function is applied needs to be known for correct indexing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/897#issuecomment-702327644:88,update,updated,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/897#issuecomment-702327644,1,['update'],['updated']
Deployability,"Hmm. I think given general `u, v` we need to solve an elliptic equation to find `psi`, eg `lap(psi) = dx v - dy u`. Then the geostrophic buoyancy field is `b = f * dz(psi)`. For some boundary conditions or assumptions of homogeneity, we can possibly simplify this procedure. One could in principle use the conjugate gradient solver to write a fully general utility, though. Hopefully this task will be taken up once the hydrostatic model is operational. Some care must be taken with the geostrophic mode / computation of the geostrophic free surface displacement for the hydrostatic model. Or, given a geostrophic buoyancy field we can integrate in `z` (eg summation of `b * dz`). This would be the intent of `IntegratedField`, but nobody has implemented that yet. Absent those techniques I think the best method for idealized problems is to use a geostrophic streamfunction. This is illustrated by the Eady turbulence example:. https://github.com/CliMA/Oceananigans.jl/blob/0153dec98e58b7819ae8e1d57516fc7994694762/examples/eady_turbulence.jl#L38-L41. https://github.com/CliMA/Oceananigans.jl/blob/0153dec98e58b7819ae8e1d57516fc7994694762/examples/eady_turbulence.jl#L151-L152. It's also used in a number of validation cases, but those aren't always useful for general audiences.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1846#issuecomment-877480974:636,integrat,integrate,636,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1846#issuecomment-877480974,3,"['Integrat', 'integrat']","['IntegratedField', 'integrate']"
Deployability,"Hmmm - I am skeptical about that from a computer point of view? In an implicit algorithm and/or radiative transfer alg the next step often depends on the result of the previous steps. . As every CCE graduate student learns, computers take many tens of cycles to evaluate an operation like a an add or multiply. The operation is sequential and carried out in a multi-stage pipeline in the heart of a CPU (or GPU). So unless the compiler has something else for the processor to do, the processor will have to wait for one step to make it through the pipeline before the next step? . I think the normal way to do this is to have some inner horiz blocking that is flexible (and can be 1,1) and then iterate over levels with some intermediate stores? The horiz block can be some fraction of inner cache or GPU local proc shared mem. The math doesn't quite look at this way because it assumes that a+b and/or a*b etc.. happen ""instantaneously"". It does not take into account that the awnser from a*b might take; 5-10 clock cycles to pass through the CPU floating point unit. . I think that is fairly generally true? Functional style code in Julia should make it possible; to express this in a fairly clean way, but with flexibility to change blocking for different ; target arch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/470#issuecomment-541363073:372,pipeline,pipeline,372,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/470#issuecomment-541363073,2,['pipeline'],['pipeline']
Deployability,Hmmm I thought this line would be enough. https://github.com/CliMA/Oceananigans.jl/blob/723ff2d69bb486a856c9748f84e56aef5e524c9e/docs/make.jl#L150. but you're right we used to use the `TRAVIS_REPO_SLUG` environment variable for this I think. Looks like the GitHub Actions equivalent is `GITHUB_REPOSITORY` like you linked to. But there doesn't seem to be one for Buildkite... https://github.com/JuliaDocs/Documenter.jl/blob/fa459cf315425d4fc5bdfbd6769f3b0e78f4a795/src/deployconfig.jl#L644-L666,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782346460:469,deploy,deployconfig,469,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782346460,1,['deploy'],['deployconfig']
Deployability,Hmmm it should precompile with Julia 1.6 (at least as of a week or two ago) so the error is a bit surprising. How did you first install Oceananigans?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1635#issuecomment-832277131:128,install,install,128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1635#issuecomment-832277131,1,['install'],['install']
Deployability,"Hmmm yes we may need to re-open when we do imminent major upgrades to 1.8 and KernelAbstractions 0.8! But probably best to close for now since its not _currently_ an issue, apparently.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-1059781739:58,upgrade,upgrades,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-1059781739,1,['upgrade'],['upgrades']
Deployability,"Hmmm, should we be using [`CUDA.has_cuda_gpu`](https://cuda.juliagpu.org/dev/api/essentials/#CUDA.has_cuda_gpu) instead of [`CUDA.has_cuda`](https://cuda.juliagpu.org/dev/api/essentials/#CUDA.has_cuda)?. Since Tartarus actually has GPUs (we just hide them via an environment variable in CI, e.g. https://github.com/CliMA/Oceananigans.jl/blob/main/.buildkite/pipeline.yml#L77) I can see `CUDA.has_cuda_gpu` returning false (which we want) while `CUDA.has_cuda` would return true (not what we want). This might fix the unit tests (`test_field.jl`) but there are other failures that might not be related to this. Confusingly I see no recent changes in CUDA.jl that would lead to a difference in behavior for `has_cuda` (see changes for `src/initialization.jl`) but there were a lot of changes between v3.3.6 and v3.5.0 that I wouldn't understand: https://github.com/JuliaGPU/CUDA.jl/compare/v3.3.6...v3.5.0",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942845682:358,pipeline,pipeline,358,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942845682,1,['pipeline'],['pipeline']
Deployability,"Hmmm, the docs Manifest.toml is using Bibliography.jl v0.2.6 and BibParser.jl v0.1.10 while this PR upgrades to Bibliography.jl v0.2.8 and BibParser.jl v0.1.14. The packages definitely have some open issues so maybe there's a new bug with `@book` entries or something? `Kumar16` is a `@book` entry. Maybe worth opening an issue on Bibliography.jl if we can isolate the issue?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1677#issuecomment-845166446:100,upgrade,upgrades,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1677#issuecomment-845166446,1,['upgrade'],['upgrades']
Deployability,"Hooks},typeof(Oceananigans.TimeSteppers.gpu_calculate_Gu!),OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Oceananigans.Advection.CenteredSecondOrder,NonTraditionalFPlane{Float64},Nothing,AnisotropicDiffusivity{Float64,Float64,Float64,NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}}},NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},Nothing,NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}}}, ::UInt64; kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:maxthreads,),Tuple{Int64}}}) at /home/ptuckman/.julia/packages/GPUCompiler/4e9CU",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:11758,Continuous,ContinuousForcing,11758,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,2,['Continuous'],['ContinuousForcing']
Deployability,"Hooks},typeof(Oceananigans.TimeSteppers.gpu_calculate_Gu!),OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Oceananigans.Advection.CenteredSecondOrder,NonTraditionalFPlane{Float64},Nothing,AnisotropicDiffusivity{Float64,Float64,Float64,NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}}},NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},Nothing,NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}}}; kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:maxthreads,),Tuple{Int64}}}) at /home/ptuckman/.julia/packages/CUDA/dZvbp/src/compiler/exe",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:6547,Continuous,ContinuousForcing,6547,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"Hooks},typeof(Oceananigans.TimeSteppers.gpu_calculate_Gu!),OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Oceananigans.Advection.CenteredSecondOrder,NonTraditionalFPlane{Float64},Nothing,AnisotropicDiffusivity{Float64,Float64,Float64,NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}}},NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},Nothing,NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}}}; name::String, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:maxthreads,),Tuple{Int64}}}) at /home/ptuckman/.julia/packages/CUDA/dZvbp/sr",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:17024,Continuous,ContinuousForcing,17024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"Hooks},typeof(Oceananigans.TimeSteppers.gpu_calculate_Gu!),OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},Oceananigans.Advection.CenteredSecondOrder,NonTraditionalFPlane{Float64},Nothing,AnisotropicDiffusivity{Float64,Float64,Float64,NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}}},NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},Nothing,NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}}}}, ::Dict{UInt64,Any}, ::UInt64) at ./dict.jl:452; [10] macro expansion at ./lock.jl:183 [inlined]; [11] check_cache(::typeof(CUDA._cufunction), ::GPUCompiler.Fu",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:9285,Continuous,ContinuousForcing,9285,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"How about discussions? Anyone can start a discussion about running simulations with immersed boundaries, for example. Perhaps that will also encourage developers to open discussions like that too. Wiki and docs are more work because they will have to be updated / changed. That’s why experimental things aren’t well-documented; it’s an onerous burden to formally document rapidly changing features.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2355#issuecomment-1067549112:254,update,updated,254,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2355#issuecomment-1067549112,1,['update'],['updated']
Deployability,How sure are you about the precise version? Is `GPUCompiler@0.16.5` the breaking release for you?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418267423:81,release,release,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418267423,1,['release'],['release']
Deployability,"Huh, so its the difference between. https://user-images.githubusercontent.com/15271942/165942956-f73c2f7c-88dd-4c1a-9775-c209a2007894.mp4. where the hydrostatic pressure is treated _explicitly_ (via RK3 in this example) by integrating buoyancy, and. https://user-images.githubusercontent.com/15271942/165942854-8061b8fe-a254-4ed0-8f66-d6283415fd8a.mp4. where pressure is treated implicitly with an elliptic solve and fractional step (at every RK3 stage...). I tested reducing the time-step and don't see any convergence with time-step. Reducing the time-step and running 5 times as long produces. https://user-images.githubusercontent.com/15271942/165946791-6cb90b71-f361-42d9-82db-b16baaf6c3db.mp4. On `main` the same does:. https://user-images.githubusercontent.com/15271942/165952404-00e93a46-65a2-4b9b-a617-43a424f455b1.mp4. Note also these results depend on resolution (which I'm not showing). So it seems both are wrong but one is more so and it's O(1) in time. I also tested WENO5 advection (no difference) and high resolution (seems to make a difference).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1114810950:223,integrat,integrating,223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1114810950,1,['integrat'],['integrating']
Deployability,"Hydrostatic pressure is _supposed to be_ calculated by integrating downwards using a stencil in which pressure is located at `(Center, Center, Center)`. This requires interpolating buoyancy to `(Center, Center, Face)`. However, in the kernel of the integral, the buoyancy is multiplied by `Δzᵃᵃᶜ(i, j, k+1, grid)`:. https://github.com/CliMA/Oceananigans.jl/blob/ade8ff03da722d1dd904022fc60997093d9e2e0f/src/Models/IncompressibleModels/update_hydrostatic_pressure.jl#L15. This isn't the correct kernel if the integral corresponds to a discretization of the hydrostatic pressure term in the vertical momentum equation (omitting `i, j` for brevity) using a pressure field `p` located at (`Center, Center, Center`):. ```julia; (p[k] - p[k-1]) / Δzᵃᵃᶠ[k] = ℑzᵃᵃᶠ(k, b); ```. In other words, differencing a field at vertical `Center` requires dividing by `Δzᵃᵃᶠ`:. https://github.com/CliMA/Oceananigans.jl/blob/ade8ff03da722d1dd904022fc60997093d9e2e0f/src/Operators/derivative_operators.jl#L12. Another way to view the error is that we are multiplying a field located at `Center, Center, Face` by a grid metric located at `Center, Center, Center`. Possibly this error crept into the code due to a confusion about the superscript notation (there have been a few others of this nature). I'm not sure if it's easily caught; it probably depends on the importance of a horizontally-variable hydrostatic pressure.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1693:55,integrat,integrating,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1693,1,['integrat'],['integrating']
Deployability,I [paused](https://github.com/JuliaRegistries/General/pull/59278) the release of 0.75.3 when I realised the pinning was not done correctly.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2488#issuecomment-1112090393:70,release,release,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2488#issuecomment-1112090393,2,['release'],['release']
Deployability,"I agree @ali-ramadhan that we should make sure that `Flat` works before we update the examples on `master`. I thought that updating the examples might be a good way to figure out what's not working, and it has helped with that so it's been time well spent. Still some work to do though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-809430737:75,update,update,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-809430737,1,['update'],['update']
Deployability,"I agree that `z_faces` is clearer! I just wanted to be sure we were talking about the same changes. I believe that specifying the grid with `z_faces` does indeed require knowledge of the number of grid points, because the user specification depends on the vertical _index_. The case of a uniform grid illustrates this point: `z_faces = k -> (k - 1) * Lz / (Nz + 1)` for `z = (0, Lz)`. Note that the keyword argument `z` is redundant, since it can be inferred from `z_faces` (by evaluating `z_faces(1)` and `z_faces(Nz+1)`. Thus I am not sure I agree that we should require the `z` keyword argument when `z_faces` is supplied. I think it'd be nice to have both a ""discrete"" interface that uses the `z_faces` or `z_cell_interfaces` keyword argument, as well as a ""continuous"" interface that accepts a ""mapping"" or ""stretching"" function as I described above. With a ""continuous"" interface, the interval kwarg `z` is required because it cannot be inferred from `z_stretching` or `z_map` (whichever we prefer).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1551#issuecomment-815159490:762,continuous,continuous,762,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1551#issuecomment-815159490,4,['continuous'],['continuous']
Deployability,"I agree with this --- though this something similar is already our policy. PRs that have breaking changes are supposed to update the minor version, and also describe the PR in words in the top comment, which certainly includes describing a breaking change. It's true that we don't achieve this, however. We could be stricter in PR reviews?. To make it easier to find the specific PRs that has the change which updates the minor version within release notes, we could have a policy to put the new version in the name of the PR, ie preface the PR with. ```; (0.83.0) Title of the PR; ```. That way one can easily find the relevant PR if there is a long list of PRs within a particular release, only one of which is important. (Note this information can also be obtained via `git blame` on `Project.toml`.). One concern I have is that we struggle to enforce conventions already, like style conventions in source code, branch naming conventions, etc. For example, issues should be labeled --- this issue itself needs a label!. What do we think about working on making PR titles more descriptive and helpful, rather than copying information that I think should be in PRs into release notes? It's nice to encourage people to look at PRs too; we can have conversations there (unlike release notes). As far as breaking changes go, by definition they should be encapsulated in a single PR so I think this will succeed. Another policy change that could help is to require two approving reviews (rather than just one), and to also informally try to be more strict about approving PRs. > Users can have an idea if their code will break with updating, which might prompt them to update more often; (I think in practice lots of users don't update their code regularly since there's a looming possibility of their code to stop running and them having to deal with errors.). Isn't trying an update and running some code / some kind of test the fastest and most effective way to deciding whether to update some package",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3147#issuecomment-1595628085:122,update,update,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3147#issuecomment-1595628085,4,"['release', 'update']","['release', 'update', 'updates']"
Deployability,"I agree. Perhaps we could link releases that introduce breaking changes to a specific PR that's dedicated to updating the version and detailing the API breaking change. This might be tedious work (for us) because it involves tracking down all API changes in past PRs, but it might be very beneficial for users",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3147#issuecomment-1595189695:31,release,releases,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3147#issuecomment-1595189695,1,['release'],['releases']
Deployability,I agree: updates are indeed in order but *only* when spherical coordinate grids are fully supported out there.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1779#issuecomment-871896189:9,update,updates,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1779#issuecomment-871896189,1,['update'],['updates']
Deployability,"I am a little perplexed, because it seemed that tests on the PR passed (except for documentation, which is mysteriously broken right now due to a dependency that's getting updated during `dev ..` in the docs build). ![image](https://user-images.githubusercontent.com/15271942/114247433-ed6df200-9949-11eb-8649-f270ee7e12c7.png). ![image](https://user-images.githubusercontent.com/15271942/114247449-f5c62d00-9949-11eb-96af-02532bde76ef.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817010193:172,update,updated,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817010193,1,['update'],['updated']
Deployability,"I am glad that we are talking about this and I'm also happy to help if I can. One thing that I noticed on the docs is that we say we are using the finite volume method but then we never actually integrate the PDEs to obtain the equations in terms of the cell averaged quantities. I think this would be helpful to the user as it would point out the differences between the value at a point and the cell average of that quantity. I don't think there needs to be a lot but integrating the tracer equation first, since that's easier, and the integrating the momentum equation would add someting which at that moment I don't think is present. What do you think @navidcy ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1318#issuecomment-873594269:195,integrat,integrate,195,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1318#issuecomment-873594269,3,['integrat'],"['integrate', 'integrating']"
Deployability,"I am including an update of my notes. Differences of note:. - Doing everything in 2D, but can downgrade to 1D if people feel this is confusing. I thought this would work well with the 2D picture we have already; - Using overline to denote a cell-averaged quantity. I know the code doesn't do this but this is the convention in the literature and seems good to have something to distintuish between cell-average and simply value; - The final answer is indeed in terms of quantities are the edges but the final equation is exact. The approximations come in when we approximate those fluxes using the cell-averaged quantities. We have a bunch of ways of doing this and I for one would like to discuss this more, but thought we should discuss what I have so far before going any further. ![Finite_Volume_Tracer_Equation](https://user-images.githubusercontent.com/8239041/124492299-4222dc80-dd82-11eb-9484-72f57f4f65ff.jpeg)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1318#issuecomment-874189245:18,update,update,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1318#issuecomment-874189245,2,['update'],['update']
Deployability,I am running a few more times just to check. I'll update once the results are in.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-924068319:50,update,update,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-924068319,1,['update'],['update']
Deployability,"I am using Oceananigans v0.54.0 with Julia v1.6 on GPU. I tried setting an initial condition in salinity as follows:. ```; Stop = 29.5; Sbot = 32; ztop = -35; zbot = -70; dSdz = (Sbot-Stop)/ztop; S_func(x, y, z) = Stop + dSdz*(z > ztop)*z ; set!(model, S=S_func); ```. and got the error copied below. Note that this works fine in Julia v1.5.4. . ```; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI ~/.julia/packages/MPI/3q18R/deps/deps.jl:15; ERROR: LoadError: MethodError: no method matching set!(::Field{Center, Center, Center, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3}}, RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, CuArray{Float64, 2}}}}}}, ::typeof(S_func)); Closest candidates are:; set!(::Oceananigans.Fields.AbstractField, !Matched::Number) at /home/guptam/.julia/packages/Oceananigans/SPGnT/src/Fields/set!.jl:14; set!(::Oceananigans.Fields.AbstractField{X, Y, Z, A, G} where G, !Matched::Oceananigans.Fields.AbstractField{X, Y, Z, A, G} where G) where {X, Y, Z, A} at /home/guptam/.julia/packages/Oceananigans/SPGnT/src/Fields/set!.jl:16; set!(!Matched::Oceananigans.Fields.AbstractField{X, Y, Z, A, G} where {X, Y, Z, A<:(OffsetArrays.OffsetArray{T, D, var""#s203""} where {T, D, var""#s203""<:Array}), G}, ::Function) at /home/guptam/.julia/p",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1555:489,Configurat,Configuration,489,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1555,1,['Configurat'],['Configuration']
Deployability,"I am using the master branch for nutrient tracers with a 3rd DST advection scheme. I found that the halo points don't have the same values as the boundaries in a periodic domain. Below is the configuration I use and a slice of u velocity. Not sure it's a bug or you intended to do so... Also, the fancy logger disappeared after I updated to 0.36.0. ```julia; grid = RegularCartesianGrid(size=(32, 2, 32), extent=(2*32, 2*2, 2*32), halo = (2, 2, 2)). RegularCartesianGrid{Float64, Periodic, Periodic, Bounded}; domain: x ∈ [0.0, 66.0], y ∈ [0.0, 6.0], z ∈ [-64.0, 2.0]; topology: (Periodic, Periodic, Bounded); resolution (Nx, Ny, Nz): (32, 2, 32); halo size (Hx, Hy, Hz): (2, 2, 2); grid spacing (Δx, Δy, Δz): (2.0, 2.0, 2.0); ```; ```julia; T_bcs = TracerBoundaryConditions(Ogrid, top = BoundaryCondition(Flux, Qᵀ), ; bottom = BoundaryCondition(Gradient, ∂T∂z)). model = IncompressibleModel(; architecture = CPU(),; grid = grid,; coriolis = FPlane(f=f),; buoyancy = SeawaterBuoyancy(equation_of_state=LinearEquationOfState(α=α, β=β)),; closure = AnisotropicMinimumDissipation(),; boundary_conditions = (T=T_bcs,); ); ```; ```julia; model.velocities.u.data.parent[:,:,3]; 36×6 Array{Float64,2}:; -0.0085938 -0.00844015 -0.0085938 -0.00844015 -0.0085938 -0.00844015; -0.010009 -0.0104645 -0.010009 -0.0104645 -0.010009 -0.0104645; -0.00859588 -0.00912747 -0.00829848 -0.00823567 -0.00859588 -0.00912747; -0.00742535 -0.00655195 -0.00594664 -0.00595502 -0.00742535 -0.00655195; -0.00536066 -0.0038463 -0.00437428 -0.00422142 -0.00536066 -0.0038463; -0.00241687 -0.00325761 -0.00216266 -0.00211736 -0.00241687 -0.00325761; 0.00258328 0.00188971 0.00159199 0.00141804 0.00258328 0.00188971; 0.00289388 0.00378436 0.00257106 0.00259916 0.00289388 0.00378436; 0.00363445 0.00407903 0.00342151 0.00360496 0.00363445 0.00407903; 0.00575018 0.00480254 0.00481157 0.00447708 0.00575018 0.00480254; 0.00667745 0.00577658 0.00495125 0.00499728 0.00667745 0.00577658; 0.00464067 0.00487611 0.00543163 0.00506227 0.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/949:192,configurat,configuration,192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/949,2,"['configurat', 'update']","['configuration', 'updated']"
Deployability,I am very impressed by the continuous flow of amazing technical and scientific accomplishments from the CliMA group. But by far the most impressive feat is that you have managed to drag @johncmarshall54 onto GitHub. 🤣,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1334#issuecomment-777162790:27,continuous,continuous,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1334#issuecomment-777162790,1,['continuous'],['continuous']
Deployability,"I believe that . https://github.com/CliMA/Oceananigans.jl/blob/b22057a49dfe25b1b091d4d4c9cdb0e126bc0c62/docs/make.jl#L1. should be replaced with. ```julia; push!(LOAD_PATH, joinpath(@__DIR__, ""."")); ```. Supposedly `docs/make.jl` from the repo's home directory, right? Thus going a level up is not appropriate?. But a better way to do it is to delete `push!(LOAD_PATH...` from within `docs/make.jl` completely and make sure we include it in our workflow when building the docs locally or on servers, e.g., see . https://github.com/JuliaGPU/CUDA.jl/blob/96d6e11259053573ad8164f462d9f9eb8e204893/.buildkite/pipeline.yml#L338-L342. cc: @ali-ramadhan, @glwagner",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1777:605,pipeline,pipeline,605,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1777,1,['pipeline'],['pipeline']
Deployability,I brought this back to 0.68.7. Let's wait for this PR and also for #2181 before bumping up minor release.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2186#issuecomment-1021905407:97,release,release,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2186#issuecomment-1021905407,1,['release'],['release']
Deployability,I bumped v0.52.0 in PR #1406 but I'll wait until this PR is merged to tag the release so we can have `WindowedSpatialAverage` in v0.52.0.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-788011514:78,release,release,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-788011514,1,['release'],['release']
Deployability,"I can confirm that I tried this on a server and after freshly installing the data it worked fine. I should say that I didn't run the tests exactly but ran this code below. Note the comment was just to make it easier for me to parse the output. ```; using Test; include(""dependencies_for_runtests.jl""); include(""data_dependencies.jl""). include(""regression_tests/shallow_water_bickley_jet_regression.jl""). @testset ""Shallow Water Regression"" begin; @info ""Running shallow water regression tests..."". for arch in (CPU(), GPU()); for formulation in (VectorInvariantFormulation(), ConservativeFormulation()); print("" FJP: arch and formulation = "", arch, formulation, ""\n""); @testset ""Shallow Water Bickley jet simulation [$(typeof(arch)), $(typeof(formulation))]"" begin; @info "" Testing shallow water Bickley jet simulation regression [$(typeof(arch)), $(typeof(formulation))]""; run_shallow_water_regression(arch, formulation; regenerate_data = false); end; end; end; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998:62,install,installing,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998,1,['install'],['installing']
Deployability,"I can confirm that I'm getting the same error in a new environment with just Oceananigans installed. looks like this error occurs on the lines of code where a mutable function is called that returns `nothing`. such as `foreach(mask_immersed_field!, model.tracers)` , . `fill_halo_regions!(merge(model.velocities, model.tracers), model.clock, fields(model))`. here:. https://github.com/CliMA/Oceananigans.jl/blob/main/src/Models/NonhydrostaticModels/update_nonhydrostatic_model_state.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1616927702:90,install,installed,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1616927702,1,['install'],['installed']
Deployability,"I can confirm that when I updated this branch with what is currently on master, the shallow water tests do pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-809440414:26,update,updated,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-809440414,1,['update'],['updated']
Deployability,I can do this but I think I need repo owner rights (to install the bot)?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1519#issuecomment-873324849:55,install,install,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1519#issuecomment-873324849,1,['install'],['install']
Deployability,"I can't run the MPI. I need to be directed to some instructions to setup my MPI. @simone-silvestri pointed at the [MPI docs](https://juliaparallel.org/MPI.jl/stable/configuration/#Configuration). Do I need MPIPreferences? I don't know... @glwagner did you have to use that? If not, why must I... we are using the same machine...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2282501425:165,configurat,configuration,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2282501425,2,"['Configurat', 'configurat']","['Configuration', 'configuration']"
Deployability,I can't start Oceananigans normally anymore even starting from a fresh install,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1625:71,install,install,71,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1625,1,['install'],['install']
Deployability,I checked and it is showing that I am running version 1.9.2. I just installed juliaup and made sure Oceanostics was updated. I got the following error; ```; [36147] signal (11.1): Segmentation fault; in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/BBL_with_oscillations_code_10_percent.jl:4; Allocations: 609090 (Pool: 608187; Big: 903); GC: 1; /var/spool/pbs/mom_priv/jobs/1726131.casper-pbs.SC: line 31: 36147 Segmentation fault (core dumped) julia --project BBL_with_oscillations_code_10_percent.jl /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2231354575:68,install,installed,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2231354575,2,"['install', 'update']","['installed', 'updated']"
Deployability,I could have a look on this PR. @simone-silvestri could you update the first comment or is it reflecting what's in here?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-973179963:60,update,update,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-973179963,1,['update'],['update']
Deployability,I could try to regenerate the data with the version of Oceananigans we used the last time (I guess it's this one https://github.com/CliMA/Oceananigans.jl/releases/tag/v0.76.5) but only 10 time steps and see if the results change,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430413002:154,release,releases,154,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430413002,1,['release'],['releases']
Deployability,I created a clean branch from the latest version of master that passed the documentation buildkite test. Looking at my old updated `benchmarks.md` through a markdown viewer/editor and I saw that a table that's written in HTML might be causing trouble so I replaced it with a code block quote table.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1952:123,update,updated,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1952,1,['update'],['updated']
Deployability,"I don't have time to open a PR for this, but based on the listed breaking changes, it's very likely we'll have to modify the code in order for the upgrade to work.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3309#issuecomment-1749205412:147,upgrade,upgrade,147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3309#issuecomment-1749205412,1,['upgrade'],['upgrade']
Deployability,I don't know If this is an issue with the latest tagged release. is it?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3161#issuecomment-1623538067:56,release,release,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3161#issuecomment-1623538067,1,['release'],['release']
Deployability,"I don't know how relevant these changes are, but I found some more type instabilities in the split explicit free surface model's adams bashforth time integrator. Removing them similar to #3212 . Alternatively we could also hardcode the constants. https://github.com/CliMA/Oceananigans.jl/blob/9140a74536784396d368cf8205432433a9deea3d/src/Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface_kernels.jl#L11-L19. as Float32. ```julia; const β = 0.281105f0; const α = 1.5f0 + β; ```; etc. as this will directly upcast to Float64 if that's used, but not cause a type instability with Float32. But this will again cause problems if we ever want to use something else than Float32/64... Now just the `U★, η★` get a bit lengthier!",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3213:150,integrat,integrator,150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3213,1,['integrat'],['integrator']
Deployability,"I don't know what happened but yesterday I could type ""using Oceananigans"" after starting julia --project and it worked fine. This morning, after a software update on ubuntu, now I'm getting a CUDA ERROR. See below. Any ideas what I can do to try and fix this?. ```; julia> using Oceananigans; ┌ Warning: Recursion during initialization of CUDA.jl; └ @ CUDA ~/.julia/packages/CUDA/0p5fn/src/initialization.jl:41; ┌ Error: Could not initialize CUDA; │ exception =; │ CUDA error (code 803, CUDA_ERROR_SYSTEM_DRIVER_MISMATCH); │ Stacktrace:; │ [1] throw_api_error(::CUDA.cudaError_enum) at /home/fpoulin/.julia/packages/CUDA/0p5fn/lib/cudadrv/error.jl:97; │ [2] __configure__(::Bool) at /home/fpoulin/.julia/packages/CUDA/0p5fn/src/initialization.jl:98; │ [3] macro expansion at /home/fpoulin/.julia/packages/CUDA/0p5fn/src/initialization.jl:29 [inlined]; │ [4] macro expansion at ./lock.jl:183 [inlined]; │ [5] _functional(::Bool) at /home/fpoulin/.julia/packages/CUDA/0p5fn/src/initialization.jl:26; │ [6] functional(::Bool) at /home/fpoulin/.julia/packages/CUDA/0p5fn/src/initialization.jl:19; │ [7] libcuda() at /home/fpoulin/.julia/packages/CUDA/0p5fn/src/initialization.jl:50; │ [8] (::CUDA.var""#697#cache_fptr!#11"")() at /home/fpoulin/.julia/packages/CUDA/0p5fn/lib/utils/call.jl:31; │ [9] macro expansion at /home/fpoulin/.julia/packages/CUDA/0p5fn/lib/utils/call.jl:39 [inlined]; │ [10] macro expansion at /home/fpoulin/.julia/packages/CUDA/0p5fn/lib/cudadrv/libcuda.jl:35 [inlined]; │ [11] macro expansion at /home/fpoulin/.julia/packages/CUDA/0p5fn/lib/cudadrv/error.jl:102 [inlined]; │ [12] cuDeviceGetCount(::Base.RefValue{Int32}) at /home/fpoulin/.julia/packages/CUDA/0p5fn/lib/utils/call.jl:93; │ [13] length at /home/fpoulin/.julia/packages/CUDA/0p5fn/lib/cudadrv/devices.jl:111 [inlined]; │ [14] iterate at /home/fpoulin/.julia/packages/CUDA/0p5fn/lib/cudadrv/devices.jl:106 [inlined] (repeats 2 times); │ [15] iterate at ./iterators.jl:139 [inlined]; │ [16] iterate at ./iterators.jl:13",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1189:157,update,update,157,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1189,1,['update'],['update']
Deployability,"I don't think those docs are updated for this PR yet, right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1874#issuecomment-883037288:29,update,updated,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1874#issuecomment-883037288,1,['update'],['updated']
Deployability,"I don't think we can update packages right now, see #1561 . Which test is failing? Do we need to revert the PR? I thought only the documentation was failing but maybe I screwed up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817008059:21,update,update,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817008059,1,['update'],['update']
Deployability,"I don't think we should depend on a heavy package like Plots.jl, but we might want to automatically install and load it when someone runs an example like the rising thermal bubble one on the README. Might be related to #14 so Requires.jl would help but we also want to add/build the package too.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/195:100,install,install,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/195,1,['install'],['install']
Deployability,"I don't think you need to change it. I'm running on an older version of Julia, so I didn't update to 0.78.1. But the MWE I added in https://github.com/tomchor/Oceanostics.jl/issues/91 seems to work with 0.78.1 on main without the fix.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2818#issuecomment-1311951022:91,update,update,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2818#issuecomment-1311951022,1,['update'],['update']
Deployability,"I don't understand why we'd want the external state to be part of the classification, if its just the condition we can reuse all of the infrastructure for users to specify it as continuous or discrete functions etc.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1981709990:178,continuous,continuous,178,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1981709990,1,['continuous'],['continuous']
Deployability,"I get the same problem, and it looks like the boundary condition is added correctly:. ```julia; julia> model.velocities.u; 1×1×32 Field{Face, Center, Center} on ImmersedBoundaryGrid on CPU; ├── grid: 1×1×32 ImmersedBoundaryGrid{Float64, Flat, Flat, Bounded} on CPU with 0×0×3 halo; ├── boundary conditions: FieldBoundaryConditions; │ └── west: Nothing, east: Nothing, south: Nothing, north: Nothing, bottom: ZeroFlux, top: Value, immersed: ImmersedBoundaryCondition; └── data: 1×1×38 OffsetArray(::Array{Float64, 3}, 1:1, 1:1, -2:35) with eltype Float64 with indices 1:1×1:1×-2:35; └── max=-0.0857023, min=-0.972122, mean=-0.393485; ```. I think `FluxBoundaryCondition` is tested here:. https://github.com/CliMA/Oceananigans.jl/blob/f7acd8d0bd30dbe1ccb72854b6ea0ccab1eae0b5/test/test_boundary_conditions_integration.jl#L231-L241. (though only for `NonhydrostaticModel`)... Might make sense to build up those boundary condition integration tests for `HydrostaticFreeSurfaceModel` and also for `ValueBoundaryCondition` and `GradientBoundaryCondition`. @simone-silvestri is this broken because we are now using ""boundary-aware"" derivatives?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3208#issuecomment-1660104317:927,integrat,integration,927,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3208#issuecomment-1660104317,1,['integrat'],['integration']
Deployability,I guess from a refactoring point of view it might also make sense to wait until we're closer to Oceananigans v1.0 before splitting off into multiple smaller packages. If we have to refactor code that involves deep changes (still likely) right now it might be easier to refactor 1 package rather than refactor across multiple packages + tag releases etc.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1553#issuecomment-815049079:340,release,releases,340,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1553#issuecomment-815049079,1,['release'],['releases']
Deployability,"I guess if you have a (julia) function that takes a particle time-step, given a velocity field (ie 3D array), then you can use PlanktonIndividuals.jl online with Oceananigans now, using the `Callback` Oceananigans feature that's designed for integration with other models. So maybe it already works in fact.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2512#issuecomment-1117996871:242,integrat,integration,242,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2512#issuecomment-1117996871,1,['integrat'],['integration']
Deployability,"I guess imo it's a bit of a chicken and egg problem, since bugs are found when people start use the feature. And we don't wanna release the feature until bugs are found. So my thinking in suggesting an example is an attempt to break the cycle. But it's a good point that the first users of a feature that's still unvalidated should probably more ""experienced"" ones. Since now there's an example in the works with immersed boundaries, does that mean that that feature is not considered experimental anymore?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3148#issuecomment-1600893042:128,release,release,128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3148#issuecomment-1600893042,1,['release'],['release']
Deployability,"I guess my opinion is that from an organizational and psychological point of view it makes the most sense to have ""real"" validation experiments and a validation pipeline _when / if_ somebody can take responsibility for maintaining it. At that time, I think that person will be showered with praise, making the job less thankless! I think this is the best strategy in the long run for eventually having legitimate validation experiments. Having them sitting around in a half-baked state could produce the false impression in a future collaborator that such a task does not remain to be done.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872406505:161,pipeline,pipeline,161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872406505,1,['pipeline'],['pipeline']
Deployability,I guess this breaks the advective forcing API so does it need a minor release?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3215#issuecomment-1688662028:70,release,release,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3215#issuecomment-1688662028,1,['release'],['release']
Deployability,"I guess this is not something I was thinking of but John pointed out that it's crucial that the Fourier-spectral solver returns a nonhydrostatic pressure that when used to update the velocity field, produces a velocity field that is non-divergent at every grid point. Otherwise mass is being unphysically accumulated and tracer quantities will also be accumulated due to nonzero Q(∇·**u**) terms in the flux divergence operators ∇·(**u**Q) = Q(∇·**u**) + **u**·∇Q, leading to divergences and blowups. Right now the wavenumbers are computed as; ```; kx = 2π/Lx # DFT; ky = 2π/Ly # DFT; kz = 1π/Ly # DCT; ```; which should lead to a solver whose solutions converge spectrally. While it may solve for the pressure at the center of the cells very accurately, if ∇·**u** is non-zero this will be a big problem. This will require some testing on my part to see which solver best satisfies ∇·**u**. If we can satisfy it to machine precision, that would be amazing. If not, hopefully it can satisfy it better than the conjugate-gradient method and then we can use the continuity equation to enforce ∇·**u**=0. An alternative (not sure if this would work) is to discretize the derivative operators using a second-order centered-difference scheme (which I believe I've done for the 1D solver, and previous 3D solver) which explicitly places the discretization points on the center of the cells. Then the wavenumbers are; ```; kˣ² = (4 / Δx²) * sin(πl / Nˣ)² # DFT; kʸ² = (4 / Δy²) * sin(πm / Nʸ)² # DFT; kᶻ² = (2 / Δz²) * (cos(πn / Nᶻ) - 1) # DCT; ```; and of course you expect second-order convergence. But if it better satisfies ∇·**u**=0 then it might be the way to go. You can also derive wavenumbers for fourth-order discretization. EDIT: Fixed second-order wavenumbers.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/8:172,update,update,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/8,1,['update'],['update']
Deployability,"I guess to have a continuous diffusion function that has the same features of the discrete version (with field dependency and parameters), we could implement something very similar to the `ContinuousForcing.` That would require a regularization.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3840#issuecomment-2401764624:18,continuous,continuous,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3840#issuecomment-2401764624,2,"['Continuous', 'continuous']","['ContinuousForcing', 'continuous']"
Deployability,I have a version of `CumulativeIntegral` in `z` that can be used as an example.; It needs to be updated though. I was using it to estimate some initial thermal-wind currents for a baroclinic instability simulation.; https://github.com/iuryt/NorthAtlanticBloom/blob/main/src/01-model/cumulative_vertical_integration.jl. I believe `device_event` is not available anymore.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3582#issuecomment-2098894777:96,update,updated,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3582#issuecomment-2098894777,1,['update'],['updated']
Deployability,"I have another branch for the full Gordon Bell work, but it's probably better that I split it up in different PRs, so the splitting of communication and computation will be done here. (This PR is a bit outdated so I will update it)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1513642998:221,update,update,221,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1513642998,1,['update'],['update']
Deployability,"I have been playing with the one_dimensional_diffusion.jl example and have found something a bit odd. When I run it, with everything already installed, it seems to complain about [line18](https://github.com/CliMA/Oceananigans.jl/blob/a343711f1101b1a433124f5f9697ce60b1011a40/examples/one_dimensional_diffusion.jl#L18) with the following error,. ```; ERROR: LoadError: package `Oceananigans [9e8cae18]` has same name or UUID as the active project; ```. Is this expected? . Is this something we want to avoid?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1205:141,install,installed,141,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1205,1,['install'],['installed']
Deployability,"I have been running on the system Julia for these, I attempted to do my own install but I do not think I ended up doing much with it. I believe `gcc` is a dependency for the subsequent modules as for example when I run:; ```; module --force purge; module load ncarenv/23.10 ; module load ncarcompilers/1.0.0; ```; the last line returns ; ```; Lmod has detected the following error: These module(s) or; extension(s) exist but cannot be loaded as requested: ""ncarcompilers/1.0.0""; Try: ""module spider ncarcompilers/1.0.0"" to see how to load the module(s).; ```; which does not happen if I include `gcc`. I was also able to run my code without netcdf!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2258913846:76,install,install,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2258913846,1,['install'],['install']
Deployability,"I have created a new validation script called `shallow_jet_topography.jl` that evolves the barotropically unstable jet (like in the shallow water example) but now over a shelflike topography. It can be found in `valiation/shallow_water`. . Some preliminary results are shown below. First, this is the case with a flat bottom and it does produce the same results as what we have in the example. ![Geostrophic_State](https://github.com/CliMA/Oceananigans.jl/assets/8239041/3f8cc034-6764-4d3e-a7c1-510d7b55073d). Second, this is an example of prograde topography with the shallow water on the right of the propogating jet. ![Geostrophic_State](https://github.com/CliMA/Oceananigans.jl/assets/8239041/d262c028-1ea3-41b8-8573-8ab4419ed891). Third, this is an example of retrograde topopgraphy with the shallow water on the right of the propogating jet. ![Geostrophic_State](https://github.com/CliMA/Oceananigans.jl/assets/8239041/064ebf34-b8bf-4cca-9000-a9edb1bdfd94). The growth rates differ but I want to update my linear stability code to compute the growth rates so that we can validate that the results are quantitatively close. But for this case here the prograde case is slightly more unstable with the rettrograde case, which is qualitatively correct.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3486#issuecomment-1973911400:1002,update,update,1002,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3486#issuecomment-1973911400,1,['update'],['update']
Deployability,"I have deleted all the folder in "".julia/"", and when I try to re-install Oceananigans in Julia 1.5.2, a lot of packages still show ""installed"". How can I deleted these installed packages in Julia?. For example, I need to downgrade the ""ArrayInterface"" to v2.14.17. `julia> pkg""add Oceananigans, JLD2, Plots"" `; ```; Installing known registries into `~/.julia`; ######################################################################## 100.0%; Added registry `General` to `~/.julia/registries/General`; Resolving package versions...; Installed libfdk_aac_jll ─────────────── v0.1.6+4; Installed Expat_jll ──────────────────── v2.2.7+6; Installed Zstd_jll ───────────────────── v1.4.8+0; Installed Measures ───────────────────── v0.3.1; Installed ArrayInterface ─────────────── v3.1.7",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-824517434:65,install,install,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-824517434,9,"['Install', 'install']","['Installed', 'Installing', 'install', 'installed']"
Deployability,"I have introduced the option to iterate as well an option to use the formulation that assumes infinite iterations (`iterations = nothing`). If you want to give it a try for a simple configuration that would be nice!. example:; ```julia; grid = RectilinearGrid(size = (10, 10, 10), extent = (1, 1, 1)). advection = MPData(grid; iterations = 1) # equivalent to UpwindBiased(; order = 1); advection = MPData(grid; iterations = 3) # 3 corrective iterations; advection = MPData(grid; iterations = nothing) # ∞ iterations (a little more expensive); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1942023450:182,configurat,configuration,182,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1942023450,2,['configurat'],['configuration']
Deployability,"I have noticed an issue with immersed boundaries in the latest version of [Oceananigans](https://github.com/CliMA/Oceananigans.jl/releases/tag/v0.91.4). At the immersed boundaries we expect the default tracer flux boundary conditions to be zero. While doing energy analysis, I noticed that something seemed off with my simulation. After increasing the colorrange in my animation, I noticed that near my immersed boundaries, the minimum buoyancy was drifting to values much less than the minimum value prescribed by the surface value boundary conditions, suggesting that the tracer flux at the immersed boundary is non-zero. For context, I'm running a 2D Horizontal Convection simulation, in which the buoyancy is initialized as zero everywhere to start. I apply a buoyancy gradient at the surface, cooling half of the surface and warming the other half. The boundaries are insulated and I have a pair of gaussian hills at the bottom defined using the immersed boundary function. Link to my [simulation setup](https://github.com/ikeshwani/HorizontalConvection/blob/main/src/simulation.jl). . Here is an animation of topographically-constrained horizontal convection where the nonhydrostatic pressure is not separated:. https://github.com/user-attachments/assets/9fd054c9-f1da-4b8d-9d04-b99479dbe348. Notice there seems to be a source of dense fluid in the basin between the hills. . To address this issue @hdrake and I separated the hydrostatic and nonhydrostatic pressure components in the `NonHydrostaticModel` by changing https://github.com/CliMA/Oceananigans.jl/blob/406eb9c5c7a9fc86947747116128c8c1ba4c93d4/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl#L70. To `hydrostatic_pressure_anomaly = CenterField(grid)`. Here is the animation of topographically-constrained horizontal convection when the pressure components are separated:. https://github.com/user-attachments/assets/249e9814-335f-49bb-999e-73a6f95fcf37",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3677:130,release,releases,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3677,1,['release'],['releases']
Deployability,"I have updated #1085 so that it runs, but it's still on a rectilinear grid. . My next step is to update it to a lat-lon grid. . Do we want to do this on a new PR?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2584#issuecomment-1142173685:7,update,updated,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2584#issuecomment-1142173685,2,['update'],"['update', 'updated']"
Deployability,"I have written a script, with much help from @ali-ramadhan and @glwagner , that computes the rates of convergence for the one dimensinal constant advection case using two approaches: the 1st to 6th order schemes that I mentioned before, and the 2nd to 5th order schemes that are in Oceananigans. The results are shown below. ![convergence_rates_all](https://user-images.githubusercontent.com/8239041/102648898-511fa580-4136-11eb-99c9-a02b85465c96.png). ![convergence_rates_Oceananigans](https://user-images.githubusercontent.com/8239041/102648908-5381ff80-4136-11eb-8feb-de736ec30438.png). **Good news:** Oceananigams produces the correct slopes within error for all the cases. **Next problem:** Figure out why we didn't get the right slope in the other calculation from before and fix whatever the bug might be. You can find the code [here](https://github.com/CliMA/Oceananigans.jl/blob/fjp/update-convergence-tests/validation/new_framework/rates_of_convergence.jl)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-748252029:892,update,update-convergence-tests,892,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-748252029,1,['update'],['update-convergence-tests']
Deployability,"I haven't had time to investigate further, but I haven't gotten a similar error in a long time, so I'm assuming some update fixed this. Since it sounds like you didn't find anything, I think I'll close this now. Thanks!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299214723:117,update,update,117,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299214723,1,['update'],['update']
Deployability,"I installed Julia and set up Oceananigans on my laptop and when I try running `test_shallow_water_mode.jl` I get an error. I suspect this is because of my laptop more than the PR but any ideas what's going on here? . ```[2021/01/07 11:52:45.500] INFO Testing time-stepping ShallowWaterModels [CPU(), (Periodic, Periodic, Bounded)]...; Time-stepping ShallowWaterModels [CPU(), (Periodic, Periodic, Bounded)]: Error During Test at /home/fpoulin/software/Oceananigans.jl/test/test_shallow_water_models.jl:82; Test threw exception; Expression: time_stepping_shallow_water_model_works(arch, topo, nothing); TaskFailedException:; BoundsError; Stacktrace:; [1] getindex at ./number.jl:83 [inlined]; [2] advective_tracer_flux_x at /home/fpoulin/software/Oceananigans.jl/src/Advection/upwind_biased_advective_fluxes.jl:105 [inlined]; [3] h_solution_tendency at /home/fpoulin/software/Oceananigans.jl/src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl:71 [inlined]; [4] cpu_calculate_Gh! at /home/fpoulin/.julia/packages/KernelAbstractions/jAutM/src/macros.jl:230 [inlined]; [5] __thread_run(::Int64, ::Int64, ::Int64, ::KernelAbstractions.Kernel{KernelAbstractions.CPU,KernelAbstractions.NDIterat```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-756242376:2,install,installed,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-756242376,1,['install'],['installed']
Deployability,I just installed Oceananigans on a server that has GPUs and is running julia 1.1.1. When I try and update I get an error saying that the package name could no be resolved. ```; (v1.1) pkg> update Oceanigans; Updating registry at `~/.julia/registries/General`; Updating git-repo `https://github.com/JuliaRegistries/General.git`; ERROR: The following package names could not be resolved:; * Oceanigans (not found in project or manifest); Please specify by known `name=uuid`.; ```. Could this be because of the old version of julia? I have asked if they can update it but no idea if they will.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1468:7,install,installed,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1468,4,"['install', 'update']","['installed', 'update']"
Deployability,"I just tested `DiscreteForcing` and I have almost the same slowdown (I completed 0.20% of the simulation, compared to 0.15% using `ContinuousForcing`). Here's what I used:. ```julia; Z(k) = @inbounds -grid.Lz + grid.Δz*(k-1/2); bottom_mask(k) = @inbounds exp(-(Z(k)+80)^2 / ((2*8)^2)). sponge_u_disc(i, j, k, grid, clock, model_fields) = @inbounds - rate * bottom_mask(k) * (model_fields.u[i, j, k] -0); sponge_v_disc(i, j, k, grid, clock, model_fields) = @inbounds - rate * bottom_mask(k) * (model_fields.v[i, j, k] -0); sponge_w_disc(i, j, k, grid, clock, model_fields) = @inbounds - rate * bottom_mask(k) * (model_fields.w[i, j, k] -0). forc_u = Forcing(sponge_u_disc, discrete_form=true); forc_v = Forcing(sponge_v_disc, discrete_form=true); forc_w = Forcing(sponge_w_disc, discrete_form=true). forcing = (u=forc_u, v=forc_v, w=forc_w); ```. I may have made rookie errors here as well since this is my first time using `DiscreteForcing`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875667870:131,Continuous,ContinuousForcing,131,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875667870,1,['Continuous'],['ContinuousForcing']
Deployability,"I just updated my packages and now I get an error .... UndefVarError: RectilinearGrid not defined; Stacktrace:; [1] top-level scope; @ In[8]:18; [2] eval; @ .\boot.jl:360 [inlined]; [3] include_string(mapexpr::typeof(REPL.softscope), mod::Module, code::String, filename::String); @ Base .\loading.jl:1116. ....with even the simples grid-defenition, e.g. ; ```; Nz = 24 # number of points in the vertical direction; Lz = 32 # domain depth; grid = RectilinearGrid(size = (32, 32, Nz),; x = (0, 64),; y = (0, 64),; z = (-64, 0)); ```; What am I doing wrong?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2077:7,update,updated,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2077,1,['update'],['updated']
Deployability,I know. But we need to plot! I think the issue goes away w Julia v1.9. I updated all deps no restrictions and don’t think there was an issue w Makie.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3161#issuecomment-1622336058:73,update,updated,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3161#issuecomment-1622336058,1,['update'],['updated']
Deployability,I liked the idea of keeping a list of deprecated functions that will be removed after a couple of releases.; At least users know what has happened and are ready for the change that will happen down the line.; I would go with the majority of the opinions on this one.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3490#issuecomment-1979056553:98,release,releases,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3490#issuecomment-1979056553,1,['release'],['releases']
Deployability,"I looked over the paper and I agree with what you say. They prove that ""Algorithm 1"" is only formally second order accurate whereas ""Algorithm 2"" is more accurate, fifth I think? That is a good reason to consider the change. One concern that I have is, as nice as these figures are, I can't really tell much of a difference between column 1 and column 2. Actually, they look pretty identical to me. I can believe that the new method can behave better with the improved accuracy but this example, and the others they consider, don't make this obvous. If they had plotted diagnostics and demonstrated that the new method conserved things better, that would have been more motivation to switch. At the moment, it doesn't seen too pressing, but in principle I'm all for it. Because I am interested in understanding the nuts and bolts of WENO, I will look deeper into this paper and try and figure out exactly what needs to change to upgrade to ""Algorithm 5"".",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1705#issuecomment-874689091:929,upgrade,upgrade,929,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1705#issuecomment-874689091,1,['upgrade'],['upgrade']
Deployability,"I might have been a bit too quick to merge as it seems that some tests are failing on master, and I presume as a result, is why we are not getting the new example in the docs. . @navidcy do you happen to know what's gone wrong? . I see that `align` is still in the example so I wonder if we got confuses in our updates and don't have the latest and greatest version?. ```; # ```math; # \begin{align}; # \overline{\eta}(y) & = - Δη \tanh(y) ,; # \overline{u}(y) & = U \sech^2(y) .; # \end{align}; # ```; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798925559:311,update,updates,311,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798925559,1,['update'],['updates']
Deployability,I moved much of the installation instructions into. https://github.com/CliMA/Oceananigans.jl/wiki/Productive-Oceananigans-workflows-and-Julia-environments. and a little bit into. https://github.com/CliMA/Oceananigans.jl/wiki/Installation-and-getting-started-with-Oceananigans,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2474#issuecomment-1109320532:20,install,installation,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2474#issuecomment-1109320532,2,"['Install', 'install']","['Installation-and-getting-started-with-Oceananigans', 'installation']"
Deployability,I need to digest this suggestion! But in the meantime: does this work for changing `dt`? For idealized / strongly-time-dependent problems we often find it useful to continuously adapt the time-step according to a CFL criteria.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2321#issuecomment-1512063461:165,continuous,continuously,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2321#issuecomment-1512063461,1,['continuous'],['continuously']
Deployability,"I noticed some pages listed in library.mb didn't quite match the pages that are currently in `src`, mist notably (for me) `kernel_function_operation.jl`, so updated it. There probably are more discrepancies, but I also think we don't wanna list some of the more experimental features, so I left the rest as it was.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1943:157,update,updated,157,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1943,1,['update'],['updated']
Deployability,I noticed that `similar(::Field)` does not transfer boundary conditions. https://github.com/CliMA/Oceananigans.jl/blob/a86ef32581192d82a655e1b2ff4411e79917a379/src/Fields/field.jl#L217-L227. so we might need to update . https://github.com/CliMA/Oceananigans.jl/blob/c8a65a4fdeff25722104ced3a0c74d2d921ae1cf/src/Solvers/multigrid_solver.jl#L225-L244. and in particular . https://github.com/CliMA/Oceananigans.jl/blob/c8a65a4fdeff25722104ced3a0c74d2d921ae1cf/src/Solvers/multigrid_solver.jl#L230,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2882:211,update,update,211,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2882,1,['update'],['update']
Deployability,"I opened a wiki for Oceananigans:. https://github.com/CliMA/Oceananigans.jl/wiki. I think we should use the wiki to host practical information and tips for using Oceananigans on various hardware (laptops, CPUs, GPUs), clusters / high-performance computing system (HPCs), and more. Using the wiki this way will allow us to focus the docs on code and numerics, and alleviate the need to submit PRs to update details about using clusters. We need to provide an introduction to Oceananigans ""knowledge base"" (where to find useful information in the documentation, wiki, Github Discussions, and Github Issues) in the README, the docs, and the wiki.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2470:399,update,update,399,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2470,1,['update'],['update']
Deployability,"I ran a few tests using the [Bickley Jet](https://github.com/CliMA/Oceananigans.jl/blob/glw-vw/grid-fitted-incompressible-model/validation/immersed_boundaries/immersed_bickley_jet.jl) with an immersed top wall from the validation script. . ### Surface Normal Velocity; We can easily look at the surface normal velocity of the immersed wall (which should be zero) with increased resolution and see that it is converging nicely, as this method should be exact except for the pressure correction, which will scale. ![Bickley_normal](https://user-images.githubusercontent.com/67593861/122986244-2e807a80-d36d-11eb-924a-074ca0ad127c.png). ### Tracer Conservation; We can also look at tracer conservation. The initial concentration is sinusoidal, so the area integrated concentration is zero over the domain initially. I've plotted both the IBM and non-IBM (lighter colors) results to see the differences. This one is on a log plot. You can see that leakage is happening in the IBM versions. It's hard to say how bad the leakage is here, and it'll probably be better to consider an initial constant concentration rather than sinusoidal to see how much leakage is occurring due to the immersed solid. ![volint_Concentration_log](https://user-images.githubusercontent.com/67593861/122986580-a058c400-d36d-11eb-9a7c-e3e8d2a7367e.png). It might be easier to see what is going on in the IBM cases without the log scaling:. ![volint_Concentration](https://user-images.githubusercontent.com/67593861/122989251-984e5380-d370-11eb-88cc-ccf4444fb331.png). ### Integrated Boundary Stress; Finally, I looked at the integrated boundary stress along the top wall. The error between the nonIBM and IBM versions at these same grid sizes are below. Unfortunately this is not getting better with increased resolution. This could be due to base state changes causing the stress to change and not necessarily something wrong with the method. It might take better refinement than 256 x 256 to really see a trend here. ![Bickley_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866285588:753,integrat,integrated,753,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866285588,1,['integrat'],['integrated']
Deployability,"I ran the benchmark again with triply periodic but it's still much slower so the issue might be deeper than the logic in `topologically_conditional_interpolation.jl`. ```; Advection schemes relative performance (GPU); ┌───────────────┬────────────────────────┬──────────┬─────────┬─────────┐; │ Architectures │ Schemes │ slowdown │ memory │ allocs │; ├───────────────┼────────────────────────┼──────────┼─────────┼─────────┤; │ GPU │ CenteredFourthOrder │ 1.50326 │ 1.06836 │ 1.69674 │; │ GPU │ CenteredSecondOrder │ 1.0 │ 1.0 │ 1.0 │; │ GPU │ UpwindBiasedFifthOrder │ 1.69787 │ 1.09472 │ 1.96539 │; │ GPU │ UpwindBiasedThirdOrder │ 1.39899 │ 1.05598 │ 1.57057 │; │ GPU │ WENO5 │ 33.2728 │ 5.21273 │ 43.9286 │; └───────────────┴────────────────────────┴──────────┴─────────┴─────────┘; ```. ```diff; diff --git a/benchmark/benchmark_advection_schemes.jl b/benchmark/benchmark_advection_schemes.jl; index 81b083e1..e6ba8cd6 100644; --- a/benchmark/benchmark_advection_schemes.jl; +++ b/benchmark/benchmark_advection_schemes.jl; @@ -7,7 +7,8 @@ using Benchmarks; # Benchmark function. function benchmark_advection_scheme(Arch, Scheme); - grid = RegularRectilinearGrid(size=(192, 192, 192), extent=(1, 1, 1)); + topo = (Periodic, Periodic, Periodic); + grid = RegularRectilinearGrid(topology=topo, size=(192, 192, 192), extent=(1, 1, 1)); model = IncompressibleModel(architecture=Arch(), grid=grid, advection=Scheme()); ; time_step!(model, 1) # warmup; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868122855:811,a/b,a/benchmark,811,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868122855,2,['a/b'],['a/benchmark']
Deployability,"I realize that this is a problem with how `Makie` is installed on my compter. I will try and figure this out but if anyone has any advice, please let me know.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2542#issuecomment-1124016648:53,install,installed,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2542#issuecomment-1124016648,1,['install'],['installed']
Deployability,"I remember there is a problematic issue with initialisation and bathymetry. You need to be extra careful to put initial condition that is consistent with the bathymetry. We should actually fix that because it was so counterintuitive. That’s what I was trying to understand back in the day and fix but I lost steam. I couldn’t set up very simple things, let alone global configuration.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3486#issuecomment-1973413973:370,configurat,configuration,370,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3486#issuecomment-1973413973,2,['configurat'],['configuration']
Deployability,I see that this PR moved LangangianParticles module inside Models. This is breaking change and we should bump minor release.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1532088152:116,release,release,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1532088152,1,['release'],['release']
Deployability,I sent a flurry of updates once I had the validation case coded up! It should work now,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2390#issuecomment-1082107314:19,update,updates,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2390#issuecomment-1082107314,1,['update'],['updates']
Deployability,"I started down that road, but had to install some packages to get the script to run and haven't returned to it yet! I'm confused at how running the exact same code that you ran will uncover an issue. Isn't it more likely that there is a bug in the script, than some issue with computers / software versions?. An efficient path forward might be to write a test that fails due to this error? Then submit a PR that adds the failing test, and we can collaborate on getting the test to pass. We'd have to do this anyways; and writing a test is a good way to come up with a minimal example that we could use to isolate the issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817957659:37,install,install,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817957659,1,['install'],['install']
Deployability,"I started tackling this issue in ClimaAtmos last week. I wrote a module, `OutputPathGenerator`, in a separate utilities package ([documentation](https://clima.github.io/ClimaUtilities.jl/dev/outputpathgenerator/)). This module defines an object, `OutputPathGenerator` that can be extended with different `OutputPathGeneratorStyle`s. ; The `OutputPathGenerator` is used in a `generate_output_path` function that takes the base output dir and the style.; The simplest of such styles is ""overwrite"". . The style that is currently being used in Atmos is `ActiveLinkStyle`. Citing from the docs:; > This style provides a more convenient and non-destructive approach. It manages a sequence of subfolders within the base directory specified by `output_path`. It also creates a symbolic link named `output_active` that points to the current active subfolder. This allows you to easily access the latest simulation results with a predictable path. > Example:; > Let's assume your output_path is set to data.; > If data doesn't exist, the module creates it and returns data/output_active. This link points to the newly created subfolder data/output_0000.; > If data exists and contains an output_active link pointing to data/output_0005, the module creates a new subfolder data/output_0006 and updates output_active to point to it.; > If data exists with or without an output_active link, the module checks for existing subfolders named data/output_XXXX (with XXXX a number). If none are found, it creates data/output_0000 and a link data/output_active pointing to it. Atmos uses `OutputPathGenerator` internally. My vision is that end users would be providing the base path and possibly choosing a `Style` if they don't want the default behavior (which is the ActiveLinkStyle). `Styles` are Julia objects and new ones can be defined in scripts by implementing a method for the function `generate_output_path`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3543#issuecomment-2041168662:1284,update,updates,1284,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3543#issuecomment-2041168662,2,['update'],['updates']
Deployability,I suggest a patch release?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3585#issuecomment-2147275085:12,patch,patch,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3585#issuecomment-2147275085,2,"['patch', 'release']","['patch', 'release']"
Deployability,"I think ""resolution"" is ordinary usage, in the sense of. https://en.wikipedia.org/wiki/Image_resolution#Pixel_count. I do agree though that the term ""resolution"" has several definitions, which is a reason to consider changing to more precise terminology. The keyword argument to grid constructors is `size`, so that's a good choice. I think the distinction between ""grid size"" and ""halo size"" is ambiguous (isn't the halo part of the grid?) But perhaps we can reinforce these notions with more distinct terminology (eg using just ""size"" and just ""halo"" rather than ""halo size""). All of the grid constructors should be updated with this change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1927#issuecomment-894675637:618,update,updated,618,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1927#issuecomment-894675637,1,['update'],['updated']
Deployability,"I think I have answered my own question. If you think of the momentum equation in terms fo the stress tensor, then in vector form it is. ``; ∂ₜuᵢ - ∂ⱼ⋅σᵢⱼ= 0,; ``. where the second term is the divergence of the stress tensor. If we integrate this over the volume, and divide by the volume then we get upon using **Gauss' Divergence Theorem**. ``; ∂ₜūᵢ =1/Vfcc∭ ∂ⱼ⋅σᵢⱼ = 1/Vfcc ∬ σᵢⱼ⋅n̂ dS; ``. In the case of an idea fluid we have `σᵢⱼ=-pδᵢⱼ` and therefore our equation above becomes. ``; ∂ₜūᵢ = 1/Vfcc ∬ σᵢⱼ⋅n̂ dS = - 1/Vfcc ∬ p δᵢⱼ⋅ n̂ⱼ dS = - 1/Vfcc ∬ p n̂ᵢ dS; ``. This shows that the desired result follows from application of Gauss' Divergence Theorem on the stress tensor.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2475#issuecomment-1111343916:232,integrat,integrate,232,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2475#issuecomment-1111343916,1,['integrat'],['integrate']
Deployability,I think I'm happy with the finite volume operators in this PR. Happy to make changes based on feedback so we have versatile and flexible operators. In the next PR I will fully integrate them with the code and make sure they are correct and performant. It will also show if I missed any operators.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/283#issuecomment-546648773:176,integrat,integrate,176,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/283#issuecomment-546648773,1,['integrat'],['integrate']
Deployability,"I think [Coordinate system and notation](https://clima.github.io/OceananigansDocumentation/stable/physics/notation/) page in the docs needs to be updated. . First, we don't only use a Cartesian grid anymore (we don't even use the word Cartesian for the `RegularRectilinearGrid` anymore). I'm not sure how you guys wanna adapt this page and notation for the spherical coordinate grid though. Second, a part of the math isn't rendering and I'm not sure why.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1779:146,update,updated,146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1779,1,['update'],['updated']
Deployability,I think it must be blocked by some dependency since CompatHelper updates the Manifest. I guess merging #1295 caused some conflicts so I might try bumping to Adapt v3.0.0 in a different PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1287#issuecomment-756771881:65,update,updates,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1287#issuecomment-756771881,1,['update'],['updates']
Deployability,"I think it only depends on the combination of Boundary conditions you give to the GPU. Anyways, it's a weird error, I don't seem to be able to reproduce it; ```; ssilvest@tartarus:~/stable_oceananigans/Oceananigans.jl$ julia-1.8 --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.8.0 (2022-08-17); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> using Oceananigans, Statistics, Printf, Oceananigans.Units; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided. julia> grid = RectilinearGrid(GPU(), size=(1024, 1024), extent=(2π, 2π),; topology=(Bounded, Bounded, Flat)); 1024×1024×1 RectilinearGrid{Float64, Bounded, Bounded, Flat} on GPU with 3×3×0 halo; ├── Bounded x ∈ [4.64839e-19, 6.28319] regularly spaced with Δx=0.00613592; ├── Bounded y ∈ [4.64839e-19, 6.28319] regularly spaced with Δy=0.00613592; └── Flat z. julia> # forcing; u_forcing(x, y, z, t) = 0.01*cos(5*y); u_forcing (generic function with 1 method). julia> v_forcing(x, y, z, t) = -0.01*cos(5*x); v_forcing (generic function with 1 method). julia> # no-slip boundary conditions; u_bcs = FieldBoundaryConditions(south = ValueBoundaryCondition(0.0),; north = ValueBoundaryCondition(0.0));. julia> v_bcs = FieldBoundaryConditions(east = ValueBoundaryCondition(0.0),; west = ValueBoundaryCondition(0.0));. julia> model = NonhydrostaticModel(timestepper = :RungeKutta3,; advection = UpwindBiasedFifthOrder(),; grid = grid,; boundary_conditions = (u=u_bcs, v=v_bcs),; forcing = (u=u_forcing, v=v_forcing),; buoyancy = nothing,; tracers = nothing,; closure = ScalarDiffusivity(ν=1e-5)); NonhydrostaticModel{GPU, RectilinearGrid}(time = 0 seconds, iteration = 0); ├── grid: 102",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2530#issuecomment-1261415873:499,release,release,499,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2530#issuecomment-1261415873,1,['release'],['release']
Deployability,"I think it's a good idea to mention some basic package management principles --- for people planning to use Oceananigans for research. I think that language could easily fit into ""Installation instructions"":. https://clima.github.io/OceananigansDocumentation/stable/installation_instructions/. I also think people should be able to play around low stress without worrying whether they're doing the ""right"" thing by installing in the global environment. So I think we should frame the ""advice"" carefully, maybe targeting scientists and users getting started on a long-term project.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-826254027:180,Install,Installation,180,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-826254027,2,"['Install', 'install']","['Installation', 'installing']"
Deployability,"I think it's probable that `DiscreteForcing` doesn't have the same performance issues. @ali-ramadhan put together a benchmark script for forcing functions a while ago I thought, but it might have disappeared (because it wasn't informative?) That might've been before we had `ContinuousForcing` though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875640465:275,Continuous,ContinuousForcing,275,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875640465,1,['Continuous'],['ContinuousForcing']
Deployability,"I think it's time to discuss the implementation of an abstraction for implementing drag forces on immersed boundaries. Curious to get feedback on this and also corrections if anything is wrong, plus additional considerations that I may be missing. ## Background. First a bit of background on why we impose quadratic drag boundary conditions on solid surfaces. Similarity theory supposes that shear is a function of only distance $d$ from a wall (here $d$ will also be a coordinate increasing away from the wall), such that in a simple 1D situation,. $$ \partial_d u = \frac{u_\star}{\varkappa d} $$. where $u_\star$ is the friction velocity defined such that $-u_\star^2 = \tau$ where $\tau$ is the kinematic stress, $\varkappa$ is the Von Karman constant. This expression can be integrated from an ""inner layer thickness"" $\ell$ (often called the roughness length, although the word ""roughness"" may be something of a misnomer) to obtain a model for the near-wall velocity profile:. $$ u(d) = \frac{u_\star}{\varkappa} \log \frac{d}{\ell} $$. This formula may then be _inverted_ to find the stress $\tau$ as a function of the near-wall velocity at some _particular distance_ $d = d_0$:. $$ \tau = - u_\star^2 = - c(d_0) u(d_0)^2 $$. where $c = \varkappa^2 / log(d_0/\ell)^2$ is often called the ""drag coefficient"" --- again a bit misleading since it actually depends on $d_0$, ie how far we are from the wall, and so it isn't really a ""coefficient"" in the context of this theory (in other contexts, the drag coefficient is a non-dimensional number that characterizes the bulk drag on an object and in that case its more appropriate). But anyways. When the distance is fixed (ie when we evaluate this on a fixed mesh) --- and the roughness length is given --- then it's a constant. The roughness length is not always constant. Above a wavy free surface, we often use the Charnock relation $\ell = c_g u_\star^2 / g$ where $g$ is gravitational acceleration and $c_g$ is the Charnock parameter, often tak",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3807:780,integrat,integrated,780,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3807,1,['integrat'],['integrated']
Deployability,"I think more validation is great. Integrated cases are split into three categories:. 1. Tests (eg the stuff in `test_dynamics.jl` for NonhydrostaticModel). These run during CI.; 2. `validation/`. These are scientific validation cases that often require scientific interpretation or are expensive. These are similar to ""Tests"" but may lack a quantitative metric of success.; 3. `examples/`. These are intended to showcase the API and library usage to users. They should not be used as tests, because they are very expensive to run (via Documenter) and to maintain (for one because they have a high standard for code quality). I suggest adding bona fide Tests and validation, rather than examples, if we are interested in determining the correctness of the code.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1866#issuecomment-886708305:34,Integrat,Integrated,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1866#issuecomment-886708305,1,['Integrat'],['Integrated']
Deployability,"I think replacing `""docs/*.jld2""` with `""docs/**/*.jld2""` misses the stuff that previously would have been caught:. ```julia;    ~/repos/Oceananigans.jl    tc/nhpressure2 *2 !7 ?1  julia --project=docs/  ✔  9s   base  ; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.8.5 (2023-01-08); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> using Glob. julia> A = glob(""src/*.jl""); 6-element Vector{String}:; ""src/Architectures.jl""; ""src/Biogeochemistry.jl""; ""src/Logger.jl""; ""src/Oceananigans.jl""; ""src/StokesDrift.jl""; ""src/Units.jl"". julia> B = glob(""src/**/*.jl"");. julia> A[1] in B; false. julia> collect( a in B for a in A ); 6-element Vector{Bool}:; 0; 0; 0; 0; 0; 0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3109#issuecomment-1553617356:491,release,release,491,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3109#issuecomment-1553617356,1,['release'],['release']
Deployability,"I think that name makes sense!. For the light attenuaiton model, I'm not sure how it would work without making it a property of the model? If it is a parameter then the update state would need to check if there is a parameter before which might be more ambiguous to set up? . I've rewritten it a little bit to make the integration a nothing operation when the user doesn't specify a model but not sure what the best solution might be here. Perhaps we could make it more generic so users can call any kind of update state operation?. But either way, happy for you to fix these issues!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335069587:169,update,update,169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335069587,3,"['integrat', 'update']","['integration', 'update']"
Deployability,"I think that solution possibly requires the minimum code changes ~~, I've found a way to get the time step in which I'll push in a min but this might be cleaner~~. Update: done this now and it definitely seems like the easiest solution and could be useful in other places too.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1976600277:164,Update,Update,164,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1976600277,1,['Update'],['Update']
Deployability,I think the [docs](https://clima.github.io/OceananigansDocumentation/stable/) aren't being deployed correctly:. ![image](https://github.com/CliMA/Oceananigans.jl/assets/13205162/80a31792-411f-4162-a4e2-d06a9757c86a),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3322:91,deploy,deployed,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3322,1,['deploy'],['deployed']
Deployability,"I think the algorithm for saving register usage could be easier to understand if it is written abstractly (ie within a loop that goes to WENO order `N` rather than written manually. . The main advantage of using metaprogramming is that it will be easier to maintain if this code needs to change in the future (ie even for the trivial reason that julia syntax changes). Rather than having to inspect and change 7 functions we can change one. It'll also main we can probably get away with fewer regression tests. Otherwise, to prevent the code from returning wrong results when/if it needs to be updated in the future, we need to test every WENO order... These seem like pretty significant advantages, but I understand that everyone is busy.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3518#issuecomment-2013055888:594,update,updated,594,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3518#issuecomment-2013055888,1,['update'],['updated']
Deployability,I think the call to `versioninfo` here:. https://github.com/CliMA/Oceananigans.jl/blob/b4e217244f1d594ce2854260e4dfa5c97156e162/.buildkite/pipeline.yml#L27. is throwing an error.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872231740:139,pipeline,pipeline,139,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872231740,1,['pipeline'],['pipeline']
Deployability,"I think the hard part on giving instructions for running it on HPCs is that it all depends on the distribution, permissions, jobs manager etc.. . It is hard to generalize, unless there is an easy way to do so that I haven't thought. I thought about creating a Docker image that could simply run for Julia with all dependencies, but Chris warned on how tricky it is to make Docker work with the GPU efficiently. So I just think this is not applicable. I am trying to install Julia with the main packages and Oceananigans dependencies on the HPCs that I have access and this is not being easy. Sometimes Julia is outdated, or it doesn't precompile packages properly etc. . Python's Conda is very handy for these situations, but It might just be the case I am too new in Julia for the things I am trying to do.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2312#issuecomment-1062495328:466,install,install,466,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2312#issuecomment-1062495328,2,['install'],['install']
Deployability,"I think the immersed boundary condition should be an `ImmersedBoundaryCondition`. ```; @inline linear_drag(i, j, k, grid, clock, fields) = - 0.2 * fields.u[i, j, k]. drag_u = FluxBoundaryCondition(linear_drag, discrete_form=true); u_immersed_bc = ImmersedBoundaryCondition(bottom = drag_u); u_bcs = FieldBoundaryConditions(bottom = drag_u, immersed = u_immersed_bc); ```. I do not think we can use the continuous form because `ImmersedBoundaryCondition` should behave just as another `FieldBoundaryCondition` which is 3D instead of 2D and I do not see a `getbc` defined for a `3DBoundaryFunction` (they are only defined for `XBoundaryFunction`, `YBoundaryFunction` and `ZBoundaryFunction`). we can probably add here the `getbc` method for a _continuous_ immersed boundary condition",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2632#issuecomment-1171400617:402,continuous,continuous,402,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2632#issuecomment-1171400617,1,['continuous'],['continuous']
Deployability,"I think the main downside of a separate package is that we have to maintain two CI pipelines, two docs, etc. The advantages are pretty clear though. It could make sense until there's some external interest in using the solvers in a standalone manner. Then we have both motivation and help to take on the work. The code is already modular with few circular dependencies so I don't think splitting up the repo would be difficult from a purely typing standpoint. I think it's fine if the solvers are specific to `Field` and `AbstractGrid`. One could envision an ecosystem of packages for finite volume calculations on staggered grids:. * `StaggeredVolumes.jl` or maybe `StaggeredFields.jl` (`Oceananigans.Grids, Oceananigans.Operators, Oceananigans.Fields, Oceananigans.AbstractOperations`); * `StaggeredEllipticSolvers.jl` (`Oceananigans.Solvers`) Note that these are both Poisson solvers and Helmholtz solvers.; * We may also want to put the `Simulation` infastructure in a standalone package, because this could be used by any model (not just ocean-specific models); * Anything else?. Then `Oceananigans.jl` is mainly just the physics, models, and time-steppers for ocean problems.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1553#issuecomment-815043149:83,pipeline,pipelines,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1553#issuecomment-815043149,2,['pipeline'],['pipelines']
Deployability,I think the same behavior is there in Documenter.jl v0.25: https://github.com/JuliaDocs/Documenter.jl/blob/fa459cf315425d4fc5bdfbd6769f3b0e78f4a795/src/deployconfig.jl#L702-L708. but would still be good to update. Thanks for catching that!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782312211:152,deploy,deployconfig,152,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782312211,2,"['deploy', 'update']","['deployconfig', 'update']"
Deployability,I think the way to go is to write a single kernel (3D or 2D with a loop in z). In this way you avoid the cost of multiple kernel launching. If you have a 3D kernel with non Local dependencies and you have to update nonlocal values (I don't Think it's the case) you have to make sure that there are no write race conditions,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2600#issuecomment-1147416320:208,update,update,208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2600#issuecomment-1147416320,1,['update'],['update']
Deployability,I think these minor changes allow / encourage the compiler to infer the output type of `offset_data` --- is that right? As far as I can tell it does not change the type that's outputted by `offset_data`. But I could be wrong. Once we confirm the intent we can merge (it could make sense also to add a comment to the code so that this doesn't get reverted for some reason in the future). @wsmoses let us know if you'd like to tag a patch release as well.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3273#issuecomment-1725835152:431,patch,patch,431,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3273#issuecomment-1725835152,2,"['patch', 'release']","['patch', 'release']"
Deployability,I think this is probably ready to merge. The README will need more work soon because we need to update the movies pretty badly with more recent examples (and some sphere stuff too!) So that should be coming relatively soon anyways.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2474#issuecomment-1110514716:96,update,update,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2474#issuecomment-1110514716,1,['update'],['update']
Deployability,I think we are close to sorting this issue out. I will make the update once we figure out the remaining checkpoint issue.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2295431738:64,update,update,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2295431738,1,['update'],['update']
Deployability,"I think we can impose a little more structure that eases biogeochemical model development. One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like. ```julia; struct TracerBasedBiogeochemistry; biogeochemical_tracers; drift_advection_schemes; drift_velocities; transitions; auxiliary_fields; end; ```. and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior. Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow). I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like. ```julia; biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); ```. rather than having to use the ""discrete form"". This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285:776,continuous,continuous,776,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285,1,['continuous'],['continuous']
Deployability,I think we need stretched WENO with 2D coefficients. Now `WENO(grid)` assumes 1D coefficients which is okay for latitude-longitude and rectilinear but not for cubed sphere. It will be straightforward to update WENO once everything is in place,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3266#issuecomment-1723445680:203,update,update,203,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3266#issuecomment-1723445680,1,['update'],['update']
Deployability,I think we should tag a v0.37.0 release to ensure we have a code checkpoint before which we were recomputing w and after which we were not (since it's a change to the numerical methods). Might be good if we do this before merging in RK3.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/948:32,release,release,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/948,1,['release'],['release']
Deployability,"I think we should write a `Field` tutorial that covers this (and everything else...) It's been on my todo list for so many eons. . `fill_halo_regions!` certainly is important. This function fills the halo regions of a field --- that is, a buffer of cells that surrounds the ""interior"" (physical part) of the domain. The halo regions are touched when we evaluate gradients or interpolate across boundaries. They are also used for distributed models (there the halo regions need to be communicated between different regions / processes). In general, the halo regions are linked to the interior values of the field --- so every time interior values are updated, halo regions must be updated for the entire state to be consistent. In short, we need to fill halo regions so that 1) spurious fluxes are not added while evaluating flux divergences across `Bounded` boundaries for `FluxBoundaryConditions`; 2) periodicity is correctly enforced in `Periodic` directions, 3) fluxes are correct for `Value/Gradient` boundary conditions. . I think our philosophy is generally that we want an API in which users don't need to call this function. It's just that people want to do ~~crazy~~ creative and cool!! things and writing an API that supports it all is hard. Or maybe more importantly its a chicken-egg problem so we (developers) need to _see_ the applications in action _first_, then we can design an API (at least for those wild applications out there). That docs section would blur the boundaries between ""developer documentation"" and ordinary documentation (we also need developer documentation...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2442#issuecomment-1100300521:650,update,updated,650,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2442#issuecomment-1100300521,2,['update'],['updated']
Deployability,"I think you have a different vision of what the ""docs"" should be perhaps. Is there maybe another solution that we can entertain? It's just important to understand the ultimate form that this object I am calling the ""documentation"" might have to take. For example check out the documentation for ECMWF's Integrated Forecast System:. https://www.ecmwf.int/en/publications/ifs-documentation. Or the NEMO ocean model:. https://zenodo.org/record/6334656#.YmNicS-B2gQ. We probably will want the docs to be citable, and may also want to submit parts of them as a paper. I'm trying to reduce the amount of work we'll have to do when the time comes around to make that transformation. I also don't want to have to erase this important work and information when we get there. We want to create knowledge in a sustainable way that can persist. So, I also think the information you want to add to the ""knowledge ecosystem"" is very useful, we just have to find the right place to put it. Maybe discussions aren't great for it either and we need another place besides Issues / Discussions / Pull requests for living knowledge.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2464#issuecomment-1107272534:303,Integrat,Integrated,303,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2464#issuecomment-1107272534,1,['Integrat'],['Integrated']
Deployability,I thought that it wouldn’t make sense to register v0.84 and 20min later v0.85…. I added a description of the breaking change in https://github.com/CliMA/Oceananigans.jl/releases/tag/v0.84.0 and one can see in the PRs below the release description for more details.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3153#issuecomment-1613664526:169,release,releases,169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3153#issuecomment-1613664526,2,['release'],"['release', 'releases']"
Deployability,"I tried it on a different computer where I installed datadeps brand new and the tests ran on the CPU. I guess I am catching up to the problem. Unfortunately, my laptop doesn't have a GPU so I need to run it elsewhere to reproduce the problem. Will work on that today.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446678465:43,install,installed,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446678465,1,['install'],['installed']
Deployability,"I tried running two examples in the docstring of `netcdf_output_writer.jl` and found something that I believe needs to be updated. [Line 274](https://github.com/CliMA/Oceananigans.jl/blob/2001a7fae296977608378223045bf46e24ea2853/src/OutputWriters/netcdf_output_writer.jl#L274), defines the nodes but this didn't work for me. I believe we should change it to the following:. `xC, yF = xnodes(Center, grid), ynodes(Face, grid)`. Also, it might helpful to add this line at the beginning, as otherwise, the example does not run,. `using Oceananigans.Grids: xnodes, ynodes, znodes`. If people agree with this I can make the changes but thought I would suggest it before creating a PR.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2986:122,update,updated,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2986,1,['update'],['updated']
Deployability,"I tried to run, but can't find `AdvectiveForcing()`. But I noticed that this is listed in; https://github.com/CliMA/Oceananigans.jl/blob/glw/forcing-features/src/Forcings/Forcings.jl. It also doesn't find `ContinuousForcing`, for instance.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1081973535:206,Continuous,ContinuousForcing,206,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1081973535,1,['Continuous'],['ContinuousForcing']
Deployability,"I tried to update Oceananigans version in ClimaOceanBiogeochemistry as:; ```; Oceananigans v0.92.0 `https://github.com/CliMA/Oceananigans.jl#glw/tuples-with-catke`; ```; Then I ran CATKE together with horizontal closure:; ```; catke = CATKEVerticalDiffusivity(); horizontal_closure = HorizontalScalarDiffusivity(ν=1e3); model = HydrostaticFreeSurfaceModel(; grid,; closure = (catke, horizontal_closure),; ...); ```; It still returns an error message:; `ERROR: type Tuple has no field κe`. Is it indicating the problem is still unresolved, or am I testing in an incorrect way?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2386577814:11,update,update,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2386577814,1,['update'],['update']
Deployability,"I update the internal tide example. Let's merge this so we have an example with bathymetry in the docs?. The latest version of the movie is:. https://github.com/CliMA/Oceananigans.jl/assets/7112768/1bfdca5c-6d49-4101-9037-eadfacea6900. I'm not so sure about 979c2a7; is this a good idea?. cc @simone-silvestri, @glwagner",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983406343:2,update,update,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983406343,1,['update'],['update']
Deployability,I updated the PR with `@diagnostic` and `@setup` as suggested [here](https://github.com/JuliaLang/julia/issues/33418#issuecomment-543098427). Would you like me to work on porting the formatting from MicroLogging & Logging.ConsoleLogger over the ModelLogger next? Or is the getting the PrintableDiagnostic struct created and usable the next priority?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-544160908:2,update,updated,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-544160908,1,['update'],['updated']
Deployability,I updated the model equations and you can find the code here. It occurs to me that I didn't include the topography in the conservative form. I can fix that easily enough but are there other things people would like fixed?. https://github.com/CliMA/Oceananigans.jl/blob/ss-fjp/non-conservative-shallow-water/docs/src/physics/shallow_water_model.md,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1141459542:2,update,updated,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1141459542,1,['update'],['updated']
Deployability,"I updated the original MWE slightly to use a `FlatExtrapolationOpenBoundaryCondition` on the eastern boundary and print more info about the solver:. ```julia; using Printf; using Statistics; using Oceananigans; using Oceananigans.BoundaryConditions: FlatExtrapolationOpenBoundaryCondition; using Oceananigans.Solvers: ConjugateGradientPoissonSolver, fft_poisson_solver; using Oceananigans.Simulations: NaNChecker. L = 100; H = 100. underlying_grid = RectilinearGrid(; CPU(),; Float64,; topology = (Bounded, Bounded, Bounded),; size = (16, 16, 16),; x = (0, L),; y = (0, L),; z = (-H, 0); ). h = H/2; w = L/5; mount(x, y) = h * exp(-x^2 / 2w^2) * exp(-y^2 / 2w^2); bottom(x, y) = -H + mount(x, y). grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bottom)). @inline u_inflow(y, z, t) = 0.01. u_bcs = FieldBoundaryConditions(; west = OpenBoundaryCondition(u_inflow),; east = FlatExtrapolationOpenBoundaryCondition(); ). boundary_conditions = (; u=u_bcs). model = NonhydrostaticModel(;; grid,; boundary_conditions,; timestepper = :RungeKutta3,; pressure_solver = ConjugateGradientPoissonSolver(; grid;; preconditioner = fft_poisson_solver(grid.underlying_grid); ); ). simulation = Simulation(model; Δt=0.01, stop_time=60). function progress(sim); model = sim.model; @printf(; ""iteration: %d, time: %.4f, U_max=(%.2e, %.2e, %.2e)\n"",; iteration(sim),; time(sim),; maximum(abs, model.velocities.u),; maximum(abs, model.velocities.v),; maximum(abs, model.velocities.w); ). @printf(; "" reltol=%.2e, abstol=%.2e, solver iterations: %d, residual: (mean=%.2e, abs(max)=%.2e)\n"",; model.pressure_solver.conjugate_gradient_solver.reltol,; model.pressure_solver.conjugate_gradient_solver.abstol,; iteration(model.pressure_solver),; mean(model.pressure_solver.conjugate_gradient_solver.residual),; maximum(abs, model.pressure_solver.conjugate_gradient_solver.residual); ); end. simulation.callbacks[:progress] = Callback(progress, IterationInterval(1)). nan_checker = NaNChecker(fields=model.velocities,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2412573112:2,update,updated,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2412573112,1,['update'],['updated']
Deployability,I updated the patch,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3174#issuecomment-1624210397:2,update,updated,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3174#issuecomment-1624210397,2,"['patch', 'update']","['patch', 'updated']"
Deployability,I updated the regression tests for shallow water and added them to this branch. I tested it on my laptop and the a cluster and all tested passed on both the CPU and GPU. Does anyone else want to try out the regression tests to see if they work for them? . I am happy to do testing but I can't test it for me as everything seems to be working. Help on this would be greatly apprecited.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1970044516:2,update,updated,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1970044516,1,['update'],['updated']
Deployability,"I updated the title to broaden the issue to include show for `Field`. @simone-silvestri suggests on #2121 that we also include some information about field _values_, like for example maximum and minimum, or mean (or even just print the whole array for small / reduced fields).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2064#issuecomment-1012213458:2,update,updated,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2064#issuecomment-1012213458,1,['update'],['updated']
Deployability,"I wanted to comment on the first step, just to make sure everything is perfectly clear. The x-component of the momentum equation can be written as. `` ; ∂ₜu + g ∂ₓη = Gₓ; ``. The first step of the finite volume method is to integrate over the volume and then divide by the volume. This leads to . ``; ∂ₜū + g/Vfcc ∭ ∂ₓη dV = 1/Vfcc ∭ G_x dV; ``. So far we all agree. If we integrate the term with the free-surface we don't get a line integral, we get a surface integral. Using integration by parts, second integral yields. ``; ∭ ∂ₓη dV = ∬ [ η ]_{west}^{east} dy dz; ``. Line integrals happen from Green's/Stokes' theorems but those begin with area integrals. Unless you are keeping the vertical integral fixed and using Green's theorem on the horizontal integral over the area?. If you wanted to use Green's Theorem in the horizontal, then I believe you would get. ``; ∭ ∂ₓη dV = ∫ [∮ η dy ] dz; ``. I just want to make sure we are being careful and using the right theorem here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2475#issuecomment-1109830407:224,integrat,integrate,224,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2475#issuecomment-1109830407,6,['integrat'],"['integrate', 'integration']"
Deployability,"I was a little bit bothered by the high dissipation of `WENOVectorInvariant`. If you see, especially for a coarse grid (`64²`) enstrophy is almost completely destroyed and the solution looks quite different from the other resolutions (for example compare it to the neighbouring `128²` and `512²`).; The third scheme has a somewhat better conservation of enstrophy (not as good as `VectorInvariant` which is by construction a `EnstrophyConserving` scheme). You can verify it looking at integrated enstrophy below. Blue, red, green and black lines stand for `64², 128², 256², 512²` while dashed-dotted lines are `VectorInvariant`, dashed are `WENOVectorInvariant` and solid are `WENOVectorInvarianZVEL`; ![enstrophy](https://user-images.githubusercontent.com/33547697/157750026-d4ecb5fb-fba1-4e6a-8aaf-6df541e9c513.png). the same plot for integrated energy is a little bit noisy; ![energy](https://user-images.githubusercontent.com/33547697/157750068-467d6799-9fc3-4e3a-af5d-849bb22292d7.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064480583:485,integrat,integrated,485,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064480583,2,['integrat'],['integrated']
Deployability,I was able to reproduce the hanging by running the test manually in the REPL. It gets stuck somewhere in `run!(simulation)` but couldn't get a useful stacktrace out. It does not hang in v0.54.0. I tried downgrading and pinning KernelAbstractions.jl and CUDA.jl back down to the version used in the v0.54.0 Manifest.toml but it still got stuck... Could be some other package. > Should we stop updating docs/Manifest.toml? Is that possible?. Couldn't find anything in the Pkg.jl docs that would help but maybe we should switch the order of the `instantiate` and `develop` calls here? https://github.com/CliMA/Oceananigans.jl/blob/e02790202614916bd918a039216a73c61ff7048a/.buildkite/pipeline.yml#L326,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816731027:680,pipeline,pipeline,680,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816731027,1,['pipeline'],['pipeline']
Deployability,"I was referring to tests in the CI suite, not tests that somebody run somewhere once with one version of the code... (the latter is GREAT, not to diminish the effort @liuchihl!! test like those help us understand what was wrong and how to fix it... but they will get forgotten and not necessarily be repeated every time we update the code .... and if a new bug comes along we might not be able to catch it quickly if there is nothing in the CI suite)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287371326:323,update,update,323,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287371326,1,['update'],['update']
Deployability,"I was thinking that it would be a good idea to make an integration with Python's [`xgcm`](https://github.com/xgcm/xgcm) package easier. The project is relatively new but I expect it to grow given that it has [Pangeo](https://pangeo.io/) support. In my mind, this is related to #1313, since the primary (only?) communication with Python is done through NetCDF files. So including some [grid metrics](https://xgcm.readthedocs.io/en/latest/grid_metrics.html) in the NetCDF output would be helpful. For now I'm not exactly sure what needs to be there since their docs [aren't very explanatory in that sense](https://github.com/xgcm/xgcm/issues/291), but it includes distances between `Face`s and `Center`s of the grids and other measures that should be straightforward. Any thoughts?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1334:55,integrat,integration,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1334,1,['integrat'],['integration']
Deployability,"I will try doing some digging. A first thing I notice (not sure that this will solve the problem) is that, looking at your script, it seems you are using a pretty outdated version of Oceananigans (something like 0.71 or lower). I would try running with an updated versions and see if the problem persists",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1265543483:256,update,updated,256,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1265543483,1,['update'],['updated']
Deployability,"I wonder if we are not instantiating the test environment correctly. We do instantiate here:. https://github.com/CliMA/Oceananigans.jl/blob/abb66e32d333562dd9aaeb7dd2ed8fac5e781368/.buildkite/pipeline.yml#L20. but the segmentation fault is coming from `Pkg`:. ```; Stacktrace:; --;   | [1] pipeline_error;   | @ ./process.jl:565 [inlined];   | [2] read(cmd::Cmd);   | @ Base ./process.jl:449;   | [3] collect_artifacts(pkg_root::String; platform::Base.BinaryPlatforms.Platform);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:720;   | [4] collect_artifacts;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:706 [inlined];   | [5] download_artifacts(env::Pkg.Types.EnvCache; platform::Base.BinaryPlatforms.Platform, julia_version::VersionNumber, verbose::Bool, io::Base.DevNull);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:752;   | [6] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}, level::Pkg.Types.UpgradeLevel; skip_writing_project::Bool, preserve::Nothing);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1542;   | [7] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; level::Pkg.Types.UpgradeLevel, mode::Pkg.Types.PackageMode, preserve::Nothing, update_registry::Bool, skip_writing_project::Bool, kwargs::@Kwargs{io::Base.DevNull});   | @ Pkg.API /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:351;   | [8] up;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:326 [inlined];   | [9] up;   | @ /net/ocean/home/data44/data5/gl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136:192,pipeline,pipeline,192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136,1,['pipeline'],['pipeline']
Deployability,"I would advocate again for moving both CUDA and AMDGPU support into package extensions (see https://github.com/CliMA/Oceananigans.jl/pull/3066 for an outdated start). Having the user install both AMDGPU and CUDA unconditionally is both space and time consuming, loading them both should be unnecessary on most systems and they may at times be incompatible with each other since both are developed independently from each other.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1935362327:183,install,install,183,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1935362327,1,['install'],['install']
Deployability,"I would keep the benchmarks simple and avoid a near-global ocean setup. The setups have to be maintained so its best if they are simple and easy to update when syntax changes. Also just for the purpose of setting up the pipeline, you probably only need one or two setups. Then we can incrementally build them up after we have observed that the pipeline is useful for at least a few days (if launching nightly). Hopefully the benchmarks will be efficient enough to run nightly.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3492#issuecomment-1973858990:148,update,update,148,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3492#issuecomment-1973858990,6,"['pipeline', 'update']","['pipeline', 'update']"
Deployability,"I would rather the first option (`avg_c = Field(Average(c, dims=1))`) because it avoids to have to code functions as `IntegrateField ....` and I think option option 1 is clearer than option 2 (you see that the average operation is applied to the fields c)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2052#issuecomment-969400613:118,Integrat,IntegrateField,118,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2052#issuecomment-969400613,1,['Integrat'],['IntegrateField']
Deployability,I'd vote for bumping up a patch release.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3474#issuecomment-1943158417:26,patch,patch,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3474#issuecomment-1943158417,2,"['patch', 'release']","['patch', 'release']"
Deployability,I'll close it as stale. Julia v1.8 is [coming up soon](https://github.com/JuliaLang/julia/releases/tag/v1.8.0) ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1218528804:90,release,releases,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1218528804,1,['release'],['releases']
Deployability,I'll tag and release v0.54.2 since this could be of immediate benefit. Also to get @tomchor's new docs into the stable version of docs.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1589#issuecomment-819738535:13,release,release,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1589#issuecomment-819738535,1,['release'],['release']
Deployability,I'm closing this issue with this note in case it helps anyone:. using the julia-vscode debugger is pretty slow - I'm not sure how if this can be resolved in the near term. someone was kind enough to release this repo to debug Pluto notebooks with vscode in case it helps:. https://github.com/disberd/PlutoVSCodeDebugger.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1697492907:199,release,release,199,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1697492907,1,['release'],['release']
Deployability,I'm debating whether we should bump minor release. In principle there shouldn't be any breaking change. But we stopped testing on v1.8 and start testing on v1.9...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024:42,release,release,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024,1,['release'],['release']
Deployability,I'm drafting a reply to the rest but could the problem be that 0.92 doesn't have #3802 released?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2411346632:87,release,released,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2411346632,1,['release'],['released']
Deployability,"I'm finding that simulations with `VerticallyStretchedGrid`s don't get picked up and instead throw an error saying that the grid doesn't match. Here's a MWE:. ```julia; using Oceananigans. grid = VerticallyStretchedRectilinearGrid(size=(2, 2, 2),; x=(0, 1), y=(0, 1), z_faces=k -> k,; halo=(3,3,3),; ). model = NonhydrostaticModel(grid=grid). progress(sim) = @info ""Iteration: $(sim.model.clock.iteration), time: $(round(Int, sim.model.clock.time))""; simulation = Simulation(model, Δt=1, stop_time=10, progress=progress); simulation.output_writers[:chk_writer] = Checkpointer(model;; dir=""."",; prefix = ""mwe"",; schedule = TimeInterval(2),; force = false,; cleanup = true,; ). run!(simulation). simulation.stop_time = 20. run!(simulation, pickup=true); ```. This fails with:. ```; [ Info: Updating model auxiliary state before the first time step...; [ Info: ... updated in 400.714 μs.; [ Info: Executing first time step...; [ Info: Iteration: 1, time: 1; [ Info: Iteration: 2, time: 2; [ Info: Iteration: 3, time: 3; [ Info: Iteration: 4, time: 4; [ Info: Iteration: 5, time: 5; [ Info: Iteration: 6, time: 6; [ Info: Iteration: 7, time: 7; [ Info: Iteration: 8, time: 8; [ Info: Iteration: 9, time: 9; [ Info: Iteration: 10, time: 10; [ Info: Simulation is stopping. Model time 10 seconds has hit or exceeded simulation stop time 10 seconds.; ERROR: LoadError: The grid associated with ./mwe_iteration10.jld2 and model.grid are not the same!; Stacktrace:; [1] error(s::String); @ Base ./error.jl:33; [2] (::Oceananigans.OutputWriters.var""#52#53""{NonhydrostaticModel{Oceananigans.TimeSteppers.QuasiAdamsBashforth2TimeStepper{Float64, NamedTuple{(:u, :v, :w, :T, :S), Tuple{Field{Face, Center, Center, CPU, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, VerticallyStretchedRectilinearGrid{Float64, Periodic, Periodic, Bounded, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, Vector{Floa",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2018:862,update,updated,862,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2018,1,['update'],['updated']
Deployability,I'm going to update this shortly.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2542#issuecomment-1144819974:13,update,update,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2542#issuecomment-1144819974,1,['update'],['update']
Deployability,"I'm happy to do this. However, I need to know what to do, exactly. What code should I put in the verification folder, and what is the format? A few more questions:. - Where do we write documentation for the verification experiments? ; - Are we continuously testing verification experiments to ensure they run with new versions of the code, or should verification experiments be tagged to a particular version of the code?. I think all these questions should themselves be answered in the documentation, also. Otherwise it is not clear how to contribute new verification experiments.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-562111833:244,continuous,continuously,244,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-562111833,1,['continuous'],['continuously']
Deployability,I'm not suggesting we should always use broadcasting. I'm just wondering if it's ok to use it for simple operations. It's a nice abstraction that works on CPUs and GPUs for simple calculations / global array updates ([for example](https://github.com/glwagner/StaggeredPoisson.jl/blob/d104825ba33f184af3b90ca0d958247d0011c7ad/src/solvers.jl#L148)).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/108#issuecomment-469768233:208,update,updates,208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/108#issuecomment-469768233,1,['update'],['updates']
Deployability,"I'm not sure if this is known (or even expected) or not, but with recent versions of Oceananigans I've noticed that we're allocating more and more memory on GPUs. Basically the scenario is that I've running simulations with a given script for the past 6 months or so. The simulation and model itself has stayed the same, I've been running on the same GPUs, and the only changes that I made were those forced by changes in Oceanigans. . When I started this setup, I could run up to ~105 million points. Then as the versions increased I had to decrease to size of simulations to 100 million and then to 95 million. Now with the change to Julia 1.8 (I had been using Julia 1.6 until version 0.77.5) there was a steep increase in memory use and my max size went from 95 to 80 million. Compared to my original size of ~105 million, that's a decrease of about 25% in the grid size. Has anyone else noticed this? Is this expected since we added more features/flexibility to the code lately?. A few notes:. - My simulation is pretty complex (it's got IBM, forcings for every variable, a tracer, LES closures and drag BCs), so I think for most other simulations the max size would be smaller; - I understand that part of the memory allocation depends on the package dependencies (and the Julia version itself), not being directly controlled by Oceananigans code; - It's also worth noting that since the cluster I use (Casper) hasn't installed Julia 1.8, I started trying the newest version from the pre-compiled binaries for Julia 1.8. I don't know if that can somehow affect the memory allocation since the binaries aren't optimized for that specific machine (I haven't yet tried compiling Julia 1.8 from source). CC @wenegrat @whitleyv",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794:1424,install,installed,1424,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794,1,['install'],['installed']
Deployability,"I'm playing with trying `Flat` in this example and as with `convectiong_plankton.jl` I found that removing `progress` and `wizard` seemed to make it work. Clearly these two things need to be updated before we can start to use `Flat`. I am not suggesting this be changed here, but I mention this in reference to #1513 .",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1516#issuecomment-809505375:191,update,updated,191,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1516#issuecomment-809505375,1,['update'],['updated']
Deployability,"I'm pretty sure fresh installs don't necessarily reproduce the Manifest. I think unless you pin something, Pkg will try to get the latest set of packages that are still compatible. In fact, I don't think it's even recommended to add a Manifest with the github repo (at least not according to github: https://github.com/github/gitignore/blob/b0012e4930d0a8c350254a3caeedf7441ea286a3/Julia.gitignore#L20-L24). This is an example of a fresh Oceananigans install I just made. Notice it installed CUDA v3.4.2:. ```julia; (@v1.6) pkg> activate .; Activating new environment at `~/Dropbox/tests/fresh/Project.toml`. (fresh) pkg> add Oceananigans; Updating registry at `~/.julia/registries/General`; Resolving package versions...; Installed ChainRulesCore ─ v1.7.2; Installed Tables ───────── v1.6.0; Installed Parsers ──────── v2.0.5; Installed StaticArrays ─── v1.2.13; Updating `~/Dropbox/tests/fresh/Project.toml`; [9e8cae18] + Oceananigans v0.63.1; Updating `~/Dropbox/tests/fresh/Manifest.toml`; [621f4979] + AbstractFFTs v1.0.1; [79e6a3ab] + Adapt v3.3.1; [4fba245c] + ArrayInterface v3.1.33; [ab4f0b2a] + BFloat16s v0.1.0; [fa961155] + CEnum v0.4.1; [179af706] + CFTime v0.1.1; [052768ef] + CUDA v3.4.2; [72cfdca4] + CUDAKernels v0.3.0; [7057c7e9] + Cassette v0.3.9; [d360d2e6] + ChainRulesCore v1.7.2; [34da2185] + Compat v3.39.0; [a8cc5b0e] + Crayons v4.0.4; [7445602f] + CubedSphere v0.1.0; [9a962f9c] + DataAPI v1.9.0; [864edb3b] + DataStructures v0.18.10; [e2d170a0] + DataValueInterfaces v1.0.0; [b552c78f] + DiffRules v1.3.1; [ffbed154] + DocStringExtensions v0.8.5; [b305315f] + Elliptic v1.0.1; [e2ba6199] + ExprTools v0.1.6; [7a1cc6ca] + FFTW v1.4.5; [5789e2e9] + FileIO v1.11.1; [0c68f7d7] + GPUArrays v8.1.1; [61eb1bfa] + GPUCompiler v0.12.9; [c27321d9] + Glob v1.3.0; [615f187c] + IfElse v0.1.0; [92d709cd] + IrrationalConstants v0.1.0; [82899510] + IteratorInterfaceExtensions v1.0.0; [033835bb] + JLD2 v0.4.14; [692b3bcd] + JLLWrappers v1.3.0; [0f8b85d8] + JSON3 v1.9.1; [63c18a36] + Ke",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1996#issuecomment-933978237:22,install,installs,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1996#issuecomment-933978237,7,"['Install', 'install']","['Installed', 'install', 'installed', 'installs']"
Deployability,"I'm seeing some significant slow down with the boundary condition. ```julia; # Monin-Obukhov drag coefficient; z₀ = 1e-4 # Charnock roughness; κ = 0.4 # Von Karman constant; Cᴰ(Δz) = (κ / log(Δz / 2z₀))^2. @inline bottom_drag_u(x, y, t, u, w, Cᴰ) = - Cᴰ * u * sqrt(u^2 + w^2); @inline bottom_drag_w(x, y, t, u, w, Cᴰ) = - Cᴰ * w * sqrt(u^2 + w^2); @inline bottom_drag_u(x, y, z, t, u, w, Cᴰ) = - Cᴰ * u * sqrt(u^2 + w^2); @inline bottom_drag_w(x, y, z, t, u, w, Cᴰ) = - Cᴰ * w * sqrt(u^2 + w^2). Δz = 1 / Nz; Δx = 2π / Nz; u_drag_bc = FluxBoundaryCondition(bottom_drag_u, field_dependencies=(:u, :w), parameters=Cᴰ(Δz)); w_drag_bc = FluxBoundaryCondition(bottom_drag_w, field_dependencies=(:u, :w), parameters=Cᴰ(Δx)); u_bcs = FieldBoundaryConditions(bottom=u_drag_bc, immersed=u_drag_bc); w_bcs = FieldBoundaryConditions(immersed=w_drag_bc); ```. This is the basic way to implement a quadratic drag from the interface in this PR. In this case what happens under the hood is that we create 4 `ContinuousBoundaryFunction` for the relevant faces of boundary-adjacent cells (the other 2 faces are normal to the given velocity component, so receive a no-penetration boundary condition). So there could be a type instability compiling all of those (which have been notoriously fickle to compile in the past). We clearly need to hard code quadratic drag though, because for stretched grids and partial cells (and other types of immersed boundaries in the future) we have to do precompute the logarithm of the grid metrics (to use in a Monin-Obukhov-type model) in each direction independently, as well as the logarithm of the roughness. It's too much for this PR though, so I think we should just document how to specify no-slip on immersed boundaries (which appears to be performant), and add a few tests. Then in a future PR we can add a `QuadraticDrag` utility (I have a prototype for this object; others are welcome to collaborate on implementing the necessary functions to support it).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104673081:993,Continuous,ContinuousBoundaryFunction,993,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104673081,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"I'm sort of glad to see @glwagner is verifying the issues we first discussed last year. My 2 cents: . - Small errors in the BC eventually propagating to the whole simulation is unavoidable; this is a well mixed flow. Checking on integrated quantities, such as maintaining conserved properties or matching the expected global dissipation rate, is a more achievable and important goal. ; - Using a test case with some stronger pressure gradients along the boundary would be good as well since this induces much of the error. The circle @wenegrat suggests is the classic, but you might be able to find a more subtle case which is more relevant to your application. Perhaps turbulent flow in a wavy-wall channel? Linking the amplitude of the waves to the change in turbulent statistics seems pretty well aligned with your application (though I could be wrong).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-855362669:229,integrat,integrated,229,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-855362669,1,['integrat'],['integrated']
Deployability,"I'm still trying to figure out exactly how to go from cell value to cell-averaged value and back again. The forward approach is the quadrature scheme that we use to integrate on our cells. The backwards approach is the reconstructor. The standard choices that I've seen are to assume that the function is constant, linear and parabolic on each cell. If it's constant then the two coincide and there is nothing to worry about, but I presume this yields a lower order of accuracy. ; On top of what , we then have another choice on how to choose the flux based on the advection scheme. . Can you help me figure out what we are using as a reconstruction?. Everything else you suggest sounds good to me.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1318#issuecomment-874270864:165,integrat,integrate,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1318#issuecomment-874270864,1,['integrat'],['integrate']
Deployability,I'm suggesting to wait to include this PR in the v0.91.13 release,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3766#issuecomment-2336879896:58,release,release,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3766#issuecomment-2336879896,1,['release'],['release']
Deployability,"I'm thinking about updating `benchmarks.md` with the new benchmark result tables and graphs. Should I do it now or wait until the docs get refactored?; It's only a single file in the appendix section, but I'm not too sure how me opening a PR on it now to update it will affect the grander refactoring plan.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880741401:255,update,update,255,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880741401,1,['update'],['update']
Deployability,"I'm thinking maybe that we should not allow `BasicBiogeochemistry` to have an update state or update tracers function. This will help enforce the notion that this object is really for ""truly basic"" situations; for more advanced functioality people need to use the lower level interface (which will produce much more reusable and modular code, so is very much in our interest).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335295213:78,update,update,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335295213,2,['update'],['update']
Deployability,"I'm thinking of an integration test that tests the whole pipeline: use of a 3-tuple when constructing a model, test that time-stepping works without an error, and test that the output is correct. It's probably easier to compare two models than to compare one model to an analytical solution. Comparison to an analytical solution is tricky, usually we have to invoke an arbitrary tolerance.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883638590:19,integrat,integration,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883638590,2,"['integrat', 'pipeline']","['integration', 'pipeline']"
Deployability,"I'm trying to integrate a scalar in time (the scalar itself being a volume-integrated `Field`). Pretty much what's being done here: https://github.com/tomchor/Oceanostics.jl/blob/main/test/test_budgets.jl. I can probably come up with a way to do it without auxiliary fields. I just assumed `auxiliary_fields` could also be scalars since fields is written as ""fields"" in the docs, rather than ""`Fields`"". (Although I'm not sure what you mean by a ""parameter"").",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696:14,integrat,integrate,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696,2,['integrat'],"['integrate', 'integrated']"
Deployability,"I'm trying to run a simulation that has both forcings and some auxiliary variables which get updated with every time-step. However, I found that just the existence of a variable in the `auxiliary_fields`, coupled with a forcing function where parameters are included, makes the simulation fail on the GPU. Here's a MWE:. ```julia; using Oceananigans. grid = RectilinearGrid(GPU(), size=(4, 4, 4), extent = (1, 1, 1)). @inline forc_u(x, y, z, t, u) = x. model = NonhydrostaticModel(; grid, forcing = (; u=Forcing(forc_u, field_dependencies = :u)),; auxiliary_fields = (; a=0)); @show model.forcing model.auxiliary_fields; time_step!(model, 1); ```. the above runs fine on the CPU but fails on the GPU with:. ```; ERROR: LoadError: InvalidIRError: compiling kernel #gpu_calculate_Gu!(KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 4)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}},",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025:93,update,updated,93,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025,1,['update'],['updated']
Deployability,"I'm wondering if it might be a bit much to put docstrings on every single `AbstractGridMetric` for this experimental feature? They aren't exported so not user-facing (I think we may end up using this internally only for things like `IntegratedField` down the line). But I can copy paste the PR comment into the docstring for \Delta z as an example. Note that `GridMetricOperation` is used internally only, it's really the instances `\Delta z`, etc that are meant to be combined in `AbstractOperations`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1607#issuecomment-826007063:233,Integrat,IntegratedField,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1607#issuecomment-826007063,1,['Integrat'],['IntegratedField']
Deployability,"I'm wondering if we should provide a separate page on ""Using GPUs""? While the simulation tips for CPUs are really performance optimizations that are optional, the GPU simulation tips are mostly required to run without errors. There's a few other things that are required to get things working on GPUs --- for example, Oceananigans must be _built_ (not just run) with a GPU / CUDA installation available; this is a common pitfall on clusters.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1543#issuecomment-818076711:380,install,installation,380,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1543#issuecomment-818076711,1,['install'],['installation']
Deployability,I'm working on it continuously... :); As soon as all tests pass we can discuss. We are almost there @tomchor I feel... only something Tullio-related was not passing the previous time. Now I updated Tullio and trying again. Hold on to your chair!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-825942070:18,continuous,continuously,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-825942070,2,"['continuous', 'update']","['continuously', 'updated']"
Deployability,I've added `TracerBasedBiogeochemistry` and an example both using and not using it and they both seem to work now:; ![npd_example](https://user-images.githubusercontent.com/26657828/201384805-32bd6dfe-8838-44c8-a838-e3b841845812.png); I am slightly concerned with how I've setup the forcing for `TracerBasedBiogeochemistry` because I assume the weird stuff going on with the interpolation stuff in `ContinuousForcing` is there for a reason (and we can't use the normal continuous forcing stuff because it relies on the index of the tracer which we don't have as the model isn't finished when we setup the biogeochemical model). I'll have a go at adding an example with PAR integration to check its straightforward to add to a model later.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311916054:399,Continuous,ContinuousForcing,399,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311916054,3,"['Continuous', 'continuous', 'integrat']","['ContinuousForcing', 'continuous', 'integration']"
Deployability,"I've also offered to help configure testing on our systems, if someone wants to provide what is needed to integrate with slurm.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328783023:106,integrat,integrate,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328783023,1,['integrat'],['integrate']
Deployability,"I've been thinking and we definitely need a way to know if the halos are being filled before or after the pressure correction. The main reason is because if we are explicitly stepping the boundary point (e.g. in the bulk outflow case) then we will step twice when we only meant to step once. It does leave the question of what the correct thing todo to the boundary point after the pressure correction, but that is a different matter. I'm going to update the top comment with a list of changes made here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2133028502:448,update,update,448,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2133028502,1,['update'],['update']
Deployability,"I've got the mode-1 internal wave case working now. Axes are in units of depth (h) and k is set to $\pi$/h, top panel is `u`, middle is `w`, and bottom is `b`. First the periodic case:. https://github.com/CliMA/Oceananigans.jl/assets/26657828/324a7a29-097e-4732-b324-afce808b752e. As expected numerical error reflects off the boundary if we just prescribe the boundary values:. https://github.com/CliMA/Oceananigans.jl/assets/26657828/738bd33f-b813-45f7-b96a-74a25dd631cb. And with quite a small sponge (red lines in top plot) this is pretty much resolved:. https://github.com/CliMA/Oceananigans.jl/assets/26657828/d1af93fb-8efc-47a3-abdc-463224e366db. Note/update:. Following discussion with @johnryantaylor we noticed that it seems the energy increases in all three of these (the velocity clips the colormap which is set to the analytical amplitudes) before it decays. I've checked and this is timestep length dependant and goes away with a small timestep. I guess this is a shortfall of the CFL analysis when there are fast waves. We also noticed that there is an error growing from the top and bottom boundaries, particularly clearly in the buoyancy. We think this is a spatial resolution dependant numerical error which is suppressed by increased vertical resolution.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2004485794:658,update,update,658,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2004485794,2,['update'],['update']
Deployability,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:556,integrat,integrating,556,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242,6,"['Update', 'integrat']","['Update', 'integrated', 'integrating']"
Deployability,"I've noticed a few weeks ago that my scripts were much slower after the Julia 1.6 upgrade (which is preventing me from upgrading). I thought it was due to my Julia 1.6 installation but after some tests I now think it's an Oceananigans issue, specifically with the WENO5 scheme. I ran the MWE below in both Julia 1.5 (with Oceananigans version 0.57.1) and Julia 1.6 (tried several Oceananigans versions but specifically for this example I'm using Oceananigans version 0.58.5) using GPUs and the speed difference is pretty huge. The interesting part is that this difference only happens if I use WENO5 with a GPU. If I use the 2nd order centered scheme there is no significant difference in time (I haven't tried other schemes) and if I run the script on CPUs the time difference also appears to be small. Here's the script:. ```julia; using Oceananigans; using Oceananigans.Units; using CUDA: has_cuda; Nx, Ny, Nz = 128, 1600, 64. if has_cuda(); arch = GPU(); else; arch = CPU(); Nx = Int(Nx/4); Ny = Int(Ny/4); Nz = Int(Nz/4); end . topology = (Periodic, Bounded, Bounded); grid = RegularRectilinearGrid(size=(Nx, Ny, Nz),; x=(0, 200),; y=(0, 2000),; z=(-100, 0),; topology=topology); println(""\n"", grid, ""\n""). model = IncompressibleModel(architecture = arch,; grid = grid,; advection = WENO5(),; timestepper = :RungeKutta3,; tracers=nothing,; buoyancy=nothing,; closure=nothing,; ); println(""\n"", model, ""\n""). start_time = 1e-9*time_ns(); using Oceanostics: SingleLineProgressMessenger; simulation = Simulation(model, Δt=10seconds,; stop_time=10hours,; wall_time_limit=23.5hours,; iteration_interval=5,; progress=SingleLineProgressMessenger(LES=false, initial_wall_time_seconds=start_time),; stop_iteration=Inf,). println(""\n"", simulation,""\n"",); @info ""---> Starting run!\n""; run!(simulation, pickup=false); ```. The output for Julia 1.5:. ```julia; [ Info: ---> Starting run!; [ Info: [000.14%] i: 5, time: 50.000 seconds, Δt: 10 seconds, wall time: 1.447 minutes, adv CFL: 0.00e+00, diff CFL: 0.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764:82,upgrade,upgrade,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764,2,"['install', 'upgrade']","['installation', 'upgrade']"
Deployability,"I've played more with this now and think the way we can do this with the minimum code changes is as follows. The only other way I can see is for the boundary to store the previous timestep of the boundary adjacent points but since Fields depends on BoundaryConditions that isn't really possible. The key problem really is that previous solutions to this problem have been written in codes that store at least two time levels which we don't have. So, if we consider for now just a 1D problem with boundary point $\phi_b$ and interior points at $\phi_{b-1}$ etc. When we go to update the boundary point we have $\phi_b^n$ and $\phi_{b-1}^{n+1}$ and we want $\phi_b^{n+1}$. As per previous work we assume that the bulk speed is the same at both $b$ and $b-1$ but we don't have both the spatial and time derivatives of the $\phi$ interior at the same step so we first need to approximate the previous step as:. $\phi_{b-i}^n = \phi_{b-i}^{n+1}-\Delta t G^n_{b+1}$. We can then find the bulk velocity at timestep n as:. $U_b^n = -\frac{2\Delta x_{b-1}G^n_{b-1}}{\phi^n_b - \phi^{n+1}_{b-2} - \Delta t G^n _{b-2}}$. We then have all the information to step $\phi_b$ to:. $\phi_b^{n+1}=\phi_b^n-\frac{\Delta t}{\Delta x_b}U_b(\phi_b^n-\phi_{b-1}^{n+1} - \Delta t G^n_{b-1})$. This will require us to give the boundary condition both the tendencies and $\Delta t$, but this seems to be the easiest thing to change. I also think this is the only way we can get a physically sensible bulk speed where all of the components are calculated at the same timestep. I have also realised that we need to have an exterior value for every open boundary for when the flow spontaneously becomes an inflow so I think it would make sense to have every open boundary be the same and just be `OpenBoundaryCondition(external_value)`, and then put the tendencies etc in as arguments to `_fill_X_halo!`. Then when `U_b` is negative we either set the value or do nudging like in ROMS to prevent shocks (but I think this is a quest",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1971616810:575,update,update,575,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1971616810,1,['update'],['update']
Deployability,"I've tried using the forcing as:. ```julia; @inline sponge_func(x, y, z, ϕ) = -rate * bot_mask(x, y, z) * (ϕ - 0); sponge_u(x, y, z, t, u) = sponge_func(x, y, z, u); sponge_v(x, y, z, t, v) = sponge_func(x, y, z, v); sponge_w(x, y, z, t, w) = sponge_func(x, y, z, w). forc_u = Forcing(sponge_u, field_dependencies=:u,); forc_v = Forcing(sponge_v, field_dependencies=:v,); forc_w = Forcing(sponge_w, field_dependencies=:w,); forcing = (u=forc_u, v=forc_v, w=forc_w); ```; and the same performance issues appear. But I guess this still uses `ContinuousForcing`. I've never used `DiscreteForcing` but I'll try to use it and see what happens. If you have any examples that would help.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875651677:540,Continuous,ContinuousForcing,540,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875651677,1,['Continuous'],['ContinuousForcing']
Deployability,"I've updated the code to `ParticleVelocities` and changed the function signature to . ```julia; @inline particle_u_velocity(x, y, z, u_fluid, particles, p, advective_velocity::ParticleVelocities, grid, clock, Δt, model_fields) = advective_velocity.u(x, y, z, u_fluid, particles, p, grid, clock, Δt, model_fields); ```. I also swapped around `advect_lagrangian_particles!` and `dynamics`, so now the particles are advected before the `dynamics` function is applied. I found this to be easier when implementing an example with the drag. I've implemented a simple example with a drag in the form of $\frac{d \boldsymbol{v}}{dt} = \frac{C_d}{\tau}(\boldsymbol{u} - \boldsymbol{v})$.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1871616229:5,update,updated,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1871616229,2,['update'],['updated']
Deployability,I've updated the language used in the warnings.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1556#issuecomment-815966267:5,update,updated,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1556#issuecomment-815966267,1,['update'],['updated']
Deployability,"I've worked out where my problem is coming from. For the wall-normal velocity: first, we compute and apply the tendencies from 1:N face points, then compute the pressure correction at 1:N center points, then fill the boundary points at 1 and N+1, and apply it at 1:N face points (except the gradient is zero across the 1 face point so this doesn't do anything to the boundary. The N+1 boundary point is fine because we can just set it to anything, or time integrate something at the point since nothing else effects its value. The same is true if we prescribe a value at the 1 face point because (even though we redundantly integrate the tendencies there) it just gets reset to whatever we want. The problem is if we try to integrate something like a radiation condition there then we actually end up with $u(1, j, k) = \int (G_u + B_u) dt$ where $B_u$ is whatever integration we're trying to do at the boundary. On bounded topology I don't think we ever want to integrate the tendency right? But it might be more complicated to do that than to think of a different way todo it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2387806695:456,integrat,integrate,456,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2387806695,5,['integrat'],"['integrate', 'integration']"
Deployability,Ideally all the tests we run on the CPU should be replicated with GPU models. This will mean more work for the JuliaGPU GitLab CI pipeline.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/78:130,pipeline,pipeline,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/78,1,['pipeline'],['pipeline']
Deployability,Ideally we would update to CUDA 4 at the same time but for that we need to update AMGX.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416872443:17,update,update,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416872443,2,['update'],['update']
Deployability,If I understand correctly this is a breaking change so bump up minor release?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2852#issuecomment-1345188207:69,release,release,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2852#issuecomment-1345188207,1,['release'],['release']
Deployability,"If people are okay with it, I'll merge as soon as tests pass and register a new patch version, since this is a bugfix.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2218143592:80,patch,patch,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2218143592,1,['patch'],['patch']
Deployability,"If we are going to update this example, it's probably better to use `ImmersedBoundaryGrid` like in the other immersed boundary validation experiments...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1793#issuecomment-871637524:19,update,update,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1793#issuecomment-871637524,1,['update'],['update']
Deployability,"If we can't fix it I'm happy to leave the v0.30.0 docs as ""missing"" since v0.30.0 didn't include any updated docs and it isn't really a usable version anyways. What do you guys think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/808#issuecomment-661476432:101,update,updated,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/808#issuecomment-661476432,1,['update'],['updated']
Deployability,"If you post a MWE, I can try to look at the issue. We should indeed update...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2479#issuecomment-1111150235:68,update,update,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2479#issuecomment-1111150235,1,['update'],['update']
Deployability,If you start a clean project and install Oceananigans then you should be able to install GLMakie v0.9 or CairoMakie v0.11 and things should work seamlessly. Anyway thanks. Since you mention the example works fine I'll consider this issue closed.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3442#issuecomment-1920564659:33,install,install,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3442#issuecomment-1920564659,2,['install'],['install']
Deployability,"If you want to integrate with the Julia ""progress bar"" system, you could put in something like:; ```julia; @debug ""this is a short description of my loop"" progress=iteration/length_of_loop; ```. This works in Juno, and with MicroLogging.jl in the REPL.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/432#issuecomment-536805872:15,integrat,integrate,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/432#issuecomment-536805872,1,['integrat'],['integrate']
Deployability,"Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `12.9% <ø> (ø)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `58.9% <100%> (+1.76%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `76.58% <100%> (ø)` | :arrow_up: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `87.5% <100%> (+6.25%)` | :arrow_up: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `84.21% <82.35%> (+71.71%)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `74.86% <0%> (-1.07%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352?src=pr&el=footer). Last update [35a6a05...5771f8d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/352#issuecomment-520223463:2749,update,update,2749,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/352#issuecomment-520223463,1,['update'],['update']
Deployability,Improve function names and comments in Lagrangian particle update,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2685:59,update,update,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2685,1,['update'],['update']
Deployability,"In a supposedly quiescent flow with constant temperature and salinity, seeded with tiny random noise in `w`, a large-scale flow develops and is maintained. Thus the flow gains kinetic energy in an otherwise unforced configuration, creating a ""perpetual machine"". Here is a MWE:; ```julia; using Oceananigans; using Oceananigans.Units; using SeawaterPolynomials; using SeawaterPolynomials.TEOS10; using Printf. eos = TEOS10.TEOS10EquationOfState(). arch = CPU(); grid = RectilinearGrid(CPU(), Float64,; topology = (Bounded, Flat, Bounded),; size = (100, 100),; halo = (4, 4),; x = (0, 100),; z = (-100, 0)). model = NonhydrostaticModel(; grid = grid,; buoyancy = SeawaterBuoyancy(),; advection = UpwindBiased(order=1),; timestepper = :RungeKutta3,; tracers = (:T, :S)). @inline T_initial(x, z) = 20; @inline S_initial(x, z) = 35; @inline w_initial(x, z) = rand() * 1e-6. set!(model, T=T_initial, S=S_initial, w=w_initial). u, v, w = model.velocities; T, S = model.tracers.T, model.tracers.S. KE = @at (Center, Center, Center) 0.5 * (u^2 + v^2 + w^2); KE_total = Field(Integral(KE)). simulation = Simulation(model, Δt=1e-3, stop_time=40days); wizard = TimeStepWizard(max_change=1.05, max_Δt=10minutes, cfl=0.6); simulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10)). wall_clock = [time_ns()]. function print_progress(sim); compute!(KE_total); @printf(""[%05.2f%%] i: %d, t: %s, wall time: %s, max(u): (%6.3e, %6.3e, %6.3e) m/s, max(T) %6.3e, max(S) %6.3e, Total KE %6.3e, next Δt: %s\n"",; 100 * (sim.model.clock.time / sim.stop_time),; sim.model.clock.iteration,; prettytime(sim.model.clock.time),; prettytime(1e-9 * (time_ns() - wall_clock[1])),; maximum(abs, sim.model.velocities.u),; maximum(abs, sim.model.velocities.v),; maximum(abs, sim.model.velocities.w),; maximum(abs, sim.model.tracers.T),; maximum(abs, sim.model.tracers.S),; maximum(KE_total),; prettytime(sim.Δt)). wall_clock[1] = time_ns(). return nothing; end. simulation.callbacks[:print_progress] = Callback(print_progr",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3795:216,configurat,configuration,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3795,1,['configurat'],['configuration']
Deployability,"In hindsight I think that @christophernhill is probably right about; pipeline stalls becoming a bottleneck if we use z as the fast index. (Which; leaves me unsure why it's common in the atmospheric models I've used....; Maybe just prioritizing simplicity over performance?). On Sat, Oct 12, 2019, 5:33 PM Chris Hill <notifications@github.com> wrote:. > P.S. that was a comment on the @ali-ramadhan; > <https://github.com/ali-ramadhan> comment, not the @glwagner; > <https://github.com/glwagner> comment. Greg is correct that some code; > generation can help, although sometimes its cleaner just to write elegant; > code than get carried away with meta-programming ( e.g. see Steve J; > meta-programming regrets talk https://www.youtube.com/watch?v=mSgXWpvQEHE; > ).; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/issues/470?email_source=notifications&email_token=ACZDSTS5AH2A5CC2HC43EELQOI7CRA5CNFSM4JAEMGO2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBCIYQQ#issuecomment-541363266>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACZDSTWNQED7NDAS2U5KTETQOI7CRANCNFSM4JAEMGOQ>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/470#issuecomment-541364103:69,pipeline,pipeline,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/470#issuecomment-541364103,1,['pipeline'],['pipeline']
Deployability,"In my last PR (#2335) I introduced tupled halo filling. . This PR required inferring the length of a Tuple of different element types on the GPU (which is not necessarily easy).; I found a hack to do it, but I was working in julia 1.7. Today, running a simulation with several different functional boundary conditions (in `discrete_form`) with julia 1.6, I found out that the compiler does not like my solution and does not infer the Tuple length (spitting out an `Invalid LLVM` error). This error is not there in julia-1.7. Unfortunately, I already merged my PR because I stupidly did not think to test all possible BC with julia-1.6. Now, to revert to a non-tupled halo filling which works across julia distribution it's a one-liner (in `field_tuples.jl`); ```; @inline fill_halo_regions_field_tuple!(full_fields, grid, args...; kwargs...) = ; fill_halo_regions!(extract_field_data.(full_fields), extract_field_bcs.(full_fields), grid, args...; kwargs...); ```; to; ```; @inline fill_halo_regions_field_tuple!(full_fields, grid, args...; kwargs...) = ; for field in full_fields; fill_halo_regions!(field, args...; kwargs...); end; end; ```. What should we do? We could change this line and leave the infrastructure intact for when we update to julia-1.7 (then we would't have tupled halo filling till then) or find a completely different solution (which will require a lot of restructuring); Probably we also need more tests for boundary conditions with different BC on different sides. I see that the tests that run on julia-1.6 do not return an error though. Do other people encounter the same error?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2358:1236,update,update,1236,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2358,1,['update'],['update']
Deployability,"In my last commit, I changed how boundary conditions are internally initialised as before we were passing the name of the classification so that we could catch functions and turn them into `Discrete/ContinuousBoundaryFunction`s, but this was causing a problem when I wanted the classification to also have properties (i.e. the matching scheme in this case). . Instead, I've changed it so we pass an instance of the classification (so e.g. we can pass `Open(SomeMatchingScheme())`) and this seems to work fine still. . The boundary conditions setup tests now pass locally and I will wait to see how the rest of the tests do, but is there any problem with this change otherwise @glwagner? This is also not an API change as it only affects how boundary conditions are initialised internally.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2125261069:199,Continuous,ContinuousBoundaryFunction,199,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2125261069,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"In terms of the validation experimens, from what I understand, they are created when someone does something new and the script is a proof by example, or sorts. Since they are never run in tests they do become stale, and a bunch no longer run, as has been pointed out. The same can be said for benchmarks. . Examples are great because they are continually tested and therefore updated as needed. There are a bunch, but still, I don't think as much is covered in the examples as we see in validation. It would be nice for people to see whats in validation, but if they don't work then that causes other problems. I don't claim there is a simple solution but I'm glad we're talking about it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872510039:376,update,updated,376,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872510039,2,['update'],['updated']
Deployability,"In the spirit of getting closer to continuous delivery (see https://www.oxinabox.net/2019/09/28/Continuous-Delivery-For-Julia-Packages.html#what-if-i-dont-want-to-release-right-now--dev-versions) we should probably tag and release v0.43.0 soon since PRs #1070, #1057, and #1061 + couple of bug fix PRs would be useful to have. Release notes:. * Fixes a bug in `TwoDimensionalLeith` (PR #1073, issue #1034). Previously tests were being skipped due to extreme slowness. Now we run tests on GPU (but not CPU, where the closure is much slower to compile). * Rewrites the interface for ""scheduling"" output and diagnostics (PR #1070). Previously output and diagnostics were usually scheduled by specifying either `time_interval` or `iteration_interval` kwargs in the constrcutor for the object in question. Now, the relevant kwarg is called `schedule` and takes a callable `AbstractSchedule` object (or any user-defined function `func` that returns `true` or `false` depending on the single argument `func(model)`). This design is more flexible and extensible, and also simplifies underlying code. Four schedules are provided:. - `TimeInterval(interval)`; - `IterationInterval(interval)`; - `WallTimeInterval(interval)`; - `AveragedTimeInterval(interval; window=interval, stride=1)` (for time-averaging output). Breaking changes:. * Output writers and diagnostics no longer have the keyword arguments `time_interval` or `iteration_interval`. The most commonly-used features that are affected are `JLD2OutputWriter`, `NetCDFOutputWriter`, and `Checkpointer`. `JLD2OutputWriter` and `NetCDFOutputWriter` no longer have the kwargs `time_averaging_window` and `time_averaging_stride`. The specific syntax changes are:. * `time_interval=T` becomes `schedule=TimeInterval(T)`; * `iteration_interval=I` becomes `schedule=IterationInterval(I)`; * `time_interval=T, time_averaging_window=W` becomes `schedule=AveragedTimeInterval(T, window=W)`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1077:35,continuous,continuous,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1077,5,"['Continuous', 'Release', 'continuous', 'release']","['Continuous-Delivery-For-Julia-Packages', 'Release', 'continuous', 'release', 'release-right-now--dev-versions']"
Deployability,"In this PR I'll be updating the documentation, especially the model setup section, to reflect the many recent changes and additions to the API. To avoid this problem of documentation going out of date, I will also be converting and adding `jldoctest`s so we should actually get an error when documentation goes out of date. A lot of `@example` blocks don't run anymore and we even have a `jldoctest` failure but Travis CI seems to pass so I'll look into making Travis CI fail the doc build if a doctest fails. If we have a lot of doctests it might actually be easy to keep them updated: https://juliadocs.github.io/Documenter.jl/latest/man/doctests/#Fixing-Outdated-Doctests",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/799:578,update,updated,578,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/799,1,['update'],['updated']
Deployability,"In this case if we see convergence with decreasing time-step (spatial resolution isn't relevant for these dynamics, which are at the grid scale and therefore not physical) then I suppose that would be an indication the issue is due to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could div",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:359,continuous,continuous,359,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423,2,['continuous'],['continuous']
Deployability,Including installation of required packages in examples creates clutter in Docs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1315:10,install,installation,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1315,1,['install'],['installation']
Deployability,"Indeed the pressure solver at the moment allows only a variable z-direction. This is because for a regular grid we can use a full FFT solve while with a singular stretched direction we can solve a tridiagonal system. . For more than one stretched direction we should use an iterative solver to solve the Poisson equation (the solvers are there but the infrastructure not quite yet). We should implement the iterative solver as a default for two or more stretched directions. And set up the FFT-tridiagonal solver as default when we have one stretched direction (either x, y or z). In the meantime, as a hotfix, If you only need one stretched direction I would suggest you to rotate your problem to stretch it in z-direction",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2191#issuecomment-1022674786:603,hotfix,hotfix,603,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2191#issuecomment-1022674786,1,['hotfix'],['hotfix']
Deployability,Install TagBot as a GitHub Action,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/619:0,Install,Install,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/619,1,['Install'],['Install']
Deployability,"Instead of having us manually print a progress statement in a `while` loop, maybe we can pass a `progress_message(model)` function to `time_step!` that does this. This should help clean up the scripts a lot, and we could provide a couple of reasonable defaults instead of setting up this functionality in every script. Eventually the `progress_message(model)` function can be made fancy as we wish with unicode plots, a curses interface for complex progress output, or even email updates.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/432:480,update,updates,480,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/432,1,['update'],['updates']
Deployability,Integrate LES functionality,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/309:0,Integrat,Integrate,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/309,1,['Integrat'],['Integrate']
Deployability,Integrate finite volume operators,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/529:0,Integrat,Integrate,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/529,1,['Integrat'],['Integrate']
Deployability,Integrate opening and closing of Netcdf outputwriters in simulation loop,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/650:0,Integrat,Integrate,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/650,1,['Integrat'],['Integrate']
Deployability,Integrating Oceananigans with Python-xgcm,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1334:0,Integrat,Integrating,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1334,1,['Integrat'],['Integrating']
Deployability,"Interesting tidbit: while calling `CUDA.versioninfo` here:. https://github.com/CliMA/Oceananigans.jl/blob/b4e217244f1d594ce2854260e4dfa5c97156e162/.buildkite/pipeline.yml#L27. seems innocuous, it actually triggers `CUDA` to download things like `CUDNN`:. ```; julia> CUDA.versioninfo(); CUDA toolkit 11.3.1, artifact installation; CUDA driver 11.3.0; NVIDIA driver 465.27.0. Libraries: ; - CUBLAS: 11.5.1; - CURAND: 10.2.4; - CUFFT: 10.4.2; - CUSOLVER: 11.1.2; - CUSPARSE: 11.6.0; - CUPTI: 14.0.0; - NVML: 11.0.0+465.27; Downloaded artifact: CUDNN; - CUDNN: 8.20.0 (for CUDA 11.3.0); Downloaded artifact: CUTENSOR; - CUTENSOR: 1.3.0 (for CUDA 11.2.0). Toolchain:; - Julia: 1.6.1; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80. 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 23.343 GiB / 23.869 GiB available); ```. I don't think we need to download those artifacts otherwise. But I'm not 100% sure. it also seems to be throwing an error on #1799 though I'm not sure why.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1794#issuecomment-872233431:158,pipeline,pipeline,158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1794#issuecomment-872233431,2,"['install', 'pipeline']","['installation', 'pipeline']"
Deployability,"Interesting, thanks for those details! That's odd that there are changes in memory allocation associated with building diagnostics. I don't think there's been changes to `Field` between 0.77.5 and 0.78.0. @navidcy might be able to say more. I think 0.78.0 only upgraded the tests to julia 1.8?. I'm also curious why the diagnostics consume so much memory. Are you producing a lot of 3D time averages (which can't be constructed in post-processing?) We've attempted to design the code so that reductions can be performed with minimal memory allocation. 3D diagnostics can simply be calculated from snapshots of the model state, so there's no need to allocate memory (assuming that static memory greatly exceeds GPU memory, this would be preferred). Are we missing a feature to help reduce memory requirements of diagnostics perhaps?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299561134:261,upgrade,upgraded,261,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299561134,2,['upgrade'],['upgraded']
Deployability,Interesting. I will open a new issue that's specific to the current issue with a concise summary. It's hard to parse the conversation in this long issue. I guess we will also have to update the docs for this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-884902923:183,update,update,183,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-884902923,1,['update'],['update']
Deployability,"Is it because your initial condition is only geostrophically balanced in the continuous limit? You may need to compute the velocity field that's in discrete geostrophic balance with your initial buoyancy field. You are using analytical formula for both `U` and `B`:. ```julia; U(x, y, z) = Umax / cosh(y/Lⱼ)^2 * exp(-(z-z0)^2/D^2); B(x, y, z) = N² * z + 2*f*Umax*Lⱼ/D^2 * (tanh(y/Lⱼ)) * (z-z0) * exp(-(z-z0)^2/D^2); ```. but to satisfy the discrete geostrophic balance you would have to compute one of those fields from the other one, in a manner consistent with how Coriolis forces are implemented.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3251#issuecomment-1708630040:77,continuous,continuous,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3251#issuecomment-1708630040,1,['continuous'],['continuous']
Deployability,"Is it okay for me to go through the tests and update them? For example:; https://buildkite.com/clima/oceananigans/builds/15867#018fe2f6-efde-43c3-affa-cb2231a0fb37/39-712. asserts that the open boundary point should be set to zero after a `fill_halo_regions!` but we now expect that it is not touched, so should stay at the value set by the broadcast. Alternatively, we could add a flag to `fill_halo_regions!` to fill boundary normal velocities when it is called manually? i.e. `fill_halo_regions!(field, args...; include_boundary_normal_velocities = false)` and then call `fill_boundary_normal_velocities!` if it is set to true?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2147328364:46,update,update,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2147328364,1,['update'],['update']
Deployability,"Is it so hard to update the validation scripts too? Hopefully that should be easy and it doesn't really matter what you do first. We use the validation scripts to test the user interface. You'll be changing them no matter what, in either case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915263357:17,update,update,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915263357,1,['update'],['update']
Deployability,Is the `TendancyCallsite` and update state ones still not working?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3454#issuecomment-1925703234:30,update,update,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3454#issuecomment-1925703234,1,['update'],['update']
Deployability,"Is this still an issue? @xkykai's MWE runs fine for me (I went up to 256x256x256), and I've been doing `maximum(abs, u)` on the GPU for a few versions. Out of curiousity, @josuemtzmo are you able to reproduce the error on the latest versions of Julia, CUDA.jl, and Oceananigans.jl?. ---. I'm using Oceananigans v0.91.7 with. ```; julia> versioninfo(); Julia Version 1.10.4; Commit 48d4fd4843 (2024-06-04 10:41 UTC); Build Info:; Official https://julialang.org/ release; Platform Info:; OS: Windows (x86_64-w64-mingw32); CPU: 24 × AMD Ryzen 9 5900X 12-Core Processor; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-15.0.7 (ORCJIT, znver3); Threads: 1 default, 0 interactive, 1 GC (on 24 virtual cores); ```. and. ```; julia> Oceananigans.CUDA.versioninfo(); CUDA runtime 12.5, artifact installation; CUDA driver 12.5; NVIDIA driver 556.12.0. CUDA libraries:; - CUBLAS: 12.5.3; - CURAND: 10.3.6; - CUFFT: 11.2.3; - CUSOLVER: 11.6.3; - CUSPARSE: 12.5.1; - CUPTI: 2024.2.1 (API 23.0.0); - NVML: 12.0.0+556.12. Julia packages:; - CUDA: 5.4.3; - CUDA_Driver_jll: 0.9.2+0; - CUDA_Runtime_jll: 0.14.1+0. Toolchain:; - Julia: 1.10.4; - LLVM: 15.0.7. 1 device:; 0: NVIDIA GeForce RTX 3080 (sm_86, 5.794 GiB / 10.000 GiB available); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-2284866026:461,release,release,461,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-2284866026,2,"['install', 'release']","['installation', 'release']"
Deployability,"Isn't that a way to obtain the reverse cumulative integration by simply adding something?; Something like `cumint[end] - cumint + cumint[1]` ; I don't remember exactly, but I think that there is a way to do it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3590#issuecomment-2099027343:50,integrat,integration,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3590#issuecomment-2099027343,2,['integrat'],['integration']
Deployability,"It appears that CUDA 3.4 has a [bug](https://github.com/JuliaGPU/CUDA.jl/issues/1169), which apparently caused some trouble in https://github.com/CliMA/Oceananigans.jl/issues/1995 and https://github.com/CliMA/Oceananigans.jl/pull/1988. At the moment, however, adding Oceananigans still installs the latest CUDA version since CUDA's `compat` entry just specifies version 3:. https://github.com/CliMA/Oceananigans.jl/blob/73be08d708131a66402eb8fc0086c47ef80a2d0e/Project.toml#L36. It seems like the bug was merged upstream but they still haven't tagged a new release. Should we change the compat entry to protect users in the meantime? I'm not sure if the best way is to cap the version at 3.3 or if it's possible to exclude version 3.4.2 specifically, but I feel like it's best to act on this, no?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1996:286,install,installs,286,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1996,2,"['install', 'release']","['installs', 'release']"
Deployability,"It just helps to ensure that the discrete continuity equation (and thus discrete conservation of mass) is handled correctly. It's possible that it's not necessary (but it's the reason that the vertically integrated lateral face areas pop up in the numerics). Here are some notes:. <img width=""955"" alt=""image"" src=""https://user-images.githubusercontent.com/15271942/165295054-4f3205c2-bf71-46b2-947a-b1c23241328e.png"">. <img width=""954"" alt=""image"" src=""https://user-images.githubusercontent.com/15271942/165296417-38c25dde-5636-40c0-8ed3-6059f9f95740.png"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2475#issuecomment-1109706687:204,integrat,integrated,204,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2475#issuecomment-1109706687,1,['integrat'],['integrated']
Deployability,"It looks like KernelAbstractions.jl has added experimental support for AMD: https://github.com/JuliaGPU/KernelAbstractions.jl/releases/tag/v0.6.0. Should we try to make the code more GPU-architecture-agnostic based on that? From what I've heard, end-user level AMD GPUs are generally cheaper than Nvidia ones for similar performance. So running Oceananigans on AMD could potentially make it significantly easier for people to run simulations on their personal computer instead of a cluster.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1546:126,release,releases,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1546,1,['release'],['releases']
Deployability,"It might be possible to design an interface that uses a continuous map from a regular to stretched coordinate, rather than a generator function that specifies the location of cell interfaces.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1544#issuecomment-813820775:56,continuous,continuous,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1544#issuecomment-813820775,1,['continuous'],['continuous']
Deployability,It renders fine. Perhaps you tried before tge docs were deployed?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2646#issuecomment-1179632808:56,deploy,deployed,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2646#issuecomment-1179632808,1,['deploy'],['deployed']
Deployability,"It seems this updates a lot of versions, including StructArrays. Seems like a good idea but there are some failed tests. When I looked at the errors one of them seemed to be about `OffsetArrays`, copied below right before the stacktrace. Not sure how to resolve this but I suspect others have ideas. ```; ┌ Warning: Could not use exact versions of packages in manifest, re-resolving;   | └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1526;   | ERROR: Unsatisfiable requirements detected for package OffsetArrays [6fe1bfb0]:;   | OffsetArrays [6fe1bfb0] log:;   | ├─OffsetArrays [6fe1bfb0] has no known versions!;   | └─restricted to versions 1.4.0-1 by Oceananigans [9e8cae18] — no versions left;   | └─Oceananigans [9e8cae18] log:;   | ├─possible versions are: 0.58.5 or uninstalled;   | └─Oceananigans [9e8cae18] is fixed to version 0.58.5;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1785#issuecomment-870516627:14,update,updates,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1785#issuecomment-870516627,1,['update'],['updates']
Deployability,It would be great to add CATKE to the channel to address its computational cost. I agree that it makes sense to update the default parameters.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2272#issuecomment-1048838427:112,update,update,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2272#issuecomment-1048838427,1,['update'],['update']
Deployability,"It's a Mac. @glwagner, I just tried to install it on my home laptop (also a Mac) by simply `add Oceananigans` and the build time of HDF5 is much shorter (~1 min). Not sure what was happening on the other laptop this afternoon...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-501103347:39,install,install,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-501103347,1,['install'],['install']
Deployability,"It's a joyous day... https://user-images.githubusercontent.com/15271942/163684303-d05b97d6-69d6-447a-b214-0f618a780dfb.mp4. This puts a regular value boundary condition at the top, and an immersed value condition at the bottom (opposite signs). Looks good to me. Next is to figure out the shenanigans to get `ContinuousBoundaryFunction` to work. Though we coudl merge this now / soon without that, since we can support no-slip with this and it also allows value boundary condition (on non-immersed boundaries) with immersed boundary grid.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100709220:309,Continuous,ContinuousBoundaryFunction,309,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100709220,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"It's also worth noting that right now many calculations are done more than once in each timestep. For example for each component of $M_{ij}$ I'm calculating the whole strain rate tensor modulus in addition to the strain rate tensor component needed:. https://github.com/CliMA/Oceananigans.jl/blob/25cc34e6c395e210e0aecf8181919c25435d7919/src/TurbulenceClosures/turbulence_closure_implementations/scale_invariant_smagorinsky.jl#L241-L257. This is done for legibility of the code, but it may be necessary to forfeit that in favor of doing fewer calculations. (Also note that I'm using a weird way to define function names here, so lmk if you guys think I should change it.). Another thing to note that it's common to update dynamic Smagorinsky coefficients once every 5 or so time-steps only, since they can be pretty expensive. afaik this is generally done for the scale-dependent versions, which have two test filters instead of the one needed in this PR, but I wouldn't be surprised if it's occasionally necessary for the scale-invariant versions as well.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2212664403:715,update,update,715,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2212664403,1,['update'],['update']
Deployability,"It's as @simone-silvestri said, more broadly it seems that we need to think of boundary conditions differently between `Face` fields and `Center` fields. `Face` fields have nodes on the boundary (sometimes we call those ""peripheral nodes""), so we simply impose boundary values to satisfy boundary conditions, eg for determining wall-normal velocities. `Center` fields have nodes within and outside, but not on the boundary. This is the core of the discussion @simone-silvestri and I had about tracer boundary conditions: we can choose either to set the tracer halos to produce a result when tracers are reconstructed _on_ the boundary (that's how `Value` and `Gradient` boundary conditions work -- the halos are determined by extrapolation). Or, we can set the tracer halos as if the halo region is part of some other prognostic state (which is what I envisioned `Open` should do). Finally as @simone-silvestri says the tracer halos are `0, N+1` while wall-normal velocity points _on_ the boundary are `1` and `N+1`. I think its fine to pass additional arguments to `fill_halo_regions!`, and use these for open boundary conditions. In fact, `DiscreteBoundaryCondition` and `ContinuousBoundaryCondition` appear to already be designed to accomodate additional arguments that are unused by those user interfaces (note the `args...`):. https://github.com/CliMA/Oceananigans.jl/blob/643b484e81e0aeb038b3038266912ad051bce9b8/src/BoundaryConditions/discrete_boundary_function.jl#L45 . https://github.com/CliMA/Oceananigans.jl/blob/643b484e81e0aeb038b3038266912ad051bce9b8/src/BoundaryConditions/continuous_boundary_function.jl#L136-L137",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1972507075:1174,Continuous,ContinuousBoundaryCondition,1174,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1972507075,1,['Continuous'],['ContinuousBoundaryCondition']
Deployability,"It's been pointed out several times (most recently by @sandreza) that the many different `Field` types are potentially redundant, or that we might get away with one 'general' definition. One general definition might be something like. ```julia; struct Field{X, Y, Z, ...}; data; grid; architecture; boundary_conditions; operand; status; end; ```. more or less mirroring [`ComputedField`](https://github.com/CliMA/Oceananigans.jl/blob/main/src/Fields/computed_field.jl). We then have the following equivalencies to existing data structures:. * `isnothing(operand)` and `isnothing(status)` recovers `Field`; * `operand isa AbstractOperation` recovers `ComputedField`; * one or more of `X, Y, Z` is `Nothing` implies the field is reduced along the `Nothing` dimension. For ""computed reductions"", we can define new operand wrappers like `Averaged` and `Integrated` with `dims` properties (maybe `Average`, or tense other than past or present, is better). We'll probably want to retain `KernelComputedField` and `FunctionField`. This would reduce the number of `struct`s we define significantly and might otherwise result in a significant reduction of code. It also clarifies how custom computed fields are defined: basically we might have something like. ```julia; compute!(field::Field) = compute!(field, field.operand); ```. This falls back to a no-op when `operand::Nothing`, but supports other behavior is `operand::AbstractOperation`, `operand::Average{<:AbstractOperation}`, or some other user-defined type. We can keep the existing user interface if we want, or we can change it. I'm less sure about what's best there. We probably wouldn't have a use for `ComputedField`, but for averages we could have. ```julia; avg_c = Field(Average(c, dims=1)); ```. or. ```julia; avg_c = Field(c, Average(dims=1)); ```. or, as before,. ```julia; avg_c = AveragedField(c, dims=1); ```. The last seems like the most readable, but obfuscates the source since there'd no longer be a struct `AveragedField` (this is",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2052:849,Integrat,Integrated,849,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2052,1,['Integrat'],['Integrated']
Deployability,It's common for Buildkite jobs to fail intermittently and require a restart/retry. But so far it seems like we have to manually retry. Does every contributor have the permission to restart a Buildkite job?. Buildkite does support automatic retries. To improve the developer experience it's probably worth enabling automatic retries for jobs?. Happy to modify the Buildkite .yml to add retries!. Buildkite blog post: https://buildkite.com/blog/job-retries; Buildkite docs: https://buildkite.com/docs/pipelines/command-step#retry-attributes,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3773:499,pipeline,pipelines,499,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3773,1,['pipeline'],['pipelines']
Deployability,"It's frustrating to encounter PyCall issues (as @sandreza and @qwert2266 already have) and it puts an extra burden on CI pipelines, so we should remove the SymPy dependency for now while the generated `WENO{N}` schemes are experimental.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/990:121,pipeline,pipelines,121,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/990,1,['pipeline'],['pipelines']
Deployability,"It's possible the seed of the random number generator is set when julia is installed? Or, some package could be setting it (I've seen this before too).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2702#issuecomment-1282747928:75,install,installed,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2702#issuecomment-1282747928,1,['install'],['installed']
Deployability,It's the same as the actual docs but you replace the `/dev/` or `/vX.X.X/` part with `/previews/PRXXXX/`. https://clima.github.io/OceananigansDocumentation/previews/PR1797. There will be something in this link now from the previous commits. As soon as the docs are build it still takes ~5-10min for the preview to be update.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-876025909:317,update,update,317,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-876025909,1,['update'],['update']
Deployability,It's time to update some dependencies :),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2966:13,update,update,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2966,1,['update'],['update']
Deployability,"Its ok for there to be a divergence in the slip velocity. In the case of the ocean surface or seafloor that's exactly what you want since the particles will then accumulate at those surfaces depending on whether they are light or dense. Tracer is conserved in an integrated sense since the flux through the boundary vanishes. In some cases the user might want a flux across the boundary, e.g. for dense particles sinking through an open boundary at the bottom of the domain, so we probably want the profile of the slip velocity in the user's control. Also, note that for very buoyant tracers there will be numerical issues if the tracer all accumulates at the surface. Finer grid spacing can help a bit, but I think this is a drawback to using buoyant tracers and particles work better in those cases (Jenny discusses this in her draft paper on microplastics which is under review).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1082411718:263,integrat,integrated,263,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1082411718,1,['integrat'],['integrated']
Deployability,"JjL0ZpZWxkcy9iYWNrZ3JvdW5kX2ZpZWxkcy5qbA==) | `92.85% <0.00%> (ø)` | |; | [src/TimeSteppers/time\_stepping\_kernels.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1039/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy90aW1lX3N0ZXBwaW5nX2tlcm5lbHMuamw=) | `79.09% <0.00%> (+0.96%)` | :arrow_up: |; | [src/TimeSteppers/generic\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1039/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9nZW5lcmljX3RpbWVfc3RlcHBpbmcuamw=) | `96.87% <0.00%> (+1.63%)` | :arrow_up: |; | [src/Models/clock.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1039/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9jbG9jay5qbA==) | `85.71% <0.00%> (+2.38%)` | :arrow_up: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1039/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `96.15% <0.00%> (+2.40%)` | :arrow_up: |; | [src/Utils/Utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1039/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL1V0aWxzLmps) | `42.85% <0.00%> (+2.85%)` | :arrow_up: |; | [src/AbstractOperations/unary\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1039/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy91bmFyeV9vcGVyYXRpb25zLmps) | `82.35% <0.00%> (+5.88%)` | :arrow_up: |; | ... and [4 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1039/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1039?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1039?src=pr&el=footer). Last update [d274364...1675e40](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1039?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1039#issuecomment-707647298:3582,update,update,3582,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1039#issuecomment-707647298,1,['update'],['update']
Deployability,"JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `80.00% <ø> (+22.85%)` | :arrow_up: |; | [src/LagrangianParticleTracking.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1091/diff?src=pr&el=tree#diff-c3JjL0xhZ3JhbmdpYW5QYXJ0aWNsZVRyYWNraW5nLmps) | `83.33% <83.33%> (ø)` | |; | [src/TimeSteppers/quasi\_adams\_bashforth\_2.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1091/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9xdWFzaV9hZGFtc19iYXNoZm9ydGhfMi5qbA==) | `76.92% <100.00%> (+0.60%)` | :arrow_up: |; | [src/Models/Models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1091/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9Nb2RlbHMuamw=) | `100.00% <0.00%> (ø)` | |; | [src/TimeSteppers/store\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1091/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9zdG9yZV90ZW5kZW5jaWVzLmps) | `72.72% <0.00%> (ø)` | |; | [...dels/IncompressibleModels/non\_dimensional\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1091/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9ub25fZGltZW5zaW9uYWxfbW9kZWwuamw=) | | |; | [...Models/IncompressibleModels/pressure\_correction.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1091/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9wcmVzc3VyZV9jb3JyZWN0aW9uLmps) | | |; | ... and [29 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1091/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1091?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1091?src=pr&el=footer). Last update [7d30dba...03d1209](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1091?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-713522601:3325,update,update,3325,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-713522601,1,['update'],['update']
Deployability,"JjL1V0aWxzL2xhdW5jaF9jb25maWcuamw=) | `94.11% <0%> (-5.89%)` | :arrow_down: |; | [...ntations/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3JvemVtYV9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `32% <0%> (-2.1%)` | :arrow_down: |; | [src/Solvers/box\_pressure\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYm94X3ByZXNzdXJlX3NvbHZlci5qbA==) | `0% <0%> (ø)` | :arrow_up: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `100% <0%> (ø)` | :arrow_up: |; | [src/Utils/time\_step\_wizard.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3RpbWVfc3RlcF93aXphcmQuamw=) | `100% <0%> (ø)` | :arrow_up: |; | [src/Grids/vertically\_stretched\_cartesian\_grid.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL3ZlcnRpY2FsbHlfc3RyZXRjaGVkX2NhcnRlc2lhbl9ncmlkLmps) | `100% <0%> (ø)` | :arrow_up: |; | ... and [41 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656?src=pr&el=footer). Last update [0676c76...645a483](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/656#issuecomment-592649433:3828,update,update,3828,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/656#issuecomment-592649433,1,['update'],['update']
Deployability,"Joes PR adding integration tests (which now passes and we should merge, if you can review), I think needs 12 to pass",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3607#issuecomment-2136854514:15,integrat,integration,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3607#issuecomment-2136854514,1,['integrat'],['integration']
Deployability,Julia's compat entry at Project.toml + remove the warning mentioned in #3182 whatsoever + update the docs/readme where we mention what version of Julia is needed. Probably that's it. Start with that and we can work together on the PR?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3184#issuecomment-1638016603:90,update,update,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3184#issuecomment-1638016603,1,['update'],['update']
Deployability,"Just a note on this PR: It's kind of hacky but to avoid images and videos taking up space in git history (they take up a lot!) I'd advocate for uploading images into an issue (effectively hosting them on GitHub's servers) and then linking/embedding them. In an ideal world the validation experiment CI pipeline would run and produce figures for all validation experiments which would then be automatically embedded into the docs with every version release. But setting up this infrastructure would take time and effort which I suspect no one can spare right now. Unfortunately it's a thankless job haha. > We try to fix this issue and keep the validation experiments and benchmarks up-to-date. I've always wanted to do this and wish I had the time to do it... This was the original motivitation for setting up the validation experiment CI pipeline: https://buildkite.com/clima/oceananigans-validation-experiments. It only runs the convergence tests right now and it still runs every night but it's been neglected so stuff is failing. I personally think we should be reviving the validation experiments one-by-one starting with the most important ones by running them as part of that CI pipeline and fixing it when it fails. But without the ability to dedicate the time I can see why reducing our maintenance burden would be desirable. I've also always wanted to set up a benchmarking CI pipeline, but I don't think we have the proper computational resources to set it up right now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872386226:302,pipeline,pipeline,302,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872386226,5,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"Just a quick update, zero-viscosity Bicklet jet test case for `VectorInvariant`, `WENOVectorInvariant` (smoothness calculated based on `ζ`), modified VectorInvariant WENO with smoothness based on 2D stencils of `u` and `v`, here called `WENOVectorInvariantZVEL`. `VectorInvariant`. https://user-images.githubusercontent.com/33547697/157745561-a8e5f128-2f4e-42e3-9305-3f624498590b.mp4. `WENOVectorInvariant`. https://user-images.githubusercontent.com/33547697/157745569-41c52e2d-c80b-4d43-b2bf-8a914e8856a2.mp4. `WENOVectorInvariantZVEL`. https://user-images.githubusercontent.com/33547697/157745571-725ea604-8dec-44bd-bd08-dcd70d9ed4b1.mp4. `WENOVectorInvariantZVEL` seems to perform actually very well compared to a (somewhat) standard ""vorticity-reconstruction"" `WENOVectorInvariant` and compared to the very noisy standard `VectorInvariant` in lie of the fact that; - Noise is reduced significantly despite dissipation not being too high; - Agreement between different resolutions is much higher",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064455116:13,update,update,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064455116,1,['update'],['update']
Deployability,"Just an update (mostly for my own benefit later), apparently the outputs are constructed appropriately now, but the outputs still can't be written to NetCDF because the writer creates the variables with a different size:. ```julia; ERROR: LoadError: NetCDF error: size mismatch for variable 'op_sliced2' in file './sliced.nc'. Trying to write (2, 1, 6) elements while [2, 1, 4, 1] are expected (NetCDF error code: -57); Stacktrace:; [1] _nc_check_size_put_vars(ncid::Int32, varid::Int32, countp::Vector{Int64}, op::Array{Float32, 3}); @ NCDatasets ~/.julia/packages/NCDatasets/XVX8L/src/netcdf_c.jl:943; [2] nc_put_vars(ncid::Int32, varid::Int32, startp::Vector{Int64}, countp::Vector{Int64}, stridep::Vector{Int64}, op::Array{Float32, 3}); @ NCDatasets ~/.julia/packages/NCDatasets/XVX8L/src/netcdf_c.jl:954; [3] setindex!; @ ~/.julia/packages/NCDatasets/XVX8L/src/variable.jl:457 [inlined]; [4] setindex!(::NCDatasets.Variable{Float32, 4, NCDatasets.NCDataset{Nothing}}, ::Array{Float32, 3}, ::Colon, ::Colon, ::Colon, ::Int64); @ NCDatasets ~/.julia/packages/NCDatasets/XVX8L/src/variable.jl:490; [5] setindex!(::NCDatasets.CFVariable{Float32, 4, NCDatasets.Variable{Float32, 4, NCDatasets.NCDataset{Nothing}}, NCDatasets.Attributes{NCDatasets.NCDataset{Nothing}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing}}}, ::Array{Float32, 3}, ::Colon, ::Colon, ::Colon, ::Int64); @ NCDatasets ~/.julia/packages/NCDatasets/XVX8L/src/cfvariable.jl:732; [6] save_output!(ds::NCDatasets.NCDataset{Nothing}, output::Field{Face, Center, Center, Oceananigans.AbstractOperations.BinaryOperation{Face, Center, Center, typeof(*), Int64, Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Periodic, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArr",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1131970655:8,update,update,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1131970655,1,['update'],['update']
Deployability,"Just as an update --- we actually currently cannot do this verification experiment because of a problem with LES models (a theoretical problem, not an implementation problem) with specified buoyancy flux boundary conditions and zero stress boundary conditions. In short, we observe grid-scale oscillations in the near-surface buoyancy gradient when buoyancy fluxes are specified. The primary issue is associated with a too-small near-surface LES diffusivity. . I want to emphasize that this is not a numerical issue with boundary condition specification, or a bug in the LES implementation --- this is a fundamental, theoretical problem with LES formulation. Others have observed this issue before with a variety of LES formulations, so this issue is not particular to AMD, either. I'm working on a fix because this is an important, canonical problem. The easiest way to fix the problem is to allow the LES model constant (which we should view as a free parameter) to vary in space and in particular to increase near the wall. This is simple, yet completely empirical solution. . The level of empiricism / near-wall enhancement of the model constant needed for a smooth solution is mitigated somewhat if we can specify the gradient of buoyancy / temperature on the boundary. This second component of the fix can be done by introducing a wall model on top of the interior LES formulation that applies *on* boundaries. The wall model introduces a second free parameter in addition to the interior LES free parameter. Adjusting the wall model's free parameter allows us to ""effectively"" increase the near-wall value of the AMD diffusivity. An even better, more complete fix would also modify the interior LES model near the wall. But this is an open-ended science problem with no clear solution.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-580299239:11,update,update,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-580299239,1,['update'],['update']
Deployability,"Just got a hold of a GPU. I tried this and only saw a slowdown of 10% or so with `ContinuousForcing`, which I guess is okay. So this seems to be a CPU issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875721718:82,Continuous,ContinuousForcing,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875721718,1,['Continuous'],['ContinuousForcing']
Deployability,"Just here to say that I had to update some code from using `grid.xC` to using `grid.Δxᵃᵃᶜ` which is more difficult to write, so I support a redesign or some more user-friendly way.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2058#issuecomment-1001101205:31,update,update,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2058#issuecomment-1001101205,2,['update'],['update']
Deployability,"Just leaving this for the record, the KA and CUDA updates didn't fix this unfortunately...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1516511442:50,update,updates,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1516511442,1,['update'],['updates']
Deployability,"Just to add to this, I started going through manually installing the version of packages in the Oceananigans manifest to try and weed out which one it was and none of the suspicious ones like `LLVM` made a difference. I didn't get round to trying them all.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1808251360:54,install,installing,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1808251360,1,['install'],['installing']
Deployability,"Just to be clear, the auxiliary field I'm using in my example has nothing to do with the forcing. The forcing is needed for physical reasons and I was using the auxiliary field (together with a callback) as a way to integrate something in time for a budget. Since that worked for CPU I assumed it was supposed to work for GPUs as well. But since that's not the case and scalars aren't supported, I'll close this issue. Thanks",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482933583:216,integrat,integrate,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482933583,2,['integrat'],['integrate']
Deployability,"Just to be clear, the point of doing this is because you want to use dispatch to write flexible array operations that are agnostic to whether the array is a 'raw' array (like an `Array` or `CuArray`), or some kind of wrapper like an `OffsetArray`. By writing `parent(a)`, you ensure correct behavior on `a` in both cases; you don't need to write new high-level functions for wrappers versus arrays because dispatch is performed at the lower level, where it belongs. With `data` we can use the same logic --- this concept is deployed extensively in PR #463.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/454#issuecomment-542269350:524,deploy,deployed,524,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/454#issuecomment-542269350,1,['deploy'],['deployed']
Deployability,"Just to clarify things a bit for you @loganpknudsen --- your error says. > ERROR: LoadError: Failed to precompile Oceananigans. this means that the segmentation fault occurs during precompilation of `Oceananigans`, which occurs before any code you have written executes. That's why the error comes from ""line 1"" of your script (is that where you write `using Oceananigans`?). Another clue is the text. > [52922] signal (11.1): Segmentation fault; > in expression starting at /glade/u/home/knudsenl/.julia/packages/Oceananigans/M82LU/src/Oceananigans.jl:129. That says the error comes from line 129 in the file `src/Oceananigans.jl`. Going to that line on `main` branch we find:. https://github.com/CliMA/Oceananigans.jl/blob/d6e63e53e795272378b7657c4a6f32da2d62d6f9/src/Oceananigans.jl#L129. so there's something wrong with your CUDA / how it's loaded. The best course of action is probably to update to julia 1.10 first of all rather than using julia 1.9.2. Next, see if you can simply write `using CUDA` rather than trying to run your whole script. If you can get that to work (better yet if you can use some of `CUDA.jl` on a GPU on derecho then move on to simply writing `using Oceananigans` and trying to build a grid on the GPU. If that succeeds move on to your script.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2240940342:894,update,update,894,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2240940342,2,['update'],['update']
Deployability,"Just to frame the discussion: this is probably most important in the context of new users or scientists trying to read examples, docs, and scripts that implement numerical experiments for scientific purposes. In that context I agree with @ali-ramadhan that `BoussinesqModel` is misleading for models with `tracers = nothing` and `buoyancy = nothing`. I think we've also discussed making this default, since its simple... As for the distinction between hydrostatic and non-hydrostatic models I agree that with currently supported configurations, `NonhydrostaticRigidLid` is better than `HydrostaticFreeSurfaceModel`. I'm only hesitant about this change because I wonder if we may want to combine these two models in the future. The motivation to develop `HydrostaticFreeSurfaceModel` separately is largely practical and caves to short term timeline pressures (it's easier to break things when nobody's using it, and we throw a warning right in the constructor so people know its experimental). In the long run it might make sense to have just a single interface to all incompressible models and support all combinations of hydrostatic, non-hydrostatic, free surface / rigid lid, etc through a single interface, similar to what MITgcm offers. The interfaces / model specific code is expensive to maintain, which motivates having just one interface. If this is our goal, it'd be premature to change the name of `IncompressibleModel`. If people feel they'd like to commit to maintaining two interfaces / model constructors / time-stepping code then I think changing the name to be clearer but less general is an option to consider. I personally would rather maintain as few `AbstractModel` as possible because I feel they are fairly expensive in terms of person-time to maintain. And we probably have a lot of improvements that need to be made (features like `model.auxiliary_fields`, `VectorField` for velocity field rather than baking in the coordinate system which fails on the cubed sphere), proper su",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1620#issuecomment-827842772:529,configurat,configurations,529,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1620#issuecomment-827842772,2,['configurat'],['configurations']
Deployability,"JzLmps) | `46.97% <96.15%> (-17.77%)` | :arrow_down: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `40.65% <0%> (-56.97%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `16.21% <0%> (-40.93%)` | :arrow_down: |; | [src/turbulence\_closures/constant\_smagorinsky.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvY29uc3RhbnRfc21hZ29yaW5za3kuamw=) | `51.42% <0%> (-37.15%)` | :arrow_down: |; | [src/turbulence\_closures/closure\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvY2xvc3VyZV9vcGVyYXRvcnMuamw=) | `42.62% <0%> (-22.55%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `42% <0%> (-20.03%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `59.15% <0%> (-10.85%)` | :arrow_down: |; | ... and [8 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326?src=pr&el=footer). Last update [66670ad...40fd4b0](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/326#issuecomment-523974976:3206,update,update,3206,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/326#issuecomment-523974976,1,['update'],['update']
Deployability,"Kind of a leftover relic I forgot to cleanup, but boundary condition API kernels still use the old `Tx, Ty` and `Bx, By, Bz` values to launch kernels. We should switch them to use dynamic launch configuration like all the other time stepping kernels.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/363:195,configurat,configuration,195,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/363,1,['configurat'],['configuration']
Deployability,"Kind of a work-in-progress but would be good to merge as PR #997 depends on these changes. Not the final form of the Buildkite pipeline as I'm still working on improving and expanding it but so far there's an initial job/stage that downloads Julia and instantiates, precompiles, etc. Then all the other jobs can use this new Julia environment to run their tests. Past behavior was just to reuse my Julia environment. I think it's important that CI always creates a fresh environment from scratch as this is how users will install the code usually, and it will help us catch issues like #991 early.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1031:127,pipeline,pipeline,127,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1031,2,"['install', 'pipeline']","['install', 'pipeline']"
Deployability,"Kinda feels like we're getting closer to a version 1.0 release, although I don't think we need to put a time frame on it. Is it worth discussing which major development milestones we think should be part of v1.0?. Since we're following [SemVer](https://semver.org/) I guess it's not really about which features we want to see in v1.0 but more about whether we think the user interface will be relatively stable. New features could be introduced in v1.1, v1.2, etc. but if we make any breaking changes we'll have to release v2.0. Maybe it's still useful to list some major milestones as they're quite likely to introduce breaking changes?. I'll start with the three big ones on my mind:; - [x] Pressure solvers for all topologies and grids (#586); - [x] MPI distributed parallelism (#590) [not necessarily super optimized, just something that works okay]; - [x] Vertically stretched grid (#471); - [ ] Abstraction for vectors. It's only for simple grids that we can really get away with referring to the velocity field component wise with `u, v, w`.; - [ ] Specifying `architecture` when building `grid` (#1825).; - [ ] Simplify grids. We really only need one `RectilinearGrid`, one `LatitudeLongitudeGrid`, and one ""arbitrary"" (not aligned with a coordinate system, like what's used for the cubed sphere); - [ ] Finalize spherical implementations; - [ ] Finalize bathymetry. Would be great to hear what people think and if anyone has any thoughts on v1.0. Might also be good to include @whitleyv's immersed boundary implementation and @francispoulin's shallow water model since both might bring some breaking changes as well. PS: Stuff added on 2021-07-23.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1234:55,release,release,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1234,2,['release'],['release']
Deployability,"L154 all make use of functions like `Δᶠx_ffc` but they are defined in an `@eval` loop in in `verstappen_anisotropic_minimum_dissipation.jl`. We should probably make it clearer that these functions are closure-specific. 2. In `smagorinsky_lilly.jl`, the `κ_∂x_c`, `κ_∂y_c`, and `κ_∂z_c` functions use `ℑxᶠᵃᵃ(i, j, k, grid, νₑ, closure)` however I'm pretty sure we can just use `ℑxᶠᵃᵃ(i, j, k, grid, νₑ)` here. If so, we can get rid of the `ℑxᶠᵃᵃ(i, j, k, grid::AG{FT}, c, args...)` function definitions. 3. Certain functions are shared between turbulence closures, e.g. `ΣᵢⱼΣᵢⱼᶜᶜᶜ` is used by both `smagorinsky_lilly.jl` and `blasius_smagorinsky.jl`. Should they be moved to `closure_operators.jl`?. 4. Also, VAMD uses `Δᶠxᶜᶜᶜ` for the filter widths while Rozema AMD uses `Δx` (which looks like the regular `Δx` used by `Oceananigans.Operators`). We should probably change all filter widths to use `Δᶠ`. 5. Smagorinsky-Lilly uses `Δᶠ_ccc` for filter widths. Switching to `Δᶠᶜᶜᶜ` is probably a bad idea as `ᶠ` is denotes face. Should we change them to `Δᶠxᶜᶜᶜ = Δᶠyᶜᶜᶜ = Δᶠzᶜᶜᶜ = Δᶠ_ccc`?. 6. I could never find a symbol like `\cdot` for divergences that can be used in function names. What do you think of renaming function names like `∇_κ_∇c` to `div_κ_∇c`?. 7. `▶` is used in a lot of places in the `AbstractOperators` module. They should probably be changed to `ℑ` for consistency, but since it's all local to AbstractOperators, I'm leave the decision to @glwagner. Some changes we need to make for vertically stretched grids:; * I initially thought that we might need `apply_z_top_bc!` and `apply_z_bottom_bc!` to use ΔzC or ΔzF based on the field, but this would only apply to `w` for which you cannot use flux boundary conditions for z, so maybe it can always just use ΔzF (spacing between faces) and we can keep the one version.; * Same comment as above for `_fill_top_halo!` and `_fill_bottom_halo!`. I'll release v0.16 once this is merged as JULES.jl depends on these finite volume operators.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/529:2848,release,release,2848,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/529,1,['release'],['release']
Deployability,"L2JlbmNobWFya190cmFjZXJzLmps) | `0.00% <ø> (ø)` | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | `0.00% <ø> (ø)` | |; | [docs/make.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-ZG9jcy9tYWtlLmps) | `0.00% <ø> (ø)` | |; | [src/Utils/Utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL1V0aWxzLmps) | `100.00% <ø> (ø)` | |; | [src/Grids/regular\_cartesian\_grid.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL3JlZ3VsYXJfY2FydGVzaWFuX2dyaWQuamw=) | `81.81% <50.00%> (-8.19%)` | :arrow_down: |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `89.36% <54.54%> (-10.64%)` | :arrow_down: |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `85.71% <85.71%> (ø)` | |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `93.42% <87.50%> (-2.95%)` | :arrow_down: |; | ... and [2 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823?src=pr&el=footer). Last update [40e7caf...2a19ef9](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/823?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/823#issuecomment-664396956:3336,update,update,3336,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/823#issuecomment-664396956,1,['update'],['update']
Deployability,"Last minute benchmarks update for JOSS. Resolves #607. The performance benchmarks have been updated from v0.18.0 to v0.34.0. While it seems that CPU models have gotten faster by about ~32% while large GPU models have slowed down by ~15%, I think that's just because the v0.18.0 benchmarks were run on Supercloud or somewhere with a V100 while the v0.34.0 benchmarks were run on Tartarus where the TITAN V is marginally slower but the CPUs are beefier. No noticeable regression is pretty great considering how many features and improvements we've added since v0.18.0 and the fact that we haven't really done any profiling and targeted performance optimization. What seems to have gotten worse is constant overhead costs so small models are slower because of it, but this is something we can tackle when we focus on performance optimization in the future. ![benchmark_plots](https://user-images.githubusercontent.com/20099589/89906791-d2c85b00-dbb9-11ea-969a-4b8db2c31680.png)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/850:23,update,update,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/850,2,['update'],"['update', 'updated']"
Deployability,"LatitudeLongitudeGrid{…}, callbacks::Vector{…}; compute_tendencies::Bool); @ Oceananigans.Models.HydrostaticFreeSurfaceModels ~/.julia/packages/Oceananigans/Hkk5J/src/Models/HydrostaticFreeSurfaceModels/update_hydrostatic_free_surface_model_state.jl:50; [22] update_state!; @ ~/.julia/packages/Oceananigans/Hkk5J/src/Models/HydrostaticFreeSurfaceModels/update_hydrostatic_free_surface_model_state.jl:31 [inlined]; [23] update_state!; @ ~/.julia/packages/Oceananigans/Hkk5J/src/Models/HydrostaticFreeSurfaceModels/update_hydrostatic_free_surface_model_state.jl:28 [inlined]; [24] update_state!(model::HydrostaticFreeSurfaceModel{…}); @ Oceananigans.Models.HydrostaticFreeSurfaceModels ~/.julia/packages/Oceananigans/Hkk5J/src/Models/HydrostaticFreeSurfaceModels/update_hydrostatic_free_surface_model_state.jl:28; [25] HydrostaticFreeSurfaceModel(; grid::LatitudeLongitudeGrid{…}, clock::Clock{…}, momentum_advection::Centered{…}, tracer_advection::Centered{…}, buoyancy::Nothing, coriolis::Nothing, free_surface::SplitExplicitFreeSurface{…}, tracers::Nothing, forcing::@NamedTuple{…}, closure::Nothing, boundary_conditions::@NamedTuple{}, particles::Nothing, biogeochemistry::Nothing, velocities::Nothing, pressure::Nothing, diffusivity_fields::Nothing, auxiliary_fields::@NamedTuple{}); @ Oceananigans.Models.HydrostaticFreeSurfaceModels ~/.julia/packages/Oceananigans/Hkk5J/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_model.jl:204; [26] top-level scope; @ REPL[30]:1; Some type information was truncated. Use `show(err)` to see complete types.; ```. ---. Environment: Oceananigans.jl v0.91.11 and. ```; julia> versioninfo(); Julia Version 1.10.4; Commit 48d4fd48430 (2024-06-04 10:41 UTC); Build Info:; Official https://julialang.org/ release; Platform Info:; OS: Linux (x86_64-linux-gnu); CPU: 48 × AMD Ryzen Threadripper 7960X 24-Cores; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-15.0.7 (ORCJIT, znver3); Threads: 1 default, 0 interactive, 1 GC (on 48 virtual cores); ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3736:7052,release,release,7052,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3736,1,['release'],['release']
Deployability,Leave it. I approve. Let's just bump a minor release.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3341#issuecomment-1763229373:45,release,release,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3341#issuecomment-1763229373,1,['release'],['release']
Deployability,"Let's also bump a patch release for this feature, i.e. change . https://github.com/CliMA/Oceananigans.jl/blob/8936bec4f19b9cab49e42b69f475f828553a897a/Project.toml#L4. to `version = ""0.76.7""`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1169211603:18,patch,patch,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1169211603,2,"['patch', 'release']","['patch', 'release']"
Deployability,Linear equation of state should be upgraded to account for salinity and pressure.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/20:35,upgrade,upgraded,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/20,1,['upgrade'],['upgraded']
Deployability,Linux CPU+GPU tests are running on Buildkite so we can stop testing on GitLab CI. One less CI pipeline to maintain.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1049:94,pipeline,pipeline,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1049,1,['pipeline'],['pipeline']
Deployability,Looks good to me. It's breaking change so bump up minor release..,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1460696721:56,release,release,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1460696721,1,['release'],['release']
Deployability,"Looks good to me. My only question is about the derivation of ``wˢ``, which results from a vertical integration of the analytical functions. Currently this integral is performed under the assumption that ``wˢ`` is zero at large depths, which I clarified in the code:; https://github.com/CliMA/Oceananigans.jl/blob/06f6ac746742d08c78b3cfed0bd40f7df4392819/src/StokesDrifts.jl#L213-L215. **Is this the correct assumption here?** It effectively means that ``wˢ`` and its gradients are a maximum at the surface under a depth-decaying Stokes drift, so any horizontal convergence/divergence of Stokes drift manifests a local change in sea surface height:; https://github.com/CliMA/Oceananigans.jl/blob/06f6ac746742d08c78b3cfed0bd40f7df4392819/src/StokesDrifts.jl#L248-L250. An alternative would be to set ``wˢ`` to zero at the surface, which would cause ``wˢ`` and its horizontal gradients to reach a maximum at large depths, as the occurrences of ``ûˢ(z)`` above would become ``( ûˢ(z) - ûˢ(0) )``. Essentially, horizontal convergence/divergence would manifest as downwelling/upwelling (rather than SSH changes in the current case). I feel like this approach makes sense for LES setups, but it could cause problems for simulations of the full water column where you don't want direct Stokes drift effects deep in the ocean interior. I'm happy to go forward with this example as is, but the above would be a useful question to answer in the future.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3425#issuecomment-1891314292:100,integrat,integration,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3425#issuecomment-1891314292,1,['integrat'],['integration']
Deployability,Looks like a good interface to me. But is it on purpose that there is only support for background fields in the `NonhydrostaticModel` and not for the `HydrostaticFreeSurfaceModel`?. @liuchihl will test it in our configurations.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2204239079:212,configurat,configurations,212,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2204239079,1,['configurat'],['configurations']
Deployability,Looks like it isn't actually supported. We'd need a `ContinuousDiffusionFunction` or something like that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3840#issuecomment-2401009456:53,Continuous,ContinuousDiffusionFunction,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3840#issuecomment-2401009456,1,['Continuous'],['ContinuousDiffusionFunction']
Deployability,Looks like this PR only updates Adapt to v2.4.0 and not v3.0.0 so maybe it's being blocked by a dependency (which probably has a similar CompatHelper PR open right now). I think we should wait to check that all tests pass with Adapt v3.0.0 before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1287#issuecomment-754962548:24,update,updates,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1287#issuecomment-754962548,1,['update'],['updates']
Deployability,Looks like this PR upgrades to Julia 1.6 as well now?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-819116119:19,upgrade,upgrades,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-819116119,1,['upgrade'],['upgrades']
Deployability,"Looks like you are running the branch ""#ali/unclog-docs"". I believe some packages were updated on that branch which lead to this issue. If you update to the latest tagged version, does the issue persist?. I believe this is related to #1601 .",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-826092455:87,update,updated,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-826092455,2,['update'],"['update', 'updated']"
Deployability,Low priority item. But no need to install CUDA packages if you're only going to run on a CPU.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/79:34,install,install,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/79,1,['install'],['install']
Deployability,Makie updated the way this works. See second bullet point in https://makie.juliaplots.org/stable/documentation/news/#v016,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2542#issuecomment-1122845108:6,update,updated,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2542#issuecomment-1122845108,1,['update'],['updated']
Deployability,"Matrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_w), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.identity4)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_w), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_w), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.identity1)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_w), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.identity2)}}}, Nothing, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2860:13953,Continuous,ContinuousBoundaryFunction,13953,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2860,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,Maybe it did need some of the overwrite existing because it writes different configurations to the same file. Update: passes locally if I add them back,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570636076:77,configurat,configurations,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570636076,2,"['Update', 'configurat']","['Update', 'configurations']"
Deployability,Mid-Level Enzyme + Oceananigans Integration Test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3346:32,Integrat,Integration,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3346,1,['Integrat'],['Integration']
Deployability,"Might be because I updated the `Manifest.toml` which included an upgrade to OffsetArrays v1.3.0 but @qwert2266 ran into this issue on Oceananigans v0.37.0. ```; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.5.0 (2020-08-01); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> using Oceananigans; [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; ERROR: MethodError: OffsetArrays.OffsetArray(::CUDA.CuArray{Float64,3}, ::RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, ::Tuple{DataType,DataType,DataType}) is ambiguous. Candidates:; (::Type{OffsetArrays.OffsetArray})(A::AbstractArray, inds...) in OffsetArrays at /home/alir/.julia/packages/OffsetArrays/CXQGe/src/OffsetArrays.jl:172; (::Type{OffsetArrays.OffsetArray})(underlying_data, grid::Oceananigans.Grids.AbstractGrid, loc) in Oceananigans.Fields at /home/alir/Oceananigans.jl/src/Fields/new_data.jl:33; Possible fix, define; OffsetArrays.OffsetArray(::AbstractArray, ::Oceananigans.Grids.AbstractGrid, ::Any); Stacktrace:; [1] new_data(::Type{T} where T, ::GPU, ::RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, ::Tuple{DataType,DataType,DataType}) at /home/alir/Oceananigans.jl/src/Fields/new_data.jl:70; [2] XFaceField(::DataType, ::GPU, ::RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, ::NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/991:19,update,updated,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/991,3,"['release', 'update', 'upgrade']","['release', 'updated', 'upgrade']"
Deployability,"Might be good to start learning how to properly profile Oceananigans. It is slowing down a little bit as we add more things and develop stuff (see https://github.com/climate-machine/Oceananigans.jl/pull/147#issuecomment-479474578). We can easily profile it on a CPU to see where the code spends the most time and maybe find some easy things to optimize before profiling it on a GPU where things might be less obvious. Some useful links:; * https://docs.julialang.org/en/v1/manual/profile/index.html; * https://github.com/JuliaLang/julia/issues/4483 (might have to patch LLVM, could be a pain to get working).; * https://docs.nvidia.com/cuda/profiler-users-guide/index.html; * https://juliagpu.github.io/CUDAnative.jl/stable/man/performance.html#Optimizing-1; * https://discourse.julialang.org/t/writing-fast-stencil-computation-kernels-that-work-on-both-cpus-and-gpus/20200 (I pasted some commands where I use nvprof)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/162:564,patch,patch,564,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/162,1,['patch'],['patch']
Deployability,Might need to update the Manifest,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1760663048:14,update,update,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1760663048,1,['update'],['update']
Deployability,"Minor update:. I have a reduced case that is `4x4` that I'm playing with to try and determine why the results from CPUs differ from GPUs. After one time step, using `QuasiAdamsBashforth2`, I get that the two sets of values in the first column are identical. ; ```; CPU; 10-element OffsetArray(::Array{Float64,1}, -2:7) with eltype Float64 with indices -2:7:; 0.006762989865623905; 0.006762989865623905; 2.673025080318251e-8; 2.673025080318251e-8; 0.006762989865623905; 0.006762989865623905; 2.673025080318251e-8; 2.673025080318251e-8; 0.006762989865623905; 0.006762989865623905. GPU; 10-element OffsetArray(::CuArray{Float64,1}, -2:7) with eltype Float64 with indices -2:7:; 0.006762989865623905; 0.006762989865623905; 2.673025080318251e-8; 2.673025080318251e-8; 0.006762989865623905; 0.006762989865623905; 2.673025080318251e-8; 2.673025080318251e-8; 0.006762989865623905; 0.006762989865623905; ```. However, when I use `RungeKutta3` I get that the results are different.; ```; CPU; 10-element OffsetArray(::Array{Float64,1}, -2:7) with eltype Float64 with indices -2:7:; 0.00676299502124483; 0.00676299502124483; 1.696248222222971e-8; 1.696248222222971e-8; 0.00676299502124483; 0.00676299502124483; 1.6962482222229713e-8; 1.6962482222229713e-8; 0.00676299502124483; 0.00676299502124483. GPU; 10-element OffsetArray(::CuArray{Float64,1}, -2:7) with eltype Float64 with indices -2:7:; 0.006762989865623905; 0.006762989865623905; 2.673025080318251e-8; 2.673025080318251e-8; 0.006762989865623905; 0.006762989865623905; 2.673025080318251e-8; 2.673025080318251e-8; 0.006762989865623905; 0.006762989865623905; ```; I know the differences are small, 8th decimal place or so, but on such a coarse grid should we be expecting the same answers?. I observed that QAB2 then starts to differ at the next time step. I suppose the differences in the `RK3` method appear sooner because it is a multistep method, so three steps in one?. I know that the pressure solve is what differs significantly between the `CPU` an",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815174351:6,update,update,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-815174351,1,['update'],['update']
Deployability,Minor updates in `Docs/simulation_tips`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3106:6,update,updates,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3106,1,['update'],['updates']
Deployability,Minor upgrades to reductions of fields and AbstractOperations,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2039:6,upgrade,upgrades,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2039,2,['upgrade'],['upgrades']
Deployability,Miscellaneous updates to get ConformalCubedSphereGrid simulations running on the GPU,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1608:14,update,updates,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1608,1,['update'],['updates']
Deployability,Moves masking fields from model update to output writers when using ImmersedBoundary,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616:32,update,update,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616,1,['update'],['update']
Deployability,My apologies. I installed using Pkg.add and assumed it would give me the latest version. I've updated the version and that solved the problem. Thanks for looking into it!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3551#issuecomment-2052105985:16,install,installed,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3551#issuecomment-2052105985,2,"['install', 'update']","['installed', 'updated']"
Deployability,"My two cents:. > TODO list (some we might want to address before merging, some we probably should open issues about):; > ; > 1. We need a new `Connected` topology with N `Bounded` `Face`s instead of N+1. For MPI we might also need `LeftConnected` and `RightConnected`. In this PR!. > 2. For cubed sphere fields, re-use existing fields but with new types: `CubedSphereData` and `CubedSphereBoundaryConditions`. Soon. > 3. Figure out a clean way of integrating `fill_horizontal_velocity_halos!` with the existing time-stepping. Perhaps we just need a `maybe_fill_horizontal_velocity_halos!` function that only does something on a connected cubed sphere. Let's come up with an abstraction for vectors and use this for `HydrostaticFreeSurfaceModel`. > 4. We need values for the grid coordinates `λᶜᶠᵃ`, `λᶠᶜᵃ`, `φᶜᶠᵃ`, and `φᶠᶜᵃ` so that we can use `set!` for velocities on the cubed sphere. They are not provided by the file but we should be able to convert the available coordinates back to the cubed sphere face in (ξ, η) coordinates where -1 ≤ ξ, η ≤ 1 which forms a regular grid then interpolate in between and back to the sphere to get the other staggered grid coordinates. The file should provide this. > 5. We need to use the sine and cosine of the local angle between the grid orientation (e.g., u-velocity) and zonal west-east direction at the grid-cell centers to `set!` velocity fields. Right now we're limited to setting velocity fields from a streamfunction... Let's come up with an abstraction for vectors and use this for `HydrostaticFreeSurfaceModel`. > 6. Should we be filling the halos of the grid metrics? Seems like they should be filled like velocity halos but without any sign changes. Yes. > 7. Make sure that calling `fill_halo_regions!` on a horizontal velocity field only fills the halos with non-`CubedSphereExchange` boundary conditions. Seems easy, but setting boundary conditions will require an abstraction for vectors and coordinate system transformations. > 8. Add the cu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-818046333:447,integrat,integrating,447,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-818046333,2,['integrat'],['integrating']
Deployability,"N0X3NvbHZlcnMuamw=) | | |; | [...nceTests/OneDimensionalCosineAdvectionDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxDb3NpbmVBZHZlY3Rpb25EaWZmdXNpb24uamw=) | | |; | [test/test\_grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2dyaWRzLmps) | | |; | [...ergence\_tests/ConvergenceTests/ConvergenceTests.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvQ29udmVyZ2VuY2VUZXN0cy5qbA==) | | |; | [examples/ocean\_wind\_mixing\_and\_convection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb2NlYW5fd2luZF9taXhpbmdfYW5kX2NvbnZlY3Rpb24uamw=) | | |; | [...ence\_tests/ConvergenceTests/OneDimensionalUtils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxVdGlscy5qbA==) | | |; | [...erification/lid\_driven\_cavity/lid\_driven\_cavity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2xpZF9kcml2ZW5fY2F2aXR5L2xpZF9kcml2ZW5fY2F2aXR5Lmps) | | |; | ... and [53 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979?src=pr&el=footer). Last update [d80be8c...a0ca748](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/979#issuecomment-699227574:3487,update,update,3487,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/979#issuecomment-699227574,1,['update'],['update']
Deployability,NCDatasets v0.13.1 was released,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3309#issuecomment-1757799076:23,release,released,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3309#issuecomment-1757799076,1,['release'],['released']
Deployability,Need to update README and docs to mention the new Julia 1.4+ requirement.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/765:8,update,update,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/765,1,['update'],['update']
Deployability,Need to update `ParameterizedForcing` constructor,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/785:8,update,update,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/785,1,['update'],['update']
Deployability,"Nice work @matinraayai !. Happy to merge this but then what's the plan for @matinraayai to continue to contribute @christophernhill ?. Also, who has access to an AMD GPU to test this code? Any plan for continuous integration testing?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112437720:202,continuous,continuous,202,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112437720,2,"['continuous', 'integrat']","['continuous', 'integration']"
Deployability,"Nice, let's merge ! Patch release or no? There will probably be a patch release before long anyways.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3273#issuecomment-1725922794:20,Patch,Patch,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3273#issuecomment-1725922794,4,"['Patch', 'patch', 'release']","['Patch', 'patch', 'release']"
Deployability,No need to bump release since we didn’t register v0.80.0 yet,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1469342633:16,release,release,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1469342633,1,['release'],['release']
Deployability,No need. Already patch release waa bumped up there!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3447#issuecomment-1912086118:17,patch,patch,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3447#issuecomment-1912086118,2,"['patch', 'release']","['patch', 'release']"
Deployability,"No problem, you have a line in the script that would not work with the current Oceananigans version: the keyword arguments of `LinearEquationOfState` (`α`, `β`) were renamed to `thermal_expansion` and `haline_contraction` in Oceananigans 0.71.5. To update Oceananigans, you can type; ```; import Pkg; Pkg.update(""Oceananigans""); ```; this should give you version 0.75.3; If you want to try with the latest version (0.77.5) you can do; ```; Pkg.add(Pkg.PackageSpec(name = ""Oceananigans"", version = ""0.77.5"")); ```; If you are using a GPU, I would remain on 0.75.3 at the moment because in 0.77.5 there are problems with `GradientBoundaryCondition`s on the GPU.; Probably it will not fix your issue, but a lot has changed internally so it is worth the try ; (remember to change those keyword arguments before running, otherwise you will get an error)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1266167924:249,update,update,249,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1266167924,2,['update'],['update']
Deployability,No worries! Probably you didn't get the latest version installed because of a compat requirement from another package you had installed in the same environment.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3551#issuecomment-2053562895:55,install,installed,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3551#issuecomment-2053562895,2,['install'],['installed']
Deployability,"None of the individual test runs took very long, but our CI pipeline is clogged up due to this hanging issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-818309942:60,pipeline,pipeline,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-818309942,1,['pipeline'],['pipeline']
Deployability,"Not sure if this is the best place to post this, but I was thinking it would be good if, every time there is a breaking release (or a release that's particularly significant even if it's non-breaking), there is a small text in the release indicating the important/breaking features. (Or maybe even something on slack?). This is something that has implicitly come up in a few conversations I've had with Oceananigans users that don't also do development (and thus don't keep track of PRs, etc.). The advantages that I can see are:. - Users can have an idea if their code will break with updating, which might prompt them to update more often; (I think in practice lots of users don't update their code regularly since there's a looming possibility of their code to stop running and them having to deal with errors.); - If their code will break, users will have an idea as to what they should change in order to fix it (as opposed to running it and fixing the code error-by-error). The downside is that it requires someone to manually write something in most releases. But I think this is easy enough that it shouldn't be a problem. PS: Btw I should say, I mentioned non-developer users above, but I very much include myself in the group that would benefit from this. There's often a lot going on in Oceananigans and it's easy to get overwhelmed with research and lose track of important PRs. For example v0.83.0 just dropped, implying a breaking change, and I cannot figure out which was the breaking change. Curious to hear everyone's thoughts.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3147:120,release,release,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3147,6,"['release', 'update']","['release', 'releases', 'update']"
Deployability,"Not sure of all the changes, but from the changelog a big change is a new type encoder: https://github.com/JuliaIO/JLD2.jl/releases/tag/v0.5.0. Old JLD2 files should still be readable though. And new files are incompatible with JLD2 versions <= v0.4.53. On that PR it seems like it resolves some JLD2.jl issues with saving functions to disk. Could this mean easy checkpointing of full simulations...? :open_mouth:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3769#issuecomment-2338963565:123,release,releases,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3769#issuecomment-2338963565,1,['release'],['releases']
Deployability,Note that this could be considered bad practice (ie we ran into similar issues with julia 1.7 + MPI on apple silicon). Really we should fix the jll's. I'm ok with it as a bandaid though. We will have to update the jll in the future.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3161#issuecomment-1622122607:203,update,update,203,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3161#issuecomment-1622122607,1,['update'],['update']
Deployability,Note that we have pinned CUDA at v3.3.6. Any time I tried to update beyond that version things seem to break. I'll press on with the efforts in #2005...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2202#issuecomment-1025021523:61,update,update,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2202#issuecomment-1025021523,1,['update'],['update']
Deployability,"Note the error comes from. ```julia; [13] fill_bottom_and_top_halo!(::NTuple{5, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3}}}, ::Tuple{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, ::Tuple{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, 20, typeof(Qᵘ), Nothing, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, 20, typeof(Qᵛ), Nothing, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, ::GPU, ::CUDAKernels.CudaEvent, ::ImmersedBoundaryGrid{Float64, Bounded, Bounded, Bounded, RectilinearGrid{Float64, Bounded, Bounded, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Fl...; @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/JIHfS/src/BoundaryConditions/fill_halo_regions.jl:153; ```. And I guess this has nothing to do with the immersed boundary grid explicitly. The fill halo region code recently got more complicated (from the compiler's point of view) in #2335:. https://github.com/CliMA/Oceananigans.jl/blob/2436895ee931c730c077031d955dd1780816b2ac/src/BoundaryConditions/fill_halo_regions.jl#L136-L145. My main guess ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1073132435:580,Continuous,ContinuousBoundaryFunction,580,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1073132435,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Note to self that we will need to update the docs (and also notation I think) for the Ri based diffusivity, since the ""diffusion parameter"" is actually a time-scale:. https://github.com/CliMA/Oceananigans.jl/blob/1143866d2d069075fe8fd5fa7d71b1ab18943f2d/src/TurbulenceClosures/turbulence_closure_implementations/ri_based_vertical_diffusivity.jl#L148-L149",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2786#issuecomment-1294926836:34,update,update,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2786#issuecomment-1294926836,1,['update'],['update']
Deployability,"Now that the spacing functions are in place, I'm going to start working on this. (I'll update the top post with the information below.). The goal here is to add grid metrics to NetCDF output. The are two main avenues to follow:. 1. We can follow Oceananigans nomenclature and conventions, which would make the output play more nicely with Oceananigans itself (and more generally in the Julia environment).; 2. We can follow standard community conventions, which would mean the output won't follow Oceananigans naming etc., but it would optimize its readability by other software. I think we should follow option 2, since if a user wants to work with the output in Oceananigans/Julia, then using JLD2 output is probably the right choice anyway. Given that most people in the community use Python, `xarray` and `xgcm` to analyze model output, I think we should optimize the output to work with that ecosystem out of the box. Based on the discussion in https://github.com/CliMA/Oceananigans.jl/issues/1334, it seems the preferred conventions to use are the [SGRID conventions](https://sgrid.github.io/sgrid/). For the more technical aspects, I'm planning on starting with `RectilinearGrids` and `LatLonGrids` in this PR since these are more straightforward. And then we can expand from there. I also think this should be presented to the user as an opt-in flag in `NetCDFWriter` constructor, as opposed to being included in every NetCDF output by default.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2652#issuecomment-1516604529:87,update,update,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2652#issuecomment-1516604529,1,['update'],['update']
Deployability,"OK so looks like this will have to be the JOSS release and include the JOSS paper in the repository (#564). I'd also like to include PRs #910 and #915 in this release. @glwagner Do you want to include any PRs in v0.36.0?. Release notes:. This release coincides with the publication of the Oceananigans.jl Journal of Open Source Software (JOSS) paper. Changelog:; * Simplified boundary condition interface, types, and constructors. (@glwagner do you want add to this, maybe include a list of breaking changes?); * Support for a `NonTraditionalBetaPlane` Coriolis force implementation.; * The `AnisotropicBiharmonicDiffusivity` closure now works properly in closed domains with zero `Flux` boundary conditions, as higher-order boundary conditions are enforced.; * Bug fix: Appending to NetCDF files with `NetCDFOutputWriter` works now.; * Bug fix: Computations of abstract operations compute the right end point of face-centered fields along bounded dimensions.; * Bug fix: Averages `with_halos=false` return results with the correct dimensions for face-centered results along bounded dimensions.; * Small bug fixes for `show` methods. Breaking changes:; * When constructing a `NetCDFOutputWriter`, use `mode=""c""` instead of `clobber=true` and `mode=""a""` instead of `clobber=false`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/916:47,release,release,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/916,4,"['Release', 'release']","['Release', 'release']"
Deployability,"OK, I approve (and can also formally approve) but we also need to update the CATKE default parameters, correct?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3484#issuecomment-1965936930:66,update,update,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3484#issuecomment-1965936930,1,['update'],['update']
Deployability,"OK, I'll try to resolve #2922 before we merge this. @glwagner bump patch release?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438703466:67,patch,patch,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438703466,2,"['patch', 'release']","['patch', 'release']"
Deployability,"OK, after https://github.com/Alexander-Barth/NCDatasets.jl/pull/193 we just have to wait for NCDatatsets v0.12.10 to be released and then we can merge this. And we'll be then free from conditional `using NCDatasets`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2847#issuecomment-1344652277:120,release,released,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2847#issuecomment-1344652277,1,['release'],['released']
Deployability,"OK, let me put my 2 cents. If we have the validations in the docs just because of the animations then we should just put the animations on YouTube or somewhere and point people there. Having the non-working versions of, e.g., `lid_cavity.jl` script in the repo and in the docs has lead many new users in the rabbit hole of figure it out. Then users feel that scripts are not working, sometimes they post an issue or ask in Slack. But who know how many other users are simply discouraged. Personally, if I download a code that includes non-working pieces of code I am very discouraged. Thus, bottom-line: I see @glwagner's point that the functionality or pipeline for maintaining healthy validations scripts (even a subset of them) then *only those* should be included in the Docs. `Sandbox`: I'm so against a `sandbox` directory! It's like keeping your trash bin in your house for ever in case there is something useful there. I used to to it all the time: I'd keep commented out code in my scripts... But I think it's a bad practice. We need to let go. The repository and the tagged versions should not include half-bake scripts and what not. I'm happy with a sandbox repository `Oceananigans.jl-sandbox` where we keep things. Or a `sandbox` branch even. Regarding this PR and what's should be kept in the Docs: I vote we keep the convergence tests in the docs and nuke the validations. I agree with the git history size issue and probably the method of including the `.png` files that @ali-ramadhan suggests would work -- I've never done it though. (btw, @ali-ramadhan, I've noticed an increase in the repo's size recently... :()",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872556231:654,pipeline,pipeline,654,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872556231,2,['pipeline'],['pipeline']
Deployability,"OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. Usually systems with imposed mean flow _do not_ have an energy integral. This is a side-effect of the system not being energetically closed since something is continuously putting energy in to keep that mean flow fixed. E.g., Phillips 2-layer baroclinic instability where an imposed mean flow is kept fixed then kinetic energy grows... I'm not sure if this imposed mean buoyancy does this in this example, but here's an example in which the imposed mean flow does not guarantee that kinetic energy will decay:. Take periodic boundary conditions in x and y and 2D flow $\boldsymbol{u}(\boldsymbol{x}, t) = (u(x, y, t), v(x, y, t))$. Then,. $$; \begin{gather}; \partial_t u + u\partial_x u + v\partial_y u = ν \nabla^2 u \\; \partial_t v + u\partial_x v + v\partial_y v = ν \nabla^2 v\\; \partial_x u + \partial_y v = 0; \end{gather}; $$. implies that . $$; \begin{align}; \frac{\mathrm{d}}{\mathrm{d}t} \int \frac1{2} (u^2+v^2) \mathrm{d}^2\boldsymbol{x} &= \int (u \partial_t u + v \partial_t v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int (u^2 \partial_x u + u v \partial_y u + u v \partial_x v + v^2 \partial_y v) \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int [u \partial_x ( u^2+v^2)/2 + v \partial_y ( u^2+v^2)/2 ] \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \underbrace{\int \boldsymbol{\nabla \cdot} \left[ \boldsymbol{u} \ \frac1{2}( u^2+v^2) \right] \mathrm{d}^2\boldsymbol{x}}_{=0 \text{ from boundary conditions}} - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \\; &= - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \mathrm{d}^2\b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708:249,continuous,continuous,249,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708,2,['continuous'],"['continuous', 'continuously']"
Deployability,"OK, this is now ready to review. I have hardcoded the boundary condition parameters! Any attempt to include them via parameters failed. Please help by showing me how (try building the docs though first before you claim success :) --- I tried a million times!). Also, I get a lot of these warnings:; ```; ┌ Warning: type FieldBoundaryConditions{BoundaryCondition{Flux, Nothing},BoundaryCondition{Flux, Nothing},Nothing,Nothing,BoundaryCondition{Flux, Nothing},BoundaryCondition{Value,Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center,Center,Nothing,64,Main.__atexample__named__horizontal_convection.#bˢ,Nothing,Tuple{},Tuple{},Tuple{}}},BoundaryCondition{Flux, Nothing}} does not exist in workspace; reconstructing; └ @ JLD2 ~/.julia/packages/JLD2/sFiXk/src/data/reconstructing_datatypes.jl:358; ```. Any idea why? My instinct says that these issues are intertwined but I can't figure out why...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-881780508:515,Continuous,ContinuousBoundaryFunction,515,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-881780508,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Oceananigans.Fields.ZeroField}},NamedTuple{(:T, :S),Tuple{Oceananigans.Fields.ZeroField,Oceananigans.Fields.ZeroField}}}}, NamedTuple{(:u, :v, :w),Tuple{OffsetArray{Float64,3,CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArray{Float64,3,CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArray{Float64,3,CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, NamedTuple{(:T, :S),Tuple{OffsetArray{Float64,3,CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArray{Float64,3,CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, NamedTuple{(:νₑ, :κₑ),Tuple{OffsetArray{Float64,3,CuDeviceArray{Float64,3,CUDA.AS.Global}},NamedTuple{(:T, :S),Tuple{OffsetArray{Float64,3,CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArray{Float64,3,CuDeviceArray{Float64,3,CUDA.AS.Global}}}}}}, NamedTuple{(:u, :v, :w, :T, :S),Tuple{ContinuousForcing{Face,Cell,Cell,Nothing,Relaxation{Float64,GaussianMask{:x,Float64},LinearTarget{:x,Float64}},Nothing,Tuple{Int64},Tuple{typeof(identity)}},ContinuousForcing{Cell,Face,Cell,Nothing,Relaxation{Float64,GaussianMask{:y,Float64},LinearTarget{:y,Float64}},Nothing,Tuple{Int64},Tuple{typeof(identity)}},ContinuousForcing{Cell,Cell,Face,Nothing,Relaxation{Float64,GaussianMask{:z,Float64},Irrational{:π}},Nothing,Tuple{Int64},Tuple{typeof(identity)}},typeof(Oceananigans.Forcings.zeroforcing),typeof(Oceananigans.Forcings.zeroforcing)}}, OffsetArray{Float64,3,CuDeviceArray{Float64,3,CUDA.AS.Global}}, NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}) resulted in invalid LLVM IR; Reason: unsupported call to the Julia runtime (call to jl_f_getfield); Stacktrace:; [1] getindex at namedtuple.jl:94; [2] field_arguments at /archive1/glwagner/Projects/Oceananigans.jl/src/Forcings/continuous_forcing.jl:118; [3] forcing_func_arguments at /archive1/glwagner/Projects/Oceananigans.jl/src/Forcings/continuous_forcing.jl:139; [4] ContinuousForcing at /archive1/glwagner/Projects/Oceananigans.jl/src/Forcings/continuous_forcing.jl:156; [5] u_velocity_tendency at /archive1/glwagner/Projects/Oce",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1059:3100,Continuous,ContinuousForcing,3100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1059,3,['Continuous'],['ContinuousForcing']
Deployability,"Oceananigans.jl supplies an interface for inserting user-defined functions into a model via `ContinuousForcing`, `DiscreteForcing`, `ContinuousBoundaryFunction` and `DiscreteBoundaryFunction`. User functions are also permitted as input to some model terms: turbulence closures, Stokes drift, etc, and can be used in diagnostics and AbstractOperations. It's often necessary or convenient to formulate user functions in terms of global variables. For, example, a Gaussian surface cooling might be written as. ```julia; patch_width = 200meters; patch_amplitude = 1e-8 # m^3 s^-2; cooling_patch(x, y, t) = patch_amplitude * exp(-(x^2 + y^2) / 2patch_width^2). cooling_bc = FluxBoundaryCondition(cooling_patch); ```. Alas, this simple function will not compile on the GPU and is too slow on the CPU. To fix this, users need to declare `patch_width` and `patch_amplitude` as `const`:. ```julia; const patch_width = 200meters; const patch_amplitude = 1e-8 # m^3 s^-2; ```. For this problem, GPU scenario is a relatively happy one: `cooling_patch` will throw an error --- the ever-mysterious ""dynamic function invocation"" error --- but at least it will not run. On the CPU the situation is more insidious: the code will run, but slowly, leading to all sorts of issues: lost sleep, missed deadlines, wasted cluster credits, or abandonment of the Julia programming language. It'd be nice to recover the GPU situation on the CPU and throw an error (perhaps with the ability to opt-out) in this case --- or something. Here's a few possibilities (thanks @vchuravy!):. 1. Some utility in [JET.jl](https://github.com/aviatesk/JET.jl), [JETTest.jl](https://github.com/aviatesk/JETTest.jl), or perhaps [GPUCompiler.jl](https://github.com/JuliaGPU/GPUCompiler.jl) (?!). 2. `Test.@inferred`:. ```julia; julia> using Test: @inferred. julia> a = 2; f(x) = a * x # non-const'd global --- bad!; f (generic function with 1 method). julia> const b = 2; g(x) = b * x # oh good, there's const; g (generic function with 1 method)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1885:93,Continuous,ContinuousForcing,93,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1885,2,['Continuous'],"['ContinuousBoundaryFunction', 'ContinuousForcing']"
Deployability,"Oceananigans.jl/pull/336?src=pr&el=h1) Report; > Merging [#336](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/a26da9c932f562241fd96d97bfcc16f3c033e72a?src=pr&el=desc) will **increase** coverage by `0.51%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #336 +/- ##; ==========================================; + Coverage 61.06% 61.57% +0.51% ; ==========================================; Files 22 22 ; Lines 1243 1231 -12 ; ==========================================; - Hits 759 758 -1 ; + Misses 484 473 -11; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `9.67% <0%> (-3.23%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `76.41% <0%> (+4.42%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336?src=pr&el=footer). Last update [a26da9c...a2cabed](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/336?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-518876039:1860,update,update,1860,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-518876039,1,['update'],['update']
Deployability,"Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.68% <100%> (ø)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `40% <0%> (-57.62%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `39.34% <0%> (-19.56%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `46.83% <0%> (-15.19%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `74.19% <0%> (-1.94%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `62.5% <0%> (-1.79%)` | :arrow_down: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `76.06% <0%> (-0.54%)` | :arrow_down: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `86% <0%> (-0.28%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388?src=pr&el=footer). Last update [af5d513...e113346](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/388?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/388#issuecomment-526922577:3119,update,update,3119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/388#issuecomment-526922577,1,['update'],['update']
Deployability,"Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `91.80% <100.00%> (+2.91%)` | :arrow_up: |; | [src/TurbulenceClosures/diffusion\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9kaWZmdXNpb25fb3BlcmF0b3JzLmps) | `100.00% <100.00%> (ø)` | |; | [...e\_closure\_implementations/isotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2lzb3Ryb3BpY19kaWZmdXNpdml0eS5qbA==) | `100.00% <100.00%> (ø)` | |; | [src/TurbulenceClosures/turbulence\_closure\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfdXRpbHMuamw=) | `75.00% <100.00%> (ø)` | |; | [...urbulenceClosures/viscous\_dissipation\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy92aXNjb3VzX2Rpc3NpcGF0aW9uX29wZXJhdG9ycy5qbA==) | `100.00% <100.00%> (ø)` | |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `100.00% <100.00%> (ø)` | |; | ... and [39 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999?src=pr&el=footer). Last update [e808a82...b56c813](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/999?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/999#issuecomment-700403403:3699,update,update,3699,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/999#issuecomment-700403403,1,['update'],['update']
Deployability,Oceananigans.jl/src/Models/LagrangianParticleTracking/lagrangian_particle_advection.jl:177 [inlined]; cpu__advect_particles! at /home/alir/.julia/packages/KernelAbstractions/491pi/src/macros.jl:291 [inlined]; cpu__advect_particles! at ./none:0; __thread_run at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:144; unknown function (ip: 0x7c0090512182); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; __run at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:111; unknown function (ip: 0x7c009050feb3); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #_#16 at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:46; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/builtins.c:768; Kernel at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:39; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; advect_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Models/LagrangianParticleTracking/lagrangian_particle_advection.jl:193; step_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Models/LagrangianParticleTracking/LagrangianParticleTracking.jl:143 [inlined]; step_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Mo,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:2714,release,release-,2714,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,Oh are we doing the `(0.84.1) PR Name` also for patch releases? Nice!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3174#issuecomment-1624211353:48,patch,patch,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3174#issuecomment-1624211353,2,"['patch', 'release']","['patch', 'releases']"
Deployability,Oh sorry I thought you meant patch version bump. I ll rectify that,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2214#issuecomment-1030171530:29,patch,patch,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2214#issuecomment-1030171530,1,['patch'],['patch']
Deployability,"Ok @navidcy I've updated the parameters. For the sake of documentation: these parameters were obtained by calibrating CATKE against 5 LES from LESbrary's ""4 day suite"" at 8m resolution. The defaults are now the ""best"" parameters at the end of that calibration. The last iteration of the calibration produced these plots:. <img width=""687"" alt=""image"" src=""https://user-images.githubusercontent.com/15271942/155354710-33778efc-b52a-4fdb-a54d-e9ba97c4bda1.png"">. The blue line is the forward solution produced by a column model with CATKE using the best parameters. The TKE is a bit off, and the velocity profiles aren't ""perfect"" (still very good); but the buoyancy profiles are near perfect. I have some ideas for improving CATKE further, but it's going to take a bit of time. I think moving forward the right approach is to always use CATKE's default configuration for experiments. Then, whenever we update CATKE we'll take a new version. That way we can figure out what CATKE flavor we used by referencing the Oceananigans version. Also for documentation, here's a screenshot of the parameter values from the end of the calibration:. <img width=""1549"" alt=""image"" src=""https://user-images.githubusercontent.com/15271942/155355188-089d306f-32ae-46ed-a5e1-f70d3b16f4df.png"">. The defaults were copied from that screenshot. @navidcy I think @rafferrari is referring to any time-step constraints that CATKE might impose. You should be prepared to take short time-steps between 10s and 1 minute during the initial stages of the simulation (while the TKE profile is rapidly adjusting to the initial condition + forcing). Hopefully we can take longer time-steps later on.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2273#issuecomment-1048925824:17,update,updated,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2273#issuecomment-1048925824,3,"['configurat', 'update']","['configuration', 'update', 'updated']"
Deployability,"Ok, I sent an update that I hope improves the language a bit. Merge when you're happy.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2789#issuecomment-1295936187:14,update,update,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2789#issuecomment-1295936187,1,['update'],['update']
Deployability,"Ok, fixed an issue dispatching on a grid with partial cells in the hydrostatic pressure integral (turns out things go very wrong if we naively integrate to find hydrostatic pressure with partial cells!) here: https://github.com/CliMA/Oceananigans.jl/pull/2306/commits/9cc91dafe140ce4d5124a4d80e8a35496e45ad7e. Things look ok now, and a resting ocean remains at rest:. <img width=""598"" alt=""image"" src=""https://user-images.githubusercontent.com/15271942/166724316-df8cd89e-aed3-4027-b0fa-60cec7ad44ac.png"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1117542307:143,integrat,integrate,143,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1117542307,1,['integrat'],['integrate']
Deployability,"Ok, looking at the code more I see we don't need to update `inactive_node` or peripheral_node for `Flat`. The reason is they don't do any array access on their own (except potentially through `immersed_cell`). So the right fix here is to modify `immersed_cell`. I took the liberties to scope creep and also added unrelated comments and did some clean up in `inactive_node`...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2532#issuecomment-1120109027:52,update,update,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2532#issuecomment-1120109027,1,['update'],['update']
Deployability,"Ok, this definitely needs bumping up a minor release",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1843#issuecomment-877440328:45,release,release,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1843#issuecomment-877440328,1,['release'],['release']
Deployability,"Ok, updated MWE:. ```julia; using Oceananigans. FT = Float64; Ns = 200 # number of time saves; T = 8e5*π/7 # simulation stop time (s); Δt = 16/15 # timestep (s). grid = RectilinearGrid(FT, size = (), topology=(Flat, Flat, Flat)); model = NonhydrostaticModel(; grid, timestepper=:RungeKutta3); simulation = Simulation(model; Δt, stop_time=T). captured_times = []; capture_time(sim) = push!(captured_times, time(sim)); callback = Callback(capture_time, TimeInterval(T/Ns)); add_callback!(simulation, callback). run!(simulation). @show time(simulation) iteration(simulation); @show length(captured_times); @show time(simulation) == T; ```. I added an `FT` parameter since @tomchor remarked that this issue happens more often with `Float32` (which makes sense if we attribute this to roudn off error)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152648999:4,update,updated,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152648999,1,['update'],['updated']
Deployability,"Okay interesting!. I'm not sure why you would need `gcc`. Have you tried omitting that?. Also, did you try installing julia yourself? There could be some benefit in using the system Julia via `module load julia/1.9.2`, but this would mostly have to do with compilation speed (not execution speed) I think. If you have found discrepancy between the system Julia vs your own Julia install that'd be interesting to hear about... You could also let julia handle netcdf --- again, I'm not sure if this would have performance implications or not, but it might provide faster way to get up and running if you are simply trying to run scripts. Julia's package manager should be able to automatically detect and install netcdf appropriate for the system, I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2258884823:107,install,installing,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2258884823,6,['install'],"['install', 'installing']"
Deployability,"Okay, thank you very much for the clarification about hydrostatic vs. nonhydrostatic pressure! The hydrostatic pressure integral:. https://github.com/CliMA/Oceananigans.jl/blob/e76deefc1fdf115e05856a18977c593d0b5d3b0d/src/Models/NonhydrostaticModels/update_hydrostatic_pressure.jl#L15. does indeed use tracers; in addition it involves a reconstruction / interpolation that _might_ be affecting results here. Bug perhaps? I say ""might"" and ""perhaps"" because the precise mechanism isn't clear to me. Since we integrate downwards, there's only an error in the hydrostatic pressure _below_ the immersed boundary. Hmm... Note, this particular issue is not fixed by ""unmasking"" tracers (it's just that the bug / error is different, and perhaps less innocuous). This bug is also not fixed by #2603.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1165800793:507,integrat,integrate,507,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1165800793,2,['integrat'],['integrate']
Deployability,Once we decide on a final draft on Google Docs I'll update `paper.md`. JOSS requires a Markdown paper to be available in the repository. X-Ref: https://github.com/openjournals/joss-reviews/issues/1965; X-Ref: https://github.com/openjournals/joss-reviews/issues/2018,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/564:52,update,update,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/564,1,['update'],['update']
Deployability,"One can use your quick patch to see if it fixes the implicit solve, no problem. The bulk of the work needed to solve this issue is independent of immersed boundaries (eliminating usage of dz^aac etc in favor of new metrics everywhere in the code). This requires widespread changes.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2055#issuecomment-966743889:23,patch,patch,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2055#issuecomment-966743889,1,['patch'],['patch']
Deployability,"One idea to avoid a huge amount of refactoring could be to define something like. ```julia; default_float_type = Ref(Float64); ```. Then to change to float32 we'd write. ```julia; Oceananigans.default_float_type[] = Float32; ```. Next, everywhere we've written `FT=Float64` we change to `FT=default_float_type[]`. Basically that adds a global variable that users can modulate at the top of a script. We'd also have to introduce type parameters here and there wherever `Float64` was hardcoded (eg `TimeInterval`). Note this is also a reason not to do clock updates with some kind of higher precision it would seem (which we have discussed a bit to solve some rounding errors)...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2618#issuecomment-1732204898:556,update,updates,556,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2618#issuecomment-1732204898,1,['update'],['updates']
Deployability,"Our suite of examples is fairly expensive; in recent runs the documentation build exceeds 90 minutes. If we're able to ""build"" the examples _first_, before calling `makedocs`:. https://github.com/CliMA/Oceananigans.jl/blob/8da72d122f887c1584d8c6f0bb5d4eea27e003d3/docs/make.jl#L155-L165. we can probably speed up the build. This is crucial now because we need to add new examples both for `HydrostaticFreeSurfaceModel` and for simulations in complex domains via `ImmersedBoundaryGrid`. We can also move some examples to the GPU and either speed them up, run them at higher resolution, or both. What I know now: we provide `.md` files to `makedocs`, which then expands code blocks and generates `.html`:. https://github.com/CliMA/Oceananigans.jl/blob/8da72d122f887c1584d8c6f0bb5d4eea27e003d3/docs/make.jl#L66. https://github.com/CliMA/Oceananigans.jl/blob/8da72d122f887c1584d8c6f0bb5d4eea27e003d3/docs/make.jl#L133. https://github.com/CliMA/Oceananigans.jl/blob/8da72d122f887c1584d8c6f0bb5d4eea27e003d3/docs/make.jl#L159. I think one solution is to generate the `.html` (by running code, which generates images and animations + links in the `html`) in separate buildkite jobs, and then somehow generate links to the pre-built `.html` in the ""primary"" `make.jl`call to `makedocs` before `deploydocs`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2309:1286,deploy,deploydocs,1286,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2309,1,['deploy'],['deploydocs']
Deployability,"Our user interface makes extensive use of ""continuous"" function of `x, y, z, t`. Throughout our code, we evaluate these functions in control volumes using a first-order accurate method. In other words, the volume-average of a function is approximated by its value at the barycenter of a cell, as in `FunctionField`:. https://github.com/CliMA/Oceananigans.jl/blob/068a7ae7bbae244fc80c907d53cb0938adb9b5d0/src/Fields/function_field.jl#L45-L46. In the above code, `getindex` is (implicitly) assumed to return the volume average of the function `f` in the control volume labeled `i, j, k`. This volume average is approximated by simply evaluating the function `x, y, z, t` at the barycenter of the control volume in question. This is a valid, but only first-order approximation. The pitfall of this method is that its accuracy degrades significantly when `f` varies on a scale comparable to the grid scale. Another issue is that significant differences can arise between an analytically prescribed domain-integrated tracer, for example, and the discrete domain-integrated tracer after using `set!`. To fix such problems, higher-order approximation methods for volume averages of functions may be helpful. When using a higher-order approximation method, a function of `x, y, z, t` would be evaluated multiple times per grid point. This would have an immediate obvious use in `set!(field, func::Function)`. Such a method may also be useful for forcing functions, boundary conditions, and prescribed background fields (once #960 is resolved). While evaluating a function multiple times per grid point would make a simulation more computationally expensive, the extra cost may be negligible in simulations that are dominated by the cost of memory accesses. A high-order method we might consider is multi-dimemsional Gaussian quadrature. We could add the necessary quadrature data to `FunctionField`, and expand the importance of `FunctionField` by using it within `ContinuousForcing`, `BoundaryFunction`, and ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1011:43,continuous,continuous,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1011,3,"['continuous', 'integrat']","['continuous', 'integrated']"
Deployability,"Output of the `benchmark_advection_schemes.jl` script ran on Tartarus with the following specs:; ```julia; Julia Version 1.10.4; Commit 48d4fd48430 (2024-06-04 10:41 UTC); Build Info:; Official https://julialang.org/ release; Platform Info:; OS: Linux (x86_64-linux-gnu); CPU: 48 × Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-15.0.7 (ORCJIT, cascadelake); Threads: 1 default, 0 interactive, 1 GC (on 48 virtual cores); Environment:; JULIA_CUDA_MEMORY_POOL = none; LD_LIBRARY_PATH = /storage4/simone/lib:; GPU: NVIDIA TITAN V; ```; Note that ; - the `Centered` scheme is unaffected by this PR ; - `UpwindBiased` should have a similar execution time between this branch and main given that the operations are the same but they just happen at different levels; - `WENO(; order = 1)` defaults to `UpwindBiased(; order = 1)`. # On Main; <img width=""1160"" alt=""Screenshot 2024-07-24 at 11 37 44 AM"" src=""https://github.com/user-attachments/assets/1530b2b6-7c79-4d77-b379-854c65bfa940"">. # On this PR; <img width=""1192"" alt=""Screenshot 2024-07-24 at 11 02 35 AM"" src=""https://github.com/user-attachments/assets/d776af2b-3c6a-4997-a7ae-2763ed49bc6c"">. There are a couple of things to note here when it comes to the WENO scheme:; - on CPU we gain roughly a factor of 1.8 given that computations have been reduced by 2X; - on the GPU the gain is less, because, in this case, the uncoalesced memory access (which has to happen for both the branches) costs much more than on the CPU; - (I suspect that) if using WENO only for horizontal reconstructions (like in the global ocean shown above) the penalty of uncoalesced memory access is reduced significantly and the kernel speeds up by a factor of 2 also on the GPU by virtue of the lower (2X) arithmetic intensity of the kernel",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2248327750:217,release,release,217,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2248327750,1,['release'],['release']
Deployability,"Over at [JULES.jl](https://github.com/thabbott/JULES.jl) @thabbott, @RaphaelRR, and I have been building a compressible non-hydrostatic model on top of Oceananigans.jl for atmospheric simulations. It follows the numerics of the Advanced Research WRF Model as described in Klemp et al. (2007) and Skamarock et al. (2019). With three qualitative verification experiments I think it's ready to be tagged as v0.1. I'm opening this issue to discuss the possibility of merging JULES.jl into Oceananigans.jl which would add a `CompressibleModel` type (discussed a bit in #566). The two models share a lot of the infrastructure we've already built for Oceananigans, and in integrating the two we will readily get a GPU-ready research-grade compressible atmosphere model. Verification experiments:; 1. Hydrostatic adjustment in an isothermal atmosphere [very qualitative, see Bannon (1995)]; 2. Dry rising thermal bubble: https://github.com/thabbott/JULES.jl/pull/31; 3. Nonlinear density current: https://github.com/thabbott/JULES.jl/pull/32. Dry rising thermal bubble can be compared with figure 5 of Wicker and Skamarock (1998), figure 7 of Jahn et al. (2015), and https://faculty.nps.edu/fxgirald/projects/mesoscale/rtb_movie.html. Nonlinear density current can be compared with figure 1 of Straka et al. (1993) and https://faculty.nps.edu/fxgirald/projects/mesoscale/dc_movie.html. Things we can hopefully share between `IncompressibleModel` and `CompressibleModel:; 1. Operators; 2. Grids; 3. Coriolis; 4. Forcing functions; 5. Boundary conditions; 6. Turbulence closures; 7. Diagnostics; 8. Output writers; 9. Advection schemes; 10. User interface (setting initial conditions, boundary conditions, time stepping, etc.). Atmosphere-specific abstractions that would differentiate compressible from incompressible models:; 1. Prognostic temperature (potential temperature, entropy, enthalpy, etc.); 2. Base state (dry adiabatic, isothermal, analytic sounding, form from initial conditions, etc.); 3. Acoust",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/605:665,integrat,integrating,665,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/605,1,['integrat'],['integrating']
Deployability,"PR for discussion of changes to main. There are some things that can go in soon, others may require more work. . Note . - Julia AMD GPU stack (AMDGPU.jl, KernelAbstractions.jl) needs 1.7 Julia at least.; - Currently AMDGPU.jl works against ROCM 4.2. More recent ROCM 5 has LLVM that is ahead of Julia 1.7, so that breaks things! ; - people who are working on relevant Julia support include @jpsamaroo @vchuravy @luraess and @matinraayai .... What fun! . A buildkite test is here ( https://github.com/CliMA/Oceananigans.jl/blob/e4340a7f2ef10391b46e4b71bf3f74ffbd4bd945/.buildkite/pipeline.yml#L496 ) which gives some clues on what is needed to run something on MI50.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2540:579,pipeline,pipeline,579,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2540,1,['pipeline'],['pipeline']
Deployability,"Patch release including bug fix for biogeochemistry fallbacks (#3685), `mask_immersed_field!` method for `BinaryOperations` (#3683), restricting lat/lon grid topologies (#3694), and more Makie recipe components (#3715).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3722:0,Patch,Patch,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3722,2,"['Patch', 'release']","['Patch', 'release']"
Deployability,Patch security loophole,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1225:0,Patch,Patch,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1225,1,['Patch'],['Patch']
Deployability,Patch/minor release?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1983#issuecomment-918420217:0,Patch,Patch,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1983#issuecomment-918420217,2,"['Patch', 'release']","['Patch', 'release']"
Deployability,"Perhaps I can chime in here to give some context. Something in the Oceananigans/KA/Enzyme/etc setup was breaking our integration test of the advection-diffusion (https://github.com/CliMA/Oceananigans.jl/pull/3480) which was blocking us for making progress for some time. Eventually Joe successfully minimized it down to this point as a minimal error (effectively just testing successful AD of Oceanigans.Utils.launch!, which was failing). We later determined the root cause of the issue to be a problem in KA (https://github.com/JuliaGPU/KernelAbstractions.jl/pull/476). The purpose of this is not to specifically act as a unit test for the individual KA issue, but to be a small unit test for Oceananigans modified launching infrastructure. That way if something else comes up as a bug in a future integration test, we can quickly find the root cause without weeks of debugging from the whole integration test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2106054020:117,integrat,integration,117,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2106054020,3,['integrat'],['integration']
Deployability,Perhaps split out a PR with just CATKE update + a validation script that runs in 3D? Might make things quicker?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1378195828:39,update,update,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1378195828,1,['update'],['update']
Deployability,Perhaps we should also update this docstring in this PR? . https://github.com/CliMA/Oceananigans.jl/blob/075d42cf3487532c14b9cca7356d5de11061e5eb/src/DistributedComputations/distributed_architectures.jl#L174-L209. The docstring function signature does not mirror the actual signature + some explanation on `partition` could be handy. (#3448 made an attempt to update this docstring.),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1914235245:23,update,update,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1914235245,2,['update'],['update']
Deployability,Perhaps we should update https://github.com/CliMA/Oceananigans.jl/blob/ss-fjp/non-conservative-shallow-water/docs/src/physics/shallow_water_model.md ?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1140401885:18,update,update,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1140401885,1,['update'],['update']
Deployability,Perhaps we wait for https://github.com/JuliaGPU/KernelAbstractions.jl/pull/399 to be merged and tag a patch release for KA before we merge this? @vchuravy?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1588131333:102,patch,patch,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1588131333,2,"['patch', 'release']","['patch', 'release']"
Deployability,"Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity1), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:17066,Continuous,ContinuousBoundaryFunction,17066,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Plots were added for the following benchmarking scripts, so as to present the most important data found in the original output tables in a visual format that is easier to analyze:; ```; benchmark_shallow_water_model.jl; benchmark_incompressible_model.jl; strong_scaling_shallow_water_model.jl; weak_scaling_shallow_water_model.jl; strong_scaling_incompressible_model.jl; ```; The plotting requires the Plots and PyPlot packages. Additional fixes were also made. Three manual calls to the garbage collection function, `GC()` was added in `src/Benchmarks.jl` which enabled `benchmark_shallow_water_model.jl` and `benchmark_incompressible_model.jl` to run multiple benchmarking cases with large grids without running out of memory. One such call is `GC( true)` which triggers a ""full"" garbage collection that is able to remove younger unreferenced objects. For the _single files of the scaling benchmarking scripts, the `@benchmark` portion was adjusted to have `evals=1` on top of the original configuration of `samples=10`. This allowed larger ranks of CPUs to be benchmarked. Originally, without the configuration limiting evaluations to 1, as the number of CPUs increased and the time per evaluation decreased, the number of times the benchmarked bit of code was run became too great and caused deadlocks between the MPI processes.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746:992,configurat,configuration,992,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746,2,['configurat'],['configuration']
Deployability,"Precision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, 18, typeof(wind_stress), Nothing, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing}, Field{Center, Face, Center, Nothing, ImmersedBoundaryGrid{Float64, Bounded, Bounded, Bounded, RectilinearGrid{Float64, Bounded, Bounded, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2430#issuecomment-1095685195:7583,Continuous,ContinuousBoundaryFunction,7583,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2430#issuecomment-1095685195,10,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Preferences are loaded by the `climacommon` module, which has seen a new release over the past few months. This release was to move to Julia 1.11 and there was no change with respect to the preferences. . In general, you shouldn't set any preference when running on the Caltech clusters because everything is set for you by the module system.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2455064613:73,release,release,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2455064613,2,['release'],['release']
Deployability,"Presently, applying differential operators to fields offline (as opposed to using diagnosing them online using using an `OutputWriter`) yields erroneous results because derivatives seem to be naively using output halo region values (which seem to be filled with zeroes by default) and not overwriting them to satisfy boundary conditions. One example impact of this is that the [Nusselt number calculation in the `horizontal_convection.jl` example script](https://clima.github.io/OceananigansDocumentation/stable/generated/horizontal_convection/#The-Nusselt-number) is totally meaningless because it is dominated by spuriously large buoyancy gradients in the boundary-adjacent cells. @ikeshwani and I demonstrate this bug in [this `horizontal_diffusion.jl` script](https://github.com/hdrake/HorizontalConvection/blob/bf2c917e43a6198a55061a46b2097b6b4a9dda3b/horizontal_diffusion.jl), in which we turn off advection in the `horizontal_convection.jl` example and numerically integrate the solution to equilibrium. We compare timeseries of the volume-integrated buoyancy dissipation rates calculated online versus those calculated offline (as in the `horizontal_convection.jl` example). The results show that the online calculation correctly asymptotes to the numerical solution of the equilibrium boundary value problem while the offline calculation is erroneous and effectively yields a Nusselt number that is more than 6 times too high. ![equilibration_ratio](https://github.com/CliMA/Oceananigans.jl/assets/12971166/1f79e7eb-b361-4ea0-aa76-a81d6049c25a). The bug is also evident by comparing snapshots of the two buoyancy dissipation rate fields. The dissipation rates computed offline clearly do not satisfy the no-flux boundary conditions on the boundaries. <img width=""587"" alt=""Screenshot 2023-08-22 at 12 38 27 PM"" src=""https://github.com/CliMA/Oceananigans.jl/assets/12971166/eee4e10c-432b-413c-8670-aaf47c8b0d0a"">. This bug is present in the live `main` Oceananigans.jl branch (circa `v0.86.0`)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3224:972,integrat,integrate,972,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3224,1,['integrat'],['integrate']
Deployability,Prevents race condition from multiple builds attempting to use/delete the same julia install,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3662:85,install,install,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3662,1,['install'],['install']
Deployability,Probably best if we can access this release through the registry right? Why wait?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-887904401:36,release,release,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-887904401,1,['release'],['release']
Deployability,"Probably good to bump version and tag a patch release with this, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-924098157:40,patch,patch,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-924098157,2,"['patch', 'release']","['patch', 'release']"
Deployability,Probably important to tag and release a new version following #1228.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1231:30,release,release,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1231,1,['release'],['release']
Deployability,"Probably related:. I saw the new `Simulation` API and the new `Callback` idea. This brought a change: the old way of building a Simulation included a `parameters` arguments. This `parameters` was accesible from the `progress` function. With the new way, we build callbacks and then register them, but there is no way to pass additional parameters to it. . In one of my usages I was hacking a progress function https://github.com/aramirezreyes/RamirezReyes_ShallowWaterInFPlane/blob/c1971c0cb3fc99fbb2dbf3303a8fd60b17a59d5a/scripts/run_oceananigans_example_cpu.jl#L101 to update some arrays on a parameterization. Unfortunately, this depended on the `parameters` argument. The more generalized idea of the `callbacks` is very elegant and works nice, but it loses some power from the lack of ability to add additional parameters to the callback function. Is there a way to recover this ability? (there are other ways of getting it to work but having it in the design would be nice).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1895#issuecomment-1001102006:571,update,update,571,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1895#issuecomment-1001102006,1,['update'],['update']
Deployability,"Probably related:. I saw the new `Simulation` API and the new `Callback` idea. This brought a change: the old way of building a Simulation included a `parameters` arguments. This `parameters` was accesible from the `progress` function. With the new way, we build callbacks and then register them, but there is no way to pass additional parameters to it. . In one of my usages I was hacking a progress function https://github.com/aramirezreyes/RamirezReyes_ShallowWaterInFPlane/blob/c1971c0cb3fc99fbb2dbf3303a8fd60b17a59d5a/scripts/run_oceananigans_example_cpu.jl#L101 to update some arrays on a parameterization. Unfortunately, this depended on the `parameters` argument. The more generalized idea of the `callbacks` is very elegant and works nice, but it loses some power from the lack of ability to add additional parameters to the callback function. Is there a way to recover this ability? (there are other ways of getting it to work but having it in the design would be nice). _Originally posted by @aramirezreyes in https://github.com/CliMA/Oceananigans.jl/issues/1895#issuecomment-1001102006_",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2127:571,update,update,571,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2127,1,['update'],['update']
Deployability,Problem installing and using Oceananigans,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2480:8,install,installing,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2480,1,['install'],['installing']
Deployability,"Profiling is a very good idea. It probably makes sense to use an integrated / application profiler (rather than simply timing functions), because WENO5 is itself composed of many small functions and we don't know which one is the bottleneck. I have never tried profiling on the GPU, but there's some info here: https://juliagpu.gitlab.io/CUDA.jl/development/profiling/. Specifically I think we need to install NSight: https://juliagpu.gitlab.io/CUDA.jl/development/profiling/#NVIDIA-Nsight-Systems",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868829956:65,integrat,integrated,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868829956,4,"['install', 'integrat']","['install', 'integrated']"
Deployability,"Profiling results for the nonhydrostatic model on GPU with the script found in #1914.; This was done on Satori, and with the WENO5 advection scheme and AB2 timestepper with the grid size being 128^3. Now it seems that timestepping takes less than 5% of the time and what should be taking up the largest chunks of time are doing so.; ```; Oceananigans v0.60.0; Julia Version 1.6.2; Commit 1b93d53fc4 (2021-07-14 15:36 UTC); Platform Info:; OS: Linux (powerpc64le-unknown-linux-gnu); CPU: unknown; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, pwr9); GPU: Tesla V100-SXM2-32GB. CUDA toolkit 10.2.89, local installation; CUDA driver 10.2.0; NVIDIA driver 440.64.0. Libraries: ; - CUBLAS: 10.2.2; - CURAND: 10.1.2; - CUFFT: 10.1.2; - CUSOLVER: 10.3.0; - CUSPARSE: 10.3.1; - CUPTI: 12.0.0; - NVML: 10.0.0+440.64.0; - CUDNN: missing; - CUTENSOR: missing. Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5; - Device capability support: sm_30, sm_32, sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 4.367 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 4.805 GiB / 31.749 GiB available); nothing. [2021/08/05 12:11:43.425] INFO Setting up benchmark: (GPU, Float64, 128)...; [2021/08/05 12:12:45.688] INFO warming up; [2021/08/05 12:15:06.837] INFO Simulation is stopping. Model iteration 1 has hit or exceeded simulation stop iteration 1.; [2021/08/05 12:15:07.841] INFO Simulation is stopping. Model iteration 11 has hit or exceeded simulation stop iteration 11.; [2021/08/05 12:15:10.060] INFO done profiling (GPU, Float64, 128); ==45925== Profiling application: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project nonhydrostatic_profiler.jl; ==45925== Profiling result:; Type Time(%) Time Calls Avg Min Max Name; GPU activities: 20.46% 17.966ms 10 1.7966ms 1.7946ms 1.7987ms _Z23julia_gpu_calculate_Gv_7Context",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-893914746:622,install,installation,622,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-893914746,1,['install'],['installation']
Deployability,Quick test tells me everything works with latest CUDA packages which just got released but will have to refactor a bit to make use of GPUifyLoop's new `@launch` functionality (and remove the `@setup` calls).,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/153:78,release,released,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/153,1,['release'],['released']
Deployability,"Ready to be reviewed. I could not make the oceanic les regression test work for the moment, but we still have to build a bit on this PR so this is a good starting point to not blow up this PR too much. Next steps should be; - include an example (to be ran on the distributed pipeline); - include a tridiagonal solve; - relax the constraints on the divisibility of the grid size by the ranks, this will require a bit of experimenting but it can be easily done by modifying the buffers in `TransposableField` to be of variable size",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-2183310740:275,pipeline,pipeline,275,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-2183310740,1,['pipeline'],['pipeline']
Deployability,"Recent calibration developments may have produced better defaults, e.g., here:; https://github.com/CliMA/Oceananigans.jl/blob/b3ddbc84c8f35aaf5b93fbbfdb4cffcada5c6533/src/TurbulenceClosures/turbulence_closure_implementations/CATKEVerticalDiffusivities/CATKEVerticalDiffusivities.jl#L108; and; https://github.com/CliMA/Oceananigans.jl/blob/b3ddbc84c8f35aaf5b93fbbfdb4cffcada5c6533/src/TurbulenceClosures/turbulence_closure_implementations/CATKEVerticalDiffusivities/mixing_length.jl#L69-L85. Should we update these values?. (I'd like to add CATKE closure to the channel...)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2272:501,update,update,501,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2272,1,['update'],['update']
Deployability,Reduce ContinuousBoundaryFunction location + features for auxiliary fields,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1859:7,Continuous,ContinuousBoundaryFunction,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1859,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,Reduce memory fetch for ContinuousBoundaryFunction BCs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3077:24,Continuous,ContinuousBoundaryFunction,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3077,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Registration pull request created: [JuliaRegistries/General/32030](https://github.com/JuliaRegistries/General/pull/32030). After the above pull request is merged, it is recommended that a tag is created on this repository for the registered package version. This will be done automatically if the [Julia TagBot GitHub Action](https://github.com/marketplace/actions/julia-tagbot) is installed, or can be done manually through the github interface, or via:; ```; git tag -a v0.53.1 -m ""<description of version>"" 7682a3df3c65a1a7e1df2bb05d86a8ce033a91ff; git push origin v0.53.1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1473#issuecomment-799772332:382,install,installed,382,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1473#issuecomment-799772332,1,['install'],['installed']
Deployability,Release notes:. * Fixes a major bug with `ImmersedBoundaryGrid` that elided all viscous fluxes,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1844:0,Release,Release,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1844,1,['Release'],['Release']
Deployability,"Release notes:. * Tests and fixes for `FFTBasedPoissonSolver` for topologies with `Flat` dimensions (#1560); * Improved `AbstractOperations` that are much more likely to compile on the GPU, with better ""location inference"" for `BinaryOperation` (#1595, #1599)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1600:0,Release,Release,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1600,1,['Release'],['Release']
Deployability,"Release notes:. **Everyone should stop using Oceananigans v0.31.0 and upgrade to this version. Oceananigans now requires Julia 1.4 or later.**. This release fixes a major bug concerning a race condition making GPU simulation, especially large models, explode into NaNs in v0.31.0. It also restores the ""Examples"" section in the documentation and adds experimental support for higher order advection schemes.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/821:0,Release,Release,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/821,3,"['Release', 'release', 'upgrade']","['Release', 'release', 'upgrade']"
Deployability,Release notes:. This is a bugfix release that disables CuArray scalar operations by default (to avoid surprise scalar operations that can cause huge slowdowns) and **fixes a related bug where writing GPU fields to NetCDF was very slow**. Also includes small updates to the documentation.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/852:0,Release,Release,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/852,3,"['Release', 'release', 'update']","['Release', 'release', 'updates']"
Deployability,"Release notes:. This release adds new features to the `NetCDFOutputWriter` and fixes some bugs.; * The date the file was generated, the Julia version, and the Oceananigans version used are always written as global attributes (metadata) to all NetCDF files.; * Added `with_halos` and `verbose` keyword arguments to `NetCDFOutputWriter`.; * Fixed bug in writing grid coordinates to NetCDF (they were previously offset).; * Fixed bug in printing of grid coordinate ranges for `Bounded` dimensions.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/825:0,Release,Release,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/825,2,"['Release', 'release']","['Release', 'release']"
Deployability,"Release notes:. This release adds some new features, fixes some bugs, and improves the API (so there are some breaking changes, listed below). Major changes:; * Triply periodic models are now available by passing the `topology = (Periodic, Periodic, Periodic)` keyword argument to grids.; * All 1D, 2D, and 3D averages are now available through the `Average` diagnostic with the `dims` keyword argument.; * Fixed some checkpointing bugs.; * **BREAKING:** Use `Average(..., dims=(1, 2))` instead of `HorizontalAverage(...)`.; * **BREAKING:** Use `iteration_interval` and `time_interval` instead of `frequency` and `interval` for diagnostics and output writers.; * **BREAKING:** Use `iteration_interval` instead of `progress_frequency` for simulations.; * **BREAKING:** Use `IsotropicDiffusivity` and `AnisotropicDiffusivity` instead of `ConstantIsotropicDiffusivity` and `ConstantAnisotropicDiffusivity`. Also, use `νz` instead of `νv` and `κz` instead of `κv`.; * **BREAKING:** To `restore_from_checkpoint`, pass model constructor arguments as you would to a normal constructor, e.g. `restore_from_checkpoint(""my_checkpoint.jld2"", boundary_conditions=custom_bcs)`. Previous behavior was to pass a dictionary which was less user friendly.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/847:0,Release,Release,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/847,2,"['Release', 'release']","['Release', 'release']"
Deployability,"Release notes:. This release adds support for time averaging and field slicing to `NetCDFOutputWriter`. **Breaking changes**:; * `NetCDFOutputWriter` constructor: The `filename` keyword argument is now `filepath`.; * `NetCDFOutputWriter` constructor: To specify slices, pass a `FieldSlicer(i, j, k; with_halos)` instead of using the `xC`, `xF`, `yC`, `yF`, `zC`, and `zF` keyword arguments.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1067:0,Release,Release,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1067,2,"['Release', 'release']","['Release', 'release']"
Deployability,Remove SymPy dependency in next release of Oceananigans,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/990:32,release,release,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/990,1,['release'],['release']
Deployability,Remove event system from KA and update to CUDA v4.1,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2924:32,update,update,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924,1,['update'],['update']
Deployability,Removes all support for <1.9 Julia versions and update `Project.toml`. Closes #3184,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3190:48,update,update,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3190,1,['update'],['update']
Deployability,"Reported by @sandreza. Not a problem yet but we should update `versioninfo_with_gpu()` in PR #860. I think we change `CUDA.context() |> CUDA.device |> CUDA.name` to just `CUDA.device() |> CUDA.name`. Even better, we could start making use of the new `CUDA.versioninfo()` which has lots more CUDA and GPU info. <img width=""1126"" alt=""Screen Shot 2020-08-21 at 10 11 58 PM"" src=""https://user-images.githubusercontent.com/20099589/91040039-92b2a080-e5db-11ea-8d72-d1bdfb2d7210.png"">",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/866:55,update,update,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/866,1,['update'],['update']
Deployability,"Requires https://github.com/EnzymeAD/Enzyme.jl/pull/1485 to release, which itself requires https://github.com/JuliaRegistries/General/pull/108556. Perhaps means we don't change the other varargs stuff, but we'll have to wait and see.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3618:60,release,release,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3618,1,['release'],['release']
Deployability,Resolves #1794 . We should also come up with a more permanent solution (perhaps another environment variable to toggle GPU-CI) that throws an error if GPU tests can't run on the GPU.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1799:112,toggle,toggle,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1799,1,['toggle'],['toggle']
Deployability,Resolves #578 ; Updates runtests to use the ModelLogger; Updates tests to use @info instead of println,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/585:16,Update,Updates,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/585,2,['Update'],['Updates']
Deployability,Resume from checkpoint should be integrated with model constructor,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/602:33,integrat,integrated,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/602,1,['integrat'],['integrated']
Deployability,"Revert ""Update CUDA packages to get rid of CUDA errors on CPU and use CUDAapi.has_cuda()""",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/387:8,Update,Update,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/387,1,['Update'],['Update']
Deployability,"Rewrote the time stepping algorithm to perform operations element-wise which allows the MITgcm algorithm to fully utilize a GPU (for large enough problems). And the same code runs on the CPU. Essentially we have a massive triple for loop iterating over all the grid points and functions that e.g. calculate u-momentum advection at grid point (i,j,k). The code is ugly and unorganized right now but I just wanted to get something working. Now we can work on cleaning up the code and optimizing performance. You can see for yourselves how bad the native type element-wise operators are but the time stepping loop should clean up nicely. It's split up into 4-5 kernels as the GPU needs to synchronize between certain steps. I've had to make some compromises writing it for the GPU, mainly by stripping away all the abstractions as the GPU will only deal with native data types. But we can figure this stuff out, it can only get better from here. This time stepping will essentially replace what's already in place (and turn the code into a CPU/GPU capable package) so might as well merge and start working on integrating it (and getting some sort sort of GPU CI working). Resolves #49",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/54:1106,integrat,integrating,1106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/54,1,['integrat'],['integrating']
Deployability,"RfdXRpbHMuamw=) | `82.50% <30.00%> (-4.78%)` | :arrow_down: |; | [src/BoundaryConditions/zero\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/929/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy96ZXJvX2hhbG9fcmVnaW9ucy5qbA==) | `73.68% <81.25%> (-2.79%)` | :arrow_down: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/929/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `71.79% <100.00%> (ø)` | |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/929/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `96.42% <100.00%> (ø)` | |; | [src/Diagnostics/windowed\_time\_average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/929/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL3dpbmRvd2VkX3RpbWVfYXZlcmFnZS5qbA==) | `52.94% <0.00%> (-31.44%)` | :arrow_down: |; | [src/OutputWriters/fetch\_output.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/929/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvZmV0Y2hfb3V0cHV0Lmps) | `60.00% <0.00%> (ø)` | |; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/929/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `92.30% <0.00%> (+0.78%)` | :arrow_up: |; | ... and [2 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/929/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/929?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/929?src=pr&el=footer). Last update [0f33c1d...ed03e78](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/929?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/929#issuecomment-690596871:3305,update,update,3305,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/929#issuecomment-690596871,1,['update'],['update']
Deployability,"Ri_c` is a ""critical"" Richardson number where tapering starts and `Ri_d` is the width of the tapering function. We have piecewise-linear tapering. ```julia; piecewise_linear_tapering = 1 - min(1, max(0, (Ri - Ri_c) / Ri_d)); ```. This PR introduces an exponential tapering. ```julia; exponential_tapering = exp(- max(0, (Ri - Ri_c) / Ri_d)); ```. and hyperbolic tangent tapering. ```julia; hyperbolic_tangent_tapering = (1 - tanh((x - x₀) / δ)) / 2; ```. (which I haven't tested yet). I calibrated the piecewise linear case and exponential case using https://github.com/glwagner/LocalOceanClosureCalibration. ; Neither is perfect but the exponential results look a bit better, so I'm making them default. Here's some results from an EKI calibration algorithm, calibrating the closure to the [""LESbrary 1.0""]:. ![multi_case_model_observation_comparison_iteration_220](https://user-images.githubusercontent.com/15271942/162448303-7dfa75eb-f1bf-4fdb-8d7f-e34c4b288d31.png). apologies for no plot labels... every row is a different LES ""truth"" case ranging from convection to pure shear with no rotation. The parameters are. ```; latest_summary = IterationSummary for 4000 particles and 6 parameters at iteration 220; ν₀ | κ₀ | Ri₀ν | Ri₀κ | Riᵟν | Riᵟκ |; ensemble_mean: 8.760e-01 | 2.089e-01 | -1.241e+00 | -3.919e-01 | 5.919e-01 | 6.570e-01 |; best particle: 9.243e-01 | 1.779e-01 | -1.342e+00 | -1.252e-01 | 6.104e-01 | 5.959e-01 | error = 3.728775e-01; worst particle: 9.677e-01 | 2.479e-01 | -2.920e+00 | -1.969e-01 | 6.291e-01 | 4.083e-01 | error = 9.724616e-01; minimum: 2.634e-02 | 3.839e-02 | -3.590e+00 | -2.641e+00 | 1.856e-02 | 7.557e-02 |; maximum: 9.973e-01 | 9.938e-01 | 2.362e+00 | 1.775e+00 | 8.018e+00 | 2.498e+00 |; ensemble_variance: 4.043e-03 | 2.982e-03 | 1.173e-01 | 1.078e-01 | 7.889e-03 | 8.798e-03 |; ```. (https://github.com/CliMA/OceananigansArtifacts.jl/pull/14). Everything is preliminary because we still need to upgrade to LESbrary 2.0 (with Stokes drift and more cases).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2423:2146,upgrade,upgrade,2146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2423,1,['upgrade'],['upgrade']
Deployability,Right -- this is the correct way to update an existing PR from a fork. Well done @fadaie91 !,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2456#issuecomment-1105845116:36,update,update,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2456#issuecomment-1105845116,1,['update'],['update']
Deployability,"Right now GitLab CI fails on nightly/dev builds because CUDAapi isn't a package anymore. This PR updates the dependencies/packages in Project.toml to the latest version which should also fix this. There was some mix-up about a month ago that forced us to switch to the master branch of a lot of GPU packages, but things seem fine now. Sticking with GPUifyLoops v0.2.3 because of https://github.com/vchuravy/GPUifyLoops.jl/issues/66. Also removes CUDAapi which isn't a package anymore, and NNlib which was never supposed to be a direct dependency.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/244:97,update,updates,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/244,1,['update'],['updates']
Deployability,"Right now I'm just constructing grids with dimensions that are multiples of 16 so; ```julia; Tx, Ty = 16, 16 # Threads per block; Bx, By, Bz = Int(Nx/Tx), Int(Ny/Ty), Nz # Blocks in grid.; ```. @vchuravy suggested laying them out to fill out the _x_-direction first, then the _y_-direction, then the _z_-direction. That would also let us use grids with arbitrary sizes, i.e. not just multiples of 16. Not sure if it would affect performance for large problems. See https://github.com/vchuravy/GPUifyLoops.jl/pull/18#issuecomment-465150581. Update: Yeah I should have done this a long time ago. This issue is preventing us from running small grids (e.g. 1D column models) on the GPU and running certain tests.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/64:540,Update,Update,540,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/64,1,['Update'],['Update']
Deployability,"Right now `AveragedField` is not correct on stretched grids, because we just compute a naive `mean!` over the grid. https://github.com/CliMA/Oceananigans.jl/blob/24e766481cebbc8f61099b386623d175218acedb/src/Fields/averaged_field.jl#L107. But what we really want is to integrate the field over the averaging dimension(s), and then divide by the total size of the dimension. For example, in the absence of immersed boundaries we can do something like. ```julia; using Oceananigans.AbstractOperations: Δz; u_Δz = u * Δz; U = ReducedField{Face, Center, Nothing}(arch, grid, dims=3); sum!(U, u_Δz); U .=/ grid.Lz; ```. In the presence of immersed boundaries, we actually have to calculate the total length of the dimension (eg, the total depth). We can possibly reduced `GridMetricOperation` for that purpose too. For `IntegratedField`, we simply avoid the final division by `Lz`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2051:268,integrat,integrate,268,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2051,2,"['Integrat', 'integrat']","['IntegratedField', 'integrate']"
Deployability,"Right now all our tests are lumped into one (unit, integration, and model verification tests) and we run the tests on the CPU and the GPU (most tests are shared). This is not a high priority item right now, but it's already annoying that I have to wait several minutes for the GPU tests to run as I'm debugging. So just starting up a discussion around this topic. I can see us hitting some limitations soon:; 1. A comprehensive test suite will take time to run, long enough that we cannot keep running it during development and debugging.; 2. Comprehensive model verification tests (or system tests?) will take even longer to run and are absolutely crucial (see #81 #136), so this problem will get worse in the future.; 3. GPU tests take a while to run because of long compile time (#66) and they run on top of all the CPU tests. In general, setting up GPU models take more time so it's not ideal that we're setting up tons of tiny models for testing. Testing GPU stuff may also involve some expensive scalar CUDA operations (see #82). We will also need to run the test suite on the following architectures in the future:; 1. single-core CPU (Travis CI and Appveyor are fine here); 2. single GPU (JuliaGPU's GitLab CI pipeline works great here); 3. multi-core single CPU (MPI) (paid CI plans will probably work here); 4. multiple distributed CPU nodes (MPI) (no idea where to run this); 5. multiple GPUs (MPI) (no idea where to run this). Some ideas for things to do that will help:; 1. Explicitly split the tests up into 2-3 suites; 1.1. **Unit tests**: should run in a few minutes so we can run them during development and on every commit/PR/etc.; 1.2. **Integration tests**: can take a while to run so we don't want to run these locally all the time but probably on every PR. Shouldn't take much more than 1 hour to run so we don't have to wait forever to merge PR's.; 1.3. **Model verification tests** (also called _end-to-end_ tests): will probably take a long time to run. Maybe run this once a ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/139:51,integrat,integration,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/139,1,['integrat'],['integration']
Deployability,Right now it's done through Travis which is very slow. We can build and deploy docs much faster on Buildkite as Tartarus has lots of CPU resources.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1051:72,deploy,deploy,72,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1051,1,['deploy'],['deploy']
Deployability,"Right now regression data takes up a significant amount of space in the repo. I suppose this is not a huge issue as only developers/contributors `git clone` the repo while users can just `] add Oceananigans`. But a potential solution would be to store regression data elsewhere and access it using DataDeps.jl. This might be especially good if we want more/larger regression tests. And it wouldn't increase the repo size every time you have to change the regression data. We could maybe the store on engaging? Ideally it should be hosted somewhere with near 100% uptime as we're already maintaining Buildkite which fails sometimes, so we should try to reduce the number of possible failure points in our CI pipeline. ---. Copy pasted some analysis below:. I think regression files currently take up ~17.1 MiB of space in the git repo while a fresh clone of the repo is ~43 MiB (images and convergence plots probably take up several MiB). Here's a listing of all files in git history over 300 KiB (command from https://stackoverflow.com/a/42544963):; ```; 018186272590 328KiB test/data_rayleigh_benard_regression_000001100.jld; 19db949aaae8 328KiB test/data_rayleigh_benard_regression_000001000.jld; 424080660c53 328KiB test/data_rayleigh_benard_regression_000001000.jld; a7e1d690d6b5 328KiB test/data_rayleigh_benard_regression_000001100.jld; 72744372e5c4 361KiB test/regression_tests/data/thermal_bubble_regression.nc; 4ce9699176ee 363KiB test/deep_convection_regression_10.nc; c15f95e2bf3a 364KiB test/regression_tests/data/thermal_bubble_regression.nc; 6f28044e3b56 366KiB docs/src/verification/convergence_plots/gaussian_advection_diffusion_error_convergence.png; 194fdf47099b 392KiB docs/src/verification/convergence_plots/gaussian_advection_diffusion_error_convergence.png; 2f9d5e8650d7 420KiB docs/src/verification/convergence_plots/cosine_advection_diffusion_error_convergence.png; db8f742e7c95 446KiB docs/src/verification/convergence_plots/cosine_advection_diffusion_error_convergence.png; 0",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1086:707,pipeline,pipeline,707,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1086,1,['pipeline'],['pipeline']
Deployability,"Right now tests cannot proceed until both CPU and GPU environments have been initialized. This slows down testing, especially on the CPU as there are fewer GPU agents (and GPU tests take longer). We should switch to using explicit Buildkite dependencies so GPU tests can start once the GPU environment has been initialized (and same for CPU): https://buildkite.com/docs/pipelines/dependencies#defining-explicit-dependencies",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1056:370,pipeline,pipelines,370,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1056,1,['pipeline'],['pipelines']
Deployability,"Right now we have monstrosities like (this one is a bit extreme); ```julia; Nx, Ny, Nz = model.grid.Nx, model.grid.Ny, model.grid.Nz; Lx, Ly, Lz = model.grid.Lx, model.grid.Ly, model.grid.Lz; Δx, Δy, Δz = model.grid.Δx, model.grid.Δy, model.grid.Δz. grid = model.grid; cfg = model.configuration; bcs = model.boundary_conditions; clock = model.clock. G = model.G; Gp = model.Gp; constants = model.constants; eos = model.eos; U = model.velocities; tr = model.tracers; pr = model.pressures; forcing = model.forcing; poisson_solver = model.poisson_solver. δρ = model.stepper_tmp.fC1; RHS = model.stepper_tmp.fCC1; ϕ = model.stepper_tmp.fCC2. gΔz = model.constants.g * model.grid.Δz; fCor = model.constants.f. uvw = U.u.data, U.v.data, U.w.data; TS = tr.T.data, tr.S.data; Guvw = G.Gu.data, G.Gv.data, G.Gw.data. # Source terms at current (Gⁿ) and previous (G⁻) time steps.; Gⁿ = G.Gu.data, G.Gv.data, G.Gw.data, G.GT.data, G.GS.data; G⁻ = Gp.Gu.data, Gp.Gv.data, Gp.Gw.data, Gp.GT.data, Gp.GS.data; ```. Would be nice to prettify or abstract away this unpacking. @charleskawczynski I noticed you used some @unpack macros in the code you showed on Monday, is it up on GitHub by any chance?. I think [Parameters.jl](https://github.com/mauro3/Parameters.jl) implements an @unpack macro, might be good to look at.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/155:281,configurat,configuration,281,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/155,1,['configurat'],['configuration']
Deployability,See https://github.com/JuliaGPU/CUDA.jl/blob/96d6e11259053573ad8164f462d9f9eb8e204893/.buildkite/pipeline.yml#L338-L342,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1772#issuecomment-869108198:97,pipeline,pipeline,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1772#issuecomment-869108198,1,['pipeline'],['pipeline']
Deployability,"See, e.g., at https://github.com/Alexander-Barth/NCDatasets.jl/releases/tag/v0.13.0. Does anything of the above affect us? Should we take care before upgrading?. cc @tomchor",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3309:63,release,releases,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3309,1,['release'],['releases']
Deployability,Seems like @glwagner's nuking of `restore_from_checkpoint` worked well. I'm gonna merge this soon. Is this worth bumping a patch release since the initial diffusivities might be wrong without this?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-886840197:123,patch,patch,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-886840197,2,"['patch', 'release']","['patch', 'release']"
Deployability,Seems like there is some issue with SSH deploy keys and travis can't deploy the docs to [OceananigansDocumentation](https://github.com/CliMA/OceananigansDocumentation). See:; https://travis-ci.com/github/CliMA/Oceananigans.jl/jobs/362580712#L1729,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/808:40,deploy,deploy,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/808,2,['deploy'],['deploy']
Deployability,Seems that many builds are not getting stuck on both CPU and GPU. I wonder if it's a new package version causing problems since this started happening after I updates the Manifest.toml. And the docs update `docs/Manifest.toml` before building so it could explain why the docs build was getting stuck while the others seemed fine: https://github.com/CliMA/Oceananigans.jl/blob/e02790202614916bd918a039216a73c61ff7048a/.buildkite/pipeline.yml#L326,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816615719:159,update,updates,159,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816615719,3,"['pipeline', 'update']","['pipeline', 'update', 'updates']"
Deployability,Set up Slurm pipeline for performance regression testing.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/280:13,pipeline,pipeline,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/280,1,['pipeline'],['pipeline']
Deployability,Shock is the mechanism by which energy dissipates (from what I understand). If I recall correctly to show that energy is conserved involves an integration by parts and if u or du/dx is discontinuous then you can't do that integration by parts.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1185597089:143,integrat,integration,143,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1185597089,2,['integrat'],['integration']
Deployability,Should at least help with detecting doctest failures and we want to build+deploy docs on Buildkite anyways.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1018:74,deploy,deploy,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1018,1,['deploy'],['deploy']
Deployability,"Should be ready to go when all tests pass. We can wait for PR #2121 to finish and then merge this in. Update. Actually need to finish adapting the solver for the `NonHydrostaticModel` (i.e., the `z_face_solver`)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1013367087:102,Update,Update,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1013367087,1,['Update'],['Update']
Deployability,"Should have instructions for:; * How to install the package as a user.; * How to `git clone`, `instantiate`, and `test` the package as a developer.; * CPU instructions.; * GPU instructions.; * When #151 is resolved, docker installation instructions. CPU and GPU instructions should not be separate but when #79 is solved, we should be able to run on the CPU without installing (and failing to build) all the CUDA packages.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/152:40,install,install,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/152,3,['install'],"['install', 'installation', 'installing']"
Deployability,Should probably tag a bugfix release v0.44.1 with this PR. Resolves #1141,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1142:29,release,release,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1142,1,['release'],['release']
Deployability,Should tag a new release once PRs #1014 and #997 are merged.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1032:17,release,release,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1032,1,['release'],['release']
Deployability,Should we be adding the [LLVM exception](https://spdx.org/licenses/LLVM-exception.html) to the Apache 2 license so Oceananigans.jl can continue using FFTW?. I haven't looked into this deeply but my understanding is that FFTW is released under the GPL2 license which would be incompatible with the Apache 2 license without the LLVM exception. See: https://github.com/CliMA/ClimateMachine.jl/issues/1478#issuecomment-701905089,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3708#issuecomment-2338429061:228,release,released,228,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3708#issuecomment-2338429061,1,['release'],['released']
Deployability,"Should we change to 1.5.4 and be on the ""bleeding edge""?; https://github.com/CliMA/Oceananigans.jl/blob/26ce05b232259f69a858a45fbcf62e3d778cb195/.buildkite/pipeline.yml#L2. cc @maleadt",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1461:156,pipeline,pipeline,156,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1461,1,['pipeline'],['pipeline']
Deployability,Shouldn't this be a minor version bump instead of a patch one? After all it's a breaking change if anyone is using the old operators...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2214#issuecomment-1030167995:52,patch,patch,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2214#issuecomment-1030167995,1,['patch'],['patch']
Deployability,"Simone observed:. ```; sverdrup:~/Oceananigans.jl$ julia --project --check-bounds=yes -O0 -e 'using CUDA; try CUDA.versioninfo(); catch; end' ; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0. Libraries: ; - CUBLAS: 11.11.3; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27. Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86. 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 21.353 GiB / 23.869 GiB available); ```. But on CI on the same machine:; ```; Info Packages marked with ⌃ have new versions available and may be upgradable.; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0; ; Libraries:; - CUBLAS: 11.3.0; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27; ; Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86; ; 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 23.779 GiB / 23.869 GiB available); ```. So it looks like CUBLAS 11.03 is leaking through...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015:172,install,installation,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015,2,['install'],['installation']
Deployability,"Simple Dockerfile to build a Docker image with Oceananigans installed, precompiled, and with dependencies built. Should be useful for debugging and maybe speeding up CI. Image can be built then just downloaded by CI server, but usually testing is done before Docker image is built... We also have a Dockerhub repository where images will be published: https://cloud.docker.com/repository/docker/aliramadhan/oceananigans. We can look into automated builds: https://docs.docker.com/docker-hub/builds/. For GPU-accelerated container we can look into: https://github.com/NVIDIA/nvidia-docker. cc @christophernhill we're finally in the 21st century!. Resolves #151",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/316:60,install,installed,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/316,1,['install'],['installed']
Deployability,"Since we didn't release v0.79.4 yet, I suggest we wait for this to merge + some other bug fixes in PRs that are ready to be merged after tests pass and release after. cc @tomchor, @glwagner, @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073:16,release,release,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073,2,['release'],['release']
Deployability,"Since we don't have bitwise reproducibility, each run has random round-off errors that, if integrated into a nonlinear trajectory, can cause two solution to diverge eventually. Possibly this test case is a little too challenging (too long time integration, or too nonlinear), meaning that occasional chaotic divergence of the solution is expected?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012:91,integrat,integrated,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012,2,['integrat'],"['integrated', 'integration']"
Deployability,"Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?. Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882:575,rolling,rolling,575,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882,1,['rolling'],['rolling']
Deployability,Slight terminology upgrade in eady example,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1187:19,upgrade,upgrade,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1187,1,['upgrade'],['upgrade']
Deployability,"Slow down of 10% when introducing `exp` could make sense. > With const rate=1/10 and DiscreteForcing things are as fast as with no forcing. Okay, that makes sense. > So this seems to be a CPU issue. So the problem is that `ContinuousForcing` is rather slow on the CPU. That is a bit annoying. Kind of like how WENO is really slow on the CPU for unknown reasons. At least we have a workaround with `DiscreteForcing`... > Would a MWE help here?. I think what would help the most is a simple benchmarking script that compares identical forcing function implementations with `ContinuousForcing` and `DiscreteForcing` to no forcing. I think we only need one forcing function, and it's probably best if its simple (eg `- p.mu * model_fields.u[i, j, k]`) and doesn't involve complicated functions like `exp`. Since it's only a CPU issue I think it's not the highest priority though (it might not be something we can easily solve either...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875762070:223,Continuous,ContinuousForcing,223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875762070,2,['Continuous'],['ContinuousForcing']
Deployability,Small bugfix for `ContinuousBoundaryFunction`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2634:18,Continuous,ContinuousBoundaryFunction,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2634,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,Small wording updates + missing `` added for correct rendering in horizontal convection example,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3108:14,update,updates,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3108,1,['update'],['updates']
Deployability,So I added a unit test showing that checks that should test its functionality. Once we get more of Oceananigans differentiated we can add some bigger integration tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1756769531:150,integrat,integration,150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1756769531,1,['integrat'],['integration']
Deployability,So I removed `~/.julia` and ran the instantiate before and I got the following output; ```; [45606] signal (11.1): Segmentation fault; in expression starting at /glade/u/home/knudsenl/.julia/packages/CUDA/Tl08O/src/CUDA.jl:25; Allocations: 2907 (Pool: 2898; Big: 9); GC: 0; Installing known registries into `~/.julia`; ┌ Warning: The active manifest file has dependencies that were resolved with a different julia version (1.9.2). Unexpected behavior may occur.; └ @ /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/Manifest.toml:0; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed Adapt ─────────────────────── v4.0.4; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed SentinelArrays ────────────── v1.4.5; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed Tables ────────────────────── v1.12.0; Installed FixedPointNumbers ─────────── v0.8.5; Installed GPUCompiler ───────────────── v0.26.7; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArraysCore ──────────── v1.4.3; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed StaticArrays ──────────────── v1.9.7; Installed TimerOutputs ──────────────── v0.5.24; Installed AbstractFFTs ──────────────── v1.5.0; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed OrderedCollections ────────── v1.6.3; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed UnsafeAtomicsLLVM ─────────── v0.1.5; Installed LaT,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472:274,Install,Installing,274,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472,11,['Install'],"['Installed', 'Installing']"
Deployability,"So in summary, a future effort should take these steps:. 1. Write a function like `substepped_tracers(bgc::AbstractBiogeochemistry)` that can be extended by a hypothetical substepping BGC implementation.; 2. Prototype this concept by implementing a new (hopefully simple, one tracer) BGC model, and prototype the time-stepping algorithm that substeps the tracer forward during `update_biogeocemical_state!`. This should be easy to merge since it only requires defining the one new function `substepped_tracers` for skipping the tracer update. Furthermore, the prototype will demonstrate that the substepping is useful for a stiff problem, and will also develop a substepping scheme. Next, we can consider building an interface for doing the substepping itself, much like we have an interface for doing ordinary time-stepping. That will require a bit more design, but I think the initial prototype will give us a lot of information about the best way to go about it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3888#issuecomment-2455678251:535,update,update,535,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3888#issuecomment-2455678251,2,['update'],['update']
Deployability,"So some of the doctests fail. You can see, e.g., here; https://buildkite.com/clima/oceananigans/builds/10843#01872c04-2d2f-4dbb-94b3-925c0252a815; Seems like some of the updates introduced some more methods for `cos` :); So if you change that 26 --> 30 it should work.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488032275:170,update,updates,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488032275,1,['update'],['updates']
Deployability,"So the docstring shows how to implement diffusivities that are. * a constant; * a function of `z`, using either the continuous form (default) or `discrete_form=true`, and also using an explicit diffusivity location. It does not show how to use an array or `Field`, which may actually be what @LucyBrock4 needs... Also does `another_κ` actually work? It doesn't look like it would.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3667#issuecomment-2258705504:116,continuous,continuous,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3667#issuecomment-2258705504,1,['continuous'],['continuous']
Deployability,"So what is ""truth"" above? Also, how did you figure out that the data we are comparing is from June 1st?. Hm... The regression tests show that only `v` fails... I recently updated the data we are comparing but perhaps somehow it's not updated? I'm not sure what you are comparing above. The initial conditions should be identical! If the initial conditions are that different then there is no way we will get tests to pass. What I wanted to see is the tendency fields at the first time step (but given we provide the initial condition) with v0.79.4 and with v0.77.0. The data we are comparing with was generated with v0.77.0 -- we thought we were pretty sure about that but might be wrong.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783:171,update,updated,171,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783,2,['update'],['updated']
Deployability,"So, I also tried upgrading my whole project without upgrading Julia (so still using Julia 1.5.2) and the error persists. . To be clear, before the upgrade below everything was working normally and after the upgrade the checkpointer stopped being created. Here's the upgrade:. ```; Updating registry at `~/.julia/registries/General`; ######################################################################## 100.0%; Installed Showoff ───── v1.0.2; Installed StructTypes ─ v1.6.0; Installed Tables ────── v1.4.2; Installed Plots ─────── v1.11.2; Installed ArgParse ──── v1.1.4; Installed GR ────────── v0.57.3; Updating `/glade/scratch/tomasc/ISI_jet/Project.toml`; [c7e460c6] ↑ ArgParse v1.1.2 ⇒ v1.1.4; [63c18a36] ↑ KernelAbstractions v0.5.4 ⇒ v0.5.5; [9e8cae18] ↑ Oceananigans v0.53.2 ⇒ v0.54.0; [91a5bcdd] ↑ Plots v1.11.0 ⇒ v1.11.2; Updating `/glade/scratch/tomasc/ISI_jet/Manifest.toml`; [79e6a3ab] ↑ Adapt v3.2.0 ⇒ v3.3.0; [c7e460c6] ↑ ArgParse v1.1.2 ⇒ v1.1.4; [4fba245c] ↑ ArrayInterface v3.1.6 ⇒ v3.1.7; [052768ef] ↑ CUDA v2.4.1 ⇒ v2.4.3; [d360d2e6] ↑ ChainRulesCore v0.9.34 ⇒ v0.9.37; [35d6a980] ↑ ColorSchemes v3.10.2 ⇒ v3.11.0; [5ae59095] ↑ Colors v0.12.6 ⇒ v0.12.7; [34da2185] ↑ Compat v3.25.0 ⇒ v3.27.0; [0c68f7d7] ↑ GPUArrays v6.2.0 ⇒ v6.2.2; [28b8d3ca] ↑ GR v0.55.0 ⇒ v0.57.3; [d2c73de3] ↑ GR_jll v0.56.1+0 ⇒ v0.57.2+0; [63c18a36] ↑ KernelAbstractions v0.5.4 ⇒ v0.5.5; [da04e1cc] ↑ MPI v0.17.1 ⇒ v0.17.2; [872c559c] ↑ NNlib v0.7.17 ⇒ v0.7.18; [9e8cae18] ↑ Oceananigans v0.53.2 ⇒ v0.54.0; [91a5bcdd] ↑ Plots v1.11.0 ⇒ v1.11.2; [ea2cea3b] + Qt5Base_jll v5.15.2+0; [ede63266] - Qt_jll v5.15.2+3; [01d81517] ↑ RecipesPipeline v0.3.1 ⇒ v0.3.2; [992d4aef] ↑ Showoff v0.3.2 ⇒ v1.0.2; [2913bbd2] ↑ StatsBase v0.33.4 ⇒ v0.33.5; [09ab397b] ↑ StructArrays v0.5.0 ⇒ v0.5.1; [856f2bd8] ↑ StructTypes v1.5.0 ⇒ v1.6.0; [3783bdb8] ↑ TableTraits v1.0.0 ⇒ v1.0.1; [bd369af6] ↑ Tables v1.4.1 ⇒ v1.4.2; [6aa5eb33] ↑ TaylorSeries v0.10.11 ⇒ v0.10.12; [0796e94c] ↑ Tokenize v0.5.15 ⇒ v0.5.16; ```. I was able t",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1547#issuecomment-818960260:147,upgrade,upgrade,147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1547#issuecomment-818960260,12,"['Install', 'upgrade']","['Installed', 'upgrade']"
Deployability,"Some of the buildkite pipelines take way too long. Specifically the `time_stepping_2`, `regression` and `solver` tests. I suggest we further split them?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2139:22,pipeline,pipelines,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2139,1,['pipeline'],['pipelines']
Deployability,"Some of the points that could be in the Goals/Mission section:. - Easy to install, understand and use; - Versatile: model is made in blocks that could be combined and easily configured across scales; - Modern: this might be no independent from the others.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2308#issuecomment-1059785806:74,install,install,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2308#issuecomment-1059785806,1,['install'],['install']
Deployability,"Some progress:. The type infererence issue seems to be fixed. For `flow_over_hills.jl` the cost per time-step is approximately the same on my CPU for the ""reference case"" (no immersed boundary), and either free-slip or no-slip immersed boundary. I updated `flow_over_hills.jl` to introduce an initial perturbation that goes turbulent immediately. Here's a visualization of vorticity alongside total momentum loss for a 64x64 resolution:. https://user-images.githubusercontent.com/15271942/163830810-8f15244b-27e2-4bf0-a7b2-e35d73bd8c79.mp4. The ""reference"" case has a no-slip boundary but no bathymetry. The momentum loss between reference and free-slip case are similar. No-slip and immersed boundary has the most momentum loss. The effect of the pressure errors can be seen plainly that there is transient _injection_ of momentum into the system, which isn't physically possible. However over long periods of time the momentum goes in the right direction. I'm wondering if anyone has experience with PALM, which I believe uses a very similar immersed boundary method (with no pressure solver correction)... ? They must have similar ""leakage"" errors. Overall I'm happy. I'd like to implement a few more convenient features and then I think this implementation is complete. There's still a fair amount of work to do to write tests and documentation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1101498039:248,update,updated,248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1101498039,1,['update'],['updated']
Deployability,"Some recent improvements in `CUDA.jl`:. https://juliagpu.org/post/2022-01-28-cuda_3.5_3.8/#preserving_array_indices. attempt to avoid promoting index types from 32-bit to 64-bit integers (64-bit integers are Julia's default). Throughout `Oceananigans` we use 64-bit integers by using the constant `1` for index calculations:. https://github.com/CliMA/Oceananigans.jl/blob/9f6d841393094b123c99287fab7157a65db4d513/src/Operators/difference_operators.jl#L7. According to that blog post, changing the above line. ```julia; @inline δxᶜᵃᵃ(i, j, k, grid, u) = @inbounds u[i+0x1, j, k] - u[i, j, k] ; ```. may decrease register pressure (perhaps dramatically, especially for wide stencils with lots of indices). `0x1` is the integer 1 with type `UInt8`:. ```julia; julia> i = 0x1; 0x01. julia> typeof(i); UInt8. julia> i == 1; true. julia> i === 1; false; ```. The amount of code that generates our stencils is not all that large. We find stencil calculations in. * `Operators`; * `Advection`; * `ImmersedBoundaries`. I also found a few stray index manipulations in random places like. https://github.com/CliMA/Oceananigans.jl/blob/9f6d841393094b123c99287fab7157a65db4d513/src/Models/HydrostaticFreeSurfaceModels/pcg_implicit_free_surface_solver.jl#L211. I think this issue also implies that we should strive to minimize the number of places where we do index calculations, to minimize the chances that we accidentally convert to `Int64`. We might also want to do some profiling to see the specific effect moving to `UInt8` indices might have. Perhaps we should benchmark two fully-loaded models, a `NonhydrostaticModel` LES with high-order advection, and a global-configuration of `HydrostaticFreeSurfaceModel` with an immersed boundary / continents, etc.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2202:1657,configurat,configuration,1657,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2202,1,['configurat'],['configuration']
Deployability,Some updates in Docs/Simulations tips,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2958:5,update,updates,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2958,1,['update'],['updates']
Deployability,Some updates in validation scripts: `AveragedField()` -> `Field(Average())`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2630:5,update,updates,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2630,1,['update'],['updates']
Deployability,"Something else I tried was deleting the `Project.toml` and `Manifest.toml` file as well as `~/.julia`, and after running the following:; ```; using Pkg; Pkg.activate("".""); Pkg.add(""CUDA""); Pkg.instantiate(); using CUDA; ```; I got:; ```; [57577] signal (11.1): Segmentation fault; in expression starting at /glade/u/home/knudsenl/.julia/packages/CUDA_Runtime_jll/YgJCI/.pkg/platform_augmentation.jl:210; Allocations: 2907 (Pool: 2898; Big: 9); GC: 0; Activating new project at `/glade/derecho/scratch/knudsenl/BottomBoundaryLayer`; Installing known registries into `~/.julia`; Updating registry at `~/.julia/registries/General.toml`; Resolving package versions...; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Adapt ─────────────────────── v4.0.4; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed SentinelArrays ────────────── v1.4.5; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed FixedPointNumbers ─────────── v0.8.5; Installed Tables ────────────────────── v1.12.0; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed GPUCompiler ───────────────── v0.26.7; Installed StaticArraysCore ──────────── v1.4.3; Installed TimerOutputs ──────────────── v0.5.24; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed AbstractFFTs ──────────────── v1.5.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArrays ──────────────── v1.9.7; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed LLVMExtra_jll ───────",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900:532,Install,Installing,532,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900,8,['Install'],"['Installed', 'Installing']"
Deployability,"Something fishy is happening. The error is. ```julia; Reason: unsupported dynamic function invocation (call to Base.Fix1{typeof(Adapt.adapt), Float64}); ```. This means we created a partially-applied function via `Fix1(adapt, x)`. . This looks like a bug that has to do with some package update, maybe to `Adapt`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3406#issuecomment-1867011041:288,update,update,288,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3406#issuecomment-1867011041,1,['update'],['update']
Deployability,"Something related with the boundary conditions of the loaded saved `b` perhaps?. E.g., . ```julia; julia> b_timeseries[10]; Field located at (Center, Center, Center); ├── data: OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, size: (128, 1, 64); ├── grid: RegularRectilinearGrid{Float64, Bounded, Flat, Bounded}(Nx=128, Ny=1, Nz=64); └── boundary conditions: JLD2.ReconstructedTypes.var""##NamedTuple{(:x, :y, :z),Tuple}#261""(CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}(BoundaryCondition: type=ZeroFlux, condition=nothing, BoundaryCondition: type=ZeroFlux, condition=nothing), CoordinateBoundaryConditions{Nothing, Nothing}(nothing, nothing), JLD2.ReconstructedTypes.var""##CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Value,Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center,Center,Nothing,64,Main.#bₛ,Nothing,Tuple{},Tuple{},Tuple{}}}}#262""()); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-878829232:979,Continuous,ContinuousBoundaryFunction,979,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-878829232,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Sorry for the long delay. I came back to this problem and could make it work like this. ```julia; # subset grid for 20 times less vertical nodes; subset_grid = RectilinearGrid(arch,; size = (grid.Nx, grid.Ny, div(grid.Nz, 20)),; extent = (grid.Lx, grid.Ly, grid.Lz); ). subset_fields = NamedTuple( key=>Field(location(output_fields[key]), subset_grid) for key in keys(output_fields) ). for key in keys(subset_fields); interpolate!(subset_fields[key], output_fields[key]); end; ```. But this code seems too verbose and I am not sure if the interpolated data will be updated at each save.; Does that seem right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2030559643:565,update,updated,565,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2030559643,1,['update'],['updated']
Deployability,Sorry validation pipeline was accidently triggered so I canceled it. Fixed it so shouldn't happen in the future.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1325#issuecomment-769909121:17,pipeline,pipeline,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1325#issuecomment-769909121,1,['pipeline'],['pipeline']
Deployability,"Sounds good to update the code! Perhaps we should also add a warning or note of some kind about the lack of validation (we've taken to doing this recently and I think it's a good thing). @navidcy would be happy not to use `ς`!. `\Upsilon` is disturbingly similar to ""Y"":. ```julia; julia> Υ = 1; 1; ```. maybe there's a better choice? We could also change the docs.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889254094:15,update,update,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889254094,1,['update'],['update']
Deployability,Started on 1.9.1 then upgraded to 1.9.2,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3189#issuecomment-1641975792:22,upgrade,upgraded,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3189#issuecomment-1641975792,1,['upgrade'],['upgraded']
Deployability,"StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, NamedTuple{(:u, :v, :w, :T, :S), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:Lx, :Ly, :Lz, :Nx, :Ny, :Nz, :N²₀, :u₁_west, :ℓ₀, :σ, :u_b, :v_b, :u_out), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Vararg{Float64, 7}}}, typeof(sponge_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:Lx, :Ly, :Lz, :Nx, :Ny, :Nz, :N²₀, :u₁_west, :ℓ₀, :σ, :u_b, :v_b, :u_out), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Vararg{Float64, 7}}}, typeof(sponge_T), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:Lx, :Ly, :Lz, :Nx, :Ny, :Nz, :N²₀, :u₁_west, :ℓ₀, :σ, :u_b, :v_b, :u_out), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Vararg{Float64, 7}}}, typeof(sponge_S), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}}}, WENO{3, Float64, Nothing, Nothing, Nothing, true, Nothing, WENO{2, Float64, Nothing, Nothing, Nothing, true, Nothin",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3609:23299,Continuous,ContinuousForcing,23299,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3609,1,['Continuous'],['ContinuousForcing']
Deployability,"StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_w), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.identity4)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_w), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_w), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.identity1)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.Bo",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2860:13604,Continuous,ContinuousBoundaryFunction,13604,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2860,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Strange that we don't have this already but this PR refactors the operators to be truly finite volume. By using multiple dispatch we only have one operator rather than having a different operator for each grid. The beautiful ϊ (`\iota\ddot`) now denotes interpolation. Thanks @sandreza!. Need to switch to using the `caa`, `afa`, etc. notation and introduce some composite operators from `closure_operators.jl`. Just opening this PR early so people can see what the new operators look like, get some feedback, etc. Once this PR is merged, implementing a vertically stretched grid will be easy, and implementing wall bounded directions should be as simple as defining something like; ```julia; Ay(i, j, k, grid) = ifelse(j == 0, 0, Δx(i, j, k, grid) * Δz(i, j, k, grid)); ```; but still thinking about the best way to dispatch on e.g. `DoublyPeriodicDomain`, `ChannelDomain`, `TriplyPeriodicDomain`, etc. I will also release v0.7.0 once this PR is merged. Resolves #115; Resolves #146 ; Resolves #469",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/283:917,release,release,917,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/283,1,['release'],['release']
Deployability,"Stuck with this error:. ```; julia> include(""test_enzyme.jl""); MPIPreferences:; binary: MPICH_jll; abi: MPICH. Package versions; MPI.jl: 0.20.22; MPIPreferences.jl: 0.1.11; MPICH_jll: 4.2.3+0. Library information:; libmpi: /Users/gregorywagner/.julia/artifacts/5b62c899cf8329a8d07e8fe6eda96039010046c7/lib/libmpi.12.dylib; libmpi dlpath: /Users/gregorywagner/.julia/artifacts/5b62c899cf8329a8d07e8fe6eda96039010046c7/lib/libmpi.12.dylib; MPI version: 4.1.0; Library version:; MPICH Version: 4.2.3; MPICH Release date: Wed Oct 2 09:35:21 AM CDT 2024; MPICH ABI: 16:3:4; MPICH Device: ch3:nemesis; MPICH configure: --prefix=/workspace/destdir --build=x86_64-linux-musl --host=aarch64-apple-darwin20 --disable-dependency-tracking --disable-doc --enable-fast=all,O3 --enable-static=no --with-device=ch3 --with-hwloc=/workspace/destdir FFLAGS=-fallow-argument-mismatch FCFLAGS=-fallow-argument-mismatch; MPICH CC: cc -fno-common -DNDEBUG -DNVALGRIND -O3; MPICH CXX: c++ -DNDEBUG -DNVALGRIND -O3; MPICH F77: gfortran -fallow-argument-mismatch -O3; MPICH FC: gfortran -fallow-argument-mismatch -O3; MPICH features:. Enzyme with CATKEVerticalDiffusivity: Error During Test at /Users/gregorywagner/Projects/Oceananigans.jl/test/test_enzyme.jl:264; Got exception outside of a @test; MethodError: no method matching getindex(::Base.RefValue{Tuple{Base.RefValue{Float64}, Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Flat, Flat, Bounded, Float64, Float64, Float64, Nothing, Nothing, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Field{Center, Face, Center",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596:504,Release,Release,504,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3837#issuecomment-2400785596,1,['Release'],['Release']
Deployability,"Sure. I'm now working on making plots of convergence and should be able to get that done today. One issue is that I have commented out a lot of stuff, which was there before. I've focused on making the one advection test and haven't integrated it into the other tests, yet. Not sure if this is a problem?. I will create a PR later today.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-746523704:233,integrat,integrated,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-746523704,1,['integrat'],['integrated']
Deployability,"T,),Tuple{Float64}}},NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},Nothing,NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}}}, ::UInt64; kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:maxthreads,),Tuple{Int64}}}) at /home/ptuckman/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:0; [18] cufunction(::typeof(Cassette.overdub), ::Type{Tuple{Cassette.Context{nametype(CUDACtx),KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(128, 128, 128)},KernelAbstractions.NDIteration.DynamicCheck,Nothing,Nothing,KernelAbstractions.NDIteration.NDRange{3,KernelAbstractions.NDIteration.StaticSize{(8, 8, 128)},KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)},Nothing,Nothing}},Nothing,KernelAbstractions.var""##PassType#253"",Nothing,Cassette.DisableHooks},typeof(O",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:15038,Continuous,ContinuousForcing,15038,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"T,),Tuple{Float64}}},NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},Nothing,NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}}}, ::UInt64; kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:maxthreads,),Tuple{Int64}}}) at /home/ptuckman/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:19; [12] + at ./int.jl:53 [inlined]; [13] hash_64_64 at ./hashing.jl:35 [inlined]; [14] hash_uint64 at ./hashing.jl:62 [inlined]; [15] hx at ./float.jl:568 [inlined]; [16] hash at ./float.jl:571 [inlined]; [17] cached_compilation(::typeof(CUDA._cufunction), ::GPUCompiler.FunctionSpec{typeof(Cassette.overdub),Tuple{Cassette.Context{nametype(CUDACtx),KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(128, 128, 128)},KernelAbstractions.NDIteration.DynamicCheck,Nothing,Nothing",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:12277,Continuous,ContinuousForcing,12277,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"T,),Tuple{Float64}}},NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},Nothing,NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}}}; kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:maxthreads,),Tuple{Int64}}}) at /home/ptuckman/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:310; [8] #87 at /home/ptuckman/.julia/packages/GPUCompiler/4e9CU/src/cache.jl:21 [inlined]; [9] get!(::GPUCompiler.var""#87#88""{Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:maxthreads,),Tuple{Int64}}},typeof(CUDA._cufunction),GPUCompiler.FunctionSpec{typeof(Cassette.overdub),Tuple{Cassette.Context{nametype(CUDACtx),KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(128, 128, 128)},KernelAbstractions.NDIteration.DynamicCheck,Nothing,Nothing,KernelAbstractions.NDI",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:7066,Continuous,ContinuousForcing,7066,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"T,),Tuple{Float64}}},NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},Nothing,NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}}}; name::String, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:maxthreads,),Tuple{Int64}}}) at /home/ptuckman/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:298; [19] macro expansion at /home/ptuckman/.julia/packages/CUDA/dZvbp/src/compiler/execution.jl:109 [inlined]; [20] (::KernelAbstractions.Kernel{KernelAbstractions.CUDADevice,KernelAbstractions.NDIteration.StaticSize{(16, 16)},KernelAbstractions.NDIteration.StaticSize{(128, 128, 128)},typeof(Oceananigans.TimeSteppers.gpu_calculate_Gu!)})(::OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}, ::Vararg{Any,N} where N; ndrange::Nothing, dependencies::KernelAbstractions.CudaEvent, work",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:17543,Continuous,ContinuousForcing,17543,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"T,),Tuple{Float64}}},NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}},Nothing,NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}}}}, ::Dict{UInt64,Any}, ::UInt64) at ./dict.jl:452; [10] macro expansion at ./lock.jl:183 [inlined]; [11] check_cache(::typeof(CUDA._cufunction), ::GPUCompiler.FunctionSpec{typeof(Cassette.overdub),Tuple{Cassette.Context{nametype(CUDACtx),KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(128, 128, 128)},KernelAbstractions.NDIteration.DynamicCheck,Nothing,Nothing,KernelAbstractions.NDIteration.NDRange{3,KernelAbstractions.NDIteration.StaticSize{(8, 8, 128)},KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)},Nothing,Nothing}},Nothing,KernelAbstractions.var""##PassType#253"",Nothing,Cassette.DisableHooks},typeof(Oceananigans.TimeSteppers.gpu_cal",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:9804,Continuous,ContinuousForcing,9804,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"TODO list (some we might want to address before merging, some we probably should open issues about):. 1. We need a new `Connected` topology with N `Bounded` `Face`s instead of N+1. For MPI we might also need `LeftConnected` and `RightConnected`. . 2. For cubed sphere fields, re-use existing fields but with new types: `CubedSphereData` and `CubedSphereBoundaryConditions`. 3. Figure out a clean way of integrating `fill_horizontal_velocity_halos!` with the existing time-stepping. Perhaps we just need a `maybe_fill_horizontal_velocity_halos!` function that only does something on a connected cubed sphere. 4. We need values for the grid coordinates `λᶜᶠᵃ`, `λᶠᶜᵃ`, `φᶜᶠᵃ`, and `φᶠᶜᵃ` so that we can use `set!` for velocities on the cubed sphere. They are not provided by the file but we should be able to convert the available coordinates back to the cubed sphere face in (ξ, η) coordinates where -1 ≤ ξ, η ≤ 1 which forms a regular grid then interpolate in between and back to the sphere to get the other staggered grid coordinates. 5. We need to use the sine and cosine of the local angle between the grid orientation (e.g., u-velocity) and zonal west-east direction at the grid-cell centers to `set!` velocity fields. Right now we're limited to setting velocity fields from a streamfunction... 6. Should we be filling the halos of the grid metrics? Seems like they should be filled like velocity halos but without any sign changes. 7. Make sure that calling `fill_halo_regions!` on a horizontal velocity field only fills the halos with non-`CubedSphereExchange` boundary conditions. 8. Add the cubed sphere passive tracer advection and surface gravity waves validation experiments to validation CI pipeline. 9. Figure out a way to abstract and clean up `fill_horizontal_velocity_halos!` and `fill_*_halo!`... 10. Merge utils from `src/CubedSpheres/cubed_sphere_utils.jl` and `src/Distributed/distributed_utils.jl` into `Oceananigans.Grids`. 11. Figure out if the tests in `test_cubed_sphere_halo_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-816631979:403,integrat,integrating,403,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1522#issuecomment-816631979,2,['integrat'],['integrating']
Deployability,"Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:19.136] INFO Running shallow wat",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:10688,Configurat,Configuration,10688,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['Configurat'],['Configuration']
Deployability,Tests were introduced in #1994 and updated in #2786.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2219#issuecomment-1305160880:35,update,updated,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2219#issuecomment-1305160880,1,['update'],['updated']
Deployability,"Thank you @glwagner and @navidcy , you are correct my Oceananigans was not the latest and greatest. I am happy to say that I updated and it's all better now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2541#issuecomment-1121534955:125,update,updated,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2541#issuecomment-1121534955,1,['update'],['updated']
Deployability,"Thank you for all your comments. I will try those lines; Just one question. Is the sintax of. `ΞT = randn(size(T)...) *. shape`. correct? I am getting this error message:. > Warning: No xauth data; using fake authentication data for X11 forwarding.; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI ~/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 16 threads; ERROR: LoadError: syntax: invalid identifier name "".""; Stacktrace:; [1] top-level scope; @ /lustre/scratch5/.mdt0/fspereira/OCEANANIGANS/test/case09/c16_128_128m.jl:197; in expression starting at /lustre/scratch5/.mdt0/fspereira/OCEANANIGANS/test/case09/c16_128_128m.jl:197. Line 197 corresponds to the line above. I removed the `*.shape` and the simulations are now running. Is that ok?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268557962:627,Configurat,Configuration,627,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268557962,1,['Configurat'],['Configuration']
Deployability,"Thank you for the suggestion @glwagner . I installed the FFT, and I can . `using Oceananigans.Solvers: FFTBasedPoissonSolver`; `using FFTW`. but when I try. `pressure_solver = FFTBasedPoissonSolver(grid, planner_flag=FFTW.ESTIMATE)`. I get. julia> pressure_solver = FFTBasedPoissonSolver(grid, planner_flag=FFTW.ESTIMATE) ; ERROR: MethodError: no method matching FFTBasedPoissonSolver(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}; planner_flag=0x00000040); Closest candidates are:; FFTBasedPoissonSolver(::Any) at /users/fspereira/.julia/packages/Oceananigans/7G5bN/src/Solvers/fft_based_poisson_solver.jl:50 got unsupported keyword argument ""planner_flag""; FFTBasedPoissonSolver(::Any, ::Any) at /users/fspereira/.julia/packages/Oceananigans/7G5bN/src/Solvers/fft_based_poisson_solver.jl:50 got unsupported keyword argument ""planner_flag""; FFTBasedPoissonSolver(::G, ::Λ, ::S, ::B, ::T) where {G, Λ, S, B, T} at /users/fspereira/.julia/packages/Oceananigans/7G5bN/src/Solvers/fft_based_poisson_solver.jl:6 got unsupported keyword argument ""planner_flag""; Stacktrace:; [1] top-level scope; @ REPL[42]:1; [2] top-level scope; @ ~/.julia/packages/CUDA/DfvRa/src/initialization.jl:52; ; ; What should I use?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1294008171:43,install,installed,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1294008171,1,['install'],['installed']
Deployability,"Thank you for your feedback @maleadt! What is CUDAnative compilation? If you mean the precompilation phase when CUDAnative is first loaded, then it's not that as I start timing after all packages are loaded. I thought 6-7 minutes was normal/expected as @vchuravy et al. reported similar GPU compilation times for their shallow water model: https://github.com/JuliaLabs/ShallowWaterBench. I haven't done any rigorous benchmarking yet but out of those 6 minutes, ~1.5 minutes are spent on compiling code that creates CuFFT plans (the first plan takes 1.5 minutes then the others take <1 second). From watching the log I'm guessing the other 4.5 minutes are evenly split between setting up the model (creating CuArrays, initializing them, etc.) and the first time step (where the kernels are getting compiled presumably). I don't think we have that many kernels (just 5 bigger ones) but one of them; https://github.com/ali-ramadhan/Oceananigans.jl/blob/2b64d584c79ece0429f2421335ddb6bc0c6c6663/src/time_steppers.jl#L213; has several layers of inlining (it's inlining the majority of the functions in [operators/ops_regular_cartesian_grid_elementwise.jl](https://github.com/ali-ramadhan/Oceananigans.jl/blob/master/src/operators/ops_regular_cartesian_grid_elementwise.jl)) after which it probably balloons up to be a pretty big kernel. They also have tons of arguments crammed in as the structs I was passing weren't `isbitstype` (working on this #59). I should come back and update this issue once we do some proper benchmarking (note to self: nvprof seems like it's being deprecated in favor of Nsight). Caching kernels between sessions sounds tough but will definitely look into timing compilations in CUDAnative, might provide some insight on how to speed things up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/66#issuecomment-466847765:1472,update,update,1472,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/66#issuecomment-466847765,1,['update'],['update']
Deployability,Thank you for your help! I have installed the updated version of Julia and when running it appears to be Segfaulting when trying to add CUDA. I will open an issue with them if I cannot figure out how to solve it. Thank you again,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2241830716:32,install,installed,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2241830716,2,"['install', 'update']","['installed', 'updated']"
Deployability,"Thank you very much, Greg, It worked. Still, it is strange that copy/pasting doesn't work.; Now I have a question here-; 1. Should I have to open an Interactive session by typing julia --project?; 2. Purpose of creating a separate environment? what I understood is that a particular environment will restrict to a particular version. Does it even I mistakenly update it inside that environment?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827278043:360,update,update,360,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827278043,1,['update'],['update']
Deployability,"Thanks @ali-ramadhan . I hope they will update a newer version, otherwise I can try and install it myself and I don't imagine they will have any problem with that. We will see.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1468#issuecomment-799638254:40,update,update,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1468#issuecomment-799638254,2,"['install', 'update']","['install', 'update']"
Deployability,"Thanks @ali-ramadhan . I think it would be worthwhile for us to see the results from all the benchmarks so I asked @henryg888 to try running all the scripts. If we see anything interesting we could all more results as they are generated, otherwise we will update the 5. At the moment we are waiting for julia to be updated on the servers and then we can do proper benchmarking on the V100's. . I agree that plots would be nice and maybe we can play with that too. Shouldn't be difficult but will certainly discuss it with you.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845186763:256,update,update,256,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845186763,2,['update'],"['update', 'updated']"
Deployability,"Thanks @ali-ramadhan that is some great advice and will certainly make the changes you requested and try and not forget these lessons for the future. . For starters, here are Hovmoeller plots of h, uh, and vh from the 1D case. Note that I tried it in the x and y directions and I'm glad to say they produce the same results, except for uh and vh are switched. ![Hovmoller_vh](https://user-images.githubusercontent.com/8239041/101361249-b6d57d00-386c-11eb-90da-552784ea98b7.png); ![Hovmoller_uh](https://user-images.githubusercontent.com/8239041/101361250-b76e1380-386c-11eb-91cd-672bd56da677.png); ![Hovmoller_h](https://user-images.githubusercontent.com/8239041/101361251-b76e1380-386c-11eb-859a-218361e43d7f.png). Second, this is a plot of the solution for the 1D case that starts off with no motion and a Gaussian field for height. This is a nice example of geostrophic adjustment, and can certainly be compared to papers that do such things. ![one_dimensional_shallow_water_x](https://user-images.githubusercontent.com/8239041/101361665-45e29500-386d-11eb-82d8-f440f3b07d80.gif). Third, I have done a 2D case and everything looks qualitatively the same, but it is much more diffusive. This is a plot of a slide through the centre that should reproduce the same thing as above, but the amplitudes are much weaker. This is only 64x64 so it's not very high resolution but I should probably change the advection scheme to make it more accurate. ![one_dimensional_shallow_water_2D_x](https://user-images.githubusercontent.com/8239041/101361578-251a3f80-386d-11eb-8e59-8c02e271cfcc.gif). Update: D'Alembert's solution for the radially symmetric wave equation in 2D differs from that in 1D because of an extra factor of 1/r in front. That is why the waves decay in amplitude much faster in 2D compared to 1D.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739947818:1586,Update,Update,1586,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739947818,1,['Update'],['Update']
Deployability,"Thanks @glwagner , that helped. . I see there is an error with `FieldSlicer`. The lines should be updated to be as follows:. ```; slicers = (west = (1, :, :),; east = (grid.Nx, :, :),; south = (:, 1, :),; north = (:, grid.Ny, :),; bottom = (:, :, 1),; top = (:, :, grid.Nz)); ```. Then it complains about this line in the two `JLD2OutputWriter`. These lines need to be removed,. ```; field_slicer = field_slicer; ```. Finally, `AverageField` needs to be updated, as follows:. ```; B = Field(Average(model.tracers.b, dims=1)); C = Field(Average(model.tracers.c, dims=1)); U = Field(Average(model.velocities.u, dims=1)); V = Field(Average(model.velocities.v, dims=1)); W = Field(Average(model.velocities.w, dims=1)); ```. Things seem to be running now. I created a PR in #2545 and will close this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2543#issuecomment-1122736117:98,update,updated,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2543#issuecomment-1122736117,2,['update'],['updated']
Deployability,"Thanks @glwagner and I have been using #1024 a whole lot in developing `fjp/flat-for-shallow-water-model`. So far the example above works for the grid part and the model part. When I run a solution I get `NaN` after the first time step when one of the fields is `Flat`. I suspect this is because the derivatives might need to be modified to account for a `Flat` dimension. I hope to know more tomorrow. Update: I have found that the tendencies for height work fine. The problems are with the advection terms in the momentum equations as well as the gradient of the height field. Each of these terms, if pressent, will cause a `NaNs`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1499#issuecomment-804528710:403,Update,Update,403,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1499#issuecomment-804528710,1,['Update'],['Update']
Deployability,"Thanks @glwagner for the suggestion. Yes, I agree that would be much easier as there is no need to differentiate or integrate. Will think about that. We are specifying a `BackgroundField`, so given the fact that the buoyancy is calculated at every time step and every grid point, then having it precalculated would make more sense. . It occurs to me that if we solve for the buoyancy using array operators at the beginning, then we can specify the`BackgroundField` using arrays. Should that work? I don't know if I have seen how to specify `BackgroundField` as an array but I presume it's like how the turbulence example specifies the initial conditions in terms of an array?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1826#issuecomment-874994583:116,integrat,integrate,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1826#issuecomment-874994583,1,['integrat'],['integrate']
Deployability,"Thanks @glwagner! We haven't been using background velocities in our setups, so won't have as much to say on that yet. But we'll continue testing the background tracer fluxes. @samlewin, are you using background shear in addition to background tracer fields in your configurations, or is the shear just in your initial conditions? This PR might be relevant.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2276121204:266,configurat,configurations,266,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2276121204,1,['configurat'],['configurations']
Deployability,"Thanks @kburns for the reference. . Nicholas Kevlahan and I are collaborating on a problem now and we have used his wavelet based model. I agree that it does do a lot of things very well. It deals with topography and coastlines using Brinkman penalization, which is quite distinct from our immersed boundary method. I don't know how he preserves positivity in the height field but I will find out. **Update:** their model uses a vertical coordiante in the vertical to avoid layer collapse. Also, in the multi-layer case they use a discretization of vertical diffusion, to also prevent layer collapse (depths going to zero).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1116318993:400,Update,Update,400,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1116318993,1,['Update'],['Update']
Deployability,"Thanks @navidcy for the reply. This is helpful. This means that when we integrate the zonal momentum equation over a volume (as part of deriving the finite volume method), we get the vertical integral in the `z` derivative and hence why we get the flux at the top minus the flux at the bottom. These should be averages over each horizontal cell and we also divide by a length scale. I presume that's why the MITgcm divides by the depth of the top cell. Interesting that they seem to use a body force but it should result in the same dynamics I suppose.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-2135395047:72,integrat,integrate,72,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-2135395047,1,['integrat'],['integrate']
Deployability,"Thanks @simone-silvestri for the update and all the work that came along with it. If we wanted to solve the shallow water model equations in vector invariant form, can we do this as a subset of `HydrostaticModel` since we could use pretty much all of what's there to put the model together? I'm happy to discuss more when you have time.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1067969115:33,update,update,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1067969115,1,['update'],['update']
Deployability,"Thanks for all your help. I have solved the problem following glwagner's previous suggestion. . I saved glwagner's Manifest.toml to a txt file, then use the following Julia script to install the pkgs of the exactly same version. ```; lines=readlines(""pkgs_required.txt""); Num_package=size(lines)[1]; for i in 1:Num_package; B=split(lines[i]); if size(B)[1]==3; B2=string(B[2]); B3=string(split(B[3][2:end],""+"")[1]); Pkg.add(name=B2,version=B3); Pkg.pin(name=B2,version=B3); end; end",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-826542477:183,install,install,183,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-826542477,1,['install'],['install']
Deployability,"Thanks for bringing these up! This stuff certainly needs some work, and we should probably make it clear what's e.g. a free parameter. > I see a few problems:; > * `f` is not a property of a planet. Agreed. Perhaps now that we're also thinking of channel models on a _β_-plane, we should also build a ""rotation"" abstraction to choose between _f_-plane, _β_-plane, and Coriolis force (possible with cosine term). > * 'Model configuration' is an obscure name for turbulent or molecular transport coefficients. Yes. This should be addressed by incorporating a `TurbulentDiffusivity` struct like the one you proposed in #120. I agree with John that when we do this, isotropic and anisotropic diffusion should be options. > * A reference density is not a parameter in an equation of state.; Hmmm, but if ρ₀ is needed to calculate ρ then isn't it a parameter of the EOS?. Sounds like this issue is worth discussing and strategizing about. We could maybe get some ideas and inspiration from how CliMA.jl is handling parameters?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/217#issuecomment-491642405:423,configurat,configuration,423,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/217#issuecomment-491642405,1,['configurat'],['configuration']
Deployability,Thanks for the explanation @simone-silvestri!. @glwagner Yeah I think this issue started off as a question (thus the title) then turned into more of a UI suggestion. I've updated the title to reflect this. Totally support making `grid` a positional argument. I wonder if making it a required argument would that help with #3800 by making sure users won't forget to pass the grid to set the float type.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3857#issuecomment-2435301292:171,update,updated,171,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3857#issuecomment-2435301292,1,['update'],['updated']
Deployability,"Thanks for the feedback @glwagner and @tomchor . I will respond soon but I have an updated I wanted to share. I did a simulation in each for 100 time steps a few times each. I found sometimes the second simulation was way faster than the first. For different advection schemes I found, to my surprise, they do scale differently. ```; scheme ratio; ====== ===; C2 1.7; U3 2.4; C4 3; U5 2.4; W5 3.4; ```. I would not call these offical benchmarks but more back of the envelop calculations (between friends). But these numbers are, mostly, around 3, which is what I expected. . For fun, I will do the same thing with GPUs (and will find out if my new code runs on a GPU). I guess one mystery is why is it that my actual simulation ran so slowly? I will try it again for 2 hours instead of 2 days and see how the scalings look.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1564#issuecomment-816767845:83,update,updated,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1564#issuecomment-816767845,2,['update'],['updated']
Deployability,Thanks for the heads up @vchuravy and @maleadt! Will remove the old deployment key from https://github.com/CliMA/OceananigansDocumentation and generate a new one (that'll actually stay a secret).,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1225:68,deploy,deployment,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1225,1,['deploy'],['deployment']
Deployability,"Thanks for the reminder @navidcy. I don't think the .md's in Docs are automatically updated. I will update https://github.com/CliMA/Oceananigans.jl/blob/master/docs/src/appendix/benchmarks.md with the latest benchmark results. . On a second note, do we want to show the benchmark results with WENO5 or with no specified advection scheme?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877445139:84,update,updated,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877445139,2,['update'],"['update', 'updated']"
Deployability,Thanks for the suggest! Let me update it and see if the issue is fixed.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3560#issuecomment-2077110867:31,update,update,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3560#issuecomment-2077110867,1,['update'],['update']
Deployability,"Thanks for working on this @navidcy! I'll try to `git merge master` which should fix some tests and then I'll look at fixing the other failures. > A question that comes about is that after this PR: do we test *only* on v1.6? If so, how are we making sure that code works smooth on v1.5? Should we test on both? Should we bump the julia compat requirement in the `Project.toml` file to `^1.6`?. Ideally yeah we would test on both 1.5 and 1.6 but I don't think we have the CI resources to do so :(. We could set up some GitHub Actions pipelines to test Mac and Windows with 1.5 and only run a subset of the tests so it doesn't massively slow down CI. It wouldn't be comprehensive but we'd get more coverage. Not sure if we'll have to only support Julia 1.6+ only soon, but that would save us from having to test on 1.5. We might not want to jump ship to 1.6 too soon though. I experienced longer compilation times when using Julia 1.6 in developing PR #1522 so I had to switch back to 1.5. Maybe I just had a weird setup though, I should investigate more carefully. I could be the only one who's had issues... Might be good to beta test 1.6 a little bit before switching completely.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-821192104:533,pipeline,pipelines,533,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-821192104,1,['pipeline'],['pipelines']
Deployability,"Thanks so much @jipolanco ! And thanks for the beautiful package. > For now, PencilArrays allows broadcasting together PencilArrays and regular Arrays, but I'm thinking this is not a good idea since the behaviour is non-intuitive and can lead to precisely this kind of issue. Right! I think that's a conservative design choice and well-justified if there aren't important use cases for PencilArrays / Arrays broadcasting... It looks like the relevant docs are https://jipolanco.github.io/PencilArrays.jl/stable/Pencils/#Dimension-permutations. and based on. https://github.com/CliMA/Oceananigans.jl/blob/6ceeb012f1432bf936edd977fa1390dc694a0adc/src/Distributed/distributed_fft_based_poisson_solver.jl#L33-L44. we want something like. ```julia; transform_space_permutation = Permutation(2, 1, 3); λx_pencil = Pencil(size(global_grid), comm; permute = transform_space_permutation); # somehow set λx_pencil data to λx; ```. Reading through the docs also suggests to me that we need tighter integration with PencilArrays overall (eg we have our own notion of grids, so we may want to make these compatible with PencilArray's grids).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1102789255:987,integrat,integration,987,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1102789255,2,['integrat'],['integration']
Deployability,"Thanks! . > If you want the normal direction to be based on the true IB rather than grid fitted, then I don't have anything recent. I believe with the methods we are using, we only ever need the normal direction of the ""numerical"" or discrete IB. Actually I think we should call _that_ the ""true"" IB; if there's a continuous function from which the discrete specification is derived, maybe we can call that the ""IB generator""? Right now this ""normal"" direction is always aligned with a cardinal direction of the grid (east, west, etc...). In the future we _could_ entertain shaved cells, which would introduced IB faces with non-trivial normals (but still discrete, and calculable from the discrete representation assuming, for example, that the faces of the shaved cells are flat planes).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100160430:314,continuous,continuous,314,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100160430,1,['continuous'],['continuous']
Deployability,"Thanks!. Francis. ________________________________; From: Navid C. Constantinou ***@***.***>; Sent: Wednesday, July 7, 2021 10:24:08 PM; To: CliMA/Oceananigans.jl ***@***.***>; Cc: Francis Poulin ***@***.***>; Mention ***@***.***>; Subject: Re: [CliMA/Oceananigans.jl] Update packages for docs (#1837). One strange version jump seems to be backwards but I suspect it's because I misunderstood something. @francispoulin<https://github.com/francispoulin> you misunderstood :); the manifest here implies that EzXML is removed completely and ExprTools upgraded from 0.1.3 -> 0.1.6. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/CliMA/Oceananigans.jl/pull/1837#issuecomment-876069493>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AB63PQMZQUTVSDRG7HPTGCDTWUD4RANCNFSM477WYIEA>.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1837#issuecomment-876073665:269,Update,Update,269,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1837#issuecomment-876073665,2,"['Update', 'upgrade']","['Update', 'upgraded']"
Deployability,Thanks!. You seem to be using a very very old version of Oceananigans; v0.79.0 (from 2022).; Could you try to update to the latest version and see if the issue(s) remain?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3560#issuecomment-2076961841:110,update,update,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3560#issuecomment-2076961841,1,['update'],['update']
Deployability,"Thanks, that's helpful @jagoosw. Just one more thought... I realized after I did the testing for my previous post that the hang occurs at ""Initializing simulation..."". This implies that the problem isn't with any constructors (eg the `Field` constructor above) but rather the actual computations, probably. A big change from 0.85 (which [occurred in 0.88](https://github.com/CliMA/Oceananigans.jl/releases/tag/v0.88.0)) is the [introduction of the `KernelParameters` abstraction](https://github.com/CliMA/Oceananigans.jl/pull/3125) for offsetting indices within kernels, used here:. https://github.com/CliMA/Oceananigans.jl/blob/70536571523ad2eb71fd9a2200121eca63998ac4/src/AbstractOperations/computed_field.jl#L78. and I think other places, which @simone-silvestri can advise. `KernelParameters` extends some `KernelAbstractions` functionality in a non-trivial way I think. Maybe there are some things we can improve there:. https://github.com/CliMA/Oceananigans.jl/blob/main/src/Utils/kernel_launching.jl. Even if the issue is fixed on 1.10, I think we still ought to understand this problem better since it might come back in the future (things like this often do...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1808580651:397,release,releases,397,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1808580651,1,['release'],['releases']
Deployability,"That could work --- though I'd point out that listing the model components that can be inconsistent with one another might be more explicit. I would advocate for a ""blacklisting"" method whereby blacklisted combinations of components are listed local to the implementation of the component. For example, in `beta_plane.jl` we could add. ```julia; validate_coriolis(::BetaPlane, ::AbstractGrid{FT, TX, <:Periodic}) where {FT, TX} = # error; ```. we also need, in `hydrostatic_spherical_coriolis.jl`,. ```julia; validate_coriolis(::HydrostaticSphericalCoriolis, ::AbstractRectilinearGrid) = # error; ```. I think a warning is better than an error for `WENO5` on a curvilinear grid. That'd be a fun scheme to experiment with and we don't know ""how wrong"" it is. If the curvilinear grid is almost regular, we have reason to think it might work. In cases like these where we aren't completely, rock-solid positive that a certain model configuration is invalid I think we should also err conservative and allow such models to be constructed. . We do need to strike a balance between being helicopter parents to users, and catching common mistakes. I don't think we should get in the business of curating science --- we should just provide useful software. Specialty applications can just avoid the kwarg-based constructor so I'm not sure we should worry much about that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1453#issuecomment-796814847:929,configurat,configuration,929,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1453#issuecomment-796814847,1,['configurat'],['configuration']
Deployability,That was quick! I think we didn't rush to resolve #1377 since it's a pretty major breaking change but as long as tests pass (and people agree with the change) we should tag a release!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1386#issuecomment-782294704:175,release,release,175,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1386#issuecomment-782294704,1,['release'],['release']
Deployability,That will be great if we can update the PR to modify fewer files so that it is feasible to review.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450843362:29,update,update,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450843362,1,['update'],['update']
Deployability,"That's a good point ! Yes, we still have ""first order"" boundary conditions on wall-normal velocity components. Technically we could ""enforce"" these by ""refusing"" to update those velocities (but this isn't how the algorithm works, so we do need fill_halo_regions! for wall-normal velocity bcs).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1630#issuecomment-829571952:165,update,update,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1630#issuecomment-829571952,1,['update'],['update']
Deployability,"That's right. Purely for simplicity we launch all the tendency kernels from 1:N, though for Face-fields in Bounded directions, we only require 2:N. In fact using tendencies only from 2:N could allow an optimization where we don't need to ""enforce"" no-penetration boundary conditions. It'd be hard to achieve this optimization though because users can write things like `parent(u) .= 1` so I'm not sure we can get away with this being guaranteed correct. This has never been a problem because we simply overwrite the boundary velocity and therefore simply discard the tendency at index 1. > The problem is if we try to integrate something like a radiation condition. Can you point me to where in the code this goes down?. > On bounded topology I don't think we ever want to integrate the tendency right? But it might be more complicated to do that. I think that's right that we don't need the tendency. This has been part of the algorithm since time immemorial and back in the mists of time it was indeed more complicated than worthwhile. The complication is that KernelAbstractions assumes indices start at 1... However, we now have a way of offsetting indices in kernels via our `KernelParameters`. So it's not very hard to do this anymore. I can give it a start. If we make this change, we also want to take a step back and look at all the kernels we are launching currently to make sure everything makes sense. For example, here is a question: while we don't want to integrate the velocity tendencies on boundaries, what do we do about diagnostics? Do we want to compute vorticity on the boundary, for example, if we are computing a vorticity diagnostic? It seems simpler if we don't, that way we don't have special cases...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2388758985:618,integrat,integrate,618,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2388758985,6,['integrat'],['integrate']
Deployability,The GPU validation should be identical. You just need to ; 1. Make sure you have enough gpus and the MPI installation is cuda-aware (MPI.has_cuda() == true); 2. Switch CPU to GPU in the script. The rest of the script does not change,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-2087613955:105,install,installation,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-2087613955,1,['install'],['installation']
Deployability,"The PR isn't merged. To use the code on this PR, you have to install it at the Julia REPL by first typing `]` to enter package manager mode, and then writing:. ```julia; pkg> add Oceananigans#glw/closure-constant; ```. Once you've updated your local version of Oceananigans to use the code on this PR, you can test the source code changes that we've made.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3370#issuecomment-1801867651:61,install,install,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3370#issuecomment-1801867651,2,"['install', 'update']","['install', 'updated']"
Deployability,"The PR titles should contain all information, so ""modifying the release notes"" should really just be copy/paste only. If you find yourself modifying notes with more than copy/paste, the problem is that the PR was not correctly titled.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3147#issuecomment-1622137852:64,release,release,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3147#issuecomment-1622137852,1,['release'],['release']
Deployability,The README example uses old syntax for time-stepping a model forward and I don't think will run with #master. It needs to be updated to use the Simulation type.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/633:125,update,updated,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/633,1,['update'],['updated']
Deployability,"The `Diagnostics` docs need to be updated to use `AveragedField`:. https://clima.github.io/OceananigansDocumentation/stable/model_setup/diagnostics/. but perhaps more importantly, we should probably merge this page with `OutputWriters`:. https://clima.github.io/OceananigansDocumentation/stable/model_setup/output_writers/. We also need to add docs for `WindowedTimeAverage`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1062:34,update,updated,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1062,1,['update'],['updated']
Deployability,The `GITHUB_REPOSITORY` environment variable is used by GitHub actions. We deploy from Travis so the right environment variable is `TRAVIS_REPO_SLUG`.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/804:75,deploy,deploy,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/804,1,['deploy'],['deploy']
Deployability,"The `validation` scripts have proved useful for code development since they essentially provide convenient scientific / integration tests which would be hard or expensive to implement in CI, but which are still useful when implementing or evaluating a new feature. They also help us share knowledge and code. Yet a major problem is that the `validation` scripts are not tested and therefore most of them are broken, since they aren't updated as Oceananigans syntax changes. I was talking with @siddharthabishnu and we realized that a possible solution would be to follow the convention used by Flux's ""model-zoo"": https://github.com/FluxML/model-zoo. With this pattern, every validation ""experiment"" is a directory that includes a collection of scripts and a `Project.toml`. The `Project.toml` indicates the version of Oceananigans. If people want to upgrade the scripts + environment they can submit a PR. We'd still be informally testing the validation scripts, but hopefully this would make them more useful in the future, especially to new users. We'll have to select a handful of cases that we want to keep around in the process of transitioning to the new system.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3076:120,integrat,integration,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3076,3,"['integrat', 'update', 'upgrade']","['integration', 'updated', 'upgrade']"
Deployability,The active manifest file has dependencies that were resolved with a different julia version (1.9.2). Unexpected behavior may occur.; └ @ /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/Manifest.toml:0; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed Adapt ─────────────────────── v4.0.4; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed SentinelArrays ────────────── v1.4.5; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed Tables ────────────────────── v1.12.0; Installed FixedPointNumbers ─────────── v0.8.5; Installed GPUCompiler ───────────────── v0.26.7; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArraysCore ──────────── v1.4.3; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed StaticArrays ──────────────── v1.9.7; Installed TimerOutputs ──────────────── v0.5.24; Installed AbstractFFTs ──────────────── v1.5.0; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed OrderedCollections ────────── v1.6.3; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed UnsafeAtomicsLLVM ─────────── v0.1.5; Installed LaTeXStrings ──────────────── v1.3.1; Installed NVTX ──────────────────────── v0.3.4; Installed CEnum ─────────────────────── v0.5.0; Installed Random123 ─────────────────── v1.7.0; Installed JuliaNVTXCallbacks_jll ────── v0.2.1+0; Installed InvertedIndices ───────────── v1.3.0; Installed BFloat16s ─────────────────── v0.5.0; Inst,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472:1310,Install,Installed,1310,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472,1,['Install'],['Installed']
Deployability,"The benefit is that the user can choose to not install CUDA and just use the CPU implementation of Oceananigans, or use AMDGPU instead of CUDA. So installing Oceanigans will be faster and users on laptops without GPUs won't have to pay for the additional packages",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3481#issuecomment-1986963101:47,install,install,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3481#issuecomment-1986963101,2,['install'],"['install', 'installing']"
Deployability,"The connectivity creates a ""cartesian grid"" of ranks which informs us which ranks are spatial neighbours. ; The more general way to arrange this grid, in absence of any other information is to wrap around the ranks as if the cartesian rank grid was `Periodic`. This is enough information for parsing the rank configuration, but not enough to perform fill halo regions. ; For this, we need a grid! Only with a grid, we will know if some directions are Bounded or Periodic, so, leveraging this information we can correctly assess which boundaries need communicating or not. Philosophically speaking, architecture provides the general rank layout while the grid concretizes this information ; leveraging the topology to decide whether to perform halo passing or not. Practically speaking the implementation leverages an `inject_halo_communication_boundary_conditions` implemented here:; https://github.com/CliMA/Oceananigans.jl/blob/34a3b930e0ace7df7dc7660f9c74f52315f41da7/src/DistributedComputations/halo_communication_bcs.jl#L14; previously only the connectivity was passed to this function, while this function should require also grid information.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3328#issuecomment-1758117187:309,configurat,configuration,309,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3328#issuecomment-1758117187,1,['configurat'],['configuration']
Deployability,"The current Manifest conflicts with FFMPEG v0.4 and thus enforces it to fallback to FFMPEG v0.2.; This, in principle, is not a problem since we don't depend on FFMPEG. But as soon as we try to use Makie/GLMakie which has FFMPEG as a dependency then it is forced to use FFMPEG v0.2. FFMPEG v0.2 cannot compile on Apple’s M1/M2 chips and this creates errors and inconvenience. . I tried to enforce installing `FFMPEG@v0.4` on the current environment and this resulted in downgrade of some `jll`s. ```; ⌅ [0234f1f7] ↓ HDF5_jll v1.14.0+0 ⇒ v1.12.2+2; ⌃ [7243133f] ↓ NetCDF_jll v400.902.208+0 ⇒ v400.902.5+1; ⌅ [458c3c95] ↓ OpenSSL_jll v3.0.9+0 ⇒ v1.1.21+0; ```. Informed by that, this PR ensures that those `jll`s satisfy `FFMPEG`s dep requirements so that people with Apple M1/2 chips (like myself) can still use Oceananigans + Makie for plotting. I've been troubling with this all morning along with @glwagner and @siddharthabishnu. Not sure if this is the best solution possible, but it does work. Hopefully this is something that it will be fixed from other packages moving forward.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3161:396,install,installing,396,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3161,1,['install'],['installing']
Deployability,"The difficulty is that there's no end to useful tricks one might be able to deploy if they get a little more proficient with Julia. I'm learning new things all the time too. I'd rather put this kind of stuff in the wiki rather than putting stuff in the docs that's not really Oceananigans-specific (these things fall more in to the category ""general Julia knowledge applicable to Oceananigans""). In fact I thought we were moving towards that but it does seem like there's still some overlap between that simulation tips section and the wiki now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458718824:76,deploy,deploy,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458718824,2,['deploy'],['deploy']
Deployability,"The discussion on https://github.com/CliMA/Oceananigans.jl/discussions/3098 had me thinking about how we might allow users to access more model data within forcing or boundary condition functions. The problem we encountered in the past (especially for diffusivity fields) is that dumping _everything_ into the forcing function often caused GPU compilation to fail. That's why forcing functions only have access (for example) to velocities, tracers, and auxiliary fields:. https://github.com/CliMA/Oceananigans.jl/blob/fad81b074cc914173d1760ae4769a24841e20a83/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl#L62. https://github.com/CliMA/Oceananigans.jl/blob/fad81b074cc914173d1760ae4769a24841e20a83/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl#L74. A possible solution to this is a utility `with_auxiliary_fields` for ""rebuilding"" a model with new auxiliary fields. I think this would be relatively simple to implement, because the `auxiliary_fields` don't have any role within a model constructor. Thus we can develop something like. ```julia; model = with_auxiliary_fields(model, new_auxiliary_fields); ```. which is quite easy I think, something like... ```julia; function with_auxiliary_fields(model::NonhydrostaticModel, new_auxiliary_fields); model_properties = OrderedDict{Any, Any}(name => getproperty(model, name) for name in propertynames(model)); model_properties[:auxiliary_fields] = new_auxiliiary_fields; return NonhydrostaticModel(model_properties.values...); end; ```. Then users can run simulations with the ""updated"" model, putting any fields they like from the ""old"" model into `auxiliary_fields`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3099:1585,update,updated,1585,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3099,1,['update'],['updated']
Deployability,"The distributed doctests in `grids.md` don't run, somehow the environment fails to install?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3673#issuecomment-2280148435:83,install,install,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3673#issuecomment-2280148435,1,['install'],['install']
Deployability,The docs repo is running out of space. In an attempt to remedy that I'm trying here `forcepush = true` for deploying docs. https://juliadocs.github.io/Documenter.jl/stable/lib/public/#Documenter.deploydocs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2243:107,deploy,deploying,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2243,2,['deploy'],"['deploydocs', 'deploying']"
Deployability,"The error is. ```julia; MethodError: no method matching XFaceField(::Type{Float64}, ::RectilinearGrid{Float64, Bounded, Bounded, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, DataType}, ::FieldBoundaryConditions{BoundaryCondition{Open, ContinuousBoundaryFunction{Nothing, Center, Center, 1, var""#7#8"", Nothing, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Open, ContinuousBoundaryFunction{Nothing, Center, Center, 1, var""#7#8"", Nothing, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Value, ContinuousBoundaryFunction{Face, Nothing, Center, 1, var""#7#8"", Nothing, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Value, ContinuousBoundaryFunction{Face, Nothing, Center, 1, var""#7#8"", Nothing, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Value, ContinuousBoundaryFunction{Face, Center, Nothing, 1, var""#7#8"", Nothing, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Value, ContinuousBoundaryFunction{Face, Center, Nothing, 1, var""#7#8"", Nothing, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Flux, Nothing}}); --;   | Closest candidates are:;   | XFaceField(::AbstractArchitecture, ::Any...) at /var/lib/buildkite-agent/builds/tartarus-8/clima/oceananigans/src/Fields/field.jl:89;   | XFaceField(::AbstractGrid, ::Any...) at /var/lib/buildkite-agent/builds/tartarus-8/clima/oceananigans/src/Fields/field.jl:109;   | Stacktrace:;   | [1] VelocityFields(arch::Type, grid::RectilinearGrid{Float64, Bounded, Bounded, Bounded, Float64, Float64, Float64, OffsetVector{Float64,; <snip>; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-989356065:544,Continuous,ContinuousBoundaryFunction,544,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-989356065,6,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"The first step is to install the `buildkite-agent` utility on the local machine:. https://buildkite.com/organizations/clima/agents. Then a tag needs to be added to the `buildkite-agent.cfg` file (for example, when buildkite is installed with a system package manager the default configuration file is located at `/etc/buildkite-agent.cfg`). We use two tags (for example):. ```; tags=""queue=Oceananigans,architecture=GPU""; ```. Note that you may not be able to use a space after the comma between two tags. We also set the number of agents via the `spawn` keyword. To start the buildkite agent as a system process, type. ```; sudo systemctl start buildkite-agent; ```. To stop a buildkite agent running as a system process, type. ```; sudo systemctl stop buildkite-agent; ```. Alternatively, `buildkite-agent` can be run in the background via `tmux` or `screen`. When `buildkite-agent` is run as a system process, their status is viewed by typing. ```; sudo systemctl status buildkite-agent; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1046:21,install,install,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1046,3,"['configurat', 'install']","['configuration', 'install', 'installed']"
Deployability,"The idea here is to minimize the amount of modifications required to the parent script when model is being restarted from a checkpoint. Currently, the script might look like this when the model is being run for the first time:; ```julia; model = Model(; architecture = GPU(),; float_type = Float64,; grid = RegularCartesianGrid(size=(Nx, Ny, Nz), length=(Lx, Ly, Lz)),; coriolis = coriolis,; buoyancy = SeawaterBuoyancy(gravitational_acceleration=g_Europa),; closure = closure,; boundary_conditions = model_bcs,; forcing = forcing; ); # model = restore_from_checkpoint(path; kwargs); ```; When restarting from the checkpoint, we'll have to comment the first 9 lines and uncomment the following line. This gets annoying pretty quickly when running a large suite of experiments. So I thought it would be better to integrate the checkpoint specification with model constructor. . ```julia; model = Model(; restarter = ""/path/to/checkpoint/file"",; architecture = GPU(),; float_type = Float64,; grid = RegularCartesianGrid(size=(Nx, Ny, Nz), length=(Lx, Ly, Lz)),; coriolis = coriolis,; buoyancy = SeawaterBuoyancy(gravitational_acceleration=g_Europa),; closure = closure,; boundary_conditions = model_bcs,; forcing = forcing; ); ```; Modifications to parent script are minimized if restarting from checkpointer is integrated into model constructor. . The way I have implemented it currently, if restarter is specified in model constructor all other kwargs to `Model` are ignored. @ali-ramadhan thinks this doesn't cover all possible model specification cases. . Any thoughts on how to improve this?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/603:812,integrat,integrate,812,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/603,2,['integrat'],"['integrate', 'integrated']"
Deployability,"The installation instructions are helpful for users who have downloaded julia. However, to run examples one needs to know how to use git, and also to have a text editor. Neither of these is necessarily trivial so it might be nice both to provide some simple explanations about how to get started with running the examples, and also to link to info about text editing, IDEs, and using github.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1149:4,install,installation,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1149,1,['install'],['installation']
Deployability,"The issue was that, prior to the update the fill_halo_region! function, the test in validation/mesoscale/baroclinic_adjustment.jl , which in particular, uses the hydrostatic model with an explicit free surface, would produce different answers when run twice after several thousand timesteps. This typically happens when there is a race condition in the code and this particular one was hard to find since it occurs only after several timesteps have occurred. The reason for ""potential"" in the title of the PR is that I do not understand why this race condition exists in the first place, since I have not seen this in any other Oceananigans model, including Hydrostatic + Implicit Free Surface or the NonHydrostatic Model",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-920473363:33,update,update,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-920473363,1,['update'],['update']
Deployability,"The job is not showing up in the buildkite pipeline at all... . It should build PRs, can you try commiting again to see if it picked up?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3506#issuecomment-1997654341:43,pipeline,pipeline,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3506#issuecomment-1997654341,1,['pipeline'],['pipeline']
Deployability,The meridional velocity had the wrong sign in the vector rotation operator for switching from extrinsic to intrinsic coordinates in an `OrthogonalSphericalShellGrid`.; The test was also poorly designed (my bad) and conspired to hide the bug. This PR should fix the rotation and update the test to make sure everything is correct.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3744:278,update,update,278,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3744,1,['update'],['update']
Deployability,"The metrics across panels don't seem to be continuous for a `ConformalCubedSphereGrid`. They seem a bit iffy between non-trivial panel connections (e.g. East->North, etc). See, e.g., below. Panel 1 East -> Panel 2 West seems OK; Panel 2 West -> Panel 4 South the metrics don't seem to coincide. ```Julia; using Oceananigans; using Oceananigans.MultiRegion: getregion; using GLMakie. Nx, Ny = 5, 5; H = 3. range_with_offset(N, H, offset::Int) = (-H + 1 + offset*N):(N + H + offset*N). grid = ConformalCubedSphereGrid(panel_size = (Nx, Ny, 1), z = (0, 1), horizontal_direction_halo = H). j_index = 2; i_index = Nx+1 - j_index. fig = Figure(resolution=(2200, 600), fontsize=30); ax = Axis(fig[1, 1]); lines!(ax, range_with_offset(Nx, H, 0), parent(getregion(grid, 1).Δxᶜᶜᵃ)[:, j_index+H], linewidth=4, color = (:green, 0.9), label=""panel 1""); lines!(ax, range_with_offset(Nx, H, 1), parent(getregion(grid, 2).Δxᶜᶜᵃ)[:, j_index+H], linewidth=8, color = (:red, 0.5), label=""panel 2""); lines!(ax, range_with_offset(Ny, H, 2), parent(getregion(grid, 4).Δyᶜᶜᵃ)[i_index+H, :], linewidth=4, color = (:blue, 0.5), label=""panel 4""); vlines!(ax, [1, Nx+1, 2Nx+1, 3Nx+1], linewidth=8, color=(:black, 0.3)); fig[1, 2] = Legend(fig, ax, framevisible = false); fig; save(""metrictest.png"", fig); ```. ![metrictest](https://github.com/CliMA/Oceananigans.jl/assets/7112768/9ed5be14-05b9-4f83-81f5-2d92def37ff5). (thanks to @simone-silvestri)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3254:43,continuous,continuous,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3254,1,['continuous'],['continuous']
Deployability,"The movies don't play for me. But it seems like a vertically-integrated component (a constant) is missing from the hydrostatic pressure anomaly in the case of a vertically-periodic domain?. https://github.com/CliMA/Oceananigans.jl/blob/e16cdc6cfb67703df9e29368017868331f68b1c0/src/Models/NonhydrostaticModels/update_hydrostatic_pressure.jl#L12-L20. Actually, maybe it's the other way around -- the vertically-integrated component needs to be subtracted when the domain is vertically periodic? This is effectively what occurs here for example:. https://github.com/CliMA/Oceananigans.jl/blob/e16cdc6cfb67703df9e29368017868331f68b1c0/src/Solvers/fft_based_poisson_solver.jl#L111. However this is not enforced for the hydrostatic pressure. The tridiagonal solvers are also incorrect for vertically-periodic domains, I think (well, now that we have x- and y- tridiagonal solvers I believe they are also incorrect for x- and y- periodic if using an x-tridiagonal or y-tridiagonal solver). Either way it does seem like the simplest solution is to eliminate the pressure decomposition. Interested what @simone-silvestri and @xkykai think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3290#issuecomment-1734536074:61,integrat,integrated,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3290#issuecomment-1734536074,4,['integrat'],['integrated']
Deployability,"The objective of this PR is to more clearly and quickly advertise the setting up of Oceananigans models in more than one configuration. We currently have one ""quickstart"", which sets up `NonhydrostaticModel` to do decaying turbulence. I propose that we add two more for `HydrostaticFreeSurfaceModel`: a rectangular configuration (say baroclinic adjustment) and a spherical configuration, maybe with bathymetry. I think we should also change defaults to grease the wheels a bit. So this PR will change the free surface to split explicit. I also think we should use WENO advection schemes and increase the default halo size to (4, 4, 4) so that 5th order WENO works on immersed boundary grid. Basically, I think the default should be useful: second-order advection with nothing closure is not useful. . I'd also like to add the quick start setups to the docs, in addition to the README. A few more miscellaneous ideas:. - A bulleted list of the examples with a short description of what each example demonstrates (so that one does not have to wade through all of them to find what they are looking for); - A new page in the docs that summarizes the ""major capabilities"" of each model. More docs refactoring is ultimately needed but I think this is a good start. Closes #3289",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3308:121,configurat,configuration,121,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3308,3,['configurat'],['configuration']
Deployability,"The problem is that I am developing on my mac that requires an MPI downgrade to run, so I update the Manifest with julia 1.7 and that is not compatible with the CI julia. I ll revert it back. I think the viscosity can be added also here while we're at it, but also I wanted to ask how do we add bathymetry. If we add it as a pressure term in the momentum equations or as an additional advection term in the continuity equation as such. https://capture.dropbox.com/LxsRg26SQzFKu4lb. No matter what I try, the bathymetry seems to make the 1/4 degree simulation with one layer unstable (maybe I have implemented it wrong). Another point to clarify is the tracer transport. The model right now (and before) was/is evolving directly the tracer, should we switch to evolving the thickness integrated tracer (`ch`) or stick to `c`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1124216248:90,update,update,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1124216248,2,"['integrat', 'update']","['integrated', 'update']"
Deployability,"The problem is this iteration:. ```julia; [ Info: Iter: 32, time: 300 ms , u-avg: 2.5442761423093008, window_start_time: 0.28, window_start_iteration: 30, previous_collection_time: 0.3, fetch_operand: true, interval: 0.03, previous_interval_stop_time: 0.27, collecting: true; ```. We should have `collecting: false`. That means `end_of_window`. https://github.com/CliMA/Oceananigans.jl/blob/406eb9c5c7a9fc86947747116128c8c1ba4c93d4/src/OutputWriters/windowed_time_average.jl#L270. spuriously returns `false`. https://github.com/CliMA/Oceananigans.jl/blob/406eb9c5c7a9fc86947747116128c8c1ba4c93d4/src/OutputWriters/windowed_time_average.jl#L93. So we want to look at `model.clock.time` and `sch.previous_interval_stop_time + sch.interval`. It does seem probable the issue is roundoff error. Probably `AveragedTimeInterval` needs to be updated to align more with the (new) criteria currently being used for `TimeInterval` eg we need a similar criteria as used for `next_actuation_time`:. https://github.com/CliMA/Oceananigans.jl/blob/406eb9c5c7a9fc86947747116128c8c1ba4c93d4/src/Utils/schedules.jl#L56-L61. Would be helpful to have a test too.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264548157:834,update,updated,834,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264548157,1,['update'],['updated']
Deployability,The relevant release of CUDA: https://github.com/JuliaGPU/CUDA.jl/releases/tag/v4.1.1,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3402#issuecomment-1854102445:13,release,release,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3402#issuecomment-1854102445,2,['release'],"['release', 'releases']"
Deployability,"The typical example for this should be a linear bottom drag, e.g., for `u` a condition `- μ u`. Additionally, the `FieldBoundaryConditions` [docstring](https://github.com/CliMA/Oceananigans.jl/blob/42b2130b0945956632624a17b4d2d28631e1eee4/src/BoundaryConditions/field_boundary_conditions.jl#L103-L128) needs some update to include the `immersed` kwarg. cc @txs156, @glwagner",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2631:313,update,update,313,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2631,1,['update'],['update']
Deployability,"The way I implemented it, the matrix ""constructors"" are saved in the solver without the variable diagonal term. Basically the constructors include all the terms except for the term that varies with the time step which is saved in `solver.diagonal`. ; i.e. the `Dᵢⱼₖ` in; ```; Axᵢ₊₁ ηᵢ₊₁ + Axᵢ ηᵢ₋₁ + Ayⱼ₊₁ ηⱼ₊₁ + Ayⱼ ηⱼ₋₁ + Azₖ₊₁ ηₖ₊₁ + Azₖ ηⱼ₋₁ ; - 2 ( Axᵢ₊₁ + Axᵢ + Ayⱼ₊₁ + Ayⱼ + Azₖ₊₁ + Azₖ ) ηᵢⱼₖ ; + ( Cᵢⱼₖ + Dᵢⱼₖ/Δt^2 ) ηᵢⱼₖ = b; ```. Every time that the time step changes this is the operation that is performed:; ```; constructors = deepcopy(solver.matrix_constructors); M = prod(solver.problem_size); update_diag!(constructors, arch, M, M, solver.diagonal, Δt, 0); solver.matrix = arch_sparse_matrix(arch, constructors) ; ```. So the matrix is constructed from a copy of the updated constructors. In this way there is no need to subtract anything to the diagonal because `solver.matrix_constructors` does not include the diagonal term. . `update_diag!` adds `Dᵢⱼₖ/Δt^2` to the diagonal elements. . If you want to do the something analogous with the linear operation, remove the time dependent term from it. Then add it separately with `update_diag!` every time the time step changes. Of course you want to make sure that you have elements in your diagonal, non trivial if `Cᵢⱼₖ` because a sparse matrix removes 0 elements. check out this function ; `ensure_diagonal_elements_are_present!(sparse_matrix)`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1179415403:784,update,updated,784,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1179415403,1,['update'],['updated']
Deployability,"The xz and yz components of stress (called `viscous_flux_uz` and `viscous_flux_vz` in the code) are explicitly elided in the presence of an immersed boundary. For examle:. https://github.com/CliMA/Oceananigans.jl/blob/55500496bc76e5870a0e455d1dda059793e827d3/src/ImmersedBoundaries/grid_fitted_immersed_boundary.jl#L59. where. https://github.com/CliMA/Oceananigans.jl/blob/55500496bc76e5870a0e455d1dda059793e827d3/src/ImmersedBoundaries/grid_fitted_immersed_boundary.jl#L45. Since we can prescribe stresses / fluxes explicitly for grid fitted schemes (in principle --- its not implemented yet) I don't think we need to worry about errors in prescribed boundary fluxes. This issue may need to be revisited for other immersed boundary methods if they make approximations there. EDIT after I wrote this I also realized that maybe I don't understand what the boundary integrated stress is here. With a viscosity of 0, shouldn't the integrated stress be zero as well? Or perhaps this is the integrated strain?. Either way I think the simplest strategy for grid fitted boundaries (and relatives like partial cells and shaved cells) is to simply ""drop in"" the relevant prescribed flux where necessary.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866295499:864,integrat,integrated,864,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866295499,6,['integrat'],['integrated']
Deployability,"There are two things at play here. First, there is a refactoring of the equation set to allow for a generalized vertical coordinate. This actually involves rewriting the equations. To merge that generalization, I think we would also like to see the new equations that are being solved written up in the docs. When the equations are generalized, this would also involve implementing a new abstraction for the vertical coordinate, along with a `vertical_coordinate = ZVerticalCoordinate()` default, which preserves existing behavior. The second PR should then implement a `ZStarVerticalCoordinate()` (other better names are fine too). So to me this feels like we need two PRs, one with docs update and API design, and then a second with z* implementation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3411#issuecomment-1867969677:689,update,update,689,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3411#issuecomment-1867969677,1,['update'],['update']
Deployability,"There have been 78 commits since the last release so I thought it would be good to put out a checkpoint release. Happy to close this PR if people think this is not necessary. Release notes could say:. Checkpoint release including very experimental support for curvilinear grids, a vertically-stretched rectilinear grid, and a preconditioned conjugate-gradient solver. (or nothing at all). There should be no breaking changes.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1388:42,release,release,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1388,4,"['Release', 'release']","['Release', 'release']"
Deployability,"There is an error in `initailize-gpu-environment`, copied below, which I don't believe comes from this change. Can someone reset the tests? I don't believe I have the authority to do that. ```; ERROR: Unable to automatically install 'CUDNN' from '/data5/glwagner/.julia-2937/packages/CUDA/mVgLI/Artifacts.toml';  ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866783261:225,install,install,225,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1759#issuecomment-866783261,1,['install'],['install']
Deployability,"There is definitely a wrong assumption somewhere in this pipeline. Maybe we can focus on this:. > since it try to access the indexes (4:8, 4:8, 4:5) rather than (4:8, 4:8, 1:0). First of all I think this means that we are using `with_halo=true`? Just want to confirm that. Second there is a typo right @josuemtzmo ? You meant to say that the indices should be `(4:8, 4:8, 1:1)`?. This is maybe where the incorrect assumption is. If we need `(4:8, 4:8, 1:1)`, then we are looking for the indices of the underlying _view_ --- but not the indices of the Field. Because, the indices of `eta` are definitely `(4:8, 4:8, 4:5)`. That's the whole point of the windowed fields abstraction is to be able to properly locate a field in the 3D index space. `eta` is the free surface, so it's indices are at the top of the domain. @josuemtzmo can you show the whole stack trace of your error so we can see where the indexing issue comes in?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3260#issuecomment-2013010886:57,pipeline,pipeline,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3260#issuecomment-2013010886,1,['pipeline'],['pipeline']
Deployability,There is something a little odd that we are using `2024_10_09`:. https://github.com/CliMA/Oceananigans.jl/blob/6c40d7e225c2127051b2703b9c62a8b18260e3a5/.buildkite/distributed/pipeline.yml#L4. But ClimaAtmos is on `2024_10_08` if I am reading this right. https://github.com/CliMA/ClimaAtmos.jl/blob/a0e8612fd602ff33349e46ed34875ed8af45fd3a/.buildkite/pipeline.yml#L4,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2455829690:175,pipeline,pipeline,175,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2455829690,2,['pipeline'],['pipeline']
Deployability,"There is still a problem. This time with the vector size:. > ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI ~/.julia/packages/MPI/08SPr/deps/deps.jl:15; [NVBLAS] No Gpu available; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [ Info: Oceananigans will use 16 threads; ERROR: LoadError: DimensionMismatch(""arrays could not be broadcast to a common size; got a dimension with lengths 129 and 128""); Stacktrace:; [1] _bcs1; @ ./broadcast.jl:501 [inlined]; [2] _bcs (repeats 3 times); @ ./broadcast.jl:495 [inlined]; [3] broadcast_shape; @ ./broadcast.jl:489 [inlined]; [4] combine_axes; @ ./broadcast.jl:484 [inlined]; [5] instantiate; @ ./broadcast.jl:266 [inlined]; [6] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(*), Tuple{Array{Float64, 3}, Array{Float64, 3}}}); @ Base.Broadcast ./broadcast.jl:883; [7] top-level scope; @ /lustre/scratch5/.mdt0/fspereira/OCEANANIGANS/test/case13/c16_128_128m.jl:200. Also, shouldn't we set v (last line below, I added the commented v's):. `Random.seed!(1414). T = model.tracers.T; u, v, w = model.velocities. x, y, z = nodes(T, reshape=true); Lz = model.grid.Lz. shape = @. z / Lz * (1 + z / Lz); ΞT = randn(size(T)...) .* shape; Ξu = randn(size(u)...) .* shape; #Ξv = randn(size(v)...) .* shape; Ξw = randn(size(w)...) .* shape. Tᵢ = @. 20 + dTdz * z + dTdz * Lz * 1e-6 * ΞT; uᵢ = @. sqrt(abs(Qᵘ)) * 1e-3 * Ξu; #vᵢ = @. sqrt(abs(Qᵘ)) * 1e-3 * Ξv; wᵢ = @. sqrt(abs(Qᵘ)) * 1e-3 * Ξw. #set!(model, u=uᵢ, v=vᵢ, w=wᵢ, T=Tᵢ, S=35); set!(model, u=uᵢ, w=wᵢ, T=Tᵢ, S=35)`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268613743:199,Configurat,Configuration,199,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1268613743,1,['Configurat'],['Configuration']
Deployability,There is the dreaded exponentiation by `Int64`:. https://github.com/CliMA/Oceananigans.jl/blob/4e9e5b79407e287005aa28d03d2fe3ffd37da194/src/Forcings/relaxation.jl#L126-L128. though this shouldn't affect CPU. `Relaxation` uses `ContinuousForcing` so we should probably look into whether the problem comes from that code. It does seem possible there were changes after upgrading to 1.6.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875599947:227,Continuous,ContinuousForcing,227,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875599947,1,['Continuous'],['ContinuousForcing']
Deployability,There must be a simple bug to fix. I remember the simulation was quite stable. I think it has to do with how bathymetry is defined in the code. A simple configuration might snoop out the issue,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3486#issuecomment-1973873627:153,configurat,configuration,153,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3486#issuecomment-1973873627,2,['configurat'],['configuration']
Deployability,There was a bug in some recent updates to KernelAbstractions.jl that caused Enzyme to break on broadcasting arrays in Oceananigans. This PR includes a test to make sure this bug doesn't occur again.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598:31,update,updates,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598,1,['update'],['updates']
Deployability,"There was a bug in the earlier v4 releases so Oceananigans won't work with them (this has come up as CUDAv4.0 is the final version compatible with CUDA 10.2). ```julia; julia> using Oceananigans; ┌ Warning: The NVIDIA driver on this system only supports up to CUDA 10.2.0.; │ For performance reasons, it is recommended to upgrade to a driver that supports CUDA 11.2 or higher.; └ @ CUDA ~/.julia/packages/CUDA/ZdCxS/src/initialization.jl:71; julia> grid = RectilinearGrid(GPU(); size = (128, 128, 128), extent = (1, 1, 1)); mo128×128×128 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0078125; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0078125; └── Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=0.0078125. julia> model = NonhydrostaticModel(; grid); ERROR: UndefVarError: `CUDABackend` not defined; Stacktrace:; [1] getproperty; @ ./Base.jl:31 [inlined]; [2] device(#unused#::GPU); @ Oceananigans.Architectures ~/.julia/packages/Oceananigans/f5Cpw/src/Architectures.jl:39; [3] launch!(::GPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, ::Oceananigans.Utils.KernelParameters{:xy, (0, 0)}, ::typeof(Oceananigans.BoundaryConditions._fill_bottom_and_top_halo!), ::Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}}, ::Vararg{Any}; include_right_boundaries::Bool, r",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3402:34,release,releases,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3402,2,"['release', 'upgrade']","['releases', 'upgrade']"
Deployability,"There's two challenges. One is refactoring `Reduction` to be more general. `cumsum!` has a diffeerent pattern, the dimensionality is not reduced for the output and it has a slightly different syntax. But I figured that stuff out here:. https://github.com/CliMA/Oceananigans.jl/pull/3590. The next challenge is to figure out how to integrate downwards rather than up; this is a little trickier I think because we may need an abstraction that reverses indices or something. There is also the metric part but that's kind of trivial, its the same thing as with `Integral` or `Average`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3582#issuecomment-2098993956:331,integrat,integrate,331,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3582#issuecomment-2098993956,1,['integrat'],['integrate']
Deployability,"These resutls are great @whitleyv , well done! A few thoughts. First, if `c` is the concentration of a tracer it should be non-negative. If you are picking it to be a `sine` I might suggest having `1 + sin` just to avoid negative values. That being said, I don't think it's going to have any impact on the results but might be worth trying. Second, are there any boundary conditions imposed on the tracer at the immersed boundary? I remember there was a discussion but I don't remember the conclusion. Sorry. Third, what exactly is computed in the last plot fo the integrated stress tensor? Also, have you computed these for the nonIBM case to see what the real wall does?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866293419:565,integrat,integrated,565,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-866293419,1,['integrat'],['integrated']
Deployability,"Thinking about this more, I think it would make sense to make an even more radical change. I think we should add `diagnostics`, `output_writers`, and `clock` to `Simulation`. . The `time_step!` function then performs a single time-step, whereas to run a simulation one should write `run!(simulation)`, which handles diagnostics, output writing, adaptive time-stepping, and logging in an integrated way. This orthogonalizes the design a bit: `diagnostics` and `output_writers` are not really aspects of a ""model"", if we use a narrow interpretation of a model as a discrete representation of a physical system. A single physical system might conceivably be associated with a wide range of disparate diagnostics and output, depending on what kind of science is being done. I think scripts become clearer. The user writes. ```julia; model = Model(; model_parameters...). simulation = Simulation(model; simulation_parameters...). simulation.diagnostics[:diag] = # something. run!(simulation); ```. As an example to illustrate why `Simulation` is orthogonal to `Model`, here's a possible clear and coherent usage of this separation:. ```julia; model = Model(; model_parameters...). set!(model; first_interesting_initial_condition...). first_simulation = Simulation(model, first_simulation_parameters...); first_simulation[:diag] = diag_specific_to_first_simulation; run!(first_simulation). set!(model; second_interesting_initial_condition...) # same physical model, but different starting initial condition... no new memory allocated, no recompilation --- fast. second_simulation = Simulation(model, second_simulation_parameters...); second_simulation[:diag] = diag_specific_to_second_simulation; run!(second_simulation); ```. We can use `run!(simulation, time_steps=nsteps)` to allow hand-coded user loops that achieve a functionality similar to what we have now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/447#issuecomment-542294442:387,integrat,integrated,387,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/447#issuecomment-542294442,1,['integrat'],['integrated']
Deployability,"This PR (part 3/3) upgrades the field abstraction so fields store their own boundary conditions. This simplifies the model boundary condition hierarchy and generalizes the field and boundary conditions abstractions so they can be used for a compressible model (and any other model we come up with in the future). All future fields will have boundary conditions so PRs like #601 won't be necessary again. The only change in user interface is that you pass a named tuple to the model constructor now instead of an instance of `SolutionBoundaryConditions`. This also works for LES diffusivities so the amount of convoluted scripting gymnastics is much reduced (see test from #601). Setting a diffusivity BC is now almost as easy as a tracer BC. ```julia; grid = RegularCartesianGrid(FT, size=(16, 16, 16), length=(1, 1, 1)). buoyancy_bcs = TracerBoundaryConditions(grid, bottom=BoundaryCondition(Gradient, bz)); κₑ_bcs = DiffusivityBoundaryConditions(grid, bottom=BoundaryCondition(Value, κ₀)); model_bcs = (b=buoyancy_bcs, κₑ=(b=κₑ_bcs,)). model = IncompressibleModel(; grid=grid, architecture=arch, float_type=FT, tracers=:b, buoyancy=BuoyancyTracer(),; closure=AnisotropicMinimumDissipation(), boundary_conditions=model_bcs; ); ```. Internally: No surprise, this change ended up being pretty invasive. But note that we now have a more flexible and easier to use package with fewer lines of code!. I'm happy to discuss and iterate over the choices that were made in this PR. But glad that I was able to make these changes. Development of the compressible model can continue based on this branch. Changes:; 1. Fields has a new property: `field.boundary_conditions`. 2. Better pretty printing for fields:; ```; Field located at (Cell, Cell, Cell); ├── data: OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}}, size: (18, 18, 18); ├── grid: RegularCartesianGrid{Float64, Periodic, Periodic, Bounded}(Nx=16, Ny=16, Nz=16); └── boundary conditions: x=(west=Periodic, east=Periodic), y=(south=Periodic, nor",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/631:19,upgrade,upgrades,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/631,1,['upgrade'],['upgrades']
Deployability,"This PR adapts the analytical pressure solver test to an explicit test for second-order convergence of the pressure solver in all configurations. The triply periodic solver currently throws an error if we try to construct it, so I'm skipping that test.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/704:130,configurat,configurations,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/704,1,['configurat'],['configurations']
Deployability,"This PR adds a `FieldSlicer` that slices fields on indices prior to output. This PR is a work in progress because we at least need unit tests:. - [x] add unit tests for `FieldSlicer`. It probably also make sense to test integration with both `JLD2OutputWriter` and `WindowedTimeAverage`:. - [x] add tests for integration with `JLD2OutputWriter` and `WindowedTimeAverage`. In the future, we would like to permit slicing at physical locations (rather than indices). This can be accomodated in the constructor for `FieldSlicer` in various ways (outside the scope of this PR). We would also like the ability to interpolate to locations. For this we want something like `InterpolatingFieldSlicer`. Comments and suggestions for the API are welcome.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/932:220,integrat,integration,220,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/932,2,['integrat'],['integration']
Deployability,"This PR adds a `TurbulenceClosures` module to `Oceananigans`. At the moment nothing in the `Oceananigans` algorithm is touched --- the module is simply loaded and exported. I suggest that we keep it this way, given the size of this PR, and work on integrating the code into `Oceananigans` in a future PR. A simple incremental test in that future PR will be to replace the diffusive operators with the ones here and ensure that the regression tests still pass. Ultimately `TurbulenceClosures` will provide code for all the different diffusive terms we want to provide for `Oceananigans` users. The current design is that a 'closure' must provide a diffusive flux divergence term for `Oceananigans`. These diffusive flux terms are. * `∇_κ_∇ϕ(i, j, k, grid, ϕ, closure, u, v, w, T, S)` for a scalar `ϕ`; * `∂ⱼ_2ν_Σ₁ⱼ(i, j, k, grid, closure, u, v, w, T, S)` for x momentum; * `∂ⱼ_2ν_Σ₂ⱼ(i, j, k, grid, closure, u, v, w, T, S)` for y momentum; * `∂ⱼ_2ν_Σ₃ⱼ(i, j, k, grid, closure, u, v, w, T, S)` for z momentum. This will have to be generalized if we wish to provide more sophisticated turbulence closures with, for example, backscatter. I am open to changing the name of the diffusive flux divergences. This PR introduces the closures:. * `ConstantSmagorinsky` (with no buoyancy modification --- yet); * `ConstantIsotropicDiffusivity`; * `DirectionalDiffusivity` (with different horizontal and vertical diffusivities --- for lack of a better term). There is also an abstraction --- we have `ScalarDiffusivity`s and `TensorDiffusivity`s. The `DirectionalDiffusivity` is an example of a tensor diffusivity. I would like to add docs before merging. Please review the code and let me know what can be improved while I work on docs, and suggest improvements to the doc strings. There are some unit tests included in this PR. Please take a look and suggest new ones. There is significant notation associated with this PR. I don't think we need to finalize the notation here, but comments are welcome. This PR m",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/234:248,integrat,integrating,248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/234,1,['integrat'],['integrating']
Deployability,"This PR adds a benchmarking script that times how long a single time step takes on the CPU and GPU using `Float32` and `Float64` for various model resolutions. It uses TimerOutputs.jl to nicely format the benchmarks. It also prints out CPU->GPU speedups and Float64->Float32 ""speedups"". It only executes the GPU benchmarks if executed on a CUDA-enabled machine. We can later extend it to time model initialization, different parts of the time stepping, etc. Right now it only benchmarks a simple ""static ocean"" configuration so no fancy forcing functions are used, but we can extend the number of scenarios/experiments we benchmark. The time stepping and Poisson solver still takes the same amount of time whether the ocean is static or active. Resolves #67. Well, kind of. It's not clear to me how to easily incorperate this with CI in a way that doesn't involve one of us eyeballing the text output. For now we should at least run this script every time we make a change that might potentially impact performance. Example output; ```; ──────────────────────────────────────────────────────────────────────────────────────────────────; Oceananigans.jl benchmarks Time Allocations; ────────────────────── ───────────────────────; Tot / % measured: 718s / 46.6% 17.2GiB / 0.02%. Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────────────────; 256x256x256 static ocean (CPU, Float32) 10 168s 50.2% 16.8s 20.3KiB 0.73% 2.03KiB; 256x256x256 static ocean (CPU, Float64) 10 141s 42.3% 14.1s 20.3KiB 0.73% 2.03KiB; 128x128x128 static ocean (CPU, Float32) 10 12.4s 3.72% 1.24s 14.5KiB 0.52% 1.45KiB; 128x128x128 static ocean (CPU, Float64) 10 9.00s 2.69% 900ms 14.8KiB 0.54% 1.48KiB; 64x 64x 64 static ocean (CPU, Float32) 10 1.03s 0.31% 103ms 14.2KiB 0.51% 1.42KiB; 256x256x256 static ocean (GPU, Float64) 10 891ms 0.27% 89.1ms 333KiB 12.0% 33.3KiB; 256x256x256 static ocean (GPU, Float32) 10 859ms 0.26% 85.9ms 329KiB 11.9% 32",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/116:511,configurat,configuration,511,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/116,1,['configurat'],['configuration']
Deployability,This PR adds a naive fifth-order advection scheme called `UpwindBiasedFifthOrder`. This primarily interesting to see the advantages of the WENO algorithm at the same order of accuracy. ![Square_RungeKutta3_UpwindBiasedFifthOrder_N64_CFL0 50_U+1](https://user-images.githubusercontent.com/15271942/94488260-49440b00-01b0-11eb-985f-ab8aed3892ab.gif). ![Square_RungeKutta3_UpwindBiasedFifthOrder_N64_CFL0 50_U-1](https://user-images.githubusercontent.com/15271942/94488252-46491a80-01b0-11eb-92c3-23b814e44f18.gif). Still need to. - [ ] update convergence tests to include `UpwindBiasedFifthOrder`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/994:534,update,update,534,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/994,1,['update'],['update']
Deployability,"This PR adds a near-global one degree setup to `validation/near_global_lat_lon`. This is mostly @sandreza and @simone-silvestri 's work. The setup spans -75S to 75N and is implemented on a regular `LatitudeLongitudeGrid` with 1 degree horizontal resolution and 50 vertical levels. It's WIP right now partly because @sandreza is still sorting out some difficulties with including a `IsopycnalSkewSymmetricDiffusivity` closure to this setup. In addition, I'm going to update the `closure_tuples.jl` implementation because this setup may require a tuple of 5 closures. As a teaser, the file `validation/near_global_lat_lon/one_degree_setups/plot_bathymetry.jl` produces. ![image](https://user-images.githubusercontent.com/15271942/164785636-5bbf0e2d-0e0c-458e-9c92-758afbaf96d3.png). The bathymetry file is small (not much larger than few dozen long text files), so I've uploaded it directly into the repo from this PR. If we don't want to do this, I can reopen this PR with the same `.jl` files and download the bathymetry from `OceananigansArtifacts.jl` instead. I'm thinking that we should add at least two one degree setups in this PR:. 1. A ""realistic"" setup with initial conditions and surface relaxation or fluxes loaded from file (which @sandreza is working on). 2. An ""idealized"" setup that uses idealized and constant momentum and temperature forcing (perhaps with `constant_salinity=35.0`). and possibly others. Based on this experience, we can go in a similar direction with the 1/4 degree setup.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463:466,update,update,466,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463,1,['update'],['update']
Deployability,"This PR adds a new function `interpolate(field, x, y, z)` that interpolates `field` to the physical point `(x, y, z)` using trilinear interpolation. This may be used for Lagrangian particle tracking (X-Ref #511), output on custom grids, and checkpoint restoration onto a new grid. No guarantees when `(x, y, z)` lies outside the domain of the field. I think it interpolates into the halo regions and I can test for this if we think it's important (actually this might be an important case...). Worrying about out of bounds, boundary conditions, extrapolation, etc. could slow down the `interpolate` function so it assumes the input makes sense. I think it's the particle's job to stay within the domain of the field. Output on a new grid is possible via. ```julia; new_field_data = interpolate.(Ref(field), nodes(loc, new_grid, reshape=true)...); ```. or. ```julia; new_field_data = interpolate.(Ref(field), xs, ys, zs); ```. so I did not feel the need to define any new types like `InterpolatedField` or `Interpolator`. @glwagner has pointed out that when restoring onto a new grid, you may want to respect global budgets in which case `interpolate` may not be appropriate for checkpoint restoration and an `integrator` (?) of some kind might be needed to ensure conservation of field quantities (momentum, tracers) via Gaussian quadrature. Is this a problem with linear interpolation though? Seems like linear interpolation should preserve global integrals?. Resolves #975",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1090:1209,integrat,integrator,1209,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1090,1,['integrat'],['integrator']
Deployability,"This PR adds a new nonlinear equation of state, @sandreza's favorite 55-term polynomial approximation to TEOS-10 suitable for Boussinesq models as described in Roquet et al. (2014). The TEOS-10 polynomial approximation implemented in this PR has been translated into Julia from https://github.com/fabien-roquet/polyTEOS/blob/master/polyTEOS10.py (Thank you @fabien-roquet!). The Roquet et al. (2014) paper has some test/check values so I added some basic tests based on those, which pass. There are two things to figure out before merging:; 1. How to make `TEOS10` work with different float types. Right now the coefficients are defined as `const`s but then they're `Float64` by default. Perhaps it makes sense to define them as part of a `TEOS10` struct, but that will make the code a bit messier.; 2. Integrate `TEOS10` with `Oceananigans.Buoyancy` by defining `ρ′`, `thermal_expansion`, and `haline_contraction` functions. We can readily do this, just gotta convert geopotential depth `D` (which Oceananigans uses) to dbar (which `TEOS10` expects).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/731:803,Integrat,Integrate,803,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/731,1,['Integrat'],['Integrate']
Deployability,"This PR adds a property to `IncompressibleModel` called `background_fields`. `background_fields.velocities` contains background velocity fields; `background_fields.tracers` contains background tracer fields. Background fields are specified with a `NamedTuple` similar to forcing functions and boundary conditions:. ```julia; background_u(x, y, z, t) = z * sin(t). model = IncompressibleModel(grid=grid, background_fields=(u,), ...); ```. Background fields are neglected in all tendency terms _except_ the advection terms. This restricts their use, but greatly simplifies their implementation. Todo:. - [x] update physics docs to include background fields in model equations; - [x] update model setup docs; - [x] tests; - [x] update `eady_turbulence.jl` and `internal_wave.jl` example to use `background_fields`; - [x] extend implementation of `FunctionField` to take parameters and add a special constructor for background `FunctionFields`. Resolves #960",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1014:606,update,update,606,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1014,3,['update'],['update']
Deployability,"This PR adds an eddying aquaplanet validation experiment that's still a work-in-progress (early stage PR). The idea is to force a `HydrostaticFreeSurfaceModel` on a `CubedSphereGrid` with a ""tradewind-like"" zonal wind stress pattern akin to [Marshall et al. (2007)](https://journals.ametsoc.org/view/journals/atsc/64/12/2007jas2226.1.xml). This is figure 3 from the paper:. ![i1520-0469-64-12-4270-f03](https://user-images.githubusercontent.com/20099589/115593956-293a7d00-a2a3-11eb-98cd-4874b6b3d638.gif). and this is the analytic formula I'm using to mimic it:. ![image](https://user-images.githubusercontent.com/20099589/115593657-c8ab4000-a2a2-11eb-8090-b584e88b7e72.png). We integrate `τ` to obtain a streamfunction for the wind stress which we then use to diagnose the surface ; momentum fluxes on the cubed sphere. _I think I got the magnitude wrong so I fixed it with a scaling factor..._. I tried adding a lot of noise to the initial velocities but the wind stress smoothed it away. https://user-images.githubusercontent.com/20099589/115597574-6739a000-a2a7-11eb-9fd5-70ace544bef7.mp4. @christophernhill suggested adding some random noise to the wind stress as well. And we probably also need a mechanism to remove energy otherwise the wind stress keeps accelerating the fluid until the model blows up. Maybe we need some bottom drag even though we only have one vertical level?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1602:680,integrat,integrate,680,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1602,1,['integrat'],['integrate']
Deployability,"This PR adds areas, volumes, and a few product operators needed to evaluate correct Coriolis terms on curvilinear grids, following. https://mitgcm.readthedocs.io/en/latest/algorithm/algorithm.html#id8. Before merging we should discuss:. - Should I update all the Coriolis terms? (`beta_plane.jl, non_traditional_f_plane.jl`, etc?); - Are we ok using three-letter codes, even though we only plan to support horizontally-curvilinear grids (rather than vertically curvilinear grids) in the near future?; - Should we add more regression tests / evaluate existing regression tests before changing terms that are not covered?; - It's not feasible to adapt the _entire_ codebase to work on curvilinear grids right now. How should we handle throwing errors for cases that are not supported? Adding `RegularCartesianGrid` annotations in key places seems like the easiest strategy, but we should be careful not to miss any. We can perhaps add annotations to _all_ operators, and then support curvilinearity in as parsimonious fashion as possible to be conservative.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1371:248,update,update,248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1371,1,['update'],['update']
Deployability,This PR adds explicit install of required packages for each example. This is related to the discussion in #1149.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1184:22,install,install,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1184,1,['install'],['install']
Deployability,"This PR adds grid topologies: `Periodic`, `Bounded`, and `Singleton`. We should finalize our choice of named before merging. As `topology` is now a required kwarg of all grid constructors tons of refactoring was needed. It also does a bit of cleanup: `AbstractGrid` is now defined in the Grids submodule, and grids no longer have the `Tx, Ty, Tz` property (total number of grid points). Documentation should be updated before this PR is merged. Resolves #446 ; Resolves #459; Resolves #489",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/614:411,update,updated,411,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/614,1,['update'],['updated']
Deployability,"This PR adds the docs dependencies in the `docs/Project.toml` instead of them being added one-by-one via `.travis.yaml`. Furthermore:; - Adds `using Plots` in `docs/make.jl` so that precompilation statements are not captured by Literate.; - Sets `preview=true` in `deploydocs()`. This way, a preview version of what the docs will look like after merge is pushed by Documenter.; - Updates the repository's URL in the docs so that docs are deployed properly. For example, the docs failed to deploy after the recent commit 1e8704c.; .",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/753:265,deploy,deploydocs,265,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/753,4,"['Update', 'deploy']","['Updates', 'deploy', 'deploydocs', 'deployed']"
Deployability,"This PR adds third-order advection schemes, plus convergence tests for advection schemes. To do:. - [ ] Finish writing third-order momentum advection operators; ~~- [ ] Integration tests for time-stepping with different advection schemes~~; ~~- [ ] Generalize validation experiments to test third-order and fourth-order advection~~. Minor:. Should we call it `UpwindThirdOrder` or `UpwindBiasedThirdOrder` ?. As a side note, we eventually need to generalize advection schemes so that a different scheme can be applied to momentum and tracers, and possibly even to every tracer individually. This is not difficult since we have a similar pattern implemented for turbulence closures.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/936:169,Integrat,Integration,169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/936,1,['Integrat'],['Integration']
Deployability,"This PR aims to add the forced flow analytic test as a verification experiment. The test is described in section 6.1 of [Brown, Cortez, & Minion (2001)](https://doi.org/10.1006/jcph.2001.6715) and is used to test various projection methods for the incompressible Navier-Stokes equations. The reason for implementing this test is to investigate the accuracy of Oceananigans' projection (or fractional step) method following concerns brought up by @sandreza. In particular, we can test whether Oceananigans' time-stepping is indeed second-order accurate in velocity and pressure. A couple of points regarding the accuracy of projection methods for us:; 1. In the introduction to Brown et al. (2001), they heuristically suggest adding a correction term to the pressure update that is linearly proportional to the viscosity ν. To me this suggests that perhaps the accuracy of the projection method matters more at low Reynolds number. The forced flow test uses Re = 1 so it's probably in a regime where the accuracy of the projection method matters a lot.; 2. The entire paper seems to focus on the semi-implicit form of the discrete Navier-Stokes equations where diffusion is treated implicitly. It's unclear to me whether their paper matters to us since we currently treat diffusion completely explicitly. Right now the test blows up (no matter how small the time step). Not sure why. I'll have to investigate and plots things a bit. Most likely I just set things up incorrectly.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/573:766,update,update,766,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/573,1,['update'],['update']
Deployability,"This PR aims to introduce and integrate Poisson solvers for vertically stretched grids developed by @christophernhill and @maleadt. Once this is merged alongside with PR #283 we should be able to support vertically stretched grid. For PPN boundary conditions, the system is solved for by eigenvalue-eigenvector factorization via FFTs in the horizontal and we end up with `Nx*Ny` tridiagonal systems, one for each column so they can be solved in parallel. We might be able to speed up the already fast tridiagonal solve via cyclic reduction. For PNN boundary conditions, it should work if we use an FFT in the x and a DCT in the y. So far I have a working 1D solver. The two tricks that had to be made were:; 1. @christophernhill figured out that we need to stop the algorithm once a zero eigenvalue is reached. This should only occur at the last element for our tridiagonal systems.; 2. There are `Nz+1` faces in the vertical but we only keep track of the first `Nz`. The tridiagonal system needs to explicitly account for all `Nz+1` faces. Thus we impose the staggered Neumann boundary conditions at `k=Nz+1` and the (Nz+1)th entry of right-hand-side is zero. (Chris probably told me this but I forgot...) Previously, the DCT did this for us as all the eigenfunctions satisfied the boundary condition anyways. I tested it against our existing solver but it doesn't work for variable dz yet. Not sure if it's because of my implementation of the Laplacian in PR #283 or because I discretized the vertical derivative incorrectly here. Just opening this PR early so everyone's in the loop. I'm not 100% sure whether we will be able to utilize cyclic reduction:; * I think you need a symmetric tridiagonal system (or at least block-symmetric) which we don't have when the grid is vertically stretched. Maybe this is a sign that I discretized things wrong?; * It can be modified for Neumann boundary conditions (which break the symmetry on the first and last rows) but in this case it seems cyclic reductio",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/306:30,integrat,integrate,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/306,1,['integrat'],['integrate']
Deployability,"This PR bumps the patch version in order to deploy docs, now that the `DOCUMENTER_KEY` environment variable should be correctly set for the tartarus buildkite agent. Resolves #1909",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1940:18,patch,patch,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1940,2,"['deploy', 'patch']","['deploy', 'patch']"
Deployability,"This PR changes the names of the `y` and `z` components of the rotation vector for the non-traditional f-plane to `fy` and `fz`. It updates the tests and documentation. It also adds a section about the non-traditional f-plane approximation to the ""physics"" section of the documentation.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/617:132,update,updates,132,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/617,1,['update'],['updates']
Deployability,This PR finally sets up a CI pipeline to run convergence tests and validation experiments for CPU and GPU on Buildkite. Don't think this should run on every push like the main pipeline does and I couldn't figure out how to trigger it via a GitHub comment (see https://github.com/CliMA/slurm-buildkite/issues/13). We can trigger this pipeline manually from Buildkite and I've scheduled it to run every night at 3am EST (on the master branch). Cool thing is that it uploads the convergence plots as artifacts so we can view them from Buildkite!. ![image](https://user-images.githubusercontent.com/20099589/100450878-6b5ceb00-3084-11eb-9cec-8072098b03b9.png). Resolves #1216,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1223:29,pipeline,pipeline,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1223,3,['pipeline'],['pipeline']
Deployability,This PR finally upgrades the checkpointer so it can restore large models that take up more than 50% of system memory. It used to create a model then restore the fields which allocates twice as much memory as needed. Now the data needed to restore the fields is passed to the model constructor so no double allocation. Some refactoring had to happen to make this possible. This PR is also part 2/3 of making boundary conditions a field property. Should help a lot with #602 and #603. Resolves #416; Resolves #417. Note: This PR branches off #627.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/628:16,upgrade,upgrades,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/628,1,['upgrade'],['upgrades']
Deployability,"This PR fixes a bug in the `FourierTridiagonalPoissonSolver` that almost certainly meant it produced incorrect answers. There were two concurrent bugs that cancelled each other out, which allowed tests to pass:. 1. The Laplacian operator (previously called `∇²`, now called `∇²ᶜᶜᶜ`) was incorrect, because ""Face"" and ""Center"" superscripts were swapped. In other words, the Laplacian operator was correct for an object located at `(Face, Face, Face)`, rather than `(Center, Center, Center)` as it was being applied.; 2. `ΔzF` and `ΔzC` were also swapped in derivation of the `FourierTridiagonalPoissonSolver`. This means that both the docs and the code were incorrect. The tests passed because these two bugs effectively cancel each other out. This PR fixes both bugs. There still may be a lingering issue however, because the docs multiply the entire Poisson equation by the vertical grid spacing (which in the docs is written `ΔzC`, but should be `ΔzF`), including the source term. I didn't see immediately where to replace `ΔzC` with `ΔzF` in `solve_poisson_equation!`. The tests may pass anyways because there is no test that incompressibility is maintained on a stretched grid. I also cleaned up the Laplacian operators a bit, and the grid spacing operators, and added a convenience function `set_source_term!` so that users don't have to know about the special formulation that `FourierTridiagonalPoissonSolver` uses. TODO:. - [x] Update the docs; - [x] Test incompressibility on a stretched grid",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1541:1436,Update,Update,1436,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1541,1,['Update'],['Update']
Deployability,"This PR fixes a bug where `last_Δt` was incorrect for RK3. This bug was found by @tomchor, cc @jagoosw . Also it removes `previous_Δt` from the QuasiAdamsBashforth2 time-stepper. Note, this affects checkpointing. I also correctly restore `last_Δt` from the checkpoint. I also updated some docstrings just so we have uniform language, replacing ""previous"" with ""last"" in a few places.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3595:276,update,updated,276,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3595,1,['update'],['updated']
Deployability,This PR fixes a sign error in the implicit dissipative buoyancy flux. We're also recalibrating parameters and will update them here before merging the PR.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3484:115,update,update,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3484,1,['update'],['update']
Deployability,This PR fixes a sign error in the implicit dissipative buoyancy flux. We're also recalibrating parameters and will update them here before merging the PR. @simone-silvestri,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3474:115,update,update,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3474,1,['update'],['update']
Deployability,"This PR implements a field-dependent boundary conditions feature. This is an extension to the boundary conditions API that leaves existing functionality unchanged. The functionality is similar to that for `Forcing`. For quadratic bottom stress acting on the `u`-velocity we'd write. ```julia; u_bottom_stress(x, y, t, u, v, Cd) = - Cd * u * sqrt(u^2 + v^2). bottom_bc = BoundaryCondition(Flux, u_bottom_stress, field_dependencies=(:u, :v), parameters=1e-3); ```. Dealing with the wall-normal velocity components is a bit annoying. For now we don't interpolate them, which leads to different behavior at left and right boundaries (due to the fact that the wall-normal index is assumed to refer to cell centers). Right now this is not much of a practical issue --- it would only affect cases in which wall-normal velocities were non-zero _and_ those values were used in boundary conditions on other fields. One solution is to store ""wall-normal"" indices separately for each of the `field_dependencies`. Then we can correctly infer the boundary index in `regularize_boundary_condition` because we know field locations there. We still need to:. - [x] update boundary conditions docs; - [x] see if any examples can be simplified?. Resolves #897",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1093:1147,update,update,1147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1093,1,['update'],['update']
Deployability,"This PR implements a regression test framework for `HydrostaticFreeSurfaceModel`. This PR doesn't actually change any of the tests; it just adds a script. We'd like to put the regression test data somewhere else, like `OceananigansRegressionTests.jl` or something, and then use `DataDeps.jl` to download updated regression test data if need be. We can experiment with that workflow here. It'd be nice to get regression test data in before modifying any non-regression-tested operators to work on curvilinear grids.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1373:304,update,updated,304,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1373,1,['update'],['updated']
Deployability,"This PR implements a validation experiment on a latitude-longitude grid that spans from 84 S to 84 N, thus ""nearly"" covering the globe. Here's some stats:. * 128 by 60 by 18 resolution, and therefore 2.8 deg grid spacing in the horizontal with 200 m spacing in the vertical; * Realistic bathymetry with solid northern wall; * Prescribed wind stress and temperature flux that relaxes sea surface temperature to a target distribution; * Convective adjustment vertical diffusivity and laplacian background horizontal and vertical diffusivities. ### Yet to be implemented for this setup:. * Annual cycle for wind stress and target sea surface temperature (derived from monthly averaged data, not implemented yet); * Bottom drag (requires capability for immersed boundary fluxes, not implemented); * Gent-McWilliams and skew diffusivity and Redi symmetric isopycnal diffusivity; * CATKE vertical diffusivity (may come in future PR). ## Some visualization. ### Setup: bathymetry, vertically-integrated lateral areas used in free surface solver, boundary conditions. ![image](https://user-images.githubusercontent.com/15271942/138298149-3123d9aa-6b93-4dc7-a811-4e4d0330d686.png). ### Solution after 1 day with 20 second time-step. ![image](https://user-images.githubusercontent.com/15271942/138451026-0d74946b-a5d0-428f-aa15-5743ab05a282.png). We need a bit more work (perhaps a better vertical mixing scheme and stretched grid) to obtain better results at long times. ## Notes. * The implicit free surface solver is the major performance bottleneck for this setup; * With a 20 second time-step and max iterations of 10 for free surface solver, 100 years can be simulated in about 21 hours",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2023:985,integrat,integrated,985,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2023,1,['integrat'],['integrated']
Deployability,"This PR implements the infrastructure for open boundary conditions in the `NonhydrostaticModel` as well as a few simple methods. . This PR:. - [x] Adds a `matching_scheme` property to `Open` boundary classifications to allow different `fill_X_halo!` to be dispatched; - [x] Introduces `update_boundary_condition!` to be called before halo fills allowing the `mathcing_scheme` to have properties which can evolve with the model; - [x] Make the existing tests pass; - [x] and implements a zero gradient matching scheme. (Others please feel free to update this comment as necessary.). ------------------------------------------------------------------------; Hi all,. Following discussion with @glwagner, @simone-silvestri, and @jm-c this is a first attempt at implementing open boundary conditions. First I will try to get it working for the non-hydrostatic model which seems to be relatively straightforward. As a first step, I have implemented east/west boundaries which allow a flow to be prescribed or to travel out of the domain (i.e. if you set `OpenBoundaryCondition(nothing)` then my code is assuming the flow will be travelling into that boundary). The outflow condition is equivalent to having a nondimensional phase speed of 1 (sec 3.1 of https://doi.org/10.1016/S0924-7963(97)00023-7) which seems to work fine. When I vary the inflow velocity I do see waves in the velocity field reflecting from the downstream boundary. I gather that we expect this with any outflowing boundary and would remedy this with a sponge layer, but maybe this is where we need to add something to the pressure solver. With a constant inflow (0.1 m/s, 0.625m resolution, AMD and SeawaterBuoyancy), and a turbulent outflow, it seems to work okay:. https://github.com/CliMA/Oceananigans.jl/assets/26657828/1509c8fa-ea24-40a2-84d5-33da424567b1. I am going to try and implement the test cases in the paper mentioned below next. I have a few things I think we should think about:; - Does it make more sense for `Open` to",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482:546,update,update,546,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482,1,['update'],['update']
Deployability,"This PR implements vertically-implicit time integration for tracers and momentum. We restrict attention to the `HydrostaticFreeSurfaceModel` and quasi-Adams-Bashforth time integration. This requires some refactoring of function-calling in `TurbulenceClosures` some upgrades to `BatchedTridiagonalSolver`, and changes to `ab2_step!(model::HydrostaticFreeSurfaceModel, dt)`. At first we will only support vertically implicit diffusion for `HorizontallyCurvilinearAnisotropicDiffusivity`. However, `TurbulenceClosures` has been extensively refactored to permit quick extension of vertically-implicit time-stepping to `IsotropicDiffusivity`, `AnisotropicDiffusivity`, and LES closures. ~~There are a few questions to answer before implementing implicit time-stepping there that we should discuss in issues.~~ It should be straightforward enough to implement vertically implicit time stepping for these closures and test them with existing regression tests. To construct a model that steps forward the vertical component of `HorizontallyCurvilinearAnisotropicDiffusivity` implicitly, we introduce the syntax. ```julia; ivd_closure = HorizontallyCurvilinearAnisotropicDiffusivity(κz = 1.0, time_discretization = VerticallyImplicitTimeDiscretization()); ```. The default `time_discretization` is `ExplicitTimeDiscretization`. The constructor for `HydrostaticFreeSurfaceModel` handles constructing a `VerticallyImplicitDiffusionSolver` when implicit time discretization is specified. This script:. ```julia; using Plots; using Printf; using Oceananigans; using Oceananigans.TurbulenceClosures: VerticallyImplicitTimeDiscretization, time_discretization. grid = RegularRectilinearGrid(size=128, z=(-0.5, 0.5), topology=(Flat, Flat, Bounded)). evd_closure = HorizontallyCurvilinearAnisotropicDiffusivity(κz = 1.0); ivd_closure = HorizontallyCurvilinearAnisotropicDiffusivity(κz = 1.0, time_discretization = VerticallyImplicitTimeDiscretization()). model_kwargs = (grid=grid, tracers=:c, buoyancy=nothing, velocit",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1639:44,integrat,integration,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1639,3,"['integrat', 'upgrade']","['integration', 'upgrades']"
Deployability,This PR improves the GPU example on the README and adds some extra notes and warnings about installing Oceananigans and running the examples. I will also add movies (maybe gifs) of rising thermal bubbles so users can visually check that their movie/output matches what we get.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/196:92,install,installing,92,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/196,1,['install'],['installing']
Deployability,This PR improves the existing examples and updates them to work with the current version of the model. There were also a couple of minor changes:; * Output writer API: Filename suffix is now called a file extension. No more inserting underscores for empty names and filename_prefix. User should include underscore if they want one.; * Model metadata: Use `:CPU` and `:GPU` instead of `:cpu` and `:gpu`. This is so that Oceananigans.jl agrees with the symbols used in GPUifyLoops.jl.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/103:43,update,updates,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/103,1,['update'],['updates']
Deployability,"This PR incorporates significant updates from PR #3306. Most importantly, it employs the new halo-filling functions to update the halos of the prognostic variables. Additionally, it removes the replace_horizontal_vector_halos! function, enhances existing methods and function calls related to the cubed sphere grid, and refines the vorticity computation function. It also implements a new test to verify that the norm of the prognostic variables of the Rossby-Haurwitz wave remains almost constant as it propagates over the cubed sphere.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3570:33,update,updates,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3570,2,['update'],"['update', 'updates']"
Deployability,"This PR inserts the vertical buoyant acceleration directly into the vertical momentum equation in `NonhydrostaticModel`, rather than integrating to find the hydrostatic pressure and inserting its gradient into the horizontal momentum equations. I just did the easiest thing right because I'm curious if regression tests pass. If they do, we can refactor `NonhydrostaticModel` to eliminate hydrostatic pressure, speed up the model, and reduce its memory footprint without too much pain (🎉). If the regression tests don't pass, we will unfortunately have slightly more pain ahead of us in refactoring the regression tests. In addition to the above advantages, we also need to eliminate vertical integrals in `NonhydrostaticModel` to permit 2D distributed memory parallelization. This is because `PencilFFTs` only allows parallelization across dimensions higher than 1 (or in other words, we cannot parallelize in `x`). Thus with a vertical integral, we can only parallelize easily across `y`. If we eliminate the vertical integral, we'll be able to parallelize in `y, z`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910:133,integrat,integrating,133,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910,1,['integrat'],['integrating']
Deployability,"This PR integrates Tim's changes from the GPU hackathon. By using dynamic launch configurations and splitting up the interior source term calculation kernel (+ https://github.com/JuliaGPU/CUDAnative.jl/pull/417) we get a pretty sweet ~25% overall speedup (so the most expensive kernel which was a bottleneck is sped up by ~40%). Needs https://github.com/vchuravy/GPUifyLoops.jl/pull/90 to work for now. cc @maleadt Sorry it took so long for me to merge these improvements. Actually resolves #64 . ```; ──────────────────────────────────────────────────────────────────────────────────────; Oceananigans.jl static ocean bench... Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 409s / 28.8% 15.0GiB / 0.50% . Section ncalls time %tot avg alloc %tot avg; ─────────────────────────────────────────────────────────────────────────────────────; 256×256×256 (CPU, Float64) 10 56.0s 47.7% 5.60s 292KiB 0.37% 29.2KiB; 256×256×256 (CPU, Float32) 10 47.2s 40.2% 4.72s 227KiB 0.29% 22.7KiB; 128×128×128 (CPU, Float32) 10 5.91s 5.03% 591ms 227KiB 0.29% 22.7KiB; 128×128×128 (CPU, Float64) 10 5.87s 5.00% 587ms 292KiB 0.37% 29.2KiB; 64× 64× 64 (CPU, Float64) 10 803ms 0.68% 80.3ms 292KiB 0.37% 29.2KiB; 64× 64× 64 (CPU, Float32) 10 724ms 0.62% 72.4ms 227KiB 0.29% 22.7KiB; 256×256×256 (GPU, Float64) 10 309ms 0.26% 30.9ms 9.83MiB 12.9% 0.98MiB; 256×256×256 (GPU, Float32) 10 239ms 0.20% 23.9ms 8.70MiB 11.4% 891KiB; 32× 32× 32 (CPU, Float64) 10 86.6ms 0.07% 8.66ms 292KiB 0.37% 29.2KiB; 32× 32× 32 (CPU, Float32) 10 61.0ms 0.05% 6.10ms 227KiB 0.29% 22.7KiB; 32× 32× 32 (GPU, Float64) 10 50.7ms 0.04% 5.07ms 9.83MiB 12.9% 0.98MiB; 64× 64× 64 (GPU, Float64) 10 49.7ms 0.04% 4.97ms 9.83MiB 12.9% 0.98MiB; 128×128×128 (GPU, Float64) 10 46.9ms 0.04% 4.69ms 9.83MiB 12.9% 0.98MiB; 32× 32× 32 (GPU, Float32) 10 44.8ms 0.04% 4.48ms 8.70MiB 11.4% 891KiB; 128×128×128 (GPU, Float32) 10 40.6ms 0.03% 4.06ms 8.70MiB 11.4% 891KiB; 64× 64× 64 (GPU, Float32) 10 32.6ms 0.03% 3.26ms 8.70MiB 11.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/302:8,integrat,integrates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/302,2,"['configurat', 'integrat']","['configurations', 'integrates']"
Deployability,"This PR integrates the `TurbulenceClosures` module into time stepping and boundary conditions. The need to abstractly deal with anisotropic transport coefficients for arbitrary boundaries introduces considerable complexity. This problem is solved by exporting `NamedTuples` that collect functions to calculate the diagonal components of viscosity and diffusivity at the necessary locations. The consequence of this implementation is viewed in the `apply_bcs!` function. Only the `ConstantAnisotropicDiffusivity`closure (corresponding to the former default) is currently tested. In the future, we should probably make `ConstantIsotropicDiffusivity` the default, and remove the option to set the horizontal and vertical diffusion tensor components in the `Model` constructor.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/245:8,integrat,integrates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/245,1,['integrat'],['integrates']
Deployability,"This PR integrates the finite volume operators introduced in PR #283. This includes merging `closure_operators.jl` into `Oceananigans.Operators`. All tests pass but there's quite a bit of cleanup to be done. @glwagner This PR affects a lot of code you've written so we should probably work on merging this PR together. Now that tests pass we can focus on cleanup. I still need to convert the biharmonic operators and `leith_enstrophy_diffusivity.jl` closure to finite volume. I'll also add a test for Leith. There are regression tests for constant diffusivty, Smagorinsky, and AMD, but not for other closures, so we should probably be careful that closures with no regression test remain unchanged. Some comments:. 1. The `norm` functions defined in `velocity_tracer_gradients.jl` https://github.com/climate-machine/Oceananigans.jl/blob/2bb32015e64bff830f2233d588360ccc6b8605b4/src/TurbulenceClosures/velocity_tracer_gradients.jl#L130-L154 all make use of functions like `Δᶠx_ffc` but they are defined in an `@eval` loop in in `verstappen_anisotropic_minimum_dissipation.jl`. We should probably make it clearer that these functions are closure-specific. 2. In `smagorinsky_lilly.jl`, the `κ_∂x_c`, `κ_∂y_c`, and `κ_∂z_c` functions use `ℑxᶠᵃᵃ(i, j, k, grid, νₑ, closure)` however I'm pretty sure we can just use `ℑxᶠᵃᵃ(i, j, k, grid, νₑ)` here. If so, we can get rid of the `ℑxᶠᵃᵃ(i, j, k, grid::AG{FT}, c, args...)` function definitions. 3. Certain functions are shared between turbulence closures, e.g. `ΣᵢⱼΣᵢⱼᶜᶜᶜ` is used by both `smagorinsky_lilly.jl` and `blasius_smagorinsky.jl`. Should they be moved to `closure_operators.jl`?. 4. Also, VAMD uses `Δᶠxᶜᶜᶜ` for the filter widths while Rozema AMD uses `Δx` (which looks like the regular `Δx` used by `Oceananigans.Operators`). We should probably change all filter widths to use `Δᶠ`. 5. Smagorinsky-Lilly uses `Δᶠ_ccc` for filter widths. Switching to `Δᶠᶜᶜᶜ` is probably a bad idea as `ᶠ` is denotes face. Should we change them to `Δᶠxᶜᶜᶜ = Δᶠyᶜᶜᶜ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/529:8,integrat,integrates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/529,1,['integrat'],['integrates']
Deployability,"This PR intends to abstract the concept of a grid with ""multiple regions"" from the cubed sphere. We only need one `MultiRegionGrid` to support a wide variety of configurations, including the CubedSphere. The hope in the near term is that this clarifies the code and implementation of cross-region halo exchanges. This PR was also going to implement broadcasting and try to get `ComputedField` working for fields and `AbstractOperations` distributed across multiple regions. This would get the PreconditionedConjugateGradientSolver working on MultiRegionGrid. To get this working we ""only"" need to define `get_region(op, i)` for `op::BinaryOperation, UnaryOperation, MultiaryOperation, Derivative`, which might not be too difficult. It also intends to define a macro `@regionalize` which we can use either to decorate existing functions or to conveniently extend functions to broadcast across multiple regions. Right now ""regional broadcasting"" is done manually, which is cumbersome and presumably can only lead to a build up of boilerplate. My changes broke the halo exchange tests however. @ali-ramadhan I need your help to fix these. If we can fix the tests, then we can move forward with this PR. Otherwise we may have to start over.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1614:161,configurat,configurations,161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1614,1,['configurat'],['configurations']
Deployability,"This PR introduces a new `ConformalMapping` type for the `OrthogonalSphericalShellGrid` and updates the grid construction to incorporate this type as a parameter. The goal is to enable dispatch over various conformal mapping types (e.g., cubed sphere and tripolar) and embed these mappings directly within the `OrthogonalSphericalShellGrid` structure.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3832:92,update,updates,92,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3832,1,['update'],['updates']
Deployability,"This PR introduces a new reentrant channel model type, the `ChannelModel`, which is periodic in x, has walls in the y-direction, and has the usual rigid lid at the top. It's just a regular `Model` but with no-flux boundary conditions in the y-direction on all fields. The halo regions are filled in appropriately to apply the free-slip boundary conditions. This is nice as we get a channel without having to change the operators or time-stepping at all. @jm-c has pointed out that things could get complicated with this approach when we get to implementing e.g. positivity-preserving advection schemes with having to fill the halo regions very frequently, but we agreed to cross that bridge when we get there. At that point, masks may turn out to be a better approach. It would be nice to have a solid physics test before merging this. Perhaps https://github.com/climate-machine/Oceananigans.jl/issues/100#issuecomment-483255199 would work, although we've had some issues setting up a flow in thermal wind balance (see PR #179). It might still work as an eyeball test. I will release a new minor version once this PR is merged. Resolves #100. Helps with #242 ; Helps with #258",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/290:1076,release,release,1076,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/290,1,['release'],['release']
Deployability,"This PR introduces a new regression test (and renames ""golden master tests"" to ""regression tests"") based on Rayleigh-Benard convection that adds regression tests for `Value` boundary conditions, the forcing implementation and the salinity equation, by using salinity as a passive tracer in the test. The test avoids setting random initial conditions by loading both the initial model state and the comparison state from file. Note that loading the model state from file required writing a new `OutputWriter` that outputs and loads the ""source terms"", `G`. This implementation is included in `test_regression.jl`, but it may be worthwhile to integrate it into `output_writers.jl` at some point. The test runs on the CPU and GPU. However, similar to the thermal bubble tests, this test fails on the GPU. This PR also adds a file to `sandbox` to aid running and exploring solutions to Rayleigh-Benard and also demonstrates the user-specification of a forcing term.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/239:641,integrat,integrate,641,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/239,1,['integrat'],['integrate']
Deployability,"This PR introduces full upwinding in vector invariant advection, which allows running eddy-permitting/resolving hydrostatic simulations without the need for an explicit viscous dissipation. In addition, it also refactors the whole vector scheme superseding PR #2820 . Examples of surface speed in modified neverworld configuration:. https://user-images.githubusercontent.com/33547697/206742914-d216ea2b-7cd2-4aa5-be70-a760b088698b.mp4. left: full upwinding 1/8th of a degree, no horizontal closure; center: full upwinding 1/4th of a degree, no horizontal closure; right: conservative vector invariant, biharmonic viscosity. Closes #2820",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2852:317,configurat,configuration,317,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2852,1,['configurat'],['configuration']
Deployability,"This PR investigates the possibility of using a convex combination of high-order stencils to calculate horizontal divergence. The goal is to use a stencil for horizontal divergence that tames the omnipresent grid-scale noise in the vertical velocity field in large-scale hydrostatic models. TODO:. - [ ] Add `divergence` property to `HydrostaticFreeSurfaceModel` and pass stencil info into kernels; - [ ] Update implicit free surface to use the vertical integral of horizontal divergence, rather than vertical integrating the velocity fields separately; - [ ] Fuse `Advection` module into `Operators`? The module `Advection` just defines stencils after all...; - [ ] Implement `UpwindWENO4` and `CenteredWENO5` horizontal divergence stencils",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2388:405,Update,Update,405,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2388,2,"['Update', 'integrat']","['Update', 'integrating']"
Deployability,This PR is a hotfix for https://github.com/CliMA/LESbrary.jl/issues/118 and https://github.com/CliMA/Oceananigans.jl/issues/1767. Seems to fix #1767 for me so we could use this branch temporarily if needed until we can actually fix #1767.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1768:13,hotfix,hotfix,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1768,1,['hotfix'],['hotfix']
Deployability,"This PR is created to solve the boundary condition race condition that occurs when trying to fill in the halo corner nodes. It is basically just an integration of PR #1985 that runs the halo filling sequentially to avoid unsynchronized execution and PR #1923 to fill left and right halos together which should increase performance. IMPORTANT NOTE:. This PR will fail the ocean large eddy simulation regression tests when lines (50-53) in BoundaryConditions/fill_halo_regions.jl are uncommented. The only thing that these lines do is a reordering of halo filling order such that the periodic boundary conditions are calculated after all the ""Bounded type"" boundary conditions. This is needed since periodic boundary conditions require previous evaluation of boundary conditions in other directions to fill the corner nodes (see PR #1985). It is possible that the ocean-large-eddy-simulation-regression-data has been generated with periodic boundary conditions (west-east, north-south) which are evaluated before the bounded ones (top-bottom) (see the fill_halo_regions! function in main). As such the issue with the test failing when uncommenting lines (50-53) would not be a bug in the code but a bug in the previous generated regression data. This error is quite small (as the corners would be updated based on the previous step ""bounded type"" boundary conditions) but still enough to make the test fail. (I leave this to you to confirm :)). Resolves #1179",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2035:148,integrat,integration,148,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2035,2,"['integrat', 'update']","['integration', 'updated']"
Deployability,"This PR is part 2 of n implementing halo regions (originally PR #167). n = 2 probably. Here I actually start using the halos and integrate them with the code. This involves filling in the halo regions as needed to enforce the periodic boundary conditions. I also rewrite the operators to use `i-1` and `i+1` instead of `decmod1` and `incmod1`. Hopefully this will speed things up a bit, especially on the GPU. I will release v0.6 once this is merged. Resolves #104",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/253:129,integrat,integrate,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/253,2,"['integrat', 'release']","['integrate', 'release']"
Deployability,"This PR is still a work-in-progress but I'm opening it to make the future design of the pressure solver module more transparent as we will be adding some new pressure solvers soon, including a conjugate-gradient solver by @christophernhill. # Motivation. In PR #290 I implemented a pressure solver for the `(Periodic, Bounded, Bounded)` channel topology using the 2D fast cosine transform algorithm described by Makhoul (1982) as CUFFT does not provide cosine transforms for the GPU and does not support FFTs along non-batched dimensions (see https://github.com/JuliaGPU/CUDA.jl/issues/119). This has been a very unpopular decision for good reasons. The 2D DCT algorithm is quite slow (channels are ~2x slower than doubly periodic on GPUs) and is quite complicated. Due to my inexperience, I didn't realize that transposing the array to do the FFT was the way forward. The pressure solver module is also quite out of date, it hasn't been updated since topologies were introduced (#614) almost exactly a year ago. This PR refactors the pressure solver module to:; 1. Support all topologies on the CPU and GPU performing transposes and index permutations as needed by each transform.; 2. Use the fastest transforms as allowed by the topology. This means batching dimensions when possible.; 3. Consolidating all pressure solvers into a single solver for all topologies. This should simplify the code and make it easier to extend. Resolves #586; Resolves #593; Resolves #594; Resolves #1007. # To batch or not to batch for FFTW on CPUs?. TODO:; - [x] Benchmark 1D {FFT, IFFT}{x, y, z}.; - [x] Benchmark 3D {FFT, IFFT}; - [x] Benchmark 1D {DCT, IDCT}{x, y, z}.; - [x] Benchmark 3D {DCT, IDCT}; - [x] Try N = 16, 64, 256; - [x] Is it faster to do 3 1D transforms or 1 3D transform? Answer: 1 3D transform. To see whether we should just do 1D transforms for everything or whether batching is faster I ran some 1D and 3D FFT benchmarks. The results for triply-periodic are posted below. Based on the benchmark",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1338:938,update,updated,938,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1338,1,['update'],['updated']
Deployability,"This PR is to add the basic implementation of immersed boundaries with grid-conforming coordinates #1036. This is still a work in progress, but so far it can handle forcing the velocity components to create an immersed boundary. It does not work with the tracer equations, yet, and it assumes a Dirichlet-zero boundary condition. The user must give a boolean function to the model, which returns `false` if the point is in the fluid. . This also includes a basic example for steady-state flow around a cylinder in 2D `flow_around_cylinder_lowRe.jl`, such as this:; ![velocity_Re40_dx04_small_paper](https://user-images.githubusercontent.com/67593861/108130156-2f329880-707d-11eb-87db-6d519e2513be.gif); ; The barebones of this implementation is rather old at this point. Even though it has been updated to work with the current set up, I imagine there are things that might still need more updating or have become superfluous. All suggestions are appreciated!. ### Description:; Instead of conforming the mesh to the fluid domain, a cartesian grid is generated over the whole area. Then, an added forcing term incorporates the boundary conditions into the equations. In practice, when your boundary conforms to the grids, creating a stair-step like boundary, this becomes much simpler to handle. Here, we replace the tendency terms in `correct_immersed_tendencies.jl` so that when you take the next Runge-Kutta step, you end up with U = 0. . Since this process occurs before the pressure correction, there is a small amount of error that seems to fit with the correction as seen here for various places within the cylinder where it should be zero:; ![Pcorrect_vs_velocity_inside_dx04](https://user-images.githubusercontent.com/67593861/108130321-7ae54200-707d-11eb-9101-273350597d8c.png); ; It would need more testing to truly verify that this is the case, but seems to fit the data so far. ### To Do/ Upcoming:; - Currently working on an arbitrary grid implementation, that can intersect the boundary",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1368:795,update,updated,795,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1368,1,['update'],['updated']
Deployability,"This PR just updates and cleans up the lid-driven cavity script. At some point I'd like to add all the validation experiments into CI and into the docs as advanced examples, but this will have to wait for now. The issue is that the script was using `Flat` back when it did nothing but now when using `Flat` you need to pass a 2-tuple for the grid size. I switched the script from `Flat` to `Bounded` until `Flat` is fully working. cc @maeckha. Resolves #1507",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1516:13,update,updates,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1516,1,['update'],['updates']
Deployability,"This PR makes a few small changes needed to use ContinuousBoundaryFunction with auxiliary fields, which have no notion of ""time"" or other model fields. For this case; we want to be able to write something like. ```julia; c_surface(x, y) = cos(pi * x); c_bcs = FieldBoundaryConditions(grid, (Center, Center, Center), top = ValueBoundaryCondition(c_surface)); c = CenterField(grid, c_bcs); fill_halo_regions!(c.architecture, c); ```. Prior to this PR this would fail (we only supported constant boundary conditions on auxiliary fields). This PR also ""reduces"" the location at which the boundary condition is applied, so that `ReducedField`s might use something like. ```julia; r_surface(x) = cos(pi * x); r_bcs = FieldBoundaryConditions(grid, (Center, Nothing, Center), top = ValueBoundaryCondition(r_surface)); r = ReducedField(Center, Nothing, Center, grid, r_bcs); fill_halo_regions!(r.architecture, r); ```. if we eventually set the location of fields in `Flat` dimensions to `Nothing` this will also have an impact on syntax used for building models. This PR needs a test or two before merging. cc @navidcy",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1859:48,Continuous,ContinuousBoundaryFunction,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1859,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"This PR makes tests and validations pipelines to run using Julia v1.7.; Furthermore, it updates `Manifest.toml` files from v1.0 to v2.0.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2090:36,pipeline,pipelines,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2090,2,"['pipeline', 'update']","['pipelines', 'updates']"
Deployability,"This PR masks tracers inside immersed solids in the same way velocities are already being masked:. `mask_immersed_tracers!(tracers, arch, grid::GFIBG) = Tuple(mask_immersed_field!(c) for c in tracers)`. Tracers are masked in `update_state!` before filling tracer halos. This also updates the cylinder validation to run with this immersed boundary method with tracers and analysis. The analysis is mostly for no slip boundary conditions which are not implemented yet (just free slip). Includes visuals like,. https://user-images.githubusercontent.com/67593861/126657679-1daa523e-c1da-4097-b994-d16966a9b578.mp4. and analysis of the pressure and friction coefficient (known for no slip BC), the normal and tangential velocities, and the tracer conservation, taken as the leakage in the fluid as compared to the initial state. Right now the tracers won't look right. @glwagner has found some problems with the diffusivities and tracers to be fixed. ![analysis_cylinder_tracer_Nh_350_CenteredSecondOrder](https://user-images.githubusercontent.com/67593861/126657698-bbfec9bb-0820-4ed5-866d-54f9b3ac7dd5.png)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1888:280,update,updates,280,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1888,1,['update'],['updates']
Deployability,"This PR overhauls halo filling to improve performance, especially for models that are ""thin"" in one direction (meaning that halo filling in the ""fat"" directions is expensive). It combines halo filling for opposing boundaries when possible (this is almost always possible except when using value / gradient boundary conditions). Notably it implements kernels for filling periodic boundary conditions rather than using `view` plus broadcasting, leading to significant performance improvement and reduction in memory allocations. The main problem was periodic directions I think, but there were also issues for normal velocity components. There may be more improvements to be had there. I think we can also do a lot less halo filling for flux boundary conditions, but full optimization would require a bit of work to the turbulence closures. For the default model configuration, we launch about half as many kernels for halo filling now. Before this PR:. ```julia; [ Info: Oceananigans will use 8 threads; [ Info: Benchmarking model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=64, Ny=64, Nz=1)...; 226.285 ms (404628 allocations: 164.96 MiB); [ Info: Benchmarking model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=64, Ny=1, Nz=64)...; 517.198 ms (431298 allocations: 347.27 MiB); [ Info: Benchmarking model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=64, Nz=64)...; 432.185 ms (292065 allocations: 315.60 MiB); ```. After this PR:. ```julia; gregorywagner:benchmark/ (glw/performance✗) $ julia --project benchmark_two_dimensional_models.jl [18:25:59]; [ Info: Oceananigans will use 8 threads; [ Info: Benchmarking model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=64, Ny=64, Nz=1)...; 183.673 ms (340830 allocations: 107.52 MiB); [ Info: Benchmarking model with RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=64, Ny=1, Nz=64)...; 229.704 ms (359167 allocations: 108.74 MiB); [ Info",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1923:861,configurat,configuration,861,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1923,1,['configurat'],['configuration']
Deployability,"This PR overhauls the API for `Simulation`, `TimeStepWizard`, and printing of progress. It also simplifies the implementation of `run!`. After this PR, `Simulation` no longer accepts the keyword arguments `iteration_interval` or `progress`. Instead, progress printing is achieved with callbacks, eg:. ```julia; progress(sim) = @info ""Iteration: $(iteration(sim)), time: $(time(sim))""; simulation.callbacks[:progress] = Callback(progress, IterationInterval(100)); ```. It also refactors the `TimeStepWizard` so that it can be used as a callback, eg. ```julia; wizard = TimeStepWizard(cfl=1.0, max_change=1.1, max_Δt=2minutes); simulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10)); ```. This is a better design for a few reasons:. 1. Adaptive time-stepping and progress printing are not longer arbitrarily constrained to occur on the same iteration interval.; 2. Both progress printing and adaptive time-stepping can use any `schedule` (rather than only `IterationInterval`).; 3. The simulation time-step is always `simulation.Δt`. No more shenanigans like `simulation.Δt.Δt`. Eventually, we should also eliminate the ""diagnostics"" list so that we have only two lists of callback-like objects: `simulation.callbacks` and `simulation.output_writers`. I think this resolves an issue or two but I need to find them. Also, I've so far only updated the examples. There are probably tests and validation cases that need to be updated for the new API as well. This PR is an important step toward generalizing `Oceananigans.Simulation` so that it can be used by [`ClimaAtmos.jl`](https://github.com/CliMA/ClimaAtmos.jl). cc @bischtob @akshaysridhar",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1971:1353,update,updated,1353,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1971,2,['update'],['updated']
Deployability,"This PR overhauls the infrastructure supporting user-defined forcing functions. Many of these changes are discussed in #896 . ## `ModelForcing` is no more. The first important change is the elimination of `ModelForcing`. The `forcing` kwarg in the constructor for `IncompressibleModel` now accepts a named tuple, similar to the kwarg `boundary_conditions`. ## New default for `IncompressibleModel`. Second, functions that are passed directly to `IncompressibleModel` are assumed to have the ""continuous form"" signature. ```julia; func(x, y, z, t); ```. ## New user-facing function: `Forcing`. Third, forcing functions that deviate from this default behavior should be constructed with the function `Forcing`. Thus `SimpleForcing` is eliminated, as well as `ParameterizedForcing`. Moreover, simple-forcing-like functions can now depend on arbitrary fields interpolated to the location at which the forcing is applied. We thus support constructs like. ```julia; growth_in_sunlight(x, y, z, t, P) = exp(z) * P. plankton_forcing = Forcing(growth_in_sunlight, field_dependencies=:P); ```. provided that `:P` is in `model.tracers`. ### Docstring for `Forcing`. ```julia; """"""; Forcing(func; parameters=nothing, field_dependencies=(), discrete_form=false). Returns a forcing function added to the tendency of an Oceananigans model field. If `discrete_form=false` (the default), and neither `parameters` nor `field_dependencies`; are provided, then `func` must be callable with the signature. `func(x, y, z, t)`. where `x, y, z` are the east-west, north-south, and vertical spatial coordinates, and `t` is time.; Note that this form is also default in the constructor for `IncompressibleModel` and `Forcing` is; not needed for forcing functions of this form. If `discrete_form=false` (the default), and `field_dependencies` are provided,; the signature of `func` must include them. For example, if `field_dependencies=(:u, :S)`; (and `parameters` are _not_ provided), then `func` must be callable with the sign",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/989:492,continuous,continuous,492,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/989,1,['continuous'],['continuous']
Deployability,"This PR provides a convenience constructor for building `UniformStokesDrift` with four `Field`s for the Stokes shear and tendency, rather than functions. It also adds kernel functions for the field case, so users now have the choice between functions of `(z, t)`, `Field`s, or `nothing`. This is useful when calculating the Stokes profile is a relatively expensive or involved computation (eg, involving integration over a spectrum of waves). This permits two optimizations:. 1. Stationary Stokes shear profiles can be precomputed.; 2. Time-dependent Stokes shear profiles and Stokes tendencies can be computed in a `Callback`. This saves computation time for 3D runs because the Stokes profiles are 1D.; ; co-authored with @qingli411. TODO: . - [x] add a test",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2320:404,integrat,integration,404,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2320,1,['integrat'],['integration']
Deployability,"This PR ready. I just wanted to wait until after OSM2024 to merge since it includes various deps updates as well. Or, @glwagner, feel free to merge at will whenever.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1943177961:97,update,updates,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1943177961,1,['update'],['updates']
Deployability,"This PR refactors and improves the documentation. Some of the things done in this PR:; 1. Split long pages in section. This was done to the physics section and the model setup section.; 2. Switch from PyPlot.jl to Plots.jl for plotting in examples. Each example now comes with an mp4 animation of the output. I believe this greatly improves the examples as users will have a better idea of what each example does. Surprisingly, the plotting code has been simplified. This will also allow us to run the example tests again (currently 5 or 6 broken tests).; 3. Updated performance benchmarks. CPU and GPU used (among other info from `versioninfo()`) is included to provide context for each benchmark.; 4. Added a page in the documentation called ""Using GPUs"" which gives some instructions on how to how to start using GPUs with Oceananigans (and Julia), how to tell if you have a compatible GPU, and some resources on where to get GPUs.; 5. Fixed the public API documentation to include more docstrings and include some docstrings that were left out when we moved certain bits into submodules.; 6. Numerous small fixes and improvements. Things left to do:; 1. Fix `@example` blocks in model setup docs.; 2. Add references.; 3. Generate documentation for private API as well. Resolves #466; Resolves #482; Resolves #483; Resolves #536",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/570:559,Update,Updated,559,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/570,1,['Update'],['Updated']
Deployability,"This PR refactors many of the existing abstractions so that they can be passed to GPU kernels #59. It massively cleans up the operators and time-stepping loop, allowing us to keep using beautiful abstractions even in GPU kernels. Note that after this PR is merged, `CUDAnative#master` and `GPUifyLoops#vc/interactive` will be required until the respective fixes are merged into an updated release. I will update the `Project.toml` when we can move to a new release. Once this is merged I will also release v0.5.0. When completed and merged this PR will:; Resolve #19; Resolve #59; Resolve #60; Resolve #66; Resolve #74 ; Resolve #133 ; Resolve #153",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/147:381,update,updated,381,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/147,5,"['release', 'update']","['release', 'update', 'updated']"
Deployability,"This PR removes part of the time-stepping algorithm that uses the continuity equation to 'recompute' the vertical velocity at the end of a time-step, after using a fractional step to project the predictor velocity field onto an incompressible field.; This recomputation of vertical velocity relies on a discrete vertical integral of the continuity equation starting at the bottom of the domain and proceeding upwards. The reason for omitting ""w recomputation"" is primarily because vertically integrating the continuity equation _accumulates_ pressure projection round-off error into the vertical velocity field, biased towards the top of the domain. Most models are probably unaffected by this error accumulation and upward bias. However, accumulation of round-off error in a particular part of the domain may become a problem for models with high vertical resolution. The recomputation step also has a computational cost, and the top of the domain is crucial in many oceanographic contexts. The incompressibility of the flow field is still assured without this recomputation step, and it is probable that the velocity field errors are more isotropic and therefore probably more benign. We should note that the error in the _divergence_ is larger without recomputation. However, it probably still falls below acceptable limits, and it does not accumulate in time. With this change the regression tests fail. Also, an ""incompressibility test"" that relies on a measurement of the absolute magnitude of the divergence error fails. We probably simply need to relax the error requirement for the incompressibility test. The regression tests, on the other hand, will have to be regenerated. cc @sandreza @kburns. Resolves #338",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/711:492,integrat,integrating,492,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/711,1,['integrat'],['integrating']
Deployability,"This PR removes the PencilFFT library from Oceananigans and builds a distributed FFT solver using Oceananigans' inhouse transforms. This allows us to run on GPUs both periodic and bounded domains.; No stretched mesh is supported at the moment (that will come in a later PR). The transposition is performed through a custom `transpose` routine built for Oceananigans' fields that assumes ; - the starting configuration is always a _z-free_ configuration.; - the transpose directions are _z-free_ -> _y-free_ -> _x-free_ -> _y-free_ -> _x-free_; - the y-direction is integer divisible by the number of ranks that divide the x-direction; - the z-direction is integer divisible by the number of ranks that divide the y-direction. An additional assumption is that:; - if TY is Bounded, also TZ needs to be Bounded; - if TX is Bounded, also TY needs to be Bounded. All these assumptions can be relaxed in following PRs",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279:404,configurat,configuration,404,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279,2,['configurat'],['configuration']
Deployability,"This PR removes the masking of tracers when using IBM. At the moment all tracers are masked inside immersed solids. It's my understanding that these masked values aren't being used in any calculations except for the pressure solver. ~The issue is that having active scalars masked can mess up the pressure solver and lead to some numerical artifacts in some cases. I've noticed some small effects like that in my simulation, but @whitleyv had some more serious spurious dynamics pop up as a result in her simulations that only went away by not masking buoyancy. I'll let @whitleyv herself explain/show what was happening.~. ~For now @whitleyv and I just commented out the lines doing the masking in the nonhydrostatic model, but if we do decide to move forward with this PR I'll clean the code more properly. I was hoping we could discuss a bit before doing that.~. Updated description:. When I originally opened this PR, the masking was creating an issue with the dynamics. However, this turned out to be a bug and was solved by #2603. Now the current situation is that masking is still done for all tracers and velocities in the main branch, but this has zero effect on the results. This PR removes masking when updating `NonhydrostaticModel` and instead masks each output field only when writing to disk, saving computational resources (although just a bit). CC @simone-silvestri @glwagner @wenegrat",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616:866,Update,Updated,866,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616,1,['Update'],['Updated']
Deployability,This PR removes the now out-of-date `restore_from_checkpoint` function and updates the docs. Unfortunately the checkpointer test that was commented out in PR https://github.com/CliMA/Oceananigans.jl/pull/1639 is failing again now when uncommented.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1670:75,update,updates,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1670,1,['update'],['updates']
Deployability,"This PR rewrites much of the docs, adds a show function for `Model` and various boundary conditions structures (which fixes very long output in the docs), and updates many of the examples to be docs-friendly. The docs are still very much preliminary even after the updates in this PR. Once this PR is merged, I will open an issue to define a roadmap for getting the docs to the place we need them to be.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/488:159,update,updates,159,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/488,2,['update'],['updates']
Deployability,"This PR serves as an important step toward integrating the split-explicit free surface with `MultiRegionGrid`. It introduces an optional parameter, `extended_halos`, which allows users to control the behavior of halo filling during each substep. Setting `extended_halos` to `false` maintains the halo size to be the same as the original grid, diverging from the previous default behavior where `extended_halos = true` would automatically extend the halo to cover all split-explicit substeps, significantly enhancing computational performance. Although setting `extended_halos` to `false` may be less efficient for long simulations on high-resolution`MultiRegionGrids` grids, this feature is helpful for debugging purposes. Additionally, this PR addresses and resolves a couple of bugs related to the interaction between `ImmersedBoundaryGrid` and `MultiRegionGrid`. These modifications ensure that `ImmersedBoundaryGrid` now correctly wraps over `MultiRegionGrid`, reversing the prior implementation approach. With @simone-silvestri and @jm-c.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3596:43,integrat,integrating,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3596,1,['integrat'],['integrating']
Deployability,"This PR simplifies and generalizes the model constructor, which is a major change to the API. Except for `initialize_tracers` and `float_type`, all of the keyword arguments to `Model` now correspond semantically to the fields of model. In addition to clarifying the arguments of the model constructor, this will make checkpointing easier. . In addition, model fields that contain arrays, and thus are involved with large amounts of memory allocation, can be initialized through the model constructor. This should enable upgrades to the checkpointer that make it possible to checkpoint very large models that fill GPU memory. Finally, we add three new convenience constructors that retain the legacy behavior of model, and provide convenient ways to initialize particular models: `BasicModel`, `BasicChannelModel`, and `NonDimensionalModel`. `BasicModel` and `BasicChannelModel` closely resembles the original model constructor, while `NonDimensionalModel` allow parameters to be set by specifying non-dimensional numbers, rather than dimensional constants. Resolves #372.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/401:520,upgrade,upgrades,520,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/401,1,['upgrade'],['upgrades']
Deployability,"This PR simplifies the function signatures for boundary condition functions and forcing functions. ; It also nukes the `model.parameters` field in favor of more local ""parameters"" functionality, and adds `ParameterizedForcing` and `ParameterizedBoundaryCondition` convenience types and functions. The new forcing function signature is. ```julia; F(i, j, k, grid, clock, state); ```. while the new boundary condition function signature is. ```julia; bc(i, j, grid, clock, state); ```. where `i, j` are indices along the boundary. `state` is a `NamedTuple` with fields `:velocities`, `:tracers`, and `:diffusivities`, each corresponding to an `OffsetArray` that references the data associated with each field. In the future, if we make substantial changes to `model`, the hope is that we can modify/extend `state` appropriately and thus leave user code unbroken. We should probably release a new minor version when this is merged. Resolves #682 .",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/697:880,release,release,880,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/697,1,['release'],['release']
Deployability,"This PR splits the tests into four test groups, selectable with the `TEST_GROUP` environment variable: `unit`, `integration`, `regression`, and `scripts`. Using `TEST_GROUP=all` (the default if `TEST_GROUP` is not defined) will run all tests. The purpose of this PR is to address long test build times (see #860) that time out at 50 minutes on Travis CI and at 60 minutes on GitLab CI by splitting tests into multiple jobs (i.e. building a job matrix) that each should individually run much faster. If the different jobs could be run in parallel this would speed up our test builds significantly, but alas we are stuck with free-tier CI pipelines so we can't run too many jobs in parallel and will probably end up waiting longer. But at least our jobs won't time out. In working on this PR I was also able to revive the Appveyor and Docker CI pipelines (I think Appveyor will only show up for future PRs). Resolves #139",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/872:112,integrat,integration,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/872,3,"['integrat', 'pipeline']","['integration', 'pipelines']"
Deployability,This PR starts the processes of integrating LES functionality from glwagner/pass-tests into Oceananigans master. It is very much WIP at the moment.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/309:32,integrat,integrating,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/309,1,['integrat'],['integrating']
Deployability,This PR supersedes #2488. I have added a remark about installing/using Oceananigans with Julia v1.7 + Apple M1 chips at https://github.com/CliMA/Oceananigans.jl/wiki/Installation-and-getting-started-with-Oceananigans.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2496:54,install,installing,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2496,2,"['Install', 'install']","['Installation-and-getting-started-with-Oceananigans', 'installing']"
Deployability,"This PR toggles conditional differences with `immersed_inactive_node`, rather than `inactive_node`. The difference is that `inactive_node` returns `true` if the node is outside the domain (either immersed _or_ outside the domain in a `Bounded` direction). `immersed_inactive_node` only returns true if the node is within the immersed boundary:. https://github.com/CliMA/Oceananigans.jl/blob/f7acd8d0bd30dbe1ccb72854b6ea0ccab1eae0b5/src/ImmersedBoundaries/ImmersedBoundaries.jl#L220-L221. This matters for applying `ValueBoundaryCondition` or `GradientBoundaryCondition` across non-immersed boundaries, on `ImmersedBoundaryGrid`, because both of these are enforced by filling the halo regions on the other side of a `Bounded` direction. Thus we have to be able to correctly evaluate differences / interpolate across non-immersed `Bounded` boundaries. Closes #3208 . We might want to add a test so this doesn't break in the future. It'd also be great to make this code more understandable (suggestions welcome...). @hdrake",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3209:8,toggle,toggles,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3209,1,['toggle'],['toggles']
Deployability,"This PR updates CATKE parameters, which was needed after the semi-implicit time-stepping for the TKE equation was introduced in #2426. This PR is all @adelinehillier's work!. The results were generated by training with a 2 minute time-step (previously we had to use time-steps as small as 1 second during training), and are pretty promising:. ![image](https://user-images.githubusercontent.com/15271942/164771409-22f836fc-6ccb-4432-b97b-74de87dbb825.png). The next step is to calibrate and test CATKE at different vertical resolutions. But this is a good start.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2461:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2461,1,['update'],['updates']
Deployability,"This PR updates CATKE with an improved model for how the presence of shear modulates the mixing length and turbulent mixing. A few preliminary calibration results suggest that these changes are very promising, especially at coarse resolutions. A short summary is that, originally, CATKE was flexible enough to model both convection and shear-driven mixing --- just not at the same time (because TKE levels are much higher for shear-driven mixing). Adding a more explicit model for the modulation of the mixing length in the presence of shear allows CATKE to capture both convection and shear-driven regimes. We can update the default values for CATKE in this PR as well. This figure is a little out of context, but it shows agreement between LES (gray line) and the ""best parameters"" from a calibration run (blue line) at 8m resolution with five physical scenarios (from LESbrary's 4 day suite). The ""other line"" is the ""worst"" parameters in the calibration ensemble (so that one should be ignored). ![image](https://user-images.githubusercontent.com/15271942/155232297-9fa83269-0383-4f9e-a060-757b3632ce9d.png). Closes #2272",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2273:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2273,2,['update'],"['update', 'updates']"
Deployability,"This PR updates PencilFFTs to 0.13.4, and fixes the DistributedFFTBasedPoissonSolver. Previously we were attempting to ""partition"" the eigenvalues manually, which produce an inconsistency between the layout of the spectral-space pressure and the eigenvalues. This PR uses `PencilFFTs.localgrid` to partition the eigenvalues instead, and furthermore correctly identifies `last(solver.storage)` (not `solver.storage[2]`) with the _outcome_ of the in-place spectral transform of pressure. Thanks @jlpolanco especially for patiently enduring my utter inability to read documentation. I believe this should resolve #2347 but we'll need to test that directly.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2502:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2502,1,['update'],['updates']
Deployability,"This PR updates `FieldTimeSeries` to be slightly ""backward compatible"" and capable of loading data from Oceananigans versions that did not have `Field.indices`, or which serialized stretched GPU grids with `CuArray`s. We might have to constantly maintain this... but hopefully eventually structures will be more stable, and eventually we can just delete the stuff added here.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2419:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2419,1,['update'],['updates']
Deployability,"This PR updates `examples/ocean_wind_mixing_and_convection.jl` with a new grid generating function that produces a constant grid spacing near the surface. A visualization of the grid spacing is. ![image](https://user-images.githubusercontent.com/15271942/124339919-d3ba0080-db6e-11eb-96f2-999856d9556d.png). @tomchor proposed this idea in #1762, but we couldn't find a suitable generating function and so a grid that becomes ever more refined toward the surface was used instead. I think a grid with constant near-surface spacing and bottom-intensified stretching will be useful for boundary layer turbulence experiments, so I thought it was worthwhile to spend a bit more time to come up with something. I thought the hyperbolic generating function was also useful, so I added it to the docstring for `VerticallyStretchedRectilinearGrid` as an example. This PR also fixes a typo in that docstring. Some notes:. I developed a two-parameter stretching function:. ```julia; ## Linear near-surface generator; ζ₀(k) = 1 + (h(k) - 1) / refinement. ## Bottom-intensified stretching function ; Σ(k) = (1 - exp(-stretching * h(k))) / (1 - exp(-stretching)). ## Generating function; z_faces(k) = Lz * (ζ₀(k) * Σ(k) - 1); ```. with `refinement` and `stretching` parameters`. Finding a suitable grid requires playing with both these parameters: perhaps counter-intuitively, when the `refinement` is weaker, the `stretching` has to be stronger to obtain a grid that's nearly constantly spaced near the surface. I think a slightly more convenient parameterization would use a ""transition"" parameter (controlling the depth at which the grid transitions from constant spacing to stretched) rather than a stretching parameter (there would also be a small parameter involved to control ""how close"" the spacing would be to constant at the transition depth). However I couldn't figure out how to implement such a parameterization without solving a transcendental equation. The idea I had was to set the slope of `Σ` to a",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1810:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1810,1,['update'],['updates']
Deployability,"This PR updates `fill_halo_regions!` to pass location information into the kernels. We need location information to correctly assess distances across the wall (eg `Δx`, `Δy`, `Δz`) when filling halos for `ValueBoundaryCondition` and `GradientBoundaryCondition`. After this PR we should be able to use `ValueBoundaryCondition` and `GradientBoundaryCondition` on curvilinear grids and immersed boundary grids. Resolves #2430; Resolves #2369 ; Resolves #1730. There might be a few other issues on this...",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2441:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2441,1,['update'],['updates']
Deployability,"This PR updates `fill_halo_regions!` to utilize `field.architecture` (so the `arch` requirement is no longer needed), and generalizes halo filling for `Value` and `Gradient` boundary conditions to curvilinear grids.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1731:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1731,1,['update'],['updates']
Deployability,"This PR updates several sections of the Docs to add clarity. In particular:. - Physics/Boussinesq approximation; - Numerical Implementation/Elliptic Solvers/Implicit free surface pressure operator; - Numerical Implementation/Pressure decomposition; - Numerical Implementation/Time-stepping; - `HydrostaticFreeSurfaceModel` docstrings . Also, closes #2653 and closes #2656.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2639:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2639,1,['update'],['updates']
Deployability,This PR updates the Docs/Library section with latest docstrings. Closes #1713.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1714:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1714,1,['update'],['updates']
Deployability,This PR updates the HydrostaticFreeSurfaceModel RHS kernel functions to use the correctly-located pressure gradient for curvilinear grids.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1385:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1385,1,['update'],['updates']
Deployability,"This PR updates the Langmuir turbulence example to have an initial mixed layer 33 meters deep. This initial mixed layer was prescribed by [McWilliams et al. (1997)](https://www.cambridge.org/core/journals/journal-of-fluid-mechanics/article/langmuir-turbulence-in-the-ocean/638FD0E368140E5972144348DB930A38), which escaped me when I first read that paper. Thanks to @qingli411 for alerting me to this.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1129:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1129,1,['update'],['updates']
Deployability,"This PR updates the README and cleans it up a bit since it was out of date, and adds a section on ""citing"" Oceananigans.jl and a page with a list of publications using Oceananigans.jl. Open to suggestions if anyone thinks something is missing or could be better!. Resolves #973; Resolves #1101",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1518:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1518,1,['update'],['updates']
Deployability,"This PR updates the `Simulation tips` section in the Docs with the new `show()` methods and latest model constructor args. However, the following does not work and needs attention:. ```julia; julia> using CUDA; CUDA.allowscalar(true). julia> model.velocities.u.data; 3×3×3 OffsetArray(::CuArray{Float64, 3}, 0:2, 0:2, 0:2) with eltype Float64 with indices 0:2×0:2×0:2:; [:, :, 0] =; Error showing value of type OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3}}:; ERROR: Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:33; [2] assertscalar(op::String); @ GPUArrays /g/data/v45/nc3020/.julia/packages/GPUArrays/umZob/src/host/indexing.jl:53; [3] getindex(::CuArray{Float64, 3}, ::Int64, ::Int64, ::Int64); @ GPUArrays /g/data/v45/nc3020/.julia/packages/GPUArrays/umZob/src/host/indexing.jl:86; [4] getindex; @ /g/data/v45/nc3020/.julia/packages/OffsetArrays/I5Pfg/src/OffsetArrays.jl:412 [inlined]; [5] getindex; @ ./subarray.jl:276 [inlined]; [6] isassigned(::SubArray{Float64, 2, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3}}, Tuple{OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, Int64}, false}, ::Int64, ::Int64); @ Base ./abstractarray.jl:513; [7] alignment(io::IOContext{Base.TTY}, X::SubArray{Float64, 2, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3}}, Tuple{OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, Int64}, false}, rows::UnitRange{Int64}, cols::UnitRange{Int64}, cols_if_complete::Int64, cols_otherwise::Int64, sep::Int64)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2316:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2316,1,['update'],['updates']
Deployability,"This PR updates the `show()` method for `LatitudeLongitudeGrid` to denote which of the directions is latitude and which is longitude. It also updates the docstring to match the latest syntax. ### Before this PR. ```julia; julia> using Oceananigans. julia> LatitudeLongitudeGrid(size = (10, 4, 5),; latitude = (-40, 40),; longitude = (-20, 20),; z = (-2000, 0),; topology = (Periodic, Bounded, Bounded),; halo = (2, 2, 2)); 10×4×5 LatitudeLongitudeGrid{Float64, Periodic, Bounded, Bounded} on CPU with 2×2×2 halo and with precomputed metrics; ├── Periodic λ ∈ [-20.0, 20.0) regularly spaced with Δλ=4.0; ├── Bounded φ ∈ [-40.0, 40.0] regularly spaced with Δφ=20.0; └── Bounded z ∈ [-2000.0, 0.0] regularly spaced with Δz=400.0; ```. ### After this PR. ```Julia; julia> using Oceananigans. julia> LatitudeLongitudeGrid(size = (10, 4, 5),; latitude = (-40, 40),; longitude = (-20, 20),; z = (-2000, 0),; topology = (Periodic, Bounded, Bounded),; halo = (2, 2, 2)); 10×4×5 LatitudeLongitudeGrid{Float64, Periodic, Bounded, Bounded} on CPU with 2×2×2 halo and with precomputed metrics; ├── longitude: Periodic λ ∈ [-20.0, 20.0) regularly spaced with Δλ=4.0; ├── latitude: Bounded φ ∈ [-40.0, 40.0] regularly spaced with Δφ=20.0; └── z: Bounded z ∈ [-2000.0, 0.0] regularly spaced with Δz=400.0; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2370:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2370,2,['update'],['updates']
Deployability,This PR updates the ancient `test_flux_budget` to be able to test all topologies and boundaries. I've also called it `test_incompressible_flux_budget` since it uses `IncompressibleModel`. This will allow us to generalize `apply_x_bcs` and `apply_y_bcs` to curvilinear grids without fear that we've broken something.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1486:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1486,1,['update'],['updates']
Deployability,This PR updates the baroclinic adjustment validations scripts. Closes #2291,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2284:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2284,1,['update'],['updates']
Deployability,This PR updates the citation style reference according to changes by [DocumenterCitations.jl v1](https://github.com/JuliaDocs/DocumenterCitations.jl/blob/master/NEWS.md#breaking). Now we can use `(@citet)` and `(@cite)`.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3186:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3186,1,['update'],['updates']
Deployability,"This PR updates the code to use kinematic (density normalized) hydrostatic pressure and buoyancy rather than density perturbation. Using kinematic pressure simplifies the code because the reference density no longer affects the algorithm. Using buoyancy instead of the density perturbation will ultimately simplify the code further because it is needed for turbulence closures (for example). The docs should be updated before merging. Also, the golden master tests should be updated elsewhere; then it can be confirmed here that these changes preserve the functioning of the code (these changes do not affect the outcome of the algorithm). I have also copy/pasted an interpolation operator that will become part of the code once #234 is merged. Prior to this PR, the interpolation of the buoyancy field to z faces was done manually. We need a function to calculate buoyancy for the turbulence closures; so I think we are better off deleting the density perturbation function, ultimately. After this change the reference density ceases to be used in the algorithm. I have also included salinity in the calculation of buoyancy.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/236:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/236,3,['update'],"['updated', 'updates']"
Deployability,"This PR updates the dissipation and surface TKE flux parameter for CATKE. These were _not_ updated in #2273, but they should have been. cc @adelinehillier",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2374:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2374,2,['update'],"['updated', 'updates']"
Deployability,"This PR updates the docs to provide stronger links to the [new wiki](https://github.com/CliMA/Oceananigans.jl/wiki). There's a few more updates I'd like to make, and perhaps we can completely migrate ""using GPUs"" and ""installation instructions"" over to the new wiki? @tomchor and @navidcy are the docs aficionados so let's see what they think. ~I'd also like to resolve #2471 .~. Closes #2471",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2474:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2474,3,"['install', 'update']","['installation', 'updates']"
Deployability,"This PR updates the examples to account for the fact that `field.data` returns the full offset array including all halos so you need to use `data(field)` which returns a view into the interior of the field with no halos. cc @navidcy internal wave example works for me now. Can you try on this branch?. In hindsight, maybe a more sophisticated fields API would avoid issues like this where we're so reliant on the `data(::Field)` function. Maybe things should ""just work"" for the user. Resolves #254",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/257:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/257,1,['update'],['updates']
Deployability,This PR updates the grid metrics used by `ShallowWaterModel` and adds a masking step to `update_state!` so that `ShallowWaterModel`s can be run on `ImmersedBoundaryGrid`. Co-authored by @francispoulin . Supercedes #1663,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1718:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1718,1,['update'],['updates']
Deployability,This PR updates the instructions for building docs locally. We should avoid `Pkg.develop()` since we are offering a `docs/Manifest.toml`.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1707:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1707,1,['update'],['updates']
Deployability,"This PR updates the instructions for building the docs locally. @tomchor, @francispoulin: could you let me know if these new instructions do the job for you? Please try on a fresh clone of the repo. Closes #1542. (Or at least that's the hope....)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1772:8,update,updates,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1772,1,['update'],['updates']
Deployability,"This PR uses a continuous forcing immersed boundary method to simulate viscous flow around a cylinder. I think this is a pretty common test case of CFD codes: as you increase the Reynolds number, you should start to see vortex shedding behind the cylinder which we do see. Movie: https://www.youtube.com/watch?v=s7u_OJXFMoQ; ![image](https://user-images.githubusercontent.com/20099589/76267706-05081200-6242-11ea-8567-41068235616e.png). I think it shows the ease with which Oceananigans can support topography and arbitrary boundaries that could even depend on time: e.g. static cavities in ice shelves, an urban skyline, or a moving lid (non-interacting ice floe?). This method is much simpler to implement than sigma coordinates, is more flexible, and is probably pretty accurate for most problems you'd try to model with Oceananigans (i.e. we're not modeling coastlines on a sphere). Should discuss what an API for topography/boundaries would look like before finishing this PR off. See #694. X-Ref #530",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/693:15,continuous,continuous,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/693,1,['continuous'],['continuous']
Deployability,"This PR will implement support boundary conditions on immersed boundaries. The design is to add a new function to the tendency kernel function for each field that represents the contribution to the viscous / diffusive flux divergence in boundary-adjacent cells due to the user-defined immersed boundary condition. This PR will support `Flux` boundary conditions for sure. If it turns out to be simple, this PR will also support `Value` / `Gradient` boundary conditions for `ScalarDiffusivity`. There may be some challenges when `ScalarDiffusivity` is embedded in a closure tuple (ie the case we get for wall-resolved LES). Hopefully the solution to that is not too complicated. Another problem to solve is how to ""regularize"" `ContinuousBoundaryFunction`. Immersed boundary conditions are 3D, so function of `i, j, k`. Thus we need a slightly different interface for them. `discrete_form=true` will also have a different signature (`i, j, k, grid, ...` rather than `i, j, grid, ...`).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437:727,Continuous,ContinuousBoundaryFunction,727,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,This PR. - updates Docs/Grids page; - updates Docs/Architectures page; - updates Docs/Number types page; - resurrects the Docs/Callbacks page. Closes #3275; Closes #3456,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3454:11,update,updates,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3454,3,['update'],['updates']
Deployability,"This PR:; - The Langmuir example currently claims that the buoyancy flux in the 2021 paper is `2.307e-9 # m² s⁻³, surface buoyancy flux` and sets up the buoyancy flux accordingly. But the paper actually sets up a flux of `2.307e-8` so I changed that (I think it was a typo). @glwagner can you please confirm that I'm not missing anything?. - Updates the CPU -> GPU functionality done via grid constructor instead via model in the Ocean wind mixing example. Docs should render here: It should render here: https://clima.github.io/OceananigansDocumentation/previews/PR2646",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2646:342,Update,Updates,342,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2646,1,['Update'],['Updates']
Deployability,"This WIP PR implements an overturning, eddying channel example following [Abernathey et al. 2011](https://journals.ametsoc.org/view/journals/phoc/41/12/jpo-d-11-023.1.xml). This is a mesoscale turbulence problem in a channel geometry on a beta plane, forced by surface buoyancy flux and wind stress, damped by linear drag, and restored in a thin region near the northern boundary to a stable buoyancy profile, thereby forcing an overturning circulation. The script follows @sandreza's implementation at https://github.com/sandreza/Mesoscale/blob/master/oceananigans_scripts/oceananigans_makie.jl, updated for modern Oceananigans. Ultimately I hope we can run the example to equilibrium offline, on a GPU. Then, the example will use DataDeps to download a checkpoint and restart the simulation from a checkpoint, and make an animation of the turbulent, equilibrated flow integrated over a short window of time (feasible for an example). The example will thus illustrate:. * Checkpointing and picking up from a checkpoint; * Using HydrostaticFreeSurfaceModel, VerticallyStretchedRectilinearGrid, ConvectiveAdjustmentVerticalDiffusivity, channel topologies, Relaxation forcing, and BetaPlane Coriolis forcing; * using FieldTimeSeries and hopefully GLMakie to create a volume rendering of the flow",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1744:597,update,updated,597,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1744,2,"['integrat', 'update']","['integrated', 'updated']"
Deployability,This bot automatically suggests updates of GitHub action workflows.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3149:32,update,updates,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3149,1,['update'],['updates']
Deployability,"This captures a few changes, such as updates to `show`, `Callback` `parameters`, new field types, and boundary condition validation.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2172:37,update,updates,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2172,1,['update'],['updates']
Deployability,This draft PR is for bringing in support for AMD GPUs.; Status updates will be dropped in the comments.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468:63,update,updates,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468,1,['update'],['updates']
Deployability,"This fixes the error we were getting when writing `Field`s reduced over 3 dimensions to disk with `NetCDFOutputWriter` according to the upstream provided in a PR at NCDatasets: https://github.com/Alexander-Barth/NCDatasets.jl/issues/197. This PR also adds a test to catch this in the future. For now this is only working on the `master` branch of `NCDatasets` so tests should fail for now, but once a new version of NCDatasets is released I'll update the packages. Closes https://github.com/CliMA/Oceananigans.jl/issues/2857",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2865:430,release,released,430,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865,2,"['release', 'update']","['released', 'update']"
Deployability,This has drifted a bit from latest APIs. . This updates to make validation cube sphere eddying aquaplanet great again. . Will allow to be used to start testing @simone-silvestri @jm-c @glwagner fixed up immersed boundaries with functioning implicit vertical terms plus working stretched grid 👍 awesomeness.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2170:48,update,updates,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2170,1,['update'],['updates']
Deployability,"This introduces `UpwindBiasedFirstOrder` advection, and is in part inspired by #1955. This scheme is first order accurate but has the advantage of preserving positivity and extrema. The plot for convergence is updated and we see that it does have the slope that is predicted from the theory. ![convergence_rates](https://user-images.githubusercontent.com/8239041/130524906-d3afbae0-651d-4c9a-aee8-b0fb4d9dc856.png). I set the `symmetric_interpolate`'s to zero, which I think is true, but not sure if anything else should be done here.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1957:210,update,updated,210,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1957,1,['update'],['updated']
Deployability,"This is a bit more minimal:. ```julia; using Oceananigans; grid = RegularRectilinearGrid(size=(64, 64), extent=(1, 1), topology=(Periodic, Periodic, Flat)); c = CenterField(CPU(), grid); averaged_c = AveragedField(c, dims=1); ```. Then I find. ```julia; julia> @time compute!(averaged_c); 2.300619 seconds (1.85 M allocations: 121.873 MiB, 1.29% gc time, 98.45% compilation time). julia> @time compute!(averaged_c); 1.073074 seconds (1.02 M allocations: 73.454 MiB, 55.26% compilation time); ```. But mysteriously:. ```julia; julia> @time mean!(interior(averaged_c), averaged_c.operand); 0.138882 seconds (253.80 k allocations: 14.811 MiB, 99.09% compilation time). julia> @time mean!(interior(averaged_c), averaged_c.operand); 0.001370 seconds (29.41 k allocations: 988.000 KiB); ```. This doesn't really make sense, since `compute!` is just:. https://github.com/CliMA/Oceananigans.jl/blob/da9c53ddd9e28d123b40726cfac2fad835284879/src/Fields/averaged_field.jl#L105-L109. Using views is also a lot more expensive than if we extract the `parent` arrays:. ```julia; julia> @time mean!(parent(averaged_c), parent(averaged_c.operand)); 0.013767 seconds (2.19 k allocations: 157.465 KiB, 99.52% compilation time). julia> @time mean!(parent(averaged_c), parent(averaged_c.operand)); 0.000020 seconds (2 allocations: 1.469 KiB); ```. EDIT: ok, this is explanable since views are non-continuous. The above could justify special-casing `operand isa AbstractDataField` (when we know that `parent(operand)` will succeed). More notes: `mean!` ultimately calls `sum!` which is defined for Oceananigans fields here:. https://github.com/CliMA/Oceananigans.jl/blob/da9c53ddd9e28d123b40726cfac2fad835284879/src/Fields/mapreduce_abstract_fields.jl#L15. where `interior` returns a `view`:. https://github.com/CliMA/Oceananigans.jl/blob/da9c53ddd9e28d123b40726cfac2fad835284879/src/Fields/abstract_field.jl#L172-L175",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-951571646:1376,continuous,continuous,1376,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-951571646,1,['continuous'],['continuous']
Deployability,"This is a breaking change for some scripts that load, e.g., Earth's gravity from the `BuoyancyModels` module. Let's aim to release a new version when both this PR and #2979 are merged.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492610370:123,release,release,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492610370,1,['release'],['release']
Deployability,"This is a breaking change, so a patch release is in order.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2193#issuecomment-1022701614:32,patch,patch,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2193#issuecomment-1022701614,2,"['patch', 'release']","['patch', 'release']"
Deployability,"This is a temporary fix for #1280 (time stepping a model with `pickup=true` -> it blows up) until schedules can be probably checkpointed. While this is a temporary fix, it has affected a number of people already (@qwert2266, @suyashbire1, @sandreza, and now @sam12396 in #1300) so would be good to merge this and tag a new release.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1303:323,release,release,323,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1303,1,['release'],['release']
Deployability,This is a very minor update just to make the plotting command in the Ocean mixing and convection example a bit more general and self-contained. This makes it easier for people to copy-paste that snippet and have it work out of box (I do that frequently for example).,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2238:21,update,update,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2238,1,['update'],['update']
Deployability,"This is adds a pre-conditioned conjugate gradient (PCG) solver, with example working against rigid lid internal wave experiment and a single test. This is a first step toward a implicit free-surface PCG solver that can be used with general curvilinear grid finite-volume operators. . Not quite ready for merging yet. 1. we need to iterate a bit the right interface, examples/ etc... . 2. it runs kind of slow on GPU so it needs a little work on indexing and/or broadcast foo is upsetting GPU stuff. . 3. there is only one unit test with periodic bc's. we can add some more with different bc's once it runs fast on GPU. Movie shows internal wave example with PCG solver integration left and FFT solver integration right. . https://user-images.githubusercontent.com/3535328/107964974-f066ea80-6f77-11eb-8c7b-3025fdcf2a47.mp4",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1360:669,integrat,integration,669,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1360,2,['integrat'],['integration']
Deployability,This is an important tag/release because the model now has `k=1` at the bottom which effects post-processing and plotting scripts.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/494:25,release,release,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/494,1,['release'],['release']
Deployability,"This is finishing up some work I started last October on getting a WENO-5 tracer advection scheme working in Julia. Thanks @RaphaelRR for helping with the WENO-5 advection scheme!. This PR adds a 1D advection verification experiment to start exploring different advection schemes and time steppers to help us decide what to implement. I hope this PR can serve as test-driven development: Oceananigans should be able to reproduce the results of this PR, at which point it becomes a true verification experiment. `weno.jl` defines `advective_tracer_flux` functions (`weno5_flux`) so it should work nicely with the existing `Oceananigans.Operators`. At some point in the future I'd like to follow this PR up with a 2D advection test using the Munk gyre solution. Should also test momentum advection. Of course, can't always generalize 1D advection results to 3D turbulence simulations... Things to do to integrate WENO-5:; 1. Design an abstraction for selecting advection schemes.; 2. Extend to multi-dimensional advection scheme.; 3. Extend to a momentum advection scheme as well.; 4. Decide whether we want WENO-3 and/or WENO-7 (or even higher-order advection schemes). Note: On extending to multi-dimensional advection, we can perform the 1D WENO interpolation along each dimension separately to come up with a multidimensional advection scheme. This is what most packages do in practice as true multidimensional would involve huge stencils (and some numerical quadrature?) so it's not worth it for the small increase in accuracy. Doing it dimension-wise might be fine at lower order like WENO <= 7. I should cite the appropriate papers for these claims. This relatively recent paper might be of interest to us: Buchmüller & Helzel (2014), [Improved Accuracy of High-Order WENO Finite Volume Methods on Cartesian Grids](https://doi.org/10.1007/s10915-014-9825-1). Resolves #481; Resolves #934. ---; Not sure if it'll generalize to 3D but seems that you get better accuracy even with half the number of",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/592:901,integrat,integrate,901,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/592,1,['integrat'],['integrate']
Deployability,This is mostly to fix the CUDA dependency issues we're currently getting on the CI pipelines. We will live dangerously on four `#master` dependencies!; ```; ] add CuArrays#master CUDAnative#master CUDAdrv#master NNlib#master; ```,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/197:83,pipeline,pipelines,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/197,1,['pipeline'],['pipelines']
Deployability,"This is motivated by the small discussion on the slack channel and my own experiences last week trying to run some of the code there. Apparently the scripts in the `validation/` directory are not included in CI (probably because they would take too long?), but it would still be nice if they were kept up-to-date with the master branch. @glwagner mentioned the possibility of running occasional CIs specific for validation. An alternative solution might be creating a different package on github just for the validation scripts. I noticed that JuliaRegistrator creates a new PR every time one of the dependencies is updated. So, by having Oceanigans as a dependency, this process would be made automatic by that and we'd only need to update the PRs if the tests failed. Thoughts?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1634:616,update,updated,616,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1634,2,['update'],"['update', 'updated']"
Deployability,"This is my first attempt at making a version of `cell_advection_timescale` for `ShallowWaterModel`. Note that we are dividing elements of mass flux and height, which are not defined at the same cell points, but if we are looking for estimates I wonder if this will be sufficient. I have not tested this as I'm not sure how to integrate this into the rest of the code, but I thought we could try that after we agree on what the script should look like. ```; ""Returns the time-scale for advection on a regular grid across a single grid cell ; for ShallowWaterModel.""; function cell_advection_timescale(uh, vh, h, grid); umax = maximum(abs, uh / h); vmax = maximum(abs, vh / h). Δx = grid.Δx; Δy = grid.Δy. return min(Δx/umax, Δy/vmax); end. cell_advection_timescale(model) =; cell_advection_timescale(model.solution.uh.data.parent,; model.solution.vh.data.parent,; model.solution.h.data.parent,; model.grid); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-762829052:326,integrat,integrate,326,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-762829052,1,['integrat'],['integrate']
Deployability,"This is the first draft of the updated benchmark docs. There are still many things to add in such as the weak and strong scaling benchmarks, but as of now it would be greatly appreciated if I can get some feedback on suggestions on the formatting and descriptions. A few questions and notes:; 1. I do not know what the static ocean benchmark results are. There is no longer a script for it in the benchmarks folder since all the results are quite old. I feel like I should replace it with the nonhydrostatic model benchmarks if that is what makes sense.; 2. I do not know what the channel benchmark results are either. Either the script was removed, or the form of it that produced these old results have been lost under a lot of renames and refactors. ; 3. The tracers and turbulence closures benchmarks still have corresponding scripts in the benchmarks folder. They were simply replaced with newer results. The newer results also includes CPU to GPU speedup analysis, unlike the old results.; 4. The shallow water model benchmark results are the best looking ones with maximum 400 times speedup using WENO5. Graphs are also included with a quick one sentence analysis.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1930:31,update,updated,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1930,1,['update'],['updated']
Deployability,"This issue appears on v1.8.0-rc1 so I understand if it is not a priority.; Oceananigans version: So far reproduced in v0.76.6 and v0.76.5; To reproduce, in the REPL:; *The error does not prevent the fields from been created* but it is a pain to do interactive work with it.; ```julia; pkg> activate --temp; pkg> add NetCDF_jll@400.802.103, Oceananigans ; #NCDatasets latest release does not work with v1.8.0-rc1; julia> using Oceananigans; julia> grid = RectilinearGrid(CPU(),size = (10, 10),; x = (0, 100), y = (0, 100),; topology = (Periodic, Periodic, Flat), halo = (3, 3)); julia> myfield = CenterField(grid); ```. Outputs:. ```julia; Error showing value of type Field{Center, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Flat, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}:; ERROR: MethodError: no method matching initarray!(::SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}, ::typeof(Base.add_sum), ::Bool, ::SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, f",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2663:374,release,release,374,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2663,1,['release'],['release']
Deployability,"This issue appears to have magically disappeared on 0.71.6 and with Julia 1.6.5:. ```julia; gregorywagner:examples/ (glw/indices✗) $ julia --project [7:02:02]; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.5 (2021-12-19); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> using Oceananigans; [ Info: Oceananigans will use 8 threads. julia> grid = RectilinearGrid(size=(64, 64), extent=(1, 1), topology=(Periodic, Periodic, Flat));. julia> c = CenterField(grid); averaged_c = Field(Average(c, dims=1)); 1×64×1 Field{Nothing, Center, Center} reduced over dims = (1,) on RectilinearGrid on CPU; ├── data: OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, size: (1, 64, 1); ├── grid: 64×64×1 RectilinearGrid{Float64, Periodic, Periodic, Flat} on CPU with 1×1×0 halo; ├── operand: mean! over dims (1,) of 64×64×1 Field{Center, Center, Center} on RectilinearGrid on CPU; └── status: time=0.0. julia> @time compute!(c); 0.000297 seconds (1.08 k allocations: 103.719 KiB, 78.90% compilation time). julia> @time compute!(c); 0.000005 seconds; ```. I'm also not sure why the timings previously were so slow. It's more appropriate now:. ```julia; julia> using Statistics. julia> a = rand(64, 64);. julia> @time mean(a, dims=1); 0.297254 seconds (781.27 k allocations: 44.972 MiB, 5.28% gc time, 99.97% compilation time); 1×64 Matrix{Float64}:; 0.516131 0.572081 0.497259 0.422505 0.505043 0.453625 … 0.511134 0.52023 0.443803 0.503798 0.497578 0.501285. julia> @time mean(a, dims=1); 0.000014 seconds (7 allocations: 1.203 KiB); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-1059771534:419,release,release,419,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-1059771534,1,['release'],['release']
Deployability,"This issue is used to trigger TagBot; feel free to unsubscribe. If you haven't already, you should update your `TagBot.yml` to include issue comment triggers.; Please see [this post on Discourse](https://discourse.julialang.org/t/ann-required-updates-to-tagbot-yml/49249) for instructions and more details.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1154:99,update,update,99,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1154,2,['update'],"['update', 'updates-to-tagbot-yml']"
Deployability,"This issue picks up a conversation on #1544 about user interface design for stretched grids. On that PR various proposals for specifying the nodes / cell interfaces of `VerticallyStretchedRectilinearGrid` were proposed. To preface: we don't need to have a _single_ interface, since it may actually be useful to have various options for specification. Some users may want to provide arrays that specify cell interface locations, others may want to use generating functions. The currently proposed options require some understanding of the staggered grid. The current interface requires a keyword argument `zF` that specifies the location of vertical cell interfaces. #1544 proposed to change the name of this argument to `z_faces` or `z_stretch`. For this interface the meaning of the keyword argument needs to be explained in terms of the staggered grid. An alternative possibility is an interface that uses a mapping or warping function that maps from a continuous, unstretched coordinate to a stretched coordinate. This interface would then resemble the interface for `RegularRectilinearGrid` in that users would provide both `size` and `z` to specify the number of grid points and the end points of the interval. However, an additional argument such as `z_stretching` would be used to specify how the grid is compressed or stretched. One example is to generate a grid with Chebyshev spacing in z. For this a user writes. ```julia; grid = VerticallyStretchedRectilinearGrid(size = (Nx, Ny, Nz), ; x = (0, 2π),; y = (0, 2π),; z = (-1, 1),; z_stretching = z -> cos(π / 2 * (z - 1))); ```. The main difference between this type of interface and an interface using a generating function with keyword argument `z_faces` is that the number of grid points is not a parameter in the continuous map `z_stretching`. cc @francispoulin @kburns @tomchor @ali-ramadhan",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1551:955,continuous,continuous,955,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1551,2,['continuous'],['continuous']
Deployability,"This issue will help to combine several outstanding issues involving the `ShallowWaterModel.jl`. I suggest the following in this order:. - [ ] Fix inconsistent tendencies in the two models (#2928); - [ ] Fix up shallow water regression tests (#3049); - [ ] Add viscosity; - [ ] Speed up shallow water example when building docs (#3151); - [ ] Make shallow water Bickley jet less expensive (#3169); - [ ] Update immersed bondaries validation scripts (#2985); - [ ] Introduce multi-layer shallow water model (#2507); - [ ] Validate positive preserving WENO schemes. For the first part, I put together this document that shows and derives the equations for the two different models. Next I will look at the tendencies. . Any suggestions on what else to do, or what to do differently, are welcome!. [ShallowWaterModel_eqns.pdf](https://github.com/CliMA/Oceananigans.jl/files/13393977/ShallowWaterModel_eqns.pdf)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394:404,Update,Update,404,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394,1,['Update'],['Update']
Deployability,This kind of fix has indeed been discouraged in the past... Perhaps we need a new patch for NCDatasets that we can add compat for?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3777#issuecomment-2357381528:82,patch,patch,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3777#issuecomment-2357381528,1,['patch'],['patch']
Deployability,"This long overdue PR nukes `restore_from_checkpoint` and all its tests. We've decided to support ""picking up"" a simulation from a checkpoint instead via `run!(simulation, pickup=true)`. The reason is that we can only restore a limited subset of models that don't utilize user-defined functions. ""Restoring"" a model from a checkpoint is an error-prone processes, and supporting `restore_from_checkpoint` has proven difficult. Picking up via `run!(simulation, pickup=true)` has the downside of requiring the original run script to restart a simulation, but the advantage of simplicity. I've also updated the checkpointer documentation to describe `run!(simulation, pickup=true)`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1893:594,update,updated,594,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1893,1,['update'],['updated']
Deployability,This looks great! I think we can re-state light integration as a field reduction with this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3590#issuecomment-2100229281:48,integrat,integration,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3590#issuecomment-2100229281,1,['integrat'],['integration']
Deployability,"This may be the same issue that was causing our documentation builds to hang prior to #1573. It might be related to https://github.com/JuliaLang/julia/issues/40457. The fact that the problem is triggered by an update from 1.5.3 to 1.5.4 is a good clue. Have you updated your `Manifest.toml`, or is the only change the upgrade from 1.5.3 to 1.5.4?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-823969649:210,update,update,210,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-823969649,3,"['update', 'upgrade']","['update', 'updated', 'upgrade']"
Deployability,This may resolve #1601 . We'll need to test manually I think since we don't want to update the whole `Manifest.toml`.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1621:84,update,update,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1621,1,['update'],['update']
Deployability,This might coincide with tartarus' operating system upgrade.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1909#issuecomment-889256150:52,upgrade,upgrade,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1909#issuecomment-889256150,1,['upgrade'],['upgrade']
Deployability,"This might not be a great idea for distributed models because. https://github.com/CliMA/Oceananigans.jl/blob/f70d0949f7688df89a7f8a9e7d44177cde27091a/src/Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl#L62-L80. right?. As long as we don't update that often we'll be ok, but otherwise we will have to reallocate the free surface every time we change the time step (which is ok if we change infrequently, but otherwise not).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2982#issuecomment-1480369451:270,update,update,270,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2982#issuecomment-1480369451,1,['update'],['update']
Deployability,"This pull request sets the compat entry for the `AMGX` package to `0.1`.; This keeps the compat entries for earlier versions. Note: I have not tested your package with this new compat entry.; It is your responsibility to make sure that your package tests pass before you merge this pull request.; Note: Consider registering a new release of your package immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2738:330,release,release,330,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2738,1,['release'],['release']
Deployability,"This pull request sets the compat entry for the `ArrayInterface` package to `3.1`. This is a brand new compat entry. Previously, you did not have a compat entry for the `ArrayInterface` package. Note: I have not tested your package with this new compat entry. It is your responsibility to make sure that your package tests pass before you merge this pull request. Note: Consider registering a new release of your package immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1673:397,release,release,397,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1673,1,['release'],['release']
Deployability,"This pull request sets the compat entry for the `BenchmarkTools` package to `1`.; This keeps the compat entries for earlier versions. Note: I have not tested your package with this new compat entry.; It is your responsibility to make sure that your package tests pass before you merge this pull request.; Note: Consider registering a new release of your package immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2517:338,release,release,338,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2517,2,['release'],['release']
Deployability,"This pull request sets the compat entry for the `CUDA` package to `4`.; This keeps the compat entries for earlier versions. Note: I have not tested your package with this new compat entry.; It is your responsibility to make sure that your package tests pass before you merge this pull request.; Note: Consider registering a new release of your package immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3070:328,release,release,328,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3070,1,['release'],['release']
Deployability,"This pull request sets the compat entry for the `CubedSphere` package to `0.1`. This is a brand new compat entry. Previously, you did not have a compat entry for the `CubedSphere` package. Note: I have not tested your package with this new compat entry. It is your responsibility to make sure that your package tests pass before you merge this pull request. Note: Consider tagging a patch release immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1474:383,patch,patch,383,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1474,2,"['patch', 'release']","['patch', 'release']"
Deployability,"This pull request sets the compat entry for the `Glob` package to `1.3`. This is a brand new compat entry. Previously, you did not have a compat entry for the `Glob` package. Note: I have not tested your package with this new compat entry. It is your responsibility to make sure that your package tests pass before you merge this pull request. Note: Consider tagging a patch release immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1102:369,patch,patch,369,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1102,2,"['patch', 'release']","['patch', 'release']"
Deployability,"This pull request sets the compat entry for the `IncompleteLU` package to `0.2`.; This keeps the compat entries for earlier versions. Note: I have not tested your package with this new compat entry.; It is your responsibility to make sure that your package tests pass before you merge this pull request.; Note: Consider registering a new release of your package immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2124:338,release,release,338,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2124,1,['release'],['release']
Deployability,"This pull request sets the compat entry for the `IterativeSolvers` package to `0.9`.; This keeps the compat entries for earlier versions. Note: I have not tested your package with this new compat entry.; It is your responsibility to make sure that your package tests pass before you merge this pull request.; Note: Consider registering a new release of your package immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2123:342,release,release,342,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2123,1,['release'],['release']
Deployability,"This pull request sets the compat entry for the `PencilArrays` package to `0.16`.; This keeps the compat entries for earlier versions. Note: I have not tested your package with this new compat entry.; It is your responsibility to make sure that your package tests pass before you merge this pull request.; Note: Consider registering a new release of your package immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2539:339,release,release,339,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2539,1,['release'],['release']
Deployability,"This pull request sets the compat entry for the `Rotations` package to `1.0`. This is a brand new compat entry. Previously, you did not have a compat entry for the `Rotations` package. Note: I have not tested your package with this new compat entry. It is your responsibility to make sure that your package tests pass before you merge this pull request. Note: Consider tagging a patch release immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1475:379,patch,patch,379,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1475,2,"['patch', 'release']","['patch', 'release']"
Deployability,"This pull request sets the compat entry for the `SafeTestsets` package to `0.0.1`. This is a brand new compat entry. Previously, you did not have a compat entry for the `SafeTestsets` package. Note: I have not tested your package with this new compat entry. It is your responsibility to make sure that your package tests pass before you merge this pull request. Note: Consider tagging a patch release immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/898:387,patch,patch,387,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/898,2,"['patch', 'release']","['patch', 'release']"
Deployability,"This pull request sets the compat entry for the `SeawaterPolynomials` package to `0.2`. This is a brand new compat entry. Previously, you did not have a compat entry for the `SeawaterPolynomials` package. Note: I have not tested your package with this new compat entry. It is your responsibility to make sure that your package tests pass before you merge this pull request. Note: Consider tagging a patch release immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/751:399,patch,patch,399,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/751,4,"['patch', 'release']","['patch', 'release']"
Deployability,"This pull request sets the compat entry for the `Statistics` package to `1`.; This keeps the compat entries for earlier versions. Note: I have not tested your package with this new compat entry.; It is your responsibility to make sure that your package tests pass before you merge this pull request.; Note: Consider registering a new release of your package immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3366:334,release,release,334,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3366,1,['release'],['release']
Deployability,"This pull request sets the compat entry for the `Tullio` package to `0.2`. This is a brand new compat entry. Previously, you did not have a compat entry for the `Tullio` package. Note: I have not tested your package with this new compat entry. It is your responsibility to make sure that your package tests pass before you merge this pull request. Note: Consider registering a new release of your package immediately after merging this PR, as downstream packages may depend on this for tests to pass.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1563:381,release,release,381,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1563,1,['release'],['release']
Deployability,This release will go alongside the JOSS paper. Release notes:. * Support for multithreaded CPU simulations! Set the number of threads via the `JULIA_NUM_THREADS` environment variable or via the `-t` flag in Julia 1.5+.; * New `OceananigansLogger` for fancy log messages with time stamps.; * New experimental diagnostic `WindowedTimeAverage`.; * `Average` diagnostic can include or exclude halos via the `with_halos` keyword argument.; * Improved testing infrastructure made possible by splitting tests into four groups.; * Cleaned up convergence test scripts and plots. Convergence tests can be run via the `TEST_GROUP=convergence`.; * Numerous bug fixes and documentation updates.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/891:5,release,release,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/891,3,"['Release', 'release', 'update']","['Release', 'release', 'updates']"
Deployability,"This set of tests also fails at least in part because of the lack of high order WENO as in #1271 , but the plots seem to use PyPlot and I ended up just getting a bunch of blank plots. I presume we wanted to update the plotting to use something else?. But I think some of the failures are that the orders do not match the theory close enough. ```; Test Summary: | Pass Fail Total; tmp | 86 9 95; ERROR: LoadError: Some tests did not pass: 86 passed, 9 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/software/Oceananigans.jl/validation/convergence_tests/one_dimensional_advection_schemes.jl:69; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1272:207,update,update,207,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1272,1,['update'],['update']
Deployability,"This test is to stop the error below from reappearing (once the test is fixed!). . ```; nested task error: MethodError: no method matching (::Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, 1, var""#surface_wind_stress#28"", NamedTuple{(:τ₀, :Lφ, :φ₀), Tuple{Float64, Float64, Int64}}, Tuple{}, Tuple{}, Tuple{}})(::Int64, ::Int64, ::ImmersedBoundaryGrid{Float64, Bounded, Bounded, Bounded, RegularLatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, GridFittedBoundary{RasterDepthMask, var""#raster_depth#27""}}, ::Clock{Float64}, ::NamedTuple{(:u, :v, :η), Tuple{Field{Face, Center, Center, CPU, OffsetArray{Float64, 3, Array{Float64, 3}}, ImmersedBoundaryGrid{Float64, Bounded, Bounded, Bounded, RegularLatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, GridFittedBoundary{RasterDepthMask, var""#raster_depth#27""}}, Float64, FieldBoundaryConditions{BoundaryCondition{Open, Nothing}, BoundaryCondition{Open, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Oceananigans.BoundaryConditions.DiscreteBoundaryFunction{Float64, var""#u_bottom_drag#29""}}, BoundaryCondition{Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, 1, var""#surface_wind_stress#28"", NamedTuple{(:τ₀, :Lφ, :φ₀), Tuple{Float64, Float64, Int64}}, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Flux, Nothing}}}, Field{Center, Face, Center, CPU, OffsetArray{Float64, 3, Array{Float64, 3}}, ImmersedBoundaryGrid{Float64, Bounded, Bounded, Bounded, RegularLatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, GridFittedBoundary{RasterDepthMask, var""#raster_depth#27""}}, Float64, F",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1928:174,Continuous,ContinuousBoundaryFunction,174,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1928,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"This update just fixes a trivial problem with the test though, which we need so that tests pass on `main` (we can't merge any PRs until we fix this urgent issue). I suggest that we fix more substantial issues with the test in a future PR? It might be helpful to open an issue with some of your comments too @christophernhill",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002696491:5,update,update,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002696491,1,['update'],['update']
Deployability,"This warning appears in the log when we run the simulation:. ```Julia; ┌ Warning: some parameters could not be resolved for type Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center,Center,Nothing,24,Main.__atexample__named__ocean_wind_mixing_and_convection.#Qˢ,Float64,Tuple{Symbol},Tuple{Int64},Tuple{typeof(Oceananigans.Operators.identity4)}}; reconstructing; └ @ JLD2 ~/.julia/packages/JLD2/1i6ZM/src/data/reconstructing_datatypes.jl:440; ```. See, e.g., https://clima.github.io/OceananigansDocumentation/stable/generated/ocean_wind_mixing_and_convection/. Is this something we need to address or make the example better so that it does not appear? Users might be intimidated...",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1775:161,Continuous,ContinuousBoundaryFunction,161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1775,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,This was my last attempt to integrate the vertically stretched grid into Oceananigans. This branch is probably too old and stale to be rebased so I'm just opening it so we can see the state of the branch. Will probably start a new branch and copy paste a lot of this stuff into there.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1332:28,integrat,integrate,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1332,1,['integrat'],['integrate']
Deployability,"This will be one big PR that merges in; 1. code/interface documentation from docstrings,; 2. high-level documentation about the continuous equations and numerical methods employed,; 3. documentation about the verification experiments, and; 4. generated Markdown tutorials from the Literate.jl examples. Once we're happy with the documentation, we'll be ready to submit an entry to the *Journal of Open Source Software*. High-level documentation can be found at: https://www.overleaf.com/project/5d73051a46be42000164d1ef. ## Documentation contents; 1. Documentation home page (+ package description); 2. Continuous equations; 3. Numerical methods; 	1. Overview of time-stepping algorithm; 	2. Finite volume method; 	3. Staggered grid; 	4. Fractional step method; 5. Time stepping; 6. Spatial operators; 7. Poisson solvers; 8. Boundary conditions; 9. Turbulence closures; 10. Large eddy simulation; 4. Model setup (description of all the options); 5. Examples; 	1. Simple diffusion; 2. Two-dimensional turbulence; 3. Ocean wind mixing and convection; 4. Ocean convection with plankton; 5. Internal wave; 6. Thermal rising bubble?; 7. Lid-driven cavity?; 8. Eddying channel?; 6. Verification experiments; 1. Taylor-Green vortex; 2. Lid-driven cavity?; 3. Stratified Couette flow; 4. Free convection (Split into ocean and Kato & Phillips?); 7. Gallery (movies!); 8. Performance benchmarks; 9. Documentation of public (+ private?) user interface; 10. References section (if we want to store them all on one page). ## References in the docs; Unfortunately there is no support for bibtex citations/references in Documenter.jl and we have a lot of them =/ This has been brought up by @simonbyrne and @charleskawczynski: https://github.com/climate-machine/CLIMA/issues/152. For now I've just copy pasted stuff from the LaTeX document and left in the `\citet` and `\citep` commands. But we have a few options:; 1. Painstakingly format all the citations and references by hand using Markdown footnotes.; 2. Cite ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/474:128,continuous,continuous,128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/474,2,"['Continuous', 'continuous']","['Continuous', 'continuous']"
Deployability,This won't pass tests until https://github.com/CliMA/SeawaterPolynomials.jl/pull/20 is merged and registered. We also need to update `Manifest.toml`. Closes #2528. cc @sandreza,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2529:126,update,update,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2529,1,['update'],['update']
Deployability,"This works on sverdrup:. ```julia; (base) glwagner@sverdrup:Oceananigans.jl$ julia --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.1 (2021-04-23); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> using Oceananigans; [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]. julia> N = 32; 32. julia> grid = RegularRectilinearGrid(Float32, size=(N, N, N), extent=(1, 1, 1)); RegularRectilinearGrid{Float32, Periodic, Periodic, Bounded}; domain: x ∈ [0.0, 1.0], y ∈ [0.0, 1.0], z ∈ [-1.0, 0.0]; topology: (Periodic, Periodic, Bounded); resolution (Nx, Ny, Nz): (32, 32, 32); halo size (Hx, Hy, Hz): (1, 1, 1); grid spacing (Δx, Δy, Δz): (0.03125f0, 0.03125f0, 0.03125f0). julia> model = IncompressibleModel(architecture=GPU(), advection=WENO5(), clock=Clock{Float64}(0, 0, 1), buoyancy=Buoyancy(model=SeawaterBuoyancy(Float64)), grid=grid); ┌ Warning: Inflating model grid halo size to (3, 3, 3) and recreating grid. The model grid will be different from the input grid. To avoid this warning, pass halo=(3, 3, 3) when constructing the grid.; └ @ Oceananigans.Grids /archive1/glwagner/Projects/Oceananigans.jl/src/Grids/automatic_halo_sizing.jl:41; IncompressibleModel{GPU, Float32}(time = 0 seconds, iteration = 0) ; ├── grid: RegularRectilinearGrid{Float32, Periodic, Periodic, Bounded}(Nx=32, Ny=32, Nz=32); ├── tracers: (:T, :S); ├── closure: Nothing; ├── buoyancy: SeawaterBuoyancy{Float64, LinearEquationOfState{Float64}, Nothing, Nothing}; └── coriolis: Nothing. julia> time_step!(model, 1). julia> ; ```. @francispoulin can you confirm this solves #1780 ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1790#issuecomment-870953652:353,release,release,353,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1790#issuecomment-870953652,1,['release'],['release']
Deployability,"This would be nice because most people might first install Oceananigans on their laptop without a GPU or CUDA toolkit, and are greeted with error messages that e.g. CUDAdrv failed to build. While harmless errors, they don't look nice and make the package seem unstable. This would also speed up Travis CI and Appveyor builds. ---; Relevant bits from `Pkg.instantiate()`:; ```; ┌ Error: Error building `CUDAdrv`: ; │ Could not find CUDA driver library.; └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Pkg/src/Operations.jl:1075; ┌ Error: Error building `CUDAnative`: ; │ Dependent package CUDAdrv.jl has not been built successfully.; │ ; │ This is not a fatal error, but GPU functionality will be unavailable.; │ If you expected this to work, please open a thread on; │ https://discourse.julialang.org/c/domain/gpu; └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Pkg/src/Operations.jl:1075; ┌ Error: Error building `CuArrays`: ; │ Dependent package CUDAdrv.jl has not been built successfully; └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Pkg/src/Operations.jl:1075; ┌ Error: Error building `CUDAdrv`: ; └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Pkg/src/Operations.jl:1075; ┌ Error: Error building `CUDAdrv`: ; └ @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Pkg/src/Operations.jl:1075; Building SpecialFunctions → `~/.julia/packages/SpecialFunctions/fvheQ/deps/build.log`; Building LLVM ────────────→ `~/.julia/packages/LLVM/tg8MX/deps/build.log`; Building CUDAnative ──────→ `~/.julia/packages/CUDAnative/B210M/deps/build.log`; Dependent package CUDAdrv.jl has not been built successfully.; This is not a fatal error, but GPU functionality will be unavailable.; If you expected this to work, please open a thread on; https://discourse.julialang.org/c/domain/gpu; ┌ Error: Error buildin",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/178:51,install,install,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/178,1,['install'],['install']
Deployability,This would make building and deploying docs much faster and allow us to scale up to having higher-resolution examples (and more of them). X-Ref: #1051,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1053:29,deploy,deploying,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1053,1,['deploy'],['deploying']
Deployability,Time step should be updated before simulation callback/progress function,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1251:20,update,updated,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1251,1,['update'],['updated']
Deployability,"To asynchronously fill the halos of distributed fields, the code uses an incremental counter to track how many MPI requests are live and update the MPI send and receive tag. The counter is reset when communication is synchronized. As it is defined right now, the counter is always incremented at the end of a `fill_halo_regions!` on a distributed grid, irrespective of what happened in the `fill_halo_regions!`, with the assumption that all cores participate in the `fill_halo_regions!` so the counters are correctly synchronized. ; https://github.com/CliMA/Oceananigans.jl/blob/315e66bb330b44acc2a0daf74ae357ee66e801d1/src/DistributedComputations/halo_communication.jl#L117-L121. Unfortunately, I experienced a situation where this was not the case. ; In this case, I wanted to do different things on different cores, which is allowed when using the `only_local_halos = true` keyword argument (a very rare occurrence, but a possibility nonetheless). For example, if we execute this code on the main branch; ```julia; arch = Distributed(CPU()); grid = RectilinearGrid(size = (2, 2, 1), extent = (1, 1, 1)); c = Field(grid). if arch.local_rank == 0; fill_halo_regions!(c; only_local_halos = true); end; ```; The mpi_tag will be `1` on rank 0 and `0` on other ranks. This means that in subsequent halo passes, MPI will stall because it cannot match the tag between the send and receive operations of cores that communicate with rank 0. This PR fixes this issue by incrementing the counter _only_ if we have actually launched a mpi send or receive operation, that happens when at least one of the `bcs` is a distributed boundary condition _and_ `only_local_halos == false`",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3714:137,update,update,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3714,1,['update'],['update']
Deployability,"To be merged once #1093 and #1099 are in. Release notes:. * Adds support for ""picking up"" a simulation from a checkpoint via the keyword `pickup=true`, `pickup=checkpoint_iteration::Int` and `pickup=checkpont_filepath::String` in `run!(simulation)` (#1082). * Adds a function `set!(model, checkpoint_filepath)` for ""setting"" a model state to the state recorded in a checkpoint file (#1082). * Adds support for ""field-dependent"" boundary conditions similar to field-dependent forcing terms (#1093). * Beautifies and cleans up many of the examples, including getting them to build faster on Travis (#1099)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1103:42,Release,Release,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1103,1,['Release'],['Release']
Deployability,"To be sure, I didn't know that it would fail with scalars on the GPU and I don't really know why that happens... !. Note that you can also simply output a scalar to file every time-step and do the time-integration offline. JLD2 is lightning fast so you probably won't pay for that. That's actually the simplest method, and as a bonus you get the time history.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482943609:202,integrat,integration,202,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482943609,2,['integrat'],['integration']
Deployability,"To clarify: I think there is utility in a simple example. However, I also recommend using a streamfunction for idealized cases, since its easier to reproduce and understand. Idealized cases with simple geostrophic flows include experiments like the Eady turbulence problem, or LES cases that simulate turbulence in the presence of a simple geostrophic flow. Another class of experiments (likely more prevalent and important than LES around geostrophic flows?) are realistic / quasi-realistic simulations on the sphere initialized from data or complicated buoyancy distributions. For these it's often important to find a flow field that's in _discrete_ geostrophic balance with an arbitrary buoyancy field. We can show how to integrate the buoyancy field for this purpose; but having `IntegratedField` implemented will make it a bit cleaner. The problem of finding a streamfunction from a velocity field is likewise be important for simulations on the cubed sphere; or cases in which the grid coordinate system does not align with, for example, a geographic coordinate system. This is the case that @francispoulin was attempting to solve in #1826, I think. @navidcy may illustrate how to do this in post processing using the conjugate gradient solver in his horizontal convection example, perhaps.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1846#issuecomment-877651839:725,integrat,integrate,725,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1846#issuecomment-877651839,3,"['Integrat', 'integrat']","['IntegratedField', 'integrate']"
Deployability,"To summarize the updates, we can make use of the type `ConditionalOperation` to perform conditional reductions with a mask. If a mask is not specified, the specific neutral value for that particular reduction will be used. Example:. ```; julia> grid = RectilinearGrid(arch, size = (4, 1, 1), extent = (1, 1, 1)); RectilinearGrid{Float64, Periodic, Periodic, Bounded}; architecture: CPU(); domain: x ∈ [0.0, 1.0], y ∈ [0.0, 1.0], z ∈ [-1.0, 0.0]; topology: (Periodic, Periodic, Bounded); size (Nx, Ny, Nz): (4, 1, 1); halo (Hx, Hy, Hz): (1, 1, 1); spacing in x: Regular, with spacing 0.25; spacing in y: Regular, with spacing 1.0; spacing in z: Regular, with spacing 1.0. julia> field = Field{Center, Center, Center}(grid); Field located at (Center, Center, Center); ├── data: OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, size: (4, 1, 1); ├── grid: RectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=4, Ny=1, Nz=1); └── boundary conditions: west=Periodic, east=Periodic, south=Periodic, north=Periodic, bottom=ZeroFlux, top=ZeroFlux, immersed=ZeroFlux. julia> set!(field, [1, 2, 3, 4]). julia> sum(field); 10.0. julia> sum(field, condition = field .> 2); 7.0. julia> sum(field, condition = field .> 2, mask = 100); 207.0. julia> sum(field, condition = (i, j, k, grid, field) -> grid.xᶜᵃᵃ[i] < 0.3); 1.0; ```. This type is used to automatically exclude the immersed region in reductions of `AbstractField{<:Any, <:Any, <:Any, <:ImmersedBoundaryGrid}`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1018860248:17,update,updates,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1018860248,1,['update'],['updates']
Deployability,"To summarize what I think is happening: the immersed boundary is working essentially as expected in that the immersed boundary ""appears"" like a solid wall in visualization and qualitative inspection of the solution. However, small errors in both the pressure gradient and the boundary condition accumulate over the course of the simulation. The result is a realistic looking simulation with an immersed boundaries whose nonlinear trajectory gradually but persistently deviates _point-by-point_ from the ""true"" solution. We should also check the tracer budget. I expect that the tracer is not conserved due to leakage through the boundary. There is some subtlety in the implementation of the masking. Here, we only mask the _predictor velocity field_, prior to the pressure correction step. This ensures that the velocity field which is used to calculate tendency terms is divergence-free to machine precision. However, this also means that the impenetrable boundary condition is not satisfied exactly, because there is an unbalanced pressure gradient across the boundary. As a result, tracer ""leaks"" across the boundary. An alternative implementation might mask the velocity field both prior to the correction step, and when the auxiliary state is updated (as is done for `HydrostaticFreeSurfaceModel` and `ShallowWaterModel`). But this is not a cure for tracer conservation because the flux form advection schemes we use assume that the velocity field is divergence free. The upshot is that we cannot achieve tracer conservation (or momentum conservation) with immersed boundaries unless we modify the pressure solver. An easy thing to try is to use the `PreconditionedConjugateGradientSolver` to ""polish off"" the pressure field obtained from the FFT based solver such that a correct pressure field + divergence free velocity field is obtained.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-855109309:1248,update,updated,1248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-855109309,1,['update'],['updated']
Deployability,"Today @qingli411 and I attempted to install `Oceananigans` on his laptop, but ran into a problem when the HDF5 compilation (through julia) stalled for something like 15 minutes. We were only able to proceed by completely removing the dependency of `Oceananigans` on HDF5 and NetCDF (after which we got the code to run!). I think we should consider moving heavy dependencies like HDF5 and NetCDF into separate packages (say, `OceananigansOutput.jl`) to make a simple barebones installation of `Oceananigans` quick, easy, and painless.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/284:36,install,install,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/284,2,['install'],"['install', 'installation']"
Deployability,Toggle immersed differences with immersed_inactive_node,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3209:0,Toggle,Toggle,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3209,1,['Toggle'],['Toggle']
Deployability,Travis can't deploy docs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/808:13,deploy,deploy,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/808,1,['deploy'],['deploy']
Deployability,Triggers tagbot to register update to v0.53.1,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1473:28,update,update,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1473,1,['update'],['update']
Deployability,True. Quick response:. We found that if we don't have the Manifest included then different versions of packages get installed in different machines and tests break and it's a nightmare for everyone. I agree with you that in an ideal situation we should just prescribe the `compat` entries in Project.toml and that's that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2806#issuecomment-1306127523:116,install,installed,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2806#issuecomment-1306127523,1,['install'],['installed']
Deployability,"Tuple{Float64, Int64, Float64}}, ConstantCartesianCoriolis{Float64}, Nothing, NamedTuple{(:u, :v, :w), Tuple{Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, 1, typeof(drag_u), NamedTuple{(:cᴰ, :V∞), Tuple{Float64, Float64}}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity1), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing}, Field{Center, Face, Center, Nothing, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1103318508:6389,Continuous,ContinuousBoundaryFunction,6389,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1103318508,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"Tuple{Float64}}}, NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, Nothing, NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}, NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}) failed; KernelError: passing and using non-bitstype argument. Argument 13 to your kernel function is of type NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.For",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:2330,Continuous,ContinuousForcing,2330,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}}}, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Oceananigans.Solvers.FFTBasedPoissonSolver{RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, NamedTuple{(:λx, :λy, :λz), Tuple{CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}}, CUDA.CuArray{ComplexF64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Compl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:25529,Continuous,ContinuousForcing,25529,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353,3,['Continuous'],['ContinuousForcing']
Deployability,"UDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}) resulted in invalid LLVM IR; Reason: unsupported call to an unknown function (call to jl_f_getfield); Stacktrace:; [1] getindex; @ ./namedtuple.jl:136; [2] field_arguments; @ ~/OC.jl/src/Utils/user_function_arguments.jl:1; [3] user_function_arguments; @ ~/OC.jl/src/Utils/user_function_arguments.jl:21; [4] ContinuousForcing; @ ~/OC.jl/src/Forcings/continuous_forcing.jl:118; [5] u_velocity_tendency; @ ~/OC.jl/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:64; [6] macro expansion; @ ~/OC.jl/src/Models/NonhydrostaticModels/calculate_nonhydrostatic_tendencies.jl:134; [7] gpu_calculate_Gu!; @ ~/.julia/packages/KernelAbstractions/C8flJ/src/macros.jl:81; [8] gpu_calculate_Gu!; @ ./none:0; Hint: catch this exception as `err` and call `code_typed(err; interactive = true)` to introspect the erronous code with Cthulhu.jl; Stacktrace:; [1] check_ir(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), Tuple{KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 4)}, Kerne",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:2730,Continuous,ContinuousForcing,2730,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353,1,['Continuous'],['ContinuousForcing']
Deployability,"UG -DNVALGRIND -O3; MPICH CXX: c++ -DNDEBUG -DNVALGRIND -O3; MPICH F77: gfortran -fallow-argument-mismatch -O3; MPICH FC: gfortran -fallow-argument-mismatch -O3; MPICH features: ; ; [ Info: Oceananigans will use 8 threads; MPIPreferences:; binary: MPICH_jll; abi: MPICH. Package versions; MPI.jl: 0.20.19; MPIPreferences.jl: 0.1.10; MPICH_jll: 4.2.0+0. Library information:; libmpi: /Users/navid/.julia/artifacts/5c81ad3c4ead80006fae560b5e6f06fa265aefb1/lib/libmpi.12.dylib; libmpi dlpath: /Users/navid/.julia/artifacts/5c81ad3c4ead80006fae560b5e6f06fa265aefb1/lib/libmpi.12.dylib; MPI version: 4.1.0; Library version: ; MPICH Version: 4.2.0; MPICH Release date: Fri Feb 9 12:29:21 CST 2024; MPICH ABI: 16:0:4; MPICH Device: ch3:nemesis; MPICH configure: --prefix=/workspace/destdir --build=x86_64-linux-musl --host=aarch64-apple-darwin20 --disable-dependency-tracking --docdir=/tmp --enable-fast=all,O3 --enable-static=no --mandir=/tmp --with-device=ch3 --with-hwloc=/workspace/destdir FFLAGS=-fallow-argument-mismatch FCFLAGS=-fallow-argument-mismatch; MPICH CC: cc -fno-common -DNDEBUG -DNVALGRIND -O3; MPICH CXX: c++ -DNDEBUG -DNVALGRIND -O3; MPICH F77: gfortran -fallow-argument-mismatch -O3; MPICH FC: gfortran -fallow-argument-mismatch -O3; MPICH features: ; ; WARNING: Method definition test_architectures() in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:14 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition summarize_regression_test(Any, Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:32 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition center_clustered_coord(Any, Any, Any) in module Main at /Users/navid/Research/OC11.jl/test/utils_for_runtests.jl:53 overwritten on the same line (check for duplicate calls to `include`).; WARNING: Method definition boundary_clustered_coord(Any, Any, Any) in module Main at /Users/navid/Research/",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3511:13307,Release,Release,13307,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3511,1,['Release'],['Release']
Deployability,"Underlying cause seems to be https://github.com/JuliaGPU/CUDA.jl/issues/1169 so we should probably not update CUDA.jl until it's fixed. We could also pin the current version of CUDA.jl (a change which should propagate to users I think?). cc @Yixiao-Zhang. ---. **Minimal working example**. ```julia; using Oceananigans. grid = RegularRectilinearGrid(topology=(Periodic, Bounded, Bounded), size=(85, 1320, 100), extent=(1, 1, 1)); model = NonhydrostaticModel(architecture=GPU(); grid); simulation = Simulation(model, Δt=1, stop_time=10, progress = sim -> @info ""iteration $(sim.model.clock.iteration)""). V = AveragedField(model.velocities.v, dims=1); simulation.output_writers[:zonal_averages] =; NetCDFOutputWriter(model, (; V), filepath=""zonal_averages.nc"", schedule=TimeInterval(1), verbose=true). run!(simulation); ```. produces this GPU compiler error. ```julia; ERROR: LoadError: InvalidIRError: compiling kernel broadcast_kernel(CUDA.CuKernelContext, SubArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}, Tuple{UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(identity), Tuple{Base.Broadcast.Extruded{SubArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}, Tuple{UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Bool, Bool, Bool}, Tuple{Int64, Int64, Int64}}}}, Int64) resulted in invalid LLVM IR; Reason: unsupported call to an unknown function (call to julia.gpu.state_getter); Stacktrace:; [1] kernel_state_pointer; @ ~/.julia/packages/GPUCompiler/j0ybe/src/irgen.jl:695; [2] kernel_state; @ ~/.julia/packages/CUDA/dNx3X/src/device/runtime.jl:31; [3] exception_flag; @ ~/.julia/packages/CUDA/dNx3X/src/device/runtime.jl:33; [4] signal_exception; @ ~/.julia/packages/CUDA/dNx3X/src/device/runtime.jl:36; [5] multiple call sites; @ unknown:0; Stacktrace:; [1] check_ir(job::GPUCompiler.CompilerJob{G",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1995:103,update,update,103,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1995,1,['update'],['update']
Deployability,Unexpected behavior in NetCDF writer after upgrade to 0.44.2,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1227:43,upgrade,upgrade,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1227,1,['upgrade'],['upgrade']
Deployability,"Unfortunately it doesn't work for me:. ```julia; (base) tomas@np900:~/repos/Oceananigans.jl$ julia1.6 --project=docs/ -e 'using Pkg; Pkg.instantiate()'; (base) tomas@np900:~/repos/Oceananigans.jl$ julia1.6 --project=docs/ docs/make.jl; ERROR: LoadError: LoadError: LoadError: ArgumentError: Package SpecialFunctions [276daf66-3868-5448-9aa4-cd146d93841b] is required but does not seem to be installed:; - Run `Pkg.instantiate()` to install all recorded dependencies. Stacktrace:; [1] _require(pkg::Base.PkgId); @ Base ./loading.jl:990; [2] require(uuidkey::Base.PkgId); @ Base ./loading.jl:914; [3] require(into::Module, mod::Symbol); @ Base ./loading.jl:901; [4] include(mod::Module, _path::String); @ Base ./Base.jl:386; [5] include(x::String); @ CUDA ~/.julia/packages/CUDA/3VnCC/src/CUDA.jl:1; [6] top-level scope; @ ~/.julia/packages/CUDA/3VnCC/src/device/intrinsics.jl:22; [7] include(mod::Module, _path::String); @ Base ./Base.jl:386; [8] include(x::String); @ CUDA ~/.julia/packages/CUDA/3VnCC/src/CUDA.jl:1; [9] top-level scope; @ ~/.julia/packages/CUDA/3VnCC/src/CUDA.jl:46; [10] include; @ ./Base.jl:386 [inlined]; [11] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::String); @ Base ./loading.jl:1213; [12] top-level scope; @ none:1; [13] eval; @ ./boot.jl:360 [inlined]; [14] eval(x::Expr); @ Base.MainInclude ./client.jl:446; [15] top-level scope; @ none:1; in expression starting at /home/tomas/.julia/packages/CUDA/3VnCC/src/device/intrinsics/math.jl:5; in expression starting at /home/tomas/.julia/packages/CUDA/3VnCC/src/device/intrinsics.jl:22; in expression starting at /home/tomas/.julia/packages/CUDA/3VnCC/src/CUDA.jl:1; ERROR: LoadError: Failed to precompile CUDA [052768ef-5323-5732-b1bb-66c8b64840ba] to /home/tomas/.julia/compiled/v1.6/CUDA/jl_q4lPlx.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:33; [2] compile",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1707#issuecomment-849206371:391,install,installed,391,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1707#issuecomment-849206371,2,['install'],"['install', 'installed']"
Deployability,Unfortunately the PR previews are no longer showing so I'll try to update this PR...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-1106777287:67,update,update,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-1106777287,1,['update'],['update']
Deployability,Unit tests are ~~failing~~ hanging because a data dependency has been updated causing the checksum to not match. https://github.com/CliMA/OceananigansArtifacts.jl/pull/3,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1552:70,update,updated,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1552,1,['update'],['updated']
Deployability,Until we figure out why v1.3 and DEV jobs time out on GitLab CI we can just allow v1.3 to fail. v1.3 hasn't been released yet so makes sense to allow failures anyways.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/467:113,release,released,113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/467,1,['release'],['released']
Deployability,Update 3D matplotlib scripts to read NetCDF output.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/135:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/135,1,['Update'],['Update']
Deployability,Update Buildkite version on Tartarus and Sverdrup,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3751:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3751,1,['Update'],['Update']
Deployability,Update CATKE numerics and implement MEWSVerticalDiffusivity for mesoscale interfacial form stress,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2864:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2864,1,['Update'],['Update']
Deployability,Update CATKE parameters for new implicit time-stepping,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2461:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2461,1,['Update'],['Update']
Deployability,Update CUDA,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005,1,['Update'],['Update']
Deployability,Update CUDA and CUDAKernels take #2,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2255:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2255,1,['Update'],['Update']
Deployability,Update CUDA packages,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/713:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/713,1,['Update'],['Update']
Deployability,Update CUDA packages (attempt 2),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/388:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/388,1,['Update'],['Update']
Deployability,Update CUDA packages to get rid of CUDA errors on CPU and use CUDAapi.has_cuda(),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/378:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/378,1,['Update'],['Update']
Deployability,Update CUDA to v4,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2902:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2902,1,['Update'],['Update']
Deployability,Update CUDAKernels and KernelAbstractions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1830:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1830,1,['Update'],['Update']
Deployability,Update Coord system and Notation page in docs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1779:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1779,1,['Update'],['Update']
Deployability,Update CubedSpheres,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2506:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2506,1,['Update'],['Update']
Deployability,Update Docs authors,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2310:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2310,1,['Update'],['Update']
Deployability,Update Docs/API Library section,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1714:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1714,1,['Update'],['Update']
Deployability,Update Docs/Model setup pages + fix bug with `callsite=TendencyCallsite()` in Callbacks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3454:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3454,1,['Update'],['Update']
Deployability,Update Docs/Model/Output Writers to replace `FieldSlicer` -> `indices`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3350:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3350,1,['Update'],['Update']
Deployability,Update Docs/Simulation tips,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2316:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2316,1,['Update'],['Update']
Deployability,Update Documenter v0.26.2,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1387:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1387,1,['Update'],['Update']
Deployability,Update GitLab CI to run GPU code coverage,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/278:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/278,1,['Update'],['Update']
Deployability,Update JLD2 to v0.2.4,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1039:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1039,1,['Update'],['Update']
Deployability,Update Julia version warning,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3182:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3182,1,['Update'],['Update']
Deployability,Update LICENSE,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3033:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3033,1,['Update'],['Update']
Deployability,Update NCDatasets to v0.13,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3313:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3313,1,['Update'],['Update']
Deployability,Update OffsetArrays compat entry to v1.4+,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1240:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1240,1,['Update'],['Update']
Deployability,Update PencilArrays,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2552:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2552,1,['Update'],['Update']
Deployability,Update PencilArrays and PencilFFTs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2544:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2544,1,['Update'],['Update']
Deployability,Update PencilFFTs and GPUArrays and fix DistributedFFTBasedPoissonSolver,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2502:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2502,1,['Update'],['Update']
Deployability,Update Performance Benchmarks in Docs and README,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1676:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1676,1,['Update'],['Update']
Deployability,Update Physics Docs for the various Models,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1690:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1690,1,['Update'],['Update']
Deployability,Update README and fix broken links,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/608:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/608,1,['Update'],['Update']
Deployability,Update README badges,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1060:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1060,1,['Update'],['Update']
Deployability,Update README to use latest syntax,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2357:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2357,1,['Update'],['Update']
Deployability,Update README.md,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/681:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/681,2,['Update'],['Update']
Deployability,Update README: bitly to direct link,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/800:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/800,1,['Update'],['Update']
Deployability,Update README: installation instructions and development team,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/396:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/396,2,"['Update', 'install']","['Update', 'installation']"
Deployability,Update SWE immersed boundaries validation scripts,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2985:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2985,1,['Update'],['Update']
Deployability,Update Smagorinsky-Lilly model,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1908:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1908,1,['Update'],['Update']
Deployability,Update TARTARUS_HOME to `/storage5`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1920:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1920,1,['Update'],['Update']
Deployability,Update TagBot.yml,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1158:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1158,1,['Update'],['Update']
Deployability,Update `DiffusiveCFL` docstring,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/554:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/554,1,['Update'],['Update']
Deployability,Update `ImplicitFreeSurface` & `HeptadiagonalIterativeSolver` docstrings,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2621:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2621,1,['Update'],['Update']
Deployability,Update `JLD2OutputWriter` calls,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2504:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2504,1,['Update'],['Update']
Deployability,Update `NetCDFOutputWriter` docstring and clobber default,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/556:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/556,1,['Update'],['Update']
Deployability,Update `Oceananigans.CubedSpheres` to correctly import `error_if_nan_in_field`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2069:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2069,1,['Update'],['Update']
Deployability,Update `ShallowWaterModel` to use areas,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2612:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2612,1,['Update'],['Update']
Deployability,Update `TimeStepWizard`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3248:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3248,1,['Update'],['Update']
Deployability,Update `TimeStepWizard` docs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2920:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2920,1,['Update'],['Update']
Deployability,Update `Utils.versioninfo_with_gpu()`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/875:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/875,1,['Update'],['Update']
Deployability,Update `baroclinic_adjustment.jl` in validations exps,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2545:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2545,1,['Update'],['Update']
Deployability,Update `near_global_quarter_degree.jl`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2593:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2593,1,['Update'],['Update']
Deployability,Update `pressure_correct_velocities` so that `NonhydrostaticModel.velocities` are divergence-free on `ImmersedBoundaryGrid`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2892:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2892,1,['Update'],['Update']
Deployability,Update `resting_stratified_bumpy_ocean.jl`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2993:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2993,1,['Update'],['Update']
Deployability,Update `time_step!` docstring for AB2,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3674:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3674,1,['Update'],['Update']
Deployability,Update and test benchmarks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/727:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/727,1,['Update'],['Update']
Deployability,Update architecture in distributed benchmark scripts,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2338:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2338,1,['Update'],['Update']
Deployability,Update badges in README,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1092:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1092,1,['Update'],['Update']
Deployability,Update benchmarks for JOSS,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/850:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/850,1,['Update'],['Update']
Deployability,Update benchmarks.md,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2680:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2680,1,['Update'],['Update']
Deployability,Update benchmarks.md - attempt 2.0,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1952:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1952,1,['Update'],['Update']
Deployability,Update boundary_conditions.md,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1687:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1687,2,['Update'],['Update']
Deployability,Update climacommon to 2024_04_05,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3541:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3541,1,['Update'],['Update']
Deployability,Update climacommon to 2024_04_30,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3571:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3571,1,['Update'],['Update']
Deployability,Update climacommon to 2024_05_27,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3608:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3608,1,['Update'],['Update']
Deployability,Update climacommon to 2024_10_09,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3838:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3838,1,['Update'],['Update']
Deployability,Update compat entries,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1065:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1065,1,['Update'],['Update']
Deployability,Update compat for `SeawaterPolynomials`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2529:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2529,1,['Update'],['Update']
Deployability,Update contributing.md to use `main` not `master`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2994:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2994,1,['Update'],['Update']
Deployability,Update convecting plankton example to more closely resemble Taylor and Ferrari (2011),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1128:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1128,1,['Update'],['Update']
Deployability,Update cubed sphere 32 grid file sha256 checksum,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1552:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1552,1,['Update'],['Update']
Deployability,Update dependencies,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/860:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/860,10,['Update'],['Update']
Deployability,Update dependencies + use Documenter v1,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3310:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3310,1,['Update'],['Update']
Deployability,Update dependencies and use Julia 1.9.3 for CI,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3258:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3258,1,['Update'],['Update']
Deployability,Update dependency packages,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2447:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2447,1,['Update'],['Update']
Deployability,Update deps,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2919:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2919,3,['Update'],['Update']
Deployability,Update deps versions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2368:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2368,1,['Update'],['Update']
Deployability,Update dissipation and surface TKE flux parameters for CATKE,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2374:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2374,1,['Update'],['Update']
Deployability,Update docs to change `FieldSlicer` to `indices`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3348:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3348,1,['Update'],['Update']
Deployability,"Update docs to point to discussions, wiki, etc",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2474:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2474,1,['Update'],['Update']
Deployability,Update docs/docstrings,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2195:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2195,1,['Update'],['Update']
Deployability,Update docs/publications,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1598:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1598,1,['Update'],['Update']
Deployability,"Update docstrings for `{x,y,z}nodes` functions",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/877:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/877,1,['Update'],['Update']
Deployability,Update documentation links in README,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/809:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/809,1,['Update'],['Update']
Deployability,Update eady_turbulence.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1594:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1594,1,['Update'],['Update']
Deployability,Update examples and test them again,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/671:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/671,1,['Update'],['Update']
Deployability,Update examples in `README`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2168:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2168,1,['Update'],['Update']
Deployability,Update forcing function model setup documentation,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/604:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/604,1,['Update'],['Update']
Deployability,Update friction velocity definition in `stratified_couette_flow.jl`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2296:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2296,1,['Update'],['Update']
Deployability,Update grids.md,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1193:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1193,1,['Update'],['Update']
Deployability,Update installation instructions. Resolves #152,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/192:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/192,2,"['Update', 'install']","['Update', 'installation']"
Deployability,Update instructions for building docs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1707:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1707,1,['Update'],['Update']
Deployability,Update internal_wave.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/974:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/974,1,['Update'],['Update']
Deployability,Update issue referenced in `simulation_tips.md`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1887:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1887,1,['Update'],['Update']
Deployability,Update langmuir_turbulence.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1005:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1005,1,['Update'],['Update']
Deployability,Update library.md with KernelFunctionOperation,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1943:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1943,1,['Update'],['Update']
Deployability,Update lid-driven cavity validation experiment,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1516:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1516,1,['Update'],['Update']
Deployability,Update list of papers using Oceananigans,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2791:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2791,2,['Update'],['Update']
Deployability,Update make_example.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1353:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1353,1,['Update'],['Update']
Deployability,Update netcdf_output_writer.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1383:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1383,1,['Update'],['Update']
Deployability,Update new repository's URLs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/761:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/761,1,['Update'],['Update']
Deployability,Update new_data.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/992:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/992,1,['Update'],['Update']
Deployability,Update number_type.md,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3671:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3671,1,['Update'],['Update']
Deployability,Update on CATKE default parameter values?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2272:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2272,1,['Update'],['Update']
Deployability,"Update on the `multi_region_turbulence.jl` benchmark with `ExplicitFreeSurface`, alternating the `getregion` function with a `getregion_inner` to force compilation (thanks @glwagner); (ran on tartarus' CPU). | Resolution | Grid | Advection scheme | Wall time for 1000 time steps |; | ------------- | ------------- | -- | -- |; | 128^2 | `RegularRectilinearGrid` | `WENO5()` | 11.6 s |; | 128^2 | `MultiRegionGrid` | `WENO5()` | 16.7 s |; | 256^2 | `RegularRectilinearGrid` | `WENO5()` | 47.4 s |; | 256^2 | `MultiRegionGrid ` | `WENO5()` | 48.4 s |; | 512^2 | `RegularRectilinearGrid` | `WENO5()` | 190.9 s |; | 512^2 | `MultiRegionGrid ` | `WENO5()` | 183.2 s |",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1111318176:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1111318176,1,['Update'],['Update']
Deployability,Update package's dependencies,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1808:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1808,2,['Update'],['Update']
Deployability,Update packages,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/244:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/244,7,['Update'],['Update']
Deployability,Update packages and one less adapt,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1142:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1142,1,['Update'],['Update']
Deployability,Update packages for docs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1837:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1837,1,['Update'],['Update']
Deployability,Update performance benchmarks plot and discuss results,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/607:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/607,1,['Update'],['Update']
Deployability,Update public API documentation,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/560:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/560,1,['Update'],['Update']
Deployability,Update quick_start.md,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3551:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3551,1,['Update'],['Update']
Deployability,Update regression test data,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3373:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3373,1,['Update'],['Update']
Deployability,Update rising thermal bubble example in README,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/450:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/450,1,['Update'],['Update']
Deployability,Update rising thermal bubble examples in README and docs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/266:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/266,1,['Update'],['Update']
Deployability,Update several Docs sections + docstrings,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2639:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2639,1,['Update'],['Update']
Deployability,Update several packages,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1822:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1822,1,['Update'],['Update']
Deployability,Update shallow_water_Bickley_jet.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1874:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1874,1,['Update'],['Update']
Deployability,Update some deps,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2854:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2854,1,['Update'],['Update']
Deployability,Update spherical_splash.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1665:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1665,1,['Update'],['Update']
Deployability,Update staggered_grid.md,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1796:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1796,1,['Update'],['Update']
Deployability,Update stratified Couette flow verification experiment for JOSS,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/561:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/561,1,['Update'],['Update']
Deployability,Update test to also catch multiple of 16 bug,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/909:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/909,1,['Update'],['Update']
Deployability,Update thermal bubble golden master output.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/233:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/233,1,['Update'],['Update']
Deployability,Update to CUDA v2.4.0,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1296:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1296,1,['Update'],['Update']
Deployability,Update to Julia 1.4 and CUDA.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/765:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/765,1,['Update'],['Update']
Deployability,Update turbulence closures Docs section,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2287:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2287,1,['Update'],['Update']
Deployability,Update unified memory array,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3665:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3665,1,['Update'],['Update']
Deployability,Update validation for distributed simulations,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3428:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3428,1,['Update'],['Update']
Deployability,"Update: I have been able to reduce the error to be a procompiling error in oceananigans.jl:; ```; ERROR: LoadError: Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to ""/glade/u/home/knudsenl/.julia/compiled/v1.9/Oceananigans/jl_AMNEzH"".; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::IO, internal_stdout::IO, keep_loaded_modules::Bool); @ Base ./loading.jl:2300; [3] compilecache; @ ./loading.jl:2167 [inlined]; [4] _require(pkg::Base.PkgId, env::String); @ Base ./loading.jl:1805; [5] _require_prelocked(uuidkey::Base.PkgId, env::String); @ Base ./loading.jl:1660; [6] macro expansion; @ ./loading.jl:1648 [inlined]; [7] macro expansion; @ ./lock.jl:267 [inlined]; [8] require(into::Module, mod::Symbol); @ Base ./loading.jl:1611; in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:1; ```; I have been trying to make sure that everything is up to date, and I am running on Julia version 1.9.2. My code is just; ```; using Oceananingans; ```; as I have been trying to get the library to load properly. Does anyone have any experience with this error or does it make things any clearer?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233710372:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233710372,1,['Update'],['Update']
Deployability,"Update: I used the formulas in the paper to approximate the gradient of pressure. In a test case that is pressure dominated, I found that the accuracy imporoved by more than what the theory predicted (> 16), but that is very encouraging that we are doing something right. It then occurred to me that we are using centre differencing for the divergence of the transport in the evolution equation for the height. That suggests that we would probably want to use 4-th order approximations to those terms as well. Question: Since we are chaging from approximations at faces to approximations at centers, should the formuals change? I don't think they should but wanted to ask, just in case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741890419:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741890419,1,['Update'],['Update']
Deployability,"Update: I've tried the newest Oceananigans version (0.78) with Julia 1.7 and the memory allocation was almost exactly the same as with Julia 1.8. So it doesn't seem like it's the Julia version. Also relevant, as per @glwagner's comment, is that I am indeed using a vertically stretched grid. I could also run a test simulation with a regular grid and see if that decreases the allocation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299013300:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299013300,1,['Update'],['Update']
Deployability,"Update: changed the API such that it is possible to specify the preconditioner and the settings:. `preconditioner_method = :None` is no preconditioner, other methods are `:Jacobi`, `:ILUFactorization`, `:SparseInverse`, and `:SimplifiedInverse`. If nothing is specified the solver defaults to `:ILUFactorization` on `CPU` (with `τ = 0.001`) and `:SparseInverse` on `GPU` (with `ε = 0.1` and `nzrel = 1.0`). It is possible to manually specify settings but they must match the `preconditioner_method` chosen (if not defaults parameters are used). . this allowed to remove the architecture from the struct",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2105#issuecomment-996383652:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2105#issuecomment-996383652,1,['Update'],['Update']
Deployability,"Update: https://github.com/CliMA/Oceananigans.jl/pull/2253/commits/a3c297bec11791e4080f62f1d7649c4f880f7c3e brings the 128^2 multi-region time down to 6.8 s, but I think there's still a ways to go. Next up is to figure out whether communication matters at all for this timing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1107950812:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1107950812,1,['Update'],['Update']
Deployability,"Update: we have to regenerate the Hydrostatic regression data because of a bug where; `@inline znode(::Center, k, grid::LatitudeLongitudeGrid) = @inbounds grid.zᵃᵃᶠ[k]` instead of; `@inline znode(::Center, k, grid::LatitudeLongitudeGrid) = @inbounds grid.zᵃᵃᶜ[k]` (and viceversa for faces). for the rest, it should be ready to go.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1015083888:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1015083888,1,['Update'],['Update']
Deployability,"Update:. the module is functional for `ExplicitFreeSurface` `Periodic` models in x. ; There is still to address the `Face` fields in a `Bounded` direction that i am going to deal with by introducing a `Connected{LeftTopology, RightTopology}` topology. . The code is not at its maximum efficiency because we would have to restructure the `fill_halo_regions` function such that if we pass a tuple of fields they are done all at the same time (i.e., `fill_halo_west_east`, `north_south` and `top_bottom` for all the fields instead of doing them sequentially per field). This requires defining `fill_halo_west_east`, `fill_halo_north_south` and `top_bottom` for tuples. This said on a fairly large grid (`512²×30`) I get an efficiency of 78% going from 1 to 2 GPUs. I think restructuring the `fill_halo` will allow us to have decent efficiency with multi GPU on one node (at least before we start talking about implicit solvers...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1064674270:0,Update,Update,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1064674270,1,['Update'],['Update']
Deployability,Updated CUDA.jl to v2.3.0 since it was downgraded in PR #1295 for some reason. Waiting for https://github.com/JuliaGPU/CUDA.jl/pull/626 and tagged release to update to Adapt v3.0.0 as well.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1296:0,Update,Updated,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1296,3,"['Update', 'release', 'update']","['Updated', 'release', 'update']"
Deployability,Updated docs for IncompressibleModel to reflect arbitrary buoyant acceleration direction,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1736:0,Update,Updated,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1736,1,['Update'],['Updated']
Deployability,Updated the basic _mpi_shallow_water_ example to work with the latest Oceananigans.jl version,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1933:0,Update,Updated,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1933,1,['Update'],['Updated']
Deployability,Updated the branch and added tests that `backend_kw` works with `FieldTimeSeries` and `FieldDataset` so I think this PR is actually ready for review now!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3739#issuecomment-2427799618:0,Update,Updated,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3739#issuecomment-2427799618,1,['Update'],['Updated']
Deployability,Updated the matplotlib scripts that I used to produce contourf3d and pcolormesh3d plots using the NetCDF output from Oceananigans. They're now in two separate files with a more general function call for re-usability. Example output: the 3D deep convection figure in the README. @SandreOuza we can use these to make 3D plots of free convection. But a NetCDF viewer like Panoply might be better for quick inspection.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/135:0,Update,Updated,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/135,1,['Update'],['Updated']
Deployability,Updates Benchmarks environment,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2417:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2417,1,['Update'],['Updates']
Deployability,Updates Docs (Grids section),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1343:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1343,1,['Update'],['Updates']
Deployability,Updates Docs packages,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1896:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1896,1,['Update'],['Updates']
Deployability,Updates Julia requirements mentioned in README.md,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/393:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/393,1,['Update'],['Updates']
Deployability,Updates VectorInvariant advection scheme for curvilinear grids,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1391:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1391,1,['Update'],['Updates']
Deployability,Updates `CUDA.jl` and `Tullio.jl`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1579:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1579,1,['Update'],['Updates']
Deployability,Updates `Docs/Buoyancy models and equation of state` + update SeawaterPolynomials to v0.3.2,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3035:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3035,2,"['Update', 'update']","['Updates', 'update']"
Deployability,Updates `Relaxation` to work with grids with `Flat` dimensions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3383:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3383,1,['Update'],['Updates']
Deployability,Updates `distributed_nonhydrostatic_model_mpi.jl`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2432:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2432,1,['Update'],['Updates']
Deployability,Updates `docs/Manifest.toml`.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1677:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1677,1,['Update'],['Updates']
Deployability,Updates `offset_indices` docstrings,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1864:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1864,1,['Update'],['Updates']
Deployability,Updates `validation/periodic_advection.jl`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1811:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1811,1,['Update'],['Updates']
Deployability,Updates building docs instructions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1772:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1772,1,['Update'],['Updates']
Deployability,Updates buildkite pipeline,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1047:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1047,2,"['Update', 'pipeline']","['Updates', 'pipeline']"
Deployability,Updates buildkite to use Julia v1.5.4. Closes #1461.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1463:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1463,1,['Update'],['Updates']
Deployability,Updates dependencies,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3101:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3101,1,['Update'],['Updates']
Deployability,Updates dependencies versions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2489:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2489,1,['Update'],['Updates']
Deployability,Updates docstring for IncompressibleModel,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/923:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/923,1,['Update'],['Updates']
Deployability,Updates docstring for `LatitudeLongitudeGrid`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2297:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2297,1,['Update'],['Updates']
Deployability,Updates for Docs/Physics section,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2599:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2599,1,['Update'],['Updates']
Deployability,Updates models' docstrings,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2230:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2230,1,['Update'],['Updates']
Deployability,Updates notation for pressure `φ` -> `p` in tendencies docstrings,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1798:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1798,1,['Update'],['Updates']
Deployability,Updates one dimensional diffusion example to post-process output,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/803:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/803,1,['Update'],['Updates']
Deployability,Updates output writers interface to append extension automatically,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2435:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2435,1,['Update'],['Updates']
Deployability,Updates package dependencies to latest version,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1745:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1745,1,['Update'],['Updates']
Deployability,Updates packages used for building the Docs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1677:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1677,1,['Update'],['Updates']
Deployability,Updates simulation tips,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2029:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2029,1,['Update'],['Updates']
Deployability,Updates the 0.25 degree simulation to our best numerical schemes,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2593:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2593,1,['Update'],['Updates']
Deployability,Updates the `near_global_quarter_degree.jl` validation script,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2743:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2743,1,['Update'],['Updates']
Deployability,Updates to validation and docs for distributed simulations,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429:0,Update,Updates,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429,1,['Update'],['Updates']
Deployability,Upgrade KernelAbstractions to 0.8,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2899:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899,1,['Upgrade'],['Upgrade']
Deployability,Upgrade Makie,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2853:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2853,1,['Upgrade'],['Upgrade']
Deployability,Upgrade NCDatasets to 0.12,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2313:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2313,1,['Upgrade'],['Upgrade']
Deployability,Upgrade NetCDF output writer to write arbitrary outputs for LESbrary use,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/643:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/643,1,['Upgrade'],['Upgrade']
Deployability,Upgrade StructArrays to v0.6,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1785:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1785,1,['Upgrade'],['Upgrade']
Deployability,Upgrade TimeStepWizard to support model spinup?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/356:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/356,1,['Upgrade'],['Upgrade']
Deployability,Upgrade fields to store boundary conditions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/631:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/631,1,['Upgrade'],['Upgrade']
Deployability,Upgrade to CUDA v2,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1106:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1106,1,['Upgrade'],['Upgrade']
Deployability,Upgrade to CUDA v2.3.0?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1220:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1220,1,['Upgrade'],['Upgrade']
Deployability,Upgrade to CUDA.jl v1.0.0,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/776:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/776,1,['Upgrade'],['Upgrade']
Deployability,Upgrade to GPUifyLoops v0.2.0 and latest CUDA* packages.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/153:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/153,1,['Upgrade'],['Upgrade']
Deployability,Upgrade to Julia 1.6,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514,1,['Upgrade'],['Upgrade']
Deployability,Upgrade to Julia v1.9.2,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3175:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3175,1,['Upgrade'],['Upgrade']
Deployability,Upgrade to single/unified stretched vertical grid spacing 3D elliptic solver?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/211:0,Upgrade,Upgrade,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/211,1,['Upgrade'],['Upgrade']
Deployability,Upgraded the free convection example.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/173:0,Upgrade,Upgraded,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/173,1,['Upgrade'],['Upgraded']
Deployability,Upgrades `KernelAbstractions` with pinned `GPUCompiler`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2900:0,Upgrade,Upgrades,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900,1,['Upgrade'],['Upgrades']
Deployability,"Upon thinking about it I think perhaps it makes more sense to run `dynamics` first before `advect_lagrangian_particles!`, one example of which might be that particles sink depending on the radius of the particle, which changes with time. In such a case it is perhaps better to evolve the particle radius, then compute the sinking velocity given the new radius before advective it. Also provided a draft example of how one could set up a problem where the particle sinks with a drag in the form of $\frac{d \boldsymbol{v}}{dt} = \frac{C_d}{\tau}(\boldsymbol{u} - \boldsymbol{v})$. ; Note: in the calculation the velocity of the particle itself needs to be tracked. This is done in `u_particle`, `v_particle`, and `w_particle` in `particles.properties` where `particles::LagrangianParticles`. The particle velocities are computed and updated in the `dynamics` step, then `ParticleVelocities` only has functions that access the particle properties to grab the particle velocity. It is slightly clunky but unless we keep track of the particle velocities right out of the box and update them during the `advect_lagrangian_particles!` step, this is the way I could think of. Since particle velocities are not updated when the particle is bounced, it will not work if the particles bounce from the boundaries back into the interior during the advection step, but for doubly-periodic domian and sinking particles it might not be very important.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1872156350:832,update,updated,832,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1872156350,3,['update'],"['update', 'updated']"
Deployability,Use grids' native coordinates in continuous BCs,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3074:33,continuous,continuous,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3074,1,['continuous'],['continuous']
Deployability,Use latest Julia in buildkite pipeline,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1236:30,pipeline,pipeline,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1236,1,['pipeline'],['pipeline']
Deployability,"Using the code from `fjp/benchmark-incompressiblemodel-WENO5` branch I get this:. ```Julia; julia> using Oceananigans; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/E3Wer/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads. julia> N = 32; 32. julia> grid = RegularRectilinearGrid(Float32, size=(N, N, N), extent=(1, 1, 1)); RegularRectilinearGrid{Float32, Periodic, Periodic, Bounded}; domain: x ∈ [0.0, 1.0], y ∈ [0.0, 1.0], z ∈ [-1.0, 0.0]; topology: (Periodic, Periodic, Bounded); resolution (Nx, Ny, Nz): (32, 32, 32); halo size (Hx, Hy, Hz): (1, 1, 1); grid spacing (Δx, Δy, Δz): (0.03125f0, 0.03125f0, 0.03125f0). julia> model = IncompressibleModel(architecture=GPU(), float_type=Float32, advection=WENO5(), grid=grid); ┌ Warning: Inflating model grid halo size to (3, 3, 3) and recreating grid. The model grid will be different from the input grid. To avoid this warning, pass halo=(3, 3, 3) when constructing the grid.; └ @ Oceananigans.Grids /g/data/v45/nc3020/Oceananigans.jl/src/Grids/automatic_halo_sizing.jl:41; IncompressibleModel{GPU, Float32}(time = 0 seconds, iteration = 0); ├── grid: RegularRectilinearGrid{Float32, Periodic, Periodic, Bounded}(Nx=32, Ny=32, Nz=32); ├── tracers: (:T, :S); ├── closure: Nothing; ├── buoyancy: SeawaterBuoyancy{Float32, LinearEquationOfState{Float32}, Nothing, Nothing}; └── coriolis: Nothing. julia> time_step!(model, 1); ERROR: InvalidIRError: compiling kernel gpu_calculate_Gw!(Cassette.Context{nametype(CUDACtx), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(32, 32, 32)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(2, 2, 32)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}}, Nothing, KernelA",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870162360:257,Configurat,Configuration,257,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-870162360,1,['Configurat'],['Configuration']
Deployability,"U}}, Tuple{CPU, CPU}}, Tuple{CPU, CPU}, CPU}, MultiRegionObject{Tuple{Tuple{Colon, Colon, Colon}, Tuple{Colon, Colon, Colon}}, Tuple{CPU, CPU}}, MultiRegionObject{Tuple{OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}}, Tuple{CPU, CPU}}, Any, MultiRegionObject{Tuple{FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(ℑxyᶠᶜᵃ)}}}, Nothing}}, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:30865,Continuous,ContinuousBoundaryFunction,30865,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,Vertically stretched grid integration attempt #1 post-mortem,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1332:26,integrat,integration,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1332,1,['integrat'],['integration']
Deployability,"Very sorry for the problems that you found but I'm glad you found them. I believe when @ali-ramadhan and I put this together we were following other examples but I definitely should have been more careful. Just so that I understand, instead of having `momentum_flux_huu, advection` and `transport_tracer_flux_x` we should have had something involving the area? I'm happy to help fix this where I can. As for computing the velocity, I hope we can fix that soon as well. I know that `ShallowWaterModel` is a bit odd as we integrate the mass transports, not the velocities, but we do use the velocity a lot. I wonder if it's worth while computing the velocities (correctly) and then storing those. That should certainly help when we add in `closure` schemes, since those should be based on the velocities, for the most part. One option would be to add `model.velocities,u` and something similar for `v`, and then access them when we need them. That has the unfortuante effect of storing 5 instead of 3 fields, so it would make things more memory intensive. I don't know if it's better to just compute the velocities everytime we need them?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1866#issuecomment-882601937:520,integrat,integrate,520,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1866#issuecomment-882601937,1,['integrat'],['integrate']
Deployability,WENO5 is much slower on GPUs after Julia 1.6 upgrade,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764:45,upgrade,upgrade,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764,1,['upgrade'],['upgrade']
Deployability,WVsZF90dXBsZXMuamw=) | `72.09% <0.00%> (-1.72%)` | :arrow_down: |; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `25.00% <0.00%> (ø)` | |; | [src/Models/Models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9Nb2RlbHMuamw=) | `100.00% <0.00%> (ø)` | |; | [src/TimeSteppers/store\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9zdG9yZV90ZW5kZW5jaWVzLmps) | `72.72% <0.00%> (ø)` | |; | [src/TimeSteppers/clock.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9jbG9jay5qbA==) | | |; | [...dels/IncompressibleModels/non\_dimensional\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9ub25fZGltZW5zaW9uYWxfbW9kZWwuamw=) | | |; | [...ncompressibleModels/update\_hydrostatic\_pressure.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy91cGRhdGVfaHlkcm9zdGF0aWNfcHJlc3N1cmUuamw=) | | |; | [.../Models/ShallowWaterModels/calculate\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9TaGFsbG93V2F0ZXJNb2RlbHMvY2FsY3VsYXRlX3RlbmRlbmNpZXMuamw=) | | |; | [.../IncompressibleModels/show\_incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9zaG93X2luY29tcHJlc3NpYmxlX21vZGVsLmps) | | |; | ... and [28 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impa,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1120#issuecomment-719683146:2321,update,update,2321,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1120#issuecomment-719683146,1,['update'],['update']
Deployability,"Waiting until closer to v1.0 sounds like a good plan. Although I have no idea how close we are to that goal. > I think the main downside of a separate package is that we have to maintain two CI pipelines, two docs, etc. My idea about separating the Poisson solvers specifically was mainly motivated by my perception that that part of code the changes very rarely compared to the other parts. Thus the extra level of maintenance would be low. Although I might be wrong in my impression! . I also like the idea of separating other aspects of the code like @glwagner proposed. Although I don't have much of a feel of the work needed for those.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1553#issuecomment-815114009:194,pipeline,pipelines,194,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1553#issuecomment-815114009,1,['pipeline'],['pipelines']
Deployability,"Wall-normal velocities can depend on `model_fields`:. https://github.com/CliMA/Oceananigans.jl/blob/5aafe8ee1d3e49a53906e7225a01fc18f1a5f165/src/BoundaryConditions/fill_halo_regions_normal_flow.jl#L15-L18. and wall-normal velocities are updated _after_ an RK3 substep, but _before_ the pressure solve:. https://github.com/CliMA/Oceananigans.jl/blob/5aafe8ee1d3e49a53906e7225a01fc18f1a5f165/src/TimeSteppers/pressure_correction.jl#L6-L10. Thus for some problems the wall-normal velocity fields are updated based on the predictor model fields (both the predictor velocity and the updated tracer fields) that result from an RK3 substep. This devious bug can be avoided simply by _not updating wall-normal velocity components on the boundary_ in the RK3 substep by changing the indexing in the rk3 substep as well as the worksize here:. https://github.com/CliMA/Oceananigans.jl/blob/5aafe8ee1d3e49a53906e7225a01fc18f1a5f165/src/TimeSteppers/runge_kutta_3.jl#L124. Then we don't have to fill halo regions before performing the pressure correction. The resulting algorithm is both more correct and computationally less expensive. Note that doing this could require a bit of gymnastics to get the indexing right in the rk3 substep kernel:. https://github.com/CliMA/Oceananigans.jl/blob/5aafe8ee1d3e49a53906e7225a01fc18f1a5f165/src/TimeSteppers/runge_kutta_3.jl#L178-L186",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1156:237,update,updated,237,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1156,3,['update'],['updated']
Deployability,Was the patch version bumped?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2564#issuecomment-1131227485:8,patch,patch,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2564#issuecomment-1131227485,1,['patch'],['patch']
Deployability,"We can add the doctest later, with the filter or without. Adding the doctest is not a breaking change. But this PR is and we want to release v0.80",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474291217:133,release,release,133,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474291217,1,['release'],['release']
Deployability,"We can also entertain helpers for ""linear"" and ""quadratic"" drag. But I think we should wait to see whether this is needed, or whether it's easy enough to write it out using `ContinuousBoundaryFunction` as illustrated.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2407#issuecomment-1085082408:174,Continuous,ContinuousBoundaryFunction,174,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2407#issuecomment-1085082408,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"We currently have a `Timeseries` diagnostic which accumulates the output of `some_function(model)` in a vector `data`. . It'd be nice to have a simple way to save a timeseries to file. The problem is that we don't want to duplicate data; eg we want to periodically append data to an array that was previously saved in a file. . Note that it is not possible to, for example, delete data within a `JLD2` file and replace it with something else:. https://github.com/JuliaIO/JLD2.jl/issues/38. @ali-ramadhan @suyashbire1 is this possible in NetCDF / `NCDatasets.jl`?. There are two other possibilities. One is to ""unspool"" the time series into a `group` within a `JLD2` file and write the data from each time stamp individually in the file. This allows new data to be appended to the group easily. I'm not sure how performant this would be, but perhaps its fine. The second is to simply delete the old file and replace it with a new one with the updated time series. This is the hack that I've been using so far. The downside is that we have to save each timeseries in their own file. Curious to hear if there are any other ideas for solving this problem.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/502:942,update,updated,942,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/502,1,['update'],['updated']
Deployability,We have switched to using that recently in the distributed test suite:; https://github.com/CliMA/Oceananigans.jl/blob/3c95e7ee6772a2597e206ae35202500be1ef5b32/.buildkite/distributed/pipeline.yml#L1-L20,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328824617:182,pipeline,pipeline,182,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328824617,1,['pipeline'],['pipeline']
Deployability,"We have the need for continuous (not discrete) boundary condition functions that depend on the field to which the boundary condition is applied. For example, in the `ocean_convection_and_wind_mixing.jl`, the prescribed salinity flux depends on the salinity adjacent to the boundary:. https://github.com/CliMA/Oceananigans.jl/blob/f13a0a26df78cd1c1495d56ef5e7ea2fbbbfb23c/examples/ocean_wind_mixing_and_convection.jl#L73. The linear drag boundary condition implemented in `eady_turbulence.jl` is similar:. https://github.com/CliMA/Oceananigans.jl/blob/f13a0a26df78cd1c1495d56ef5e7ea2fbbbfb23c/examples/eady_turbulence.jl#L60. A slightly simpler interface would allow users to implement the salinity flux (for example) with. ```julia; Qˢ(x, y, t, S, evaporation) = - evaporation * S; ```. For this to work, a number of changes must be made in `BoundaryFunction`, `BoundaryCondition`, `FieldBoundaryConditions`, and the `TracerFields` constructor:. - `BoundaryFunction` must record whether or not the function is `field_dependent`, as well as the ""`side`"" of the boundary condition (left or right, so that the wall-normal index may be inferred), the `field_name`, and the `field_container` in which the field lives (`model.velocities` or `model.tracers`). - `BoundaryCondition` must provide the option `field_dependent=true`. - `FieldBoundaryConditions` must supply the `side` at which the boundary condition is applied (`Left()` for west, south, bottom and `Right()` for east, north, and top). - `TracerFields` must supply the tracer name. New methods for field-dependent `BoundaryFunction`s are also required. For `z`-boundaries, for example, we need. ```julia; @inline function (bc::BoundaryFunction{:z, X, Y, true})(j, k, grid, clock, state) where {X, Y}; k = wall_adjacent_index(bc.side, grid.Nz); container = getproperty(state, bc.field_container); field = getproperty(container, bc.field_name); ; return @inbounds call_boundary_function(bc.func, xnode(X, i, grid), ynode(Y, j, grid), clock.time, f",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/897:21,continuous,continuous,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/897,1,['continuous'],['continuous']
Deployability,We haven't updated the parameters yet --- @adelinehillier any news on that front?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2461#issuecomment-1107997633:11,update,updated,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2461#issuecomment-1107997633,1,['update'],['updated']
Deployability,"We need a diagnostic to compute the horizontal average of terms like `K * dT/dz` which can't be done with the existing `HorizontalAverage` diagnostic. I have an implementation that needs to be polished up, and may take a bit of thought if we want to integrate it with the existing diagnostics:; https://github.com/ali-ramadhan/seasonal-cycle-mixed-layers/blob/6e9834000561bdbbbcb9812e87f8dbdd876e48b0/simulation/deepening_mixed_layer.jl",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/428:250,integrat,integrate,250,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/428,1,['integrat'],['integrate']
Deployability,"We need a generic type that represents a reduction operation over a field that can be used both by the user to compute arbitrary reductions on the fly, and also for integration into `AbstractOperations`. One way to accomplish this is to define a new field that looks something like. ```julia; struct ReducedField{X, Y, Z, A, G, O, D, I} <: AbstractLocatedField{X, Y, Z, G}; data :: A; grid :: G; reduction! :: O; dims :: D; input :: I; end; ```. here `data` and `grid` are an array and grid similar to an ordinary `Field`, except that `data` is reduced along the tuple of dimensions in `dims`. The `input` is the 3D field / OffsetArray on which the reduction is performed. The function `reduction` performs the reduction; eg. ```julia; U = ReducedField(mean, model.velocities.u, dims=(1, 2)); ```. Returns an object `U` that represents the average of `model.velocities.u` over dims `(1, 2)` (x and y). We can also write wrappers / translators that allow dimensions to be referenced by name rather than number (integration with DimensionalData.jl would help in this respect). . Computing a reduction would look something like. ```julia; function compute!(reduced); zero_halo_regions!(parent(reduced.data), model.grid); reduced.reduction!(parent(reduced.data), parent(reduced.input), dims=reduced.dims); return nothing; end; ```. Note that `mean` requires a special implementation since we have to use `sum!` followed by normalization. But this is not too onerous; we can dispatch on that scenario, and other scenarios that require special implementation not covered by the generic version above. We can then integrate `ReducedField`s into abstract operations so we can calculate things like. ```julia; u, v, w = model.velocities. U = ReducedField(mean, u, dims=(1, 2)); V = ReducedField(mean, v, dims=(1, 2)). turbulent_kinetic_energy = @at (Cell, Cell, Cell) ( (u - U)^2 + (v - V)^2 + w^2 ) / 2; ```. This is a little tricky and requires the analysis of an operation tree to deduce which operations mu",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/525:165,integrat,integration,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/525,2,['integrat'],['integration']
Deployability,"We need a user interface for building `Field` from boundary conditions. Such a utility is model-specific. Right now, users have to do something like this (to get the bottom boundary condition, for example):. ```julia; using Oceananigans.BoundaryConditions: getbc; using Oceananigans: fields. # Boundary condition extractor in ""kernel function form""; @inline kernel_getbc(i, j, k, grid, boundary_condition, clock, fields) =; getbc(boundary_condition, i, j, grid, clock, fields). # Kernel arguments; grid = model.grid; clock = model.clock; model_fields = merge(fields(model), model.auxiliary_fields); u, v, w = model.velocities; u_bc = u.boundary_conditions.bottom; v_bc = v.boundary_conditions.bottom. # Build operations; u_bc_op = KernelFunctionOperation{Face, Center, Nothing}(kernel_getbc, grid, u_bc, clock, model_fields); v_bc_op = KernelFunctionOperation{Center, Face, Nothing}(kernel_getbc, grid, v_bc, clock, model_fields); ```. A few observations:. * It's annoying to have to define the wrapper `kernel_getbc`. I don't know if there's a clean way around this. We could update `getbc` to be closer to ""kernel form"", but I'm not sure we want to add the third index when its unused. We could make two-index kernel functions work with `KernelFunctionOperation`, leveraging `Nothing` location --- that might be clean.; * This is model specific because we have to keep track of the arguments passed to `getbc`. Maybe we want to codify that better, ie by using a function `boundary_condition_fields`. I think a user API could look like. ```julia; u_bottom_bc_op = boundary_condition_operation(u, :bottom, model); ```. This came up on #3081",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3082:1077,update,update,1077,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3082,1,['update'],['update']
Deployability,"We need an MPI tips / wiki section... been working on getting distributed simulations running on Engaging since yesterday (we need people to be able to start running distributed simulations immediately with minimal start up time). Here are a few things I learned:. * Remember to load a system MPI on your HPC, eg `module load openmpi`; * MPI may have to be installed / configured carefully --- after loading a system MPI. `MPIPreferences` can help:. ```julia; using MPIPreferences; MPIPreferences.use_system_binary(); ```. https://juliaparallel.org/MPI.jl/stable/configuration/. * Configuring SLURM correctly may also require some trial and error, because the documentation is unclear and there are a huge number of options. I can't figure out if the documentation is wrong, in fact, or if instead the engaging cluster does not support some options. Either way, a small test script like. ```julia; using MPI. MPI.Init(); @show MPI.Comm_rank(MPI.COMM_WORLD); @show MPI.Comm_size(MPI.COMM_WORLD); ```. Is helpful for debugging. Also, I recommend first trying to start jobs interactively before using `sbatch`. Interactive jobs launch faster, so we get a faster trial-error iteration. I'm still working on things, but it seems like another point may be salient:. * Initialize / precompile outside of a parallel job before trying to launch a parallel job via `mpiexec`. Here are some notes that may be specific to engaging:. I'm using `srun` to get a 4-GPU node to use interactively:. ```; srun -p my_partition --tasks-per-node=4 --cpus-per-task=32 --gres=gpu:4 --gpus-per-node=4 --mem=0 -t 01:00:00 -N 1; ```. it seems we have to use the option `gpus-per-node`, rather than setting the total number of GPUs. Also we redundantly also have to specify `gres=gpu:4` (`gres` stands for ""generalized resource""). Why `gres` can't tell what `gpus-per-node` is, I don't know. `-N 1` means 1 node. Finally we also have to specify ``--tasks-per-node=4` (matching `gres` _and_ the number of GPUs per node), otherwise",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2389107436:357,install,installed,357,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2389107436,4,"['configurat', 'install']","['configuration', 'installed']"
Deployability,We need https://github.com/CliMA/OrthogonalSphericalShellGrids.jl/pull/44 + a new release of OrthogonalSphericalShellGrids.jl otherwise the cyclical dependency blocks Oceananigans from bumping minor version.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3860#issuecomment-2436720325:82,release,release,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3860#issuecomment-2436720325,1,['release'],['release']
Deployability,We need this to tag a new release.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1576:26,release,release,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1576,1,['release'],['release']
Deployability,"We need to implement a forward Euler time-stepping scheme, which is useful for testing if for nothing else. We need also better and more stable time-steppers. One option is to implement by hand a 3rd-order low storage Runge Kutta scheme. Another interesting avenue is to figure out how to integrate with `DifferentialEquations.jl`, which would give us access to a large number of new time-steppers (issue #391). However, we are unsure how this would couple with the our incoming GPU tridiagonal solvers for implicit time-stepping.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/506:289,integrat,integrate,289,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/506,1,['integrat'],['integrate']
Deployability,We need to updated the `docs/contributing.md` as well!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1765#issuecomment-868117151:11,update,updated,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1765#issuecomment-868117151,1,['update'],['updated']
Deployability,We need to upgrade our testing infrastructure soon-ish.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/139:11,upgrade,upgrade,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/139,1,['upgrade'],['upgrade']
Deployability,We need updated KernelAbstractions as well as the varargs fix on kernel parameters for type stability. This merge combines the PRs for both of these improvements into one.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3603:8,update,updated,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3603,1,['update'],['updated']
Deployability,"We never made one. Might be good to do some advertising, point to the examples, and say it's ready for research use. https://discourse.julialang.org/c/community/packages/47. TODO (by @glwagner):. * [ ] stabilze JLD2OutputWriter API (resolve #963); * [ ] update README (resolve #961); * [ ] a few more cool movies (we can just pluck from current projects, eg eady turbulence, boundary layer turbulence, Andre’s); * [ ] YouTube channel for the movies?; * [ ] More benchmarks",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1111:254,update,update,254,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1111,1,['update'],['update']
Deployability,We only put the no normal gradient matching scheme in the source code which just overwrites the boundary point so this wasn't a problem. I though we weren't going to put lots of matching schemes in the source code since its not clear what is the best/correct. We could put in a simple scheme that integrates the boundary point if that would be better?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2391286794:297,integrat,integrates,297,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810#issuecomment-2391286794,2,['integrat'],['integrates']
Deployability,We probably just have to update this line https://github.com/CliMA/Oceananigans.jl/blob/c7c9a3b41452a7f3934ba2903faa7df149c5d794/src/Architectures.jl#L60,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1524#issuecomment-811477318:25,update,update,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1524#issuecomment-811477318,1,['update'],['update']
Deployability,We should also bump the patch version number by editing `Project.toml` so this gets captured by a tagged release I think. I can do that if you like!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1935#issuecomment-900464441:24,patch,patch,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1935#issuecomment-900464441,2,"['patch', 'release']","['patch', 'release']"
Deployability,"We should give some basic info, e.g. link to instructions for installing CUDA, how to check that your GPU is compatible, etc.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/483:62,install,installing,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/483,1,['install'],['installing']
Deployability,"We should have a way to mask the tracers for sure. On the other hand, in our current algorithm we do not ""use"" immersed ""halo"" nodes because we impose a no-flux condition by just setting to zero the fluxes on the immersed boundaries - opposed to actual boundaries where the ""no-flux"" condition is imposed by mirroring the values outside the boundary and explicitly calculating a flux. For this reason, we don't need to mask the tracer within the time integration. So, it is not necessary, but It is definitely a function we want to allow...; I see the confusion, what I meant is we need to remove it if it is done within the time stepping, but we leave the functionality there",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2249#issuecomment-1042502180:451,integrat,integration,451,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2249#issuecomment-1042502180,1,['integrat'],['integration']
Deployability,"We should look into using `mapreduce` as a way of computing reduced grid metrics and statistics using abstract operations. This could speed up `AveragedField` (and upcoming `SummedField`, `IntegratedField`, etc.) and make them lighter by not having to store a scratch space. There are two methods for `mapreduce`:. ```julia; mapreduce(f, op, itrs...; [init]); mapreduce(f, op, A::AbstractArray...; dims=:, [init]); ```. The first one might be useful for abstract operations (as long as `getindex` is defined?). Might be useful to do a bit of benchmarking to see if we can use them (and potentially get rid of some existing code). The second function I guess would only be useful if we already have a `ComputedField` with an array. We already use `mapreduce` a bit (the second method) but crucially we needed to pass in a view into a `CuArray` (and not a view into an `OffsetArray{CuArray}`): https://github.com/CliMA/Oceananigans.jl/blob/master/src/Solvers/preconditioned_conjugate_gradient_solver.jl#L57-L58",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1422:189,Integrat,IntegratedField,189,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1422,1,['Integrat'],['IntegratedField']
Deployability,"We should merge this after PR #805. # Release notes. This release fixes a major bug where you couldn't run GPU models so if you're using GPUs you should upgrade to this version. **Oceananigans.jl now requires Julia 1.4+.**. Major changes:; * Updated the backend to use [KernelAbstractions.jl](https://github.com/JuliaGPU/KernelAbstractions.jl) instead of [GPUifyLoops.jl](https://github.com/vchuravy/GPUifyLoops.jl).; * Updated to using [CUDA.jl](https://github.com/JuliaGPU/CUDA.jl) instead of CuArrays.jl, CUDAnative.jl, and CUDAdrv.jl.; * Updated and slightly expanded the model setup documentation.; * Added a bibliography and citations to the documentation.; * Generalized `ConstantIsotropicDiffusivity` and `ConstantAnisotropicDiffusivity` to accept functions of `x, y, z, t` as well as constants. These types are called `IsotropicDiffusivity` and `AnisotropicDiffusivity`; `ConstantIsotropicDiffusivity` and `ConstantAnisotropicDiffusivity` aliases are provided for backwards compatibility.; * Lots of new convergence tests confirming the accuracy of the model!",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/810:38,Release,Release,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/810,6,"['Release', 'Update', 'release', 'upgrade']","['Release', 'Updated', 'release', 'upgrade']"
Deployability,We should probably register a new version after this (no need to bump version). I think there are some bug fixes that haven't been captured in a release,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2549#issuecomment-1125341674:145,release,release,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2549#issuecomment-1125341674,1,['release'],['release']
Deployability,We should tag and release v0.40.0 once PR #1020 is merged since GPU tests fail on v0.39.0 and #1020 fixes things so all tests pass.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1021:18,release,release,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1021,1,['release'],['release']
Deployability,"We test `ContinuousForcing` on the GPU. For example:. https://github.com/CliMA/Oceananigans.jl/blob/d0ed71db9a294c344a1fa76f558767f57456d14b/test/test_forcings.jl#L93-L108. but changing this test to involve `AnisotropicMinimumDissipation` makes it fail, eg:. ```julia; function relaxed_time_stepping(arch); x_relax = Relaxation(rate = 1/60, mask = GaussianMask{:x}(center=0.5, width=0.1), ; target = LinearTarget{:x}(intercept=π, gradient=ℯ)). y_relax = Relaxation(rate = 1/60, mask = GaussianMask{:y}(center=0.5, width=0.1),; target = LinearTarget{:y}(intercept=π, gradient=ℯ)). z_relax = Relaxation(rate = 1/60, mask = GaussianMask{:z}(center=0.5, width=0.1),; target = π). grid = RegularCartesianGrid(size=(1, 1, 1), extent=(1, 1, 1)) ; model = IncompressibleModel(grid=grid,; architecture=arch,; closure=AnisotropicMinimumDissipation(),; forcing=(u=x_relax, v=y_relax, w=z_relax)); time_step!(model, 1, euler=true). return true; end; ```. produces something like. ```; [2020/10/13 17:36:39.154] INFO Testing relaxation forcing functions [GPU]...; Relaxation forcing functions [GPU]: Error During Test at /archive1/glwagner/Projects/Oceananigans.jl/test/test_forcings.jl:145; Test threw exception; Expression: relaxed_time_stepping(arch); InvalidIRError: compiling kernel gpu_calculate_Gu!(Cassette.Context{nametype(CUDACtx),KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)},KernelAbstractions.NDIteration.DynamicCheck,Nothing,Nothing,KernelAbstractions.NDIteration.NDRange{3,KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)},KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)},Nothing,Nothing}},Nothing,KernelAbstractions.var""##PassType#253"",Nothing,Cassette.DisableHooks}, typeof(Oceananigans.TimeSteppers.gpu_calculate_Gu!), OffsetArray{Float64,3,CuDeviceArray{Float64,3,CUDA.AS.Global}}, RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, Cen",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1059:9,Continuous,ContinuousForcing,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1059,1,['Continuous'],['ContinuousForcing']
Deployability,"We think there is a race condition in the CI. Partly discussed on #3661 and also #3662, although one conclusions is that we should update to use the buildkite plugin (started on #3042)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3751#issuecomment-2322236885:131,update,update,131,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3751#issuecomment-2322236885,1,['update'],['update']
Deployability,"We use `∂xᶠᶜᶜ(i, j, k, grid, η)` to represent the x-component of the barotropic pressure gradient, for example:. https://github.com/CliMA/Oceananigans.jl/blob/be040379ec20d77a8968ba3c0dff71aeed1b2a38/src/Models/HydrostaticFreeSurfaceModels/barotropic_pressure_correction.jl#L49-L50. which also appears in the left-side operator for the implicit free surface solver:. https://github.com/CliMA/Oceananigans.jl/blob/be040379ec20d77a8968ba3c0dff71aeed1b2a38/src/Models/HydrostaticFreeSurfaceModels/pcg_implicit_free_surface_solver.jl#L141-L142. But a finite volume discretization of x-component of the barotropic pressure gradient term (ie integrating over cell areas, then using Gauss' theorem to transform the volume integral into a surface integral) would look like. <img width=""308"" alt=""image"" src=""https://user-images.githubusercontent.com/15271942/165198034-1a4fb702-2abc-4ea8-a028-dae750fdeee3.png"">. where I've canceled some `dz`, but don't seem to be able to cancel `dy`. Are we making some latent approximation here that we may not need to make?. @simone-silvestri @christophernhill ?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2475:636,integrat,integrating,636,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2475,1,['integrat'],['integrating']
Deployability,We would need CUDA 3.8.0 to develop multiGPU architectures without having to use MPI. . You mind if I revamp this PR and try to see what we need to do to update CUDA?; I think the tests not passing comes from the fact that we also need to update CUDAKernels to version 0.3.3 (we are now using 0.3.0). Actually for me everything works very good from main just switching to CUDA 3.8.0 and CUDAKernels 0.3.3,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1043202547:154,update,update,154,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1043202547,2,['update'],['update']
Deployability,"We've seen issues noise in the vertical velocity along immersed boundaries in other configurations too. I've seen at least one result in which the noise is substantially mitigated by using the PCG solver, which avoids the approximations of the ""naive"" FFT solver. Unfortunately, we don't yet have a performant PCG-based solver cc @simone-silvestri @xkykai . I think it's interesting and also convenient that the noise is mitigated in turbulent cases or by the inclusion of bottom drag.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3526#issuecomment-2028935410:84,configurat,configurations,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3526#issuecomment-2028935410,1,['configurat'],['configurations']
Deployability,"Well, right now, the `Model` includes both discrete and continuous aspects of the PDE. `Model` also stores `architecture`, for example, which is unrelated to the PDE. We did consider an abstraction that represented the equation set independent from discretization. This would not be a replacement for model, but would simply be a way to organize some of the properties of model (eg buoyancy, coriolis, diffusion, etc). Yet this is a challenging abstraction to design. One issue is specification. If we try to separate the terms from their numerical implementation, we have to figure how to distinguish between ""diffusion with second-order differences"" and ""diffusion with fourth-order differences"". It's clearly possible to do this, but it's going to take some time and careful thought to implement. We've taken a more incremental approach to development the model instead, resulting in a fairly ""flat"" interface to `IncompressibleModel` that combines aspects both of the continuous equations, their discretization, and things like `architecture`, the `pressure_solver`, etc. I think flat is simple (think parameter files as the platonic ideal of a flat API); however, we still want to benefit from modularity where it's a simple change that doesn't overcomplicate the interface (hence this issue).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1175#issuecomment-729123548:56,continuous,continuous,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1175#issuecomment-729123548,2,['continuous'],['continuous']
Deployability,"Well, we use `Manifest.toml` so that will pin CUDA to whatever version the manifest says so. So only think we shouldn't do is to merge a PR that updates the package version in Manifest.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1996#issuecomment-933972103:145,update,updates,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1996#issuecomment-933972103,1,['update'],['updates']
Deployability,Well... Some packages that the test use are not installed and you need to install manually and then be careful not to commit the Manifest. I get annoyed all the time. . But in any case: the test_file is wrong because it tests the file PLUS everything else.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1995281440:48,install,installed,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1995281440,2,['install'],"['install', 'installed']"
Deployability,"What is the intent of these tests? Are they intended to be included in CI, or are they more in the style of “benchmarks” that are run relatively infrequently?. @edoddridge A twist on option 1 is to design a forcing that exactly cancels the terms associated with nonlinear and linear terms in a given equation for some simple initial condition consisting of sines and cosines. For example, pick an initial condition, calculate all terms in a given equation, and then write a forcing that exactly cancels those terms. Then check that the initial condition doesn’t change after a few time-steps. This method allows a test at low resolution with low computational burden and allows each nonlinear and linear term in each equation to be assessed separately. . It would also be good to run “benchmarks” that are designed to be run less frequently, which is a category I think some of the suggested tests fall into (?) Is the algorithm in Oceananigans.jl identical to some configuration of MITgcm? If so that opens the possibility to compare a solution grid-point for grid-point.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-467266242:966,configurat,configuration,966,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-467266242,1,['configurat'],['configuration']
Deployability,What is your `versioninfo()`? How did you install Julia?. ```; ┌ Warning: You are using a non-official build of Julia. This may cause issues with CUDA.jl.; │ Please consider using an official build from https://julialang.org/downloads/.; └ @ CUDA ~/.julia/packages/CUDA/Tl08O/src/initialization.jl:180; ```. I would recommend using `juliaup` to manage your Julia installation.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2231323566:42,install,install,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2231323566,2,['install'],"['install', 'installation']"
Deployability,"What parallelism strategy makes sense? One particle per thread? Do we use linear interpolation between velocity nodes or assume a constant velocity within each cell (nearest neighbor interpolation)?. Presumably `TimeSeries` makes sense for simple diagnosed particle ""properties"" and is the place to start. Obtaining prognostic quantities within particles (like reacting chemical species with reaction rates that depend on ambient temperature) may be challenging and probably requires a careful design, especially because our time stepping is not very abstracted yet. If we are integrated with DifferentialEquations this job might get a bit easier...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/511#issuecomment-547069123:577,integrat,integrated,577,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/511#issuecomment-547069123,1,['integrat'],['integrated']
Deployability,"What you tried with `∂x` will not work because when you pass the `field_dependency` to a continuous forcing function, the P that you have as an input in your forcing function is not the field itself, but it's the value of that field interpolated to your location at the `i, j, k` corresponding to your `x, y, z` (`model.tracers.P[i, j, k]`). (i.e. it will be a `Float64` as the error suggests and not a `Field`)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2586#issuecomment-1141260259:89,continuous,continuous,89,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2586#issuecomment-1141260259,1,['continuous'],['continuous']
Deployability,"What's happening presently is KA is forcing an older version of Enzyme to be used in the tests, that doesn't have the inactive_type used by the testing infra. . This PR https://github.com/JuliaGPU/KernelAbstractions.jl/pull/426 added relevant parts to KA, which currently is waiting for the julia registry to release a new patch release: https://github.com/JuliaRegistries/General/pull/93272. Once that lands, this should succeed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1759890409:309,release,release,309,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1759890409,3,"['patch', 'release']","['patch', 'release']"
Deployability,"What's needed is something like. ```julia; struct ContinuousDiffusionFunction{F, P}; func :: F; parameters :: P; end. @inline (K::ContinuousDiffusionFunction)(x, y, z, t) = K.func(x, y, z, t, K.parameters). @inline function convert_diffusivity(FT, κ; discrete_form=false, loc=(nothing, nothing, nothing), parameters=nothing) ; if discrete_form; return DiscreteDiffusionFunction(κ; loc, parameters); elseif isnothing(parameters); return ContinuousDiffusionFunction(κ, parameters); else; return κ ; end ; end ; ```. I think anyways. reduced dimensionality grids may be different",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3840#issuecomment-2401073362:50,Continuous,ContinuousDiffusionFunction,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3840#issuecomment-2401073362,3,['Continuous'],['ContinuousDiffusionFunction']
Deployability,"When @hennyg888 did benchmarks for shallow water with `WENO5` he found that the speed up went down from `180` with 5th order upwindng to about `120`. This is in contrast to what I found previously when `WENO5` went up to about `380`. I sent those results to @ali-ramadhan but sadly those have disappeared into the slack universe. . Probably not a major problem but any ideas what might have changed? . Also, we can update as many of the benchmarks from above as people like, and add in some pictures where we have them.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-854773818:415,update,update,415,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-854773818,1,['update'],['update']
Deployability,"When I use a function to set an `OpenBoundaryCondition` on a `HydrostaticFreeSurfaceModel` I get an error and I don't understand why. Here's a MWE:. ```julia; using Oceananigans; grid = RectilinearGrid(topology = (Bounded, Flat, Bounded), size = (4, 4), extent = (1, 1)). u₀ = 1; @inline u_func(z, t) = u₀. u_bcs = FieldBoundaryConditions(east = OpenBoundaryCondition(u_func), west = OpenBoundaryCondition(u_func)). model = HydrostaticFreeSurfaceModel(; grid, boundary_conditions = (; u = u_bcs,)); set!(model, u = u₀); time_step!(model, 0.1); ```. This gives me the error:. ```; ERROR: LoadError: TaskFailedException. nested task error: MethodError: objects of type Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(u_func), Nothing, Tuple{}, Tuple{}, Tuple{}} are not callable; Stacktrace:; [1] getbc; @ ~/.julia/packages/Oceananigans/OHYQj/src/BoundaryConditions/boundary_condition.jl:115 [inlined]; [2] _fill_west_halo!; @ ~/.julia/packages/Oceananigans/OHYQj/src/BoundaryConditions/fill_halo_regions_open.jl:34 [inlined]; [3] #25; @ ~/.julia/packages/Oceananigans/OHYQj/src/BoundaryConditions/fill_halo_regions.jl:260 [inlined]; [4] ntuple; @ ./ntuple.jl:50 [inlined]; [5] cpu__fill_west_and_east_halo!; @ ~/.julia/packages/KernelAbstractions/HAcqg/src/macros.jl:287 [inlined]; [6] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{…}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{…}, args::Tuple{…}, dynamic::KernelAbstractions.NDIteration.DynamicCheck); @ KernelAbstractions ~/.julia/packages/KernelAbstractions/HAcqg/src/cpu.jl:115; [7] (::KernelAbstractions.var""#18#21""{…})(); @ KernelAbstractions ~/.julia/packages/KernelAbstractions/HAcqg/src/cpu.jl:90; ```; which points to this line https://github.com/CliMA/Oceananigans.jl/blob/d4bcc095be66c7b5c98a462106285a6f6d341fe1/src/BoundaryConditions/boundary_condition.jl#L115; which is a fallback method.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3628:699,Continuous,ContinuousBoundaryFunction,699,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3628,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"When setting up scripts to run on HPC clusters with strict job time limits you need to write scripts that continuously checkpoint and restore from checkpoint and submit the job script again once a wall time limit has been reached. This introduces some complexity into the script, e.g. a `if model.clock.iteration != 0` statement for setting initial conditions and potentially extra data wrangling if an output writer needs to be configured to append to an existing file. It's quite easy to forget to do something important and introduce bugs into these scripts which is undesirable as these jobs tend to run for a long time and we frequently submit many such jobs so the cost of a mistake can be quite high. In the future I think developing some kind of abstraction for setting up this kind of script will be important for people who run scripts on HPC clusters with time limits. Not sure what to do but ideally it would minimize the chance of misconfiguration: it could allow users to take a regular script without checkpointing and somehow allow the script to be restored from checkpoint without having to worry about correctly setting initial conditions, configuring output writers, etc.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/779:106,continuous,continuously,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/779,1,['continuous'],['continuously']
Deployability,"When we merge this we will have to update the example in #1847 but otherwise this is just an aesthetics change and has no impact on output, so we don't need to wait for it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1843#issuecomment-880603490:35,update,update,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1843#issuecomment-880603490,1,['update'],['update']
Deployability,When you `] add Oceananigans` it will also add/install a compatible version of CUDA.jl so you can still use the GPU. You only need to `] add CUDA` if you want to use CUDA.jl directly.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1636#issuecomment-832305702:47,install,install,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1636#issuecomment-832305702,1,['install'],['install']
Deployability,"While in a perfect world we would include diffusivities in `model_fields` for both forcing functions and boundary condition functions, including them makes trouble for the compilation of `ContinuousForcing` (see #1059). We should have had a test that `ContinuousForcing` works with non-trivial turbulence closures (and perhaps tuples of closures as well). Since we don't include `diffusivities` in `model_fields` anymore, there's no need for such a test. But let it be noted that if `diffusivities` is ever restored to `model_fields`, we'll need to test that this works with various forcing functions and boundary condition functions (perhaps the problem will disappear as the julia versions march ever onwards...). This PR relies on #1057 (though it shouldn't...). Resolves #1059",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1061:188,Continuous,ContinuousForcing,188,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1061,2,['Continuous'],['ContinuousForcing']
Deployability,"While using `main` indeed I can reproduce the error above... ```Julia; navidcy:Oceananigans.jl/ |main ✓|$ julia-1.10 --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.10.0 (2023-12-25); _/ |\__'_|_|_|\__'_| |; |__/ |. julia> using Oceananigans; ┌ Warning: The active manifest file has dependencies that were resolved with a different julia version (1.9.3). Unexpected behavior may occur.; └ @ ~/Oceananigans.jl/Manifest.toml:0; ┌ Warning: The project dependencies or compat requirements have changed since the manifest was last resolved.; │ It is recommended to `Pkg.resolve()` or consider `Pkg.update()` if necessary.; └ @ Pkg.API ~/julia-1.10/usr/share/julia/stdlib/v1.10/Pkg/src/API.jl:1800; Precompiling Oceananigans; 1 dependency successfully precompiled in 21 seconds. 143 already precompiled.; [ Info: Oceananigans will use 48 threads. julia> grid = RectilinearGrid(GPU(),; size = (16, 16, 16),; x = (0, 1),; y = (0, 1),; z = (-1, 0),; topology = (Periodic, Periodic, Bounded)); 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0625; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0625; └── Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=0.0625. julia> model = NonhydrostaticModel(; grid); NonhydrostaticModel{GPU, RectilinearGrid}(time = 0 seconds, iteration = 0); ├── grid: 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── timestepper: QuasiAdamsBashforth2TimeStepper; ├── tracers: (); ├── closure: Nothing; ├── buoyancy: Nothing; └── coriolis: Nothing. julia> u, v, w = model.velocities; NamedTuple with 3 Fields on 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo:; ├── u: 16×16×16 Field{Face, Center, Center} on RectilinearGrid on GPU; ├── v: 16×16×16 Field{Ce",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-1890373372:742,update,update,742,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-1890373372,1,['update'],['update']
Deployability,"Will this work flow work @navidcy @simone-silvestri ?. 1. Fix tests for Julia 1.7 and merge this PR; 2. Update CUDA + KernelAbstractions. Or, do we need to do 1. and 2. simultaneously?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1083551690:104,Update,Update,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1083551690,1,['Update'],['Update']
Deployability,"With Julia 1.3 comes Julia library (JLL) packages which packages are starting to depend on, such as FFTW.jl v1.2.0. See this blog post for more info: https://julialang.org/blog/2019/11/artifacts/. But this requires Julia 1.3 so as of right now I've pegged Oceananigans.jl to FFTW.jl v1.1.0, an older version to keep Oceananigans.jl compatible with Julia 1.1+ as our README and docs state. Should we embrace Julia 1.3 so we can keep up to date with all the latest packages?. Note: We already do not support the latest long term support (LTS) release v1.0.5 so we might as well upgrade our requirements to the latest stable release (v.1.3+).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/625:541,release,release,541,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/625,3,"['release', 'upgrade']","['release', 'upgrade']"
Deployability,"With a student, we are trying to initialize `IncompressibleModel` with a flow that is in thermal wind balance. We specify the velocity and then compute the buoyancy using the package `QuadGK`. The lines that we use are the following:. ```; parms = (f₀ = Coriolis.f, # s⁻¹, Coriolis parameter; N² = 1e-4, # s⁻¹, buoyancy frequency; D = grid.Lz, # m, ocean depth; L_y = Ly/2, # m, jet width scale; L_z = Lz/2, # m, jet depth scale; σz = 2, # jet width parameter; σy = 5, # jet depth parameter; γ = 1/2, # jet skew parameter; U_max = 2) # jet velocity scale. ū(x, y, z, t, p) = p.U_max * sech(p.σz * z/p.L_z - p.σy * ( y/p.L_y + p.γ * z/p.L_z)^2)^2. dudz(x, y, z, t, p) = 2*p.U_max/p.L_z * (2*p.γ*p.σy * (y/p.L_y + p.γ * z/p.L_z) - p.σz) * tanh(p.σz * z/p.L_z - p.σy * ( y/p.L_y + p.γ * z/p.L_z)^2) * sech(p.σz * z/p.L_z - p.σy * ( y/p.L_y + p.γ * z/p.L_z)^2)^2. b̄(x, y, z, t, p) = quadgk(yp -> p.N² * (z + p.D) - p.f₀*dudz(x, yp, z, t, p), -Ly/2, y)[1]; ```. It doesn't give any errors but seems to freeze when running the simulation. In the case of a 16x16 grid my student waited 4 hours and nothing. Any idea what the problem is?. There are a bunch of other ways for numerical integration that we can use but this does seem attractive. Any other suggestions would be appreciated.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1826:1179,integrat,integration,1179,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1826,1,['integrat'],['integration']
Deployability,"With the recent updates of Oceananigans, I noticed an unusual behavior of the model that often leads to much slower initialization. . Below is a minimum working example that demonstrates the issue:. ```Julia; using Oceananigans; using Oceananigans.Units. grid = RectilinearGrid(CPU(),; size = (3, 3, 3),; extent = (1, 1, 1),; topology = (Periodic, Bounded, Bounded)); model = HydrostaticFreeSurfaceModel(; grid); simulation = Simulation(model, Δt=20minutes, stop_time=20days). u, v, w = model.velocities; ζ = ∂x(v) - ∂y(u); fields_slice = Dict(""u"" => u, ""v"" => v, ""w"" => w, ""ζ"" => ζ); simulation.output_writers[:top] = NetCDFOutputWriter(model, fields_slice;; filename = ""mwe.nc"",; schedule = TimeInterval(0.5day),; overwrite_existing = true,; indices = (:, :, grid.Nz)); run!(simulation). ```; Running this code with Julia 1.9.3 and Oceananigans v0.90.0 gives an initialization time of ~ 15 minutes, much longer than common values of a few seconds. The same issue also appears on GPU. This speed issue disappears either when `ζ = ∂x(v) - ∂y(u)` is replaced with `ζ = Field(∂x(v) - ∂y(u))`, or when `ζ` is the only variable in `fields_slice`. However, as pointed out by @tomchor, wrapping outputs in `Field()` tends to waste more memory (a very precious resource on the GPU), so it may be worthwhile to investigate further why this happens.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381:16,update,updates,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381,1,['update'],['updates']
Deployability,Would be good to set this up with Slurm CI (PR #280) and start doing continuous performance testing to ensure we don't make mistakes that slow the model down.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/380:69,continuous,continuous,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/380,1,['continuous'],['continuous']
Deployability,Would be good to tag a release once the current batch of PRs is merged.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/988:23,release,release,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/988,1,['release'],['release']
Deployability,Would be nice to have a Docker image so we have an easy-to-use environment for running Oceananigans. It would also be nice to integrate it into our CI so we know the package build fails. See:; * https://github.com/docker/labs; * https://docs.docker.com/docker-hub/builds/; * https://docs.docker.com/docker-hub/builds/link-source/; * https://repo2docker.readthedocs.io/en/latest/,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/151:126,integrat,integrate,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/151,1,['integrat'],['integrate']
Deployability,"Would be nice to specify a list of e.g. 32 parameters and just spin off 32 models running in different configurations, maybe on Google Cloud. I think this is something Chris might have already figured out:; * https://github.com/christophernhill/oceananiganshacks; * https://github.com/ali-ramadhan/gcloudhacks",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/144:103,configurat,configurations,103,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/144,1,['configurat'],['configurations']
Deployability,"WxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `19.23% <0%> (-4.58%)` | :arrow_down: |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/520/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `48.38% <0%> (-1.62%)` | :arrow_down: |; | [...lence\_closure\_implementations/smagorinsky\_lilly.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/520/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3NtYWdvcmluc2t5X2xpbGx5Lmps) | `92.85% <100%> (-0.76%)` | :arrow_down: |; | [src/TurbulenceClosures/turbulence\_closure\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/520/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfdXRpbHMuamw=) | `80% <100%> (+10%)` | :arrow_up: |; | [src/TurbulenceClosures/closure\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/520/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9jbG9zdXJlX29wZXJhdG9ycy5qbA==) | `66.66% <100%> (ø)` | :arrow_up: |; | [src/buoyancy.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/520/diff?src=pr&el=tree#diff-c3JjL2J1b3lhbmN5Lmps) | `81.81% <88.23%> (+1.17%)` | :arrow_up: |; | ... and [2 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/520/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/520?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/520?src=pr&el=footer). Last update [6f40796...c53227c](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/520?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/520#issuecomment-548763706:4071,update,update,4071,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/520#issuecomment-548763706,1,['update'],['update']
Deployability,"XJ5Q29uZGl0aW9ucy9Cb3VuZGFyeUNvbmRpdGlvbnMuamw=) | `100.00% <ø> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/765/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `76.19% <ø> (+4.76%)` | :arrow_up: |; | [src/Fields/set!.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/765/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `35.29% <ø> (-32.36%)` | :arrow_down: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/765/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/765/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100.00% <ø> (ø)` | |; | [src/OutputWriters/OutputWriters.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/765/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `100.00% <ø> (ø)` | |; | [src/Solvers/Solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/765/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvU29sdmVycy5qbA==) | `100.00% <ø> (ø)` | |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/765/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `100.00% <ø> (+25.00%)` | :arrow_up: |; | ... and [95 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/765/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/765?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/765?src=pr&el=footer). Last update [3f491e7...c789ec6](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/765?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/765#issuecomment-637790496:3360,update,update,3360,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/765#issuecomment-637790496,1,['update'],['update']
Deployability,"Y29uc3RhbnRfZGlmZnVzaXZpdHlfY2xvc3VyZXMuamw=) | `100% <100%> (+40.54%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `75.97% <100%> (-0.61%)` | :arrow_down: |; | [...closures/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvcm96ZW1hX2FuaXNvdHJvcGljX21pbmltdW1fZGlzc2lwYXRpb24uamw=) | `23.95% <23.95%> (ø)` | |; | [...ures/verstappen\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdmVyc3RhcHBlbl9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `53.33% <53.33%> (ø)` | |; | [src/turbulence\_closures/smagorinsky.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvc21hZ29yaW5za3kuamw=) | `67.79% <67.79%> (ø)` | |; | [...c/turbulence\_closures/velocity\_tracer\_gradients.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdmVsb2NpdHlfdHJhY2VyX2dyYWRpZW50cy5qbA==) | `69.72% <69.72%> (ø)` | |; | ... and [10 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383?src=pr&el=footer). Last update [5a12ab6...7e7449e](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/383#issuecomment-526135941:3916,update,update,3916,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/383#issuecomment-526135941,1,['update'],['update']
Deployability,"Y29uc3RhbnRfZGlmZnVzaXZpdHlfY2xvc3VyZXMuamw=) | `100% <100%> (+40.54%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `75.97% <100%> (-0.61%)` | :arrow_down: |; | [...closures/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvcm96ZW1hX2FuaXNvdHJvcGljX21pbmltdW1fZGlzc2lwYXRpb24uamw=) | `23.95% <23.95%> (ø)` | |; | [...ures/verstappen\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdmVyc3RhcHBlbl9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `53.33% <53.33%> (ø)` | |; | [src/turbulence\_closures/smagorinsky.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvc21hZ29yaW5za3kuamw=) | `67.79% <67.79%> (ø)` | |; | [...c/turbulence\_closures/velocity\_tracer\_gradients.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdmVsb2NpdHlfdHJhY2VyX2dyYWRpZW50cy5qbA==) | `69.72% <69.72%> (ø)` | |; | ... and [10 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383?src=pr&el=footer). Last update [5a12ab6...be136c3](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/383?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/383#issuecomment-526135943:3912,update,update,3912,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/383#issuecomment-526135943,1,['update'],['update']
Deployability,"Y2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3JvemVtYV9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `35.84% <0%> (-2.45%)` | :arrow_down: |; | [src/Solvers/box\_pressure\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/636/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYm94X3ByZXNzdXJlX3NvbHZlci5qbA==) | `0% <0%> (ø)` | :arrow_up: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/636/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `100% <0%> (ø)` | :arrow_up: |; | [src/Utils/time\_step\_wizard.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/636/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3RpbWVfc3RlcF93aXphcmQuamw=) | `100% <0%> (ø)` | :arrow_up: |; | [src/Grids/vertically\_stretched\_cartesian\_grid.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/636/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL3ZlcnRpY2FsbHlfc3RyZXRjaGVkX2NhcnRlc2lhbl9ncmlkLmps) | `100% <0%> (ø)` | :arrow_up: |; | [src/Solvers/triply\_periodic\_pressure\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/636/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvdHJpcGx5X3BlcmlvZGljX3ByZXNzdXJlX3NvbHZlci5qbA==) | `0% <0%> (ø)` | :arrow_up: |; | ... and [41 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/636/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/636?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/636?src=pr&el=footer). Last update [4ed3660...2610b13](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/636?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/636#issuecomment-589657940:3854,update,update,3854,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/636#issuecomment-589657940,1,['update'],['update']
Deployability,"Y3Rpb24uamw=) | `0.00% <0.00%> (ø)` | |; | [src/AbstractOperations/AbstractOperations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/989/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9BYnN0cmFjdE9wZXJhdGlvbnMuamw=) | `50.00% <ø> (ø)` | |; | [src/AbstractOperations/derivatives.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/989/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9kZXJpdmF0aXZlcy5qbA==) | `88.88% <ø> (ø)` | |; | [src/AbstractOperations/show\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/989/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9zaG93X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `16.66% <ø> (ø)` | |; | [...daryConditions/parameterized\_boundary\_condition.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/989/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9wYXJhbWV0ZXJpemVkX2JvdW5kYXJ5X2NvbmRpdGlvbi5qbA==) | `100.00% <ø> (ø)` | |; | [src/BoundaryConditions/show\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/989/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9zaG93X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `0.00% <ø> (ø)` | |; | [src/Fields/show\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/989/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | `0.00% <ø> (ø)` | |; | ... and [41 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/989/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/989?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/989?src=pr&el=footer). Last update [417e890...73a6798](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/989?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/989#issuecomment-699576002:3607,update,update,3607,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/989#issuecomment-699576002,1,['update'],['update']
Deployability,Yas! Updated the OP.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1400#issuecomment-1057337618:5,Update,Updated,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1400#issuecomment-1057337618,1,['Update'],['Updated']
Deployability,"Yea well, the matrix is in `solver.matrix`. Note that the diagonal term `Az/g` is separatly stored in `solver.diagonal` because you have to update the matrix every time `Δt` changes, i.e., you do not want to have it hardcoded in the matrix. Btw, if you want the linear operation for the LHS that is the function you want no? ; `@inbounds L_ηⁿ⁺¹[i, j, 1] = Az_∇h²ᶜᶜᶜ(i, j, 1, grid, ∫ᶻ_Axᶠᶜᶜ, ∫ᶻ_Ayᶜᶠᶜ, ηⁿ⁺¹) - Az * ηⁿ⁺¹[i, j, 1] / (g * Δt^2)`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1116032682:140,update,update,140,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1116032682,1,['update'],['update']
Deployability,"Yeah I agree we should probably just include the most interesting ones for now. Eventually I was hoping to upgrade the benchmark scripts to also produce plots (bar charts?) to make it easier to visually parse all the numbers/information, then it might make sense to include more benchmark results.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845159147:107,upgrade,upgrade,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-845159147,1,['upgrade'],['upgrade']
Deployability,Yeah I encountered it when trying to put some interpolations with arrays in a `DiscreteForcing`. I guess they're not as commonly used as `ContinuousForcing`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1642#issuecomment-836886632:138,Continuous,ContinuousForcing,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1642#issuecomment-836886632,1,['Continuous'],['ContinuousForcing']
Deployability,"Yeah okay, both of those suggestions make sense and adding a line in update state is probably the most general solution too. Once I've cleaned up a bit I guess the only the last we would need to settle on for the simplest case is how we specify the form of $\phi^{n+1}$ (and how I've written the fill_bulk_outflow_halo file). Currently, it is hardcoded that it is upwinded when there is an outflow and relaxed to an external solution when it inflows as:. `(1 - Ūᵇ - 1/τ̄) * ϕⁿ + Ūᵇ * ϕᵢ₋₁ + ϕᵉ / τ̄`,. where $0 < U^b < 1 $, but conceivably it could be something along the lines of unwinding both ways like:. `(1 - Ūᵇ) * ϕⁿ + max(0, Ūᵇ) * ϕᵢ₋₁ - min(0, Ūᵇ) * ϕᵉ`. Perhaps if we change to:; ```julia; struct BulkOutflow{IS, OS} <: AbstractBoundaryConditionClassification; inflow_speed :: IS; outflow_speed :: OS; end; ```; then we can make it the general form:. $\phi^{n+1} _i = (1 - U_i - U_o) \phi^n + U_i \phi^e + U_o \phi^n _{i-1}$. with $0 < U_i, U_o < 1$ and only $U_i$ or $U_o$ can be non-zero.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1978821684:69,update,update,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1978821684,2,['update'],['update']
Deployability,Yeah only a few more fixes!. CUDA.jl 3.0 only supports Julia 1.6+ and the next release of KernelAbstractions.jl should switch to CUDA.jl 3.0 so if this PR is open for a bit longer we might as well bump Oceananigans.jl to only support Julia 1.6 as well. We could also potentially leave behind the weird Julia 1.5 hanging issue (e.g. #1601)... X-Ref: https://github.com/JuliaGPU/KernelAbstractions.jl/pull/242,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-824365320:79,release,release,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-824365320,1,['release'],['release']
Deployability,Yeah so Adapt v3.0.0 is blocked by CUDA.jl right now: https://github.com/JuliaGPU/CUDA.jl/pull/626. I think we just need to wait for a new tagged release.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1287#issuecomment-756774971:146,release,release,146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1287#issuecomment-756774971,1,['release'],['release']
Deployability,"Yeah that would definitely help with modularization. They might need to take in the whole model, e.g. `validate_coriolis(model)`, `validate_advection(model)`, etc. since it seems hard to anticipate all the inconsistent configurations. I remember you raised the concern of slowdowns in the case of running tons of small/column models. So maybe a kwarg like `check_consistency=true` would be good to add with this feature.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1453#issuecomment-796342103:219,configurat,configurations,219,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1453#issuecomment-796342103,1,['configurat'],['configurations']
Deployability,"Yeah this has always been an issue on my local setup and at some point Plots.jl/GR.jl stopped working haha (I'm probably missing some library) so I fully switched to CairoMakie.jl. We use `ENV[""GKSwstype""]=""nul""` in CI for this reason. It could be good to add to the examples so users don't encounter this issue but it's been a long-standing issue in Plots.jl/GR.jl (https://github.com/JuliaPlots/Plots.jl/issues/1649) but the solution seems to involve installing extra libraries (https://gr-framework.org/julia.html#installation) which gets somewhat user unfriendly... I wouldn't mind switching to CairoMakie.jl for plotting in examples (which also looks nicer) but Plots.jl is still popular and Makie is still maturing so not sure of the best solution.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1657#issuecomment-839886687:453,install,installing,453,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1657#issuecomment-839886687,2,['install'],"['installation', 'installing']"
Deployability,"Yeah, I think we can overlap a bit. I think the benefit of providing a link is because as Julia's instructions get better, we benefit for free. If we write a long essay about installing Julia, our users might miss out on those improvements elsewhere. Plus, we have to maintain it as things change, which creates work for us. But I also think it isn't that likely Julia installation will change very quickly and I agree that a bit more than just a link (even if there's overlap with official instructions) might suffice for a lot of people.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2312#issuecomment-1060059596:175,install,installing,175,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2312#issuecomment-1060059596,2,['install'],"['installation', 'installing']"
Deployability,"Yeah, it looks like you updated `GPUArrays`, I guess it might be in there",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1114840125:24,update,updated,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1114840125,1,['update'],['updated']
Deployability,"Yeah, it's because of this line; ```; i1, i2 = round(Int, Nx/4), round(Int, 3Nx/4); j1, j2 = round(Int, Ny/4), round(Int, 3Ny/4); k1, k2 = round(Int, Nz/4), round(Int, 3Nz/4); CUDA.@allowscalar model.tracers.T.data[i1:i2, j1:j2, k1:k2] .+= 0.01; ```; apparently `@allowscalar` does not like `OffsetArrays`, you can fix it like this; ```; i1, i2 = round(Int, Nx/4) - model.tracers.T.data.offsets[1] , round(Int, 3Nx/4) - model.tracers.T.data.offsets[1] ; j1, j2 = round(Int, Ny/4) - model.tracers.T.data.offsets[2] , round(Int, 3Ny/4) - model.tracers.T.data.offsets[2] ; k1, k2 = round(Int, Nz/4) - model.tracers.T.data.offsets[3] , round(Int, 3Nz/4) - model.tracers.T.data.offsets[3] ; CUDA.@allowscalar model.tracers.T.data.parent[i1:i2, j1:j2, k1:k2] .+= 0.01; ```. (you have to change it in a couple of places). Did you update CUDA by any chance?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1114826923:823,update,update,823,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1114826923,1,['update'],['update']
Deployability,"Yeah, this is confusing. @navidcy updated the docs so that `\vec v = (u, v, w)` is three-dimensional, while `\vec u = (u, v)` is two-dimensional. Right now, we only support two-dimensional Stokes drift, so two-dimensionalization would be fine. In the future it's in principle possible to support Stokes drift with a vertical component, but there are some details regarding divergent Stokes drift fields / divergent Lagrangian-mean velocity fields that would have to be considered. Because of the complications of 3D Stokes drift maybe it's best to explicitly state that the Stokes drift is 2D (and use `\vec u^S`?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2007#issuecomment-941336434:34,update,updated,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2007#issuecomment-941336434,1,['update'],['updated']
Deployability,"Yes though I don't completely understand --- if the user writes ""part 1"", would they not know its part 1?. Maybe this should work if ""part1"" is _not_ provided? It would also be nice, separately, if `FieldTimeSeries` could construct a continuous time series.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3859#issuecomment-2433332687:234,continuous,continuous,234,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3859#issuecomment-2433332687,1,['continuous'],['continuous']
Deployability,"Yes we definitely need to speed up the tests. I think 95% of the time it takes to run tests is spent in compilation, however, so creating fewer models may not help much. Instead we may need to be more strategic with how we run tests, and perhaps also work on speeding up compilation time using something like [SnoopCompile.jl](https://github.com/timholy/SnoopCompile.jl). On #1962 we add bars capability, which will allow us to separate the tests into a few categories: fast-running, crucial tests will run on every commit to a PR, and slower, more comprehensive integration tests will run only when `bors try` or `bors r+` is invoked. This might help streamline the development workflow. Also if we are using Caltech's central cluster for CI we can potentially split the jobs amongst more workers, which might help speed up tests overall. Even more important is simplifying the test implementation. Right now updating tests and validation experiments is a time sink for developers that change the API and has really slowed development down lately. So we shouldn't rewrite tests in a way that makes development more difficult (eg keeping the maintenance burden of the test infrastructure small is more important than decreasing the computational cost of tests). This is really a side comment --- we should be able to improve the tests both so they are faster _and_ easier to maintain, if we are careful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-922526970:563,integrat,integration,563,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-922526970,2,['integrat'],['integration']
Deployability,Yes! It'd be nice to add a more meaty example and update the model setup docs for the hydrostatic model since it's at least nascent now.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1708#issuecomment-849296501:50,update,update,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1708#issuecomment-849296501,1,['update'],['update']
Deployability,"Yes, I think they do. I was wondering if the update here brought in that change (another possibility is that it's already supported)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613752671:45,update,update,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613752671,1,['update'],['update']
Deployability,"Yesterday, in https://github.com/openjournals/joss-reviews/issues/2018, I mentioned some failing tests on GPU. Since then, I tried to reproduce them in a clean and up-to-date environment but I now have issues even to install CUDA.jl. I'm suspecting a problem with my CUDA setup, and I don't really have the time nor the need to look into this. I pasted below the tracebacks I got a few days ago, just in case there is something useful for you in it, but don't feel any obligation to look into this issue that I can't reproduce. ```; Forcing function time stepping [GPU]: Error During Test at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:136; Test threw exception; Expression: time_step_with_forcing_functions(arch); LLVM error: Cannot cast between two non-generic address spaces; Stacktrace:; [1] handle_error(::Cstring) at /home/ancellin/.julia/packages/LLVM/KITdB/src/core/context.jl:103; [2] macro expansion at /home/ancellin/.julia/packages/LLVM/KITdB/src/util.jl:114 [inlined]; [3] LLVMTargetMachineEmitToMemoryBuffer(::Ptr{LLVM.API.LLVMOpaqueTargetMachine}, ::Ptr{LLVM.API.LLVMOpaqueModule}, ::LLVM.API.LLVMCodeGenFileType, ::Base.RefValue{Cstring}, ::Base.RefValue{Ptr{LLVM.API.LLVMOpaqueMemoryBuffer}}) at /home/ancellin/.julia/packages/LLVM/KITdB/lib/libLLVM_h.jl:3512; [4] emit(::LLVM.TargetMachine, ::LLVM.Module, ::LLVM.API.LLVMCodeGenFileType) at /home/ancellin/.julia/packages/LLVM/KITdB/src/targetmachine.jl:42; [5] mcgen at /home/ancellin/.julia/packages/GPUCompiler/4e9CU/src/mcgen.jl:73 [inlined]; [6] macro expansion at /home/ancellin/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]; [7] macro expansion at /home/ancellin/.julia/packages/GPUCompiler/4e9CU/src/driver.jl:254 [inlined]; [8] macro expansion at /home/ancellin/.julia/packages/TimerOutputs/dVnaw/src/TimerOutput.jl:206 [inlined]; [9] codegen(::Symbol, ::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget,CUDA.CUDACompilerParams}; libraries::Bool, deferred_codegen::Bool",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:217,install,install,217,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['install'],['install']
Deployability,"You are right! Being able to do . ```Julia; julia> include(""this_test_script.jl""); ```. and bit later. ```Julia; julia> include(""this_other_test_script.jl""); ```. is really helpful. However, there are a few packages that are different in the test environment (e.g., test environment uses `DataDeps` and `TimesDates`). Thus, often one needs to first install those packages before they are able to `include(""this_other_test_script.jl"")`. The latest changes suggested in https://github.com/CliMA/Oceananigans.jl/pull/3511 don't break this current functionality _but also_ allow for one to run a single test file as a suite using the _proper_ testing environment via:. ```; $ TEST_FILE=this_test_script.jl julia --project -e""using Pkg; Pkg.test()""; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1999786541:349,install,install,349,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-1999786541,1,['install'],['install']
Deployability,You can modify the buildkite pipeline here so that only the relevant tests run. Eg no need to build docs. :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870892140:29,pipeline,pipeline,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870892140,1,['pipeline'],['pipeline']
Deployability,"You can use `FluxBoundaryCondition` with `closure=nothing` (it's `Value` and `Gradient` that won't work). You can obtain global dissipation by differencing globally integrated TKE (and perhaps a pointwise dissipation by evaluating the TKE budget), but I agree that it's probably more difficult. @simone-silvestri may have some tips as he has been developing an implicit LES scheme for mesoscale turbulence. Does `AnisotropicMinimumDissipation` work? Or other closures?. I'm wondering if the problem is the use of a `BinaryOperation` for the diffusivities with `SmagorinskyLilly`:. https://github.com/CliMA/Oceananigans.jl/blob/b7ad891c718c16db35d70ee86da81a74ad2f7370/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl#L214. It might be possible to avoid using that `BinaryOperation` by instead extending the three diffusivity getter functions:. https://github.com/CliMA/Oceananigans.jl/blob/b7ad891c718c16db35d70ee86da81a74ad2f7370/src/TurbulenceClosures/abstract_scalar_diffusivity_closure.jl#L87-L89",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403103597:165,integrat,integrated,165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403103597,1,['integrat'],['integrated']
Deployability,"You could classify this as a bug fix, so I think patch is appropriate. If we go now it'll capture both this and #2536. Or we can wait for #2538",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2537#issuecomment-1120614353:49,patch,patch,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2537#issuecomment-1120614353,1,['patch'],['patch']
Deployability,"You mean ""install MPI.jl"" or by MPI you mean something else?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2283088531:10,install,install,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3698#issuecomment-2283088531,1,['install'],['install']
Deployability,"You're receiving this pull request because the now-deprecated [Julia TagBot GitHub App](https://github.com/apps/julia-tagbot) is installed for this repository. This pull request installs [TagBot as a GitHub Action](https://github.com/marketplace/actions/julia-tagbot).; If this PR does not belong in this repository for any reason, feel free to close it. See [this Discourse thread](https://discourse.julialang.org/t/ann-the-tagbot-github-app-is-deprecated-in-favour-of-the-tagbot-github-action/34344) for more details and to ask questions.; Please do not comment on this pull request, because it is unlikely that I (`@christopher-dG`) will see it.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/619:129,install,installed,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/619,2,['install'],"['installed', 'installs']"
Deployability,"ZlcnMvc29sdmVfZm9yX3ByZXNzdXJlLmps) | `93.33% <0%> (-6.67%)` | :arrow_down: |; | [...ntations/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/644/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3JvemVtYV9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `32% <0%> (-2.1%)` | :arrow_down: |; | [src/Solvers/box\_pressure\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/644/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYm94X3ByZXNzdXJlX3NvbHZlci5qbA==) | `0% <0%> (ø)` | :arrow_up: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/644/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `100% <0%> (ø)` | :arrow_up: |; | [src/Utils/time\_step\_wizard.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/644/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3RpbWVfc3RlcF93aXphcmQuamw=) | `100% <0%> (ø)` | :arrow_up: |; | [src/Grids/vertically\_stretched\_cartesian\_grid.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/644/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL3ZlcnRpY2FsbHlfc3RyZXRjaGVkX2NhcnRlc2lhbl9ncmlkLmps) | `100% <0%> (ø)` | :arrow_up: |; | ... and [37 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/644/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/644?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/644?src=pr&el=footer). Last update [2019cb7...c627f48](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/644?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/644#issuecomment-591088313:3870,update,update,3870,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/644#issuecomment-591088313,1,['update'],['update']
Deployability,"[17:11]fspereira@ch-fe2[/lustre/scratch5/fspereira/OCEANANIGANS/test/case1]# julia; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> import Pkg. julia> Pkg.status(""Oceananigans""); Status `~/.julia/environments/v1.6/Project.toml`; [9e8cae18] Oceananigans v0.68.7. julia> Pkg.update(""Oceananigans""); Updating registry at `~/.julia/registries/General`; No Changes to `~/.julia/environments/v1.6/Project.toml`; No Changes to `~/.julia/environments/v1.6/Manifest.toml`. julia> Pkg.status(""Oceananigans""); Status `~/.julia/environments/v1.6/Project.toml`; [9e8cae18] Oceananigans v0.68.7. It does not update. Do I need a different version of Julia? If I remember correctly, the website says that 1.6.7 is ok",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1266188419:343,release,release,343,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1266188419,3,"['release', 'update']","['release', 'update']"
Deployability,"[`Relaxation`](https://github.com/CliMA/Oceananigans.jl/blob/35f749ef09fe021d13e8bad6433d889e8c39d6ca/src/Forcings/relaxation.jl#L24-L73) applies to more than just sponge layers --- it's a convenience wrapper for a forcing function that ""relaxes"" a field to some `target` at a specified `rate`, limited to a region outside a `mask` function. `Relaxation` is actually a special type of callable `ContinuousForcing`:. https://github.com/CliMA/Oceananigans.jl/blob/35f749ef09fe021d13e8bad6433d889e8c39d6ca/src/Forcings/relaxation.jl#L81-L82. The snippet shows that `mask` is callable with the signature `x, y, z` and target is callable with the signature `x, y, z, t`. Any appropriate `mask` and `target` will work. Also, we've provided a parameterized convenience type for a Gaussian `mask`. So, sponge layers are simply one application of `Relaxation`. @tomchor, perhaps what you're saying is that a Gaussian is not appropriate for a sponge layer `mask`, since one might want a function with a sharper cutoff (subject to @navidcy's caveats). I think this is a valid criticism --- it might make sense to add more appropriate parameterized types (using tanh's, etc?) This could be added in a PR that also updates the documentation and provides a better example for implementing a sponge layers.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1203#issuecomment-733252410:1202,update,updates,1202,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1203#issuecomment-733252410,1,['update'],['updates']
Deployability,[inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./client.jl:489; unknown function (ip: 0x7c00f54ff855); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; eval_user_input at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:150; repl_backend_loop at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:5656,release,release-,5656,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"[waywardpidgeon](https://github.com/waywardpidgeon), I think it's because of incompatibility of the CairoMakie version we use to build the docs (for the latest stable release that's 0.10.11. https://github.com/CliMA/Oceananigans.jl/blob/1c2a6f8752b6425bf30d856f8ba0aa681c0ab818/docs/Manifest.toml#L154-L158. and the one you are using. Which CairoMakie/GLMakie version are you using?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3442#issuecomment-1909425254:167,release,release,167,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3442#issuecomment-1909425254,1,['release'],['release']
Deployability,] signal (11.1): Segmentation fault; in expression starting at /home/alir/atdepth/Oceananigans.jl/particles_error.jl:35; advect_particle at /home/alir/atdepth/Oceananigans.jl/src/Models/LagrangianParticleTracking/lagrangian_particle_advection.jl:0 [inlined]; macro expansion at /home/alir/atdepth/Oceananigans.jl/src/Models/LagrangianParticleTracking/lagrangian_particle_advection.jl:177 [inlined]; cpu__advect_particles! at /home/alir/.julia/packages/KernelAbstractions/491pi/src/macros.jl:291 [inlined]; cpu__advect_particles! at ./none:0; __thread_run at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:144; unknown function (ip: 0x7c0090512182); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; __run at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:111; unknown function (ip: 0x7c009050feb3); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #_#16 at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:46; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/builtins.c:768; Kernel at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:39; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; advect_lagrangian_particles! at /home/alir/atdepth/Oceananigans.j,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:2437,release,release-,2437,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/c1f4c3363201d16a872617cca6dc0f180b9ef82e?src=pr&el=desc) will **increase** coverage by `0.41%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #264 +/- ##; ==========================================; + Coverage 70.73% 71.14% +0.41% ; ==========================================; Files 23 23 ; Lines 868 870 +2 ; ==========================================; + Hits 614 619 +5 ; + Misses 254 251 -3; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `71.42% <ø> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `90.47% <100%> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `78.78% <0%> (+11.04%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264?src=pr&el=footer). Last update [c1f4c33...32fc894](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/264?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/264#issuecomment-498487184:2015,update,update,2015,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/264#issuecomment-498487184,1,['update'],['update']
Deployability,_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; eval_user_input at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:150; repl_backend_loop at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:246; #start_repl_backend#46 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:231; start_repl_backend at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:228; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #run_repl#59 at /cache/build/builder-amdci4-4/julialan,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:6208,release,release-,6208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"_diffusivity\_closures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/312/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvY29uc3RhbnRfZGlmZnVzaXZpdHlfY2xvc3VyZXMuamw=) | `59.45% <100%> (ø)` | |; | [src/turbulence\_closures/TurbulenceClosures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/312/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvVHVyYnVsZW5jZUNsb3N1cmVzLmps) | `83.33% <100%> (ø)` | |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/312/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `40.65% <100%> (-58.53%)` | :arrow_down: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/312/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `85.71% <100%> (-3.58%)` | :arrow_down: |; | [src/turbulence\_closures/constant\_smagorinsky.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/312/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvY29uc3RhbnRfc21hZ29yaW5za3kuamw=) | `52.77% <27.27%> (ø)` | |; | [src/turbulence\_closures/closure\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/312/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvY2xvc3VyZV9vcGVyYXRvcnMuamw=) | `42.62% <42.85%> (ø)` | |; | ... and [12 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/312/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/312?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/312?src=pr&el=footer). Last update [c961d39...a40de27](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/312?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/312#issuecomment-510662216:3692,update,update,3692,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/312#issuecomment-510662216,1,['update'],['update']
Deployability,"_down: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/350/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `40% <ø> (-57.62%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/350/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `30% <0%> (-29.71%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/350/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `68.33% <100%> (-1.67%)` | :arrow_down: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/350/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.68% <100%> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/350/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `74.68% <100%> (-1.9%)` | :arrow_down: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/350/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `37.5% <19.44%> (-6.41%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/350/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `46.83% <50%> (-15.19%)` | :arrow_down: |; | ... and [6 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/350/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/350?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/350?src=pr&el=footer). Last update [848edd9...25cf2da](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/350?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/350#issuecomment-520164877:3244,update,update,3244,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/350#issuecomment-520164877,1,['update'],['update']
Deployability,"`91.42% <ø> (-0.24%)` | :arrow_down: |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `94.35% <ø> (+0.75%)` | :arrow_up: |; | [test/runtests\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC9ydW50ZXN0c191dGlscy5qbA==) | `67.56% <73.33%> (+42.56%)` | :arrow_up: |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `100.00% <100.00%> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `92.06% <100.00%> (ø)` | |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `85.71% <100.00%> (ø)` | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | `100.00% <100.00%> (ø)` | |; | [test/test\_examples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2V4YW1wbGVzLmps) | `76.66% <100.00%> (-9.34%)` | :arrow_down: |; | ... and [1 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850?src=pr&el=footer). Last update [8198ca7...871b448](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672128397:3300,update,update,3300,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672128397,1,['update'],['update']
Deployability,`Oceananigans.BoundaryConditions.ContinuousBoundaryFunction` warnings in examples,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1775:33,Continuous,ContinuousBoundaryFunction,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1775,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"`Oceananigans.OutputReaders.FieldDataset` used to just be a `Dict{String,FieldTimeSeries}` but now it is a struct that also stores a dictionary metadata and a filepath. This PR also adds some quality of life features to `Oceananigans.OutputReaders.FieldDataset`:; 1. A list of metadata paths can be specified. Some scripts use `file[""metadata""]` but others might use `file[""parameters""]` (or potentially both).; 2. A `grid` and `ArrayType` may be specified at the `FieldDataset` level which is then passed to `FieldTimeSeries` constructors. Hoping to also bump the patch version along with this PR.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1903:565,patch,patch,565,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1903,1,['patch'],['patch']
Deployability,``; [45606] signal (11.1): Segmentation fault; in expression starting at /glade/u/home/knudsenl/.julia/packages/CUDA/Tl08O/src/CUDA.jl:25; Allocations: 2907 (Pool: 2898; Big: 9); GC: 0; Installing known registries into `~/.julia`; ┌ Warning: The active manifest file has dependencies that were resolved with a different julia version (1.9.2). Unexpected behavior may occur.; └ @ /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/Manifest.toml:0; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed Adapt ─────────────────────── v4.0.4; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed SentinelArrays ────────────── v1.4.5; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed Tables ────────────────────── v1.12.0; Installed FixedPointNumbers ─────────── v0.8.5; Installed GPUCompiler ───────────────── v0.26.7; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArraysCore ──────────── v1.4.3; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed StaticArrays ──────────────── v1.9.7; Installed TimerOutputs ──────────────── v0.5.24; Installed AbstractFFTs ──────────────── v1.5.0; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed OrderedCollections ────────── v1.6.3; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed UnsafeAtomicsLLVM ─────────── v0.1.5; Installed LaTeXStrings ──────────────── v1.3.1; Installed NVTX ──────────────────────── v0.3.4; Inst,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472:1068,Install,Installed,1068,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472,1,['Install'],['Installed']
Deployability,"```; (base) glwagner@sverdrup:~$ nvcc --version; nvcc: NVIDIA (R) Cuda compiler driver; Copyright (c) 2005-2018 NVIDIA Corporation; Built on Sat_Aug_25_21:08:01_CDT_2018; Cuda compilation tools, release 10.0, V10.0.130; ```. What do we need?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-832204669:195,release,release,195,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-832204669,1,['release'],['release']
Deployability,"```[DengQ@localhost bin]$ ./julia; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.5.3 (2020-11-09); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> pkg""st --manifest""; ERROR: LoadError: UndefVarError: @pkg_str not defined; in expression starting at REPL[1]:1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-824054281:294,release,release,294,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1601#issuecomment-824054281,1,['release'],['release']
Deployability,`auxiliary_fields` are fields that are meant to be used in forcing functions. That's related to why you're getting the error --- `Forcing.field_dependencies` can include auxiliary fields. A callback is a good way to integrate something and will not change your tendency kernel functions.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482922692:216,integrat,integrate,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482922692,1,['integrat'],['integrate']
Deployability,`benchmarks/Manifest.toml` had CUDA updated to 3.7 which caused problems when benchmarking Oceananigans restricted to 3.3.6. This PR adds a `compat` to `benchmarks/Project.toml` and downgrades `CUDA`. I think maybe a better solution would be to add Oceananigans explicitly to `benchmarks/Project.toml`. But then to run the benchmarks on the current repo we'd have to update the environment every time.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2417:36,update,updated,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2417,2,['update'],"['update', 'updated']"
Deployability,`w` is not a prognostic field for the hydrostatic free surface model so it cannot be used as a dependency in continuous boundary functions. We could think to change the dependencies to all fields instead of only the prognostic ones,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2711#issuecomment-1225322979:109,continuous,continuous,109,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2711#issuecomment-1225322979,1,['continuous'],['continuous']
Deployability,"`w` is not prognostic in a hydrostatic model because the vertical momentum equation is replaced by hydrostatic balance. `w` is then determined by integrating the continuity equation. > but on complex bottom topography the drag on the sides should physically depend on w, among other things. It might make sense to follow @simone-silvestri's suggestion and include all fields in `field_dependencies`. That would open up more options for forcing in general, esp using `auxiliary_fields`. Here though, the thinking may not be correct. The hydrostatic approximation is an asymptotic approximation predicated on `w / u ~ H / L << 1`; `w` is negligible compared to the horizontal components. This has important implications: because `w` is not prognostic, kinetic energy is `(u^2 + v^2) / 2`; one cannot derive a conservation equation from the governing equations for a kinetic energy that includes `w`. It may also make sense to omit `w` from the drag law, so that it dissipates hydrostatic kinetic energy. But I guess the most important thing is that there should be no measurable difference between `sqrt(u^2 + v^2 + w^2)` and `sqrt(u^2 + v^2)` in a hydrostatic model, so `w` shouldn't be needed to impose drag, right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2711#issuecomment-1225870618:146,integrat,integrating,146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2711#issuecomment-1225870618,1,['integrat'],['integrating']
Deployability,a 20-year integration of the quarter degree simulation (in `validation/near_global_lat_lon/near_global_quarter_degree.jl`) using the following as a free surface:. ```; Δt = 10minutes # probably we can go to 10min or 15min?; CFL = 0.7. wave_speed = sqrt(g_Earth * grid.Lz); Δg = 1 / sqrt(1 / min_Δx(grid)^2 + 1 / min_Δy(grid)^2). @show substeps = Int(ceil(2 * Δt / (CFL / wave_speed * Δg))). free_surface = SplitExplicitFreeSurface(; substeps); ```. https://user-images.githubusercontent.com/33547697/217328677-9c737e8d-140b-4a9f-92b9-d42f5d364a3d.mp4,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1421225576:10,integrat,integration,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1421225576,1,['integrat'],['integration']
Deployability,"aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [src/Fields/show\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [test/test\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NvbHZlcnMuamw=) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | | |; | [docs/citations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-ZG9jcy9jaXRhdGlvbnMuamw=) | | |; | [benchmark/benchmark\_forcing\_functions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mb3JjaW5nX2Z1bmN0aW9ucy5qbA==) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | [benchmark/benchmark\_ffts.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mZnRzLmps) | | |; | ... and [60 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911?src=pr&el=footer). Last update [0fe0d15...c70ed0e](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/911#issuecomment-687049822:3239,update,update,3239,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/911#issuecomment-687049822,1,['update'],['update']
Deployability,aac8ad0ee5); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./Base.jl:495; jfptr_include_46447.1 at /orcd/data/raffaele/001/glwagner/Software/julia-1.10.5/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; exec_options at ./client.jl:318; _start at ./client.jl:552; jfptr__start_82798.1 at /orcd/data/raffaele/001/glwagner/Software/julia-1.10.5/lib/julia/sys.so (unknown line); _jl_invoke at /cac,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:4738,release,release-,4738,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,1,['release'],['release-']
Deployability,"abot</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/226"">julia-actions/setup-julia#226</a></li>; <li>Bump the version number to <code>2.0.0</code> in <code>package.json</code> and <code>package-lock.json</code> by <a href=""https://github.com/DilumAluthge""><code>@​DilumAluthge</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/228"">julia-actions/setup-julia#228</a></li>; </ul>; <h2>New Contributors</h2>; <ul>; <li><a href=""https://github.com/ranocha""><code>@​ranocha</code></a> made their first contribution in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/209"">julia-actions/setup-julia#209</a></li>; </ul>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/julia-actions/setup-julia/compare/v1.9.6...v2.0.0"">https://github.com/julia-actions/setup-julia/compare/v1.9.6...v2.0.0</a></p>; <h2>v1.9.6: Fix Apple Silicon installation</h2>; <h2>What's Changed</h2>; <ul>; <li>Fix the Apple Silicon (macOS <code>aarch64</code> / <code>arm64</code>) URLs for Julia nightly by <a href=""https://github.com/benlorenz""><code>@​benlorenz</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/220"">julia-actions/setup-julia#220</a></li>; <li>put quotes on readme version examples by <a href=""https://github.com/IanButterworth""><code>@​IanButterworth</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/203"">julia-actions/setup-julia#203</a></li>; </ul>; <h3>Deps &amp; CI</h3>; <ul>; <li>Bump actions/cache from 3 to 4 by <a href=""https://github.com/dependabot""><code>@​dependabot</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/215"">julia-actions/setup-julia#215</a></li>; <li>Bump <code>@​types/node</code> from 20.10.6 to 20.11.16 by <a href=""https://github.com/dependabot""><code>@​dependabot</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/213"">julia-actions/setup-julia#213</a>",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3544:2292,install,installation,2292,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3544,1,['install'],['installation']
Deployability,"age 78.23% 78.28% +0.05% ; ==========================================; Files 118 118 ; Lines 2375 2390 +15 ; ==========================================; + Hits 1858 1871 +13 ; - Misses 517 519 +2; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/665?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/TimeSteppers/adams\_bashforth.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/665/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9hZGFtc19iYXNoZm9ydGguamw=) | `100% <100%> (ø)` | :arrow_up: |; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/665/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `84.61% <0%> (-1.93%)` | :arrow_down: |; | [src/Simulations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/665/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zLmps) | `93.44% <0%> (-0.44%)` | :arrow_down: |; | [src/OutputWriters/OutputWriters.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/665/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `100% <0%> (ø)` | :arrow_up: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/665/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `100% <0%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/665?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/665?src=pr&el=footer). Last update [e90c52a...d614833](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/665?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/665#issuecomment-594938926:2545,update,update,2545,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/665#issuecomment-594938926,1,['update'],['update']
Deployability,"age Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | |; | [src/Models/show\_models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9zaG93X21vZGVscy5qbA==) | `0% <ø> (ø)` | |; | [src/Architectures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL0FyY2hpdGVjdHVyZXMuamw=) | `88.88% <ø> (ø)` | |; | [src/Fields/Fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `100% <ø> (ø)` | |; | [src/Fields/show\_fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | `0% <0%> (ø)` | |; | [src/Simulations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zLmps) | `93.75% <100%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `78.78% <88.88%> (ø)` | |; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `84.21% <90.9%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627?src=pr&el=footer). Last update [c417701...9187570](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/627?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/627#issuecomment-586666059:2767,update,update,2767,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/627#issuecomment-586666059,1,['update'],['update']
Deployability,agrangianParticleTracking/LagrangianParticleTracking.jl:143 [inlined]; step_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/HydrostaticFreeSurfaceModels.jl:107 [inlined]; #time_step!#8 at /home/alir/atdepth/Oceananigans.jl/src/TimeSteppers/quasi_adams_bashforth_2.jl:124; time_step! at /home/alir/atdepth/Oceananigans.jl/src/TimeSteppers/quasi_adams_bashforth_2.jl:76; unknown function (ip: 0x7c00a0f12fbd); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; top-level scope at /home/alir/atdepth/Oceananigans.jl/particles_error.jl:37; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:925; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./client.jl:489; unknown function (ip: 0x7c00f54ff855); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-relea,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:4575,release,release-,4575,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,alang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; eval_user_input at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:150; repl_backend_loop at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:246; #start_repl_backend#46 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:231; start_repl_backend at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:228; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #run_repl#59 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:389; run_repl at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:375; jfptr_run_repl_91805.1 at /home/alir/.julia/,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:6450,release,release-,6450,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"alo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWxsX2hhbG9fcmVnaW9ucy5qbA==) | `100.00% <100.00%> (ø)` | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `98.07% <100.00%> (+0.21%)` | :arrow_up: |; | [test/test\_time\_stepping\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmdfYmNzLmps) | `98.21% <100.00%> (-0.25%)` | :arrow_down: |; | [src/Simulations/simulation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3NpbXVsYXRpb24uamw=) | `68.75% <0.00%> (-6.25%)` | :arrow_down: |; | [src/TimeSteppers/velocity\_and\_tracer\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy92ZWxvY2l0eV9hbmRfdHJhY2VyX3RlbmRlbmNpZXMuamw=) | `100.00% <0.00%> (ø)` | |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `92.30% <0.00%> (+0.47%)` | :arrow_up: |; | [src/Buoyancy/seawater\_buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L3NlYXdhdGVyX2J1b3lhbmN5Lmps) | `74.07% <0.00%> (+3.48%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984?src=pr&el=footer). Last update [d80be8c...f384f90](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/984#issuecomment-699495385:3365,update,update,3365,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/984#issuecomment-699495385,1,['update'],['update']
Deployability,"already annoying that I have to wait several minutes for the GPU tests to run as I'm debugging. So just starting up a discussion around this topic. I can see us hitting some limitations soon:; 1. A comprehensive test suite will take time to run, long enough that we cannot keep running it during development and debugging.; 2. Comprehensive model verification tests (or system tests?) will take even longer to run and are absolutely crucial (see #81 #136), so this problem will get worse in the future.; 3. GPU tests take a while to run because of long compile time (#66) and they run on top of all the CPU tests. In general, setting up GPU models take more time so it's not ideal that we're setting up tons of tiny models for testing. Testing GPU stuff may also involve some expensive scalar CUDA operations (see #82). We will also need to run the test suite on the following architectures in the future:; 1. single-core CPU (Travis CI and Appveyor are fine here); 2. single GPU (JuliaGPU's GitLab CI pipeline works great here); 3. multi-core single CPU (MPI) (paid CI plans will probably work here); 4. multiple distributed CPU nodes (MPI) (no idea where to run this); 5. multiple GPUs (MPI) (no idea where to run this). Some ideas for things to do that will help:; 1. Explicitly split the tests up into 2-3 suites; 1.1. **Unit tests**: should run in a few minutes so we can run them during development and on every commit/PR/etc.; 1.2. **Integration tests**: can take a while to run so we don't want to run these locally all the time but probably on every PR. Shouldn't take much more than 1 hour to run so we don't have to wait forever to merge PR's.; 1.3. **Model verification tests** (also called _end-to-end_ tests): will probably take a long time to run. Maybe run this once a day? Or manually if there's a PR that changes core functionality.; 2. Run the tests in parallel. I think the main Julia repo does this. We might have to roll our own parallel solution (see [this thread](https://disc",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/139:1218,pipeline,pipeline,1218,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/139,1,['pipeline'],['pipeline']
Deployability,"alyze, visualize, and compare benchmark results. It's also easier to add new benchmarks. And we have automated multithreading benchmarks (we can approach MPI benchmarking in a similar manner). We used to use TimerOutputs.jl for benchmarking but really it's made more for profiling. This PR; 1. switches to using the `BenchmarkGroup` from BenchmarkTools.jl which makes it easy to compare benchmarks (e.g. check for CPU -> GPU performance and for performance relative to a base case).; 2. Dataframes.jl and PrettyTables.jl are used to visualize benchmarks, which are prettier, and you can output HTML tables that can be easily embedded into documentation.; 3. PkgBenchmark.jl allows use to compare benchmarks between two commits or branches (right now only via `benchmark_regression.jl`) which should make it easy to automate checking for performance regressions between PRs and the master branch. The next big step for benchmarking would be to create a Buildkite benchmarks pipeline that can be triggered via GitHub comments (this would involve looking into https://github.com/buildkite/trigger-pipeline-action). I started embedding HTML tables into the docs but it's going to be hard for users to parse tables full of numbers. Plots and bar graphs might be much more useful here, but this might require a Buildkite pipeline to generate the figures to embed into the documentation. So I'll leave this important step for a different PR. I also want to add a script that generates a better version of the benchmark plots in the README, but this might have to wait for a future PR. It's a little rough around the edges but I think it's polished enough to be considered for merging. Feels like benchmarks share a lot of boilerplate but might try to reduce it in a future PR. Some fun benchmarking facts:; * GPU models using WENO-5 are 250x faster than CPU models using WENO-5!; * TEOS-10 slows down your CPU model by ~30%, but only ~3% for GPU models!; * 2D Leith is most expensive closure. Resolves #1088",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1169:1154,pipeline,pipeline-action,1154,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1169,2,['pipeline'],"['pipeline', 'pipeline-action']"
Deployability,amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; eval_user_input at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:150; repl_backend_loop at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:246; #start_repl_backend#46 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:231; start_repl_backend at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:228; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #run_repl#59 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:389; run_repl at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:375; jfptr_run_repl_91805.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #1013 at ./client.jl:432; jfptr_YY.1013_82772.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cac,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:6989,release,release-,6989,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,amongst other updates it also bumps CUDA 4.1.2->4.2.0 and KA 0.9.1->0.9.4,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3101:14,update,updates,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3101,1,['update'],['updates']
Deployability,an_particle_advection.jl:193; step_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Models/LagrangianParticleTracking/LagrangianParticleTracking.jl:143 [inlined]; step_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/HydrostaticFreeSurfaceModels.jl:107 [inlined]; #time_step!#8 at /home/alir/atdepth/Oceananigans.jl/src/TimeSteppers/quasi_adams_bashforth_2.jl:124; time_step! at /home/alir/atdepth/Oceananigans.jl/src/TimeSteppers/quasi_adams_bashforth_2.jl:76; unknown function (ip: 0x7c00a0f12fbd); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; top-level scope at /home/alir/atdepth/Oceananigans.jl/particles_error.jl:37; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:925; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./client.jl:489; unknown function (ip: 0x7c00f54ff855); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-re,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:4468,release,release-,4468,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"ananigans.Fields: _set!; ./Models/ShallowWaterModels/set_shallow_water_model.jl:import Oceananigans.Fields: set!; ./Models/ShallowWaterModels/set_shallow_water_model.jl:function set!(model::ShallowWaterModel; kwargs...); ./Models/ShallowWaterModels/set_shallow_water_model.jl: _set!(ϕ, value); ./Models/ShallowWaterModels/shallow_water_model.jl: set!(bathymetry_field, bathymetry); ./Models/HydrostaticFreeSurfaceModels/matrix_implicit_free_surface_solver.jl: set!(η, reshape(storage, solver.problem_size...)); ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface.jl:import Oceananigans.TimeSteppers: reset!; ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface.jl:function reset!(sefs::SplitExplicitFreeSurface); ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface_kernels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl:""""""Integrate z at locations `location` and set! `height`` with the result""""""; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:using Oceananigans.Fields: _set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:import Oceananigans.Fields: set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: set!(model; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:`set!(ϕ::AbstractField, data)` function exists.; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:set!(model, u=u₀, v=v₀, T=T₀); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:function set!(model::HydrostaticFreeSurfaceModel; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: @apply_regionally _set!(ϕ, value); ./Models/Models.jl:import Oceananigans.TimeSteppers: reset!; ./Models/Models.jl:function reset!(model::AbstractModel); ./MultiRegion/multi_region_field.jl:im",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:3985,Integrat,Integrate,3985,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021,1,['Integrat'],['Integrate']
Deployability,"ananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | |; | [test/test\_models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X21vZGVscy5qbA==) | `94.73% <ø> (ø)` | |; | [test/test\_coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | `85.33% <77.55%> (-14.67%)` | :arrow_down: |; | [src/Coriolis/non\_traditional\_f\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL25vbl90cmFkaXRpb25hbF9mX3BsYW5lLmps) | `80.00% <80.00%> (ø)` | |; | [src/Coriolis/non\_traditional\_beta\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL25vbl90cmFkaXRpb25hbF9iZXRhX3BsYW5lLmps) | `82.60% <82.60%> (ø)` | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | `100.00% <100.00%> (ø)` | |; | [src/BoundaryConditions/boundary\_function.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9ib3VuZGFyeV9mdW5jdGlvbi5qbA==) | `81.48% <0.00%> (-4.24%)` | :arrow_down: |; | ... and [20 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899?src=pr&el=footer). Last update [eeb62d1...d5dfc74](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/899#issuecomment-685689480:3387,update,update,3387,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/899#issuecomment-685689480,1,['update'],['update']
Deployability,"and greatly expand the docstring. Much help was provided by @jipolanco on this journey. Note right now we depend on `PencilFFTs#master` but hopefully that'll change with https://github.com/jipolanco/PencilFFTs.jl/pull/47. This required a bit of thinking and logic about pencil decompositions. What I learned is hopefully well-summarized in the docstring:. ```; """"""; DistributedFFTBasedPoissonSolver(global_grid, local_grid). Return a FFT-based solver for the Poisson equation,. ∇²x = b. for `MultiArch`itectures. Supported configurations; ========================. We support two ""modes"":. 1. Two-dimensional decompositions in (x, y) for problems with either; `Nz > Rx` or `Nz > Ry` (therefore, three-dimensional). 2. One-dimensional decompositions in either x or y for problems that are; either two-dimensional, or have limited dimensionality in z. Above, `Nz = size(global_grid, 3)` and `Rx, Ry, Rz = architecture(local_grid).ranks`. Other configurations that are decomposed in (x, y) but have too few Nz,; or any configuration decomposed in z, are not supported. Algorithm for two-dimensional decompositions; ============================================. When decomposition in two-dimensions for a three-dimensional problem,; there are three forward transforms, three backward transforms,; and 4 transpositions requiring MPI communication. In the following schematic, the first; dimension is always the local dimension. The following algorithm requires that `Nz > Rx`,; where `Nz` is the number of vertical cells and `Rx` is the number of ranks in x.; For `Nz < Rx` but `Nz > Ry`, a similar algorithm applies with x and y swapped:. 1. `first(storage)` is initialized with layout (z, x, y).; 2. Transform along z.; 3 Transpose + communicate to storage[2] in layout (x, z, y),; which is distributed into `(Rx, Ry)` processes in (z, y).; 4. Transform along x.; 5 Transpose + communicate to last(storage) in layout (y, x, z),; which is distributed into `(Rx, Ry)` processes in (x, z).; 6. Transform in",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2536:982,configurat,configurations,982,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2536,2,['configurat'],"['configuration', 'configurations']"
Deployability,"ang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; jl_f__call_latest at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/builtins.c:812; #invokelatest#2 at ./essentials.jl:892 [inlined]; invokelatest at ./essentials.jl:889 [inlined]; run_main_repl at ./client.jl:416; exec_options at ./client.jl:333; _start at ./client.jl:552; jfptr__start_82798.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; true_main at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/jlapi.c:582; jl_repl_entrypoint at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/jlapi.c:731; main at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/cli/loader_exe.c:58; unknown function (ip: 0x7c00f758ce07); __libc_start_main at /usr/lib/libc.so.6 (unknown line); unknown function (ip: 0x4010b8); Allocations: 67298744 (Pool: 67235612; Big: 63132); GC: 66; fish: Job 1, 'julia --project' terminated by signal SIGSEGV (Address boundary error); ```. GPU illegal memory access:. ```; [ Info: Skipping precompilation since __precompile__(false). Importing Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09].; [ Info: Iteration 1...; [ Info: Iteration 2...; [ Info: Iteration 3...; [ Info: Iteration 4...; [ Info: Iteration 5...; [ Info: Iteration 6...; [ Info: Iteration 7...; [ Info: Iteration 8...; [ Info: Iteration 9...; [ Info: Iteration 10...; [ Info: Iteration 11...; [ Info: Iteration 12...; [ Info: Iteration 13...; [ Info: Iteration 14...; [ Info: Iteration 15...; [ Info: Iteration 16...; [ Info: Iteration 17...; [ Info: Iteration 18...; [ Info: Iteration 19...; [ Info: Iteration 20...; [ Info: Iteration 21",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:9104,release,release-,9104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"anigans.OutputWriters: JLD2OutputWriter, FieldSlicer, TimeInterval; using Statistics; # using CUDA. #number of grid spacing in south, north and vertical direction and in oceananigans ; #they call this as the size of one grid in that direction; const Nx=256; const Ny=256; const Nz=65. #Length of grid in south, north and vertical direction; const Lx=4; const Ly=4; const Lz=0.1. #Vetrical temperature gradient; const dTz = 70. #scaled gravitational acceleration; const g=300. const R0=1; const T0=30; const Factor_T =1e-6; const Factor_V=1e-8; const CFL=0.6; const maximum_Δt= 0.2minute; const max_allowable_change_in_Δt= 1.1; const initial_timestep = 0.05; Name_of_simulation = ""ocean_convection_Fplane_Vertical_strecthed_grid""; # stretching_function= cos(π / 2 * (z - 1)) , won't work as z is only defined after grid function. . const stop_time_info= 12minute #Stop the simulation once this much model clock time has passed.; const iteration_interval_info= 10 ; #How often to update the time step, check stop criteria, and call progress function (in number of iterations). #Coefficient of Thermal expansion; const alpha= 2e-4; #Coefficient of Salinity; const saline=0; #diffusive viscocity; const v=1e-5 ; #diffusivity; const k=2e-6 . const l=Lx/2 #center of gaussian field; const m=Ly/2 #center of gausian field. const Bo=3.6e-4 #maximum surface flux; const f=-0.5 #coriolis parameter. #Constructing the Vertically stretched grid with Chebyshev spacing in z; ; computational_grid = VerticallyStretchedRectilinearGrid(size = (Nx, Ny, Nz), ; x = (0, Lx),; y = (0, Ly),; halo = (3, 3, 3),; zF = k -> cos((2k - 1) / 2Nz)). # computational_grid = RegularRectilinearGrid(size=(Nx, Ny, Nz), extent=(Lx, Ly, Lz)); show(computational_grid). ##xC,yC,zC are not defined for vertically stretched grid; computational_grid.zᵃᵃᶜ; computational_grid.xᶜᵃᵃ; computational_grid.yᵃᶜᵃ. ###############################################################; #checking the value of all the governing parameters. Raf= (Bo*Lz^4)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1571#issuecomment-819158999:1297,update,update,1297,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1571#issuecomment-819158999,1,['update'],['update']
Deployability,"anigans.jl/pull/130?src=pr&el=h1) Report; > Merging [#130](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/130?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/0947ba57b9f35a5ee721c951da8f6def89db0d70?src=pr&el=desc) will **decrease** coverage by `0.42%`.; > The diff coverage is `72.72%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/130/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/130?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #130 +/- ##; ==========================================; - Coverage 57.29% 56.87% -0.43% ; ==========================================; Files 19 19 ; Lines 644 647 +3 ; ==========================================; - Hits 369 368 -1 ; - Misses 275 279 +4; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/130?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/130/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `83.33% <ø> (-4.91%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/130/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `69.28% <72.72%> (-1.07%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/130?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/130?src=pr&el=footer). Last update [0947ba5...f31e0b3](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/130?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/130#issuecomment-473474188:1865,update,update,1865,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/130#issuecomment-473474188,1,['update'],['update']
Deployability,"ans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Flux,Nothing},BoundaryCondition{Flux,Nothing}}}}}}},NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},Oceananigans.Advection.CenteredSecondOrder,Oceananigans.Solvers.PressureSolver{Oceananigans.Solvers.HorizontallyPeriodic,GPU,NamedTuple{(:kx², :ky², :kz²),Tuple{CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3}}},CUDA.CuArray{Complex{Float64},3},NamedTuple{(:FFTxy!, :FFTz!, :IFFTxy!, :IFFTz!),Tuple{CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPla",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:29795,Continuous,ContinuousForcing,29795,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,3,['Continuous'],['ContinuousForcing']
Deployability,"ans.jl/pull/380/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `70% <0%> (ø)` | :arrow_up: |; | [...closures/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvcm96ZW1hX2FuaXNvdHJvcGljX21pbmltdW1fZGlzc2lwYXRpb24uamw=) | `23.95% <0%> (ø)` | |; | [...ures/verstappen\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdmVyc3RhcHBlbl9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `52.54% <0%> (ø)` | |; | [...c/turbulence\_closures/velocity\_tracer\_gradients.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdmVsb2NpdHlfdHJhY2VyX2dyYWRpZW50cy5qbA==) | `69.72% <0%> (ø)` | |; | [src/turbulence\_closures/smagorinsky.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvc21hZ29yaW5za3kuamw=) | `67.79% <0%> (ø)` | |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `88.7% <0%> (+1.2%)` | :arrow_up: |; | ... and [2 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380?src=pr&el=footer). Last update [8c1c776...ee0b40e](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/380?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/380#issuecomment-525911444:3816,update,update,3816,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/380#issuecomment-525911444,1,['update'],['update']
Deployability,any slight dependency update results in most GPU tests failing... :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2873#issuecomment-1399622770:22,update,update,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2873#issuecomment-1399622770,1,['update'],['update']
Deployability,"area. Then, an added forcing term incorporates the boundary conditions into the equations. [Mittal and Iaccarino (2003)](https://www.annualreviews.org/doi/abs/10.1146/annurev.fluid.37.061903.175743), outline several ways we could do this, which all fall into two large categories:. 1. Continuous Forcing: We add a forcing term to the continuous equations, discretize the new system, and solve as normal. If the IB is set to coincide with the mesh nodes, then you get a “stairstep” like boundary, whereas if the IB intersects the mesh arbitrarily, you must distribute the forcing to several nearby nodes. Either way, it may not give you a sharp enough boundary, and you get stability constraints on rigid boundaries. . 2. Discrete Forcing: We discretize, then determine what the forcing needs to be at each time step to satisfy the boundary conditions. This method usually takes a predictor-corrector type approach as described by [Balaras (2004)](https://www.sciencedirect.com/science/article/abs/pii/S0045793003000586). You would use a predictor step to interpolate the correct values at the boundary with nearby nodes. Then, you can solve for the necessary forcing in the discretized time stepper. Finally, you recompute the true solution for the next time step, with the correct forcing term. This method does not have the stability constraints and can create a sharper boundary, but implementation will involve more changes to create this routine. . I'm leaning towards the discrete forcing, since it seems like continuous just won't work well for rigid boundaries. I haven't fully worked out how the predictor-corrector idea will work with the pressure solver, etc. . [WRF](https://journals.ametsoc.org/mwr/article/146/9/2781/103105/Large-Eddy-Simulation-over-Complex-Terrain-Using) uses Discrete forcing in their LES IBM code, while [PALM](https://gmd.copernicus.org/articles/8/2515/2015/gmd-8-2515-2015.pdf) uses a masking method that involves stair step representation for complex topography.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1036:2048,continuous,continuous,2048,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1036,1,['continuous'],['continuous']
Deployability,"ary conditions by using the gradient boundary condition, the script can be found [here](https://github.com/liuchihl/Simple-tests/blob/85f34ec2443a6ff9860f5adfbc68ff39995f00bb/1Ddiffusion_testBCflux.jl). . In the experiment, I have specified both the initial temperature (perturbation) and a constant background temperature < T > gradient, so that the total temperature T_total = < T > + T.; ; The movie below shows T_total and presents two simple experiments with an existing initial temperature. In the blue case, the default no-flux boundary condition is applied (i.e., no gradient in the wall-normal direction), but the gradient at the boundaries is nonzero because the boundary condition does not account for the background temperature. In contrast, the red case includes a boundary condition that forces the gradient of T_total to be 0. ; With this corrected boundary condition (red curve), the flux at the boundaries is 0, which is physical. However, it remains unclear how to incorporate these corrected fluxes for more complicated configurations. https://github.com/CliMA/Oceananigans.jl/assets/68127124/69e64cf9-6248-4274-9b6d-5f763827e768. The movie below shows two additional cases without an initial temperature, indicating that the background temperature, < T > defines the entire field. ; The constant blue line throughout the simulation implies that the background scalar does not diffuse either within the domain or at the boundaries. However, in the red case, despite the absence of diffusion affecting the background temperature, the nonzero flux at the boundaries causes the curve to become smoothed. ; If diffusion does not affect the background field, would it still make sense if the stratification is not a constant, such as in a Kelvin-Helmholtz instability configuration, e.g., < b > = tanh(z)?. https://github.com/CliMA/Oceananigans.jl/assets/68127124/d350c5ad-2e14-4992-8c5d-f947a1ddf7bb. This brings up the question: what should the default behavior for background fields b",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3568:1218,configurat,configurations,1218,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3568,1,['configurat'],['configurations']
Deployability,as mentioned on slack here's @jlk9 's Enzyme integration test PR https://github.com/CliMA/Oceananigans.jl/pull/3480. We should check that the tuple doesn't also break that (or try to find the correct mutually happy solution like maybe vararg type),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1944736039:45,integrat,integration,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1944736039,1,['integrat'],['integration']
Deployability,"ase.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, ::Oceananigans.Advection.CenteredSecondOrder, ::NonTraditionalFPlane{Float64}, ::SeawaterBuoyancy{Float64,LinearEquationOfState{Float64},Nothing,Float64}, ::Nothing, ::AnisotropicDiffusivity{Float64,Float64,Float64,NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}}}, ::NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}, ::Nothing, ::NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, ::Clock{Float64}) at /home/ptuckman/.julia/packages/Oceananigans/KJCVx/src/TimeSteppers/time_stepping_kernels.jl:18; [22] calculate_tendencies!(::NamedTuple{(:u, :v, :w, :T),NTuple{4,OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::NamedTuple{(:T,),Tu",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:19940,Continuous,ContinuousForcing,19940,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"aster](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/232aab2b8c3dc5cf6bc59931a197fde588d6be57?el=desc) will **increase** coverage by `0.28%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1078/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1078?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1078 +/- ##; ==========================================; + Coverage 56.91% 57.20% +0.28% ; ==========================================; Files 162 162 ; Lines 3811 3881 +70 ; ==========================================; + Hits 2169 2220 +51 ; - Misses 1642 1661 +19 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1078?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1078/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `59.75% <0.00%> (+2.61%)` | :arrow_up: |; | [src/Fields/computed\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1078/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9jb21wdXRlZF9maWVsZC5qbA==) | `68.08% <0.00%> (+3.79%)` | :arrow_up: |; | [src/Fields/averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1078/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hdmVyYWdlZF9maWVsZC5qbA==) | `82.22% <0.00%> (+4.44%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1078?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1078?src=pr&el=footer). Last update [232aab2...96e4113](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1078?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1078#issuecomment-711070198:2002,update,update,2002,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1078#issuecomment-711070198,1,['update'],['update']
Deployability,"at64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}) resulted in invalid LLVM IR; Reason: unsupported call to an unknown function (call to jl_f_getfield); Stacktrace:; [1] getindex; @ ./namedtuple.jl:136; [2] field_arguments; @ ~/OC.jl/src/Utils/user_function_arguments.jl:1; [3] user_function_arguments; @ ~/OC.jl/src/Utils/user_function_arguments.jl:21; [4] ContinuousForcing; @ ~/OC.jl/src/Forcings/continuous_forcing.jl:118; [5] u_velocity_tendency; @ ~/OC.jl/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:64; [6] macro expansion; @ ~/OC.jl/src/Models/NonhydrostaticModels/calculate_nonhydrostatic_tendencies.jl:134; [7] gpu_calculate_Gu!; @ ~/.julia/packages/KernelAbstractions/C8flJ/src/macros.j",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:2044,Continuous,ContinuousForcing,2044,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353,1,['Continuous'],['ContinuousForcing']
Deployability,"at64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}; name::Nothing, always_inline::Bool, kwargs::Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:maxthreads,), Tuple{Int64}}}); @ CUDA ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:300; [12] macro expansion; @ ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:102 [inlined]; [13] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice{false, true}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!)})(::Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.Offset",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:10652,Continuous,ContinuousForcing,10652,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353,1,['Continuous'],['ContinuousForcing']
Deployability,"at64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}}, args::LLVM.Module); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/validation.jl:141; [2] macro expansion; @ ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:418 [inlined]; [3] macro expansion; @ ~/.julia/packages/TimerOutputs/LHjFw/src/TimerOutput.jl:253 [inlined]; [4] macro expansion; @ ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:416 [inlined]; [5] emit_asm(job::GPUCompiler.CompilerJob, ir::LLVM.Module; strip::Bool, validate::Bool, format::LLVM.API.LLVMCodeGenFileType); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/utils.jl:83; [6] cufunction_compile(job::GPUCompiler.CompilerJob, ctx::LLVM.Context); @ CUDA ~/.julia/packages/CUDA/BbliS/src/comp",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:5112,Continuous,ContinuousForcing,5112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353,1,['Continuous'],['ContinuousForcing']
Deployability,"at64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}}}); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:76; [9] cufunction_compile(job::GPUCompiler.CompilerJob); @ CUDA ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:347; [10] cached_compilation(cache::Dict{UInt64, Any}, job::GPUCompiler.CompilerJob, compiler::typeof(CUDA.cufunction_compile), linker::typeof(CUDA.cufunction_link)); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/cache.jl:90; [11] cufunction(f::typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), tt::Type{Tuple{KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:8120,Continuous,ContinuousForcing,8120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353,1,['Continuous'],['ContinuousForcing']
Deployability,"at64}, free_surface::ImplicitFreeSurface{Nothing, Float64, Nothing, Nothing, Symbol, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, forcing::NamedTuple{(), Tuple{}}, closure::Tuple{VerticalScalarDiffusivity{Oceananigans.TurbulenceClosures.ExplicitTimeDiscretization, Float64, Float64}, HorizontalScalarDiffusivity{Oceananigans.TurbulenceClosures.ExplicitTimeDiscretization, Float64, Float64}}, boundary_conditions::NamedTuple{(:u, :v, :T), Tuple{FieldBoundaryConditions{Oceananigans.BoundaryConditions.DefaultPrognosticFieldBoundaryCondition, Oceananigans.BoundaryConditions.DefaultPrognosticFieldBoundaryCondition, BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, Oceananigans.BoundaryConditions.DefaultPrognosticFieldBoundaryCondition, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Nothing, Nothing, Nothing, typeof(wind_stress), Nothing, Tuple{}, Nothing, Nothing}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, Oceananigans.BoundaryConditions.DefaultPrognosticFieldBoundaryCondition, Oceananigans.BoundaryConditions.DefaultPrognosticFieldBoundaryCondition, Oceananigans.BoundaryConditions.DefaultPrognosticFieldBoundaryCondition, Oceananigans.BoundaryConditions.DefaultPrognosticFieldBoundaryCondition, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Int64}, BoundaryCondition{Oceananigans.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2430#issuecomment-1095685195:76123,Continuous,ContinuousBoundaryFunction,76123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2430#issuecomment-1095685195,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ate this? I think a code example would be helpful with an explanation on what's being accomplished. Also can you explain why this can't be implemented with a Callback (or forcing function)? I.e., why do we desire this as a source code feature? Just to be clear, I'm not saying it should be one way or another, but it's good to have explicit justification for source code features (which are expensive to maintain and require resources to test)!. No problem at all, [heres](https://gist.github.com/jagoosw/213d7f2ce3707768d4ddb07f8827cdd2) an example (not sure where best to put this/if you'd want it in the examples folder). This is about the simplest version I could think of where we have a particle randomly walking around converting tracer a into tracer b. The specific use case we've been using this for is modelling kelp fronds as particles which grow (variety of particle properties change) depending on how much nutrients the particles uptake from a biogeochemical model, and also release tracer back into the model. I also envisage using this to exert drag on the flow at some point. ![test](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif). Although I've had this working as custom dynamics of the particles the effect of the particles tendency can only be integrated with explicit Euler, i.e. at each substep it just does `tracer[i, j, k] += value*Δt`, where as this solution allows it to be properly integrated along with the other tendencies. I couldn't think of a way to implement this as a forcing function before, but perhaps I could use a callback to update an auxiliary field with the tendencies of the particles, and then add this as a forcing function, although I imagine that could use a lot more memory if there were a large grid and small amount of particles. (I fix the tests that's failed until we've discussed the other changes since its only failed because I forgot to change `getmask` to `get_mask` in the test script)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1238958939:1342,integrat,integrated,1342,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1238958939,6,"['integrat', 'update']","['integrated', 'update']"
Deployability,"ation); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:import Oceananigans.Fields: set!; ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl: set!(model; kwargs...); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:function set!(model::NonhydrostaticModel; enforce_incompressibility=true, kwargs...); ./Models/ShallowWaterModels/set_shallow_water_model.jl:import Oceananigans.Fields: set!; ./Models/ShallowWaterModels/set_shallow_water_model.jl:function set!(model::ShallowWaterModel; kwargs...); ./Models/ShallowWaterModels/shallow_water_model.jl: set!(bathymetry_field, bathymetry); ./Models/HydrostaticFreeSurfaceModels/matrix_implicit_free_surface_solver.jl: set!(η, reshape(storage, solver.problem_size...)); ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface_kernels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl:""""""Integrate z at locations `location` and set! `height`` with the result""""""; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:import Oceananigans.Fields: set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: set!(model; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:function set!(model::HydrostaticFreeSurfaceModel; kwargs...); ./MultiRegion/multi_region_field.jl:import Oceananigans.Fields: set!, compute!, compute_at!, validate_field_data, validate_boundary_conditions; ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:9595,Integrat,Integrate,9595,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021,1,['Integrat'],['Integrate']
Deployability,ations/halo_communication.jl:101 [inlined]; #fill_halo_regions!#37 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:90 [inlined]; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:87; unknown function (ip: 0x2aaac8ad0ee5); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./Base.jl:495; jfptr_include_46447.1 at /orcd/data/raffaele/001/glwagner/Software/julia-1.10.5/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/juli,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:4402,release,release-,4402,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,1,['release'],['release-']
Deployability,"ative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CU; DAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnat; ive.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.C; uDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDevi; ceArray{Float64,3,CUDAnative.AS.Global}, Forcing{typeof(Oceananigans.zero_func),typeof(Oceananigans.zero_func),typeof(Oce; ananigans.zero_func),typeof(Oceananigans.zero_func),typeof(Oceananigans.zero_func)}) resulted in invalid LLVM IR; Reason: unsupported call to the Julia runtime (call to jl_f__apply); Stacktrace:; [1] overdub at /data5/glwagner/.julia/packages/Cassette/xggAf/src/context.jl:260; [2] ν_ccc at /data5/glwagner/Projects/Oceananigans.jl/src/closures/constant_smagorinsky.jl:109; [3] ν_Σᵢⱼ at /data5/glwagner/Projects/Oceananigans.jl/src/closures/closure_operators.jl:405; [4] ∂x_faa at /data5/glwagner/Projects/Oceananigans.jl/src/closures/closure_operators.jl:64; [5] ∂x_2ν_Σ₁₁ at /data5/glwagner/Projects/Oceananigans.jl/src/closures/closure_operators.jl:409; [6] ∂ⱼ_2ν_Σ₁ⱼ at /data5/glwagner/Projects/Oceananigans.jl/src/closures/closure_operators.jl:432; [7] calculate_interior_source_terms! at /data5/glwagner/Projects/Oceananigans.jl/src/time_steppers.jl:152; [8] #12 at /data5/glwagner/.julia/packages/GPUifyLoops/hBRid/src/context.jl:136; Reason: unsupported dynamic function invocation (call to Cassette.overdub); ```. I think this is specific to the package upgrades. I also got this error when running the `rayleigh_benard_passive_tracer.jl` script (associated with the function that forces salinity). Mysteriously, it does not throw this error when it runs the tests. Not sure where to raise an issue (if this is an issue)... _Originally posted by @glwagner in https://github.com/climate-machine/Oceananigans.jl/pull/245#issuecomment-496472606_",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/248:2124,upgrade,upgrades,2124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/248,1,['upgrade'],['upgrades']
Deployability,"ays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, Nothing, NamedTuple{(:u, :v, :w), Tuple{typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing)}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}) failed; KernelError: passing and using non-bitstype argument. Argument 11 to your kernel function is of type ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}}, which is not isbits:; .west is of type BoundaryCond",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:5287,Continuous,ContinuousBoundaryFunction,5287,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"b3BpY19kaWZmdXNpdml0eS5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [...lementations/anisotropic\_biharmonic\_diffusivity.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/518/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2JpaGFybW9uaWNfZGlmZnVzaXZpdHkuamw=) | `0% <0%> (ø)` | |; | [src/TurbulenceClosures/closure\_tuples.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/518/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9jbG9zdXJlX3R1cGxlcy5qbA==) | `50% <100%> (-50%)` | :arrow_down: |; | [...mplementations/constant\_anisotropic\_diffusivity.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/518/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2NvbnN0YW50X2FuaXNvdHJvcGljX2RpZmZ1c2l2aXR5Lmps) | `100% <100%> (ø)` | :arrow_up: |; | [src/TurbulenceClosures/TurbulenceClosures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/518/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9UdXJidWxlbmNlQ2xvc3VyZXMuamw=) | `33.33% <26.31%> (-66.67%)` | :arrow_down: |; | [src/TurbulenceClosures/closure\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/518/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9jbG9zdXJlX29wZXJhdG9ycy5qbA==) | `66.66% <33.33%> (-13.59%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/518?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/518?src=pr&el=footer). Last update [8666964...7a765f2](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/518?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/518#issuecomment-548737546:3300,update,update,3300,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/518#issuecomment-548737546,1,['update'],['update']
Deployability,"b3JzLmps) | `100.00% <0.00%> (ø)` | |; | [...urbulenceClosures/viscous\_dissipation\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/782/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy92aXNjb3VzX2Rpc3NpcGF0aW9uX29wZXJhdG9ycy5qbA==) | `100.00% <0.00%> (ø)` | |; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/782/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `100.00% <0.00%> (ø)` | |; | [...e\_closure\_implementations/isotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/782/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2lzb3Ryb3BpY19kaWZmdXNpdml0eS5qbA==) | `100.00% <0.00%> (ø)` | |; | [...closure\_implementations/anisotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/782/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2RpZmZ1c2l2aXR5Lmps) | `100.00% <0.00%> (ø)` | |; | [src/TurbulenceClosures/TurbulenceClosures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/782/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9UdXJidWxlbmNlQ2xvc3VyZXMuamw=) | `37.93% <0.00%> (+1.08%)` | :arrow_up: |; | ... and [3 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/782/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/782?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/782?src=pr&el=footer). Last update [f18daed...0358145](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/782?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/782#issuecomment-652577566:3847,update,update,3847,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/782#issuecomment-652577566,1,['update'],['update']
Deployability,"bG93V2F0ZXJNb2RlbHMvc2V0X3NoYWxsb3dfd2F0ZXJfbW9kZWwuamw=) | `0.00% <0.00%> (ø)` | |; | [...c/Models/ShallowWaterModels/shallow\_water\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1188/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9TaGFsbG93V2F0ZXJNb2RlbHMvc2hhbGxvd193YXRlcl9tb2RlbC5qbA==) | `0.00% <0.00%> (ø)` | |; | [...els/ShallowWaterModels/show\_shallow\_water\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1188/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9TaGFsbG93V2F0ZXJNb2RlbHMvc2hvd19zaGFsbG93X3dhdGVyX21vZGVsLmps) | `0.00% <0.00%> (ø)` | |; | [...allowWaterModels/solution\_and\_tracer\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1188/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9TaGFsbG93V2F0ZXJNb2RlbHMvc29sdXRpb25fYW5kX3RyYWNlcl90ZW5kZW5jaWVzLmps) | `0.00% <0.00%> (ø)` | |; | [src/Models/ShallowWaterModels/update\_state.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1188/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9TaGFsbG93V2F0ZXJNb2RlbHMvdXBkYXRlX3N0YXRlLmps) | `0.00% <0.00%> (ø)` | |; | [...e\_closure\_implementations/isotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1188/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2lzb3Ryb3BpY19kaWZmdXNpdml0eS5qbA==) | `75.00% <ø> (ø)` | |; | ... and [10 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1188/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1188?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1188?src=pr&el=footer). Last update [7c8c0cf...6112c6c](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1188?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1188#issuecomment-729133987:3823,update,update,3823,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1188#issuecomment-729133987,1,['update'],['update']
Deployability,"blem at all, [heres](https://gist.github.com/jagoosw/213d7f2ce3707768d4ddb07f8827cdd2) an example (not sure where best to put this/if you'd want it in the examples folder). This is about the simplest version I could think of where we have a particle randomly walking around converting tracer a into tracer b. The specific use case we've been using this for is modelling kelp fronds as particles which grow (variety of particle properties change) depending on how much nutrients the particles uptake from a biogeochemical model, and also release tracer back into the model. I also envisage using this to exert drag on the flow at some point.; > ; > ![test](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) [ ![test](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) ](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) [ ](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif); > ; > Although I've had this working as custom dynamics of the particles the effect of the particles tendency can only be integrated with explicit Euler, i.e. at each substep it just does `tracer[i, j, k] += value*Δt`, where as this solution allows it to be properly integrated along with the other tendencies. I couldn't think of a way to implement this as a forcing function before, but perhaps I could use a callback to update an auxiliary field with the tendencies of the particles, and then add this as a forcing function, although I imagine that could use a lot more memory if there were a large grid and small amount of particles.; > ; > (I fix the tests that's failed until we've discussed the other changes since its only failed because I forgot to change `getmask` to `get_mask` in the test script). Nice! Can you paste a more minimal example directly in this PR too so it's preserved here for the future?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239608678:1688,integrat,integrated,1688,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239608678,6,"['integrat', 'update']","['integrated', 'update']"
Deployability,"bstractOperations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/720/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9BYnN0cmFjdE9wZXJhdGlvbnMuamw=) | `33.33% <0.00%> (-33.34%)` | :arrow_down: |; | [src/AbstractOperations/interpolation\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/720/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9pbnRlcnBvbGF0aW9uX3V0aWxzLmps) | `63.33% <0.00%> (-33.34%)` | :arrow_down: |; | [src/Forcing/model\_forcing.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/720/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvbW9kZWxfZm9yY2luZy5qbA==) | `66.66% <0.00%> (-33.34%)` | :arrow_down: |; | [src/Buoyancy/Buoyancy.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/720/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L0J1b3lhbmN5Lmps) | `61.11% <0.00%> (-23.10%)` | :arrow_down: |; | [src/Architectures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/720/diff?src=pr&el=tree#diff-c3JjL0FyY2hpdGVjdHVyZXMuamw=) | `66.66% <0.00%> (-22.23%)` | :arrow_down: |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/720/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `80.00% <0.00%> (-20.00%)` | :arrow_down: |; | ... and [37 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/720/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/720?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/720?src=pr&el=footer). Last update [6502f07...e778d2d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/720?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/720#issuecomment-605402183:3684,update,update,3684,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/720#issuecomment-605402183,1,['update'],['update']
Deployability,build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:925; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./client.jl:489; unknown function (ip: 0x7c00f54ff855); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-releas,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:5342,release,release-,5342,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; eval_user_input at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:150; repl_backend_loop at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:246; #start_repl_backend#46 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:231; start_repl_backend at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:228; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #run_repl#59 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:389; run_repl at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:375; jfptr_run_repl_91805.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #1013 at ./client.jl:432; jfptr_YY.1013_82772.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/bu,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:7098,release,release-,7098,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,bump patch release?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1016051554:5,patch,patch,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2097#issuecomment-1016051554,4,"['patch', 'release']","['patch', 'release']"
Deployability,c/DistributedComputations/halo_communication.jl:193; unknown function (ip: 0x2aaac8aefb2e); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #fill_halo_regions!#38 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:114; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:101 [inlined]; #fill_halo_regions!#37 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:90 [inlined]; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:87; unknown function (ip: 0x2aaac8ad0ee5); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:3896,release,release-,3896,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,1,['release'],['release-']
Deployability,c/REPL.jl:246; #start_repl_backend#46 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:231; start_repl_backend at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:228; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #run_repl#59 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:389; run_repl at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:375; jfptr_run_repl_91805.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #1013 at ./client.jl:432; jfptr_YY.1013_82772.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; jl_f__call_latest at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/builtins.c:812; #invokelatest#2 at ./essentials.jl:892 [inlined]; invokelatest at ./essentials.jl:889 [inlined]; run_main_repl at ./client.jl:416; exec_options at ./client.jl:333; _start at ./client.jl:552; jfptr__start_82798.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:28,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:7669,release,release-,7669,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"c/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/517/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `86.11% <ø> (ø)` | :arrow_up: |; | [src/TurbulenceClosures/TurbulenceClosures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/517/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9UdXJidWxlbmNlQ2xvc3VyZXMuamw=) | `100% <ø> (ø)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/517/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `71.56% <0%> (ø)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/517/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `52.74% <0%> (-0.59%)` | :arrow_down: |; | [src/TurbulenceClosures/closure\_tuples.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/517/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9jbG9zdXJlX3R1cGxlcy5qbA==) | `100% <100%> (ø)` | |; | [src/TimeSteppers/kernels.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/517/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9rZXJuZWxzLmps) | `60.39% <100%> (ø)` | :arrow_up: |; | [src/TurbulenceClosures/turbulence\_closure\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/517/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfdXRpbHMuamw=) | `70% <100%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/517?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/517?src=pr&el=footer). Last update [2803ace...590f224](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/517?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/517#issuecomment-548111479:2879,update,update,2879,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/517#issuecomment-548111479,1,['update'],['update']
Deployability,"c3NpcGF0aW9uX29wZXJhdG9ycy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/Solvers/Solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/543/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvU29sdmVycy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/Operators/laplacian\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/543/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9sYXBsYWNpYW5fb3BlcmF0b3JzLmps) | `100% <ø> (+85.71%)` | :arrow_up: |; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/543/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `84.61% <ø> (ø)` | :arrow_up: |; | [src/Operators/momentum\_advection\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/543/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9tb21lbnR1bV9hZHZlY3Rpb25fb3BlcmF0b3JzLmps) | `100% <ø> (ø)` | :arrow_up: |; | [src/Diagnostics/cfl.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/543/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2NmbC5qbA==) | `66.66% <ø> (ø)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/543/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `75% <ø> (ø)` | :arrow_up: |; | ... and [40 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/543/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/543?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/543?src=pr&el=footer). Last update [9fbbc93...8e51fdc](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/543?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/543#issuecomment-560540863:3749,update,update,3749,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/543#issuecomment-560540863,1,['update'],['update']
Deployability,"c3RydWN0aW9uLmps) | `0.00% <0.00%> (-60.00%)` | :arrow_down: |; | [src/Coriolis/beta\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1181/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL2JldGFfcGxhbmUuamw=) | `0.00% <0.00%> (-58.83%)` | :arrow_down: |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1181/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `0.00% <0.00%> (-58.07%)` | :arrow_down: |; | [src/Coriolis/non\_traditional\_beta\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1181/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL25vbl90cmFkaXRpb25hbF9iZXRhX3BsYW5lLmps) | `0.00% <0.00%> (-54.17%)` | :arrow_down: |; | [src/Fields/reduced\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1181/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9yZWR1Y2VkX2ZpZWxkLmps) | `28.94% <0.00%> (-50.01%)` | :arrow_down: |; | [src/Advection/weno\_fifth\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1181/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi93ZW5vX2ZpZnRoX29yZGVyLmps) | `0.00% <0.00%> (-44.28%)` | :arrow_down: |; | [src/Buoyancy/Buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1181/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L0J1b3lhbmN5Lmps) | `47.36% <0.00%> (-32.64%)` | :arrow_down: |; | ... and [49 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1181/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1181?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1181?src=pr&el=footer). Last update [03a6f85...c717dd5](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1181?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1181#issuecomment-727213894:3697,update,update,3697,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1181#issuecomment-727213894,1,['update'],['update']
Deployability,c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./Base.jl:495; jfptr_include_46447.1 at /orcd/data/raffaele/001/glwagner/Software/julia-1.10.5/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; exec_options at ./client.jl:318; _start at ./client.jl:552; jfptr__start_82798.1 at /orcd/data/raffaele/001/glwagner/Software/julia-1.10.5/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; true_main at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/jlapi.c:582; jl_repl_entrypoint at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/jlapi.c:731; main at julia (unknown line); __libc_start_main at /lib64/libc.so.6 (unknown line); unknown function (ip: 0x4010b8); Allocations: 26236174 (Pool: 26209699; Big: 26475); GC: 35; ```. I'll test CPU then try to see if this situation is tested.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:5492,release,release-,5492,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,6,['release'],['release-']
Deployability,"c=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2NmbC5qbA==) | `71.42% <0%> (+4.76%)` | :arrow_up: |; | [src/Operators/interpolation\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/556/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9pbnRlcnBvbGF0aW9uX29wZXJhdG9ycy5qbA==) | `64.28% <0%> (+4.76%)` | :arrow_up: |; | [src/Operators/derivative\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/556/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9kZXJpdmF0aXZlX29wZXJhdG9ycy5qbA==) | `90.62% <0%> (+32%)` | :arrow_up: |; | [...lementations/anisotropic\_biharmonic\_diffusivity.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/556/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2JpaGFybW9uaWNfZGlmZnVzaXZpdHkuamw=) | `100% <0%> (+50%)` | :arrow_up: |; | [...ure\_implementations/leith\_enstrophy\_diffusivity.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/556/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2xlaXRoX2Vuc3Ryb3BoeV9kaWZmdXNpdml0eS5qbA==) | `98.38% <0%> (+66.12%)` | :arrow_up: |; | [src/Operators/laplacian\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/556/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9sYXBsYWNpYW5fb3BlcmF0b3JzLmps) | `100% <0%> (+85.71%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/556?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/556?src=pr&el=footer). Last update [a511fdd...e187583](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/556?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/556#issuecomment-562859953:3371,update,update,3371,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/556#issuecomment-562859953,1,['update'],['update']
Deployability,"c=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `69% <100%> (-2.98%)` | :arrow_down: |; | [src/turbulence\_closures/constant\_smagorinsky.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvY29uc3RhbnRfc21hZ29yaW5za3kuamw=) | `88.57% <100%> (+37.14%)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.68% <100%> (+0.37%)` | :arrow_up: |; | [src/equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL2VxdWF0aW9uX29mX3N0YXRlLmps) | `100% <100%> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `66.66% <61.29%> (+7.51%)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `40% <71.42%> (-0.66%)` | :arrow_down: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `83.33% <75%> (+20.83%)` | :arrow_up: |; | ... and [10 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329?src=pr&el=footer). Last update [a26da9c...db0165c](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/329#issuecomment-517942485:3564,update,update,3564,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/329#issuecomment-517942485,1,['update'],['update']
Deployability,"capability of our ""conditional computation"" framework wherein the ""re-calculation"" of expensive diagnostics and computations may be avoided if possible. Previously, expensive field recalculations were avoided *only* at the outermost level (if the field were used directly in output), which in hindsight doesn't seem very useful since we often average or otherwise reduce expensive calculations for output (if we were not reducing an expensive calculation, we could simply calculate it offline). Avoiding recalculation for field ""dependencies"" requires adding a third function for field computation: we now have `compute_at!(field, time)`, `conditional_compute!(field, time)`, and `compute!(field, time)`. `compute_at!(field, time)` is the outermost function called by `fetch_output`. It falls back to `compute!(field)`. Fields opt-in to conditional computation by overloading `compute_at!`; for example, `ComputeField` implements. ```julia; compute_at!(field::ComputedField{X, Y, Z, <:FieldStatus}, time) where {X, Y, Z} = conditional_compute!(field, time); ```. Thus `ComputedField`s that have a `field.status` which is not `Nothing` are _conditionally_ computed. But if `field.status === nothing`, the computed field is always recomputed. The function `conditional_compute!(field, time)` examines `field.status` to determine whether a field has already been computed at `time` or not. If the field has been computed, it does nothing. If the field has not been computed, then `compute!(field, time)` is called, and `field.status.time` is updated. Conditionally computed fields must define a function `compute!(field, time=nothing)` that takes an optional positional argument `time`. This ensures that both `compute!(field)` and `compute!(field, time)` are available. Finally, fields that depend on other fields should call `compute_at!(dependency, time)` on all field dependencies. I hope that makes sense. It sounds a bit convoluted so I'm not sure this is the simplest solution. Criticism welcome.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1301:1559,update,updated,1559,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1301,1,['update'],['updated']
Deployability,"casa_token=K2HHnGIuaukAAAAA:5PhiRAM7tprmr73KhLpcARMloUdkxYFc0j8hukBAsr_MVpz6BlPSHTg-OoIajqdiaBvQbug-9w) (semi-Lagrangian vertical coordinate that follows high-pass filtered fast motions only and is restored to a target grid on a relatively short time scale). Other formulations, including classical sigma coordinates and quasi-Lagrangian methods that involve grid warping severe enough to require remapping, may fail unless we improve our method for calculating the horizontal pressure gradient force. In particular, the method we use now is essentially finite difference and requires a vertical coordinate that exactly or ""almost"" coincides with a geopotential surface. Finite volume treatment of the pressure gradient force is discussed by. * [Lin (1997)](https://rmets.onlinelibrary.wiley.com/doi/abs/10.1002/qj.49712354214?casa_token=AKlxv5lyqCcAAAAA:iRV8loXCjnioqxfxVDYQQX7oESyUjXPRF7KEZvYk7TCc_fRLhuiy0oGuza5KOGu9ucP63ZPbgCUI5sY) in the context of an atmospheric model with an effectively linear equation of state; * [Shchepetkin and McWilliams (2003)](https://agupubs.onlinelibrary.wiley.com/doi/full/10.1029/2001JC001047) which implements a high-order method for evaluating a contour integral around momentum elements for computing the pressure gradient force; * [Adcroft et al (2008)](https://www.sciencedirect.com/science/article/pii/S1463500308000243?casa_token=97k7TULeY9QAAAAA:_fsnUYOj7nBHPzGZXSO7jG31LMu4qlvJce8lsyof9jQPeICA4CFlsHA6KhH-81xRBiYoiMxElQ) that utilizes a crucial ""analytical integration"" step valid for for a nonlinear equation of state that can be written in a ""simplified"" form, which avoids the relatively more expensive numerical integration of part of the contour (and is more accurate); * [Engwirda et al (2017)](https://www.sciencedirect.com/science/article/pii/S1463500317300665?casa_token=egcQ20_UnnAAAAAA:WuCxxWYCfVpuL8-mrbSLJriY1z9W1TbiQNirtaJ9ZeIoIZkpOWbsod7AY7kLhxy8vcl5GfzcTw) using high-order numerical integration techniques for nonlinear equations of state",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1679#issuecomment-847224041:2089,integrat,integration,2089,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1679#issuecomment-847224041,6,['integrat'],['integration']
Deployability,cation.jl:114; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:101 [inlined]; #fill_halo_regions!#37 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:90 [inlined]; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:87; unknown function (ip: 0x2aaac8ad0ee5); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./Base.jl:495; jfptr_include_46447.1 at /orcd/data/raffaele/001/glwagner/Softwa,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:4293,release,release-,4293,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,1,['release'],['release-']
Deployability,cc @christophernhill creating a PR to merge this branch into our fork of main (which I just updated with the main upstream).,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2605:92,update,updated,92,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2605,1,['update'],['updated']
Deployability,"ce to provide but I can describe the problem as I've seen it. Basically, very rare, subtle irregularities have been observed on the GPU when using `HydrostaticFreeSurfaceModel` in a `Periodic, Bounded, Bounded` configuration. I think that it is possible the main issue is an interaction (a read-write race condition) associated with both impenetrable boundary conditions and periodic boundary conditions that affects the 8 corner points. The race condition affects model trajectories via the Coriolis force (which is the only term as far as I know that touches the 8 ""corner"" points affected by this race condition). Because the race condition only manifests when a `Coriolis` or `VectorInvariant` stencil touches corner points, it may not affect _most_ `Periodic, Periodic, Bounded` models, which could explain why we haven't caught it. The reason it doesn't affect those models is because this race condition would only affect the corner points of `w`, which are not touched when using an `FPlane` Coriolis model. However, it's possible (I'm not sure) that the race condition could affect models using `NonTraditionalFPlane` in `Periodic, Periodic, Bounded` configurations. More generally, it will also affect models that are bounded in the `y`-direction, because in those models the corner points of the `y`-velocity are affected and also invoked when using `FPlane` or `BetaPlane` coriolis. That's as much as I know. It's very hard to gather information about this bug because it's so rare are subtle. In other words, only one grid point among 10,000 iterations might be affected, and the errors induced are very small. To find this issue, we have to run tens of thousands of iterations of identical models on the GPU, and then compare some statistic of the model (ideally the entire velocity field, but @sandreza has gotten away just comparing something like `[maximum(abs, u), maximum(abs, v), maximum(abs, w)]`). If there's no race condition, identical models should produce identical results.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-921143865:1427,configurat,configurations,1427,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-921143865,1,['configurat'],['configurations']
Deployability,"cePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}) resulted in invalid LLVM IR; Reason: unsupported call to an unknown function (call to jl_f_getfield); Stacktrace:; [1] getindex; @ ./namedtuple.jl:136; [2] field_arguments; @ /glade/work/tomasc/.julia/packages/Oceananigans/Zg9Bd/src/Utils/user_function_arguments.jl:1; [3] user_function_arguments; @ /glade/work/tomasc/.julia/packages/Oceananigans/Zg9Bd/src/Utils/user_function_arguments.jl:21; [4] ContinuousForcing; @ /glade/work/tomasc/.julia/packages/Oceananigans/Zg9Bd/src/Forcings/continuous_forcing.jl:118; [5] u_velocity_tendency; @ /glade/work/tomasc/.julia/packages/Oceananigans/Zg9Bd/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:64; [6] macr",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3025:2390,Continuous,ContinuousForcing,2390,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025,1,['Continuous'],['ContinuousForcing']
Deployability,"ceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Field{Center, Face, Center, Nothing, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(drag_v), NamedTuple{(:cᴰ, :V∞), Tuple{Float64, Float64}}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Field{Center, Center, Face, Nothing, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.Offset",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3412:7301,Continuous,ContinuousBoundaryFunction,7301,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3412,3,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ceananigans.jl/pull/1000/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3dpdGhfdHJhY2Vycy5qbA==) | `69.23% <0.00%> (-30.77%)` | :arrow_down: |; | [src/Advection/weno\_reconstruction.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1000/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi93ZW5vX3JlY29uc3RydWN0aW9uLmps) | `63.15% <0.00%> (-27.17%)` | :arrow_down: |; | [src/Utils/Utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1000/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL1V0aWxzLmps) | `40.00% <0.00%> (-26.67%)` | :arrow_down: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1000/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `5.40% <0.00%> (-21.63%)` | :arrow_down: |; | [src/Models/Models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1000/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9Nb2RlbHMuamw=) | `83.33% <0.00%> (-16.67%)` | :arrow_down: |; | [src/Advection/upwind\_biased\_third\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1000/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi91cHdpbmRfYmlhc2VkX3RoaXJkX29yZGVyLmps) | `65.00% <0.00%> (-1.67%)` | :arrow_down: |; | [src/Grids/Grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1000/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `83.33% <0.00%> (ø)` | |; | ... and [92 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1000/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1000?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1000?src=pr&el=footer). Last update [e808a82...ba06f1a](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1000?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1000#issuecomment-700426227:3551,update,update,3551,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1000#issuecomment-700426227,1,['update'],['update']
Deployability,"ceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `74.19% <0%> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `77.71% <100%> (+0.24%)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `97.61% <100%> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.85% <100%> (+0.17%)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `64.44% <100%> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `83.05% <86.36%> (+18.76%)` | :arrow_up: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `90.14% <90%> (+3.86%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `75.33% <91.66%> (-0.8%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389?src=pr&el=footer). Last update [e65a74a...379df34](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/389?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/389#issuecomment-527186190:3115,update,update,3115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/389#issuecomment-527186190,1,['update'],['update']
Deployability,che/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./client.jl:489; unknown function (ip: 0x7c00f54ff855); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; eval_user_input at /cache/build/builder-,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:5442,release,release-,5442,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"chine/Oceananigans.jl/pull/425/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `40.94% <0%> (-56.72%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/425/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `49.35% <0%> (-15.59%)` | :arrow_down: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/425/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `62.5% <0%> (-12.5%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/425/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `78.26% <0%> (-7.32%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/425/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `72.02% <0%> (-2.1%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/425/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `85.24% <0%> (-1.64%)` | :arrow_down: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/425/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `82.05% <0%> (+1.09%)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/425/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `82.38% <0%> (+2.27%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/425?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/425?src=pr&el=footer). Last update [d32cf20...db00c29](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/425?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/425#issuecomment-533606372:3098,update,update,3098,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/425#issuecomment-533606372,1,['update'],['update']
Deployability,"chine/Oceananigans.jl/pull/570/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `84.37% <ø> (ø)` | :arrow_up: |; | [src/Grids/regular\_cartesian\_grid.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/570/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL3JlZ3VsYXJfY2FydGVzaWFuX2dyaWQuamw=) | `75.86% <0%> (+10.34%)` | :arrow_up: |; | [src/clock.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/570/diff?src=pr&el=tree#diff-c3JjL2Nsb2NrLmps) | `50% <0%> (-50%)` | :arrow_down: |; | [src/buoyancy.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/570/diff?src=pr&el=tree#diff-c3JjL2J1b3lhbmN5Lmps) | `79.31% <0%> (-4.33%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/570/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `61.05% <0%> (-2.78%)` | :arrow_down: |; | [src/coriolis.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/570/diff?src=pr&el=tree#diff-c3JjL2NvcmlvbGlzLmps) | `51.85% <0%> (-9.02%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/570/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `71.81% <100%> (+0.25%)` | :arrow_up: |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/570/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `88% <0%> (+1.04%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/570?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/570?src=pr&el=footer). Last update [d27ab4f...30319ec](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/570?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/570#issuecomment-566756764:2925,update,update,2925,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/570#issuecomment-566756764,1,['update'],['update']
Deployability,"chitectures at /g/data/v45/nc3020/Oceananigans.jl/src/Architectures.jl:23.; ** incremental compilation may be fatally broken for this module **. [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads. julia> using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom. julia> Lx, Ly, Lz = 500, 600, 3; (500, 600, 3). julia> Nx, Ny, Nz = 128, 128, 64; (128, 128, 64). julia> σ = 1.04 # linear stretching factor; 1.04. julia> linearly_spaced_faces(k) = - Lz * (1 - σ^(1 - k + Nz)) / (1 - σ^Nz); linearly_spaced_faces (generic function with 1 method). julia> rectilinear_grid = RectilinearGrid(GPU(),; topology = (Periodic, Bounded, Bounded),; size = (Nx, Ny, Nz),; x = (-Lx/2, Lx/2),; y = (-Ly/2, Ly/2),; z = linearly_spaced_faces,; halo = (4, 4, 4)); 128×128×64 RectilinearGrid{Float64, Periodic, Bounded, Bounded} on GPU with 4×4×4 halo; ├── Periodic x ∈ [-250.0, 250.0) regularly spaced with Δx=3.90625; ├── Bounded y ∈ [-300.0, 300.0] regularly spaced with Δy=4.6875; └── Bounded z ∈ [-3.0, 0.0] variably spaced wit",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2744#issuecomment-1256161457:1410,Configurat,Configuration,1410,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2744#issuecomment-1256161457,1,['Configurat'],['Configuration']
Deployability,"cision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Value, Float64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(drag_w), NamedTuple{(:cᴰ,), Tuple{Float64}}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Oceananigans.Fields.ZeroField{Int64, 3}}}}}). Closest candidates are:; cpu__advect_particles!(::Any, ::Any, ::Any, ::Oceananigans.Grids.AbstractUnderlyingGrid, ::Any, ::Any); @ Oceananigans none:0. Stacktrace:; [1] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3609:41538,Continuous,ContinuousBoundaryFunction,41538,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3609,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"cision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Value, Float64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(drag_w), NamedTuple{(:cᴰ,), Tuple{Float64}}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Oceananigans.Fields.ZeroField{Int64, 3}}}}}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck); @ KernelAbstractions ~/.julia/packages/KernelAbstractions/sZvJo/src/cpu.jl:115; [2] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(256,)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3609:52314,Continuous,ContinuousBoundaryFunction,52314,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3609,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"climate-machine/Oceananigans.jl/pull/101/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9vcHNfcmVndWxhcl9jYXJ0ZXNpYW5fZ3JpZC5qbA==) | `85.71% <ø> (ø)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/101/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/101/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `87.5% <ø> (+3.12%)` | :arrow_up: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/101/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `0% <0%> (ø)` | :arrow_up: |; | [src/fieldsets.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/101/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkc2V0cy5qbA==) | `100% <100%> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/101/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `67.96% <100%> (+0.34%)` | :arrow_up: |; | [src/equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/101/diff?src=pr&el=tree#diff-c3JjL2VxdWF0aW9uX29mX3N0YXRlLmps) | `9.09% <0%> (-13.64%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/101/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `40.98% <0%> (-5.8%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/101?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/101?src=pr&el=footer). Last update [b6b27af...6d0b6d5](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/101?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/101#issuecomment-468943943:2944,update,update,2944,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/101#issuecomment-468943943,2,['update'],['update']
Deployability,"climate-machine/Oceananigans.jl/pull/382?src=pr&el=h1) Report; > Merging [#382](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/8c1c776b50df17ff10735e57488f22b20d455303?src=pr&el=desc) will **increase** coverage by `0.13%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #382 +/- ##; =========================================; + Coverage 78.37% 78.5% +0.13% ; =========================================; Files 22 22 ; Lines 1244 1247 +3 ; =========================================; + Hits 975 979 +4 ; + Misses 269 268 -1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `77% <100%> (+0.5%)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `98.4% <0%> (+0.78%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=footer). Last update [8c1c776...424d943](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/382?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/382#issuecomment-525955144:1844,update,update,1844,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/382#issuecomment-525955144,1,['update'],['update']
Deployability,"climate-machine/Oceananigans.jl/pull/475?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #475 +/- ##; ==========================================; - Coverage 72.07% 69.12% -2.95% ; ==========================================; Files 26 26 ; Lines 1418 1490 +72 ; ==========================================; + Hits 1022 1030 +8 ; - Misses 396 460 +64; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/475?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/475/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `83.51% <ø> (ø)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/475/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `48.83% <0%> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/475/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `59.34% <20%> (-25.91%)` | :arrow_down: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/475/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `60.18% <29.41%> (-29.96%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/475/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `72.97% <95.23%> (+0.94%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/475?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/475?src=pr&el=footer). Last update [211e18c...9a622f0](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/475?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/475#issuecomment-541976850:2385,update,update,2385,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/475#issuecomment-541976850,1,['update'],['update']
Deployability,"climate-machine/Oceananigans.jl/pull/613?src=pr&el=h1) Report; > Merging [#613](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/613?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/f080635b93bdab9da7d1189ed21f27523c0ff810?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/613/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/613?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #613 +/- ##; =======================================; Coverage 74.55% 74.55% ; =======================================; Files 117 117 ; Lines 2209 2209 ; =======================================; Hits 1647 1647 ; Misses 562 562; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/613?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/BoundaryConditions/BoundaryConditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/613/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9Cb3VuZGFyeUNvbmRpdGlvbnMuamw=) | `100% <ø> (ø)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/613/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/613?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/613?src=pr&el=footer). Last update [f080635...e714993](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/613?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/613#issuecomment-581647856:1844,update,update,1844,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/613#issuecomment-581647856,1,['update'],['update']
Deployability,"cmF0aW9ucy9BYnN0cmFjdE9wZXJhdGlvbnMuamw=) | `33.33% <0.00%> (-16.67%)` | :arrow_down: |; | [src/Diagnostics/cfl.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/590/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2NmbC5qbA==) | `66.66% <0.00%> (-13.34%)` | :arrow_down: |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/590/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `48.38% <0.00%> (-3.54%)` | :arrow_down: |; | [src/AbstractOperations/averages\_of\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/590/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9hdmVyYWdlc19vZl9vcGVyYXRpb25zLmps) | | |; | [...mpressibleModels/velocity\_and\_tracer\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/590/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy92ZWxvY2l0eV9hbmRfdHJhY2VyX3RlbmRlbmNpZXMuamw=) | | |; | [src/Fields/show\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/590/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | | |; | [...vection/topologically\_conditional\_interpolation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/590/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi90b3BvbG9naWNhbGx5X2NvbmRpdGlvbmFsX2ludGVycG9sYXRpb24uamw=) | | |; | ... and [184 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/590/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/590?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/590?src=pr&el=footer). Last update [0fb5286...ab3e539](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/590?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-571334236:3597,update,update,3597,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-571334236,1,['update'],['update']
Deployability,"codecov.io/gh/CliMA/Oceananigans.jl/commit/80fb511ff5a5bb641481b6209ca101ea8c4b8149&el=desc) will **decrease** coverage by `0.11%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/807/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/807?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #807 +/- ##; ==========================================; - Coverage 71.15% 71.04% -0.12% ; ==========================================; Files 186 186 ; Lines 4839 4824 -15 ; ==========================================; - Hits 3443 3427 -16 ; - Misses 1396 1397 +1 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/807?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/807/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `100.00% <ø> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/807/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `90.74% <100.00%> (-0.49%)` | :arrow_down: |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/807/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `58.97% <100.00%> (-5.32%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/807?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/807?src=pr&el=footer). Last update [80fb511...7e95ea6](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/807?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/807#issuecomment-660647101:2015,update,update,2015,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/807#issuecomment-660647101,1,['update'],['update']
Deployability,"codecov.io/gh/climate-machine/Oceananigans.jl/commit/cde6246ac753b206d81167dbc024521e8c7276c7?src=pr&el=desc) will **decrease** coverage by `0.08%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/172/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/172?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #172 +/- ##; ==========================================; - Coverage 68.79% 68.71% -0.09% ; ==========================================; Files 18 18 ; Lines 657 652 -5 ; ==========================================; - Hits 452 448 -4 ; + Misses 205 204 -1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/172?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/172/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | :arrow_up: |; | [src/equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/172/diff?src=pr&el=tree#diff-c3JjL2VxdWF0aW9uX29mX3N0YXRlLmps) | `100% <100%> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/172/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `84.04% <100%> (+0.02%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/172?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/172?src=pr&el=footer). Last update [cde6246...c3a3c3d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/172?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/172#issuecomment-481421290:2025,update,update,2025,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/172#issuecomment-481421290,1,['update'],['update']
Deployability,"codecov.io/gh/climate-machine/Oceananigans.jl/pull/352?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #352 +/- ##; ==========================================; + Coverage 72.86% 72.89% +0.03% ; ==========================================; Files 22 22 ; Lines 1157 1214 +57 ; ==========================================; + Hits 843 885 +42 ; - Misses 314 329 +15; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `12.9% <ø> (ø)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `43.9% <0%> (ø)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `61.42% <100%> (+1.72%)` | :arrow_up: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `50% <47.56%> (+37.5%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352?src=pr&el=footer). Last update [7a4142c...5bbb71e](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/352?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/352#issuecomment-520223462:2371,update,update,2371,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/352#issuecomment-520223462,1,['update'],['update']
Deployability,"commit/e83d621859dd660e4576024ab461dafa46ff45bc?src=pr&el=desc) will **increase** coverage by `0.26%`.; > The diff coverage is `78.57%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/490/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/490?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #490 +/- ##; ==========================================; + Coverage 73.22% 73.48% +0.26% ; ==========================================; Files 27 27 ; Lines 1505 1516 +11 ; ==========================================; + Hits 1102 1114 +12 ; + Misses 403 402 -1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/490?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/490/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `62.5% <ø> (ø)` | :arrow_up: |; | [src/coriolis.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/490/diff?src=pr&el=tree#diff-c3JjL2NvcmlvbGlzLmps) | `68.18% <78.57%> (+8.18%)` | :arrow_up: |; | [src/TurbulenceClosures/closure\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/490/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9jbG9zdXJlX29wZXJhdG9ycy5qbA==) | `68.53% <0%> (+4.09%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/490?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/490?src=pr&el=footer). Last update [e83d621...de5764b](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/490?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/490#issuecomment-544486641:2071,update,update,2071,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/490#issuecomment-544486641,1,['update'],['update']
Deployability,"complex geometries in the 1980s. That also would not require us to change; the solver. You carry out Green's function calculations in a rectangular; region where the delta-functions vorticities are placed at the positions of; the irregular boundary within the larger rectangular region. I will look; them out. John. On Sat, Mar 28, 2020 at 11:20 AM Gregory L. Wagner <notifications@github.com>; wrote:. > @johncmarshall54 <https://github.com/johncmarshall54> agreed, that's a; > challenge we have to confront.; >; > If we implement immersed boundaries using the ""continuous forcing; > technique"", then a boundary may be defined essentially by a masking; > function. In this case, we might be able to ""label"" each boundary / masking; > function with a name or number.; >; > The boundary condition objects we then give to fields would have to define; > a condition to be applied both at the boundaries of the numerical grid; > (which we currently support), as well as any immersed boundaries, where; > immersed boundaries are referenced by name or number.; >; > By the way, if we use a continuous forcing technique, we do not have to; > change the pressure solver. This is a major simplification. Recent work; > suggests there is no disadvantage in terms of accuracy in using the; > continuous forcing technique, either. I'm not sure if this is too good to; > believe or not --- we should discuss and take a deeper look at the; > literature.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/issues/721#issuecomment-605461456>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKXUEQQHGXSSKOU7EIXSLBTRJYIVFANCNFSM4LVSZPAA>; > .; >. -- ; ==========================================; John Marshall; Cecil and Ida Green Professor of Oceanography; Massachusetts Institute of Technology; http://oceans.mit.edu/JohnMarshall/; ==========================================",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/721#issuecomment-605466623:1159,continuous,continuous,1159,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/721#issuecomment-605466623,2,['continuous'],['continuous']
Deployability,"consider the tilted bottom boundary layer example: https://clima.github.io/OceananigansDocumentation/stable/literated/tilted_bottom_boundary_layer/. In this problem, the buoyancy is decomposed ($b=\bar{b} + b^{\prime}$) into a background component $\bar{b} = N^{2} \hat{z}$ (where $\hat{z}$ is positive in the direction opposite the gravitational vector) and the remaining perturbation. The current example script applies no boundary conditions to the perturbation buoyancy, which I believe defaults to a no-normal-flux condition at the top and bottom boundary. Because no boundary conditions are applied to the background field, there is an implied diffusive flux $\hat{\mathbf{n}} \cdot (-\kappa \nabla \bar{b}) = ±\kappa N^{2} \cos{\theta}$ across these boundaries. This means that the boundary condition on the total buoyancy is a non-zero flux across the seafloor, which does not make much sense for this problem. The normal way of implementing this problem is to apply a gradient boundary condition, $\frac{\partial b^{\prime}}{\partial z} = -N^{2}\cos{\theta}$, at the bottom, to impose the no-flux condition. (In my MITgcm configurations, I verified that implementing the boundary condition this way recovered the classical analytical solutions of [Garrett et al. 1993](https://www.annualreviews.org/doi/10.1146/annurev.fl.25.010193.001451). Here is [another example using Dedalus](https://github.com/hdrake/bmli-linear/blob/main/examples/evp_replicate_Wenegrat2018_growth_rates.ipynb) to replicate some of Jacob Wenegrat's results, where I also include a non-zero gradient boundary condition on the perturbation buoyancy to impose no flux on the total buoyancy.). I understand why one might want background fields to be constructed a certain way for idealized problems, but it should be communicated clearly (and consistently) to the user exactly how this works. Is the tilted bottom boundary layer example incorrectly implemented or do I still not understand how the background fields work?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3568#issuecomment-2083158198:1186,configurat,configurations,1186,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3568#issuecomment-2083158198,2,['configurat'],['configurations']
Deployability,"cov.io/gh/CliMA/Oceananigans.jl/pull/1161?src=pr&el=h1) Report; > Merging [#1161](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1161?src=pr&el=desc) (8124ad7) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/0c2b51293d324836846f31ab93c7515b05e797b5?el=desc) (0c2b512) will **increase** coverage by `0.38%`.; > The diff coverage is `66.66%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1161/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1161?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1161 +/- ##; ==========================================; + Coverage 57.01% 57.39% +0.38% ; ==========================================; Files 162 162 ; Lines 3913 3962 +49 ; ==========================================; + Hits 2231 2274 +43 ; - Misses 1682 1688 +6 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1161?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1161/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `85.54% <66.66%> (-2.62%)` | :arrow_down: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1161/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `86.30% <0.00%> (+2.64%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1161?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1161?src=pr&el=footer). Last update [0c2b512...8124ad7](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1161?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1161#issuecomment-724397486:1843,update,update,1843,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1161#issuecomment-724397486,1,['update'],['update']
Deployability,"cov.io/gh/CliMA/Oceananigans.jl/pull/745?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/92d77b028d39014e2818d2d1fe56038fd1810256&el=desc) will **increase** coverage by `0.05%`.; > The diff coverage is `84.61%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/745/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/745?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #745 +/- ##; ==========================================; + Coverage 77.05% 77.10% +0.05% ; ==========================================; Files 123 124 +1 ; Lines 2462 2477 +15 ; ==========================================; + Hits 1897 1910 +13 ; - Misses 565 567 +2 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/745?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Forcing/Forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/745/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvRm9yY2luZy5qbA==) | `100.00% <ø> (ø)` | |; | [src/Forcing/relaxation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/745/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvcmVsYXhhdGlvbi5qbA==) | `84.61% <84.61%> (ø)` | |; | [src/Forcing/model\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/745/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvbW9kZWxfZm9yY2luZy5qbA==) | `80.00% <0.00%> (+5.00%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/745?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/745?src=pr&el=footer). Last update [92d77b0...63f9f11](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/745?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/745#issuecomment-622493232:1936,update,update,1936,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/745#issuecomment-622493232,1,['update'],['update']
Deployability,"cov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/7f957d7762b61ee4e51b360944428d5b660d50bf&el=desc) will **increase** coverage by `0.04%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #772 +/- ##; ==========================================; + Coverage 77.65% 77.70% +0.04% ; ==========================================; Files 165 165 ; Lines 4404 4413 +9 ; ==========================================; + Hits 3420 3429 +9 ; Misses 984 984 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Forcing/simple\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvc2ltcGxlX2ZvcmNpbmcuamw=) | `100.00% <ø> (ø)` | |; | [src/Forcing/model\_forcing.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvbW9kZWxfZm9yY2luZy5qbA==) | `84.61% <100.00%> (+4.61%)` | :arrow_up: |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | `100.00% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=footer). Last update [7f957d7...c19f69c](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/772?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/772#issuecomment-641394370:1936,update,update,1936,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/772#issuecomment-641394370,1,['update'],['update']
Deployability,"cov.io/gh/CliMA/Oceananigans.jl/pull/794?src=pr&el=h1) Report; > Merging [#794](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/794?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/d383b6a27fc95837b591bd1e68e1aaca50f97da6&el=desc) will **decrease** coverage by `0.62%`.; > The diff coverage is `0.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/794/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/794?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #794 +/- ##; ==========================================; - Coverage 71.67% 71.05% -0.63% ; ==========================================; Files 184 186 +2 ; Lines 4781 4823 +42 ; ==========================================; Hits 3427 3427 ; - Misses 1354 1396 +42 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/794?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [docs/bibliography.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/794/diff?src=pr&el=tree#diff-ZG9jcy9iaWJsaW9ncmFwaHkuamw=) | `0.00% <0.00%> (ø)` | |; | [docs/citations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/794/diff?src=pr&el=tree#diff-ZG9jcy9jaXRhdGlvbnMuamw=) | `0.00% <0.00%> (ø)` | |; | [docs/make.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/794/diff?src=pr&el=tree#diff-ZG9jcy9tYWtlLmps) | `0.00% <ø> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/794?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/794?src=pr&el=footer). Last update [d383b6a...c6d7bbe](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/794?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/794#issuecomment-657608828:1844,update,update,1844,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/794#issuecomment-657608828,1,['update'],['update']
Deployability,"cov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=h1) Report; > Merging [#228](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/ca03838d46fd4905379a1bc08697be5bcfcf99ef?src=pr&el=desc) will **increase** coverage by `0.29%`.; > The diff coverage is `50%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #228 +/- ##; ==========================================; + Coverage 67.25% 67.55% +0.29% ; ==========================================; Files 18 18 ; Lines 675 675 ; ==========================================; + Hits 454 456 +2 ; + Misses 221 219 -2; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `84.04% <50%> (ø)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `40.35% <0%> (+3.5%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=footer). Last update [ca03838...0f59662](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/228#issuecomment-495220658:1817,update,update,1817,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/228#issuecomment-495220658,1,['update'],['update']
Deployability,"cov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=h1) Report; > Merging [#228](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/ca03838d46fd4905379a1bc08697be5bcfcf99ef?src=pr&el=desc) will **increase** coverage by `0.29%`.; > The diff coverage is `50%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #228 +/- ##; ==========================================; + Coverage 67.25% 67.55% +0.29% ; ==========================================; Files 18 18 ; Lines 675 675 ; ==========================================; + Hits 454 456 +2 ; + Misses 221 219 -2; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `84.04% <50%> (ø)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `40.35% <0%> (+3.5%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=footer). Last update [ca03838...4bb6f50](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/228?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/228#issuecomment-495220644:1817,update,update,1817,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/228#issuecomment-495220644,1,['update'],['update']
Deployability,"coverage by `0.03%`.; > The diff coverage is `85.36%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/464/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/464?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #464 +/- ##; ==========================================; - Coverage 73.34% 73.31% -0.04% ; ==========================================; Files 27 27 ; Lines 1508 1525 +17 ; ==========================================; + Hits 1106 1118 +12 ; - Misses 402 407 +5; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/464?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/464/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `47.67% <ø> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/464/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `79.54% <66.66%> (ø)` | :arrow_up: |; | [src/grids.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/464/diff?src=pr&el=tree#diff-c3JjL2dyaWRzLmps) | `83.33% <86.84%> (-10.22%)` | :arrow_down: |; | [src/buoyancy.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/464/diff?src=pr&el=tree#diff-c3JjL2J1b3lhbmN5Lmps) | `80.64% <0%> (+3.22%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/464?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/464?src=pr&el=footer). Last update [41a2b55...cab311e](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/464?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/464#issuecomment-545240667:2153,update,update,2153,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/464#issuecomment-545240667,1,['update'],['update']
Deployability,"cted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/237/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/237?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #237 +/- ##; ==========================================; + Coverage 73.92% 74.04% +0.12% ; ==========================================; Files 23 23 ; Lines 859 863 +4 ; ==========================================; + Hits 635 639 +4 ; Misses 224 224; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/237?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/237/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `83.33% <ø> (+16.66%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/237/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `83.72% <50%> (-0.99%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/237/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `67.74% <86.95%> (+12.56%)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/237/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `40.54% <0%> (-5.41%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/237?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/237?src=pr&el=footer). Last update [1e693f8...f7eb047](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/237?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/237#issuecomment-495868818:2215,update,update,2215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/237#issuecomment-495868818,2,['update'],['update']
Deployability,"ctor{Float64}}, CPU}}, Tuple{CPU, CPU}}, Tuple{CPU, CPU}, CPU}, MultiRegionObject{Tuple{Tuple{Colon, Colon, Colon}, Tuple{Colon, Colon, Colon}}, Tuple{CPU, CPU}}, MultiRegionObject{Tuple{OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}}, Tuple{CPU, CPU}}, Any, MultiRegionObject{Tuple{FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity1), typeof(ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸᶻ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity3)}}}, Nothing}}, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:35732,Continuous,ContinuousBoundaryFunction,35732,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ctor{Float64}}, CPU}}, Tuple{CPU, CPU}}, Tuple{CPU, CPU}, CPU}, MultiRegionObject{Tuple{Tuple{Colon, Colon, Colon}, Tuple{Colon, Colon, Colon}}, Tuple{CPU, CPU}}, MultiRegionObject{Tuple{OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}}, Tuple{CPU, CPU}}, Any, MultiRegionObject{Tuple{FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity4)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.identity1)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.Bo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:40617,Continuous,ContinuousBoundaryFunction,40617,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ct{Tuple{FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(ℑxyᶠᶜᵃ)}}}, Nothing}}, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceana",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:31187,Continuous,ContinuousBoundaryFunction,31187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"dTuple{(:T,),Tuple{Float64}}}, ::NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}, ::Nothing, ::NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, ::Clock{Float64}) at /home/ptuckman/.julia/packages/Oceananigans/KJCVx/src/TimeSteppers/time_stepping_kernels.jl:18; [22] calculate_tendencies!(::NamedTuple{(:u, :v, :w, :T),NTuple{4,OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::NamedTuple{(:pHY′, :pNHS),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuArray{Float64,3}}}}, ::Nothing, ::IncompressibleModel{Oceananigans.TimeSteppers.QuasiAdamsBashforth2TimeStepper{Float64,NamedTuple{(:u, :v, :w,",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:20286,Continuous,ContinuousForcing,20286,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"dTuple{(:u, :v, :w, :b), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:H, :D, :σ, :sp_length, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Int64, Float64, Float64, Float64}}, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:H, :D, :σ, :sp_length, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Int64, Float64, Float64, Float64}}, typeof(forc_v), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:H, :D, :σ, :sp_length, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Int64, Float64, Float64, Float64}}, typeof(forc_w), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:H, :D, :σ, :sp_length, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Int64, Float64, Float64, Float64}}, typeof(forc_b), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}}}, Field{Center, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryConditio",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:63755,Continuous,ContinuousForcing,63755,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,2,['Continuous'],['ContinuousForcing']
Deployability,"daryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing}, Tuple{Face, Center, Center}, RectilinearGrid{Float64, Bounded, Bounded, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, 20, typeof(Qᵘ), NamedTuple{(:cᴰ, :ρₐ, :ρₒ, :L, :H, :Ny, :Nx, :Nz), Tuple{Float64, Float64, Int64, Float64, Float64, Int64, Int64, Int64}}, Tuple{}, Tuple{}, Tuple{}}}, Clock{Float64}, NamedTuple{(:u, :v, :w, :T, :S), Tuple{Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Bounded, Bounded, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, B",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2336:12025,Continuous,ContinuousBoundaryFunction,12025,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2336,4,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"daryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}} which is not isbits.; .condition is of type Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}} which is not isbits.; .field_dependencies is of type Tuple{Symbol, Symbol} which is not isbits.; .1 is of type Symbol which is not isbits.; .2 is of type Symbol which is not isbits.; .east is of type BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}} which is not isbits.; .condition is of type Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}} which is not isbits.; .field_dependencies is of type Tuple{Symbol, Symbol} which is not isbits.; .1 is of type Symbol which is not isbits.; .2 is of type Symbol which is not isbits.; .bottom is of type BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, S",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:7280,Continuous,ContinuousBoundaryFunction,7280,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:720;   | [4] collect_artifacts;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:706 [inlined];   | [5] download_artifacts(env::Pkg.Types.EnvCache; platform::Base.BinaryPlatforms.Platform, julia_version::VersionNumber, verbose::Bool, io::Base.DevNull);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:752;   | [6] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}, level::Pkg.Types.UpgradeLevel; skip_writing_project::Bool, preserve::Nothing);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1542;   | [7] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; level::Pkg.Types.UpgradeLevel, mode::Pkg.Types.PackageMode, preserve::Nothing, update_registry::Bool, skip_writing_project::Bool, kwargs::@Kwargs{io::Base.DevNull});   | @ Pkg.API /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:351;   | [8] up;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:326 [inlined];   | [9] up;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:164 [inlined];   | [10] #resolve#143;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:357 [inlined];   | [11] resolve;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:356 [inlined]; ```. There may be some clues here: https://discourse.julialang.org/t/how-do-i-activate-the-test",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136:1511,Upgrade,UpgradeLevel,1511,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136,1,['Upgrade'],['UpgradeLevel']
Deployability,decov.io/gh/CliMA/Oceananigans.jl/commit/e2c1ee48b0f588101f4bdb17c6f49c9a8245cdcd?el=desc) will **increase** coverage by `0.03%`.; > The diff coverage is `91.66%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1083 +/- ##; ==========================================; + Coverage 56.76% 56.79% +0.03% ; ==========================================; Files 161 161 ; Lines 3793 3796 +3 ; ==========================================; + Hits 2153 2156 +3 ; Misses 1640 1640 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `80.00% <ø> (ø)` | |; | [src/TimeSteppers/update\_state.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy91cGRhdGVfc3RhdGUuamw=) | `87.50% <0.00%> (ø)` | |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `87.93% <100.00%> (+0.21%)` | :arrow_up: |; | [src/TimeSteppers/quasi\_adams\_bashforth\_2.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9xdWFzaV9hZGFtc19iYXNoZm9ydGhfMi5qbA==) | `76.31% <100.00%> (+0.64%)` | :arrow_up: |; | [src/TimeSteppers/runge\_kutta\_3.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9ydW5nZV9rdXR0YV8zLmps) | `79.16% <100.00%> (+0.29%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1083?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1083#issuecomment-713749219:1212,update,update,1212,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1083#issuecomment-713749219,1,['update'],['update']
Deployability,"decov.io/gh/climate-machine/Oceananigans.jl/pull/302?src=pr&el=h1) Report; > Merging [#302](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/302?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/c3428825442f8d155b3128a0f79797ba8f070f68?src=pr&el=desc) will **increase** coverage by `0.84%`.; > The diff coverage is `92.53%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/302/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/302?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #302 +/- ##; ==========================================; + Coverage 71.8% 72.64% +0.84% ; ==========================================; Files 24 24 ; Lines 1000 1031 +31 ; ==========================================; + Hits 718 749 +31 ; Misses 282 282; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/302?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/302/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `20% <100%> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/302/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `81.3% <92.42%> (+3.16%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/302?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/302?src=pr&el=footer). Last update [c342882...a0e8a14](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/302?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/302#issuecomment-506989260:1832,update,update,1832,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/302#issuecomment-506989260,1,['update'],['update']
Deployability,"decov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=h1) Report; > Merging [#915](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/6d349e1d85d61ff997f249881cd58232de865996?el=desc) will **increase** coverage by `0.07%`.; > The diff coverage is `96.07%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #915 +/- ##; ==========================================; + Coverage 72.60% 72.67% +0.07% ; ==========================================; Files 191 191 ; Lines 5610 5622 +12 ; ==========================================; + Hits 4073 4086 +13 ; + Misses 1537 1536 -1 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `77.63% <91.66%> (-0.15%)` | :arrow_down: |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `93.62% <100.00%> (+0.31%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=footer). Last update [6d349e1...22e9b04](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/915?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/915#issuecomment-687316456:1825,update,update,1825,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/915#issuecomment-687316456,1,['update'],['update']
Deployability,definitely bump a release (minor or patch; whatever more appropriate) before this is merged :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1574619364:18,release,release,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1574619364,2,"['patch', 'release']","['patch', 'release']"
Deployability,dels/IncompressibleModels/calculate\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1184/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9jYWxjdWxhdGVfdGVuZGVuY2llcy5qbA==) | `74.46% <0.00%> (ø)` | |; | [.../IncompressibleModels/show\_incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1184/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9zaG93X2luY29tcHJlc3NpYmxlX21vZGVsLmps) | `0.00% <0.00%> (ø)` | |; | [...Models/IncompressibleModels/pressure\_correction.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1184/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9wcmVzc3VyZV9jb3JyZWN0aW9uLmps) | `83.33% <0.00%> (ø)` | |; | [...odels/IncompressibleModels/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1184/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `77.77% <0.00%> (ø)` | |; | [...ncompressibleModels/update\_hydrostatic\_pressure.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1184/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy91cGRhdGVfaHlkcm9zdGF0aWNfcHJlc3N1cmUuamw=) | `50.00% <0.00%> (ø)` | |; | [...odels/IncompressibleModels/IncompressibleModels.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1184/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy5qbA==) | `100.00% <0.00%> (ø)` | |; | [src/TimeSteppers/clock.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1184/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9jbG9jay5qbA==) | `53.84% <0.00%> (ø)` | |; | [src/Models/IncompressibleModels/update\_state.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1184/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy91cGRhdGVfc3RhdGUuamw=) | `100.00% <0.00%> (ø)` | |; | ... and [3 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1184/diff?src=pr&el=tree-more) | |. ------. [Continue to review ,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1184#issuecomment-727480160:2427,update,update,2427,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1184#issuecomment-727480160,1,['update'],['update']
Deployability,"depth#27""}}, ::Clock{Float64}, ::NamedTuple{(:u, :v, :η), Tuple{Field{Face, Center, Center, CPU, OffsetArray{Float64, 3, Array{Float64, 3}}, ImmersedBoundaryGrid{Float64, Bounded, Bounded, Bounded, RegularLatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, GridFittedBoundary{RasterDepthMask, var""#raster_depth#27""}}, Float64, FieldBoundaryConditions{BoundaryCondition{Open, Nothing}, BoundaryCondition{Open, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Oceananigans.BoundaryConditions.DiscreteBoundaryFunction{Float64, var""#u_bottom_drag#29""}}, BoundaryCondition{Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, 1, var""#surface_wind_stress#28"", NamedTuple{(:τ₀, :Lφ, :φ₀), Tuple{Float64, Float64, Int64}}, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Flux, Nothing}}}, Field{Center, Face, Center, CPU, OffsetArray{Float64, 3, Array{Float64, 3}}, ImmersedBoundaryGrid{Float64, Bounded, Bounded, Bounded, RegularLatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, GridFittedBoundary{RasterDepthMask, var""#raster_depth#27""}}, Float64, FieldBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Open, Nothing}, BoundaryCondition{Open, Nothing}, BoundaryCondition{Flux, Oceananigans.BoundaryConditions.DiscreteBoundaryFunction{Float64, var""#v_bottom_drag#30""}}, BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}, ReducedField{Center, Center, Nothing, CPU, OffsetArray{Float64, 3, Array{Float64, 3}}, ImmersedBoundaryGrid{Float64, Bounded, Bounded, Bounded, RegularLatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePreci",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1928:1415,Continuous,ContinuousBoundaryFunction,1415,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1928,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,derecho/scratch/knudsenl/BottomBoundaryLayer/Manifest.toml:0; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed Adapt ─────────────────────── v4.0.4; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed SentinelArrays ────────────── v1.4.5; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed Tables ────────────────────── v1.12.0; Installed FixedPointNumbers ─────────── v0.8.5; Installed GPUCompiler ───────────────── v0.26.7; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArraysCore ──────────── v1.4.3; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed StaticArrays ──────────────── v1.9.7; Installed TimerOutputs ──────────────── v0.5.24; Installed AbstractFFTs ──────────────── v1.5.0; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed OrderedCollections ────────── v1.6.3; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed UnsafeAtomicsLLVM ─────────── v0.1.5; Installed LaTeXStrings ──────────────── v1.3.1; Installed NVTX ──────────────────────── v0.3.4; Installed CEnum ─────────────────────── v0.5.0; Installed Random123 ─────────────────── v1.7.0; Installed JuliaNVTXCallbacks_jll ────── v0.2.1+0; Installed InvertedIndices ───────────── v1.3.0; Installed BFloat16s ─────────────────── v0.5.0; Installed Reexport ──────────────────── v1.2.2; Installed CUDA_Runtime_jll ──────────── v0.14.1+0; Installed GPUArrays ─────────────────── v10.2.3; ,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472:1454,Install,Installed,1454,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472,1,['Install'],['Installed']
Deployability,"diff coverage is `66.66%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #401 +/- ##; ==========================================; - Coverage 71.74% 71.46% -0.28% ; ==========================================; Files 23 23 ; Lines 1412 1416 +4 ; ==========================================; - Hits 1013 1012 -1 ; - Misses 399 404 +5; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `77.47% <ø> (-0.25%)` | :arrow_down: |; | [src/grids.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401/diff?src=pr&el=tree#diff-c3JjL2dyaWRzLmps) | `95.12% <100%> (+0.12%)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `82.97% <64.28%> (-9.88%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401?src=pr&el=footer). Last update [f77d3e6...0408059](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/401?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/401#issuecomment-531079520:2181,update,update,2181,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/401#issuecomment-531079520,1,['update'],['update']
Deployability,"diff-c3JjL01vZGVscy9Nb2RlbHMuamw=) | `100.00% <0.00%> (ø)` | |; | [src/TimeSteppers/store\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9zdG9yZV90ZW5kZW5jaWVzLmps) | `72.72% <0.00%> (ø)` | |; | [src/TimeSteppers/clock.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9jbG9jay5qbA==) | | |; | [...dels/IncompressibleModels/non\_dimensional\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9ub25fZGltZW5zaW9uYWxfbW9kZWwuamw=) | | |; | [...ncompressibleModels/update\_hydrostatic\_pressure.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy91cGRhdGVfaHlkcm9zdGF0aWNfcHJlc3N1cmUuamw=) | | |; | [.../Models/ShallowWaterModels/calculate\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9TaGFsbG93V2F0ZXJNb2RlbHMvY2FsY3VsYXRlX3RlbmRlbmNpZXMuamw=) | | |; | [.../IncompressibleModels/show\_incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9zaG93X2luY29tcHJlc3NpYmxlX21vZGVsLmps) | | |; | ... and [28 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120?src=pr&el=footer). Last update [3108501...8043370](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1120?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1120#issuecomment-719683146:3473,update,update,3473,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1120#issuecomment-719683146,1,['update'],['update']
Deployability,"diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `75.00% <0.00%> (-5.00%)` | :arrow_down: |; | [src/Grids/Grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/993/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `83.33% <0.00%> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/993/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <0.00%> (ø)` | |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/993/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | `100.00% <0.00%> (ø)` | |; | [src/Utils/tuple\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/993/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3R1cGxlX3V0aWxzLmps) | `44.44% <0.00%> (ø)` | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/993/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | `0.00% <0.00%> (ø)` | |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/993/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <0.00%> (ø)` | |; | [src/AbstractOperations/derivatives.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/993/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9kZXJpdmF0aXZlcy5qbA==) | `88.88% <0.00%> (ø)` | |; | ... and [35 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/993/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/993?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/993?src=pr&el=footer). Last update [24e9c2c...c9ed348](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/993?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/993#issuecomment-700294566:3329,update,update,3329,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/993#issuecomment-700294566,1,['update'],['update']
Deployability,"diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [examples/ocean\_wind\_mixing\_and\_convection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb2NlYW5fd2luZF9taXhpbmdfYW5kX2NvbnZlY3Rpb24uamw=) | | |; | [...erification/lid\_driven\_cavity/lid\_driven\_cavity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2xpZF9kcml2ZW5fY2F2aXR5L2xpZF9kcml2ZW5fY2F2aXR5Lmps) | | |; | [test/test\_surface\_waves.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3N1cmZhY2Vfd2F2ZXMuamw=) | | |; | [test/test\_examples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2V4YW1wbGVzLmps) | | |; | [...regression\_tests/thermal\_bubble\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL3RoZXJtYWxfYnViYmxlX3JlZ3Jlc3Npb25fdGVzdC5qbA==) | | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | | |; | ... and [58 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017?src=pr&el=footer). Last update [ee14f8a...1b1dbba](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1017?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1017#issuecomment-701768991:3258,update,update,3258,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1017#issuecomment-701768991,1,['update'],['update']
Deployability,"ditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Flux,Nothing},BoundaryCondition{Flux,Nothing}}}}}}},NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},Oceananigans.Advection.CenteredSecondOrder,Oceananigans.Solvers.PressureSolver{Oceananigans.Solvers.HorizontallyPeriodic,GPU,NamedTuple{(:kx², :ky², :kz²),Tuple{CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3}}},CUDA.CuArray{Complex{Float64},3},NamedTuple{(:FFTxy!, :FFTz!, :IFFTxy!, :IFFTz!),Tuple{CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CUDA.CuArray{Complex{Float64},3},CUDA.CuArray{Complex{Float64},3}}}},Nothing}) at /home/ptuckman/.julia/packages/Oceananigans/KJCVx/src/TimeSteppers/generic_time_stepping.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:30141,Continuous,ContinuousForcing,30141,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"ditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Flux,Nothing},BoundaryCondition{Flux,Nothing}}}}}}},NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},Oceananigans.Advection.CenteredSecondOrder,Oceananigans.Solvers.PressureSolver{Oceananigans.Solvers.HorizontallyPeriodic,GPU,NamedTuple{(:kx², :ky², :kz²),Tuple{CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3}}},CUDA.CuArray{Complex{Float64},3},NamedTuple{(:FFTxy!, :FFTz!, :IFFTxy!, :IFFTz!),Tuple{CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CUDA.CuArray{Complex{Float64},3},CUDA.CuArray{Complex{Float64},3}}}},Nothing}, ::Float64; euler::Bool) at /home/ptuckman/.julia/packages/Oceananigans/KJCVx/src/TimeStepper",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:40130,Continuous,ContinuousForcing,40130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"ditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Flux,Nothing},BoundaryCondition{Flux,Nothing}}}}}}},NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},Oceananigans.Advection.CenteredSecondOrder,Oceananigans.Solvers.PressureSolver{Oceananigans.Solvers.HorizontallyPeriodic,GPU,NamedTuple{(:kx², :ky², :kz²),Tuple{CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3}}},CUDA.CuArray{Complex{Float64},3},NamedTuple{(:FFTxy!, :FFTz!, :IFFTxy!, :IFFTz!),Tuple{CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CUDA.CuArray{Complex{Float64},3},CUDA.CuArray{Complex{Float64},3}}}},Nothing},TimeStepWizard{Float64},Array{Any,1},Float64,Float64,Float64,Float64,OrderedCollections.Order",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:50270,Continuous,ContinuousForcing,50270,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"down: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/503/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `83.56% <0%> (-4.68%)` | :arrow_down: |; | [src/Operators/ops\_regular\_cartesian\_grid.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/503/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9vcHNfcmVndWxhcl9jYXJ0ZXNpYW5fZ3JpZC5qbA==) | `81.25% <0%> (-2.97%)` | :arrow_down: |; | [src/TurbulenceClosures/closure\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/503/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9jbG9zdXJlX29wZXJhdG9ycy5qbA==) | `67.77% <0%> (-0.77%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/503/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `76.21% <0%> (+0.12%)` | :arrow_up: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/503/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `90.47% <0%> (+0.19%)` | :arrow_up: |; | [src/grids.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/503/diff?src=pr&el=tree#diff-c3JjL2dyaWRzLmps) | `84.37% <0%> (+1.04%)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/503/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `84.61% <0%> (+4.01%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/503?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/503?src=pr&el=footer). Last update [7bbdd3d...d50e02d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/503?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/503#issuecomment-546029136:3041,update,update,3041,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/503#issuecomment-546029136,1,['update'],['update']
Deployability,"dvantages compared to other methods: i.e. doesn't help with conserving anything and does not easily extend to other geometries. **Q2**: The pressure term in the momentum equation is ` 1/\rho_0 \nabla p`. In the case of a rigid lid we have that `p` is the surface pressure. I thought that redefining pressure with ` p/\rho_p -> p` might be easier, to get rid of the constant, but it's easy enough to include the coefficent. We should continue to do whatever Oceananigans is currently doing, and I thought it was absorving the constant density, but I could be wrong. **Q3**: In the shallow water model with a free-surface the pressure is always hydrostatic, `p = p_0 + g \rho_0 (h - z)`, where `h` is the total depth. The case of a rigid lid is a bit different since we just have the surface pressure `p`. You are correct that the free-surface shallow water model is very similar to the 3D compressible Euler equations. The free-surface SW is a compressible model, which is why we don't have to solve any elliptic problem, and instead we simply integrate the three prognostic equations. . The rigid-lid SW model (which we don't have yet) is different of course. I am sure we can use the existing solves to determine the surface pressure as the hydrostatic model currently does. Here are some thoughts to consider:. 1. Introducing topography is pretty easy but when we do so, we should probably introduce a free-surface. Following the convention of the hydrostatic model seems like the way to proceed. Agreed?; 2. Visosity is not difficult to include but there's a question of which form of viscosity to include. The standard harmonic or biharmonic diffiusivities would be good choices, where they act on the velocities not the transport velocities. If we had a `VectorInvariant` form then I think we could use the current libraries. For the conservative forms, I think we have to adapt them, which will take more effort I suspect.; 3. Note: these forms of viscosity are not strictly positive preserving ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064259381:1281,integrat,integrate,1281,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064259381,2,['integrat'],['integrate']
Deployability,"dvection,; tracers = tracers, buoyancy = buoyancy, free_surface = free_surface); ERROR: TaskFailedException; Stacktrace:; [1] wait; @ ./task.jl:334 [inlined]; [2] wait; @ ~/.julia/packages/KernelAbstractions/3ZHln/src/cpu.jl:65 [inlined]; [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent); @ KernelAbstractions ~/.julia/packages/KernelAbstractions/3ZHln/src/cpu.jl:64; [4] fill_halo_regions!(::NTuple{4, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}}, ::Tuple{FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, 18, typeof(wind_stress), Nothing, Tuple{}, Tuple{}, Tuple{}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Value, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Int64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Int64},",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2430#issuecomment-1095685195:1137,Continuous,ContinuousBoundaryFunction,1137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2430#issuecomment-1095685195,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"e 72.07% 69.12% -2.95% ; ==========================================; Files 26 26 ; Lines 1418 1490 +72 ; ==========================================; + Hits 1022 1030 +8 ; - Misses 396 460 +64; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/476?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/476/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `83.51% <ø> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/476/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `81.57% <0%> (ø)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/476/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `48.83% <0%> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/476/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `59.34% <20%> (-25.91%)` | :arrow_down: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/476/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `60.18% <29.41%> (-29.96%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/476/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `72.97% <95.23%> (+0.94%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/476?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/476?src=pr&el=footer). Last update [211e18c...8eae176](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/476?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/476#issuecomment-541986378:2549,update,update,2549,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/476#issuecomment-541986378,1,['update'],['update']
Deployability,e at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #fill_halo_regions!#38 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:114; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:101 [inlined]; #fill_halo_regions!#37 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:90 [inlined]; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:87; unknown function (ip: 0x2aaac8ad0ee5); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:3986,release,release-,3986,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,1,['release'],['release-']
Deployability,"e-machine/Oceananigans.jl/pull/385?src=pr&el=h1) Report; > Merging [#385](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/385?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/a2b7c0e59c2f224f4fc978668cb2b85b45543981?src=pr&el=desc) will **increase** coverage by `0.01%`.; > The diff coverage is `80%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/385/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/385?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #385 +/- ##; ==========================================; + Coverage 70.57% 70.58% +0.01% ; ==========================================; Files 23 23 ; Lines 1383 1387 +4 ; ==========================================; + Hits 976 979 +3 ; - Misses 407 408 +1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/385?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/385/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `76.12% <100%> (+0.15%)` | :arrow_up: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/385/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `86.27% <66.66%> (-1.23%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/385?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/385?src=pr&el=footer). Last update [a2b7c0e...0c07933](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/385?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/385#issuecomment-526284168:1850,update,update,1850,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/385#issuecomment-526284168,1,['update'],['update']
Deployability,"e-machine/Oceananigans.jl/pull/512/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9UdXJidWxlbmNlQ2xvc3VyZXMuamw=) | `100% <ø> (ø)` | :arrow_up: |; | [src/Solvers/poisson\_solver\_gpu.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/512/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvcG9pc3Nvbl9zb2x2ZXJfZ3B1Lmps) | `0% <0%> (ø)` | |; | [src/Grids/Grids.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/512/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `100% <100%> (ø)` | |; | [src/Solvers/poisson\_solver\_cpu.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/512/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvcG9pc3Nvbl9zb2x2ZXJfY3B1Lmps) | `100% <100%> (ø)` | |; | [src/Diagnostics/Diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/512/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL0RpYWdub3N0aWNzLmps) | `100% <100%> (ø)` | |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/512/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `74.35% <100%> (ø)` | :arrow_up: |; | [src/Solvers/Solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/512/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvU29sdmVycy5qbA==) | `100% <100%> (ø)` | |; | ... and [36 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/512/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/512?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/512?src=pr&el=footer). Last update [4b8ff03...9060a5f](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/512?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/512#issuecomment-548115284:3603,update,update,3603,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/512#issuecomment-548115284,1,['update'],['update']
Deployability,"e.; 3. GPU tests take a while to run because of long compile time (#66) and they run on top of all the CPU tests. In general, setting up GPU models take more time so it's not ideal that we're setting up tons of tiny models for testing. Testing GPU stuff may also involve some expensive scalar CUDA operations (see #82). We will also need to run the test suite on the following architectures in the future:; 1. single-core CPU (Travis CI and Appveyor are fine here); 2. single GPU (JuliaGPU's GitLab CI pipeline works great here); 3. multi-core single CPU (MPI) (paid CI plans will probably work here); 4. multiple distributed CPU nodes (MPI) (no idea where to run this); 5. multiple GPUs (MPI) (no idea where to run this). Some ideas for things to do that will help:; 1. Explicitly split the tests up into 2-3 suites; 1.1. **Unit tests**: should run in a few minutes so we can run them during development and on every commit/PR/etc.; 1.2. **Integration tests**: can take a while to run so we don't want to run these locally all the time but probably on every PR. Shouldn't take much more than 1 hour to run so we don't have to wait forever to merge PR's.; 1.3. **Model verification tests** (also called _end-to-end_ tests): will probably take a long time to run. Maybe run this once a day? Or manually if there's a PR that changes core functionality.; 2. Run the tests in parallel. I think the main Julia repo does this. We might have to roll our own parallel solution (see [this thread](https://discourse.julialang.org/t/run-pkg-test-with-several-processors/6917)). This would also require expensive paid CI plans (but very much worth it in my opinion).; 3. Thinking long-term, if we had a multi-CPU multi-GPU machine available we could probably roll our own CI solution for these distributed architectures. Ideally we'd want to see if we can get this through a service although it would probably cost $$$$$. cc @christophernhill @jm-c @glwagner: I know we all care about testing. cc @charleskawczyn",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/139:1657,Integrat,Integration,1657,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/139,1,['Integrat'],['Integration']
Deployability,"e.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.DeviceMemory}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}}, @NamedTuple{u::Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, var""#u_tidal_forcing#15""{Float64, Float64}, Tuple{}, Tuple{}, Tuple{}}, v::typeof(Oceananigans.Forcings.zeroforcing), w::typeof(Oceananigans.Forcings.zeroforcing), b::typeof(Oceananigans.Forcings.zeroforcing)}, WENO{3, Float64, Nothing, Nothing, Nothing, Nothing, WENO{2, Float64, Nothing, Nothing, Nothing, Nothing, UpwindBiased{1, Float64, Nothing, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{2, Float64, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}}, Oceananigans.Solvers.FourierTridiagonalPoissonSolver{RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float6",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2428001700:53747,Continuous,ContinuousForcing,53747,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2428001700,5,['Continuous'],['ContinuousForcing']
Deployability,"e.TwicePrecision{Float64}}}, GPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, CuArray{Float64, 2, CUDA.Mem.DeviceBuffer}}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity1), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Fl",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:16716,Continuous,ContinuousBoundaryFunction,16716,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"e/Oceananigans.jl/pull/623?src=pr&el=h1) Report; > Merging [#623](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/623?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/73bea229721624d65d4e2b2b79810622cf221993?src=pr&el=desc) will **increase** coverage by `0.09%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/623/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/623?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #623 +/- ##; ==========================================; + Coverage 74.49% 74.58% +0.09% ; ==========================================; Files 118 118 ; Lines 2227 2231 +4 ; ==========================================; + Hits 1659 1664 +5 ; + Misses 568 567 -1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/623?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Models/model.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/623/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9tb2RlbC5qbA==) | `100% <ø> (+8.33%)` | :arrow_up: |; | [src/TimeSteppers/kernels.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/623/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9rZXJuZWxzLmps) | `93.93% <100%> (+0.6%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/623?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/623?src=pr&el=footer). Last update [73bea22...7014037](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/623?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/623#issuecomment-585468829:1858,update,update,1858,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/623#issuecomment-585468829,1,['update'],['update']
Deployability,e/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; advect_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Models/LagrangianParticleTracking/lagrangian_particle_advection.jl:193; step_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Models/LagrangianParticleTracking/LagrangianParticleTracking.jl:143 [inlined]; step_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/HydrostaticFreeSurfaceModels.jl:107 [inlined]; #time_step!#8 at /home/alir/atdepth/Oceananigans.jl/src/TimeSteppers/quasi_adams_bashforth_2.jl:124; time_step! at /home/alir/atdepth/Oceananigans.jl/src/TimeSteppers/quasi_adams_bashforth_2.jl:76; unknown function (ip: 0x7c00a0f12fbd); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; top-level scope at /home/alir/atdepth/Oceananigans.jl/particles_error.jl:37; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:925; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./client.jl:489; unknown function (ip: 0x7c00f54ff855); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:4180,release,release-,4180,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"e9a09]. julia> using Oceananigans. julia> . ```. So basically this works as expected. You can see the complete output [here](https://pastebin.com/XwghaH7e). However, if I do that same thing on the server, I get the following. (Note that I'm even using a freshly downloaded Julia binary, to be as general as possible.). ```; (p39) tomasc@casper-login1:~/scratch_cheyenne$ mkdir julia_test; (p39) tomasc@casper-login1:~/scratch_cheyenne$ cd julia_test/; (p39) tomasc@casper-login1:~/scratch_cheyenne/julia_test$ touch Project.toml; (p39) tomasc@casper-login1:~/scratch_cheyenne/julia_test$ export JULIA_DEPOT_PATH=""`pwd`/julia_depot""; (p39) tomasc@casper-login1:~/scratch_cheyenne/julia_test$ ~/Downloads/julia-1.5.4/bin/julia --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.5.4 (2021-03-11); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. (julia_test) pkg> st; Status `/glade/scratch/tomasc/julia_test/Project.toml` (empty project). (julia_test) pkg> st --manifest; Status `/glade/scratch/tomasc/julia_test/Manifest.toml` (empty manifest). (julia_test) pkg> add Oceananigans. # THINGS HAPPEN HERE THAT I'LL SKIP. (julia_test) pkg> precompile; Precompiling project...; [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]. julia> using Oceananigans. ```. The complete session is [here](https://pastebin.com/9frpW70Z). Everything here is pretty much same, with the only difference being that now the REPL hangs after `using Oceananigans` and nothing happens. I have tested this with other packages but this only happens with Oceananigans. Something ever weirder: after I get impatient I can cancel the command (pressing `Ctrl+C` repeatedly) and then if I issue the line again it works!:. ```julia; julia> using Oceananigans; ^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C; ^C^C^C^CWARNING: Force throwing a SIGINT.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1625:2574,release,release,2574,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1625,1,['release'],['release']
Deployability,eModels/HydrostaticFreeSurfaceModels.jl:107 [inlined]; #time_step!#8 at /home/alir/atdepth/Oceananigans.jl/src/TimeSteppers/quasi_adams_bashforth_2.jl:124; time_step! at /home/alir/atdepth/Oceananigans.jl/src/TimeSteppers/quasi_adams_bashforth_2.jl:76; unknown function (ip: 0x7c00a0f12fbd); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; top-level scope at /home/alir/atdepth/Oceananigans.jl/particles_error.jl:37; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:925; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./client.jl:489; unknown function (ip: 0x7c00f54ff855); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_th,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:4742,release,release-,4742,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"eananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ```; It'd be nice to fix that eventually. * The output is kind of annoying:. ```julia; [2022/03/13 13:17:49.875] INFO Benchmarking weak scaling nonhydrostatic model with Slab decomposition [N=(128, 128, 32), ranks=(1, 2, 1)]...; Invalid MIT-MAGIC-COOKIE-1 keyInvalid MIT-MAGIC-COOKIE-1 keyNo protocol specified; [ Info: Oceananigans will use 24 threads; [ Info: Oceananigans will use 24 threads; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; [ Info: Oceananigans will use 24 threads; [ Info: Oceananigans will use 24 threads; ```; We don't need to be told `N` times how many threads Oceananigans is using. * I think the `README.md` could be clearer and the scripts could have better names (eg which script runs the benchmark versus which script sets up the model)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590:1779,update,updated,1779,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590,2,['update'],['updated']
Deployability,"ease the time step) but the solution should converge as you do so. It's not a built-in feature but is pretty easy to implement by adding appropriate forcing functions to an Oceananigans model. For example, in PR #693 we used such a method to simulate viscous flow around a cylinder (in 2D). Here is the simulation script: https://github.com/climate-machine/Oceananigans.jl/blob/ar/flow-around-cylinder/verification/flow_around_cylinder/flow_around_cylinder.jl. These are the most relevant lines: https://github.com/climate-machine/Oceananigans.jl/blob/a921fc3edbf795bf4a2193cca84cad41ebdd5625/verification/flow_around_cylinder/flow_around_cylinder.jl#L18-L27. In this case the boundary was described analytically and `boundary(x, y, z)` evaluates to `1` inside the cylinder and to `0` outside. In your case maybe it's easier to describe the boundary or missing nodes with a mask or array (also updated snippet for v0.29):; ```julia; # ... Create boundary[i, j, k] array that's 1.0 inside the boundary and 0.0 outside ... K = 50.0 # ""Spring constant"" for immersed boundary method ; parameters = (boundary=boundary, K=K). # Continuous forcing immersed boundary method ; @inline u_immersed_boundary(i, j, k, grid, clock, state, params) =; @inbounds -params.boundary[i, j, k] * params.K * state.velocities.u[i, j, k] ; @inline w_immersed_boundary(i, j, k, grid, clock, state, params) =; @inbounds -params.boundary[i, j, k] * params.K * state.velocities.w[i, j, k] . u_forcing = ParameterizedForcing(u_immersed_boundary, parameters); w_forcing = ParameterizedForcing(w_immersed_boundary, parameters). forcing = ModelForcing(u=u_forcing, w=w_forcing) ; ```. Note that the API has changed a bit since PR #693 so the example is a little out of date. See release notes for details, especially for v0.26.0 onward: https://github.com/climate-machine/Oceananigans.jl/releases. Let us know if this helps and if you run into any issues. We're more than happy to help with setting up simulations and debugging them.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/743#issuecomment-622406785:2081,release,release,2081,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/743#issuecomment-622406785,2,['release'],"['release', 'releases']"
Deployability,ease-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./Base.jl:495; jfptr_include_46447.1 at /orcd/data/raffaele/001/glwagner/Software/julia-1.10.5/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; exec_options at ./client.jl:318; _start at ./client.jl:552; jfptr__start_82798.1 at /orcd/data/raffaele/001/glwagner/Software/julia-1.10.5/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:5012,release,release-,5012,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,1,['release'],['release-']
Deployability,"ecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(drag_v), NamedTuple{(:cᴰ,), Tuple{Float64}}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Value, Float64}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Oceananigans.Fields.ZeroField{Int64, 3}}}, Oceananigans.Utils.SumOfArrays{2, Tuple{Field{Center, Center, Face, Nothing, ImmersedBoundaryGrid{Float64, Bounded, Bounded, Bounded, RectilinearGrid{Float64, Bounded, Bounded, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, St",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3609:38702,Continuous,ContinuousBoundaryFunction,38702,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3609,3,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CUDA.CuDeviceVector{Float64, 1}}, Nothing}, Float64}, Oceananigans.AbstractOperations.BinaryOperation{Center, Center, Center, typeof(/), OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, Float64, typeof(Oceananigans.Operators.identity1), typeof(Oceananigans.Operators.identity2), RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CUDA.CuDeviceVector{Float64, 1}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CUDA.CuDeviceVector{Float64, 1}}, Nothing}, Float64}}}}}, NamedTuple{(:u, :v, :w, :b, :τ1, :τ2), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:σ, :u₀, :α), Tuple{Int64, Int64, Float64}}, typeof(sponge_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:σ, :u₀, :α), Tuple{Int64, Int64, Float64}}, typeof(sponge_v), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:σ, :u₀, :α), Tuple{Int64, Int64, Float64}}, typeof(sponge_w), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity5)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:σ, :u₀, :α), Tuple{Int64, Int64, Float64}}, typeof(sponge_b), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing)}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}; name::String, kwargs::Base.P",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2869:8461,Continuous,ContinuousForcing,8461,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869,1,['Continuous'],['ContinuousForcing']
Deployability,"ection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1014/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb2NlYW5fd2luZF9taXhpbmdfYW5kX2NvbnZlY3Rpb24uamw=) | `0.00% <ø> (ø)` | |; | [src/Advection/Advection.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1014/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi9BZHZlY3Rpb24uamw=) | `50.00% <ø> (ø)` | |; | [src/Advection/tracer\_advection\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1014/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi90cmFjZXJfYWR2ZWN0aW9uX29wZXJhdG9ycy5qbA==) | `100.00% <ø> (ø)` | |; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1014/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `80.00% <ø> (ø)` | |; | [src/Models/clock.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1014/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9jbG9jay5qbA==) | `76.92% <0.00%> (-6.42%)` | :arrow_down: |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1014/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | |; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1014/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `96.55% <0.00%> (-1.70%)` | :arrow_down: |; | ... and [22 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1014/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1014?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1014?src=pr&el=footer). Last update [d274364...d03718b](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1014?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1014#issuecomment-704467105:3367,update,update,3367,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1014#issuecomment-704467105,1,['update'],['update']
Deployability,"ef=""https://redirect.github.com/julia-actions/setup-julia/pull/196"">julia-actions/setup-julia#196</a></li>; <li>v1.9.5 by <a href=""https://github.com/IanButterworth""><code>@​IanButterworth</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/201"">julia-actions/setup-julia#201</a></li>; </ul>; <h3>Dep updates</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/julia-actions/setup-julia/commit/f2258781c657ad9b4b88072c5eeaf9ec8c370874""><code>f225878</code></a> Add production dependencies &amp; build</li>; <li><a href=""https://github.com/julia-actions/setup-julia/commit/b96a5725f5a28e33e247b8ebedb77663a8b9f960""><code>b96a572</code></a> Bump the version number to <code>2.0.0</code> in <code>package.json</code> and <code>package-lock.json</code> ...</li>; <li><a href=""https://github.com/julia-actions/setup-julia/commit/437a175294dd49c0c379f79067d8ba50c3f0f31b""><code>437a175</code></a> update to node20 (<a href=""https://redirect.github.com/julia-actions/setup-julia/issues/209"">#209</a>)</li>; <li><a href=""https://github.com/julia-actions/setup-julia/commit/e9d953d306cac42c94058f27c6564ec50d97d913""><code>e9d953d</code></a> Bump <code>@​types/node</code> from 20.11.16 to 20.11.30 (<a href=""https://redirect.github.com/julia-actions/setup-julia/issues/226"">#226</a>)</li>; <li><a href=""https://github.com/julia-actions/setup-julia/commit/4190528a8ca9962739fbfd1529f9b38939baa442""><code>4190528</code></a> Bump <code>@​types/semver</code> from 7.5.6 to 7.5.8 (<a href=""https://redirect.github.com/julia-actions/setup-julia/issues/222"">#222</a>)</li>; <li><a href=""https://github.com/julia-actions/setup-julia/commit/9acd04fccc6b5b219d40b75c902c8f1654d88a9a""><code>9acd04f</code></a> Bump nock from 13.5.1 to 13.5.4 (<a href=""https://redirect.github.com/julia-actions/setup-julia/issues/224"">#224</a>)</li>; <li>See full diff in <a href=""https://github.co",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3544:7333,update,update,7333,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3544,1,['update'],['update']
Deployability,"elds ~/.julia/packages/Oceananigans/r28zw/src/Fields/field.jl:618; [25] maximum(f::Function, c::Field{…}; condition::Nothing, mask::Float64, dims::Function); @ Oceananigans.Fields ~/.julia/packages/Oceananigans/r28zw/src/Fields/field.jl:648; [26] maximum(f::Function, c::Field{…}); @ Oceananigans.Fields ~/.julia/packages/Oceananigans/r28zw/src/Fields/field.jl:637; [27] top-level scope; @ ~/SaltyOceanParameterizations.jl/CUDA_MWE.jl:20; [28] include(fname::String); @ Base.MainInclude ./client.jl:489; [29] top-level scope; @ REPL[19]:1; [30] top-level scope; @ ~/.julia/packages/CUDA/35NC6/src/initialization.jl:190; in expression starting at /home/xinkai/SaltyOceanParameterizations.jl/CUDA_MWE.jl:20; Some type information was truncated. Use `show(err)` to see complete types.; ```; Note that line 20 is the last line of the code snippet above (`maximum(abs, v)`). Here's the Julia version info:; ```; Julia Version 1.10.0; Commit 3120989f39b (2023-12-25 18:01 UTC); Build Info:; Official https://julialang.org/ release; Platform Info:; OS: Linux (x86_64-linux-gnu); CPU: 48 × Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-15.0.7 (ORCJIT, cascadelake); Threads: 1 on 48 virtual cores; ```. Here's the CUDA runtime version:; ```; CUDA runtime 11.8, artifact installation; CUDA driver 11.8; NVIDIA driver 520.61.5. CUDA libraries:; - CUBLAS: 11.11.3; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+520.61.5. Julia packages:; - CUDA: 4.4.1; - CUDA_Driver_jll: 0.5.0+1; - CUDA_Runtime_jll: 0.6.0+0. Toolchain:; - Julia: 1.10.0; - LLVM: 15.0.7; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86. 1 device:; 0: NVIDIA TITAN V (sm_70, 9.027 GiB / 12.000 GiB available); ```. In Julia 1.9 this does not seem to be a problem.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3427:4860,release,release,4860,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3427,2,"['install', 'release']","['installation', 'release']"
Deployability,"ell, ok. I see how using `ImmersedBoundaryCondition` is _convenient_. I disagree that this is a ""better"" model, however. It is an approximate model that leverages (what is hopefully) the thin aspect ratio of your simulation. Note, I don't think these issues are intrinsic to lego topography. In fact, I think this approach could completely fail if we had cut cells, which represents another caveat. The problem is that, when the cell facets are no longer oriented along one of x, y, z, we need to define what a flux across the bottom _means_. Is it a flux normal to the boundary, or is it a flux projected along one of the orthogonal directions? I'm not sure interpreting `ImmersedBoundaryCondition(bottom=flux)` as representing _only_ the vertical component of the bottom flux is sensible, especially when we consider the small scale limit or large eddy simulation or direct numerical simulation. We'll have to discuss that. To elaborate on the details, the geological constraint we have from observations is on the heat flux averaged over large patches of the ocean basin:. $$ Q_\text{obs} \approx \frac{1}{A} \int \boldsymbol{q} \cdot \boldsymbol{n} d A $$. where $A$ is the surface area of the ocean bottom (not the horizontal area). As you have noted, we can reproduce this constraint by applying the flux $Q$ across all upward facing facets. Then the total flux in our model is. $$ Q_\text{model} = \frac{1}{A_h} \int Q_\text{obs} d A_h $$. where $A_h$ is the horizontal area of the ocean basin and $d A_h$ is the horizontal projection of the surface area of the bottom. Clearly we obtain $Q_\text{model} = Q_\text{obs}$ and our goal is achieved. At small scales, this approximate model becomes questionable (but of course, it is also questionable to use a constant heat flux at small scales). Basically, I think that using this convenience actually obscures the true physics. So while it produces the right answer, it leads to confusion about what the observed geological heat flux actually re",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3141#issuecomment-1587736510:1048,patch,patches,1048,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3141#issuecomment-1587736510,2,['patch'],['patches']
Deployability,"enceClosures.ThreeDimensionalFormulation, Float64, NamedTuple{(:b,), Tuple{Float64}}}, CPU, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, Float64, Buoyancy{BuoyancyTracer, Oceananigans.Grids.ZDirection}, Nothing, Nothing, NamedTuple{(:u, :v, :w), Tuple{Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64. ... @ Oceananigans.Simulations ~/LocalDocs/code/Oceananigans.jl/src/Simulations/run.jl:86; [10] top-level scope; @ ~/LocalDocs/code/Oceananigans.jl/validation/immersed_boundaries/flow_over_hills_test.jl:146; ```. Any pointers would be helpful! I'm happy to contribute to an updated example once I sort this out. The relevant code was included in https://github.com/CliMA/Oceananigans.jl/commit/737ee905167ed44d61940098c32b108befbf1a26",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2860:24244,update,updated,24244,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2860,1,['update'],['updated']
Deployability,entation fault; in expression starting at /glade/u/home/knudsenl/.julia/packages/CUDA_Runtime_jll/YgJCI/.pkg/platform_augmentation.jl:210; Allocations: 2907 (Pool: 2898; Big: 9); GC: 0; Activating new project at `/glade/derecho/scratch/knudsenl/BottomBoundaryLayer`; Installing known registries into `~/.julia`; Updating registry at `~/.julia/registries/General.toml`; Resolving package versions...; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Adapt ─────────────────────── v4.0.4; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed SentinelArrays ────────────── v1.4.5; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed FixedPointNumbers ─────────── v0.8.5; Installed Tables ────────────────────── v1.12.0; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed GPUCompiler ───────────────── v0.26.7; Installed StaticArraysCore ──────────── v1.4.3; Installed TimerOutputs ──────────────── v0.5.24; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed AbstractFFTs ──────────────── v1.5.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArrays ──────────────── v1.9.7; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed LaTeXStrings ──────────────── v1.3.1; Installed OrderedCollections ────────── v1.6.3; Installed NVTX ──────────────────────── v0.3.4; Installed UnsafeAtomicsLLVM ─────────── v0.1.5; Installed CEnum ─────────────────────── v0.5.0; Inst,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900:1245,Install,Installed,1245,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900,1,['Install'],['Installed']
Deployability,"eof(-), Oceananigans.AbstractOperations.Derivative{Face, Center, Face, typeof(Oceananigans.Operators.∂zᶠᶜᶠ), Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, 1, typeof(drag_u), NamedTuple{(:cᴰ, :V∞), Tuple{Float64, Float64}}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity1), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing}, typeof(Oceananigans.Operators.identity2), typeof(∂z), RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, Float64}, Oceananigans.AbstractOperations.Derivative{Face, Center, Face, typeof(Oceananigans.Operators.∂xᶠᶜᶠ), Field{Center, Center, Face, Nothing, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1103318508:22167,Continuous,ContinuousBoundaryFunction,22167,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1103318508,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"eof(Oceananigans.TimeSteppers.gpu_calculate_Gu!), OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}, RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, Oceananigans.Advection.CenteredSecondOrder, NonTraditionalFPlane{Float64}, Nothing, AnisotropicDiffusivity{Float64,Float64,Float64,NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}}}, NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, Nothing, NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}, NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}) failed; KernelError: passing and using non-bitstype argument. Argument 13 to your kernel function is of type NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.For",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:1811,Continuous,ContinuousForcing,1811,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"eof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, Nothing, NamedTuple{(:u, :v, :w), Tuple{typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing)}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :st",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:3645,Continuous,ContinuousBoundaryFunction,3645,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"eof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}}, which is not isbits:; .west is of type BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}} which is not isbits.; .condition is of type Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}} which is not isbits.; .field_dependencies is ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:6005,Continuous,ContinuousBoundaryFunction,6005,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"eof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Center, Face, Nothing, ImmersedBoundaryGrid{Float64, Flat, Periodic, Bounded, RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, GPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, CuArray{Float64, 2, CUDA.Mem.DeviceBuffer}}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:17784,Continuous,ContinuousBoundaryFunction,17784,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"epping algorithm so that unweighted tracer conservation can be updated according to the conservation of thickness-weighted tracer. A preliminary roadmap towards GVC in `HydrostaticFreeSurfaceModel` is. 1. Introduce `AbstractVerticalCoordinate` and refactor the `HydrostaticFreeSurfaceModel` to integrate thickness-weighted equations. When using `ZCoordinate`, the resulting model produces identical results to the current implementation of `HydrostaticFreeSurfaceModel`. I think we will also want a rectilinear grid to use for testing to avoid modifying `RegularRectilinearGrid`, such as a refactored or reimplemented three-dimensionally `StretchedRectilinearGrid` from #1532 which accepts the use of a generalized vertical coordinates. 2. Introduce `ZStarCoordinate` (or maybe `FreeSurfaceWeightedVerticalCoordinate`). ""z-star"" vertical coordinate is a relatively simple GVC, with a small, diagnostic time-dependence. A successful implementation will require integrating thickness-weighted equations, correct vertical derivatives, and ensuring correct horizontal pressure gradients. 3. Implement remapping as an alternative to vertical advection and test using `ZCoordinate` and `ZStarCoordinate`. Of course, steps 3 might evolve depending on our experience during step 2. . An important choice that's part of step 1. is whether to use thickness-weighted variables as state variables rather than unweighted variables (eg `hu` rather than `u`, and `hc` rather than `c`. I suspect it makes sense to use thickness-weighted state variables because this simplifies the underlying implementation (for example, we only need `hⁿ` rather than both `hⁿ⁺¹` and `hⁿ` to evolve a tracer field, and we can evaluate the prognostic equations in the same order that we do now), and because it is easy to provide abstractions for users to compute, inspect, and output unweighted variables `u = hu / h`. The pros and cons of this important choice should be discussed. The discussion on #1549 is related (I decided to st",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1679:2460,integrat,integrating,2460,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1679,1,['integrat'],['integrating']
Deployability,"er. . In the future, we could possibly implement some mixed behavior where the user specifies both a default *and* particular values for tracer diffusivity. This would be useful in the (possibly rare) use-case of a large number of tracers with the same diffusivity, but where one or two of them require a special, different diffusivity. I am not sure this API is necessary so I left it for future work. Diffusivity-like fields include:. * `κ` (constant component of tracer diffusivity) for `ConstantIsotropicDiffusivity`, `AnisotropicMinimumDissipation`, and `ConstantSmagorinsky`; * `Pr` (turbulent Prandtl number) for `ConstantSmagorinsky`; * `κh` and `κv` for `ConstantAnisotropicDiffusivity`. ## Internal algorithmic considerations. This implementation includes a major refactor of the time-stepping algorithm. In particular, kernels are launched for *each* tracer for all operations that involve tracers. This differs from the previous pattern, in which a single kernel was called in some cases (for example, to update the velocity and tracer fields, or to store previous source terms). The reason for this change is because I ran into some issues (dynamic function invocations) using `ntuple` to unroll a loop over tracers inside the kernel. In addition, I think that with a large number of tracers the kernels may become too large and their performance could degrade (but I'm not sure). This refactoring of the algorithm means we need to . - [ ] benchmark the changes in this PR to see if there are any significant changes in model performance. . @ali-ramadhan, can you help with this?. If there are changes in model performance, we can work on unrolling loops over the tracer fields *inside* our kernels. This is probably possible; it just requires some debugging. We would probably also want to make sure that this doesn't lead to poor performance for up to O(10) tracers. If any of this PR is not satisfactory, I'm happy to work on it and iterate until the PR is in mergeable shape. Resolve",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/452:2735,update,update,2735,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/452,1,['update'],['update']
Deployability,"er](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/716356088a610da1fe75f00b38e3646f046edbb4?src=pr&el=desc) will **increase** coverage by `9.94%`.; > The diff coverage is `78.94%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/140/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/140?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #140 +/- ##; ==========================================; + Coverage 56.03% 65.97% +9.94% ; ==========================================; Files 19 19 ; Lines 605 629 +24 ; ==========================================; + Hits 339 415 +76 ; + Misses 266 214 -52; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/140?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/140/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `80% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/140/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `79.78% <78.94%> (+79.78%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/140/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `67.72% <0%> (+0.63%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/140?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/140?src=pr&el=footer). Last update [7163560...371af73](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/140?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/140#issuecomment-474633131:2013,update,update,2013,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/140#issuecomment-474633131,1,['update'],['update']
Deployability,ere resolved with a different julia version (1.9.2). Unexpected behavior may occur.; └ @ /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/Manifest.toml:0; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed Adapt ─────────────────────── v4.0.4; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed SentinelArrays ────────────── v1.4.5; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed Tables ────────────────────── v1.12.0; Installed FixedPointNumbers ─────────── v0.8.5; Installed GPUCompiler ───────────────── v0.26.7; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArraysCore ──────────── v1.4.3; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed StaticArrays ──────────────── v1.9.7; Installed TimerOutputs ──────────────── v0.5.24; Installed AbstractFFTs ──────────────── v1.5.0; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed OrderedCollections ────────── v1.6.3; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed UnsafeAtomicsLLVM ─────────── v0.1.5; Installed LaTeXStrings ──────────────── v1.3.1; Installed NVTX ──────────────────────── v0.3.4; Installed CEnum ─────────────────────── v0.5.0; Installed Random123 ─────────────────── v1.7.0; Installed JuliaNVTXCallbacks_jll ────── v0.2.1+0; Installed InvertedIndices ───────────── v1.3.0; Installed BFloat16s ─────────────────── v0.5.0; Installed Reexport ──────────────────── v1.2.2; Inst,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472:1358,Install,Installed,1358,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472,1,['Install'],['Installed']
Deployability,"erging [#612](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/612?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/88a4f8f08d976bb0029ea337202bf94fe292374d?src=pr&el=desc) will **increase** coverage by `0.04%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/612/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/612?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #612 +/- ##; ==========================================; + Coverage 74.51% 74.55% +0.04% ; ==========================================; Files 117 117 ; Lines 2209 2209 ; ==========================================; + Hits 1646 1647 +1 ; + Misses 563 562 -1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/612?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/TimeSteppers/kernels.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/612/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9rZXJuZWxzLmps) | `93.33% <100%> (ø)` | :arrow_up: |; | [src/Buoyancy/nonlinear\_equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/612/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L25vbmxpbmVhcl9lcXVhdGlvbl9vZl9zdGF0ZS5qbA==) | `75% <0%> (+4.16%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/612?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/612?src=pr&el=footer). Last update [88a4f8f...7d4e5b6](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/612?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/612#issuecomment-581598656:1910,update,update,1910,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/612#issuecomment-581598656,1,['update'],['update']
Deployability,"ersed fluxes that would introduce a new term into the tendency kernels, eg here:. https://github.com/CliMA/Oceananigans.jl/blob/30ec599de5e3813d57b46e8d8fa4196bcdd250e0/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_tendency_kernel_functions.jl#L44. adding something like. ```julia; + ∂ⱼ_τ₁ⱼ_immersed(i, j, k, grid, closure, diffusivities, immersed_bc, velocities, tracers, clock, buoyancy); ```. This would allow the `immersed` boundary condition specified by the user to make its way into the tendency calculation. We think this might be simpler (in terms of the code) than passing `immersed_bc` into ` ∂ⱼ_τ₁ⱼ` (where we would throw it away unless we are on `ImmersedBoundaryGrid`.). Another advantage is that we can then isolate the code that calculates flux divergences for `Value` and `Gradient` (eg for no-slip boundary conditions), which could get a little complicated. I'm also trying to figure out if that would cover this case. I think we can use `ContinuousBoundaryCondition` for this kind of drag boundary condition. So in the user script we'd write something like. ```julia; u_drag(x, y, z, t, u, v, w, Cd) = - Cd * u * sqrt(u^2 + v^2 + w^2); v_drag(x, y, z, t, u, v, w, Cd) = - Cd * v * sqrt(u^2 + v^2 + w^2); w_drag(x, y, z, t, u, v, w, Cd) = - Cd * w * sqrt(u^2 + v^2 + w^2). u_immersed_bc = FluxBoundaryCondition(u_drag, parameters=Cd, field_dependencies=(:u, :v, :w)); v_immersed_bc = FluxBoundaryCondition(v_drag, parameters=Cd, field_dependencies=(:u, :v, :w)); w_immersed_bc = FluxBoundaryCondition(w_drag, parameters=Cd, field_dependencies=(:u, :v, :w)). u_boundary_conditions = FieldBoundaryConditions(immersed=u_immersed_bc); v_boundary_conditions = FieldBoundaryConditions(immersed=v_immersed_bc); w_boundary_conditions = FieldBoundaryConditions(immersed=w_immersed_bc); ```. and then under the hood, if we implement fluxes across immersed boundaries correctly, we'll get the right thing? Note the above code assumes that fluxes are along the ""inward facing ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1075131624:1092,Continuous,ContinuousBoundaryCondition,1092,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1075131624,1,['Continuous'],['ContinuousBoundaryCondition']
Deployability,"es](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/386?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/386/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `12.9% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/386/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `79.09% <ø> (+2.49%)` | :arrow_up: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/386/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `88.7% <ø> (+2.43%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/386/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `73.39% <100%> (-2.74%)` | :arrow_down: |; | [src/diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/386/diff?src=pr&el=tree#diff-c3JjL2RpYWdub3N0aWNzLmps) | `74.19% <61.11%> (-9.6%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/386/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `64.44% <88.23%> (+5.54%)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/386/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `90.9% <0%> (-9.1%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/386?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/386?src=pr&el=footer). Last update [2749d07...770125d](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/386?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/386#issuecomment-526924398:2761,update,update,2761,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/386#issuecomment-526924398,2,['update'],['update']
Deployability,et_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; eval_user_input at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:150; repl_backend_loop at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:246; #start_repl_backend#46 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:231; start_repl_backend at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:228; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #run_repl#59 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:389; run_repl at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:375; jfptr_run_repl_91805.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #1013 ,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:6725,release,release-,6725,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"eviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, NamedTuple{(:u, :v, :w, :b), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:Nx, :Ny, :Nz, :Lx, :Ly, :Lz, :constant_wind_stress, :surface_buoyancy_flux, :amplitude, :wavelength, :wavenumber, :frequency, :Uˢ, :N², :N2, :Qᵘ, :u_star, :La_t, :Qʰ, :Qᵇ, :initial_mixed_layer_depth, :w_star, :Λ, :sponge_depth, :sponge_bottom, :sponge_top, :σ), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Vararg{Float64, 6}}}, typeof(sponge_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:Nx, :Ny, :Nz, :Lx, :Ly, :Lz, :constant_wind_stress, :surface_buoyancy_flux, :amplitude, :wavelength, :wavenumber, :frequency, :Uˢ, :N², :N2, :Qᵘ, :u_star, :La_t, :Qʰ, :Qᵇ, :initial_mixed_layer_depth, :w_star, :Λ, :sponge_depth, :sponge_bottom, :sponge_top, :σ), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Vararg{Float64, 6}}}, typeof(sponge_v), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity5)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Fac",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2032573594:15198,Continuous,ContinuousForcing,15198,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2032573594,1,['Continuous'],['ContinuousForcing']
Deployability,"existing. Another usability issue I noticed is that it's easy to make mistakes with `overwrite_existing`. It's convenient to toggle this on when starting from 0 (sometimes there's an iterative process involved in starting a simulation: fiddling with time-steps, an error in the output writer, error in a callback, blah blah). But when running with `pickup=true` we definitely do _not_ want to overwrite an existing output file. I'm wondering if we should implement behavior where `pickup=true` _overrides_ `overwrite_existing=true`. This would mean that if we pickup we _cannot_ overwrite an existing file (if for some reason we do want that, we'd have to delete it manually). I think this is really the behavior we want. However, it requires refactoring the output writers, because we have to move output writer initialization from the output writer constructor to another function that gets called after `run!(simulation)`. Not very hard, but something to ponder. Here's a few other random ideas that would also address this issue in slightly different ways. 1. Implement a ""pickup mode"" specified with an environment variable like `OCEANANIGANS_PICKUP=true` (rather than something we write in a script). Then output writer constructors can search for this environment variable and override `overwrite_existing` (with a warning?) in the output writer constructor. ""pickup mode"" has other usability benefits (ie it's annoying we have to change the run script / prepare the run script to be ""pickup"" aware: pickup mode avoids this so we can toggle to pickup mode from _outside_ the run script without internal changes) and also obviates the need to separate output writer constructor from output writer ""initialization"". 2. If we ""delay"" output writer construction, we can also extract the option ""overwrite_existing"" and put it elsewhere (eg as a global option `overwrite_existing_output` for all output writers in `run!`). This makes a stronger connection between `pickup` and `overwrite_existing`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2535:2700,toggle,toggle,2700,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2535,1,['toggle'],['toggle']
Deployability,"e{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}, Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}}, Tuple{CPU, CPU}}}}}, NamedTuple{(:u, :v, :w, :b), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity5)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_v), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_w), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_b), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}}}, WENO{3, Float64, Nothing, Nothing, NTuple{4, OffsetArrays.OffsetVector{Tuple{Float64, Float64, Float64}, Vector{Tuple{Float64, Float64, Float64}}}}, Nothing, true, Nothing, WENO{2, Float64, Nothing, Nothing, Tuple{OffsetArrays.OffsetVector{Tuple{Float64, Float64}, Vector{Tuple{Float64, Float64}}}, OffsetArrays.OffsetVector{Tuple{Float64, Float64}, Vector{Tuple{Float64, Float64}}}, OffsetArrays.OffsetVector{Tuple{Float64, Float64}, Vector{Tuple{Float64, Float64}}}}, Nothing, true, Nothing, UpwindBiased{1, Float64, Nothing, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{1, Float64, Nothing, No",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:53690,Continuous,ContinuousForcing,53690,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524,2,['Continuous'],['ContinuousForcing']
Deployability,"e{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, Nothing, NamedTuple{(:u, :v, :w), Tuple{typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing)}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}) failed; KernelError: passing and using non-bitstype argument. Argument 11 to your kernel function is of type ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Fl",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:4937,Continuous,ContinuousBoundaryFunction,4937,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"e{Float64, Int64, Int64}}) failed; KernelError: passing and using non-bitstype argument. Argument 11 to your kernel function is of type ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}}, which is not isbits:; .west is of type BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}} which is not isbits.; .condition",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:5656,Continuous,ContinuousBoundaryFunction,5656,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"e{Int64}, Tuple{typeof(Oceananigans.Operators.identity5)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:Nx, :Ny, :Nz, :Lx, :Ly, :Lz, :constant_wind_stress, :surface_buoyancy_flux, :amplitude, :wavelength, :wavenumber, :frequency, :Uˢ, :N², :N2, :Qᵘ, :u_star, :La_t, :Qʰ, :Qᵇ, :initial_mixed_layer_depth, :w_star, :Λ, :sponge_depth, :sponge_bottom, :sponge_top, :σ), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Vararg{Float64, 6}}}, typeof(sponge_w), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:Nx, :Ny, :Nz, :Lx, :Ly, :Lz, :constant_wind_stress, :surface_buoyancy_flux, :amplitude, :wavelength, :wavenumber, :frequency, :Uˢ, :N², :N2, :Qᵘ, :u_star, :La_t, :Qʰ, :Qᵇ, :initial_mixed_layer_depth, :w_star, :Λ, :sponge_depth, :sponge_bottom, :sponge_top, :σ), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Vararg{Float64, 6}}}, typeof(sponge_b), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}}}, WENO{3, Float64, Nothing, Nothing, Nothing, true, Nothing, WENO{2, Float64, Nothing, Nothing, Nothing, true, Nothing, UpwindBiased{1, Float64, Nothing, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{2, Float64, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}}, Oceananigans.Solvers.FFTBasedPoissonSolver{RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Fl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2032573594:17079,Continuous,ContinuousForcing,17079,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2032573594,1,['Continuous'],['ContinuousForcing']
Deployability,"f experience we've accumulated using Oceananigans to refactor the docs to make them more useful and practical. Here's the current structure:. 1. Home; 2. Installation instructions; 3. Using GPUs; 4. Examples; 5. Physics; 6. Numerical implementation; 7. Model setup; 8. Simulation tips; 9. Contributor's guide; 10. Gallery; 11. References; 12. Appendix. I propose refactoring this in a few ways:. * Adding a sort of ""quick start"" section (perhaps named just that) after ""Installation"". This will implement a similar simple example as `one_dimensional_diffusion.jl`, except with even more text, explaining basic important types and functions and providing links to other parts of the docs to obtain more information.; * ""Flattening"" the model setup section by bringing its sections out into the main list. I think this list should be refactored too according to what's important. For example, we don't need a whole section on `Clock`.; * Adding independent sections for each model type; * Moving ""Physics"" and ""Numerical implementation"" down in the docs to emphasize code documentation. The resulting structure might be something like. 1. What's Oceananigans?; 2. Installation; 3. Getting started; 4. Examples; 5. Grids; 6. Fields, BoundaryCondition, and AbstractOperations; 7. IncompressibleModel; 8. HydrostaticFreeSurfaceModel; 9. ShallowWaterModel; 10. Setting initial conditions; 11. Diffusion, viscosity, and TurbulenceClosures ; 12. Forcing functions; 13. Coriolis forces; 14. Buoyancy forces; 15. OutputWriters; 16. OutputReaders, post-processing, and plotting; 17. Using Graphics Processing Units (GPUs); 18. Useful tips and common pitfalls (from ""simulation tips""); 19. Contributor's guide; 20. Gallery (this should be way higher eventually, but we need more recent content to motivate that...); 22. Physics and numerical implementation; 23. References; 24. Appendix. It will take a few PRs to resolve this issue. It'd be great to incorporate feedback on the plan too before making any moves.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1852:1417,Install,Installation,1417,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1852,1,['Install'],['Installation']
Deployability,"fers{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}}}, NamedTuple{(:u, :v, :w, :T, :S), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:Lx, :Ly, :Lz, :Nx, :Ny, :Nz, :N²₀, :u₁_west, :ℓ₀, :σ, :u_b, :v_b, :u_out), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Vararg{Float64, 7}}}, typeof(sponge_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:Lx, :Ly, :Lz, :Nx, :Ny, :Nz, :N²₀, :u₁_west, :ℓ₀, :σ, :u_b, :v_b, :u_out), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Vararg{Float64, 7}}}, typeof(sponge_T), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:Lx, :Ly, :Lz, :Nx, :Ny, :Nz, :N²₀, :u₁_west, :ℓ₀, :σ, :u_b, :v_b, :u_out), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Vararg{Float64, 7}}}, typeof(sponge_S), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}}}, WENO{3, Float64, Nothing, Nothing, Nothing, true, Nothing, WENO{2, Float64, Nothing, Nothing, Nothing, true, Nothing, UpwindBiased{1, Float64, Nothing, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{2, Float64, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}}, Oceananigans.Solvers.FFTBasedPoissonSolver{RectilinearGrid{Float64, Bounded, Bounded, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Ba",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3609:24021,Continuous,ContinuousForcing,24021,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3609,1,['Continuous'],['ContinuousForcing']
Deployability,"ff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL2ZfcGxhbmUuamw=) | `60.86% <0.00%> (ø)` | |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/799/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `98.71% <ø> (ø)` | |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/799/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `100.00% <ø> (ø)` | |; | [src/Models/show\_models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/799/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9zaG93X21vZGVscy5qbA==) | `0.00% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/799/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100.00% <ø> (ø)` | |; | [...closure\_implementations/anisotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/799/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2RpZmZ1c2l2aXR5Lmps) | `100.00% <ø> (ø)` | |; | [...e\_closure\_implementations/isotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/799/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2lzb3Ryb3BpY19kaWZmdXNpdml0eS5qbA==) | `100.00% <ø> (ø)` | |; | ... and [3 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/799/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/799?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/799?src=pr&el=footer). Last update [03f1aa5...586529d](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/799?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/799#issuecomment-658184692:3496,update,update,3496,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/799#issuecomment-658184692,1,['update'],['update']
Deployability,"ffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity1), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑyᵃᶠᵃ), typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:35806,Continuous,ContinuousBoundaryFunction,35806,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,3,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:4558,Continuous,ContinuousBoundaryFunction,4558,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,11,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"field to accept a list of callable objects or functions. Or even better, a list of objects that look something like. ```julia; struct PrintableDiagnostic{D}; diagnostic :: D; format :: String; name :: String; units :: String; end. function pretty_diagnostic(pd::PrintableDiagnostic, model); return @sprintf(""%s: $(pd.format) %s"", pd.name, pd.diagnostic(model), pd.units); end; ```. with this design, the user can pass a list of `PrintableDiagnostics` to `ProgressPrinter`, which are then evaluated and the results turned into a string via the function `pretty_diagnostic`. As for option 1 of using a logging package, perhaps it could be nice to use some logging functionality that's configurable with global variables (?) rather than manually creating a `ProgressPrinter` that does ""brute force"" printing as I have described above. However I think that it would require some customization of existing logging packages, since the typical `info` or `debug` settings are not sufficient for the purposes of logging simulation output (right?) Instead, we would need more options, and it'd be nice to obtain the ability to also print the output of diagnostics / monitoring functions, as we do in the example script. And I think doing it this way might involve adding some lines to our time stepping loop. Perhaps @ali-ramadhan has more to say. Another thing we have talked about is somehow having the ability to live-update messages in the terminal (rather than printing a stream of message). This would be nice because it could dramatically reduce the text-noise that a stream of messages invokes, allowing the user to much more easily read and interpret the output of a simulation progress (in addition to creating the possibility for nice pseudo-animations via `UnicodePlots.jl`). I'm not 100% sure how to do this; one places to start could be https://github.com/ronisbr/TextUserInterfaces.jl. Any work on any of these ideas could be useful! I'd be happy to Skype to talk more and clarify any questions.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540828221:3993,update,update,3993,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540828221,1,['update'],['update']
Deployability,"file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #803 +/- ##; ==========================================; + Coverage 71.05% 71.24% +0.18% ; ==========================================; Files 186 186 ; Lines 4823 4854 +31 ; ==========================================; + Hits 3427 3458 +31 ; Misses 1396 1396 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [examples/one\_dimensional\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb25lX2RpbWVuc2lvbmFsX2RpZmZ1c2lvbi5qbA==) | `0.00% <0.00%> (ø)` | |; | [test/test\_examples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2V4YW1wbGVzLmps) | `79.54% <0.00%> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `94.11% <0.00%> (+3.37%)` | :arrow_up: |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `69.64% <0.00%> (+10.66%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803?src=pr&el=footer). Last update [b022627...2572835](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/803?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/803#issuecomment-660244336:2192,update,update,2192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/803#issuecomment-660244336,1,['update'],['update']
Deployability,"first_ simulation ran past the checkpointed time and saved more data. Thus when we _pickup_ from the checkpoint, we start a little bit in the past, and have to run past the point that was already saved. I think the simplest way to solve this is just to wrap `write_output!` in try/catch, so that we can try to continue even if we can't write output (perhaps emitting a warning). This is probably nice for other reasons too (ie in a very complex simulation with tons of output, some necessary, some not, we might prefer a very annoying, persistent, and obvious warning that one of the outputs doesn't work instead of an outright error). We _could_ also add a property to control this behavior with an innocuous default (ie `catch_errors=false` or something). ## The dangerous overwrite_existing. Another usability issue I noticed is that it's easy to make mistakes with `overwrite_existing`. It's convenient to toggle this on when starting from 0 (sometimes there's an iterative process involved in starting a simulation: fiddling with time-steps, an error in the output writer, error in a callback, blah blah). But when running with `pickup=true` we definitely do _not_ want to overwrite an existing output file. I'm wondering if we should implement behavior where `pickup=true` _overrides_ `overwrite_existing=true`. This would mean that if we pickup we _cannot_ overwrite an existing file (if for some reason we do want that, we'd have to delete it manually). I think this is really the behavior we want. However, it requires refactoring the output writers, because we have to move output writer initialization from the output writer constructor to another function that gets called after `run!(simulation)`. Not very hard, but something to ponder. Here's a few other random ideas that would also address this issue in slightly different ways. 1. Implement a ""pickup mode"" specified with an environment variable like `OCEANANIGANS_PICKUP=true` (rather than something we write in a script). Then out",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2535:1284,toggle,toggle,1284,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2535,1,['toggle'],['toggle']
Deployability,"following the suggestions provided in [On the Form of the Viscous Term for Two Dimensional Navier-Stokes Flows](https://academic.oup.com/qjmam/article/67/2/205/1909952), the viscous term is implemented as the divergence of the thickness weighted symmetric stress tensor; $$\boldsymbol{d} = h^{-1} \nabla \cdot (h \nu \boldsymbol{t})$$ where $$\boldsymbol{t} = \nabla \boldsymbol{u} + ( \nabla \boldsymbol{u})^T - \xi \boldsymbol{I} (\nabla \cdot \boldsymbol{u})$$. In case of a `ConservativeFormulation` the division by h in front of the term is dropped.; A new scalar diffusivity tailored to the shallow water model is added `ShallowWaterScalarDiffusivity` where $$\nu_e = h \nu$$ and the velocities are added as a field to the shallow water model and updated each time step in case of a conservative formulation. with @francispoulin . closes #2403",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2645:753,update,updated,753,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2645,1,['update'],['updated']
Deployability,"fsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}}}, ::ImmersedBoundaryCondition{Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Nothing}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}, ::Nothing, ::Nothing, ::Clock{Float64}, ::NamedTuple{(:u, :v, :w, :T, :S, :η), Tuple{Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.Im",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2711:28234,Continuous,ContinuousBoundaryFunction,28234,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2711,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"g the following:; ```; using Pkg; Pkg.activate("".""); Pkg.add(""CUDA""); Pkg.instantiate(); using CUDA; ```; I got:; ```; [57577] signal (11.1): Segmentation fault; in expression starting at /glade/u/home/knudsenl/.julia/packages/CUDA_Runtime_jll/YgJCI/.pkg/platform_augmentation.jl:210; Allocations: 2907 (Pool: 2898; Big: 9); GC: 0; Activating new project at `/glade/derecho/scratch/knudsenl/BottomBoundaryLayer`; Installing known registries into `~/.julia`; Updating registry at `~/.julia/registries/General.toml`; Resolving package versions...; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Adapt ─────────────────────── v4.0.4; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed SentinelArrays ────────────── v1.4.5; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed FixedPointNumbers ─────────── v0.8.5; Installed Tables ────────────────────── v1.12.0; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed GPUCompiler ───────────────── v0.26.7; Installed StaticArraysCore ──────────── v1.4.3; Installed TimerOutputs ──────────────── v0.5.24; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed AbstractFFTs ──────────────── v1.5.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArrays ──────────────── v1.9.7; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed LaTeXStrings ──────────────── v1.3.1; Installed OrderedCollections ────────── v1.6.3; In",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900:1100,Install,Installed,1100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900,1,['Install'],['Installed']
Deployability,"gans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑyᵃᶠᵃ), typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑyᵃᶠᵃ), typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Center, Face, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.Cen",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:37111,Continuous,ContinuousBoundaryFunction,37111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,3,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"gans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Advection/momentum_advection_operators.jl:53 [inlined]; [19] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Advection/momentum_advection_operators.jl:53 [inlined]; [20] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:61 [inlined]; [21] overdub; @ /glade/work/tomasc/.julia/packages/KernelAbstractions/3ZHln/src/macros.jl:266 [inlined]; [22] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, Ke",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:42877,Continuous,ContinuousBoundaryFunction,42877,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"gans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Advection/reconstruction_coefficients.jl:19 [inlined]; [8] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Advection/reconstruction_coefficients.jl:19 [inlined]; [9] _left_biased_interpolate_xᶜᵃᵃ(::Int64, ::Int64, ::Int64, ::ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:5863,Continuous,ContinuousBoundaryFunction,5863,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"gans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_fluxes.jl:199 [inlined]; [10] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_fluxes.jl:199 [inlined]; [11] _left_biased_interpolate_xᶜᵃᵃ(::Int64, ::Int64, ::Int64, ::ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArr",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:10141,Continuous,ContinuousBoundaryFunction,10141,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"gans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_fluxes.jl:199 [inlined]; [12] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_fluxes.jl:199 [inlined]; [13] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Advection/upwind_biased_advective_fluxes.jl:21 [inlined]; [14] _advective_momentum_flux_Uu(::Int64, ::Int64, ::Int64, ::ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:14704,Continuous,ContinuousBoundaryFunction,14704,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"gans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_fluxes.jl:61 [inlined]; [15] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_fluxes.jl:61 [inlined]; [16] δxᶠᵃᵃ(::Int64, ::Int64, ::Int64, ::ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:22251,Continuous,ContinuousBoundaryFunction,22251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"gans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Operators/difference_operators.jl:21 [inlined]; [17] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Operators/difference_operators.jl:21 [inlined]; [18] div_𝐯u(::Int64, ::Int64, ::Int64, ::ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:29704,Continuous,ContinuousBoundaryFunction,29704,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"gans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, ::Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.C",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:19397,Continuous,ContinuousBoundaryFunction,19397,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"gans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Face, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.Cen",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:34259,Continuous,ContinuousBoundaryFunction,34259,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,3,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"gans.jl/pull/402?src=pr&el=h1) Report; > Merging [#402](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/402?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/f77d3e6ef455fa3b7ed177c1af0e6a163b048a83?src=pr&el=desc) will **increase** coverage by `0.09%`.; > The diff coverage is `100%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/402/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/402?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #402 +/- ##; ==========================================; + Coverage 71.74% 71.83% +0.09% ; ==========================================; Files 23 23 ; Lines 1412 1413 +1 ; ==========================================; + Hits 1013 1015 +2 ; + Misses 399 398 -1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/402?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/402/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `84.74% <100%> (+1.69%)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/402/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `97.63% <0%> (+0.01%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/402?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/402?src=pr&el=footer). Last update [f77d3e6...77a2c9a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/402?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/402#issuecomment-531193966:1868,update,update,1868,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/402#issuecomment-531193966,1,['update'],['update']
Deployability,"gans.jl/pull/421/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `71.11% <0%> (-9.85%)` | :arrow_down: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/421/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `40.94% <0%> (-56.72%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/421/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `49.35% <0%> (-15.59%)` | :arrow_down: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/421/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `62.5% <0%> (-12.5%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/421/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `78.26% <0%> (-7.32%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/421/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `72.02% <0%> (-2.1%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/421/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `85.24% <0%> (-1.64%)` | :arrow_down: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/421/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `79.54% <0%> (-0.57%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/421?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/421?src=pr&el=footer). Last update [d32cf20...3ce561b](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/421?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/421#issuecomment-532807303:2941,update,update,2941,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/421#issuecomment-532807303,1,['update'],['update']
Deployability,"ge by `0.43%`.; > The diff coverage is `100.00%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/685/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/685?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #685 +/- ##; ==========================================; - Coverage 77.99% 77.56% -0.44% ; ==========================================; Files 120 120 ; Lines 2413 2478 +65 ; ==========================================; + Hits 1882 1922 +40 ; - Misses 531 556 +25 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/685?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/BoundaryConditions/apply\_flux\_bcs.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/685/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9hcHBseV9mbHV4X2Jjcy5qbA==) | `53.84% <0.00%> (-29.49%)` | :arrow_down: |; | [src/BoundaryConditions/boundary\_function.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/685/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9ib3VuZGFyeV9mdW5jdGlvbi5qbA==) | `71.42% <0.00%> (-28.58%)` | :arrow_down: |; | [src/Fields/field.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/685/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `75.17% <0.00%> (-0.73%)` | :arrow_down: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/685?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/685?src=pr&el=footer). Last update [74cfb85...6eb8db9](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/685?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/685#issuecomment-595584245:2152,update,update,2152,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/685#issuecomment-595584245,1,['update'],['update']
Deployability,"geLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}}}, NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(u_forcing), Tuple{}, Tuple{}, Tuple{}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, Nothing, typeof(v_forcing), Tuple{}, Tuple{}, Tuple{}}, typeof(Oceananigans.Forcings.zeroforcing)}}, UpwindBiasedFifthOrder, Oceananigans.Solvers.FFTBasedPoissonSolver{RectilinearGrid{Float64, Bounded, Bounded, Flat, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, GPU}, NamedTuple{(:λx, :λy, :λz), Tuple{CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}}, CUDA.CuArray{ComplexF64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{ComplexF64, 3, CUDA.Mem.DeviceBuffer}, NamedTuple{(:forwa",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2530:48073,Continuous,ContinuousForcing,48073,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2530,1,['Continuous'],['ContinuousForcing']
Deployability,"gence\_tests/point\_exponential\_decay.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL3BvaW50X2V4cG9uZW50aWFsX2RlY2F5Lmps) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | [benchmark/benchmark\_ffts.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mZnRzLmps) | | |; | [...ts/one\_dimensional\_gaussian\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9nYXVzc2lhbl9hZHZlY3Rpb25fZGlmZnVzaW9uLmps) | | |; | [...ests/one\_dimensional\_cosine\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9jb3NpbmVfYWR2ZWN0aW9uX2RpZmZ1c2lvbi5qbA==) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_operators.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X29wZXJhdG9ycy5qbA==) | | |; | ... and [49 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792?src=pr&el=footer). Last update [d383b6a...ad6a215](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/792#issuecomment-657511230:3403,update,update,3403,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/792#issuecomment-657511230,1,['update'],['update']
Deployability,getregion was not working on `KernelFunctionOperation`s after the update from `computed_dependecies` to `arguments` because of the splatting in the constructor. This PR fixes it. @siddharthabishnu,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3227:66,update,update,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3227,1,['update'],['update']
Deployability,gfig/share/man:/glade/u/apps/casper/23.10/spack/opt/spack/openmpi/4.1.6/oneapi/2023.2.1/dgcv/share/man:/glade/u/apps/common/23.08/spack/opt/spack/intel-oneapi-compilers/2023.2.1/compiler/2023.2.1/documentation/en/man/common:/usr/local/man:/opt/pbs/share/man:/glade/u/apps/casper/23.10/opt/view/man:/glade/u/apps/casper/23.10/opt/view/share/man:/usr/local/share/man:/usr/share/man; INTEL_PATH = /glade/u/apps/common/23.08/spack/opt/spack/intel-oneapi-compilers/2023.2.1; MODULEPATH = /glade/u/apps/casper/modules/environment:/glade/work/knudsenl/spack-downstreams/casper/modules/23.10/Core:/glade/u/apps/casper/modules/23.10/Core:/glade/work/knudsenl/spack-downstreams/casper/modules/23.10/oneapi/2023.2.1:/glade/u/apps/casper/modules/23.10/oneapi/2023.2.1:/glade/work/knudsenl/spack-downstreams/casper/modules/23.10/openmpi/4.1.6/oneapi/2023.2.1:/glade/u/apps/casper/modules/23.10/openmpi/4.1.6/oneapi/2023.2.1; NCAR_DEFAULT_INFOPATH = /usr/local/share/info:/usr/share/info; MODULEPATH_ROOT = /glade/u/apps/casper/modules; LMOD_PACKAGE_PATH = /glade/work/csgteam/spack-deployments/casper/23.10/envs/public/util; JRE_HOME = /usr/lib64/jvm/java-11-openjdk-11; PATH = /glade/u/apps/casper/23.10/spack/opt/spack/julia/1.9.2/gcc/7.5.0/mjea/bin:/glade/u/apps/casper/23.10/spack/opt/spack/netcdf/4.9.2/oneapi/2023.2.1/gfig/bin:/glade/u/apps/casper/23.10/spack/opt/spack/hdf5/1.12.2/oneapi/2023.2.1/6vf2/bin:/glade/u/apps/casper/23.10/spack/opt/spack/ncarcompilers/1.0.0/oneapi/2023.2.1/mai6/bin/mpi:/glade/u/apps/casper/23.10/spack/opt/spack/openmpi/4.1.6/oneapi/2023.2.1/dgcv/bin:/glade/u/apps/casper/23.10/spack/opt/spack/ucx/1.14.1/gcc/7.5.0/vf2h/bin:/glade/u/apps/common/23.08/spack/opt/spack/cuda/12.2.1/bin:/glade/u/apps/casper/23.10/spack/opt/spack/ncarcompilers/1.0.0/oneapi/2023.2.1/mai6/bin:/glade/u/apps/common/23.08/spack/opt/spack/intel-oneapi-compilers/2023.2.1/compiler/2023.2.1/linux/lib/oclfpga/bin:/glade/u/apps/common/23.08/spack/opt/spack/intel-oneapi-compilers/2023.2.1/compiler/2023.2.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233740720:13177,deploy,deployments,13177,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233740720,1,['deploy'],['deployments']
Deployability,"gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=h1) Report; > Merging [#585](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/588890004e69cfc7db10472b12a9840b8a9ad7b6?src=pr&el=desc) will **increase** coverage by `0.97%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #585 +/- ##; ==========================================; + Coverage 72.17% 73.14% +0.97% ; ==========================================; Files 70 70 ; Lines 2016 2011 -5 ; ==========================================; + Hits 1455 1471 +16 ; + Misses 561 540 -21; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `61.05% <0%> (ø)` | :arrow_up: |; | [src/logger.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585/diff?src=pr&el=tree#diff-c3JjL2xvZ2dlci5qbA==) | `76.19% <0%> (+76.19%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=footer). Last update [5888900...01ec7b4](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/585?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/585#issuecomment-568143084:1841,update,update,1841,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/585#issuecomment-568143084,1,['update'],['update']
Deployability,gions!#38 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:114; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:101 [inlined]; #fill_halo_regions!#37 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:90 [inlined]; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:87; unknown function (ip: 0x2aaac8ad0ee5); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./load,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:4188,release,release-,4188,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,1,['release'],['release-']
Deployability,"global tracer conservation for the hydrostatic lock-release configuration in `validation/moving_coordinate/z_star_lock_release.jl`. Better than the z-coordinate but still not machine-precision conserving. <img width=""289"" alt=""Screenshot 2023-12-21 at 11 00 02 AM"" src=""https://github.com/CliMA/Oceananigans.jl/assets/33547697/e7f913c5-07e6-47ab-a391-24af71ea65a5"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3411#issuecomment-1865979201:52,release,release,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3411#issuecomment-1865979201,2,"['configurat', 'release']","['configuration', 'release']"
Deployability,"gyre$ julia visualize_barotropic_gyre.jl ; libGL error: MESA-LOADER: failed to open iris: /usr/lib/dri/iris_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\$${ORIGIN}/dri:/usr/lib/dri, suffix _dri); libGL error: failed to load driver: iris; libGL error: MESA-LOADER: failed to open iris: /usr/lib/dri/iris_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\$${ORIGIN}/dri:/usr/lib/dri, suffix _dri); libGL error: failed to load driver: iris; libGL error: MESA-LOADER: failed to open swrast: /usr/lib/dri/swrast_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\$${ORIGIN}/dri:/usr/lib/dri, suffix _dri); libGL error: failed to load driver: swrast; ┌ Warning: GLFW couldn't create an OpenGL window.; │ This likely means, you don't have an OpenGL capable Graphic Card,; │ or you don't have an OpenGL 3.3 capable video driver installed.; │ Have a look at the troubleshooting section in the GLMakie readme:; │ https://github.com/JuliaPlots/Makie.jl/tree/master/GLMakie#troubleshooting-opengl.; └ @ GLMakie ~/.julia/packages/GLMakie/XG7Hm/src/screen.jl:381; ERROR: LoadError: GLFWError (VERSION_UNAVAILABLE): GLX: Failed to create context: GLXBadFBConfig; Stacktrace:; [1] _ErrorCallbackWrapper(code::Int32, description::Cstring); @ GLFW ~/.julia/packages/GLFW/BWxfF/src/callback.jl:43; [2] CreateWindow(width::Int64, height::Int64, title::String, monitor::GLFW.Monitor, share::GLFW.Window); @ GLFW ~/.julia/packages/GLFW/BWxfF/src/glfw3.jl:499; [3] GLFW.Window(; name::String, resolution::Tuple{Int64, Int64}, debugging::Bool, major::Int64, minor::Int64, windowhints::Vector{Tuple{UInt32, Integer}}, contexthints::Vector{Tuple{UInt32, Integer}}, visible::Bool, focus::Bool, fullscreen::Bool, monitor::Nothing, share::GLFW.Window); @ GLFW ~/.julia/packages/GLFW/BWxfF/src/glfw3.jl:344; [4] GLMakie.Screen(; resolution::Tup",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2542#issuecomment-1123091985:1149,install,installed,1149,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2542#issuecomment-1123091985,1,['install'],['installed']
Deployability,"h/climate-machine/Oceananigans.jl/pull/326?src=pr&el=h1) Report; > Merging [#326](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/66670ad782b66db7906d407ab9217ec0f26a7bb2?src=pr&el=desc) will **increase** coverage by `1.31%`.; > The diff coverage is `81.1%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #326 +/- ##; ==========================================; + Coverage 74.74% 76.06% +1.31% ; ==========================================; Files 22 22 ; Lines 1176 1224 +48 ; ==========================================; + Hits 879 931 +52 ; + Misses 297 293 -4; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `75.93% <81.1%> (+11.18%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326?src=pr&el=footer). Last update [66670ad...4e72d35](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/326?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/326#issuecomment-523974978:1842,update,update,1842,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/326#issuecomment-523974978,1,['update'],['update']
Deployability,"h1) Report; > Merging [#992](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/992?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/e808a821d78949b0482b8372533e992cabb5d65f?el=desc) will **not change** coverage.; > The diff coverage is `66.66%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/992/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/992?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #992 +/- ##; =======================================; Coverage 72.04% 72.04% ; =======================================; Files 218 218 ; Lines 6379 6379 ; =======================================; Hits 4596 4596 ; Misses 1783 1783 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/992?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/992/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `57.14% <ø> (ø)` | |; | [src/Fields/new\_data.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/992/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9uZXdfZGF0YS5qbA==) | `76.92% <50.00%> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/992/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `88.88% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/992?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/992?src=pr&el=footer). Last update [e808a82...9054b82](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/992?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/992#issuecomment-700346993:1895,update,update,1895,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/992#issuecomment-700346993,1,['update'],['update']
Deployability,"h](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #183 +/- ##; ===========================================; - Coverage 68.81% 57.86% -10.96% ; ===========================================; Files 18 19 +1 ; Lines 651 776 +125 ; ===========================================; + Hits 448 449 +1 ; - Misses 203 327 +124; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/operators/dst3fl.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9kc3QzZmwuamw=) | `0% <0%> (ø)` | |; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `10% <0%> (-23.34%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `55.17% <0%> (-1.98%)` | :arrow_down: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <0%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183?src=pr&el=footer). Last update [6c272ad...63f7bb2](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/183#issuecomment-485975517:2231,update,update,2231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/183#issuecomment-485975517,1,['update'],['update']
Deployability,"h](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #183 +/- ##; ===========================================; - Coverage 68.81% 57.86% -10.96% ; ===========================================; Files 18 19 +1 ; Lines 651 776 +125 ; ===========================================; + Hits 448 449 +1 ; - Misses 203 327 +124; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/operators/dst3fl.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9kc3QzZmwuamw=) | `0% <0%> (ø)` | |; | [src/planetary\_constants.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183/diff?src=pr&el=tree#diff-c3JjL3BsYW5ldGFyeV9jb25zdGFudHMuamw=) | `10% <0%> (-23.34%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `55.17% <0%> (-1.98%)` | :arrow_down: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <0%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183?src=pr&el=footer). Last update [6c272ad...7ff5f20](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/183?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/183#issuecomment-485975519:2231,update,update,2231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/183#issuecomment-485975519,1,['update'],['update']
Deployability,"halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/349/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `81.25% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/349/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `43.9% <ø> (ø)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/349/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `97.61% <ø> (ø)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/349/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `59.7% <ø> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/349/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `70% <100%> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/349/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.68% <100%> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/349/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `76.58% <100%> (ø)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/349/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `62.02% <50%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/349?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/349?src=pr&el=footer). Last update [848edd9...7e48630](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/349?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/349#issuecomment-520158094:2840,update,update,2840,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/349#issuecomment-520158094,2,['update'],['update']
Deployability,"han having a system where an output writer might have to delete a file, we instead create a directory system where new output is always saved in a unique directory. In other words, rather than saving user output at. ```julia; filepath = joinpath(dir, filename); ```. we would save output at the path. ```julia; filepath = joinpath(dir, unique_simulation_id, filename); ```. The upside of this system is that the output writers are relieved of any potential need to delete data. That onus is passed to the user instead, where the responsibility belongs. The downside is that we have to generate the directory name `unique_simulation_id`. No matter what we choose, its going to require effort from users to interpret and learn. It also has the major downside of ""hiding"" information from users: they'll run a script, and then hunt around for the data that was saved. No matter what naming system we choose for `unique_simulation_id`, I think it makes it harder for users to find their data. Finally, we should note of course that there's no reason why users can't do this themselves in their own scripts. We don't have to make directories for them, they can simply generate ID's themselves and `mkdir`. If the user is sophisticated enough to be running lots of experiments with highly valuable data, they can probably figure out how to create directories... We're also entering into dangerous territory I think --- trying to manage user's workflows. Workflow management tools are good in general, of course, but I just think its sort of hard to do well and in a general enough way that is uniformly useful to everyone. So by wading into this area, we risk doing a crap job and interfering / hindering at least some people, rather than helping. Anyways, after writing this out I'm a little wary of introducing anything now (maybe actually showing how to integrate workflow management tools into Oceananigans scripts is a better solution). But I thought it would be useful to open this up for discussion.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3543:3008,integrat,integrate,3008,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3543,1,['integrat'],['integrate']
Deployability,"hat sometimes `model` has to use a very tiny time-step to bridge the gap between the current time and the output time? If so, that's an interesting possibility that I hadn't considered. Although in the example above I'm fixing the time-step at `25`, while the output time interval is `200`, so I wouldn't expect any issues there. Can you check just to be sure? Because having an output interval that's some multiple of the time step is exactly when we expect to see miniscule time-steps due to round off error. The pressure source term is the divergence of the predictor velocity divided by time-step. As the time-step vanishes, the divergence of the predictor velocity also vanishes (because the flow has not evolved from its previous, non-divergent solution). We get a situation tending to 0/0. I think there's a few things we could do to solve this. First of all if we take a very small time-step, I think we can actually just re-set the model time rather than taking a time-step. Second I am wondering if we want to implement a time type that has finite resolution (ie there is a smallest time increment one can take). For example, datetimes have a smallest unit (micro or nanoseconds). A non-dimensional or dimensional-agnostic time type could also be designed analogously (eg every time is the multiple of an integer by the fundamental unit). This would eliminate round off error but it's a bit of work and also we have to put some thought into how best to accomplish it. There might also be a simpler solution by adjusting how we increment time. I'm not sure. > Also wouldn't that also affect simulations with `buoyancy=nothing` if the pre-output time-step were to blame?. I think so, but I also don't think that you can guarantee this problem won't ever occur. The presence of the buoyancy does somehow impact the divergence that accumulates during a time-step / the pressure correction that has to be applied. So it's possible that the buoyancy configuration affects these results. Not sure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3593#issuecomment-2103013025:2335,configurat,configuration,2335,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3593#issuecomment-2103013025,2,['configurat'],['configuration']
Deployability,"her grid resolutions profiled had about the same GPU activities result as shown below and so only one set is shown. As far as @francispoulin and I know, the GPU activities seem to be correct, with what should be taking up the most time doing so.; However, for API calls, results differ a lot based on grid resolution. As the grid increases in size, `cuStreamQuery` and eventually `cuCtxGetCurrent` becomes the dominant API call. See below the API call profile result tables for the different grid sizes. It seems that `cuStreamQuery` is what is checking on the status of the cuda streams so larger grids taking more time to run the kernels than launching the kernels may have something to do with it.; ```; Oceananigans v0.61.0; Julia Version 1.6.2; Commit 1b93d53fc4 (2021-07-14 15:36 UTC); Platform Info:; OS: Linux (powerpc64le-unknown-linux-gnu); CPU: unknown; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, pwr9); GPU: Tesla V100-SXM2-32GB. CUDA toolkit 10.2.89, local installation; CUDA driver 10.2.0; NVIDIA driver 440.64.0. Libraries: ; - CUBLAS: 10.2.2; - CURAND: 10.1.2; - CUFFT: 10.1.2; - CUSOLVER: 10.3.0; - CUSPARSE: 10.3.1; - CUPTI: 12.0.0; - NVML: 10.0.0+440.64.0; - CUDNN: missing; - CUTENSOR: missing. Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5; - Device capability support: sm_30, sm_32, sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 31.432 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 31.738 GiB / 31.749 GiB available); nothing. [2021/08/11 22:39:51.084] INFO Setting up benchmark: (GPU, Float64, 2048)...; [2021/08/11 22:40:32.330] INFO warming up; [2021/08/11 22:41:32.311] INFO Simulation is stopping. Model iteration 1 has hit or exceeded simulation stop iteration 1.; [2021/08/11 22:41:32.729] WARN Calling CUDA.@profile only informs an external profiler to start.; The user is responsible for ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-898095311:1301,install,installation,1301,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-898095311,1,['install'],['installation']
Deployability,"hine/Oceananigans.jl/pull/395/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.85% <100%> (ø)` | :arrow_up: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/395/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `83.05% <100%> (+1.69%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/395/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `74.48% <100%> (+1.14%)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/395/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `77.71% <0%> (+0.54%)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/395/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `64.44% <0%> (+14.44%)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/395/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `62.02% <0%> (+15.18%)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/395/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <0%> (+16.66%)` | :arrow_up: |; | [src/poisson\_solvers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/395/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `97.61% <0%> (+57.61%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/395?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/395?src=pr&el=footer). Last update [079cb53...bd0ce51](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/395?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/395#issuecomment-530062190:2927,update,update,2927,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/395#issuecomment-530062190,1,['update'],['update']
Deployability,"hm... OK, I see. Let me try playing around then. Where can I find some info about the VS Code's debugging mode?. But also I wanted to point out that you have a lot of unrelated packages installed in the same environment like Oceananigans (eg, conda, dagger, ScikitLearn, DifferentialEquations,...) Just to ensure that this is not any sort of incompatibility between various deps versions, can you create an empty environment, just have Oceananigans there and try to do 3. and confirm that you get the same issue?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1616903289:186,install,installed,186,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1616903289,1,['install'],['installed']
Deployability,"hmmm, I am not sure. What does `mask_immersed_field!` mean for a `FunctionField`? ; We probably need to specialize `mask_immersed_field_xy!` for `Field`s only and add a fallback for `mask_immersed_field!`; ```julia ; mask_immersed_field!(field, args...; kw...) = nothing; ```; why was the wrong mask called in the update?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3503#issuecomment-1997681692:314,update,update,314,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3503#issuecomment-1997681692,1,['update'],['update']
Deployability,https://clima.github.io/OceananigansDocumentation/previews/PR1940. But the docs log will also say if that has been deployed or not. If there was a DOCUMENTER_KEY issue or something else...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1940#issuecomment-901431732:115,deploy,deployed,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1940#issuecomment-901431732,1,['deploy'],['deployed']
Deployability,"https://codecov.io/gh/CliMA/Oceananigans.jl/pull/889?src=pr&el=desc) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/fbbb5f81b851bb838c8796efba36a3021cb89f0e?el=desc) will **increase** coverage by `0.01%`.; > The diff coverage is `80.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/889/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/889?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #889 +/- ##; ==========================================; + Coverage 70.99% 71.00% +0.01% ; ==========================================; Files 188 188 ; Lines 5230 5229 -1 ; ==========================================; Hits 3713 3713 ; + Misses 1517 1516 -1 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/889?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Grids/Grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/889/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `75.00% <ø> (+3.57%)` | :arrow_up: |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/889/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `65.07% <66.66%> (-0.55%)` | :arrow_down: |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/889/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `88.42% <100.00%> (+0.24%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/889?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/889?src=pr&el=footer). Last update [fbbb5f8...1db3d80](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/889?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/889#issuecomment-684069273:1924,update,update,1924,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/889#issuecomment-684069273,1,['update'],['update']
Deployability,"https://codecov.io/gh/CliMA/Oceananigans.jl/pull/910/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `92.00% <80.00%> (+3.57%)` | :arrow_up: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/910/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `71.79% <100.00%> (+0.74%)` | :arrow_up: |; | [src/AbstractOperations/interpolation\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/910/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9pbnRlcnBvbGF0aW9uX3V0aWxzLmps) | `71.42% <100.00%> (+8.09%)` | :arrow_up: |; | [src/Utils/kernel\_launching.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/910/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2tlcm5lbF9sYXVuY2hpbmcuamw=) | `100.00% <100.00%> (ø)` | |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/910/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.36% <100.00%> (+0.05%)` | :arrow_up: |; | [...lementations/anisotropic\_biharmonic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/910/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2JpaGFybW9uaWNfZGlmZnVzaXZpdHkuamw=) | `96.66% <0.00%> (-3.34%)` | :arrow_down: |; | ... and [17 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/910/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/910?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/910?src=pr&el=footer). Last update [f0c2821...60fd8ea](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/910?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/910#issuecomment-687186898:3577,update,update,3577,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/910#issuecomment-687186898,1,['update'],['update']
Deployability,"https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/505?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/505/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `75% <ø> (ø)` | :arrow_up: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/505/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `80.33% <ø> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/505/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `84.37% <100%> (-1.34%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/505/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `71.56% <100%> (-1.58%)` | :arrow_down: |; | [src/TimeSteppers/adams\_bashforth.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/505/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9hZGFtc19iYXNoZm9ydGguamw=) | `100% <100%> (ø)` | |; | [src/TimeSteppers/kernels.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/505/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9rZXJuZWxzLmps) | `60.39% <60.39%> (ø)` | |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/505/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `74.35% <74.35%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/505?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/505?src=pr&el=footer). Last update [cacb753...059d826](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/505?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/505#issuecomment-546596353:2763,update,update,2763,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/505#issuecomment-546596353,1,['update'],['update']
Deployability,https://github.com/CliMA/Oceananigans.jl/blob/0908bbdf8f1eed491043d7a9bf1a230c934be7a7/.buildkite/pipeline.yml#L207-L224. does not actually delete the `.julia` depots which can build up and cause future builds to run out of space. I think Buildkite or Linux is limiting the amount of space Buildkite can take up in `/var/lib/buildkite-agent/`. It's just executing `rm -rf`: https://buildkite.com/clima/oceananigans/builds/205. Potential victim builds:; https://buildkite.com/clima/oceananigans/builds/209; https://buildkite.com/clima/oceananigans/builds/210. I removed the old depots on Tartarus but @glwagner you might have to clean up Sverdrup.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1055:98,pipeline,pipeline,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1055,1,['pipeline'],['pipeline']
Deployability,https://github.com/CliMA/Oceananigans.jl/blob/7af4aad1eb4127c1c3c9605755ceaffaaec0668c/docs/src/model_setup/output_writers.md?plain=1#L28; I believe that `FieldSlicer` is no longer used? I think this is just a small part of the docs that missed this update.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3348:250,update,update,250,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3348,1,['update'],['update']
Deployability,"https://github.com/MikeInnes/Requires.jl ?. On Fri, Jun 14, 2019 at 10:47 AM Ali Ramadhan <notifications@github.com>; wrote:. > I'm strongly opposed to having multiple small packages.; >; > Why is that, given the benefits?; >; > Mainly I think we can get all the same benefits by maintaining a single; > unified and tidy repository with sub-modules. I don't see Oceananigans as a; > complex project yet, we're barely at 2,500 lines of code (minus turbulence; > closure operators which aren't integrated yet).; >; > I can see reasons for having a separate repository for examples and; > tutorials if there are enough of them, but I don't see e.g. the output; > writers as being logically separate from the main code. As a stand alone; > package, OceananigansOutput.jl doesn't do anything useful. Something like; > TurbulenceClosures.jl could though.; >; > Keeping things in tidy submodules within a single repository increases; > code visibility, which I think is important. When I see a package or; > framework spread across multiply small packages I find it hard to get an; > idea about what it can do.; >; > Another nice thing is we currently have ""unified versioning"" so when; > releases occur we know everything works together. We don't have to worry; > about running with Oceananigans v0.x with OceananigansPlotting v0.y and; > OceananigansOutput#master to fix some issue.; >; > From a development perspective, issues and pull requests are now spread; > across multiple repositories and we can end up with pull requests that; > depend on other pull requests in other repositories, e.g. when adding in; > halo regions the main code got refactored but so did the output writers and; > plotting code would change as well. We can also end up with multiple test; > suites that need to pass, plus possibly multiple CI pipelines to manage. So; > right now it's easy to make atomic changes that touch upon multiple pieces; > of code (and we'll probably be in this stage where we need to refactor; > frequ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-502146049:492,integrat,integrated,492,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-502146049,1,['integrat'],['integrated']
Deployability,"i think the data is installed freshly every time buildkite launches a new job, isn't it?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477954278:20,install,installed,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477954278,1,['install'],['installed']
Deployability,"iMA/Oceananigans.jl/pull/1090?src=pr&el=desc) (ca40ce0) into [master](https://codecov.io/gh/CliMA/Oceananigans.jl/commit/5aafe8ee1d3e49a53906e7225a01fc18f1a5f165?el=desc) (5aafe8e) will **decrease** coverage by `0.38%`.; > The diff coverage is `0.00%`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1090/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1090?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1090 +/- ##; ==========================================; - Coverage 57.39% 57.01% -0.39% ; ==========================================; Files 161 162 +1 ; Lines 3887 3913 +26 ; ==========================================; Hits 2231 2231 ; - Misses 1656 1682 +26 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1090?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1090/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `25.00% <ø> (ø)` | |; | [src/Fields/interpolate.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1090/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9pbnRlcnBvbGF0ZS5qbA==) | `0.00% <0.00%> (ø)` | |; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1090/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `73.80% <0.00%> (+1.71%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1090?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1090?src=pr&el=footer). Last update [5aafe8e...ca40ce0](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1090?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1090#issuecomment-713241303:1949,update,update,1949,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1090#issuecomment-713241303,1,['update'],['update']
Deployability,"iMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `82.50% <30.00%> (-4.78%)` | :arrow_down: |; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `60.37% <83.33%> (+7.43%)` | :arrow_up: |; | [src/BoundaryConditions/zero\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy96ZXJvX2hhbG9fcmVnaW9ucy5qbA==) | `78.94% <87.50%> (+2.47%)` | :arrow_up: |; | [src/Fields/averaged\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hdmVyYWdlZF9maWVsZC5qbA==) | `94.44% <94.44%> (ø)` | |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `71.79% <100.00%> (ø)` | |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `96.42% <100.00%> (ø)` | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.33% <100.00%> (-0.01%)` | :arrow_down: |; | ... and [10 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930?src=pr&el=footer). Last update [0f33c1d...69d5cd7](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/930?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/930#issuecomment-690826704:3374,update,update,3374,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/930#issuecomment-690826704,1,['update'],['update']
Deployability,ia/packages/MPI/TKXAj/src/pointtopoint.jl:70 [inlined]; send_south_halo at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:317; #fill_south_and_north_halo!#50 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:263; fill_south_and_north_halo! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:250; unknown function (ip: 0x2aaac8afa8b6); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #fill_halo_event!#40 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:208; fill_halo_event! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:193; unknown function (ip: 0x2aaac8aefb2e); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #fill_halo_regions!#38 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:114; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:101 [inlined]; #fill_halo_regions!#37 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:90 [inlined]; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:87; unknown function (ip: 0x2aaac8ad0ee5); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julial,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:3017,release,release-,3017,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,1,['release'],['release-']
Deployability,"ial condition: random noise scaled by the friction velocity.; uᵢ(x, y, z) = sqrt(abs(Qᵘ)) * Factor_V * Ξ(z). # `set!` the `model` fields using functions or constants:; set!(model, u=uᵢ, v=uᵢ, w=uᵢ, T=Tᵢ). wizard = TimeStepWizard(cfl= CFL, Δt = initial_timestep, max_change = max_allowable_change_in_Δt, max_Δt = maximum_Δt). # A type for calculating adaptive time steps based on capping the CFL number at `cfl`.; # On calling `update_Δt!(wizard, model)`, the `TimeStepWizard` computes a time-step such that; # ``cfl = max(u/Δx, v/Δy, w/Δz) Δt``, where ``max(u/Δx, v/Δy, w/Δz)`` is the maximum ratio; # between model velocity and along-velocity grid spacing anywhere on the model grid. The new; # `Δt` is constrained to change by a multiplicative factor no more than `max_change` or no; # less than `min_change` from the previous `Δt`, and to be no greater in absolute magnitude; # than `max_Δt` and no less than `min_Δt`. # wmax = FieldMaximum(abs, model.velocities.w) ##not working due to update, It has been renamed into other func. start_time = time_ns() ; # so we can print the total elapsed wall time. # Print a progress message; progress_message(sim) =; @printf(""i: %04d, t: %s, Δt: %s, wmax = %.1e ms⁻¹, wall time: %s\n"",; sim.model.clock.iteration, prettytime(model.clock.time),; prettytime(wizard.Δt), maximum(abs, sim.model.velocities.w),; prettytime((time_ns() - start_time) * 1e-9)). simulation = Simulation(model, Δt=wizard, stop_time= stop_time_info, iteration_interval = iteration_interval_info,; progress=progress_message). simulation.output_writers[:fields] =; JLD2OutputWriter(model, merge(model.velocities, model.tracers),; prefix = Name_of_simulation,; schedule = TimeInterval(0.2minute),; force = true). run!(simulation). using JLD2. using Plots. # load(""modified_open_ocean_convection_Fplane_GPU.jld2""). file = jldopen(""ocean_convection_Fplane_Vertical_strecthed_grid.jld2""). # Coordinate arrays; xC, yC, zC = file[""grid/xC""][1:256],file[""grid/yC""][1:256],file[""grid/zC""][1:65];",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1571#issuecomment-819158999:5123,update,update,5123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1571#issuecomment-819158999,1,['update'],['update']
Deployability,"id{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(u_drag), NamedTuple{(:cᵈ,), Tuple{Float64}}, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Nothing}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Face, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Ba",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069:2402,Continuous,ContinuousBoundaryFunction,2402,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069,3,['Continuous'],['ContinuousBoundaryFunction']
Deployability,ifest.toml:0; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed Adapt ─────────────────────── v4.0.4; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed SentinelArrays ────────────── v1.4.5; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed Tables ────────────────────── v1.12.0; Installed FixedPointNumbers ─────────── v0.8.5; Installed GPUCompiler ───────────────── v0.26.7; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArraysCore ──────────── v1.4.3; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed StaticArrays ──────────────── v1.9.7; Installed TimerOutputs ──────────────── v0.5.24; Installed AbstractFFTs ──────────────── v1.5.0; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed OrderedCollections ────────── v1.6.3; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed UnsafeAtomicsLLVM ─────────── v0.1.5; Installed LaTeXStrings ──────────────── v1.3.1; Installed NVTX ──────────────────────── v0.3.4; Installed CEnum ─────────────────────── v0.5.0; Installed Random123 ─────────────────── v1.7.0; Installed JuliaNVTXCallbacks_jll ────── v0.2.1+0; Installed InvertedIndices ───────────── v1.3.0; Installed BFloat16s ─────────────────── v0.5.0; Installed Reexport ──────────────────── v1.2.2; Installed CUDA_Runtime_jll ──────────── v0.14.1+0; Installed GPUArrays ─────────────────── v10.2.3; Installed RandomNumbers ─────────────── v1.5.3; ,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472:1502,Install,Installed,1502,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472,1,['Install'],['Installed']
Deployability,"iff-dmVyaWZpY2F0aW9uL3BlcmlvZGljX2FkdmVjdGlvbi9wZXJpb2RpY19hZHZlY3Rpb24uamw=) | `0.00% <0.00%> (ø)` | |; | [src/Advection/upwind\_biased\_fifth\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi91cHdpbmRfYmlhc2VkX2ZpZnRoX29yZGVyLmps) | `65.00% <65.00%> (ø)` | |; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `75.00% <0.00%> (-5.00%)` | :arrow_down: |; | [src/Grids/Grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `83.33% <0.00%> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <0.00%> (ø)` | |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | `100.00% <0.00%> (ø)` | |; | [src/Utils/tuple\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3R1cGxlX3V0aWxzLmps) | `44.44% <0.00%> (ø)` | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | `0.00% <0.00%> (ø)` | |; | ... and [27 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994?src=pr&el=footer). Last update [24e9c2c...c4faf06](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/994?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/994#issuecomment-700312179:3310,update,update,3310,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/994#issuecomment-700312179,1,['update'],['update']
Deployability,"iff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `67.64% <100.00%> (ø)` | |; | [src/Grids/grid\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/757/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL2dyaWRfdXRpbHMuamw=) | `98.71% <100.00%> (+0.18%)` | :arrow_up: |; | [src/Grids/regular\_cartesian\_grid.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/757/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL3JlZ3VsYXJfY2FydGVzaWFuX2dyaWQuamw=) | `90.00% <100.00%> (-1.67%)` | :arrow_down: |; | [src/Grids/vertically\_stretched\_cartesian\_grid.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/757/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL3ZlcnRpY2FsbHlfc3RyZXRjaGVkX2NhcnRlc2lhbl9ncmlkLmps) | `96.07% <100.00%> (-0.54%)` | :arrow_down: |; | [src/AbstractOperations/binary\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/757/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9iaW5hcnlfb3BlcmF0aW9ucy5qbA==) | `96.15% <0.00%> (+0.15%)` | :arrow_up: |; | [src/AbstractOperations/interpolation\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/757/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9pbnRlcnBvbGF0aW9uX3V0aWxzLmps) | `63.33% <0.00%> (+3.33%)` | :arrow_up: |; | [src/AbstractOperations/grid\_validation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/757/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9ncmlkX3ZhbGlkYXRpb24uamw=) | `75.00% <0.00%> (+8.33%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/757?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/757?src=pr&el=footer). Last update [ae33e4c...94c13c7](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/757?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/757#issuecomment-632822673:3281,update,update,3281,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/757#issuecomment-632822673,1,['update'],['update']
Deployability,"iff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvc29sdmVfZm9yX3ByZXNzdXJlLmps) | `93.33% <0.00%> (-6.67%)` | :arrow_down: |; | [src/Utils/launch\_config.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2xhdW5jaF9jb25maWcuamw=) | `94.11% <0.00%> (-5.89%)` | :arrow_down: |; | [...ntations/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3JvemVtYV9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `32.00% <0.00%> (-2.10%)` | :arrow_down: |; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `85.10% <0.00%> (-0.61%)` | :arrow_down: |; | [src/TimeSteppers/adams\_bashforth.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9hZGFtc19iYXNoZm9ydGguamw=) | `100.00% <0.00%> (ø)` | |; | [src/Solvers/batched\_tridiagonal\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvYmF0Y2hlZF90cmlkaWFnb25hbF9zb2x2ZXIuamw=) | `100.00% <0.00%> (ø)` | |; | ... and [43 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704?src=pr&el=footer). Last update [bff7abc...ec426ad](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/704#issuecomment-599780254:3615,update,update,3615,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/704#issuecomment-599780254,1,['update'],['update']
Deployability,"igans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}}}, NamedTuple{(:u, :v, :w, :b), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Float64, Float64, Float64, Float64}}, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Float64, Float64, Float64, Float64}}, typeof(forc_v), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Float64, Float64, Float64, Float64}}, typeof(forc_w), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), Tuple{Float64, Int64, Float64, Float64, Float64, Float64, Float64}}, typeof(forc_b), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}}}, WENO{3, Float64, Nothing, Nothing, NTuple{4, OffsetArrays.OffsetVector{Tuple{Float64, Float64, Float64}, CuArray{Tuple{Float64, Float64, Float64}, 1, CUDA.Mem.DeviceBuffer}}}, Nothing, true, Nothing, WENO{2, Float64, Nothing, Nothing, Tuple{OffsetArrays.OffsetVector{Tuple{Float64, Float64}, CuArray{Tuple{Float64, Float64}, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Tuple{Float64, Float64}, CuArray{Tuple{Float64, Float64}, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Tuple{Float64, Float64}, CuArray{Tuple{Float64, Float64}, 1, CUDA.Mem.DeviceBuffer}",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165:25464,Continuous,ContinuousForcing,25464,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165,2,['Continuous'],['ContinuousForcing']
Deployability,"igans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Advection/momentum_advection_operators.jl:53 [inlined]; [19] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Advection/momentum_advection_oper",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:42478,Continuous,ContinuousBoundaryFunction,42478,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"igans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Advection/reconstruction_coefficients.jl:19 [inlined]; [8] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Advection/reconstruction_coefficien",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:5464,Continuous,ContinuousBoundaryFunction,5464,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"igans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_fluxes.jl:199 [inlined]; [10] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_fl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:9742,Continuous,ContinuousBoundaryFunction,9742,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"igans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_fluxes.jl:199 [inlined]; [12] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_fl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:14305,Continuous,ContinuousBoundaryFunction,14305,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"igans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_fluxes.jl:61 [inlined]; [15] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/ImmersedBoundaries/conditional_flu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:21852,Continuous,ContinuousBoundaryFunction,21852,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"igans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}); @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Operators/difference_operators.jl:21 [inlined]; [17] overdub; @ /glade/work/tomasc/.julia/packages/Oceananigans/dgCcB/src/Operators/difference_operators.jl:21 [inl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:29305,Continuous,ContinuousBoundaryFunction,29305,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"igans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, ::Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, O",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:18998,Continuous,ContinuousBoundaryFunction,18998,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"igans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Face, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, Off",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132:33860,Continuous,ContinuousBoundaryFunction,33860,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1186215132,3,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"igans.jl/pull/798/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL0RpYWdub3N0aWNzLmps) | `100.00% <ø> (ø)` | |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/798/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `46.15% <ø> (-39.57%)` | :arrow_down: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/798/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `70.37% <100.00%> (-3.71%)` | :arrow_down: |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/798/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `100.00% <100.00%> (ø)` | |; | [src/AbstractOperations/interpolation\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/798/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9pbnRlcnBvbGF0aW9uX3V0aWxzLmps) | `63.33% <0.00%> (-30.01%)` | :arrow_down: |; | [src/Buoyancy/Buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/798/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L0J1b3lhbmN5Lmps) | `63.15% <0.00%> (-15.79%)` | :arrow_down: |; | [src/Solvers/pressure\_solver.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/798/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvcHJlc3N1cmVfc29sdmVyLmps) | `83.33% <0.00%> (-11.67%)` | :arrow_down: |; | ... and [92 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/798/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/798?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/798?src=pr&el=footer). Last update [cec16b0...5cbac0d](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/798?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/798#issuecomment-657840369:3138,update,update,3138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/798#issuecomment-657840369,1,['update'],['update']
Deployability,"iles](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `62.5% <ø> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `92.68% <100%> (+0.37%)` | :arrow_up: |; | [src/equation\_of\_state.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL2VxdWF0aW9uX29mX3N0YXRlLmps) | `100% <100%> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `71.7% <100%> (-0.28%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `52.3% <56%> (-6.85%)` | :arrow_down: |; | [src/halo\_regions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL2hhbG9fcmVnaW9ucy5qbA==) | `58.06% <58.06%> (-41.94%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `66% <0%> (+26%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329?src=pr&el=footer). Last update [ac7dc2a...a473fee](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/329?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/329#issuecomment-517942484:2758,update,update,2758,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/329#issuecomment-517942484,1,['update'],['update']
Deployability,"ine/Oceananigans.jl/pull/288?src=pr&el=h1) Report; > Merging [#288](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/40dbd96fd45a30867063c476b3eecbe13db1fb5c?src=pr&el=desc) will **decrease** coverage by `0.07%`.; > The diff coverage is `42.85%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #288 +/- ##; ==========================================; - Coverage 68.36% 68.29% -0.08% ; ==========================================; Files 22 22 ; Lines 882 880 -2 ; ==========================================; - Hits 603 601 -2 ; Misses 279 279; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `80.64% <100%> (-1.18%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `84.09% <33.33%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288?src=pr&el=footer). Last update [40dbd96...51bc9e0](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/288?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/288#issuecomment-504026989:1856,update,update,1856,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/288#issuecomment-504026989,1,['update'],['update']
Deployability,"ine/Oceananigans.jl/pull/435/diff?src=pr&el=tree#diff-c3JjL3BvaXNzb25fc29sdmVycy5qbA==) | `40.94% <0%> (-56.72%)` | :arrow_down: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/435/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `49.35% <0%> (-15.59%)` | :arrow_down: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/435/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `62.5% <0%> (-12.5%)` | :arrow_down: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/435/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `78.26% <0%> (-7.32%)` | :arrow_down: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/435/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `72.02% <0%> (-2.1%)` | :arrow_down: |; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/435/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `85.24% <0%> (-1.64%)` | :arrow_down: |; | [src/output\_writers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/435/diff?src=pr&el=tree#diff-c3JjL291dHB1dF93cml0ZXJzLmps) | `79.54% <0%> (-0.57%)` | :arrow_down: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/435/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `82.05% <0%> (+1.09%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/435?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/435?src=pr&el=footer). Last update [d32cf20...d88b63f](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/435?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/435#issuecomment-536922587:2935,update,update,2935,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/435#issuecomment-536922587,1,['update'],['update']
Deployability,ined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; eval_user_input at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:150; repl_backend_loop at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:246; #start_repl_backend#46 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:231; start_repl_backend at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:228; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amd,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:6100,release,release-,6100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"ing them online using using an `OutputWriter`) yields erroneous results because derivatives seem to be naively using output halo region values (which seem to be filled with zeroes by default) and not overwriting them to satisfy boundary conditions. One example impact of this is that the [Nusselt number calculation in the `horizontal_convection.jl` example script](https://clima.github.io/OceananigansDocumentation/stable/generated/horizontal_convection/#The-Nusselt-number) is totally meaningless because it is dominated by spuriously large buoyancy gradients in the boundary-adjacent cells. @ikeshwani and I demonstrate this bug in [this `horizontal_diffusion.jl` script](https://github.com/hdrake/HorizontalConvection/blob/bf2c917e43a6198a55061a46b2097b6b4a9dda3b/horizontal_diffusion.jl), in which we turn off advection in the `horizontal_convection.jl` example and numerically integrate the solution to equilibrium. We compare timeseries of the volume-integrated buoyancy dissipation rates calculated online versus those calculated offline (as in the `horizontal_convection.jl` example). The results show that the online calculation correctly asymptotes to the numerical solution of the equilibrium boundary value problem while the offline calculation is erroneous and effectively yields a Nusselt number that is more than 6 times too high. ![equilibration_ratio](https://github.com/CliMA/Oceananigans.jl/assets/12971166/1f79e7eb-b361-4ea0-aa76-a81d6049c25a). The bug is also evident by comparing snapshots of the two buoyancy dissipation rate fields. The dissipation rates computed offline clearly do not satisfy the no-flux boundary conditions on the boundaries. <img width=""587"" alt=""Screenshot 2023-08-22 at 12 38 27 PM"" src=""https://github.com/CliMA/Oceananigans.jl/assets/12971166/eee4e10c-432b-413c-8670-aaf47c8b0d0a"">. This bug is present in the live `main` Oceananigans.jl branch (circa `v0.86.0`), as is evident from the movie of the buoyancy dissipation rate field in the [`horizontal",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3224:1047,integrat,integrated,1047,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3224,1,['integrat'],['integrated']
Deployability,"ing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CuDeviceArray{Float64, 3, 1}}, ImmersedBoundaryGrid{Float64, Flat, Periodic, Bounded, RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Nothing}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, CuDeviceMatrix{Float64, 1}}}, Nothing}, CenteredSecondOrder, Nothing, Nothing, Nothing, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(Oceananigans.Operators.ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_v), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑyᵃᶠᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Fl",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2563:2577,Continuous,ContinuousBoundaryFunction,2577,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2563,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_w), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.identity4)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_w), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑzᵃᵃᶠ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(bottom_drag_w), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.identity1)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_w), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.identity2)}}}, Nothing, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{F",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2860:14303,Continuous,ContinuousBoundaryFunction,14303,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2860,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"inlined]; [12] overdub; @ ~/LocalDocs/code/Oceananigans.jl/src/Grids/grid_utils.jl:230 [inlined]; [13] overdub; @ ~/LocalDocs/code/Oceananigans.jl/src/BoundaryConditions/continuous_boundary_function.jl:153 [inlined]; [14] north_ib_flux(::Int64, ::Int64, ::Int64, ::ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, ::BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(bottom_drag_u), Float64, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity1), typeof(Oceananigans.Operators.ℑxzᶠᵃᶜ)}}}, ::Tuple{Face, Center, Center}, ::Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2860:4906,Continuous,ContinuousBoundaryFunction,4906,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2860,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"io/gh/CliMA/Oceananigans.jl/pull/839?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Fields/show\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <ø> (ø)` | |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `85.71% <ø> (ø)` | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `91.78% <69.23%> (-6.70%)` | :arrow_down: |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `92.06% <85.71%> (+0.99%)` | :arrow_up: |; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `89.18% <100.00%> (ø)` | |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `64.28% <100.00%> (+5.31%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839?src=pr&el=footer). Last update [994eae3...a77b356](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/839?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/839#issuecomment-670153251:2723,update,update,2723,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/839#issuecomment-670153251,1,['update'],['update']
Deployability,"io/gh/climate-machine/Oceananigans.jl/pull/280/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9zaG93X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | | |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | | |; | [src/Operators/derivative\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy9kZXJpdmF0aXZlX29wZXJhdG9ycy5qbA==) | | |; | [src/Operators/tracer\_advection\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280/diff?src=pr&el=tree#diff-c3JjL09wZXJhdG9ycy90cmFjZXJfYWR2ZWN0aW9uX29wZXJhdG9ycy5qbA==) | | |; | [...ure\_implementations/leith\_enstrophy\_diffusivity.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2xlaXRoX2Vuc3Ryb3BoeV9kaWZmdXNpdml0eS5qbA==) | | |; | [...nce\_closure\_implementations/blasius\_smagorinsky.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2JsYXNpdXNfc21hZ29yaW5za3kuamw=) | | |; | ... and [75 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280?src=pr&el=footer). Last update [91e5626...45bf8a8](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/280?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/280#issuecomment-500250532:3630,update,update,3630,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/280#issuecomment-500250532,1,['update'],['update']
Deployability,"iodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, Oceananigans.Advection.CenteredSecondOrder, NonTraditionalFPlane{Float64}, Nothing, AnisotropicDiffusivity{Float64,Float64,Float64,NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}}}, NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, Nothing, NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}}, OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}, NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}) failed; KernelError: passing and using non-bitstype argument. Argument 13 to your kernel function is of type NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.For",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:1984,Continuous,ContinuousForcing,1984,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['Continuous'],['ContinuousForcing']
Deployability,"ion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1174/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9wcmVzc3VyZV9jb3JyZWN0aW9uLmps) | `71.42% <0.00%> (ø)` | |; | [.../IncompressibleModels/show\_incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1174/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy9zaG93X2luY29tcHJlc3NpYmxlX21vZGVsLmps) | `0.00% <ø> (ø)` | |; | [...ncompressibleModels/update\_hydrostatic\_pressure.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1174/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy91cGRhdGVfaHlkcm9zdGF0aWNfcHJlc3N1cmUuamw=) | `40.00% <ø> (ø)` | |; | [src/Models/IncompressibleModels/update\_state.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1174/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy91cGRhdGVfc3RhdGUuamw=) | `87.50% <0.00%> (ø)` | |; | [...mpressibleModels/velocity\_and\_tracer\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1174/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9JbmNvbXByZXNzaWJsZU1vZGVscy92ZWxvY2l0eV9hbmRfdHJhY2VyX3RlbmRlbmNpZXMuamw=) | `60.00% <ø> (ø)` | |; | [src/Models/Models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1174/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9Nb2RlbHMuamw=) | `100.00% <ø> (ø)` | |; | ... and [8 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1174/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1174?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1174?src=pr&el=footer). Last update [03a6f85...0386f31](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1174?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1174#issuecomment-727277449:3842,update,update,3842,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1174#issuecomment-727277449,1,['update'],['update']
Deployability,"ion{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, CuArray{Float64, 2, CUDA.Mem.DeviceBuffer}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸᶻ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity4)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Center, Face, Nothing,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165:16322,Continuous,ContinuousBoundaryFunction,16322,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ion{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, CuArray{Float64, 2, CUDA.Mem.DeviceBuffer}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity1)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.identity2)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.Bo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165:18734,Continuous,ContinuousBoundaryFunction,18734,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ion{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, loc::Tuple{Face, Center, Center}, grid::ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, bottom_bc::BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(u_drag), NamedTuple{(:cᵈ,), Tuple{Float64}}, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Nothing}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, top_bc::BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, args::Tuple{Clock{Float64}, NamedTuple{(:u, :v, :w, :b, :η), Tuple{Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetM",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069:11187,Continuous,ContinuousBoundaryFunction,11187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"irect.github.com/JuliaLang/julia/issues/50667"">JuliaLang/julia#50667</a> for julia &lt;1.11 as maintaining the mtime of the julia source files means cached <code>/compiled</code> caches won't be invalidated in new runs where julia has been reinstalled.</p>; <h2>What's Changed</h2>; <ul>; <li>add test for julia install and mtime maintenance by <a href=""https://github.com/IanButterworth""><code>@​IanButterworth</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/200"">julia-actions/setup-julia#200</a></li>; <li>extract julia directly to tool path to maintain mtimes by <a href=""https://github.com/IanButterworth""><code>@​IanButterworth</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/196"">julia-actions/setup-julia#196</a></li>; <li>v1.9.5 by <a href=""https://github.com/IanButterworth""><code>@​IanButterworth</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/201"">julia-actions/setup-julia#201</a></li>; </ul>; <h3>Dep updates</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/julia-actions/setup-julia/commit/f2258781c657ad9b4b88072c5eeaf9ec8c370874""><code>f225878</code></a> Add production dependencies &amp; build</li>; <li><a href=""https://github.com/julia-actions/setup-julia/commit/b96a5725f5a28e33e247b8ebedb77663a8b9f960""><code>b96a572</code></a> Bump the version number to <code>2.0.0</code> in <code>package.json</code> and <code>package-lock.json</code> ...</li>; <li><a href=""https://github.com/julia-actions/setup-julia/commit/437a175294dd49c0c379f79067d8ba50c3f0f31b""><code>437a175</code></a> update to node20 (<a href=""https://redirect.github.com/julia-actions/setup-julia/issues/209"">#209</a>)</li>; <li><a href=""https://github.com/julia-actions/setup-julia/commit/e9d953d306cac42c94058f27c6564ec50d97d913""><code>e9d953d</code></a> Bump <code>@​types/node</code> from 20.11.1",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3544:6634,update,updates,6634,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3544,1,['update'],['updates']
Deployability,it looks like `validation/near_global_lat_lon/near_global_quarter_degree.jl` was updated elsewhere so we need to resolve merge conflicts,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1119057526:81,update,updated,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1119057526,1,['update'],['updated']
Deployability,"it's easier to analyze, visualize, and compare benchmark results. It's also easier to add new benchmarks. And we have automated multithreading benchmarks (we can approach MPI benchmarking in a similar manner). We used to use TimerOutputs.jl for benchmarking but really it's made more for profiling. This PR; 1. switches to using the `BenchmarkGroup` from BenchmarkTools.jl which makes it easy to compare benchmarks (e.g. check for CPU -> GPU performance and for performance relative to a base case).; 2. Dataframes.jl and PrettyTables.jl are used to visualize benchmarks, which are prettier, and you can output HTML tables that can be easily embedded into documentation.; 3. PkgBenchmark.jl allows use to compare benchmarks between two commits or branches (right now only via `benchmark_regression.jl`) which should make it easy to automate checking for performance regressions between PRs and the master branch. The next big step for benchmarking would be to create a Buildkite benchmarks pipeline that can be triggered via GitHub comments (this would involve looking into https://github.com/buildkite/trigger-pipeline-action). I started embedding HTML tables into the docs but it's going to be hard for users to parse tables full of numbers. Plots and bar graphs might be much more useful here, but this might require a Buildkite pipeline to generate the figures to embed into the documentation. So I'll leave this important step for a different PR. I also want to add a script that generates a better version of the benchmark plots in the README, but this might have to wait for a future PR. It's a little rough around the edges but I think it's polished enough to be considered for merging. Feels like benchmarks share a lot of boilerplate but might try to reduce it in a future PR. Some fun benchmarking facts:; * GPU models using WENO-5 are 250x faster than CPU models using WENO-5!; * TEOS-10 slows down your CPU model by ~30%, but only ~3% for GPU models!; * 2D Leith is most expensive closure",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1169:1033,pipeline,pipeline,1033,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1169,1,['pipeline'],['pipeline']
Deployability,"it's not a bad idea, but it's one more thing to the list... I'm happy either way... For breaking changes is crucial! I even tried to do it for the past view minor releases the other day. It help when you wanna figure out what changed when.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3174#issuecomment-1624223869:163,release,releases,163,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3174#issuecomment-1624223869,1,['release'],['releases']
Deployability,"iven abstract operation (2D flow speed) and then calculates its x-average by using both a ` WindowedSpatialverage` and `AveragedField`:. ```julia; using Oceananigans. grid = RegularRectilinearGrid(size=(64, 64), extent=(2π, 2π),; topology=(Periodic, Periodic, Flat)); model = NonhydrostaticModel(architecture = CPU(),; grid = grid,; buoyancy = nothing,; tracers = nothing,; closure = nothing,; ). using Oceananigans.Diagnostics: WindowedSpatialAverage; u, v, w = model.velocities; s = sqrt(u^2 + v^2). s_wind = WindowedSpatialAverage(ComputedField(s), dims=(1,)); s_avgf = AveragedField(s, dims=(1,)). simulation = Simulation(model, Δt=0.2, stop_time=4). simulation.output_writers[:fields] = NetCDFOutputWriter(model, (; s_wind, s_avgf),; schedule = TimeInterval(2),; filepath = ""2drot.nc"",; mode = ""c"",; verbose=true,; ); run!(simulation); ```. When I run this example I get:. ```; julia> include(""2drot.jl""); [ Info: Updating model auxiliary state before the first time step...; [ Info: ... updated in 283.373 μs.; [ Info: Writing to NetCDF: 2drot.nc...; [ Info: Computing NetCDF outputs for time index 1: [""s_wind"", ""s_avgf""]...; [ Info: Computing s_wind done: time=1.592 seconds; [ Info: Computing s_avgf done: time=10.888 seconds; [ Info: Writing done: time=12.480 seconds, size=14.5 KiB, Δsize=0.0 B; [ Info: Executing first time step...; [ Info: Writing to NetCDF: 2drot.nc...; [ Info: Computing NetCDF outputs for time index 2: [""s_wind"", ""s_avgf""]...; [ Info: Computing s_wind done: time=378.512 μs; [ Info: Computing s_avgf done: time=6.476 seconds; [ Info: Writing done: time=6.477 seconds, size=27.1 KiB, Δsize=0.0 B; [ Info: Writing to NetCDF: 2drot.nc...; [ Info: Computing NetCDF outputs for time index 3: [""s_wind"", ""s_avgf""]...; [ Info: Computing s_wind done: time=322.307 μs; [ Info: Computing s_avgf done: time=6.301 seconds; [ Info: Writing done: time=6.301 seconds, size=27.6 KiB, Δsize=0.0 B; [ Info: Simulation is stopping. Model time 4 seconds has hit or exceeded simulation s",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024:1144,update,updated,1144,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024,1,['update'],['updated']
Deployability,"jL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3JvemVtYV9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `30.00% <0.00%> (-4.10%)` | :arrow_down: |; | [src/Solvers/solve\_for\_pressure.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvc29sdmVfZm9yX3ByZXNzdXJlLmps) | `100.00% <0.00%> (ø)` | |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `61.53% <0.00%> (+2.56%)` | :arrow_up: |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `69.84% <0.00%> (+6.34%)` | :arrow_up: |; | [src/Architectures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/diff?src=pr&el=tree#diff-c3JjL0FyY2hpdGVjdHVyZXMuamw=) | `66.66% <0.00%> (+11.11%)` | :arrow_up: |; | [src/Fields/set!.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `67.64% <0.00%> (+32.35%)` | :arrow_up: |; | [src/Solvers/plan\_transforms.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvcGxhbl90cmFuc2Zvcm1zLmps) | `100.00% <0.00%> (+33.33%)` | :arrow_up: |; | ... and [3 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758?src=pr&el=footer). Last update [9b9e8e2...1c31ca5](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/758?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/758#issuecomment-632044290:3576,update,update,3576,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/758#issuecomment-632044290,1,['update'],['update']
Deployability,"jL2dyaWRzLmps) | `94.59% <ø> (ø)` | :arrow_up: |; | [src/turbulence\_closures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `0% <0%> (ø)` | |; | [src/model\_configuration.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL21vZGVsX2NvbmZpZ3VyYXRpb24uamw=) | `100% <100%> (ø)` | :arrow_up: |; | [src/fieldsets.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkc2V0cy5qbA==) | `100% <100%> (ø)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `90.9% <100%> (+0.43%)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `86.86% <100%> (+2.81%)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `12.5% <40%> (+12.5%)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `38.46% <50%> (+1.61%)` | :arrow_up: |; | ... and [3 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218?src=pr&el=footer). Last update [7e29af4...c863622](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/218#issuecomment-491127823:3347,update,update,3347,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/218#issuecomment-491127823,1,['update'],['update']
Deployability,"jl/pull/922/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/922?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #922 +/- ##; ==========================================; + Coverage 72.78% 72.79% +0.01% ; ==========================================; Files 192 192 ; Lines 5643 5649 +6 ; ==========================================; + Hits 4107 4112 +5 ; - Misses 1536 1537 +1 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/922?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/922/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.36% <ø> (ø)` | |; | [src/AbstractOperations/multiary\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/922/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9tdWx0aWFyeV9vcGVyYXRpb25zLmps) | `86.36% <100.00%> (ø)` | |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/922/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `85.71% <0.00%> (-3.18%)` | :arrow_down: |; | [src/AbstractOperations/binary\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/922/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9iaW5hcnlfb3BlcmF0aW9ucy5qbA==) | `96.29% <0.00%> (+0.14%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/922?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/922?src=pr&el=footer). Last update [01b2481...ba87adc](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/922?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/922#issuecomment-689771084:2252,update,update,2252,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/922#issuecomment-689771084,1,['update'],['update']
Deployability,"jl/pull/932/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvb25lX2RpbWVuc2lvbmFsX2RpZmZ1c2lvbi5qbA==) | `0.00% <ø> (ø)` | |; | [src/AbstractOperations/averages\_of\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9hdmVyYWdlc19vZl9vcGVyYXRpb25zLmps) | `66.66% <ø> (ø)` | |; | [src/Diagnostics/Diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL0RpYWdub3N0aWNzLmps) | `100.00% <ø> (ø)` | |; | [src/OutputWriters/OutputWriters.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `66.66% <ø> (ø)` | |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `93.61% <ø> (ø)` | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.25% <ø> (-0.08%)` | :arrow_down: |; | [...ests/ConvergenceTests/DoublyPeriodicTaylorGreen.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvRG91Ymx5UGVyaW9kaWNUYXlsb3JHcmVlbi5qbA==) | `0.00% <0.00%> (ø)` | |; | ... and [10 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932?src=pr&el=footer). Last update [3b45ce5...82d362a](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/932?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/932#issuecomment-691237401:3487,update,update,3487,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/932#issuecomment-691237401,1,['update'],['update']
Deployability,julia/packages/CUDA/Tl08O/src/CUDA.jl:25; Allocations: 2907 (Pool: 2898; Big: 9); GC: 0; Installing known registries into `~/.julia`; ┌ Warning: The active manifest file has dependencies that were resolved with a different julia version (1.9.2). Unexpected behavior may occur.; └ @ /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/Manifest.toml:0; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed Adapt ─────────────────────── v4.0.4; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed SentinelArrays ────────────── v1.4.5; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed Tables ────────────────────── v1.12.0; Installed FixedPointNumbers ─────────── v0.8.5; Installed GPUCompiler ───────────────── v0.26.7; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArraysCore ──────────── v1.4.3; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed StaticArrays ──────────────── v1.9.7; Installed TimerOutputs ──────────────── v0.5.24; Installed AbstractFFTs ──────────────── v1.5.0; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed OrderedCollections ────────── v1.6.3; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed UnsafeAtomicsLLVM ─────────── v0.1.5; Installed LaTeXStrings ──────────────── v1.3.1; Installed NVTX ──────────────────────── v0.3.4; Installed CEnum ─────────────────────── v0.5.0; Installed Random123 ─────────────────── v1.7.0; Insta,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472:1165,Install,Installed,1165,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472,1,['Install'],['Installed']
Deployability,"kernel function `fourier_tridiagonal_preconditioner_rhs!` is being called with the wrong arguments. For example:. ```julia; julia> f(x, y) = x + y; f (generic function with 1 method). julia> f(1); ERROR: MethodError: no method matching f(::Int64). Closest candidates are:; f(::Any, ::Any); @ Main REPL[1]:1. Stacktrace:; [1] top-level scope; @ REPL[2]:1; ```. The stacktrace shows. ```; [8] compute_preconditioner_rhs!(solver::Oceananigans.Solvers.FourierTridiagonalPoissonSolver{…}, rhs::Field{…}); @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/HPOLD/src/Solvers/conjugate_gradient_poisson_solver.jl:109; ```. let's look at that line:. https://github.com/CliMA/Oceananigans.jl/blob/6c40d7e225c2127051b2703b9c62a8b18260e3a5/src/Solvers/conjugate_gradient_poisson_solver.jl#L109-L110. This uses the Oceananigans utility `launch!` which launches the kernel `fourier_tridiagonal_preconditioner_rhs!` with the arguments `solver.storage, tridiagonal_dir, rhs`. However, looking at the function `fourier_tridiagonal_preconditioner_rhs` a few lines above. https://github.com/CliMA/Oceananigans.jl/blob/6c40d7e225c2127051b2703b9c62a8b18260e3a5/src/Solvers/conjugate_gradient_poisson_solver.jl#L93. we see that the function has 4 arguments, not 3. Hence the error. To summarize the analysis method, the key is to find the function that causes the error in the source code (`fourier_tridiagonal_preconditioner_rhs`) and then identify where it is called, and how it should be called. Here's an updated MWE from your nice one @liuchihl :. ```julia; using Oceananigans; using Oceananigans.Solvers: ConjugateGradientPoissonSolver, fft_poisson_solver. N = 2; x = y = (0, 1); z = [0, 0.2, 1]; grid = RectilinearGrid(size=(N, N, N); x, y, z, halo=(2, 2, 2), topology=(Bounded, Periodic, Bounded)); fft_solver = fft_poisson_solver(grid); pressure_solver = ConjugateGradientPoissonSolver(grid, preconditioner=fft_poisson_solver(grid)); model = NonhydrostaticModel(; grid, pressure_solver); set!(model, u=1); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3896#issuecomment-2453118576:1951,update,updated,1951,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3896#issuecomment-2453118576,1,['update'],['updated']
Deployability,l at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; eval_user_input at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:150; repl_backend_loop at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:246; #start_repl_backend#46 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:231; start_repl_backend at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:228; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #run_repl#59 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:389; run_repl at /cache/build/builder,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:6315,release,release-,6315,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,l scope at /home/alir/atdepth/Oceananigans.jl/particles_error.jl:37; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:925; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./client.jl:489; unknown function (ip: 0x7c00f54ff855); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:5240,release,release-,5240,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"l/698/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9Nb2RlbHMuamw=) | `100.00% <0.00%> (ø)` | |; | [src/TimeSteppers/velocity\_and\_tracer\_tendencies.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/698/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy92ZWxvY2l0eV9hbmRfdHJhY2VyX3RlbmRlbmNpZXMuamw=) | `100.00% <0.00%> (ø)` | |; | [...daryConditions/parameterized\_boundary\_condition.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/698/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9wYXJhbWV0ZXJpemVkX2JvdW5kYXJ5X2NvbmRpdGlvbi5qbA==) | `100.00% <0.00%> (ø)` | |; | [src/Forcing/parameterized\_forcing.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/698/diff?src=pr&el=tree#diff-c3JjL0ZvcmNpbmcvcGFyYW1ldGVyaXplZF9mb3JjaW5nLmps) | `100.00% <0.00%> (ø)` | |; | [src/BoundaryConditions/apply\_no\_penetration\_bcs.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/698/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9hcHBseV9ub19wZW5ldHJhdGlvbl9iY3Muamw=) | `58.33% <0.00%> (+1.19%)` | :arrow_up: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/698/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `92.30% <0.00%> (+3.41%)` | :arrow_up: |; | ... and [1 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/698/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/698?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/698?src=pr&el=footer). Last update [7a47b92...a20cf39](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/698?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/698#issuecomment-599273522:3802,update,update,3802,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/698#issuecomment-599273522,1,['update'],['update']
Deployability,"l/pull/452/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9jb25zdGFudF9pc290cm9waWNfZGlmZnVzaXZpdHkuamw=) | `100% <100%> (ø)` | |; | [...ures/verstappen\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/452/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy92ZXJzdGFwcGVuX2FuaXNvdHJvcGljX21pbmltdW1fZGlzc2lwYXRpb24uamw=) | `100% <100%> (ø)` | :arrow_up: |; | [...ulenceClosures/constant\_anisotropic\_diffusivity.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/452/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9jb25zdGFudF9hbmlzb3Ryb3BpY19kaWZmdXNpdml0eS5qbA==) | `100% <100%> (ø)` | |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/452/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `85.43% <100%> (+1.92%)` | :arrow_up: |; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/452/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `23.8% <25%> (-1.2%)` | :arrow_down: |; | [src/buoyancy.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/452/diff?src=pr&el=tree#diff-c3JjL2J1b3lhbmN5Lmps) | `77.41% <68.42%> (-10.09%)` | :arrow_down: |; | ... and [8 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/452/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/452?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/452?src=pr&el=footer). Last update [99b1a70...5d796b5](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/452?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/452#issuecomment-541188654:3823,update,update,3823,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/452#issuecomment-541188654,1,['update'],['update']
Deployability,"l/pull/592/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi90cmFjZXJfYWR2ZWN0aW9uX29wZXJhdG9ycy5qbA==) | `100.00% <ø> (ø)` | |; | [src/Advection/upwind\_biased\_advective\_fluxes.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/592/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi91cHdpbmRfYmlhc2VkX2FkdmVjdGl2ZV9mbHV4ZXMuamw=) | `100.00% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/592/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | |; | [src/Advection/weno\_nth\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/592/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi93ZW5vX250aF9vcmRlci5qbA==) | `53.19% <53.19%> (ø)` | |; | [src/Advection/centered\_fourth\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/592/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi9jZW50ZXJlZF9mb3VydGhfb3JkZXIuamw=) | `64.28% <57.14%> (ø)` | |; | [src/Advection/upwind\_biased\_third\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/592/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi91cHdpbmRfYmlhc2VkX3RoaXJkX29yZGVyLmps) | `66.66% <66.66%> (+1.66%)` | :arrow_up: |; | [src/Advection/weno\_fifth\_order.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/592/diff?src=pr&el=tree#diff-c3JjL0FkdmVjdGlvbi93ZW5vX2ZpZnRoX29yZGVyLmps) | `80.46% <80.46%> (ø)` | |; | ... and [69 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/592/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/592?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/592?src=pr&el=footer). Last update [d80be8c...7612a01](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/592?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-573978399:3526,update,update,3526,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-573978399,1,['update'],['update']
Deployability,"l/pull/933/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy91bmFyeV9vcGVyYXRpb25zLmps) | `75.86% <0.00%> (-10.81%)` | :arrow_down: |; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/933/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `53.84% <0.00%> (-5.13%)` | :arrow_down: |; | [src/AbstractOperations/derivatives.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/933/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9kZXJpdmF0aXZlcy5qbA==) | `90.00% <0.00%> (-3.75%)` | :arrow_down: |; | [src/Fields/function\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/933/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9mdW5jdGlvbl9maWVsZC5qbA==) | `0.00% <0.00%> (ø)` | |; | [src/Fields/computed\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/933/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9jb21wdXRlZF9maWVsZC5qbA==) | `0.00% <0.00%> (ø)` | |; | [src/AbstractOperations/averages\_of\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/933/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9hdmVyYWdlc19vZl9vcGVyYXRpb25zLmps) | `0.00% <0.00%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/933/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `82.35% <0.00%> (+1.10%)` | :arrow_up: |; | ... and [1 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/933/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/933?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/933?src=pr&el=footer). Last update [e9583ce...19cd67a](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/933?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/933#issuecomment-691108830:3622,update,update,3622,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/933#issuecomment-691108830,1,['update'],['update']
Deployability,"l=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/54d8aa1ee1218ffed70232a277cc8cff5b72dc5b?src=pr&el=desc) will **decrease** coverage by `0.07%`.; > The diff coverage is `0%`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/303/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/303?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #303 +/- ##; ==========================================; - Coverage 71.8% 71.72% -0.08% ; ==========================================; Files 24 24 ; Lines 1000 1001 +1 ; ==========================================; Hits 718 718 ; - Misses 282 283 +1; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/303?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/303/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <ø> (ø)` | :arrow_up: |; | [src/fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/303/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkcy5qbA==) | `58.33% <0%> (-1.67%)` | :arrow_down: |; | [src/time\_step\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/303/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcF91dGlscy5qbA==) | `0% <0%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/303?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/303?src=pr&el=footer). Last update [54d8aa1...4ac5bb2](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/303?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/303#issuecomment-506990525:1995,update,update,1995,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/303#issuecomment-506990525,1,['update'],['update']
Deployability,"lZF9maWVsZC5qbA==) | `94.44% <ø> (ø)` | |; | [src/Fields/function\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/931/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9mdW5jdGlvbl9maWVsZC5qbA==) | `23.07% <0.00%> (ø)` | |; | [src/AbstractOperations/unary\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/931/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy91bmFyeV9vcGVyYXRpb25zLmps) | `76.47% <50.00%> (-10.20%)` | :arrow_down: |; | [src/AbstractOperations/averages\_of\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/931/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9hdmVyYWdlc19vZl9vcGVyYXRpb25zLmps) | `66.66% <66.66%> (ø)` | |; | [src/AbstractOperations/derivatives.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/931/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9kZXJpdmF0aXZlcy5qbA==) | `88.88% <75.00%> (-4.87%)` | :arrow_down: |; | [src/AbstractOperations/binary\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/931/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9iaW5hcnlfb3BlcmF0aW9ucy5qbA==) | `89.47% <76.92%> (-6.83%)` | :arrow_down: |; | [src/Fields/computed\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/931/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9jb21wdXRlZF9maWVsZC5qbA==) | `77.77% <77.77%> (ø)` | |; | ... and [9 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/931/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/931?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/931?src=pr&el=footer). Last update [e9583ce...ba8fc61](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/931?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/931#issuecomment-690822059:3551,update,update,3551,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/931#issuecomment-690822059,1,['update'],['update']
Deployability,"l](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/805/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2RpYWdub3N0aWNzX2tlcm5lbHMuamw=) | `0.00% <0.00%> (-100.00%)` | :arrow_down: |; | [src/Fields/set!.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/805/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `36.36% <0.00%> (+1.06%)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/805/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100.00% <ø> (ø)` | |; | [src/Solvers/Solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/805/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvU29sdmVycy5qbA==) | `100.00% <ø> (ø)` | |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/805/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `75.00% <ø> (ø)` | |; | [src/TurbulenceClosures/TurbulenceClosures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/805/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9UdXJidWxlbmNlQ2xvc3VyZXMuamw=) | `36.84% <ø> (ø)` | |; | [src/TurbulenceClosures/turbulence\_closure\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/805/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfdXRpbHMuamw=) | `75.00% <0.00%> (-25.00%)` | :arrow_down: |; | ... and [80 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/805/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/805?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/805?src=pr&el=footer). Last update [ecc0fda...8a9755b](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/805?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/805#issuecomment-660540378:3494,update,update,3494,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/805#issuecomment-660540378,1,['update'],['update']
Deployability,"l](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/407/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100% <100%> (ø)` | :arrow_up: |; | [src/turbulence\_closures/TurbulenceClosures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/407/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvVHVyYnVsZW5jZUNsb3N1cmVzLmps) | `100% <100%> (+43.75%)` | :arrow_up: |; | [src/turbulence\_closures/smagorinsky.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/407/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvc21hZ29yaW5za3kuamw=) | `67.79% <100%> (ø)` | :arrow_up: |; | [...bulence\_closures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/407/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdHVyYnVsZW5jZV9jbG9zdXJlX2RpYWdub3N0aWNzLmps) | `20% <20%> (ø)` | |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/407/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `70.21% <25%> (+5.76%)` | :arrow_up: |; | [...rc/turbulence\_closures/turbulence\_closure\_utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/407/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdHVyYnVsZW5jZV9jbG9zdXJlX3V0aWxzLmps) | `62.5% <62.5%> (ø)` | |; | ... and [4 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/407/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/407?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/407?src=pr&el=footer). Last update [dd122e9...17e7f14](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/407?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/407#issuecomment-531510704:3806,update,update,3806,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/407#issuecomment-531510704,1,['update'],['update']
Deployability,lang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #run_repl#59 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:389; run_repl at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:375; jfptr_run_repl_91805.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #1013 at ./client.jl:432; jfptr_YY.1013_82772.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; jl_f__call_latest at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/builtins.c:812; #invokelatest#2 at ./essentials.jl:892 [inlined]; invokelatest at ./essentials.jl:889 [inlined]; run_main_repl at ./client.jl:416; exec_options at ./client.jl:333; _start at ./client.jl:552; jfptr__start_82798.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; true_main at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/jlapi.c:582; jl_repl_entrypoint at /cache/bu,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:8009,release,release-,8009,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"lang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; jl_f__call_latest at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/builtins.c:812; #invokelatest#2 at ./essentials.jl:892 [inlined]; invokelatest at ./essentials.jl:889 [inlined]; run_main_repl at ./client.jl:416; exec_options at ./client.jl:333; _start at ./client.jl:552; jfptr__start_82798.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; true_main at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/jlapi.c:582; jl_repl_entrypoint at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/jlapi.c:731; main at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/cli/loader_exe.c:58; unknown function (ip: 0x7c00f758ce07); __libc_start_main at /usr/lib/libc.so.6 (unknown line); unknown function (ip: 0x4010b8); Allocations: 67298744 (Pool: 67235612; Big: 63132); GC: 66; fish: Job 1, 'julia --project' terminated by signal SIGSEGV (Address boundary error); ```. GPU illegal memory access:. ```; [ Info: Skipping precompilation since __precompile__(false). Importing Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09].; [ Info: Iteration 1...; [ Info: Iteration 2...; [ Info: Iteration 3...; [ Info: Iteration 4...; [ Info: Iteration 5...; [ Info: Iteration 6...; [ Info: Iteration 7...; [ Info: Iteration 8...; [ Info: Iteration 9...; [ Info: Iteration 10...; [ Info: Iteration 11...; [ Info: Iteration 12...; [ Info: Iteration 1",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:8914,release,release-,8914,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,"lc3RzL0NvbnZlcmdlbmNlVGVzdHMvYW5hbHlzaXMuamw=) | | |; | [test/test\_verification.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ZlcmlmaWNhdGlvbi5qbA==) | | |; | [...nvergence\_tests/ConvergenceTests/file\_wrangling.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvZmlsZV93cmFuZ2xpbmcuamw=) | | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [...\_tests/ConvergenceTests/TwoDimensionalDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvVHdvRGltZW5zaW9uYWxEaWZmdXNpb24uamw=) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | ... and [53 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797?src=pr&el=footer). Last update [162159d...a538a52](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657830968:3443,update,update,3443,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657830968,1,['update'],['update']
Deployability,"lcy92ZWxvY2l0eV90cmFjZXJfZ3JhZGllbnRzLmps) | `69.72% <ø> (ø)` | |; | [src/TurbulenceClosures/TurbulenceClosures.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/412/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9UdXJidWxlbmNlQ2xvc3VyZXMuamw=) | `100% <ø> (ø)` | |; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/412/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `25% <ø> (ø)` | |; | [src/TurbulenceClosures/closure\_operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/412/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9jbG9zdXJlX29wZXJhdG9ycy5qbA==) | `64.44% <0%> (ø)` | |; | [src/clock.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/412/diff?src=pr&el=tree#diff-c3JjL2Nsb2NrLmps) | `100% <100%> (ø)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/412/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `75% <100%> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/412/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `74.12% <100%> (-0.18%)` | :arrow_down: |; | ... and [11 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/412/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/412?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/412?src=pr&el=footer). Last update [a9e34a7...7fe8a47](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/412?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-532091518:3651,update,update,3651,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-532091518,1,['update'],['update']
Deployability,"ld not even look at ZarrNative.jl, since it is still very young and rather a prototype.; > ; > I would be very happy to discuss the issues further, maybe in a call? Would also be interested to learn about your project which seems to be very cool. Thanks so much for working on NetCDF.jl! I didn't mean to sound ungrateful about NetCDF.jl's performance. We were just debating which package to use. With https://github.com/JuliaGeo/NetCDF.jl/issues/87 fixed, I think we'll be happy for a long time. The `compress=9` bug explains why the IO was slow. @glwagner has suggested that for a project of our scale we'd want to help and contribute to the packages we use. We definitely want to stick with NetCDF as it's the _de facto_ standard in the climate, atmospheric, and ocean sciences. A discussion might be helpful down the line. With faster IO I think we're happy now and we're still figuring how to do IO long-term. > My feeling is that if you want to write NetCDF files through the HDF API that it will be more work, though I never tried.; > ; > Regarding NetCDF.jl & NCDatasets.jl, I feel that the statements in the OP that NetCDF.jl is not being maintained and that NCDatasets.jl grew out of bugs not being fixed is are a bit of a misrepresentation.; > ; > For installations and dependency reduction, hopefully the new HDF5 release, which will for the first time support cross compilation, will lead to HDF5.jl switching to BinaryBuilder, which will allow NetCDF.jl to do the same. Also with the Clang.jl improvements we can regenerate the bindings. I still hope that NetCDFand NCDatasets will be able to share more code in the future, and be mainly about exposing different user facing APIs. Thanks for the feedback! My thinking was the same, why use HDF5.jl when NetCDF.jl and NCDatasets.jl exist since we want NetCDF output in the end. Sorry if I misrepresented the two packages, it was just what I gleaned by skimming a few issues and PRs. Will definitely keep a look out for new HDF5 releases.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/145#issuecomment-476298847:2857,install,installations,2857,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/145#issuecomment-476298847,3,"['install', 'release']","['installations', 'release', 'releases']"
Deployability,lder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; eval_user_input at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:150; repl_backend_loop at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:246; #start_repl_backend#46 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:231; start_repl_backend at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:228; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #run_repl#59 at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:389; run_repl at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/usr/share/julia/stdlib/v1.10/REPL/src/REPL.jl:375; jfptr_run_repl_91805.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #1013 at ./client.jl:432; jfptr_YY.1013_82772.1 at /home/alir/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; jl_f__call_latest at /cache/build/b,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:7192,release,release-,7192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,lease-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./Base.jl:495; jfptr_include_46447.1 at /orcd/data/raffaele/001/glwagner/Software/julia-1.10.5/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; exec_options at ./client.jl:318; _start at ./client.jl:552; jfptr__start_82798.1 at /orcd/data/raffaele/001/glwagner/Software/julia-1.10.5/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; true_main at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/jlapi.c:582,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:5121,release,release-,5121,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,1,['release'],['release-']
Deployability,let's merge this and then register a new patch release?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2155#issuecomment-1016927942:41,patch,patch,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2155#issuecomment-1016927942,2,"['patch', 'release']","['patch', 'release']"
Deployability,"le{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:Nx, :Ny, :Nz, :Lx, :Ly, :Lz, :constant_wind_stress, :surface_buoyancy_flux, :amplitude, :wavelength, :wavenumber, :frequency, :Uˢ, :N², :N2, :Qᵘ, :u_star, :La_t, :Qʰ, :Qᵇ, :initial_mixed_layer_depth, :w_star, :Λ, :sponge_depth, :sponge_bottom, :sponge_top, :σ), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Vararg{Float64, 6}}}, typeof(sponge_v), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity5)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:Nx, :Ny, :Nz, :Lx, :Ly, :Lz, :constant_wind_stress, :surface_buoyancy_flux, :amplitude, :wavelength, :wavenumber, :frequency, :Uˢ, :N², :N2, :Qᵘ, :u_star, :La_t, :Qʰ, :Qᵇ, :initial_mixed_layer_depth, :w_star, :Λ, :sponge_depth, :sponge_bottom, :sponge_top, :σ), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Vararg{Float64, 6}}}, typeof(sponge_w), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:Nx, :Ny, :Nz, :Lx, :Ly, :Lz, :constant_wind_stress, :surface_buoyancy_flux, :amplitude, :wavelength, :wavenumber, :frequency, :Uˢ, :N², :N2, :Qᵘ, :u_star, :La_t, :Qʰ, :Qᵇ, :initial_mixed_layer_depth, :w_star, :Λ, :sponge_depth, :sponge_bottom, :sponge_top, :σ), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Vararg{Float64, 6}}}, typeof(sponge_b), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}}}, WENO{3, Float64, Nothing, Nothing, Nothing, true, Nothi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2032573594:16452,Continuous,ContinuousForcing,16452,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2032573594,1,['Continuous'],['ContinuousForcing']
Deployability,"lia -O0 --color=yes --project -e 'using Pkg; Pkg.precompile()'; >   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.status()'; >   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.test()'; >   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using MPI; MPI.install_mpiexecjl()'; >   | --2021-07-31 21:29:43-- https://julialang-s3.julialang.org/bin/linux/x64/1.6/julia-1.6.1-linux-x86_64.tar.gz; >   | Resolving julialang-s3.julialang.org (julialang-s3.julialang.org)... 199.232.38.49, 2a04:4e42:46::561; >   | Connecting to julialang-s3.julialang.org (julialang-s3.julialang.org)\|199.232.38.49\|:443... connected.; >   | HTTP request sent, awaiting response... 304 Not Modified; >   | File ‘/storage7/buildkite-agent/julia-1.6.1-linux-x86_64.tar.gz’ not modified on server. Omitting download.; >   |  ; >   | Downloading artifact: MPICH; >   | Downloading artifact: MPICH; >   | ERROR: Unable to automatically install 'MPICH' from '/storage7/buildkite-agent/.julia-3575/packages/MPICH_jll/6N1Sn/Artifacts.toml'; >   | Stacktrace:; >   | [1] error(s::String); >   | @ Base ./error.jl:33; >   | [2] ensure_artifact_installed(name::String, meta::Dict{String, Any}, artifacts_toml::String; platform::Base.BinaryPlatforms.Platform, verbose::Bool, quiet_download::Bool, io::Base.TTY); >   | @ Pkg.Artifacts /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Artifacts.jl:443; >   | [3] ensure_all_artifacts_installed(artifacts_toml::String; platform::Base.BinaryPlatforms.Platform, pkg_uuid::Nothing, include_lazy::Bool, verbose::Bool, quiet_download::Bool, io::Base.TTY); >   | @ Pkg.Artifacts /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Artifacts.jl:508; >   | [4] download_artifacts(ctx::Pkg.Types.Context, pkg_roots::Vector{String}; platform::Base.BinaryPlatforms.Platform, verbose::Bool, io::Base.TTY); >   | @ Pkg.O",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1915#issuecomment-890522628:2433,install,install,2433,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1915#issuecomment-890522628,1,['install'],['install']
Deployability,lia/registries/General.toml`; Resolving package versions...; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Adapt ─────────────────────── v4.0.4; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed SentinelArrays ────────────── v1.4.5; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed FixedPointNumbers ─────────── v0.8.5; Installed Tables ────────────────────── v1.12.0; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed GPUCompiler ───────────────── v0.26.7; Installed StaticArraysCore ──────────── v1.4.3; Installed TimerOutputs ──────────────── v0.5.24; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed AbstractFFTs ──────────────── v1.5.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArrays ──────────────── v1.9.7; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed LaTeXStrings ──────────────── v1.3.1; Installed OrderedCollections ────────── v1.6.3; Installed NVTX ──────────────────────── v0.3.4; Installed UnsafeAtomicsLLVM ─────────── v0.1.5; Installed CEnum ─────────────────────── v0.5.0; Installed InvertedIndices ───────────── v1.3.0; Installed Reexport ──────────────────── v1.2.2; Installed JuliaNVTXCallbacks_jll ────── v0.2.1+0; Installed BFloat16s ─────────────────── v0.5.0; Installed MacroTools ────────────────── v0.5.13; Installed DataStructures ────────────── v0.18.20; Installed Colors ────────────────────── v0.12.11; ,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900:1584,Install,Installed,1584,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2246012900,1,['Install'],['Installed']
Deployability,"limate-machine/Oceananigans.jl/pull/519?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #519 +/- ##; ==========================================; - Coverage 64.61% 64.15% -0.47% ; ==========================================; Files 68 69 +1 ; Lines 1950 1964 +14 ; ==========================================; Hits 1260 1260 ; - Misses 690 704 +14; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/519?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Oceananigans.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/519/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `75% <ø> (ø)` | :arrow_up: |; | [src/SurfaceWaves.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/519/diff?src=pr&el=tree#diff-c3JjL1N1cmZhY2VXYXZlcy5qbA==) | `0% <0%> (ø)` | |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/519/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `84.37% <100%> (ø)` | :arrow_up: |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/519/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `74.35% <100%> (ø)` | :arrow_up: |; | [src/TimeSteppers/kernels.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/519/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9rZXJuZWxzLmps) | `60.39% <100%> (ø)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/519?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/519?src=pr&el=footer). Last update [08294f7...972fbd1](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/519?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/519#issuecomment-548595850:2386,update,update,2386,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/519#issuecomment-548595850,1,['update'],['update']
Deployability,"limate-machine/Oceananigans.jl/pull/584?src=pr&el=h1) Report; > Merging [#584](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=desc) into [master](https://codecov.io/gh/climate-machine/Oceananigans.jl/commit/588890004e69cfc7db10472b12a9840b8a9ad7b6?src=pr&el=desc) will **increase** coverage by `0.65%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584/graphs/tree.svg?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #584 +/- ##; ==========================================; + Coverage 72.17% 72.82% +0.65% ; ==========================================; Files 70 70 ; Lines 2016 2050 +34 ; ==========================================; + Hits 1455 1493 +38 ; + Misses 561 557 -4; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `62.5% <0%> (+1.44%)` | :arrow_up: |; | [src/logger.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584/diff?src=pr&el=tree#diff-c3JjL2xvZ2dlci5qbA==) | `59.25% <0%> (+59.25%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=footer). Last update [5888900...b7cae54](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/584?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/584#issuecomment-568103734:1845,update,update,1845,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/584#issuecomment-568103734,1,['update'],['update']
Deployability,lined]; cpu__advect_particles! at ./none:0; __thread_run at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:144; unknown function (ip: 0x7c0090512182); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; __run at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:111; unknown function (ip: 0x7c009050feb3); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #_#16 at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:46; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/builtins.c:768; Kernel at /home/alir/.julia/packages/KernelAbstractions/491pi/src/cpu.jl:39; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; advect_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Models/LagrangianParticleTracking/lagrangian_particle_advection.jl:193; step_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Models/LagrangianParticleTracking/LagrangianParticleTracking.jl:143 [inlined]; step_lagrangian_particles! at /home/alir/atdepth/Oceananigans.jl/src/Models/HydrostaticFreeSurfaceModels/HydrostaticFreeSurfaceModels.jl:107 [inlined]; #time_step!#8 at /home/alir/atdepth/Oceananigans.jl/src/TimeSteppers/quasi_adams_bashforth_2.jl:124; time_step! at /home,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3852:2913,release,release-,2913,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3852,1,['release'],['release-']
Deployability,lined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; jl_apply at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/julia.h:1982 [inlined]; do_call at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:126; eval_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:223; eval_stmt_value at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:174 [inlined]; eval_body at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:617; jl_interpret_toplevel_thunk at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/interpreter.c:775; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:934; jl_toplevel_eval_flex at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:877; ijl_toplevel_eval_in at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/toplevel.c:985; eval at ./boot.jl:385 [inlined]; include_string at ./loading.jl:2076; _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; _include at ./loading.jl:2136; include at ./Base.jl:495; jfptr_include_46447.1 at /orcd/data/raffaele/001/glwagner/Software/julia-1.10.5/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; exec_options at ./client.jl:318; _start at ./client.jl:552; jfptr__start_82798.1 at /orcd/data/raffaele/001/glwagner/Software/julia-1.10.5/lib/julia/sys.so (unknown line); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /ca,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:4845,release,release-,4845,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,1,['release'],['release-']
Deployability,"ll/1047/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | `0.00% <0.00%> (ø)` | |; | [...ests/ConvergenceTests/DoublyPeriodicTaylorGreen.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvRG91Ymx5UGVyaW9kaWNUYXlsb3JHcmVlbi5qbA==) | `0.00% <0.00%> (ø)` | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | `0.00% <0.00%> (ø)` | |; | [test/test\_coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | `85.33% <0.00%> (ø)` | |; | [test/test\_time\_stepping\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmdfYmNzLmps) | `98.21% <0.00%> (ø)` | |; | [docs/bibliography.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-ZG9jcy9iaWJsaW9ncmFwaHkuamw=) | `0.00% <0.00%> (ø)` | |; | [...ergence\_tests/ConvergenceTests/ConvergenceTests.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvQ29udmVyZ2VuY2VUZXN0cy5qbA==) | `0.00% <0.00%> (ø)` | |; | ... and [95 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047?src=pr&el=footer). Last update [d100853...116f81c](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1047#issuecomment-707893132:3519,update,update,3519,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1047#issuecomment-707893132,1,['update'],['update']
Deployability,"loat64, Float64, OffsetArrays.OffsetVector{Float64, CUDA.CuDeviceVector{Float64, 1}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CUDA.CuDeviceVector{Float64, 1}}, Nothing}, Float64}}}}}, NamedTuple{(:u, :v, :w, :b, :τ1, :τ2), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:σ, :u₀, :α), Tuple{Int64, Int64, Float64}}, typeof(sponge_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:σ, :u₀, :α), Tuple{Int64, Int64, Float64}}, typeof(sponge_v), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:σ, :u₀, :α), Tuple{Int64, Int64, Float64}}, typeof(sponge_w), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity5)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:σ, :u₀, :α), Tuple{Int64, Int64, Float64}}, typeof(sponge_b), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing)}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}; name::String, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/Ey3w2/src/compiler/execution.jl:299; [6] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/Ey3w2/src/compiler/execution.jl:102 [inlined]; [7] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8, 6)}, type",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2869:8881,Continuous,ContinuousForcing,8881,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869,1,['Continuous'],['ContinuousForcing']
Deployability,"loat64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, Int64, NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}}) resulted in invalid LLVM IR ; Reason: unsupported call to the Julia runtime (call to jl_f_tuple); ```. Might have something to do with the new tuple/named tuple syntax but I thought Julia 1.4 -> 1.5 wasn't supposed to introduce any breaking changes? https://julialang.org/blog/2020/08/julia-1.5-highlights/#implicit_keyword_argument_values. # Julia 1.4.2. ```; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.4.2 (2020-05-23); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> using Oceananigans; grid = RegularCartesianGrid(size=(16, 16, 16), extent=(1, 1, 1)); model = IncompressibleModel(architecture=GPU(), grid=grid); time_step!(model, 1); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; CUDA-enabled GPU(s) detected:; CUDA.CuDevice(0); CUDA.CuDevice(1); CUDA.CuDevice(2); CUDA.CuDevice(3); ┌ Warning: Performing scalar operations on GPU arrays: This is very slow, consider disallowing these operations with `allowscalar(false)`; └ @ GPUArrays ~/.julia/packages/GPUArrays/4W5rW/src/host/indexing.jl:43; ```. # Julia 1.5.0. ```; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.5.0 (2020-08-01); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> using Oceananigans; grid = RegularCartesianGrid(size=(16, 16, 16), extent=(1, 1, 1)); model = IncompressibleModel(arc",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/828:1768,release,release,1768,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/828,1,['release'],['release']
Deployability,"loat64},LinearTarget{:x,Float64}},Nothing,Tuple{Int64},Tuple{typeof(identity)}},ContinuousForcing{Cell,Face,Cell,Nothing,Relaxation{Float64,GaussianMask{:y,Float64},LinearTarget{:y,Float64}},Nothing,Tuple{Int64},Tuple{typeof(identity)}},ContinuousForcing{Cell,Cell,Face,Nothing,Relaxation{Float64,GaussianMask{:z,Float64},Irrational{:π}},Nothing,Tuple{Int64},Tuple{typeof(identity)}},typeof(Oceananigans.Forcings.zeroforcing),typeof(Oceananigans.Forcings.zeroforcing)}}, OffsetArray{Float64,3,CuDeviceArray{Float64,3,CUDA.AS.Global}}, NamedTuple{(:time, :iteration, :stage),Tuple{Float64,Int64,Int64}}) resulted in invalid LLVM IR; Reason: unsupported call to the Julia runtime (call to jl_f_getfield); Stacktrace:; [1] getindex at namedtuple.jl:94; [2] field_arguments at /archive1/glwagner/Projects/Oceananigans.jl/src/Forcings/continuous_forcing.jl:118; [3] forcing_func_arguments at /archive1/glwagner/Projects/Oceananigans.jl/src/Forcings/continuous_forcing.jl:139; [4] ContinuousForcing at /archive1/glwagner/Projects/Oceananigans.jl/src/Forcings/continuous_forcing.jl:156; [5] u_velocity_tendency at /archive1/glwagner/Projects/Oceananigans.jl/src/TimeSteppers/velocity_and_tracer_tendencies.jl:56; [6] macro expansion at /archive1/glwagner/Projects/Oceananigans.jl/src/TimeSteppers/calculate_tendencies.jl:124; [7] gpu_calculate_Gu! at /data5/glwagner/.julia/packages/KernelAbstractions/QQ583/src/macros.jl:80; [8] overdub at /data5/glwagner/.julia/packages/Cassette/158rp/src/overdub.jl:0; Reason: unsupported dynamic function invocation (call to getindex); ```. What's happening? The error comes from `continuous_forcing.jl`:. https://github.com/CliMA/Oceananigans.jl/blob/d0ed71db9a294c344a1fa76f558767f57456d14b/src/Forcings/continuous_forcing.jl#L118-L119. the difference between the above two cases is that, in the first, `model_fields` contains only velocities and tracers. In the second, however, `model_fields` also contains `diffusivities`. For `AnisotropicMinimumDissipation`, `dif",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1059:4152,Continuous,ContinuousForcing,4152,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1059,1,['Continuous'],['ContinuousForcing']
Deployability,"lon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸᶻ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity4)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Center, Face, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Flo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165:16644,Continuous,ContinuousBoundaryFunction,16644,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"lon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity1)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.identity2)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(τᶻʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.identity3)}}}, Nothing, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}}}, NamedTuple{(:b,), Tuple{Field{Center, Cent",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165:19056,Continuous,ContinuousBoundaryFunction,19056,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,looking at the benchmarks in #2335 it seems that it does. But only for some configurations,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2754#issuecomment-1261412615:76,configurat,configurations,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2754#issuecomment-1261412615,1,['configurat'],['configurations']
Deployability,"ltiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}}, Tuple{CPU, CPU}}, Nothing, MultiRegionObject{Tuple{Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}, Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}}, Tuple{CPU, CPU}}}}}, NamedTuple{(:u, :v, :w, :b), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity5)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_v), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_w), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_b), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}}}, WENO{3, Float64, Nothing, Nothing, NTuple{4, OffsetArrays.OffsetVector{Tuple{Float64, Float64, Float64}, Vector{Tuple{Float64, Float64, Float64}}}}, Nothing, true, Nothing, WENO{2,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:53224,Continuous,ContinuousForcing,53224,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524,2,['Continuous'],['ContinuousForcing']
Deployability,"lux\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/870/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9hcHBseV9mbHV4X2Jjcy5qbA==) | `21.21% <0.00%> (-34.35%)` | :arrow_down: |; | [src/Coriolis/f\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/870/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL2ZfcGxhbmUuamw=) | `56.00% <0.00%> (-30.67%)` | :arrow_down: |; | [src/Utils/pretty\_time.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/870/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ByZXR0eV90aW1lLmps) | `75.00% <0.00%> (-21.56%)` | :arrow_down: |; | [src/Grids/Grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/870/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `71.42% <0.00%> (-20.24%)` | :arrow_down: |; | [src/Solvers/index\_permutations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/870/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvaW5kZXhfcGVybXV0YXRpb25zLmps) | `0.00% <0.00%> (-20.00%)` | :arrow_down: |; | [src/Buoyancy/Buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/870/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L0J1b3lhbmN5Lmps) | `63.15% <0.00%> (-16.85%)` | :arrow_down: |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/870/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `65.62% <0.00%> (-16.73%)` | :arrow_down: |; | ... and [172 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/870/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/870?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/870?src=pr&el=footer). Last update [17f8cc6...19f23f1](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/870?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/870#issuecomment-681312161:3696,update,update,3696,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/870#issuecomment-681312161,1,['update'],['update']
Deployability,"ly blow up if the mean is not zero \(which means there is no solution\). However, dealing with round-off errors is always tricky, especially in this case where fast convergence leads to a rapid decrease in the ""signal-to-error ratio"". . ```Python; import numpy as np; import matplotlib.pyplot as plt. def gram_schmidt(X, row_vecs=True, norm = True):; if not row_vecs:; X = X.T; Y = X[0:1,:].copy(); for i in range(1, X.shape[0]):; proj = np.diag((X[i,:].dot(Y.T)/np.linalg.norm(Y,axis=1)**2).flat).dot(Y); Y = np.vstack((Y, X[i,:] - proj.sum(0))); if norm:; Y = np.diag(1/np.linalg.norm(Y,axis=1)).dot(Y); if row_vecs:; return Y; else:; return Y.T. def cg_solve(A,b,N):. x = np.zeros_like(b). r = b - A.dot(x). p = r.copy(). rs = []. for i in range(N):. rs.append(np.linalg.norm(r)). Ap = A.dot(p). alpha = np.dot(p,r)/np.dot(p,Ap); x = x + alpha*p. # r = b - A.dot(x) # a numerically more stable version; r -= alpha * Ap. beta = -np.dot(r,Ap)/np.dot(p,Ap); p = r + beta*p. return np.array(rs). def main():; N = 256. # create a positive definite diagonal matrix; matrix_D = np.diag(np.random.rand(N) + 1.0). # create a vector; b0 = np.random.normal(size=N); b0 /= np.linalg.norm(b0). # set one eigenvalue value to zero and update the vector; matrix_D[0, 0] = 0.0; b0[0] = 0.0. # create an orthogonal matrix; matrix_q = gram_schmidt(np.random.normal(size=(N, N))). # create a positive semi-definite symmetric matrix; matrix_A = np.dot(matrix_q, np.dot(matrix_D, matrix_q.T)); b = np.dot(matrix_q, b0). # add a random perturbation; # b += 1e-5 * np.random.normal(size=N). # return the residuals at every iteration; rs = cg_solve(matrix_A, b, N=64). # plot residuals as a function of iterations; fig, ax = plt.subplots(). ax.plot(rs, marker='o'). ax.set_yscale('log'). ax.set_xlabel('Number of Iterations'); ax.set_ylabel('Residual'). plt.savefig('cg_residual.png'). if __name__ == '__main__':; main(); ```; ![cg_residual](https://github.com/user-attachments/assets/2091ea48-2e34-41f6-93c2-a5f0ee7f0b75)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3802#issuecomment-2397713089:2254,update,update,2254,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3802#issuecomment-2397713089,1,['update'],['update']
Deployability,"ly, and also for integration into `AbstractOperations`. One way to accomplish this is to define a new field that looks something like. ```julia; struct ReducedField{X, Y, Z, A, G, O, D, I} <: AbstractLocatedField{X, Y, Z, G}; data :: A; grid :: G; reduction! :: O; dims :: D; input :: I; end; ```. here `data` and `grid` are an array and grid similar to an ordinary `Field`, except that `data` is reduced along the tuple of dimensions in `dims`. The `input` is the 3D field / OffsetArray on which the reduction is performed. The function `reduction` performs the reduction; eg. ```julia; U = ReducedField(mean, model.velocities.u, dims=(1, 2)); ```. Returns an object `U` that represents the average of `model.velocities.u` over dims `(1, 2)` (x and y). We can also write wrappers / translators that allow dimensions to be referenced by name rather than number (integration with DimensionalData.jl would help in this respect). . Computing a reduction would look something like. ```julia; function compute!(reduced); zero_halo_regions!(parent(reduced.data), model.grid); reduced.reduction!(parent(reduced.data), parent(reduced.input), dims=reduced.dims); return nothing; end; ```. Note that `mean` requires a special implementation since we have to use `sum!` followed by normalization. But this is not too onerous; we can dispatch on that scenario, and other scenarios that require special implementation not covered by the generic version above. We can then integrate `ReducedField`s into abstract operations so we can calculate things like. ```julia; u, v, w = model.velocities. U = ReducedField(mean, u, dims=(1, 2)); V = ReducedField(mean, v, dims=(1, 2)). turbulent_kinetic_energy = @at (Cell, Cell, Cell) ( (u - U)^2 + (v - V)^2 + w^2 ) / 2; ```. This is a little tricky and requires the analysis of an operation tree to deduce which operations must be pre-computed. But this can be done in the constructor for `Computation` and is probably not too difficult (also, the topic of another issue).",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/525:1607,integrat,integrate,1607,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/525,1,['integrat'],['integrate']
Deployability,"machine/Oceananigans.jl/pull/418?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #418 +/- ##; ==========================================; + Coverage 73.28% 76.87% +3.59% ; ==========================================; Files 25 25 ; Lines 1426 1427 +1 ; ==========================================; + Hits 1045 1097 +52 ; + Misses 381 330 -51; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/418?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/boundary\_conditions.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/418/diff?src=pr&el=tree#diff-c3JjL2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `86.88% <0%> (+1.63%)` | :arrow_up: |; | [src/utils.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/418/diff?src=pr&el=tree#diff-c3JjL3V0aWxzLmps) | `85.57% <0%> (+12.76%)` | :arrow_up: |; | [...c/turbulence\_closures/velocity\_tracer\_gradients.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/418/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdmVsb2NpdHlfdHJhY2VyX2dyYWRpZW50cy5qbA==) | `86.23% <0%> (+16.51%)` | :arrow_up: |; | [...ures/verstappen\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/418/diff?src=pr&el=tree#diff-c3JjL3R1cmJ1bGVuY2VfY2xvc3VyZXMvdmVyc3RhcHBlbl9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `84.74% <0%> (+32.2%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/418?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/418?src=pr&el=footer). Last update [a9e34a7...2dff13a](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/418?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/418#issuecomment-532833457:2390,update,update,2390,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/418#issuecomment-532833457,1,['update'],['update']
Deployability,"machine/Oceananigans.jl/pull/463/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy9zbWFnb3JpbnNreS5qbA==) | `77.33% <100%> (ø)` | :arrow_up: |; | [src/forcing.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/463/diff?src=pr&el=tree#diff-c3JjL2ZvcmNpbmcuamw=) | `53.84% <100%> (ø)` | :arrow_up: |; | [...ures/verstappen\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/463/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy92ZXJzdGFwcGVuX2FuaXNvdHJvcGljX21pbmltdW1fZGlzc2lwYXRpb24uamw=) | `100% <100%> (ø)` | :arrow_up: |; | [src/AbstractOperations/show\_abstract\_operations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/463/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9zaG93X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `16.66% <16.66%> (ø)` | |; | [src/AbstractOperations/function\_fields.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/463/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9mdW5jdGlvbl9maWVsZHMuamw=) | `25% <25%> (ø)` | |; | [src/AbstractOperations/AbstractOperations.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/463/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9BYnN0cmFjdE9wZXJhdGlvbnMuamw=) | `33.33% <33.33%> (ø)` | |; | ... and [26 more](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/463/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/463?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/463?src=pr&el=footer). Last update [7bbdd3d...f61dbc6](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/463?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/463#issuecomment-541339268:3710,update,update,3710,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/463#issuecomment-541339268,1,['update'],['update']
Deployability,"me = "" * string(prettytime(times[$n])); fig[1, 1:5] = Label(fig, title, fontsize=24, tellwidth=false);. resize_to_layout!(fig); @info ""Animating...""; record(fig, filename * "".mp4"", 1:length(times), framerate=10) do i; n[] = i; end; ```. This simulation runs for 10 minutes and then plots this (on a 32x32 grid):. https://github.com/CliMA/Oceananigans.jl/assets/13205162/e4fc9a13-f14f-4c6d-bda6-0d4aae79ac4c. So basically there's a discontinuity in the vertical direction's pressure, which causes an artificial vertical pressure gradient, causing a spurious flow at the top and bottom, even those aren't supposed to be boundaries since the grid is periodic in `z`.; It seems like this comes from the fact that the hydrostatic pressure isn't periodic (since it always comes from a vertical b integral I think), but the nonhydrostatic pressure *is* periodic. This in turn leads the total pressure to have a discontinuity. In fact if we run the exact same configuration but make both the gravitational direction and the periodic direction the `x` direction (code [here](https://pastebin.com/skAB1Bt4)) we have a plume looks and behaves as expected and has no discontinuities:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/97ab7df9-4b64-4f65-9433-4eb9a5e7fe22. I'm not sure if this is something that needs fixing or if it's just a consequence of the hydrostatic decomposition, which always assumes gravity is in the `NegativeZDirection()` and that `z` is `Bounded`. Hence I'm not sure this is better left as an issue or a discussion, so please lmk if I should move this to a discussion. Also, if I run the example above (where gravity is in the `z` direction) using https://github.com/CliMA/Oceananigans.jl/pull/3080, which gets rid of the hydrostatic pressure separation, then I get what I believe to be the correct behavior (all pressures in the animation below are actually total pressure):. https://github.com/CliMA/Oceananigans.jl/assets/13205162/60ef470d-22d7-429a-9029-adb7db5687ba. Whic",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3290:4019,configurat,configuration,4019,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3290,1,['configurat'],['configuration']
Deployability,"merge?; we didn't bump any patch release, is this OK?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1417214083:27,patch,patch,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1417214083,2,"['patch', 'release']","['patch', 'release']"
Deployability,"ming from `Pkg`:. ```; Stacktrace:; --;   | [1] pipeline_error;   | @ ./process.jl:565 [inlined];   | [2] read(cmd::Cmd);   | @ Base ./process.jl:449;   | [3] collect_artifacts(pkg_root::String; platform::Base.BinaryPlatforms.Platform);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:720;   | [4] collect_artifacts;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:706 [inlined];   | [5] download_artifacts(env::Pkg.Types.EnvCache; platform::Base.BinaryPlatforms.Platform, julia_version::VersionNumber, verbose::Bool, io::Base.DevNull);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:752;   | [6] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}, level::Pkg.Types.UpgradeLevel; skip_writing_project::Bool, preserve::Nothing);   | @ Pkg.Operations /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:1542;   | [7] up(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; level::Pkg.Types.UpgradeLevel, mode::Pkg.Types.PackageMode, preserve::Nothing, update_registry::Bool, skip_writing_project::Bool, kwargs::@Kwargs{io::Base.DevNull});   | @ Pkg.API /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:351;   | [8] up;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:326 [inlined];   | [9] up;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/API.jl:164 [inlined];   | [10] #resolve#143;   | @ /net/ocean/home/data44/data5/glwagner/oceananigans-buildkite-16499/julia-1.10.2/share/julia/stdlib/v1.10/Pkg",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136:1206,Upgrade,UpgradeLevel,1206,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2250997136,1,['Upgrade'],['UpgradeLevel']
Deployability,"model.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/742/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <0.00%> (-11.12%)` | :arrow_down: |; | [src/Utils/launch\_config.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/742/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2xhdW5jaF9jb25maWcuamw=) | `94.11% <0.00%> (-5.89%)` | :arrow_down: |; | [src/Solvers/solve\_for\_pressure.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/742/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvc29sdmVfZm9yX3ByZXNzdXJlLmps) | `100.00% <0.00%> (ø)` | |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/742/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `61.53% <0.00%> (+2.56%)` | :arrow_up: |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/742/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `69.84% <0.00%> (+6.34%)` | :arrow_up: |; | [src/Architectures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/742/diff?src=pr&el=tree#diff-c3JjL0FyY2hpdGVjdHVyZXMuamw=) | `66.66% <0.00%> (+11.11%)` | :arrow_up: |; | [src/Fields/set!.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/742/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `67.64% <0.00%> (+32.35%)` | :arrow_up: |; | ... and [4 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/742/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/742?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/742?src=pr&el=footer). Last update [533abcd...45c9255](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/742?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/742#issuecomment-622097623:3435,update,update,3435,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/742#issuecomment-622097623,1,['update'],['update']
Deployability,"mplement more sophisticated immersed boundary methods such as partial cells and shaved cells. In those methods, the presence of the immersed boundary is felt at a fundamental level during the calculation of grid areas and volumes. The `internal_tide.jl` validation experiment has also been refactored and now reads:. ```julia; using Oceananigans; using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary; using Plots. grid = RegularRectilinearGrid(size=(256, 256), x=(-10, 10), z=(0, 5), topology=(Periodic, Flat, Bounded)). # Gaussian bump of width ""1""; bump(x, y, z) = z < exp(-x^2). grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBoundary(bump)). # Tidal forcing; tidal_forcing(x, y, z, t) = 1e-4 * cos(t). model = HydrostaticFreeSurfaceModel(grid = grid_with_bump,; momentum_advection = CenteredSecondOrder(),; free_surface = ExplicitFreeSurface(gravitational_acceleration=4),; closure = IsotropicDiffusivity(ν=1e-4, κ=1e-4),; tracers = :b, ; buoyancy = BuoyancyTracer(),; coriolis = FPlane(f=sqrt(0.5)),; forcing = (u = tidal_forcing,)). # Linear stratification; set!(model, b = (x, y, z) -> 2 * z). progress(s) = @info ""Time = $(s.model.clock.time), max|w|: $(maximum(abs, model.velocities.w))""; ; simulation = Simulation(model, Δt = 1e-3, stop_time = 10, progress = progress, iteration_interval = 10) ; ; run!(simulation). xu, yu, zu = nodes(model.velocities.u); u = interior(model.velocities.u)[:, 1, :]. umax = maximum(abs, u); ulim = umax / 2 ; ulevels = vcat(-[umax], range(-ulim, stop=ulim, length=30), [umax]) . xu2 = reshape(xu, grid.Nx, 1); zu2 = reshape(zu, 1, grid.Nz); u[bump.(xu2, 0, zu2)] .= NaN . u_plot = heatmap(xu, zu, u'; title = ""x velocity"", color = :balance, clims = (-ulim, ulim)). display(u_plot); ```. Note that the small time-step is near the gravity wave CFL for an explicit free surface on the specified grid. Somewhat larger time-steps are possible with an `ImplicitFreeSurface` but it seems the overall integration is slower that way.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-841751305:2423,integrat,integration,2423,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-841751305,1,['integrat'],['integration']
Deployability,n expression starting at /glade/u/home/knudsenl/.julia/packages/CUDA/Tl08O/src/CUDA.jl:25; Allocations: 2907 (Pool: 2898; Big: 9); GC: 0; Installing known registries into `~/.julia`; ┌ Warning: The active manifest file has dependencies that were resolved with a different julia version (1.9.2). Unexpected behavior may occur.; └ @ /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/Manifest.toml:0; Installed GPUArraysCore ─────────────── v0.1.6; Installed Crayons ───────────────────── v4.1.1; Installed Adapt ─────────────────────── v4.0.4; Installed TableTraits ───────────────── v1.0.1; Installed ColorTypes ────────────────── v0.11.5; Installed Scratch ───────────────────── v1.2.1; Installed Preferences ───────────────── v1.4.3; Installed PrettyTables ──────────────── v2.3.2; Installed SentinelArrays ────────────── v1.4.5; Installed CUDA_Driver_jll ───────────── v0.9.1+1; Installed DataAPI ───────────────────── v1.16.0; Installed PooledArrays ──────────────── v1.4.3; Installed Tables ────────────────────── v1.12.0; Installed FixedPointNumbers ─────────── v0.8.5; Installed GPUCompiler ───────────────── v0.26.7; Installed LLVMLoopInfo ──────────────── v1.0.0; Installed IteratorInterfaceExtensions ─ v1.0.0; Installed StaticArraysCore ──────────── v1.4.3; Installed JLLWrappers ───────────────── v1.5.0; Installed InlineStrings ─────────────── v1.4.2; Installed StaticArrays ──────────────── v1.9.7; Installed TimerOutputs ──────────────── v0.5.24; Installed AbstractFFTs ──────────────── v1.5.0; Installed PrecompileTools ───────────── v1.2.1; Installed DataValueInterfaces ───────── v1.0.0; Installed OrderedCollections ────────── v1.6.3; Installed NVTX_jll ──────────────────── v3.1.0+2; Installed CUDA_Runtime_Discovery ────── v0.3.4; Installed LLVMExtra_jll ─────────────── v0.0.30+0; Installed UnsafeAtomicsLLVM ─────────── v0.1.5; Installed LaTeXStrings ──────────────── v1.3.1; Installed NVTX ──────────────────────── v0.3.4; Installed CEnum ─────────────────────── v0.5.0; Inst,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472:1116,Install,Installed,1116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245919472,1,['Install'],['Installed']
Deployability,"n=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/662?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #662 +/- ##; =========================================; + Coverage 78.06% 78.2% +0.14% ; =========================================; Files 118 118 ; Lines 2362 2368 +6 ; =========================================; + Hits 1844 1852 +8 ; + Misses 518 516 -2; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/662?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/662/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <100%> (+3.17%)` | :arrow_up: |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/662/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `96.29% <100%> (+3.7%)` | :arrow_up: |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/662/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `91.07% <100%> (-0.31%)` | :arrow_down: |; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/662/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZF90dXBsZXMuamw=) | `91.17% <88.88%> (+5.46%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/662?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/662?src=pr&el=footer). Last update [042f8cf...90e9560](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/662?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/662#issuecomment-592911845:2330,update,update,2330,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/662#issuecomment-592911845,1,['update'],['update']
Deployability,"n_testBCflux.jl). . In the experiment, I have specified both the initial temperature (perturbation) and a constant background temperature < T > gradient, so that the total temperature T_total = < T > + T.; ; The movie below shows T_total and presents two simple experiments with an existing initial temperature. In the blue case, the default no-flux boundary condition is applied (i.e., no gradient in the wall-normal direction), but the gradient at the boundaries is nonzero because the boundary condition does not account for the background temperature. In contrast, the red case includes a boundary condition that forces the gradient of T_total to be 0. ; With this corrected boundary condition (red curve), the flux at the boundaries is 0, which is physical. However, it remains unclear how to incorporate these corrected fluxes for more complicated configurations. https://github.com/CliMA/Oceananigans.jl/assets/68127124/69e64cf9-6248-4274-9b6d-5f763827e768. The movie below shows two additional cases without an initial temperature, indicating that the background temperature, < T > defines the entire field. ; The constant blue line throughout the simulation implies that the background scalar does not diffuse either within the domain or at the boundaries. However, in the red case, despite the absence of diffusion affecting the background temperature, the nonzero flux at the boundaries causes the curve to become smoothed. ; If diffusion does not affect the background field, would it still make sense if the stratification is not a constant, such as in a Kelvin-Helmholtz instability configuration, e.g., < b > = tanh(z)?. https://github.com/CliMA/Oceananigans.jl/assets/68127124/d350c5ad-2e14-4992-8c5d-f947a1ddf7bb. This brings up the question: what should the default behavior for background fields be? Should they really only appear in the advective terms, or should they also be diffused? And what should the boundary conditions on perturbations be when there are background fields?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3568:1961,configurat,configuration,1961,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3568,1,['configurat'],['configuration']
Deployability,"ndaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing}, Field{Center, Face, Center, Nothing, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, 1, typeof(drag_v), NamedTuple{(:cᴰ, :V∞), Tuple{Float64, Float64}}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity2)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing}, Field{Center, Center, Face, Nothing, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1103318508:7581,Continuous,ContinuousBoundaryFunction,7581,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1103318508,1,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"nded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Flux,Nothing},BoundaryCondition{Flux,Nothing}}}}}}},NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Face,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,NamedTuple{(:K, :ℓ, :Δz),Tuple{Float64,Float64,Float64}},1,typeof(FT),Tuple{typeof(identity)}}}},Oceananigans.Advection.CenteredSecondOrder,Oceananigans.Solvers.PressureSolver{Oceananigans.Solvers.HorizontallyPeriodic,GPU,NamedTuple{(:kx², :ky², :kz²),Tuple{CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3},CUDA.CuArray{Float64,3}}},CUDA.CuArray{Complex{Float64},3},NamedTuple{(:FFTxy!, :FFTz!, :IFFTxy!, :IFFTz!),Tuple{CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tupl",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:29968,Continuous,ContinuousForcing,29968,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,3,['Continuous'],['ContinuousForcing']
Deployability,"nditions/fill\_halo\_regions\_flat.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1025/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWxsX2hhbG9fcmVnaW9uc19mbGF0Lmps) | `0.00% <0.00%> (-100.00%)` | :arrow_down: |; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1025/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfZGlhZ25vc3RpY3Muamw=) | `8.77% <0.00%> (-87.78%)` | :arrow_down: |; | [src/TimeSteppers/runge\_kutta\_3.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1025/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9ydW5nZV9rdXR0YV8zLmps) | `0.00% <0.00%> (-85.08%)` | :arrow_down: |; | [...closure\_implementations/anisotropic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1025/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2RpZmZ1c2l2aXR5Lmps) | `0.00% <0.00%> (-84.00%)` | :arrow_down: |; | [...lementations/anisotropic\_biharmonic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1025/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2JpaGFybW9uaWNfZGlmZnVzaXZpdHkuamw=) | `0.00% <0.00%> (-79.17%)` | :arrow_down: |; | ... and [121 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1025/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1025?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1025?src=pr&el=footer). Last update [7687ab6...616ee5f](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1025?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1025#issuecomment-707938629:3986,update,update,3986,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1025#issuecomment-707938629,1,['update'],['update']
Deployability,"ndition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity1), typeof(ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸᶻ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity3)}}}, Nothing}}, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:36395,Continuous,ContinuousBoundaryFunction,36395,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ndition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity1), typeof(ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸᶻ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity3)}}}, Nothing}}}, Tuple{CPU, CPU}}, Nothing, MultiRegionObject{Tuple{Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}, Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}}, Tuple{CPU, CPU}}}, Field{Center, Center, Face, Nothing, MultiRegionGrid{Float64, Periodic, Periodic, Bounded, XPartition{Int64}, MultiRegionObject{Tuple{RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, Ste",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:37923,Continuous,ContinuousBoundaryFunction,37923,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ndition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity2), typeof(ℑyzᵃᶠᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Face, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τʸˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(ℑyzᵃᶠᶜ)}}}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Face, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τʸᶻ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxyᶜᶠᵃ), typeof(Oceananigans.Operators.identity4)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Center, Face, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, CuArray{Float64, 2, CUDA.Mem.DeviceBuffer}}, Oceananigans.Imm",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165:16985,Continuous,ContinuousBoundaryFunction,16985,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ndition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(ℑxyᶠᶜᵃ)}}}, Nothing}}, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Communication, Oceananigans.MultiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tup",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:31510,Continuous,ContinuousBoundaryFunction,31510,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ndition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity3), typeof(ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(ℑxyᶠᶜᵃ)}}}, Nothing}}}, Tuple{CPU, CPU}}, Nothing, MultiRegionObject{Tuple{Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}, Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}}, Tuple{CPU, CPU}}}, Field{Center, Face, Center, Nothing, MultiRegionGrid{Float64, Periodic, Periodic, Bounded, XPartition{Int64}, MultiRegionObject{Tuple{RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, Ste",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:33038,Continuous,ContinuousBoundaryFunction,33038,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,"ndition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ImmersedBoundaryCondition{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Nothing, Center, Oceananigans.BoundaryConditions.RightBoundary, typeof(τˣʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity5), typeof(ℑxzᶠᵃᶜ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τˣᶻ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(Oceananigans.Operators.identity1), typeof(ℑxyᶠᶜᵃ)}}}, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Face, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, CuArray{Float64, 2, CUDA.Mem.DeviceBuffer}}, Oceananigans.Imm",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165:14573,Continuous,ContinuousBoundaryFunction,14573,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300963165,2,['Continuous'],['ContinuousBoundaryFunction']
Deployability,ne); MPI_Isend at /orcd/data/raffaele/001/glwagner/.julia/artifacts/e85c0a68e07fee0ee7b19c2abc210b1af2f4771a/lib/libmpi.so (unknown line); MPI_Isend at /orcd/data/raffaele/001/glwagner/.julia/packages/MPI/TKXAj/src/api/generated_api.jl:2151 [inlined]; Isend at /orcd/data/raffaele/001/glwagner/.julia/packages/MPI/TKXAj/src/pointtopoint.jl:66; Isend at /orcd/data/raffaele/001/glwagner/.julia/packages/MPI/TKXAj/src/pointtopoint.jl:70 [inlined]; Isend at /orcd/data/raffaele/001/glwagner/.julia/packages/MPI/TKXAj/src/pointtopoint.jl:70 [inlined]; send_south_halo at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:317; #fill_south_and_north_halo!#50 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:263; fill_south_and_north_halo! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:250; unknown function (ip: 0x2aaac8afa8b6); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #fill_halo_event!#40 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:208; fill_halo_event! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:193; unknown function (ip: 0x2aaac8aefb2e); _jl_invoke at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:2895 [inlined]; ijl_apply_generic at /cache/build/builder-amdci4-4/julialang/julia-release-1-dot-10/src/gf.c:3077; #fill_halo_regions!#38 at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:114; fill_halo_regions! at /orcd/data/raffaele/001/glwagner/Oceananigans.jl/src/DistributedComputations/halo_communication.jl:101 [inlined]; #fill_halo_regions!#37 at /orcd/data/raffaele/001/glwagner/O,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878:2525,release,release-,2525,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878,1,['release'],['release-']
Deployability,need to update docstring in `netcdf_output_writer.jl`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2986:8,update,update,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2986,1,['update'],['update']
Deployability,"nes 676 754 +78 ; ==========================================; + Hits 449 523 +74 ; - Misses 227 231 +4; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/operators/operators.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9vcGVyYXRvcnMuamw=) | `100% <ø> (ø)` | :arrow_up: |; | [src/time\_steppers.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL3RpbWVfc3RlcHBlcnMuamw=) | `86.86% <100%> (+2.81%)` | :arrow_up: |; | [src/models.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL21vZGVscy5qbA==) | `90.9% <100%> (+0.43%)` | :arrow_up: |; | [src/model\_configuration.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL21vZGVsX2NvbmZpZ3VyYXRpb24uamw=) | `100% <100%> (ø)` | :arrow_up: |; | [src/fieldsets.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL2ZpZWxkc2V0cy5qbA==) | `100% <100%> (ø)` | :arrow_up: |; | [src/operators/ops\_regular\_cartesian\_grid.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218/diff?src=pr&el=tree#diff-c3JjL29wZXJhdG9ycy9vcHNfcmVndWxhcl9jYXJ0ZXNpYW5fZ3JpZC5qbA==) | `86.71% <86.11%> (+0.84%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218?src=pr&el=footer). Last update [7e29af4...ac6ed18](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/218?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/218#issuecomment-491127822:2634,update,update,2634,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/218#issuecomment-491127822,1,['update'],['update']
Deployability,net/ productionresultssa8.blob.core.windows.net/ productionresultssa9.blob.core.windows.net/ productionresultssa10.blob.core.windows.net/ productionresultssa11.blob.core.windows.net/ productionresultssa12.blob.core.windows.net/ productionresultssa13.blob.core.windows.net/ productionresultssa14.blob.core.windows.net/ productionresultssa15.blob.core.windows.net/ productionresultssa16.blob.core.windows.net/ productionresultssa17.blob.core.windows.net/ productionresultssa18.blob.core.windows.net/ productionresultssa19.blob.core.windows.net/ github-production-repository-image-32fea6.s3.amazonaws.com github-production-release-asset-2e65be.s3.amazonaws.com insights.github.com wss://alive.github.com; font-src github.githubassets.com; form-action 'self' github.com gist.github.com copilot-workspace.githubnext.com objects-origin.githubusercontent.com; frame-ancestors 'none'; frame-src viewscreen.githubusercontent.com notebooks.githubusercontent.com; img-src 'self' data: github.githubassets.com media.githubusercontent.com camo.githubusercontent.com identicons.github.com avatars.githubusercontent.com github-cloud.s3.amazonaws.com objects.githubusercontent.com secured-user-images.githubusercontent.com/ user-images.githubusercontent.com/ private-user-images.githubusercontent.com opengraph.githubassets.com github-production-user-asset-6210df.s3.amazonaws.com customer-stories-feed.github.com spotlights-feed.github.com objects-origin.githubusercontent.com *.githubusercontent.com; manifest-src 'self'; media-src github.com user-images.githubusercontent.com/ secured-user-images.githubusercontent.com/ private-user-images.githubusercontent.com github-production-user-asset-6210df.s3.amazonaws.com gist.github.com; script-src github.githubassets.com; style-src 'unsafe-inline' github.githubassets.com; upgrade-insecure-requests; worker-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/; Transfer-Encoding: chunked; X-GitHub-Request-Id: 85AA:37E5AB:1E9255C:2BAFBE6:6674307A; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2180730454:4221,upgrade,upgrade-insecure-requests,4221,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2180730454,1,['upgrade'],['upgrade-insecure-requests']
