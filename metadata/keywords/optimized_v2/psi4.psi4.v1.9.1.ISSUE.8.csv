quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,As the code is in place and we have a long test for it I say lets go ahead and get this in. This is a good unit of work currently and I think the discussion on how to integrate this properly into Psi4 is a long one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-369678429:167,integrat,integrate,167,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-369678429,1,['integrat'],['integrate']
Integrability,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2291:312,message,message,312,https://psicode.org,https://github.com/psi4/psi4/issues/2291,1,['message'],['message']
Integrability,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/415#issuecomment-227061602:333,depend,dependent,333,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602,2,"['depend', 'message']","['dependent', 'message']"
Integrability,"At the moment there is no publicly accessible MPI routines in Psi4 (they are coming soon) so using MPI is superfluous. Boost MPI will be a requirement in the future when MPI is selected. That being said, it should have automatically compiled for you when the remainder of Boost was compiled. I would simply recommend removing the `--mpi` flag and recompiling (I strongly suggest blowing away your build directory).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201#issuecomment-169689686:50,rout,routines,50,https://psicode.org,https://github.com/psi4/psi4/issues/201#issuecomment-169689686,2,['rout'],['routines']
Integrability,"At this stage, I have a reminder to look into this, rather than a full report. We had a user on the forum [report](http://forum.psicode.org/t/question-on-oscillator-strength-calculation-using-python-api/1036/2) getting the error message that ""Must provide roots_per_irrep vector in input."" during a EOM computation via PythonAPI. The user did provide `roots_per_irrep` in `set_options`... Just as a string rather than a list. A smarter API would have either tried to coerce the string to the actual type, a list, or have raised an error that a string wasn't valid for that argument. If Psi is already supposed to do this, why didn't it? If Psi isn't already supposed to do this, which one do we want to take?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1137:229,message,message,229,https://psicode.org,https://github.com/psi4/psi4/issues/1137,1,['message'],['message']
Integrability,"Attempting frequency() for atomic species fails irrespective of charge, multiplicity, and reference type. Typical error message:. > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > <type 'exceptions.IndexError'>: basic_string::replace: File ""<string>"", line 26, in <module>; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in frequency; > psi4.thermo(wfn, wfn.frequencies()). Thanks,; -drhaney, -- that's ""D. R."", not Doctor. Typical input file attached (C atom, neutral triplet).; [C.txt](https://github.com/psi4/psi4/files/198782/C.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332:120,message,message,120,https://psicode.org,https://github.com/psi4/psi4/issues/332,1,['message'],['message']
Integrability,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1353:1664,message,message,1664,https://psicode.org,https://github.com/psi4/psi4/issues/1353,1,['message'],['message']
Integrability,"Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quality; ## New methods; - Added quadratic convergence algorithms for RHF, UHF, ROHF; - Added DF-CCSD gradients (RHF references); - Added conventional and DF RASSCF and CASSCF energies; - Added X2C scala",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:1293,interface,interface,1293,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['interface'],['interface']
Integrability,"Bad luck -- opt13 hits memory problems. It passes the ""in-core AOs"" check with 200 kb to spare (14042044 and 14074472 below are need and supplied in ints), then runs out of memory for AO blocking. The result of the print statement in second snippet is `AAAA 1: 14176380 > 14074472 || 3 == 65`. Should we put padding back or go another route?. ```; ==> Integral Setup <==. DFHelper Memory: AOs need 0.104621 GiB; user supplied 0.104863 GiB. 14042044 14074472; Using in-core AOs. Traceback (most recent call last):; File ""stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 1113, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 639, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2068, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 1360, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 84, in scf_compute_energy; self.initialize(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 178, in scf_initialize; self.initialize_jk(self.memory_jk_). RuntimeError:; Fatal Error: DFHelper: not enough memory for (p shell) AO blocking! required memory: 0.105622[GiB].; Error occurred in file: /home/psilocaluser/gits/hrw-release/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862:335,rout,route,335,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862,1,['rout'],['route']
Integrability,Bandaid over 1851... Segfault to error message.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1858:39,message,message,39,https://psicode.org,https://github.com/psi4/psi4/pull/1858,1,['message'],['message']
Integrability,"Based on your writing, I assume you're a student researcher. Posting error messages _like this_ is not a good way to get help. Large input files like this make it difficult for developers to find the actual problem. It's best practice to simplify the input file as much as possible while still making the error clear. Sometimes, doing that can tell _you_ where the problem is. If you don't know how to do this kind of troubleshooting, consult your seniors in your research group or your professor. I've played around with your latest input file and can confirm that you have made a fairly straightforward mistake, but you've discarded important information. As an exercise, please post a _simplified_ input that reproduces your problem, and a _complete_ error message. Once you've done that, I'll update the error message to be more explicit and offer some advice on how to bypass this. (Though once you understand the error, it's fairly straightforward.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955:75,message,messages,75,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955,6,['message'],"['message', 'messages']"
Integrability,Basis functions evaluating to zero at grid points dependent on delta in BasisExtents,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1051:50,depend,dependent,50,https://psicode.org,https://github.com/psi4/psi4/issues/1051,1,['depend'],['dependent']
Integrability,"Be aware that analytic Hessians are available for Hartree–Fock (and a few DFT fctls that no one uses) only. So if wB97X-D is the target, it probably is best to prototype with `freq(..., dertype='gradient')` for consistency (as you were already doing). For all those displacements, QCFractal is the proposed way to run through them in parallel. You can get an idea how it works with a ""snowflake"" calc that just uses all the threads on a single node (and doesn't require database storage setup). conda-wise you'd need to `conda install qcfractal postgresql -c conda-forge`. An example is https://github.com/psi4/psi4/blob/master/tests/ddd-deriv/input.dat#L40-L47 . Snowflake is a lightweight single-node route. The full QCFractal approach is backed by a database (yours; not MolSSI's) and handles distributing gradient jobs through your cluster's queue. It takes a little more setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575:703,rout,route,703,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575,1,['rout'],['route']
Integrability,"Because it's a quick test, and the values you get out are highly dependent on the functional. Also, you get the fun edge cases of a bare proton (no electrons), and a hydrogen atom (no beta electrons).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2371#issuecomment-986978455:65,depend,dependent,65,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986978455,1,['depend'],['dependent']
Integrability,Better Error Message for Issue #2890,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:13,Message,Message,13,https://psicode.org,https://github.com/psi4/psi4/pull/2906,1,['Message'],['Message']
Integrability,"Both PCMSolver (in `pcmsolver.h`) and psi (in `src/lib/libpsipcm/psipcm.cc`) defined a `extern ""C""` function called:. ``` c++; extern ""C"" void host_writer(const char * message, int message_length);; ```. The fails to build of course (icpc 16.0.1):. ```; error: more than one instance of overloaded function ""host_writer"" has ""C"" linkage; ```. Please rename or adjust the function.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/417:168,message,message,168,https://psicode.org,https://github.com/psi4/psi4/issues/417,1,['message'],['message']
Integrability,"Btw you don't have Cholesky routines as an alternative to RI? Seems like you do have CD for CC, you could just take the B matrices from the CD and use them for the SCF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-223727271:28,rout,routines,28,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223727271,1,['rout'],['routines']
Integrability,"But why does GDMA work when called through the psi4 binary? ; Both psi4 python and pis4 binary use the same GDMA executable in the background (maybe I am wrong on this?), and gdma handles the `stdout` well when called with the binary (i.e. without python wrapping). It rather seems to me that the `stdout` connection between python and gdma is somehow broken and results in this bug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1334#issuecomment-436227472:255,wrap,wrapping,255,https://psicode.org,https://github.com/psi4/psi4/issues/1334#issuecomment-436227472,1,['wrap'],['wrapping']
Integrability,"But yes, I agree that actually lifting the restriction mentioned in the original issue is either impossible or super tricky. Perhaps just reporting a clear error message when the mol name is not a valid Py identifier is the most friendly thing (e.g. I saw http://stackoverflow.com/a/29586366). Anyways, low priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286911897:162,message,message,162,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911897,2,['message'],['message']
Integrability,"By defaults PySCF truncates basis functions to `1e-8` while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in https://github.com/pyscf/pyscf/issues/1313. There are also be differences in how linear dependencies are handled in density fitting. I think Psi4 diagonalizes the Coulomb overlap `(A|B)` and throws away linearly dependent functions while PySCF directly solves the system of linear equations. In my experience, PySCF hangs much more easily in linear dependencies than Psi4. Linear dependencies are really the weak point in PySCF overall. Orbital basis linear dependencies also are not removed by default, and one needs to do this separately, which is a common issue for practical calculations. (This should not be an issue in the def2-SVP calculation here since the basis is so small.) The linear dependency issues also pop up in other places in the code, and I had tickets open for a long time about these, but I think the last of them have now been closed so calculations with strong linear dependencies should work in the PySCF master branch, e.g. doing diatomics at negligible internuclear distances like R = 1e-4 bohr. I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. Psi4 will use density fitting to get the orbitals close to convergence for `scf_type direct`; you can do a similar thing in PySCF. For some systems PySCF will be way faster than Psi4 with exact integrals, since it handles generally contracted basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682:238,depend,dependencies,238,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682,8,"['contract', 'depend']","['contracted', 'dependencies', 'dependency', 'dependent']"
Integrability,"By finite-difference test, I mean ""there is some property that we can compute either by finite difference of energies or by contracting appropriately defined densities against derivative integrals,"" e.g., geometry gradients and dipoles. By checking that both routes predict the same result, we can be much more confident that the densities are correctly implemented. (I recall a sign error in the CASPT2 gradients of another package. This error went uncaught for decades because the impact on calculations was relatively small.). I don't know if this is an option for transition densities. I'm not sure if EOM-CC transition properties are defined by some variational criteria, some variational criteria but neglecting orbital relaxation, or something else altogether. EDIT: The '93 Stanton and Bartlett paper explicitly says orbital relaxation is neglected, so I imagine the finite difference test is not an option. I'm not sure if there's some other technique to validate the correctness of the transition densities, other than matching other code. I know ""matching other code"" is done in the test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284:124,contract,contracting,124,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284,2,"['contract', 'rout']","['contracting', 'routes']"
Integrability,"By hooking the hessian call up to the analytic RHF code, I unleashed the error message in the frequency tests that use DF and, as you said, used the incorrect keyword to request gradients. I will fix those tests when I get a chance (probably the flight back on Monday - I'm at a conference now). On my flight here I wrote some cheesy frequency code to plug the gap in our capabilities, which may or may not be useful::. ``` python; import numpy as np. mol = ref_wfn.molecule(); natoms = mol.natom(); masses = np.zeros(natoms). for atom in range(natoms):; masses[atom] = mol.mass(atom). m = np.repeat( np.divide(1.0, np.sqrt(masses)), 3); mwhess = np.einsum('i,ij,j->ij', m, H, m). fcscale = psi_hartree2J / (psi_bohr2m * psi_bohr2m * psi_amu2kg);; fc = fcscale * np.linalg.eigvalsh(mwhess); freqs = np.sqrt(np.abs(fc)); freqs *= 1.0 / (2.0 * np.pi * psi_c * 100.0); freqs[fc < 0] *= -1. freqvec = psi4.Vector.from_array(freqs[6:]); ref_wfn.set_frequencies(freqvec); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-231269168:79,message,message,79,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231269168,1,['message'],['message']
Integrability,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239211359:847,inject,injecting,847,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359,2,['inject'],['injecting']
Integrability,"By the way, I've managed to modify the checker to also run the code style validation on Python using YAPF. [Here is an example](https://github.com/PCMSolver/danger-python-example/pull/1) I'll integrate that too as soon as the modifications to the checker make it upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809#issuecomment-334001557:192,integrat,integrate,192,https://psicode.org,https://github.com/psi4/psi4/pull/809#issuecomment-334001557,1,['integrat'],['integrate']
Integrability,By the way: chemps2 v1.7-rc3 doesn't depend on GSL anymore. I have my own Wigner-nj generator now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220990273:37,depend,depend,37,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220990273,1,['depend'],['depend']
Integrability,"C::XCIntegrator` object and all related objects (e.g., load balancer, molecular weights partitioner), as well as other auxiliary work such as defining the GauXC execution space. `snLinK::build_G_component` constructs the K matrix from the input density via the GauXC integrator's `eval_exx` function. `build_G_component` also handles fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm prese",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:2053,interface,interface,2053,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability,CBS Wrapper and general driver cleanup,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/365:4,Wrap,Wrapper,4,https://psicode.org,https://github.com/psi4/psi4/pull/365,1,['Wrap'],['Wrapper']
Integrability,CBS wrapper fix,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/456:4,wrap,wrapper,4,https://psicode.org,https://github.com/psi4/psi4/pull/456,1,['wrap'],['wrapper']
Integrability,CCSD frequency-dependent first hyperpolarizabilities,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2043:15,depend,dependent,15,https://psicode.org,https://github.com/psi4/psi4/pull/2043,1,['depend'],['dependent']
Integrability,CPU and memory in MRCC interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3165:23,interface,interface,23,https://psicode.org,https://github.com/psi4/psi4/issues/3165,1,['interface'],['interface']
Integrability,Can `USE_OPENMP` be set dynamically? We could consider wrapping all C++ calls in a function that sets the environment. Could also be useful for fiddling with thread affinities as per Matt's suggestion. Sounds like a really horrible idea though...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390202737:55,wrap,wrapping,55,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390202737,1,['wrap'],['wrapping']
Integrability,"Can we either move the warning to the end or make it red with `message(""${Red}This is Red${ColourReset}"")`?. Where red is `""${Esc}[31m""` or bold red `${Esc}[1;31m""`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733525:63,message,message,63,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733525,1,['message'],['message']
Integrability,Can you provide a before-and-after example of what error messages look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1291191371:57,message,messages,57,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1291191371,1,['message'],['messages']
Integrability,"Can you update the test to also test using MOs obtained from an SCF that did _not_ finish successfully?. I like the interface, but it'd be best to get more opinions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-857127925:116,interface,interface,116,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-857127925,1,['interface'],['interface']
Integrability,"Cannot replicate this bug. Iterations are oscillating like crazy, but no; singularity. I get similar oscillations for singlet cation in cc-pVDZ; (eventually converges) with both DF and ID. -Rob. On Fri, Apr 29, 2016 at 1:54 PM, Rob Parrish robparrish@gmail.com wrote:. > Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; > bad eigenvalue in the DF metric, though I have traps in for this. Compiling; > a fork to check this out.; > ; > -Rob; > ; > On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > The following either gives NaN energy or (positive) 60,000 [Eh]; > > depending on MKL version and compile options. All basis sets smaller than; > > aug-cc-pVQZ seem to check out, did not try larger.; > > ; > > molecule mol {; > > 0 2; > > C -2.83891 -0.84747 -0.20778; > > N -2.06959 -0.27604 0.77905; > > C -0.85937 -0.82512 0.74757; > > N -0.82980 -1.74677 -0.21226; > > C -2.05910 -1.77487 -0.83179; > > C -2.45490 0.86620 1.59959; > > C 0.35903 -2.49473 -0.61265; > > F -1.01767 1.46174 -1.11980; > > B 0.28985 1.63764 -0.63648; > > F 0.23738 1.82826 0.77419; > > F 0.89453 2.73957 -1.24020; > > F 1.05039 0.46734 -0.88673; > > H -0.02604 -0.54755 1.38339; > > H -2.27287 -2.45330 -1.64959; > > H -3.86751 -0.55086 -0.37733; > > H -3.45079 0.68580 2.01748; > > H -1.72185 0.98138 2.40249; > > H -2.44673 1.75972 0.96603; > > H 0.98379 -1.85263 -1.24323; > > H 0.91655 -2.78676 0.28358; > > H 0.03922 -3.39046 -1.15377; > > C 2.81822 0.12352 1.52490; > > C 3.26768 -0.78277 0.56145; > > H 3.28632 0.11977 2.50813; > > H 2.01109 0.81253 1.27433; > > N 3.64537 -1.55240 -0.23308; > > }; > > ; > > set {; > > basis cc-pVQZ; > > scf_type df; > > guess gwh; > > reference rohf; > > }; > > ; > > energy('SCF'); > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215889548:632,depend,depending,632,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215889548,1,['depend'],['depending']
Integrability,"Carried forward from [forum topic](http://forum.psicode.org/t/computing-dipole-moment-from-ccsd-t/2252). After the `dfocc` re-sync, `dfocc` should be connected to properties. The hard electronic structure part of CCSD(T) dipoles is already done, so let's get the interface right. Do **NOT** start on this issue until after the re-sync.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2276:263,interface,interface,263,https://psicode.org,https://github.com/psi4/psi4/issues/2276,1,['interface'],['interface']
Integrability,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204). Psi currently does not support getting properties with BSSE corrections. This should be a simple matter of taking the properties with each BSSE component and doing the same operation to them you do to get the energies. (Thank you, linearity of derivatives!) There are two parts to this:. 1. `properties` should know to do this. At present, it ignores any BSSE keywords.; 2. When a user passes a wfn computed from BSSE to `OEProp`, it should give the user a clear error message telling it that OEProp is not designed for multi-component property computations. At present, it returns that it can't find the orbitals. While this response is perfectly reasonable, it's opaque.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2196:590,message,message,590,https://psicode.org,https://github.com/psi4/psi4/issues/2196,1,['message'],['message']
Integrability,"Carried forward from [forums](http://forum.psicode.org/t/setting-dft-integration-grid-based-on-atom-identity/2609/2). Request that we be able to set the `DFT_SPHERICAL_POINTS` and `DFT_RADIAL_POINTS` keyword on a per-atom basis, as we do for basis sets or frozen core.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2732:69,integrat,integration-grid-based-on-atom-identity,69,https://psicode.org,https://github.com/psi4/psi4/issues/2732,1,['integrat'],['integration-grid-based-on-atom-identity']
Integrability,"Carried forward from [the forums](http://forum.psicode.org/t/a-roots-per-irrep-value-crashes-cc3/1826). The following input file. ```; molecule radical {; 0 2; O 0.0000000000 0.0000000000 0.1081705869; H 0.0000000000 0.0000000000 -0.8651605869; units angstrom; symmetry C1; }; set {; basis ""6-31+G(d)""; reference ""uhf""; freeze_core true; roots_per_irrep [3] ; }; energy('eom-cc3'); ```. gives the error `Parameter 3 was incorrect on entry to DGEBAL.` and then segfaults. Initial debugging attempts indicate that at the time [this line is executed](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L555) `G[0][0] = NaN`, causing the subsequent matrix diagonalization to fail. Determining why `G[0][0] = NaN` will require expert attention. If there is some legitimate reason for the failure, a more helpful error message should be printed instead. The only one I can think of is if we were capturing only one state of a degenerate pair. But as the original poster remarked, setting `roots_per_irrep` to other numbers like 2 or 4 worked just fine, and when I set `roots_per_irrep` to 4, none of the roots had the same EOM energy. That seems to eliminate the ""degenerate pair"" hypothesis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1931:834,message,message,834,https://psicode.org,https://github.com/psi4/psi4/issues/1931,1,['message'],['message']
Integrability,"Carrying forward from #2201:. Quoth Francesco:; > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly. Quoth Susi:; > This is an inherent drawback of X2C which employs a restricted minimal balance basis. The orbital basis set of non-relativistic theory is the large component set that depicts the electronic part of the relativistic wave function, and the small component set is obtained by acting on the large component with something that looks like `sigma . p` that has the classical three-momentum operator which is essentially nabla. This approach becomes inefficient when the orbital basis is large; this is why four-component codes favor the use of separate basis sets for the small and large components.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868#issuecomment-869207320:162,depend,dependencies,162,https://psicode.org,https://github.com/psi4/psi4/issues/868#issuecomment-869207320,4,['depend'],"['dependencies', 'dependency']"
Integrability,"Carrying forward from a [forum topic](http://forum.psicode.org/t/interface-with-mrcc/1748/6). I suspect that the latest MRCC is not compatible with Psi4. Alas, this is not something I can test easily myself, as it looks nontrivial to compile. A user reported that when trying to run `mrccsdt`, they get:; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on Manjaro at Sun Apr 12 06:03:22 2020; Module time:; user time = 0.61 seconds = 0.01 minutes; system time = 0.11 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 3.99 seconds = 0.07 minutes; system time = 0.37 seconds = 0.01 minutes; total time = 1 seconds = 0.02 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 48000; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************. Written by; Mihaly Kallay, Peter R. Nagy, David Mester, Zoltan Rolik, Gyula Samu,; Jozsef Csontos, Jozsef Csoka, P. Bernat Szabo, Laszlo Gyevi-Nagy,; Bence Hegely, Istvan Ladjanszki, Lorant Szegedy, Bence Ladoczki,; Klara Petrov, Mate Farkas, Pal D. Mezei, and Adam Ganyecz. Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary. www.mrcc.hu. Release date: February 22, 2020. ************************ 2020-04-12 06:03:22 *************************; Executing minp... Reading input from MINP... Input file:. Checking keyword combinations... Basis set is not specified!. Fatal error in exec minp.; Program will stop. ************************ 2020-04-12 06:03:22 *************************; Error at the termination of mrcc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866:65,interface,interface-with-mrcc,65,https://psicode.org,https://github.com/psi4/psi4/issues/1866,1,['interface'],['interface-with-mrcc']
Integrability,"Caught another bug: fractional SAD orbital occupations were determined as; ```; double frac_act = std::pow(((double)(Z - nfzc * 2)) / ((double)nact * 2), 0.5);; ```; which is the square root of the correct number, and also does not give the right spin state. I'm wondering why aren't fractional occupations the default? The thing is that the SAD guess should either employ spherically averaged occupations, or symmetrize the atomic density matrix after the SCF has converged. Otherwise you might get unreliable behavior: since HF breaks symmetries, the density is not going to be spherically symmetric. Put this into a molecule, and the guess will give you an answer that depends on the orientation of the molecule. Or, one can use multiconfigurational methods such as MCHF to get the proper symmetry for the density matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-450749375:672,depend,depends,672,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-450749375,1,['depend'],['depends']
Integrability,"Certainly. Polluted might have been too harsh, cluttered may be a more appropriate word for it. All variables are currently declared at the beginning of the function. Depending on the type of sort requested, some of them may never be initialized/used, but because they are declared at the top they are always visible and mutable inside the switch cases, loops, etc. This makes debugging more challenging than it has to be, as it is not possible to tell at a glance which of the variables with suspicious (negative or power-of-two) values are just uninitialized, as seen in the stack trace in https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277 . In general variables should enter scope when they are needed and go out of scope when they are no longer required, and be `const` if they are never modified.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717#issuecomment-1243470370:167,Depend,Depending,167,https://psicode.org,https://github.com/psi4/psi4/pull/2717#issuecomment-1243470370,1,['Depend'],['Depending']
Integrability,Changes to psi4 for MDT interface.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/772:24,interface,interface,24,https://psicode.org,https://github.com/psi4/psi4/pull/772,1,['interface'],['interface']
Integrability,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295524802:517,interface,interface,517,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802,1,['interface'],['interface']
Integrability,CheMPS2 interface missing value for DMRG_SCF_ACTIVE_SPACE,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1242:8,interface,interface,8,https://psicode.org,https://github.com/psi4/psi4/issues/1242,1,['interface'],['interface']
Integrability,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:6563,Interface,Interface,6563,https://psicode.org,https://github.com/psi4/psi4/issues/629,2,['Interface'],['Interface']
Integrability,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-227006245:132,depend,dependency,132,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245,1,['depend'],['dependency']
Integrability,"Closing issue. In neither of the posted input files do I see a ""fails to converge"" message. On modifying Peter's posted input to use the def2-QZVP basis, the SCF converges using 10 iterations. Likely explanations include ADIIS SCF convergence acceleration and the switch to libecpint.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1856#issuecomment-1133742940:83,message,message,83,https://psicode.org,https://github.com/psi4/psi4/issues/1856#issuecomment-1133742940,1,['message'],['message']
Integrability,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:37,wrap,wrapper,37,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136,4,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"Commenting out an extra cmake line fixes the `coreNone` to `core.so`. Basic, but works. ```; >>> (1.3.x) ll stage/lib/psi4/; total 25704; -rwxr-xr-x. 1 psilocaluser psilocaluser 26286096 Nov 1 16:43 core.so; drwxr-xr-x. 7 psilocaluser psilocaluser 4096 Nov 1 15:58 driver; -rw-r--r--. 1 psilocaluser psilocaluser 5898 Nov 1 15:08 extras.py; -rw-r--r--. 1 psilocaluser psilocaluser 2934 Nov 1 14:50 header.py; -rw-r--r--. 1 psilocaluser psilocaluser 3693 Nov 1 15:08 __init__.py; -rw-r--r--. 1 psilocaluser psilocaluser 1144 Nov 1 16:43 metadata.py; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 16:14 __pycache__; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 15:20 tests; ```; ```; >>> (1.3.x) stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; 	SCF energy........................................................PASSED; ```; ```; >>> (1.3.x) git diff; diff --git a/psi4/src/CMakeLists.txt b/psi4/src/CMakeLists.txt; index da11518..b287b0d 100644; --- a/psi4/src/CMakeLists.txt; +++ b/psi4/src/CMakeLists.txt; @@ -134,6 +134,6 @@ message(STATUS ""Psi4 rpath: ${psi4_RPATH}""); set_target_properties(core PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME core; EXPORT_NAME core; - SUFFIX ""${PYTHON_MODULE_EXTENSION}"" # for python module; + #SUFFIX ""${PYTHON_MODULE_EXTENSION}"" # for python module; INSTALL_RPATH ""${psi4_RPATH}""; BUILD_WITH_INSTALL_RPATH ON); diff --git a/psi4/src/create_new_plugin.cc b/psi4/src/create_new_plugin.cc; index 3734a7b..6f2bde2 100644; --- a/psi4/src/create_new_plugin.cc; +++ b/psi4/src/create_new_plugin.cc; @@ -32,6 +32,7 @@; #include <regex>; #include <sstream>; #include <string>; +#include <iterator>; ; #include ""psi4/psi4-dec.h""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848:1040,message,message,1040,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848,1,['message'],['message']
Integrability,"Commits prior to PR 65c0921213e6fe2979733f6c316915f79051f558 seem to have broken some tests that I suspect are not checked by our CI system:; ```; 	255 - ocepa-freq1 (Failed); 	259 - ocepa2 (Failed); 	260 - ocepa3 (Failed); 	273 - omp3-2 (Failed); 	278 - omp3-grad2 (Failed); 	320 - pywrap-checkrun-rhf (Failed); 	321 - pywrap-checkrun-rohf (Failed); 	322 - pywrap-checkrun-uhf (Failed); ```. The following are known to fail due to poor convergence of the occ module; ```; 	260 - ocepa3 (Failed); 	263 - omp2-3 (Failed); 	274 - omp3-3 (Failed); ```. The error message for `pywrap-checkrun-rhf` is also consistent with convergence issues:; ```; 45 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.01e-15; 46 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.73e-15; 47 -75.0144633211 -1.42e-14 1.85e-05 1.42e-04 9.95e-16; 48 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 5.65e-16; 49 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.27e-16; 50 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.88e-16; ======================== OCEPA IS NOT CONVERGED IN 50 ITERATIONS ============; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 54, in <module>; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/driver.py"", line 711, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 752, in select_olccd_gradient; return func(name, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 2147, in run_occ_gradient; occ_wfn = core.occ(ref_wfn); RuntimeError:; Fatal Error: OCC iterations did not converge; Error occurred in file: /Users/fevange/Source/psi4/psi4/src/psi4/occ/occ_iterations.cc on line: 363; The most recent 5 function calls were:; Printing out the relevant lines from the Psithon --> Python processed input fil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793:560,message,message,560,https://psicode.org,https://github.com/psi4/psi4/issues/1793,1,['message'],['message']
Integrability,Compiling Psi4 I got this error:; .; .; .; [ 60%] Building CXX object src/lib/libchkpt/CMakeFiles/chkpt.dir/nao.cc.o; [ 60%] Building CXX object src/lib/libchkpt/CMakeFiles/chkpt.dir/am2canon_shell_order.cc.o; [ 60%] Linking CXX static library ../../../lib/libchkpt.a; [ 60%] Built target chkpt; Scanning dependencies of target cubeprop; [ 60%] Building CXX object src/lib/libcubeprop/CMakeFiles/cubeprop.dir/csg.cc.o; [ 60%] Building CXX object src/lib/libcubeprop/CMakeFiles/cubeprop.dir/cubeprop.cc.o; [ 60%] Linking CXX static library ../../../lib/libcubeprop.a; [ 60%] Built target cubeprop; Scanning dependencies of target git_update; fatal: Not a git repository (or any of the parent directories): .git; make[2]: **\* [src/lib/libpsipcm/CMakeFiles/git_update] Error 128; make[1]: **\* [src/lib/libpsipcm/CMakeFiles/git_update.dir/all] Error 2; make: **\* [all] Error 2. ---. The git and cmake version from macports is 2.5.3 and 3.3.3 respectively. I used the setup command:; ./setup --plugins --fc gfortran-mp-4.8 --accelerate objdir. I was wondering if you can provide me some input to solve the problem. Thank you.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/183:305,depend,dependencies,305,https://psicode.org,https://github.com/psi4/psi4/issues/183,2,['depend'],['dependencies']
Integrability,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923:1032,message,message,1032,https://psicode.org,https://github.com/psi4/psi4/issues/923,1,['message'],['message']
Integrability,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867:1539,message,message,1539,https://psicode.org,https://github.com/psi4/psi4/issues/867,1,['message'],['message']
Integrability,"Configuring my psi4 I get the warning message. WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case. Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/415:38,message,message,38,https://psicode.org,https://github.com/psi4/psi4/issues/415,1,['message'],['message']
Integrability,"Consider the following input file:; ```; molecule = geometry(""""""; H; H 1 1.0 ; """"""). set basis sto-3g. wfn = energy('b3lyp', return_wfn=True)[1]; assert isinstance(wfn, core.RHF). c1_molecule = molecule.clone(); c1_molecule.reset_point_group('c1'); c1_molecule.fix_orientation(True); c1_molecule.fix_com(True); c1_molecule.update_geometry(); c1_basis = core.BasisSet.build(c1_molecule, ""ORBITAL"", core.get_global_option('BASIS'), quiet=True). new_wfn = wfn.c1_deep_copy(c1_basis); ```. The computation crashed with an error message about the functional being ""unpolarized for UV reference."" The problem is on [this line](https://github.com/psi4/psi4/blob/c57375a3f02b6b339e028516ea44c6911c2e9e22/psi4/src/psi4/libscf_solver/hf.cc#L271). The reference is RHF, not RKS, so the if-statement makes the wrong choice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2335:524,message,message,524,https://psicode.org,https://github.com/psi4/psi4/issues/2335,1,['message'],['message']
Integrability,"Consider the following input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set scf_type pk; set basis 6-31+G(d); set r_convergence 12. energy, wfn = energy('hf', return_wfn = True); NBOWriter(wfn).write('input.47'); ```. This is the NBO test case, except I have replaced the basis set with a Pople basis. When I run the produced input file through NBO, the result I get does not match QChem. The fault is with Psi. Just look at the unphysical energy gap in the d NAOs:; ```; 15 O 1 dxy Ryd( 3d) 0.00000 0.22545; 16 O 1 dxz Ryd( 3d) 0.00196 0.22862; 17 O 1 dyz Ryd( 3d) 0.00518 0.52493; 18 O 1 dx2y2 Ryd( 3d) 0.00125 2.36883; 19 O 1 dz2 Ryd( 3d) 0.00227 2.02191; ```. For comparison, QChem gives; ```; 15 O 1 dxy Ryd( 3d) 0.00000 2.02907; 16 O 1 dxz Ryd( 3d) 0.00518 2.71710; 17 O 1 dyz Ryd( 3d) 0.00196 2.05762; 18 O 1 dx2y2 Ryd( 3d) 0.00125 2.36883; 19 O 1 dz2 Ryd( 3d) 0.00227 2.02191; ```. I suspect the error has to do with Pople basis sets being defined in cartesians and not spherical. This is the only reason I can think of for agreement with QChem being basis-set dependent, and it also agrees nicely with the fact that ""Input basis functions are not normalized; fixed"" appears in the Psi-NBO output file. While I'll likely end up fixing this, this is very low on my priority list. If anybody else wants to take this, feel free. Just post here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1698:1083,depend,dependent,1083,https://psicode.org,https://github.com/psi4/psi4/issues/1698,1,['depend'],['dependent']
Integrability,"Constrained optimizations are so often poorly (overly) interpreted and; erratic (dependent on initial guess, finite steps, ...) in their behavior; that I have never invested much time into them. It would not surprise me; if there were a problem with them in PSI4. However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. On Thu, Mar 23, 2017 at 7:06 PM, Chaya Stern <notifications@github.com>; wrote:. > First, your initial geometry has a dihedral of 180, but your initial step; > is 0, so that's an enormous perturbation to introduce through constraints;; > setting start_angle = 181.0; >; > I also added symmetry c1 to the molecule definition section, to make sure; > weird things don't happen as the symmetry changes.; >; > I had done both of these things too (Sorry, I probably should've posted; > that too) and while the optimizations did converge (although not for all; > structures), the structures were still of very high energy when compared to; > the molecular mechanics energy of the optimized structure. When I generated; > the starting structures outside of psi4, the molecular mechanics energies; > were much closer to the QM energies (as it should be since the parameters; > were fit to reproduce this scan); >; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf>; > is a figure comparing the QM and MM energies from structures generated with; > psi4; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf>; > is one comparing QM and MM energies from structures generated outside of; > psi4.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288896856>, or mute; > the thread; > <https://git",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288899031:81,depend,dependent,81,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899031,1,['depend'],['dependent']
Integrability,"Cool! I noticed ""The extension to higher symmetries does not seem; promising, however."" That looks pretty solid given that it's 2022 and we; still don't do it!. On Wed, Oct 5, 2022 at 1:37 PM Jonathon Misiewicz ***@***.***>; wrote:. > ***@***.**** commented on this pull request.; > ------------------------------; >; > In psi4/src/psi4/libmints/matrix.cc; > <https://github.com/psi4/psi4/pull/2734#discussion_r988229382>:; >; > > for (int p = 0; p < max_p; p++) {; > for (int q = 0; q < max_q; q++) {; > double value = block.get(h, p, q);; > - set(h, p + rows_begin[h], q + cols_begin[h], value);; > + set(h, p + rows_begin[h], q + cols_begin[h ^ symmetry_], value);; >; > That traces back to the MOLECULE code. See Section 4 of this report that; > TDC has saved; > <https://drive.google.com/file/d/1VtVpwvaleR1FF1hm2LchS2SQZ8_RHsJA/view>.; > Molecule - A Program System for Non-Empirical Calculation of the Electronic; > Structure of Molecules II. Integral Section. University of Stockholm; > Institute of Physics Report 74 - 29, December 1974.; >; > Hat tip to TDC for remembering this.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2734#discussion_r988229382>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TBLGWXR5H5YZ7IKZATWBXDHRANCNFSM6AAAAAAQ32VGSQ>; > .; > You are receiving this because you commented.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2734#issuecomment-1268821483:1393,Message,Message,1393,https://psicode.org,https://github.com/psi4/psi4/pull/2734#issuecomment-1268821483,1,['Message'],['Message']
Integrability,Correct copy-paste error message,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1811:25,message,message,25,https://psicode.org,https://github.com/psi4/psi4/pull/1811,1,['message'],['message']
Integrability,"Correction (I have a very bad cold at the moment so my mind is even less reliable than usual):; The spherical harmonics expressed in terms of cartesians in the th transformation matrix in gdma.f90 are not normalized to unity but they should be orthogonal with respect to integration over a sphere. Note that the x^i y^j z^k are not the normalized v(i,j,k) of Schlegel and Frisch but literal products of powers of x, y and z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875:271,integrat,integration,271,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875,1,['integrat'],['integration']
Integrability,"Could `std::string` operations serve the purpose here? We had some `char *` issues with pybind11 and although there's no direct interface in optking, there was talk of moving from `char *`s to `std::string`s for readability.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/535#issuecomment-263942358:128,interface,interface,128,https://psicode.org,https://github.com/psi4/psi4/pull/535#issuecomment-263942358,1,['interface'],['interface']
Integrability,"Currently only SAPT(DFT) goes through `sapt_jk_terms.py`. I kind of hope that we can move more of the SAPT0 code over to something similar with Disp staying fully C++. We are going to gain a lot of SAPT0 capabilities soon like spin-flip SAPT, Sinf Exch-Ind and Exch-Disp, regularized SAPT, ISA Exch etc and the Python level interface should make it easier to handle without performance degradation. I think the proposed would work fine. You can use either of the following:; ```python; >>> psi4.core.get_variables() # Returns a dict of all variables; >>> psi4.core.has_variable(""CURRENT DIPOLE X"") # Returns a bool checking if the variable is set; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364689483:324,interface,interface,324,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364689483,1,['interface'],['interface']
Integrability,"Currently the OCC/DFOCC page of the docs makes no mention of frozen core.; DFOCC seems to default to all-electron, but _does_ seem to run with `set freeze_core true`.; OCC throws a RuntimeError, and claims that ""Frozen core/virtual not implemented in Orbital-optimized methods"". I can see two issues here:. 1. The error message from OCC suggests that none of the orbital-optimized methods in Psi4 support FC. This is either wrong and misleading (if DFOCC really does support FC) or DFOCC should also throw the same error.; 2. Regardless of the answer to 1, [the relevant doc page](http://www.psicode.org/psi4manual/master/occ.html) ought to have a few words about FC support or the lack thereof.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863:320,message,message,320,https://psicode.org,https://github.com/psi4/psi4/issues/1863,1,['message'],['message']
Integrability,"Currently the `Molecule.xyz()` method does not check the length of the array that it is getting. ```; >>> import psi4; >>> mol = psi4.geometry(""He 0 0 0\nHe 0 0 5""); >>> mol.xyz(3); [1] 26521 segmentation fault python; ```. This should be capped and provide a nice error message to the user. This should be a straightforward fix, the relevant file is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1675:271,message,message,271,https://psicode.org,https://github.com/psi4/psi4/issues/1675,1,['message'],['message']
Integrability,"Currently the integrals required in polarizable embedding models (PE and EFP) don't exploit any parallelization.; This should be fixed (by me) once Libint2 is in, because for larger systems, the computations become really slow. Routines:; - `electric_field_value`; - `induction_operator`; - `ao_multipole_potential`. The last routine should also be tweaked to be called only once with all site positions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2007:228,Rout,Routines,228,https://psicode.org,https://github.com/psi4/psi4/issues/2007,2,"['Rout', 'rout']","['Routines', 'routine']"
Integrability,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1986:69,interface,interface,69,https://psicode.org,https://github.com/psi4/psi4/issues/1986,2,"['interface', 'protocol']","['interface', 'protocols']"
Integrability,"Currently, Psi4 supports meta-GGAs that depend on the kinetic energy density. However, some meta-GGA functionals depend on the laplacian of the electron density in addition to or instead of the kinetic energy density. The missing pieces should be added so that also laplacian functionals could be used in Psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1734:40,depend,depend,40,https://psicode.org,https://github.com/psi4/psi4/issues/1734,2,['depend'],['depend']
Integrability,DCT and Linear Dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2231:15,Depend,Dependencies,15,https://psicode.org,https://github.com/psi4/psi4/issues/2231,1,['Depend'],['Dependencies']
Integrability,"DE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_; ```; Maybe cmake is looking for libiomp5.so under $MKLROOT (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl for me), when it is actually is in $MKLROOT/../compiler/lib/intel64/ (or other relevant architecture)?. It looks a lot more promising. Building now... Edit: Build failed at the same point as before during ""Performing configure step for 'psi4-core':""; ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package); ```; It looks like OpenMP_CXX_LIBRARY_DIRS doesn't get passed through to the makefile(s).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:4576,message,message,4576,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['message'],['message']
Integrability,"DF-CC freaks out when linear dependencies are present, and i tracked the issue to an inconsistency between reference_wavefunction_->nmopi() and reference_wavefunction_->Ca()->coldim(). The latter has the correct value when linear dependencies are removed. . Should nmopi() and Ca()->coldim() be consistent in this case?. Minimal input:; ```; molecule { ; o ; h 1 1.0; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; scf_type df; cc_type df; s_tolerance 1e-3; }; energy('ccsd'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120:29,depend,dependencies,29,https://psicode.org,https://github.com/psi4/psi4/issues/2120,2,['depend'],['dependencies']
Integrability,DF-DCT with Linear Dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233:19,Depend,Dependencies,19,https://psicode.org,https://github.com/psi4/psi4/pull/2233,1,['Depend'],['Dependencies']
Integrability,DFH: suppress DFH memory messages during SAD guess,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1104:25,message,messages,25,https://psicode.org,https://github.com/psi4/psi4/pull/1104,1,['message'],['messages']
Integrability,DFOCC's Final Energy Dependent on Whether User Energy Convergence Criteria Met,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:21,Depend,Dependent,21,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Depend'],['Dependent']
Integrability,DFTD4 interface in Psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1710:6,interface,interface,6,https://psicode.org,https://github.com/psi4/psi4/issues/1710,1,['interface'],['interface']
Integrability,DIIS and linear dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2217:16,depend,dependencies,16,https://psicode.org,https://github.com/psi4/psi4/issues/2217,1,['depend'],['dependencies']
Integrability,"Dear Andy,. The treatment of the spherical harmonic functions in gdma is a bit odd; (it was originally based on Cadpac code). The spherical harmonics are; the R_lm (no sqrt(2l+1/4pi) factor) so the coefficient of the z^n term; in R_n0 is always 1. The normalizing factor for z^n exp[-zeta r^2] is; attached to the contraction coefficents so one doesn't need to worry; about it any more. I got the coefficients for the R_lm using; Mathematica, so they should be alright, but I admit that I haven't; checked them for orthogonality. The ratio of the normalising factors for; x^ly^mz^n and z^(l+m+n) is applied to the density matrix in lines 1810; onwards of dma.f90, so the normalization is done there and it's only; necessary to accumulate the integrals over the products of x^ly^mz^n terms. But this means that the spherical harmonics as they appear in the; spherical-cartesian transformation in gdma.f90 are not actually; orthonormal as they stand. This is easier to handle than it might sound. As far as the fchk file is; concerned, it is only necessary to provide orbitals described in terms; of orthonormal spherical harmonics, and the corresponding density matrix. I hope this clarifies things. I may well have made some mistakes in; implementing it for the h functions, but I have checked it carefully; several times. What puzzles me is how the normalising coefficients for; the cartesian terms get into the fchk description in terms of spherical; harmonics. Best wishes,; Anthony. On 12/03/2019 18:36, Andy Simmonett wrote:; > I could well be misreading the code here, but I think there's a problem; > in the H function transformation. If I look at the transformation; > coefficients; > <https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git/blob/HEAD:/src/gdma.f90#l275>; > and compare them to Table 1 of this paper; > <http://onlinelibrary.wiley.com/doi/10.1002/qua.560540202/full>, there; > appears to be many discrepancies. The G functions that I looked at seem; > to match up perfectly, acco",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472175255:314,contract,contraction,314,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472175255,1,['contract'],['contraction']
Integrability,"Dear Anthony,. Thank you for the detailed explanation. In terms of spherical harmonics in Psi4, there are no hard coded terms anywhere as far as I can remember: all integrals are transformed on the fly, using a general regular solid harmonic generating routine. Therefore, G and H functions are both handled by the same arbitrary-order transformation code. Your illness-addled brain is still more powerful than mine, so apologies if I'm wrong here, but I think I have confirmed my error diagnosis from last night. I found my old Mathematica code for generating (real) regular solid harmonics and can exactly match the [L=5 transformation coefficients](https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git/blob/HEAD:/src/gdma.f90#l275), as well as the the coefficients listed in Table 1 of the GDMA manual. However, for the L<5 coefficients in gdma.f90 my RSH generating code does not match. I can get exact agreement for these lower angular momentum terms by adding a factor of; ![image](https://user-images.githubusercontent.com/201881/54278407-a47bc180-4568-11e9-8875-e9ea637c3c1b.png); to the generating code. Therefore it appears that there is an inconsistency in the Cartesian normalization convention between the {s,p,d,f,g} and the {h} functions in gdma.f90. I hope this helps,. Best regards,. Andy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253:253,rout,routine,253,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253,1,['rout'],['routine']
Integrability,"Dear Daniel,. I think you misunderstood the discussion. In the DFOCC module there are many methods and all of them have both DF and CD versions. All DF and CD methods are implemented in the exactly the same source codes. There is no separate programming for DF and CD methods and there is no any repetition. What we are discussing with Lori is something else. DF-CCSD code has many terms, the most expensive term is called PPL. For the PPL the default algorithm with the ""pure"" DF approach is:. D_ij^ab t_ij^ab = Tau_ij^ef W_abef. where W_abef tensor includes <ab|ef>_DF integrals (Einstein summation convention is used). Additionally, I have implemented the following hybrid approach recently:. D_ij^ab t_ij^ab = Tau_ij^ef <ab|ef>_DF/CD + W_ijam t_m^a. In the above formula <ab|ef>_DF/CD integrals are obtained using a DF/CD hybrid approach. I do not want to write too much details. CDS knows what I am doing and why I am trying it. Further, as you can see the explicit formulas are used are not identical with the default PPL algorithm. . DFOCC::ccsd_WabefT2() function computes: . D_ij^ab t_ij^ab = Tau_ij^ef W_abef. while DFOCC::ccsd_WabefT2_cd() function computes:. D_ij^ab t_ij^ab = Tau_ij^ef <ab|ef>_DF/CD. contraction. Hence, each function compute a different term indeed. The difference is not just the DF vs CD. Therefore, there is no repetition of codes, but there are similarities in both functions of course. @dgasmith @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-221157526:1214,contract,contraction,1214,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221157526,1,['contract'],['contraction']
Integrability,"Dear Psi4 Developers,. Is there any plan to add the newly DFTD4 interface in Psi4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1710:64,interface,interface,64,https://psicode.org,https://github.com/psi4/psi4/issues/1710,1,['interface'],['interface']
Integrability,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198:651,protocol,protocols,651,https://psicode.org,https://github.com/psi4/psi4/issues/2198,1,['protocol'],['protocols']
Integrability,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2542:1528,Rout,Routine,1528,https://psicode.org,https://github.com/psi4/psi4/issues/2542,1,['Rout'],['Routine']
Integrability,"Dear all,. I just made a clone of the psi4public. However, I got the error message ""Cannot find source file sapt_dft.cc"" when trying to compile psi4 (in a directory ""psi4public/build"") by either ""../configure.cmake"" or ""cmake .."". Is it a bug in psi4? Thank you. Cheers; Gao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55:75,message,message,75,https://psicode.org,https://github.com/psi4/psi4/issues/55,1,['message'],['message']
Integrability,"Decontracted orbital sets should go with decontracted fitting sets. The use of the decontracted basis in x2c is just in the diagonalization of T^2, so the orbitals are still solved in a contracted basis set. If you want to get orbitals / properties, then you might need to decontract the basis, although I'm not sure psi4 currently handles anything where core functions are that important.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252776511:186,contract,contracted,186,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252776511,1,['contract'],['contracted']
Integrability,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-132368809:342,message,message,342,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809,6,['message'],['message']
Integrability,"Density fitting can ""look"" like a 4-index integral as `(0p|qr)` which is how we compute them. CASM-style screening is unlikely to be able to be used in the contractions as it would make the GEMM's sparse rather than dense; however, the construction of the integrals can take some time and can benefit from this screening. The impact may be less, but still a useful thing to do!. Note: I am not proposing that you do this, just something to keep in mind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499#issuecomment-457966565:156,contract,contractions,156,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-457966565,1,['contract'],['contractions']
Integrability,Dependencies,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1278#issuecomment-426605622:0,Depend,Dependencies,0,https://psicode.org,https://github.com/psi4/psi4/pull/1278#issuecomment-426605622,1,['Depend'],['Dependencies']
Integrability,"Depends on how impatient the user is :) Actually, very nice, example.; Thanks!. On Fri, Apr 12, 2019 at 6:02 PM Lori A. Burns <notifications@github.com>; wrote:. > *still going*; >; > @psi-rking <https://github.com/psi-rking>, here's an example where; > dynamic level 2 might have kicked in a bit early?; >; > base) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-quaternary/objdir37: (1.3.x) grep '~' bgobbi_wb97x.out; > --------------------------------------------------------------------------------------------- ~; > Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > --------------------------------------------------------------------------------------------- ~; > Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; > --------------------------------------------------------------------------------------------- ~; > 1 -1771.54871790 -1.77e+03 8.23e-03 1.77e-03 o 2.50e-01 2.94e-02 o ~; > 2 -1771.54896434 -2.46e-04 4.20e-03 7.85e-04 o 3.99e-02 7.34e-03 o ~; > 3 -1771.54708256 1.88e-03 1.22e-02 2.75e-03 o 3.09e-02 7.32e-03 o ~; > 4 -1771.54962420 -2.54e-03 1.84e-03 4.35e-04 o 5.76e-02 7.34e-03 o ~; > 5 -1771.54991808 -2.94e-04 6.10e-04 1.42e-04 o 4.66e-02 7.34e-03 o ~; > 6 -1771.54999493 -7.68e-05 5.40e-04 1.21e-04 o 1.40e-02 1.83e-03 o ~; > 7 -1771.55001819 -2.33e-05 4.51e-04 8.25e-05 o 1.89e-02 1.84e-03 o ~; > 8 -1771.55002275 -4.56e-06 3.95e-04 7.58e-05 o 4.60e-03 4.59e-04 o ~; > 9 -1771.55002699 -4.24e-06 3.75e-04 4.74e-05 o 4.74e-03 4.59e-04 o ~; > 10 -1771.55002919 -2.20e-06 3.62e-04 3.71e-05 o 1.53e-02 1.38e-03 o ~; > 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; > 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; > 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; > 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; > 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; > 	Raising dynamic level to 2. ~; > ------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-482755167:0,Depend,Depends,0,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482755167,1,['Depend'],['Depends']
Integrability,"Deprecation message added! I'm less familiar with deprecating things in Psi4, so let me know if anything else should be done on that front.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1521761303:12,message,message,12,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1521761303,1,['message'],['message']
Integrability,Did you get a change to look at this and see if the alternative route does what you need?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-784450007:64,rout,route,64,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-784450007,1,['rout'],['route']
Integrability,"Did you run `make docs`? We've been discouraging users from building the docs themselves, as they require several extra dependencies and we have them hosted (http://sirius.chem.vt.edu/psi4manual/latest/index.html). However, the developers do need to be able to test the docs build, hence the Makefile target is still there. We do want to continue shipping samples in the tarball, as the documentation links to them on github. We can, however, be more careful about making sure they're up to date before packing the tarball. Also, we can drop git tracking of SUMMARY, since it's prone to reshuffling its contents and may show up as modified after a docs build. Would that help?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-22982958:120,depend,dependencies,120,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22982958,1,['depend'],['dependencies']
Integrability,Dipole polarizabilities error when linear dependencies are removed,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1998:42,depend,dependencies,42,https://psicode.org,https://github.com/psi4/psi4/issues/1998,1,['depend'],['dependencies']
Integrability,"Discovered while remedying test cases where reference numbers needed to be changed due to my upcoming #1143 fix. DFOCC gradients are not symmetrized. If you'd like an example, just look in the [reference output files](https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604)! Symmetry of the overlap gradient is broken in the seventh decimal place. The other terms have some errors, but much smaller. That the overlap gradient is most afflicted is unsurprising, since the overlap integrals are contracted against one of the many ""generalized Fock matrices"". This one depends on the 1RDM and 2RDM, which are not currently symmetrized. I'm hoping to include this in 1.3 with the #1143 fix, since this bug could lead to optimizations failing, as we saw with DFMP2 two weeks ago (#1483). Because individual terms are printed, the individual terms need to be symmetrized, and it may take me some time to find where the `symmetrize` calls need to be placed. If it takes too long, I'm fine with delaying to 1.4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504:519,contract,contracted,519,https://psicode.org,https://github.com/psi4/psi4/issues/1504,2,"['contract', 'depend']","['contracted', 'depends']"
Integrability,"Discovered yet again when trying to reproduce an issue reported on the forums. When I defined a custom basis set but forgot to include the final quadruple asterisk, the error message appeared when I attempted the scf and did not leave me any clues about what was wrong in the basis set. Such errors should be caught in the basis set input phase, where a usual error message can be printed. It would be useful to try a few other basis inputs that break the parser and verify that a useful error message is printed in the parsing phase.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1332:175,message,message,175,https://psicode.org,https://github.com/psi4/psi4/issues/1332,3,['message'],['message']
Integrability,"Do we have a figure in there yet illustrating the inter-fragment; definitions? I have no time to work on it today, but could tomorrow; (Saturday). On Fri, Dec 2, 2022 at 11:37 AM AlexHeide ***@***.***> wrote:. > @psi-rking <https://github.com/psi-rking> Can you give the optking docs; > another read through? Anything from your experiences with forum questions; > and such that we should add? If you have any thoughts on further clarifying; > the inter-fragment section that would also be super helpful. I'm printing; > the html now to make another editing pass.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2727#issuecomment-1335575353>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TEDXN7A6CEYGZ32SO3WLIXWFANCNFSM6AAAAAAQWELJAU>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1335593560:873,Message,Message,873,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1335593560,1,['Message'],['Message']
Integrability,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252927823:618,depend,dependencies,618,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823,2,['depend'],"['dependencies', 'dependency']"
Integrability,Docs Update: NumPy Interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2087:19,Interface,Interface,19,https://psicode.org,https://github.com/psi4/psi4/issues/2087,1,['Interface'],['Interface']
Integrability,"Does the overall energy look sensible when you've got the additional diffuse functions? . I occasionally find that def2-TZVPD converges to some odd state with strange properties (energy, dipole etc). I'd put it down to some form of numerical difficulties as I could usually use a mixed basis of def2-TZVP on some atoms and def2-TZVPD on others and get logical values (identity of which atoms to change was system dependent, but often H is the main culprit).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698:413,depend,dependent,413,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698,1,['depend'],['dependent']
Integrability,"Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; bad eigenvalue in the DF metric, though I have traps in for this. Compiling; a fork to check this out. -Rob. On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; wrote:. > The following either gives NaN energy or (positive) 60,000 [Eh] depending; > on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ; > seem to check out, did not try larger.; > ; > molecule mol {; > 0 2; > C -2.83891 -0.84747 -0.20778; > N -2.06959 -0.27604 0.77905; > C -0.85937 -0.82512 0.74757; > N -0.82980 -1.74677 -0.21226; > C -2.05910 -1.77487 -0.83179; > C -2.45490 0.86620 1.59959; > C 0.35903 -2.49473 -0.61265; > F -1.01767 1.46174 -1.11980; > B 0.28985 1.63764 -0.63648; > F 0.23738 1.82826 0.77419; > F 0.89453 2.73957 -1.24020; > F 1.05039 0.46734 -0.88673; > H -0.02604 -0.54755 1.38339; > H -2.27287 -2.45330 -1.64959; > H -3.86751 -0.55086 -0.37733; > H -3.45079 0.68580 2.01748; > H -1.72185 0.98138 2.40249; > H -2.44673 1.75972 0.96603; > H 0.98379 -1.85263 -1.24323; > H 0.91655 -2.78676 0.28358; > H 0.03922 -3.39046 -1.15377; > C 2.81822 0.12352 1.52490; > C 3.26768 -0.78277 0.56145; > H 3.28632 0.11977 2.50813; > H 2.01109 0.81253 1.27433; > N 3.64537 -1.55240 -0.23308; > }; > ; > set {; > basis cc-pVQZ; > scf_type df; > guess gwh; > reference rohf; > }; > ; > energy('SCF'); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215879353:331,depend,depending,331,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215879353,1,['depend'],['depending']
Integrability,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-191034927:604,message,message,604,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927,1,['message'],['message']
Integrability,"Doesn't seem to be working too great; I get on my machine; ```; $ psi4 -n 8 ; 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; Traceback (most recent call last):; File ""/home/work/psi4/install.susi/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/home/work/psi4/install.susi/lib/psi4/driver/p4util/util.py"", line 230, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; ```; and the result is the same regardless of the guess...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290:472,message,message,472,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290,1,['message'],['message']
Integrability,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1295:1242,message,message,1242,https://psicode.org,https://github.com/psi4/psi4/issues/1295,1,['message'],['message']
Integrability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp ; -- Found OpenMP_Fortran: -qopenmp ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:4049,wrap,wrapper,4049,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,1,['wrap'],['wrapper']
Integrability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given arguments:. ""VERSION_LESS"" ""4.9"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:168 (include). -- Configuring incomplete, errors occ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4348,wrap,wrapper,4348,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,1,['wrap'],['wrapper']
Integrability,"Einsums is currently going to be made an optional dependency; and therefore, MP2-F12 will be made optional. There are some condo compiler issues we're not ready to tackle just yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-2414129359:50,depend,dependency,50,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2414129359,1,['depend'],['dependency']
Integrability,"Either apply changes from evaleev/libint v1 to psi4/libint _or_ make psi4/libint a buildsystem wrapper around evaleev/libint v1 like https://github.com/python-cmake-buildsystem/python-cmake-buildsystem . Net effect is the Libint we call must be LGPL-3.0, not GPL-2.0+ as at present.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693:95,wrap,wrapper,95,https://psicode.org,https://github.com/psi4/psi4/issues/693,1,['wrap'],['wrapper']
Integrability,"Either of those dft gradients calls works, though I exclusively use the former. They work b/c all functionals are added to procedures[‘energy’] and all but dh are added to procedures[‘gradient’]. (see snippet below.) (They’re missing from procedures['property’] and that should probably be remedied. So DFT is generally in good shape: energies work, gradients work (analytic except findif for dh), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:729,Integrat,Integrate,729,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,2,"['Integrat', 'rout']","['Integrate', 'routines']"
Integrability,Enable interoperability via The MolSSI Driver Interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676:7,interoperab,interoperability,7,https://psicode.org,https://github.com/psi4/psi4/pull/1676,2,"['Interface', 'interoperab']","['Interface', 'interoperability']"
Integrability,Error Extraction Mangles Message,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920:25,Message,Message,25,https://psicode.org,https://github.com/psi4/psi4/issues/1920,1,['Message'],['Message']
Integrability,"Even when using all the parameters suggested by @PhillCli in a test sript, the calculation does not complete. The SCF part is executed, but it seems that there is a problem when building the basis set for the SAPT calculation. Calculation stops at this point. ![Screenshot from 2023-06-27 09-54-28](https://github.com/psi4/psi4/assets/17604953/24f20f18-3708-46dc-b80b-681a98083799). Displaying the following message in the executation terminal. ![Screenshot from 2023-06-27 09-57-24](https://github.com/psi4/psi4/assets/17604953/6fdd54b8-3210-4b4e-a000-ed640f187e7c). The script I am using for the test . ```python; import psi4; import time; psi4.core.set_output_file('output.dat', False). he2_geometry = """"""; He; --; He 1 {0}; """""". Rvals = [2.5, 3.0,]. start = time.time(); psi4.set_num_threads(4); psi4.set_memory(""30000 MB""). psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""direct"",; ""df_basis_scf"": ""def2-universal-JKFIT"",; ""df_basis_sapt"": ""aug-cc-pv6z-ri"",; ""basis_guess"": ""aug-cc-pvdz"",; ""basis"": ""d-aug-cc-pv5z"",; ""guess"": ""sad"",; ""maxiter"": 300,; ""e_convergence"": 1e-10,; ""d_convergence"": 1e-10,; }; ). ecp = {}. for R in Rvals:; he2 = psi4.geometry(he2_geometry.format(R)); ecp[R] = psi4.energy('sapt0', molecule=he2). # Prints to screen; print(""Interaction Energies\n\n""); print("" R E_int ""); print(""---------------------------------------------------------""); for R in Rvals:; e = ecp[R] ; print("" {:3.1f} {:1.6f}"".format(R, e)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172:408,message,message,408,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172,1,['message'],['message']
Integrability,"Eventually, I would need it in the AO basis. If it is possible to access all information (contractions, etc.) of the basis set and the matrix elements, I should be able to extract the required data, which would be great. I would already be happy to try this with the unrelaxed dm, to get things working, and then switch to the relaxed on, once it is available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260369576:90,contract,contractions,90,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260369576,1,['contract'],['contractions']
Integrability,"Excellent call, Jet - I've updated the dependencies to properly reflect how the PB11 deps get introduced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681:39,depend,dependencies,39,https://psicode.org,https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681,1,['depend'],['dependencies']
Integrability,"Excellent, thanks, Rollin. Daniel Smith brought up the possibility that we might add a little function; to the driver to automate dihedral scans. That seems like a good idea.; This input isn't super complicated, but nevertheless I suspect some users; would appreciate automating these loops in a pre-packaged library routine. On Mon, Mar 28, 2016 at 4:55 PM, Rollin King notifications@github.com; wrote:. > I've just issued a pull request with some changes to the fixed-coordinate; > optimizations. With that code, I am able to get a good dihedral scan for; > HOOH in C2 with the input below. (A reminder that, in general, such scans; > can have erratic jumps since this is not following an IRC, but HOOH is so; > well-behaved the result is smooth and symmetric anyway.); > ; > molecule HOOH {; > 0 1; > H; > O 1 0.90; > O 2 1.40 1 100.0; > H 3 0.90 2 100.0 1 -175.0; > }; > ; > set {; > basis 6-31G*; > scf_type df; > guess sad; > ints_tolerance 1.0E-8; > }; > ; > start_angle = -175.0; > steps = 36; > step_size = 10; > ; > dihedrals = [""1 2 3 4 {}"".format((counter \* step_size) + start_angle) for counter in range(0, steps)]; > ; > SCF_Energies = []; > ; > for dihedral in dihedrals:; > set optking { fixed_dihedral = $dihedral }; > optimize('scf'); > SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ); > ; > for i in range(steps):; > print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); > ; > Note that at present the optimizer does not of its own volition head; > through the discontinuity at 180, even if that path is the shortest to the; > fixed value. Thus, I began at -175 and started up.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-202577523",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202622738:317,rout,routine,317,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202622738,1,['rout'],['routine']
Integrability,"Explanation:; When attempting to run gradients with CC2 or CC3 using density fitting (but not CCD, CCSD, or CCSD(T), the computation fails when attempting to initialize a new DPD instance, as the old one was not properly freed. When testing with BCCD, it failed due to the DF_BASIS_CC not being automatically set (and it didn't seem to accept my attempts to set it). Version: 1.4rc1; Installation source: conda install psi4 -c psi4/label/dev. Error message; ```; Traceback (most recent call last):; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 24, in <module>; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 675, in gradient; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver_cbs.py"", line 1960, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2731, in run_ccenergy_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: Attempting to initialize new DPD instance before the old one was freed.; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1615423313523/work/psi4/src/psi4/libdpd/init.cc on line: 68; The most recent 5 function calls were:; ```. Minimal example; ```; molecule {; H; H 1 1; }. set cc_type df. gradient('CC2/cc-pVDZ'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2136:449,message,message,449,https://psicode.org,https://github.com/psi4/psi4/issues/2136,1,['message'],['message']
Integrability,Extend ddx interface by support for dd-LPB,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2918:11,interface,interface,11,https://psicode.org,https://github.com/psi4/psi4/pull/2918,1,['interface'],['interface']
Integrability,"FWIW I think all DF codes should just call the orthogonalization routines in `orthog.cc`. You can use them either in the symmetric mode or the asymmetric mode. In the symmetric mode you contract with the matrix `X` that is produced by the orthogonalization; for the asymmetric one you can build the inverse matrix with `S^-1 = X X^T`. As I explain in [arXiv:2106.11081](http://arxiv.org/abs/2106.11081), this should eliminate any numerical instabilities from the density fitting routines.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-907677526:65,rout,routines,65,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-907677526,3,"['contract', 'rout']","['contract', 'routines']"
Integrability,"FYI you can link to the actual code line by clicking on it and pasting the URL into the message (I then got fancy and renamed the link, so you don't see some horrendous url).... [lreri.cc:720](https://github.com/psi4/psi4public/blob/master/src/lib/libthce/lreri.cc#L720). and as you can see by following said link, line 720 is a blank line above a constructor definition...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157#issuecomment-128492830:88,message,message,88,https://psicode.org,https://github.com/psi4/psi4/issues/157#issuecomment-128492830,1,['message'],['message']
Integrability,"Fewer compilers working is less of an issue as we push more users towards; the binary distribution. And is only a temporary problem, anyway. Is icpc; 15.0 recent enough to support all the standards we need?. On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard notifications@github.com; wrote:. > For me the biggest pro of C++11 is that is reduces the amount of code I; > have to write/maintain/debug.; > - Defaulted (and deleted) constructors and assignment operators; > (mentiond by @dgasmith https://github.com/dgasmith); > - Liberal use of STL containers and unique_ptr means you should rarely; > have to write a destructor, and often don't have to write a copy constructor; > - Constructor delegation; > ; > Cons:; > - Template programming results in nasty compiler error messages that; > take experience to figure out; > - Overuse of templates, auto, decltype, etc, can result unreadable; > code; > - This can somewhat be fixed in the new PR workflow. Don't accept; > PRs which are a mess; > - Some C++11 patterns can be intimidating to people who are still; > learning basic C++; > ; > As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops; > all do), it should generally be embraced, with some reservations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182588993:771,message,messages,771,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182588993,2,['message'],['messages']
Integrability,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:635,message,message,635,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213,3,"['INTERFACE', 'message']","['INTERFACE', 'message']"
Integrability,"Firstly, wow, nice doing this benchmark. @andysim wrote:; > The direct range-separated code worked fine, confirming that the derivative integrals were correct. You are talking about the complete direct RSF gradient code? because it has also been disabled in the driver. The manual only ever explicitly told that the DF gradient code is not working, i believe. I actually asked about this once in the forum: http://forum.psicode.org/t/lrc-dft-gradients-time-plan/140/4 ; Basically my test back then caused me to suggest the route (direct and not DF gradients) @raimis is trying out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351404019:523,rout,route,523,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351404019,1,['rout'],['route']
Integrability,Fix GEMM errors in presence of linear dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2232:38,depend,dependencies,38,https://psicode.org,https://github.com/psi4/psi4/pull/2232,1,['depend'],['dependencies']
Integrability,Fix a file deleting in JSON wrapper,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1180:28,wrap,wrapper,28,https://psicode.org,https://github.com/psi4/psi4/pull/1180,1,['wrap'],['wrapper']
Integrability,Fix bug in lpb fock routine and update tests,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2963:20,rout,routine,20,https://psicode.org,https://github.com/psi4/psi4/pull/2963,1,['rout'],['routine']
Integrability,Fix memory leak of all DFT integration coordinates,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2352:27,integrat,integration,27,https://psicode.org,https://github.com/psi4/psi4/pull/2352,1,['integrat'],['integration']
Integrability,Fix possible unsigned subtraction wrap around.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/739:34,wrap,wrap,34,https://psicode.org,https://github.com/psi4/psi4/pull/739,1,['wrap'],['wrap']
Integrability,Fixing thread synchronization in AIOHandler.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/609:14,synchroniz,synchronization,14,https://psicode.org,https://github.com/psi4/psi4/pull/609,1,['synchroniz'],['synchronization']
Integrability,"Follows from discussion in https://github.com/psi4/psi4public/issues/103 and a bit in https://github.com/psi4/psi4private/issues/101. We'd like reference `rhf`, `rohf`, etc. to behave exactly as they do at present, that is cry foul if inappropriate for active molecule or unavailable for the method at hand. But we'd like a new value `auto` for `reference` keyword that is the default and switches between rhf and uhf>rohf as appropriate, depending solely on the molecule. . Exactly how to this this is up for discussion. It's most appropriately done at activate-molecule-time, but don't have the machinery to track and undo that setting in the activalte molecule code. Maybe a generic function that's called in each run_\* in proc.py with inputs of the most restrictive reference setting among the called modules (e.g., rhf/rohf for run_detci that traverses scf _and_ detci modules). Then the generic function sets the reference to something legit (e.g., `rhf`) for the scope of the energy/grad/etc call. And the optstash object in each of the proc.py routines can be used to undo the driver-level reference setting and return to the user or default setting.; - [ ] implement above. break this into smaller bullets as needed.; - [ ] also, warn in output that reference changing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118:439,depend,depending,439,https://psicode.org,https://github.com/psi4/psi4/issues/118,2,"['depend', 'rout']","['depending', 'routines']"
Integrability,"For QM/MM, since you have many thousands of points, most QM programs use a simple external file for point charges so one does not have to send everything through the slower-but-smarter ""molecule recognition"" machinery. Besides, these external files are easier to write by the MM program interface as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625891857:287,interface,interface,287,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625891857,2,['interface'],['interface']
Integrability,"For future reference: To further decouple the finite difference code from the Psi4 core, let's recreate CdSalcList in QCDB. The PetiteList dependence appears to be exclusively through [compute_atom_map](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.cc#L244) which [already exists](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsmolecule.py#L3192) in QCDB.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148#issuecomment-430334458:139,depend,dependence,139,https://psicode.org,https://github.com/psi4/psi4/issues/1148#issuecomment-430334458,1,['depend'],['dependence']
Integrability,"For historical reasons, Mk-MRCC was only implemented in Psi4 assuming small active spaces, and `psimrcc` rightly gives you [two](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L114-L124) [warnings](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L130-L143) that the equations it is using are not the exact Mk-MRCC equations if your active space is any larger. If you use Mk-MRPT2, the first warning fires, but the second does not. Further, the error message is specific to Mk-MRCC and says nothing about Mk-MRPT2. Is the Mk-MRPT2 procedure implemented in `psimrcc` exact or approximate? If it's exact, we need to stop the first warning from firing for Mk-MRPT2. If it's approximate, we need to make sure the second warning does fire for Mk-MRPT2. I checked the original paper, but couldn't find a clear statement either way, and I'd rather not learn Mk-MRCC theory just to fix this error message. I'm going to get back to giving `psimrcc` a wavefunction, so I'll fix this as part of that PR. I need to touch this part of the logic anyways. @fevangelista? @andysim?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877:497,message,message,497,https://psicode.org,https://github.com/psi4/psi4/issues/1877,2,['message'],['message']
Integrability,"For me the biggest pro of C++11 is that is reduces the amount of code I have to write/maintain/debug.; - Defaulted (and deleted) constructors and assignment operators (mentiond by @dgasmith); - Liberal use of STL containers and `unique_ptr` means you should rarely have to write a destructor, and often don't have to write a copy constructor; - Constructor delegation. Cons:; - Template programming results in nasty compiler error messages that take experience to figure out; - Overuse of templates, auto, decltype, etc, can result unreadable code; - This can somewhat be fixed in the new PR workflow. Don't accept PRs which are a mess; - Some C++11 patterns can be intimidating to people who are still learning basic C++. As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops all do), it should generally be embraced, with some reservations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182577836:431,message,messages,431,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182577836,2,['message'],['messages']
Integrability,For the linear dependency problems you might want to have a look at Knizia et al in 10.1021/ct200239p. Replacing the use of inverse overlap matrices with the solution of linear equations makes the algorithms much more tolerant to linear dependencies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252990815:15,depend,dependency,15,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252990815,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:334,depend,depend,334,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742,3,['depend'],"['depend', 'dependencies']"
Integrability,"From a strategic point of view, the answer is yes, it would be a great; addition. However, it would depend on the technical details ... how much work it; would be to get this working, how soon we could do it, etc. I'll try to; discuss with Lori and Daniel S. We've already done a ""soft"" 1.0 release (not heavily advertized yet). On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want; > to stick to DMRG-SCF?; > ; > If you would like to, I can release an intermediate version v1.7, and you; > can use the plugin (or copy parts of); > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > to run the CASPT2 calculations...; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220613816:100,depend,depend,100,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220613816,1,['depend'],['depend']
Integrability,"From discussion today, the following tasks to wrap up https://github.com/psi4/psi4public/issues/103; - [x] In driver.py, delete reference-bearing methods from procedures table (multiple places). Delete table:energy_scf rst table and its analogies. Salvage 'hf' from them and move it into the main rst table.; - [x] In proc.py, remove much of parse_scf_cases, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [x] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [x] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117:46,wrap,wrap,46,https://psicode.org,https://github.com/psi4/psi4/issues/117,1,['wrap'],['wrap']
Integrability,"From the cfour email chain today, it sounds like `CFOUR_NUM_CORES` is widespread. I'll add it to the whitelisted envvars. > export CFOUR_NUM_CORES=20; >; > From my experience I can say that using more than 4 processors will not increase performance and even sometimes the worse. Of course that depends also from the kind of computation (optimization, frequency, …).; > ; > Best regards,; > Alberto",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/661#issuecomment-289809443:294,depend,depends,294,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-289809443,1,['depend'],['depends']
Integrability,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853#issuecomment-343702224:673,depend,dependency,673,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224,1,['depend'],['dependency']
Integrability,"Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:5350,rout,routine,5350,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['rout'],['routine']
Integrability,"Further discussion of replacing `libpsio` should be moved to a new issue. As for your specific proposal:. I'm not familiar with Q5Cost, and a quick Google search gives me a 14-year-old manual with so many out-of-date links that I doubt Q5Cost is actively maintained. That's a compelling argument against adopting it. Q5Cost was a proposed standard format for tensors-with-metadata. If MRCC is the only other major user and we have no reason to believe in other users, interoperability is not a compelling reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2725#issuecomment-1272030427:468,interoperab,interoperability,468,https://psicode.org,https://github.com/psi4/psi4/issues/2725#issuecomment-1272030427,1,['interoperab'],['interoperability']
Integrability,"Further note that importing numpy first won't fix everything. Accelerate-linked `import psi4` can still break numpy linalg. Whether it's fixed by Accelerate to Numpy or Accelerate to mkl-rt-linked Numpy is undetermined. Seen in evec of degen pair of hessian ; ```projhess = np.array([[ 0.0159, 0.0000, 0.0000, -0.0069, -0.0000, 0.0000, -0.0069, -0.0000, 0.0000],; [ 0.0000, 0.0159, 0.0000, -0.0000, -0.0069, 0.0000, 0.0000, -0.0069, 0.0000],; [ 0.0000, 0.0000, 0.1832, 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, -0.0793],; [-0.0069, -0.0000, 0.0000, 0.0030, 0.0000, 0.0000, 0.0030, 0.0000, 0.0000],; [-0.0000, -0.0069, 0.0000, 0.0000, 0.0030, 0.0000, -0.0000, 0.0030, 0.0000],; [ 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, 0.0777, 0.0000, 0.0000, -0.0090],; [-0.0069, 0.0000, 0.0000, 0.0030, -0.0000, 0.0000, 0.0030, -0.0000, 0.0000],; [-0.0000, -0.0069, 0.0000, 0.0000, 0.0030, 0.0000, -0.0000, 0.0030, 0.0000],; [ 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, -0.0090, 0.0000, 0.0000, 0.0777]]); ```. And the code turned out to be fully up-to-date. My foolishness was in not using the dev env that properly sets up MKL from conda and instead just using Mac built-ins. CMake does not have the power to select/reject dependencies based on their `ldd` profile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-340284447:1208,depend,dependencies,1208,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-340284447,1,['depend'],['dependencies']
Integrability,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/926:1090,rout,routine,1090,https://psicode.org,https://github.com/psi4/psi4/issues/926,1,['rout'],['routine']
Integrability,"Generally psi4 is supposed to catch those and still finish gracefully, and with upcoming psi4 v1.4 one gets also more visible error messages (see PR https://github.com/psi4/psi4/pull/1862). But here psi4 is aborted which is indeed not user friendly.; I dont know the exceptions machinery well enough to say why but it happens also in the current developer version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241:132,message,messages,132,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241,1,['message'],['messages']
Integrability,GeomeTRIC Interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813:10,Interface,Interface,10,https://psicode.org,https://github.com/psi4/psi4/pull/1813,1,['Interface'],['Interface']
Integrability,"Gibbs and scf-guess work on clang but not gcc?!. Gibbs fails due to; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/lib/psi4/driver/driver.py"", line 1026, in optimize; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)). ValidationError: Point group changed! (cs <-- c2v) You should restart using the last geometry in the output, after carefully making sure all symmetry-dependent input, such as DOCC, is correct.; ```; Fixing by setting c2v symmetry. scf-guess fails due to; ```; TestComparisonError: 	UHF energy, SAD guess (a.u.): computed value (-99.3839116) does not match (-99.5312257) to 6 digits.; ```; Fixing by setting right occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237:564,depend,dependent,564,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237,1,['depend'],['dependent']
Integrability,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263272403:313,message,messages,313,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403,1,['message'],['messages']
Integrability,"Given recent experience with #2192 and #2193, it would be good to include a threaded run of quicktests as part of the automatically running test suite. Unfortunately, it's not clear to me if this is _possible_. According to Holger, ""Azure offers only paid parallel jobs by default, but one can request a free upgrade. GHA gives 2-core machines but not sure if one can run things in parallel."" If not possible, we should come up with a protocol for making sure parallel test suite is checked semi-regularly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2220:435,protocol,protocol,435,https://psicode.org,https://github.com/psi4/psi4/issues/2220,1,['protocol'],['protocol']
Integrability,"Given the reporter, the geometry they input is probably garbage. While I agree attempts to optimize from this are in vain, there should be a proper error message instead of just crashing with an obscure C error code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167:154,message,message,154,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167,1,['message'],['message']
Integrability,"Glad rpath behavior is making more sense, @jgonthier . Unless all dependencies are isolated behind one environment (conda strategy) or each dependency is isolated in its own environment (a programming-using-conda strategy, but hard when `/usr/` involved), it can be impossible for cmake to predict a safe `rpath` path. I regularly have to edit mine to get the right HDF5 linked. As I don't know a winning strategy, I think we can't guarantee the built exe/lib will run, only that the conda ones will. This does show we need better notes on the matter so people can diagnose and correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252908695:66,depend,dependencies,66,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252908695,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Glad you're finding QCSchema input useful!. Peter's right that not all calculations are possible at the moment through the schema input, most notably optimizations and the ""wrappers"" like cbs and nbody. What the schema is targeted to express at the moment are single-points, and that's how QCEngine is using it in the various <program>Harnesses. A major update coming to psi4 is the ""distributed"" driver that reworks wrapper communication to be more dict-like. The schema input to wrappers isn't well-defined yet, but it will probably inherit from the single-point schema (`AtomicInput`). I think then that what you're asking for could be arranged within schema_wrapper.py, but I'm just not sure yet. Glad to know you're interested, and we'll keep this use case in mind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349:173,wrap,wrappers,173,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349,3,['wrap'],"['wrapper', 'wrappers']"
Integrability,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/764#issuecomment-318659874:73,depend,dependencies,73,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874,1,['depend'],['dependencies']
Integrability,"Good day Sir,. Please I am still finding it difficult to generate the potential energy; data for the CF molecule. Would you be pleased to be of help? I don't mind; having a virtual meeting with you so you can assist me. I am the one one; doing this kind of research in my school and my supervisor doesn't know; much in this area. Please help 🙏 me.; If you request any information pertaining this, I will send it across; immediately. Thank you in anticipation. Kind regards; Sanctus. On Tue, Jun 18, 2024, 02:27 Jonathon Misiewicz ***@***.***>; wrote:. > Based on your writing, I assume you're a student researcher.; >; > Posting error messages *like this* is not a good way to get help. Large; > input files like this make it difficult for developers to find the actual; > problem. It's best practice to simplify the input file as much possible; > while still making the error clear. Sometimes, doing that can tell *you*; > where the problem is. If you don't know how to do this kind of; > troubleshooting, consult your seniors in your research group or your; > professor.; >; > I've played around with your latest input file and can confirm that you; > have made a fairly straightforward mistake, but you've discarded important; > information. As an exercise, please post a *simplified* input that; > reproduces your problem, and a *complete* error message. Once you've done; > that, I'll update the error message to be more explicit and offer some; > advice on how to bypass this. (Though once you understand the error, it's; > fairly straightforward.); >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/BA3DXYANKY74HK5CYFXZ6YLZH4TB5AVCNFSM6AAAAABI5T5SNGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCNZUGEYDEOJVGU>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549:635,message,messages,635,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549,7,"['Message', 'message']","['Message', 'message', 'messages']"
Integrability,"Good point -- @jeffschriber understands the issue and plans to address it sometime. The summary is that the new MBIS volume ratio functionality is only half available. The `energy(); oeprop(..., ""MBIS_VOLUME_RATIOS"")` route is fine, but `set scf_properties [mbis_volume_ratios]; energy()` fails b/c some necessary data (free atom volumes) isn't available. This isn't a regression. It'd just be nice to even up the capabilities, esp. as a qcschema run can only use the second form.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575:218,rout,route,218,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575,1,['rout'],['route']
Integrability,"Good to know!. And naming the block and applying `set basis_relativistic mysvp` fixes the original forum issue. It would still be nice if the error message had told him the problem was needing to define `basis_relativistic`, though...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1332#issuecomment-435700102:148,message,message,148,https://psicode.org,https://github.com/psi4/psi4/issues/1332#issuecomment-435700102,1,['message'],['message']
Integrability,"Good, thanks!. Assuming [this is the log](https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=i386&ver=1%3A1.2.1-1&stamp=1546604357&raw=0) to look at, a few comments:; - no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`); - psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`); - production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8; - source is probably a little out of date as this turned to c++14 around Christmas (`-- Setting (unspecified) option psi4_CXX_STANDARD: 11`); - I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`); - threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270.; - it's finding an AM=5 libint (`-- [36mFound Libint 5[m: /usr/lib/libint.a (found version 1.2.0)`). this'll make it through the tests but not good for production.; - aha, you're targeting v1.2.1, not v1.3! nevermind what I said about c++14; - `ImportError: Install python module networkx`; - Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824:920,message,message,920,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824,1,['message'],['message']
Integrability,"Good, this one's taken care of. In future, you can put `fixes psi4/psi4#487` in the commit message so that that issue will close automatically when the correcting PR gets merged into master. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/498#issuecomment-258581778:91,message,message,91,https://psicode.org,https://github.com/psi4/psi4/pull/498#issuecomment-258581778,1,['message'],['message']
Integrability,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122478325:633,message,message,633,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325,6,['message'],['message']
Integrability,"Great to see this capability added! A pdf in doc/external can probably be linked to from Sphinx docs, though it won't be searchable. If Stone isn't keen on the subdir of Psi4 scheme, we could arrange so that his code stays on his website, a conda recipe (or cmake Add_External_Project) curls it from the web, a patch converts it to build as a lib rather than an exe, and so libgdma.so stays outside psi4. Then the interface code between gdma and libmints stays in psi4. Would like to make the built library available from our conda channel, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201110783:414,interface,interface,414,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201110783,1,['interface'],['interface']
Integrability,"Great work, @bennybp and @loriab. I didn't realize just how half assed my attempt to interface ERD was until reviewing this PR (I lost steam a little when I realized we weren't getting any speedup over libint). The error checking to catch bad use cases is great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277415985:85,interface,interface,85,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277415985,1,['interface'],['interface']
Integrability,"Great! Provided the stability instability doesn't pop up again, this is ready. If you definitely want VWN3 renamed, I'll do it. But since the functional repository names it VWN3 and the coding of the functional is a lot harder to check than the assembly of the superfunctional, I think the extra notes I added to `set_description` will bridge the clarity gap.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-210126325:336,bridg,bridge,336,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-210126325,1,['bridg'],['bridge']
Integrability,"Great!. If you need more precision, set the PySCF grids by a pair of numbers, rather than by grid level. That should disable PySCF's numerical integration grid pruning. Psi is not pruned, by default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380:143,integrat,integration,143,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380,1,['integrat'],['integration']
Integrability,"Great, we were talking yesterday about how an interfaces doc page was needed, and here it is!. I was going to just mention topic here, but it turned into a write-up, so made an independent issue (https://github.com/psi4/psi4/issues/122). Would you take a look and see if you agree with its strategy?. On the `pcm {...}` block, is that the same syntax across the other QC programs that pcmsolver is integrated with?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/212#issuecomment-171668610:46,interface,interfaces,46,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171668610,2,"['integrat', 'interface']","['integrated', 'interfaces']"
Integrability,"Great. Let me explain the issue here. DFT does a numerical integration. If you want to compute a gradient, then _in principle_, you should include derivatives of the integration grid itself. Psi4 does not do that. (@susilehtola tells me that an open-source library in active development will handle that for us soon.) In the limit of an infinitely large grid, the error due to neglecting the geometry dependence of the grid vanishes. That error is _probably_ what you're seeing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791:59,integrat,integration,59,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791,3,"['depend', 'integrat']","['dependence', 'integration']"
Integrability,"Greeting friends,; As you may have heard we are in the process of several fundamental Psi4 change. These include: rewriting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:695,depend,dependancies,695,https://psicode.org,https://github.com/psi4/psi4/issues/468,2,['depend'],"['dependancies', 'depended']"
Integrability,"Greetings friends,; As per the developer wish list ( #402) it was decided that boost should be removed from Psi4 as there is little point in keeping it around when all the needed features are in C++11. When removing boost we gain:; - Fewer dependencies; - More canonical operations through C++ standards; - Simpler and more expressive python bindings; - Fewer python lib issues (in theory); - You will no longer get six pages of error messages when boost templates fail in some way; - Build simplification and faster compiler time; - Fewer compiler warning (lots from boost); - Less CI hassle; - There will be a party with cake and burning of a boost effigy (streamed and tweeted); ## . My primary goal is to tackle boost python and convert all existing code to PyBind11. Through this I will tackle the following boost libraries: python, tuple, lexical, shared_ptr, and math. I have a reasonable plan to accomplish this and initial tests show that I should be able to pull it off.; ## . However, there are other libraries that I could use help converting either in the form ideas or some of the grunt work. These are:. Boost filesystem:; - [x] `bin/fisapt/fisapt.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem/operations.hpp>`; - [x] `bin/psi4/export_plugins.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/psi_start.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/python.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/csg.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/cubeprop.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libefp_solver/efp_solver.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/filesystem.hpp>`. For most of these we would likely let Python handle the filesystem paths and just pass them into C-side as a `std::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450:240,depend,dependencies,240,https://psicode.org,https://github.com/psi4/psi4/issues/450,2,"['depend', 'message']","['dependencies', 'messages']"
Integrability,"Hello @raimis @loriab , I built psi4-v1.3.2 with visual studio 2019，I have changed the compilation option -openmp to -openmp:experimental(Although it does not fully support the syntax of openmp4.0), and fixed some include errors in the src。I compiled all the dependency libraries successfully，but at the end of the link an error occurred. I found that `FC_SYMBOL ""The type of Fortran name mangling"" 2`，I changed the value to 1 and get the same error. It looks like a problem with the calling interface of fortran, but i have no idea to solve it. Can you give me some ideas to solve this problem, thanks. ```; Error log:; [1262/1263] Linking CXX static library src\psi4\scfgrad\scfgrad.lib; [1263/1263] Linking CXX shared library src\core.cp37-win_amd64.pyd; FAILED: src/core.cp37-win_amd64.pyd src/core.lib ; cmd.exe /C ""cd . && ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"" -E vs_link_dll --intdir=src\CMakeFiles\core.dir --rc=""D:\Windows Kits\10\bin\10.0.17763.0\x64\rc.exe"" --mt=""D:\Windows Kits\10\bin\10.0.17763.0\x64\mt.exe"" --manifests -- C:\PROGRA~2\MICROS~3\2019\COMMUN~1\VC\Tools\MSVC\1421~1.277\bin\Hostx64\x64\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj src\CMakeFiles\core.dir\export_misc.cc.obj src\CMakeFiles\core.dir\export_oeprop.cc.obj src\CMakeFiles\core.dir\export_pcm.cc.obj src\CMakeFiles\core.dir\export_plugins.cc.obj src\CMakeFiles\core.dir\export_psio.cc.obj src\CMakeFiles\core.dir\export_trans.cc.obj src\CMakeFiles\core.dir\export_wavefunction.cc.obj src\CMakeFiles\core.dir\export_options.cc.obj src\CMakeFiles\core.dir\create_new_plugin.cc.obj src\CMakeFiles\core.dir\read_options.cc.obj s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:259,depend,dependency,259,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,2,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060:454,depend,dependencies,454,https://psicode.org,https://github.com/psi4/psi4/issues/2060,1,['depend'],['dependencies']
Integrability,"Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your patience. Between some life changes and issues compiling Psi4, I haven't been able to look at this issue previously. 1. Following Susi's suggestion, B3LYP converges straightforwardly. The SCF iterations takes one bad step early on, but this happens whether ADIIS is on or off.; 2. If I disable ADIIS completely using your original functional, it _still_ fails. Once the energy gets to around 284 Eh, it doesn't become negative again. **Contrary to the topic title, ADIIS is not at fault**.; 3. The title suggests that you've had previous ADIIS issues previously. If so, please send me specific examples. My experience has been that ADIIS itself is fine, but can break when other parts of the code are badly behaved. I'll do some digging to see if I can suggest an alternate protocol that will actually converge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430:846,protocol,protocol,846,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430,1,['protocol'],['protocol']
Integrability,"Hello,. Currently, there is the feature:; ```; set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; ```. Since one might start from a very reasonable conformer, there are some use cases; where you want to optimize the geometry, but keep the dihedral angles (from rotatable bonds); as close as possible to their initial values. The current interface makes it quite painful to setup this for one molecule.; And I need to do this for many molecules... Regards,; F.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3170:339,interface,interface,339,https://psicode.org,https://github.com/psi4/psi4/issues/3170,1,['interface'],['interface']
Integrability,"Hello,. I am new to PSI4 and am interested in enabling BrianQC with PSI4 with a license. The manual ([Interface to the BrianQC GPU module by the BrianQC team 2](https://psicode.org/psi4manual/master/brianqc.html)) states that it is necessary to compile PSI4 to enable BrianQC. However, I found a forum post ([PSI4 with BrianQC add-on 2](https://forum.psicode.org/t/psi4-with-brianqc-add-on/2124)) that implies that it is not necessary. Could I please get clarification on what currently needs to be done to enable BrianQC?. I am not extremely tech savvy and as such, I appreciate any help. I am using a Windows 11 PC. Thank you",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3132:102,Interface,Interface,102,https://psicode.org,https://github.com/psi4/psi4/issues/3132,1,['Interface'],['Interface']
Integrability,"Hello,. I realize that there is a warning about PCM failing with symmetry point groups however, it would be nice to add like a 1-3 line error message that would go a long way to helping out any user that has not read all of the docs very carefully.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1939:142,message,message,142,https://psicode.org,https://github.com/psi4/psi4/issues/1939,1,['message'],['message']
Integrability,"Hello,. It seems that there may be a problem with the normalization of the contraction coefficients in the molden wavefunction format for d functions (and higher). An example computation on an test molecule (NH3) where exactly the same basis sets were given to ORCA and PSI4 can be downloaded here:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. The molden files are almost the same, except for the contraction coefficients of the D functions. Is there an authoritative source that can tell us what the correct normalization of the contraction coefficients in the molden file should be? Having different variants of the same format is a pain in terms of post-processing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60:75,contract,contraction,75,https://psicode.org,https://github.com/psi4/psi4/issues/60,3,['contract'],['contraction']
Integrability,"Hello,. You should be able to bump up the version of chemps2 used in psi4 to 1.6 without any other modifications. It contains many performance improvements. In 1.7 (not released yet) there will be API changes. So the dmrgscf/dmrgci routine will need to be adapted simultaneously with the version tag. And it will also contain DMRG-CASPT2!. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/263:232,rout,routine,232,https://psicode.org,https://github.com/psi4/psi4/issues/263,1,['rout'],['routine']
Integrability,"Hello,; I installed Psi4 and chemps2 from Miniconda. How can I interface Chemps2 with Psi4? Thanks in advance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222644633:63,interface,interface,63,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222644633,1,['interface'],['interface']
Integrability,"Hello,; One of our users hit a problem last year on our supercomputer with his SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation for his jobs for which we decided that 4 cpus would give him optimum efficiency. However, the jobs were large enough as to take > 1000 hours (also frowned upon by our sysadmins) so I was asked to look into whether he could make better parallel use of the processors. We had some teething problems bringing our new supercomputer on line last year so I wanted to rule out issues on our side and I think I have now ruled out issues with IO, memory and threading (that had affected other programs).; Furthermore, during the investigations we noticed that ""top"" showed an almost equal alternation between one cpu and maximum cpus thus averaging above/below 50% use no matter how many cpus were requested. Roger Amos and I had a quick look at the SAPT papers and decided there wasn't anything intrinsic about the method that wouldn't allow it to parallel or would cause this behaviour (note I initially thought it might be a load imbalance between monomer basis and dimer basis calculations but it isn't). Also, subsequently we were asked to look into the performance of energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel alternation.; Do you have any thoughts on this and have suggestions for determining optimum number of processors (does it depend on memory?) for this sort of calculation?; Thanks.; Rika; PS Do you need an input deck for this? Originally, the smallest case he had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT job) but since then I think I have a 48 hr test case that will also display this behaviour. I'll need to ask the user for permission to pass it on first though.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57:1410,depend,depend,1410,https://psicode.org,https://github.com/psi4/psi4/issues/57,1,['depend'],['depend']
Integrability,"Hi @JonathonMisiewicz ; Thank you for your response. > Let us know if there are addons that you need but don't know how to get. (Examples: dftd4 for DFT dispersion corrections, cct3 for some exotic coupled cluster variants, cppe for polarizable embedding.). I am using psi4 through geomeTRIC to minimize the structures of small molecules.; The other dependencies which I had mentioned earlier was to generate the input file (.in file) for the minimization; `geometric-optimize --psi4 <input.in>`. I am able to do this as long as I provide the `input.in` file, i.e. psi4 is working just fine for me. So thanks a lot @loriab and @JonathonMisiewicz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1154722714:350,depend,dependencies,350,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1154722714,1,['depend'],['dependencies']
Integrability,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:222,message,messages,222,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360,1,['message'],['messages']
Integrability,"Hi @j3mdamas,. Yes, the defaults version 4.8.5 was just below our minimum of 4.9. And then we try to stay on the modern side of the string-passing change at gcc 5.1(https://greek0.net/blog/2016/10/29/gcc_compatibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-332960335:823,depend,dependency,823,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335,1,['depend'],['dependency']
Integrability,"Hi @kzinovjev great job adding this. . @loriab It would be great to have these available via the qcengine interface so we could store them in QCArchive when MBIS charges are requested on a calculation, can you adviseif any other changes would be needed to be made to make this possible?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635:106,interface,interface,106,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635,1,['interface'],['interface']
Integrability,"Hi @loriab @dgasmith,. Sorry I didn't update. I was able to compile the C code that I wanted using the newest gcc packages from conda (gcc_linux-64). From my side is all fine except that when we depend on psi4, we bring all its dependencies with us, and I was wondering if this gcc version differences may cause problems down the line. If you guys make psi4 work with the default gcc from conda, that would be ideal, but I am no one to ask for that from you guys :) you already do a very good job. I think that's all. Feel free to close this if you feel it makes no sense to continue open. Cheers,; João",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347174011:195,depend,depend,195,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347174011,2,['depend'],"['depend', 'dependencies']"
Integrability,"Hi All,. Trying to build from source here but I get the following errors:. ```; [ 11%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/transform_read_so.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_bw.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_mk.cc.o; [ 12%] Linking CXX static library libpsimrcc.a; [ 12%] Built target psimrcc; [ 12%] Building CXX object src/psi4/sapt/CMakeFiles/sapt.dir/wrapper.cc.o; [ 12%] Linking CXX static library libsapt.a; [ 12%] Built target sapt; Consolidate compiler generated dependencies of target scf_solver; [ 13%] Built target scf_solver; Consolidate compiler generated dependencies of target scfgrad; [ 13%] Built target scfgrad; Consolidate compiler generated dependencies of target l2export; [ 13%] Built target l2export; Consolidate compiler generated dependencies of target 3index; [ 13%] Built target 3index; Consolidate compiler generated dependencies of target ciomr; [ 15%] Built target ciomr; Consolidate compiler generated dependencies of target cubeprop; [ 16%] Built target cubeprop; Consolidate compiler generated dependencies of target disp; [ 16%] Built target disp; Consolidate compiler generated dependencies of target dpd; [ 25%] Built target dpd; Consolidate compiler generated dependencies of target filesystem; [ 25%] Built target filesystem; Consolidate compiler generated dependencies of target fock; [ 25%] Building CXX object src/psi4/libfock/CMakeFiles/fock.dir/DiskDFJK.cc.o; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:17: error: no viable overloaded operator[] for type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ~~~~~~~~^~~~~~~~~~~~~~; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:68: error: member access into incomplete type 'psi::Opt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3006:558,wrap,wrapper,558,https://psicode.org,https://github.com/psi4/psi4/issues/3006,1,['wrap'],['wrapper']
Integrability,"Hi Daniele. This combination is not supported. I think this functionality request is perhaps better aimed at the QCSchema developers (https://github.com/MolSSI/QCSchema/issues). One main issue is the ambiguity of what an extrapolation (or a composite recipe) actually means. Running CBS jobs via QCSchema is not implemented in Psi4, and my personal opinion is that it likely won't be implemented in Psi4 itself anytime soon. What may happen is that someone will take the CBS functionality out of Psi4, adapt it to create ""schema"" jobs for each calculation required in a similar way we do internally in the CBS wrapper, and then combine the individual atomic results to arrive at the composite result.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868806792:610,wrap,wrapper,610,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868806792,1,['wrap'],['wrapper']
Integrability,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220670249:430,depend,depend,430,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249,1,['depend'],['depend']
Integrability,"Hi Lori, . Thank you for your arrangements. I was in a trip and just returned. Now, I would like to catch up with psi4, otherwise it will a problem for me to proceed because of significant differences in my dfocc and the one in the psi4. . Now, how I can reach that repo? Because I need to slightly modify my tensor class. Further, I will add a new UHF-DF-CCSD code soon. Hence, before it I would like to synchronize my code with the public repo. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-444795651:405,synchroniz,synchronize,405,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-444795651,1,['synchroniz'],['synchronize']
Integrability,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105167250:532,Contract,Contract,532,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250,2,"['Contract', 'rout']","['Contract', 'routines']"
Integrability,"Hi Peter - typically it is the house's job to determine if a bug has been; resolved or not - did you all (1) find evidence of my reported bug and (2); find evidence that it was fixed? I did not report that one lightly. Also; quite worried - I am seeing indications you all are switching basis; function ordering from one perfectly well-defined lexical convention which; is well documented to yet another perfectly well-defined lexical; convention. Both equally valid except that the first has been baked into a; half-million line code over more than a decade. If the switch of basis; functions is made at a similar time, this will provide additional barriers; for our staff to verify your proposed fix. On Thu, May 19, 2022 at 10:32 PM Peter Kraus ***@***.***>; wrote:. > @robparrishqc <https://github.com/robparrishqc> libecpint is now used by; > default in Psi4 1.6 - could you check whether the issue is still present?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2564#issuecomment-1132490820>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKO3LYYQB4CGKQI4W2P73IDVK4PVRANCNFSM5UT7U6LA>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1133500319:1228,Message,Message,1228,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1133500319,1,['Message'],['Message']
Integrability,"Hi Psi4 developers,. I'd like to open discussion on making Psi4 packages on `conda-forge`. We at OpenFF have some projects that make heavy use of Psi4 and that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300:281,depend,dependencies,281,https://psicode.org,https://github.com/psi4/psi4/issues/2300,1,['depend'],['dependencies']
Integrability,"Hi Ryan,. Capturing cout in a string or stringstream and feeding it to psi::PsiOutStream is OK if the message to be printed is limited in time and volume. If by calling a single function of a library, it executes for a long time and prints a lot of lines over its execution time, it might be good to have a way to intermediary feed them to the psi::PsiOutStream. Else you have to wait till the end of execution to get any information at all. If something goes wrong, you then also don't get an indication where things might have gone wrong. So is there a possibility to redirect cout's stream directly to psi::outfile, with a continuous output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83085867:102,message,message,102,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83085867,1,['message'],['message']
Integrability,"Hi Yi,. Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:245,rout,routing,245,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,6,"['interface', 'rout']","['interface', 'routing']"
Integrability,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:631,depend,dependent,631,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214,1,['depend'],['dependent']
Integrability,"Hi all! Just a heads-up. Something I would like to add to this PR before it gets merged completely, is a framework for generating GauXC HDF5 reference files via the Psi4/GauXC interface. I have a lot of the framework for this lying around separately, and I am working on porting it over to Psi4 proper, hooked up to the Pytest setup that Psi4 has.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2045233243:176,interface,interface,176,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2045233243,1,['interface'],['interface']
Integrability,"Hi all, I have recently updated the algorithm to perform a shell-based LinK algorithm while maintaining atomic blocking to maximize parallel efficiency. This is consistent with the algorithm in the paper (as the first line of the algorithm is ""Loop over types (angular momenta, contraction, ...) of shell-pair blocks, and atom blocking is a valid way to block shell pairs"". I tried to implement a linK variant using only shell-blocking, and the parallel efficiency was severely impaired. Here are some timings results of the new updated LinK code (run on Pople Basis Sets):; ![LinK_timings_631gs](https://user-images.githubusercontent.com/60559795/147882191-40115cbd-56fa-47bc-90a4-d57e707cca47.png); ![LinK_timings_631pgs](https://user-images.githubusercontent.com/60559795/147882187-ca00313a-07cb-48b1-9628-1f491f083d49.png)![LinK_timings_6311gs](https://user-images.githubusercontent.com/60559795/147882185-d70f96d7-064b-4a92-a335-f4d707a2fa32.png); ![LinK_JK_ratios_pople](https://user-images.githubusercontent.com/60559795/147882192-1c6bcaf8-b01d-4574-98e1-710dafd1d74e.png). Core Developers, if you are able to, please prioritize the review of this PR. There are a plethora of new Psi features that would be contingent on the finalization of this PR (Direct-DFJ, CFMM, Split-JK architecture, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024:278,contract,contraction,278,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024,1,['contract'],['contraction']
Integrability,"Hi all,. As part of a large benchmarking study, I've been computing the interaction energies of various hexamine dimers. With PBEh-3c, I've gotten some suspiciously large errors relative to CCSD(T)/CBS. I have used 590, 99 (spherical,radial) points, and I've also compared the energies to Orca (using defgrid3... after recommendations from issue #2304). Psi4 and Orca differ by as many as .3-.4 kJ/mol, depending on the dimer, which is a large percent error. One test case is summarized below:. | Program | Monomer A (H) | Monomer B (H) | Dimer AB (H)| $E_{int}$ (kcal/mol)| ; |---------|-------------|-------------|-----------|-----------|; | Psi4 | -453.84229689692728 | -453.84229689783353 | -907.68447385499462 | 0.075263339533 |; |Orca | -453.842841688023 | -453.842841698644 | -907.685688152560 | -0.002990642998 |. | Program | $E_{int}$ (kJ/mol)| Notes|; |---------|-------------| ----|; | Psi4 | 0.31490181 | |; |Orca | -0.01251285 | |; | Benchmark | -0.00315431 | Focal Point CCSD(T)/CBS with Psi4 |. I have noticed this warning in all of my Psi4 hexamine/PBEh-3c files:; `Warning: Molecule has a spherically-symmetric moment of charge but lacks icosahedral, octahedral, and tetrahedral symmetry.` . CDS figures this has something to do with the grid placement. Any ideas of how to alleviate this warning while keeping the same geometries and/or what the energy difference could be attributed to? I've tried different basis sets, different number of grid points, `symmetry c1`, `molecule.symmetrize(1e-3)`, no pruning scheme (rather than `robust`). The only time I have been able to get the warning to go away is when I use `bsse_type='cp'`, but I really shouldn't be running the calculation with cp correction because that is already included in the PBEh-3c calculation. Output files for the above example are attached, as well as a graph of Psi4 and Orca interaction energies for all dimers tested. . [Psi4-214-int.txt](https://github.com/psi4/psi4/files/9200713/Psi4-214-int.txt); [Orca-21",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647:403,depend,depending,403,https://psicode.org,https://github.com/psi4/psi4/issues/2647,1,['depend'],['depending']
Integrability,"Hi all,. I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; # =======================; # ! sample input. memory 500 mb. molecule test {; Li 0.000 0.000 0.000; }. set reference uhf; set globals = {; scf_type direct; basis 6-31G; e_convergence 10; }. this_energy = energy('scf'); # =======================. running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64). The error message is: ; # =======================. Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; scf_helper(name, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; e_scf = PsiMod.scf(precallback, postcallback); RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; line: 339; # =======================. Is it a but or am I wrong anywhere?; I appreciate any help and suggestions,; Hao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7:504,message,message,504,https://psicode.org,https://github.com/psi4/psi4/issues/7,1,['message'],['message']
Integrability,"Hi all,. I have installed psi4-1.3 in Win10/WSL-Ubuntu18.04 successfully, and when run 'psi4 --test', only _dftd3_ and _grimme_3c_ failed. I have found that psi4-v1.3 integrated dftd3 shown error when run ""dftd3""under WSl:. **_Segmentation fault (core dumped)_**. Then I rebuild _dftd3_ under WSL and use the newly build _dftd3_, then the 'psi4 --test' show all pass. So, this is just a build-bug report.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1587:167,integrat,integrated,167,https://psicode.org,https://github.com/psi4/psi4/issues/1587,1,['integrat'],['integrated']
Integrability,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/915:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/issues/915,2,['interface'],['interface']
Integrability,"Hi everyone,. When I run the following input I get different energies depending on the diag_method. While RSP gives the correct zeroth root of H0 as the ground state energy, the default one gives the first root energy as the ground state energy. With RSP Total CI energy = -149.601664883615285; with the default one Total CI energy = -149.577513236489096. İnput:; ```; molecule {; 0 1; O; O 1 1.2156; symmetry c1; }. set {; basis 6-311++G(d); reference rohf; frozen_docc [7]; frozen_uocc [35]; diag_method rsp; }; energy('detci'); ```; @dgasmith @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1281:70,depend,depending,70,https://psicode.org,https://github.com/psi4/psi4/issues/1281,1,['depend'],['depending']
Integrability,"Hi psi4 experts. psi4 shows promising functions and I am trying to install psi4 on my Ubuntu 20 with the command. `conda create -n p4env python=x.x psi4 -c psi4/label/dev`. But I got error messages:; ```. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']; python=3.9The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. I am new to psi4 and I hope someone can help me to solve this problem. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390:189,message,messages,189,https://psicode.org,https://github.com/psi4/psi4/issues/2390,1,['message'],['messages']
Integrability,"Hi!; I am new to QM calculation, and I found your software really helpful! Your works are absolutely amazing!; These days I am trying to do LMO analysis and get centers for each orbitals. I am using Boys localizer and I get an matrix L. I was told that centers are given by <LMO_i|r|LMO_i>, where LMO_i is the i th LMO, and r is the eletron position operator. I wonder how should I calculate this integration? Thanks a lot!; Look forward to hearing from you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3015:397,integrat,integration,397,https://psicode.org,https://github.com/psi4/psi4/issues/3015,1,['integrat'],['integration']
Integrability,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:1378,integrat,integrated,1378,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906,1,['integrat'],['integrated']
Integrability,"Hi, I noticed some odd ghosting behavior when doing interaction energy calculations on molecules containing Iodine. . When manually doing the counterpoise correction for a non-I-containing molecule, Psi4 reads the ghosted atoms properly and computes a sensible interaction energy (see `correctly-ghosted.txt`). However, when manually doing the counterpoise correction for an I-containing molecule, Psi4 does not ghost the atoms at all, and does the exact same calculation three times, resulting in an incorrect interaction energy (see `incorrectly-ghosted.txt`). The (much easier) workaround here is to counterpoise correct using the bsse_type=""cp"" interface, but I wanted to bring this to your attention anyways. [correctly-ghosted.txt](https://github.com/psi4/psi4/files/1458283/correctly-ghosted.txt); [incorrectly-ghosted.txt](https://github.com/psi4/psi4/files/1458284/incorrectly-ghosted.txt). Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843:649,interface,interface,649,https://psicode.org,https://github.com/psi4/psi4/issues/843,1,['interface'],['interface']
Integrability,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144729559:301,message,message,301,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559,2,['message'],['message']
Integrability,"Hi, Ugur.; I've found that something had changed in molden file generation mechanism since https://github.com/psi4/psi4public/commit/521f06adb441ac1e2f1732eb1cd090190b409c49.; ""Normalized contraction coefficients"" in [GTO] section are differ. Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152795096:188,contract,contraction,188,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152795096,1,['contract'],['contraction']
Integrability,"Hi, sorry in advance for commenting knowing next to nothing. Looking at this commit: https://github.com/raimis/gau2grid/commit/0a6678572b9c9589320c3df0f277e88e6a572252 . I assume it's generating code which will be compiled at runtime with MSVC, which will become a dependency. Is it correct?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390243811:265,depend,dependency,265,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390243811,1,['depend'],['dependency']
Integrability,"Hi,. Hope you don't mind me asking if there's an ETA for the 1.1.0 release?; I ask only because I'd like to co-ordinate with the release schedule of our own software that has a dependency on Psi4. Thanks,. Matt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608:177,depend,dependency,177,https://psicode.org,https://github.com/psi4/psi4/issues/608,1,['depend'],['dependency']
Integrability,"Hi,. I am now using the developer version 1.4a2.dev215, and I realized that some of my calculation are not giving the same results as before. I asked someone to do the same calculation with the release version of psi4 and we indeed have something really different. We did H4, square shape. I enclose the output of both files. Note that this was done with the OpenFermion-Psi4 interface and the output contains HF, CISD, FCI and CCSD calculations. I do not see any difference in the settings, so I don't understand why I get wrong HF energy for instance. Can anyone see something or knows something about it ?. [version_1.4a2.dev215.txt](https://github.com/psi4/psi4/files/4579640/version_1.4a2.dev215.txt); [release_1.3.2.txt](https://github.com/psi4/psi4/files/4579639/release_1.3.2.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878:376,interface,interface,376,https://psicode.org,https://github.com/psi4/psi4/issues/1878,1,['interface'],['interface']
Integrability,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1902:39,message,message,39,https://psicode.org,https://github.com/psi4/psi4/issues/1902,1,['message'],['message']
Integrability,"Hi,. I just got an MRCC license and started toying around with the Psi4 interface. Unfortunately, it is not working for me. ; ```; molecule {; 0 1; O; H 1 1.0; H 1 1.0 2 110.0; }. set qc_module mrcc; optimize('ccsdt/cc-pvdz'); freq('ccsdt/cc-pvdz'); ```; Using the mrcc.2023-08-28.binary.tar.gz binary release, I just get a big bunch of file not found errors; ```; $ psi4 -n6 h2o.in ; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:72,interface,interface,72,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['interface'],['interface']
Integrability,"Hi,. MBIS calculation fails for iodine containing molecules with DZVP basis set using `psi4 1.4.1` and `psi4 1.6.1`. Here is a minimal reproducible example:; ```; molecule dummyol {; 0 1; C 0. -1.94 0.; I 0. 0.24 0.; H -1.04 -2.27 0.; H 0.52 -2.27 0.90; H 0.52 -2.27 -0.90; }; set {; guess sad; scf_type df; basis DZVP # works for def2-svp; e_convergence 8; d_convergence 8; }; e, wfn = energy('scf', return_wfn=True); oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). ```; The error message reads:; ```; Traceback (most recent call last):; File ""/home/anaconda3/envs/psi4-09-26-22/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/prop_util.py"", line 121, in free_atom_volumes; psi4.oeprop(at_wfn, 'MBIS_CHARGES', title=a_sym + "" "" + method, free_atom=True); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 74, in oeprop; oe.compute(). RuntimeError: ; Fatal Error: Atomic Number 53 unsupported by MBIS; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on line: 1871; The most recent 5 function calls were:. psi::OEProp::compute_mbis_multipoles(bool); psi::OEProp::compute(). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""BASIS"", ""DZVP""); core.set_global_option(""E_CONVERGENCE"", 8); core.set_global_option(""D_CONVERGENCE"", 8); e, wfn = energy('scf', return_wfn=True); --> oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Atomic Number 53 unsuppor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728:504,message,message,504,https://psicode.org,https://github.com/psi4/psi4/issues/2728,1,['message'],['message']
Integrability,"Hi,. Since 0.3.530 or so, all of the difficulties that I've had about compiling plugins have been worked out. I'm sure there are other possible schemes, but the one I have now is a `configure` shell script that writes a `Makefile` using some information from the new `psi4-config` ([link](https://github.com/rmcgibbo/resp2/blob/master/configure)). The remaining plugin-related question I have now is about ""installation"". If I want to distribute this plugin to other users (it's really just the `<plugin_name>.so` file, I don't have any obligatory Python code), and make it easy for them to install, I'd like to make something like `conda install -c rmcgibbo <my_plugin>` work. If this were a standard Python module, I'd install the package with a Pyton wrapper to `lib/python2.7/site-packages/`, since that'll definitely be on `sys.path` -- is that what I should do here too? Or is there an alternative more psi4-specific location in `share/psi4/` where they would ideally go?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229:754,wrap,wrapper,754,https://psicode.org,https://github.com/psi4/psi4/issues/229,1,['wrap'],['wrapper']
Integrability,"Hi,. from what I gather in the libint routines, the maximum angular momentum supported by psi4 seems to be G functions (l=4). Do you have any plans to get rid of this limitation?. cc-pV6Z has up to I functions (l=6), and ideally one would like to run forces (and semi-numerical Hessians), which means that the program should support integrals over l=7 functions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180:38,rout,routines,38,https://psicode.org,https://github.com/psi4/psi4/issues/180,1,['rout'],['routines']
Integrability,"Hi,; I was trying the MRCC interface in Psi4 to run energy('mrccsd(t)_l') but I run into a PSIO_ERROR. Input. ```; memory 126 Gb; molecule complex {; 0 1; C 0.028824000 0.102541000 0.329511000; H -0.846717000 0.257672000 -0.295811000; C 1.368536000 0.016176000 0.003655000; H 1.872535000 0.082040000 -0.957212000; N -0.055760000 -0.031179000 1.697636000; C 1.178669000 -0.178253000 2.203240000; H 1.426085000 -0.303457000 3.252661000; N 2.052611000 -0.167236000 1.184832000; C 3.504230000 -0.205550000 1.365908000; H 3.698001000 -0.576769000 2.380482000; H 3.898020000 0.813550000 1.260411000; H 3.939232000 -0.884942000 0.619049000; C -1.256640000 0.100763000 2.523448000; H -1.529670000 1.162452000 2.578623000; H -1.007837000 -0.272600000 3.525198000; H -2.062908000 -0.500349000 2.079371000; F 1.181657000 2.676729000 1.439625000; B 1.518848000 2.859437000 2.791181000; F 1.689389000 4.189751000 3.137207000; F 0.482658000 2.259079000 3.612149000; F 2.731761000 2.111893000 3.070818000; C 1.992235000 1.241852000 8.156885000; H 1.485477000 1.176688000 9.116348000; C 3.332840000 1.154673000 7.834922000; H 4.206519000 0.999649000 8.462845000; N 1.311649000 1.424993000 6.973626000; C 2.188563000 1.435214000 5.957752000; H 1.944614000 1.560136000 4.907488000; N 3.421451000 1.288054000 6.467033000; C 4.624491000 1.154329000 5.644658000; H 4.896627000 0.092348000 5.590783000; H 4.378873000 1.527036000 4.641881000; H 5.430033000 1.755038000 6.090598000; C -0.139438000 1.464529000 6.788437000; H -0.534567000 0.445964000 6.893963000; H -0.329914000 1.835298000 5.773051000; H -0.575851000 2.145114000 7.533419000; F 2.193639000 -1.420051000 6.719505000; B 1.853598000 -1.602720000 5.368653000; F 1.684676000 -2.933106000 5.022169000; F 2.887295000 -1.000476000 4.545917000; F 0.639066000 -0.856861000 5.091564000; }; set globals {; basis aug-cc-pVDZ; scf_type direct; freeze_core True; guess sad; basis_guess 3-21G; }; energy('mrccsd(t)_l'); ```. End of output. ```; *** tstart() called on r3584;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35:27,interface,interface,27,https://psicode.org,https://github.com/psi4/psi4/issues/35,1,['interface'],['interface']
Integrability,"Hi,; could you take a look at the attached runs. The tar.gz file includes three geometry optmmization jobs of the same molecule from three different starting conformations. They all fail on our cluster due to memory issues. The cluster is using cgroups. I am asking slurm for 10gb and specifying ```memory 8.0 Gb```. Two of the jobs are have the following error message (rec19_4405620.log, rec284_4405895.log):; ```slurmstepd: error: Detected 1 oom-kill event(s) in step 4405620.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler. ```. while the third has this error (rec24_4405625.log):; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1550197239473/work/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::tocwrite(unsigned long); ```. - One job (rec284_pid139597.out) was killed before the first scf even started.; - the other two were killed during the first gradient evaluation (rec19_pid139597.out, rec24_pid139597.out) . These are just three jobs out of 500 similar ones that failed. I picked them to show a couple of divers failures. The input files are included as well (*.dat).; I tried the same thing with B3LYP and it worked.; Psi4 used: ```Psi4 1.3rc2```. Any ideas?; Thanks,; Alberto; [psi4.wb97.tar.gz](https://github.com/psi4/psi4/files/3040711/psi4.wb97.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590:362,message,message,362,https://psicode.org,https://github.com/psi4/psi4/issues/1590,1,['message'],['message']
Integrability,"Hi. We run jupyter in a container. writing: import psi4; in a cell and then run it gives the error message (repeated at the ; bottom of mail). operating system:; NAME=""Ubuntu""; VERSION=""18.04.5 LTS (Bionic Beaver)"". psi4 version: 1.4+9485035. and. Python version = 3.9.6 | packaged by conda-forge | (default, Jul 11 ; 2021, 03:39:48); [GCC 9.3.0]; IPython version = 7.26.0. best regards; Sissel. ---------------------------------------------------------------------------; ImportError Traceback (most recent call ; last); /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call ; last); /tmp/ipykernel_64/253247311.py in <module>; ----> 1 import psi4. /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in ; [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61; 62 from psi4.core import set_output_file, get_num_threads, ; set_num_threads. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. On 2021-09-16 13:08, Jonathon Misiewicz wrote:; > A traceback is never adequate information for a bug report.; > ; > We need a Psi4 version number, exact steps to reproduce the error, and; > need to know what operating system you're using.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub [1], or unsubscribe; > [2].; > Triage notifications on the go with GitHub Mobile for iOS [3] or; > Android [4].; > ; > Links:; > ------; > [1] https://github.com/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607:99,message,message,99,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607,1,['message'],['message']
Integrability,"Hmm I definitely did, but don't anymore. Likely some of the cleaning that's been done lately removed dependency on a library that also defined a `str` class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/268#issuecomment-186931933:101,depend,dependency,101,https://psicode.org,https://github.com/psi4/psi4/pull/268#issuecomment-186931933,1,['depend'],['dependency']
Integrability,"Hmm thats actually kind of interesting. So I think the misunderstanding here is when you make `Matrix( num_irreps, nao, nmopi )`, as we do not support different symmetries along different axises nao is replicated along the axis so you have a `([nao, nao, …]` by `[nmopi[0], nmopi[1], …])` matrix. So when you do the AOTOMO, MO_RDM, AOTOMO.T transformation what you should _should_ end up with is a (nirrep, nao, nao) matrix where the ao contribution of each irrep is in a subsequent `(nao, nao)` block. However, since AO_RDM only has one dimension that `gemm` will only collect the first dimension (irrep). What you need to do is change:; `AO_RDM = SharedMatrix( new Matrix( nao, nao ) );`. to; `AO_RDM = SharedMatrix( new Matrix( num_irreps, nao, nao ) );`. and then sum through the irreps of AO_RDM. I don’t think we currently have a built-in routine to collapse irreps like this. Im hard pressed to call this last part a bug since this follows through on the matrix algebra and automatically summing is probably not wise. The first part where calling `gemm` on different irrep matrices should probably throw an error because this only works where the LHS has less irreps than the RHS; however, if the RHS has more irreps it will seg fault. As I said before, this is an interesting error as its a strange mix of opaque code and a small bug. Hopefully this is both the truth and makes sense, coffee should kick in soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/274#issuecomment-187694715:845,rout,routine,845,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187694715,1,['rout'],['routine']
Integrability,"Hmm, I do think we rely on `export OMP_NESTED=""FALSE` in some places depending on the scheme involved. Would there be a good place to add this to the docs?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/671#issuecomment-305371763:69,depend,depending,69,https://psicode.org,https://github.com/psi4/psi4/issues/671#issuecomment-305371763,1,['depend'],['depending']
Integrability,"Hmm, I wonder if some other dependency was detected in /usr such that it got baked into rpath at a high position. Depending on rpath/runpath, LD_LIBRARY_PATH may or may not trump it. Otherwise, I quite agree that you are typing sensibly and the computer is behaving not. `source activate` only works with bash– could that be the problem with that command? If you're on psi4/psi4 (CMR-KTB) and anything besides `psimrcc-fd-freq2` fails, yes, post it here. If you're on dgasmith/psi4 inversion (CMR-KTB-INV), then we're only up to 92% passing anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252823348:28,depend,dependency,28,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252823348,2,"['Depend', 'depend']","['Depending', 'dependency']"
Integrability,"Hmm, I've contracted that the wfn returned from Hessian shall always contain current E, G, H, and I don't want to break that. What do ppl think of freq/hessian fns optionally taking in kwarg `ref_wfn` and if a gradient's found on it (user responsibility that it should be sensible one), then G0 won't be recomputed. And that same G0 will be used to assess eq/non-eq status.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834#issuecomment-380230319:10,contract,contracted,10,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-380230319,1,['contract'],['contracted']
Integrability,"Hmm, that is odd. The `bsse_type` uses the `Molecule.extract_subsets` interface and gets around this a bit. @shannonhouck Do you think you could explore this a bit?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843#issuecomment-347015589:70,interface,interface,70,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-347015589,1,['interface'],['interface']
Integrability,"Hmm, the combo `maxiter=0, fail_on_maxiter=false` is averting the naive (or greedy) user who wants the convergence stamp _and_ ""minimal"" iterations, as opposed to someone who knows what he's doing and using maxiter as a declarative interface. If others like the exception for maxiter=0, I'll go along with it, but my inclination is for consistency with all other maxiter != 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-784475485:232,interface,interface,232,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-784475485,1,['interface'],['interface']
Integrability,"Hmm, there seems to be an issue with temporary files being left behind in the `energy` and `gradient` calls if they're not routed through the `cbs_gufunc` routines. If I call `clean()` in between the failing tests [like so for `cbs-xtpl-energy`](https://github.com/psi4/psi4/files/1886155/cbs-xtpl-energy-mod.txt), the test passes fine. `_cbs_gufunc()` calls `clean()` for single calls here:; https://github.com/psi4/psi4/blob/c1bb2fef750fc7a214fd873f8a7c095780017bf9/psi4/driver/driver_cbs.py#L1571-L1580",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379446318:123,rout,routed,123,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379446318,2,['rout'],"['routed', 'routines']"
Integrability,"Hmmm. Just looked at my implementation and saw this gem; ```; if(H->nirrep() > 1 || H->rowdim() != H->coldim() || H->rowdim() != 3*molecule->natom()); throw PSIEXCEPTION(""Molecule::symmetrize_hessian: Matrix cannot be symmetrized."");; ```; The routine is just to clean up an already symmetric Hessian, not to apply symmetry (years since I wrote it, so I'm having to trawl through code to put things back in RAM). It should be easy to use the CDSalc class to apply symmetry to the Hessian. I remember chatting with @loriab about that, btu can't find the code snippet. Will ping back when I find it. There's no reason I can think of for the cleanup code being restricted to C1 symmetry; it should only need small tweaks to work for all point groups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760#issuecomment-314470850:244,rout,routine,244,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-314470850,1,['rout'],['routine']
Integrability,"Holger, very glad you are taking this on!. On Fri, Apr 5, 2019, 2:32 AM Holger Kruse <notifications@github.com> wrote:. > Description; >; > This *work-in-progress* PR implements standard grid pruning techniques,; > where one assumes that the electron density is largely isotropic close to; > the atomic centre and thus coarse grids are sufficient. Typically the; > atomic integration sphere is divided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:372,integrat,integration,372,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,4,['integrat'],['integration']
Integrability,"Hooray, that looks great. Skipped or xfailed is no problem (just how we handle testing optional dependencies). Outright failed is a problem, but I don't see any of those. I think you're good to go. I wish I understood clearly what was causing your psi4conda problem, but that's awkward to debug. I suspect interference in python path btwn active python (in anaconda) and active psi4 (in psi4conda).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875260933:96,depend,dependencies,96,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875260933,2,['depend'],['dependencies']
Integrability,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855#issuecomment-343778590:165,wrap,wrappings,165,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590,1,['wrap'],['wrappings']
Integrability,"How did you get gau2grid (psi4 dependency) compiled without `mpmath`? There are ways around it, but simplest precaution is to make sure the python psi4 cmake is detecting (look in `<objdir>/CMakeCache.txt`; influence through `cmake -DPYTHON_EXECUTABLE=/full/path/to/bin/python`) and any conda-supplied psi dependencies are in the *same* conda environment and that that's active throughout cmake configure, `make`, `make install`, and runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181608:31,depend,dependency,31,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181608,4,['depend'],"['dependencies', 'dependency']"
Integrability,"How far back can you run the ROHF MP2 code with DETCI? It might be good to double check that I have not broken anything in the past 6 months+. Cheers,; Daniel Smith. > On Mar 12, 2016, at 3:08 PM, Lori A. Burns notifications@github.com wrote:; > ; > @CDSherrill https://github.com/CDSherrill, here's the rohf mp2 results from a few programs. Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound.; > ; > program fc scf singles mp2corl mp2tot; > occ fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > detci fc -25.94361432 -0.06094168 -26.00455600; > qchem fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > molpro fc -25.94361432 -0.00054735 -0.05936497 -26.00297929; > $molecule; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > $end; > ; > $rem; > JOBTYPE sp; > unrestricted false; > n_frozen_core fc; > scf_guess sad; > BASIS cc-pVdZ; > basis2 6-31g; > correlation mp2; > THRESH 12; > SCF_CONVERGENCE 8; > SYM_IGNORE TRUE; > SYMMETRY FALSE; > MEM_TOTAL 1600; > MEM_STATIC 512; > INTEGRALS_BUFFER 512; > MAX_SCF_CYCLES 200; > $end; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > set reference rohf; > ; > set qc_module detci # toggle detci/occ; > energy('mp2'); > memory,200,m; > nosym; > noorient; > angstrom; > geometry={; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.0000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311#issuecomment-195804600:543,rout,route,543,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-195804600,1,['rout'],['route']
Integrability,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:42,message,message,42,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255,1,['message'],['message']
Integrability,"Hrm, I was under the impression that none of the dmrg tests are being exercised by `quicktests`, so I run the dmrg tests in addition. Granted, this does not strictly have anything to do with `quicktests` I guess, but I think the dmrg tests should either interface with `quicktests` or at least be of the same order of magnitude.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249299134:254,interface,interface,254,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249299134,1,['interface'],['interface']
Integrability,"Huh, haven't tried `psi4 -t` in ages. Well, I've added ncurses to the runtime dependency list for the conda package. Should appear in tomorrow's build. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/289#issuecomment-189698585:78,depend,dependency,78,https://psicode.org,https://github.com/psi4/psi4/issues/289#issuecomment-189698585,1,['depend'],['dependency']
Integrability,"I Driver Interface (MDI)](https://github.com/MolSSI/MDI_Library). MDI is an effort of [The MolSSI](https://molssi.org/) to improve and standardize the process of interoperating codes within the computational molecular sciences domain. In particular, MDI supports interoperability within a driver-engine paradigm, in which a driver code controls the high-level operations of one or more engine codes, orchestrating complex calculations like QM/MM or advanced sampling. This PR provides all functionality required for Psi4 to act as an MDI engine. This makes it possible for external codes to exercise control over Psi4 in a manner similar to what is possible using Psi4’s existing API (albeit with a much smaller subset of the functionality), but with the advantage of cross-code generality (all MDI commands are defined by [The MDI Standard](https://molssi.github.io/MDI_Library/html/mdi_standard.html)) and the option of fast inter-code communication via the MPI or TCP/IP methods (selected by the user at runtime). The PR adds [The MDI Library](https://molssi.github.io/MDI_Library/html/index.html), which handles the details of inter-code communication, as an external dependency. The MDI Library compiles with CMake and has no additional requirements, although it will link to an MPI library if one is found. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Include the MDI Library as an external dependency; - [x] Add functionality for Psi4 to respond to MDI commands as defined by [The MDI Standard](https://molssi.github.io/MDI_Library/html/mdi_standard.html); - [x] Add the --mdi command-line option, which causes Psi4 to run as an MDI engine.; - [ ] Document the use of Psi4 as an MDI Engine. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676:1267,depend,dependency,1267,https://psicode.org,https://github.com/psi4/psi4/pull/1676,2,['depend'],['dependency']
Integrability,"I added full Sphinx documentation for both the FCHK writer and for GDMA, in commit f2aca76, @CDSherrill. I heard back from Prof. Stone and he has kindly agreed to allow us to use GDMA in the way that we want to, so this PR is ready to go. In his message, he raised the issue of our output providing only kcal/mol units, and mentioned that he would like to have kJ/mol units too, in line with IUPAC guidelines. We certainly should make the hartree to kJ/mol available directly in physconst (instead of having to go through kcal/mol), but what do think about having both units available in the SAPT output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201394449:246,message,message,246,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201394449,2,['message'],['message']
Integrability,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534#issuecomment-265466569:385,message,message,385,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569,1,['message'],['message']
Integrability,"I agree that we don't want properties computations done internally --- we; want them done in a unified way through OEProp. However, we do (I guess?); want the user syntax properties = [ ... ] or whatever Daniel C. cooked up.; My understanding is that the CC properties user input syntax only works for; CC modules, which is not good. Here's an example from cc52:. property('ccsd',properties=['roa_tensor']). The reason Daniel developed this is because different modules need to be; run depending on the requested property. This is not usually the case for; non-CC codes, but it is confusing to users to have this mechanism available; for CC properties but not for other properties. I am fine with moving this over to some other more unified github issue, so; long as it is tracked somewhere. On Fri, Feb 26, 2016 at 11:01 AM, Daniel Smith notifications@github.com; wrote:. > Effectively we have quite a few tickets relating to properties and OEProp.; > I would very much like to consolidate most of these tickets into one so we; > can figure out what actually needs to be done. In many ways we probably; > should not propagate the current way the cc codes are handling the; > properties internally (the syntax is great), especially with regard to; > properties through OEProp.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/40#issuecomment-189340270.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-189349922:486,depend,depending,486,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-189349922,1,['depend'],['depending']
Integrability,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:927,depend,depend,927,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868,2,['depend'],['depend']
Integrability,"I agree with @andysim --- Rollin's bug was only uncovered with debug flags; turned on, so it makes sense to retain at least one debug build. On Thu, Feb 11, 2016 at 8:56 AM, Andy Simmonett notifications@github.com; wrote:. > Thanks, @jgonthier https://github.com/jgonthier. Given that the Travis; > CI tests run every time somebody submits or merges a PR, we're going to be; > running that test a lot. If we don't see the problem again, it was probably; > just a strange artifact of the invalid read that was non-deterministic. If; > we keep seeing it after you have fixed that read, we probably just need to; > reduce the optimization level for that one routine. Either way, thanks for; > checking it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182875337.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182877975:655,rout,routine,655,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182877975,1,['rout'],['routine']
Integrability,"I agree, but not going to debug this bizarre case in the C++ code. And if; you're going to catch the absurd geometry, then psi4 should never compute; the gradient. On Fri, Jul 8, 2022 at 12:24 PM Jonathon Misiewicz ***@***.***>; wrote:. > Given the reporter, the geometry they input is probably garbage.; >; > While I agree attempts to optimize from this are in vain, there should be; > a proper error message instead of just crashing with an obscure C error; > code.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TAGYFNA3TVUXXSR7DLVTBP4VANCNFSM53A6YHNQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978:402,message,message,402,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978,2,"['Message', 'message']","['Message', 'message']"
Integrability,"I am aiming at the grid-based evaluation of molecular electrostatic fields/potentials as depicted in the input example [props4](https://github.com/psi4/psi4/blob/master/samples/props4/input.dat). Running Psi4 1.1, the input example fails with the message; `AttributeError: 'builtin_function_or_method' object has no attribute 'Vvals'`.; Calling `Exvals`, `Eyvals` or `Ezvals` results in the same error. Furthermore, I experienced the saving of `grid_field.dat` and `grid_esp.dat`, which follows after calling `prop()`, to be extremely slow (~1 MB per 5 minutes). In conclusion, I kindly ask for responses to the following questions:; - What is going wrong with the direct capturing of one-electron properties as Python arrays?; - How could the saving of the `.dat` files be sped up?; - Is there a way to change the output file names to something different than `grid_field.dat`/ `grid_esp.dat`?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1614:247,message,message,247,https://psicode.org,https://github.com/psi4/psi4/issues/1614,1,['message'],['message']
Integrability,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182861777:438,rout,routinely,438,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777,1,['rout'],['routinely']
Integrability,"I am currently building a high throughput program to calculate various one electron properties of large sets of molecules. . I am using psi4 1.81 and interacting with the program via the python API. First I optimise the geometry using the QCEngine wrapper, and then run a single point calculation with psi4.energy() where I return the wfn object and run psi4.oeprop(wfn). I am currently using the PBE0/def2-TZVPPD with the DDX solvent model DDX-4.0 level of theory. However, I began noticing the calculation would hang at a certain point, regardless of the level of theory and usage of the ddx solvent model (but seemed to hang quicker with more expansive methods), where the calculation would indefinitely stop at this stage:. ```; ==> Primary Basis <==. Basis Set: DEF2-TZVPPD; Blend: DEF2-TZVPPD; Number of shells: 136; Number of basis functions: 358; Number of Cartesian functions: 398; Spherical Harmonics?: true; Max angular momentum: 3; ```. I suspected a memory leak so I logged with memory usage at each stage of the calculation with:. ```; def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False); ```. When applying this function to this section of my code:. ``` ; print('memory use before E wfn'); log_memory_usage() ; E, wfn = psi4.energy(f'{settings.method}/{settings.basis}', molecule = molecule_psi4, return_wfn = True); print('memory use after E wfn'); log_memory_usage() ; psi4.oeprop(wfn,""GRID_ESP"",""GRID_FIELD"",""MULLIKEN_CHARGES"", ""LOWDIN_CHARGES"", ""DIPOLE"",""QUADRUPOLE"", ""MBIS_CHARGES""); print('memory use after oeprop'); log_memory_usage() ; ``` ; The output to my file with the above logging was:. ```; memory use before E wfn; Memory Usage: 3715.3828125 MB; --; memory use after E wfn; Memory Usage: 3783.52734375 MB; --; memory use after oeprop; Memory Usage: 3802.50390625 MB; --; memory use before wfn interaction; Memory Usage: 3802.50390625 MB; memory use after wfn interaction; Memory Usage: 380",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:248,wrap,wrapper,248,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['wrap'],['wrapper']
Integrability,"I am interfacing LibERD with GAMESS and would like to use the Psi4 interface as a reference. Psi4 does not call LibERD, even when compiled with it. This issue has been confirmed via email by @ryanmrichard. I first invoke:; setup --erd on --fc gfortran --type debug; and install normally, verifying that DENABLE_LIBERD is set for CMake. Then I tried debugging and setting a breakpoint at the ERD entry point, erd__gener_eri_batch. I tried a variety of sample input files, and that function is never reached. Next, I went to the ERD wrapper code at ./psi4public/src/lib/libmints/erd_eri.cc and enabled the DEBUG preprocessor macro which adds print statements for ERD parameters. The print statements are not printed, even if I remove the IF statements. Third, I figured LibInt might be called instead of ERD, so I recompiled with --max-am-eri 0 in an attempt to disable LibInt. There was no change in the behavior of the code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/171:67,interface,interface,67,https://psicode.org,https://github.com/psi4/psi4/issues/171,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2157:155,message,message,155,https://psicode.org,https://github.com/psi4/psi4/issues/2157,1,['message'],['message']
Integrability,"I am not 100% convinced the dispersion handling - the way it's currently implemented - is very good. I'd propose the following:. - move all method and functional specific parameters from elsewhere into `qcdb/dashparam.py`. This includes citation handling that's currently done in `procrouting/empirical_dispersion.py`. - the rest of psi4 python-side should be ""parameter-agnostic"", ie there are obvious differences whether the dispersion _type_ is das2009, d2, or d3 (or later vv10) - this should get figured out (as it currently is) in `procrouting/empirical_dispersion.py` accordingly. . - the parameters and citations should be passed into the `EmpiricalDispersion` class from outside, whether it's the functional's dictionary or user overrides or dashparams database. It might be helpful to settle on _one_ interface as opposed to the currently-used two (tuple_params tuple or dashparams dict in kwargs). In fact, EmpiricalDispersion class shouldn't be doing any parameter lookup on its own. The `dashparam.dashcoeff` dict is already trawled through in `procrouding/dft_funcs/dict_builder`, where we modify the method's name and aliases, the dispersion `dashparam` dict can (should?) be appended too. However, I have a feeling that this is a little bit of a scope creep. I'm quite happy with the functional part as it is now and wouldn't mind having this merged as is (if the tests pass), and leave the empirical / non-local dispersion re-work for eg. the VV10 implementation...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-375392872:811,interface,interface,811,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-375392872,1,['interface'],['interface']
Integrability,"I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments. * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311#issuecomment-933477291:921,message,messages,921,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933477291,2,['message'],['messages']
Integrability,I am not really sure about all the LIBINT commands as I try to avoid dealing with the integral routines. I typically just pass a --max-am-eri=7 to my setup script so I can compile with higher angular momentum.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139112245:95,rout,routines,95,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139112245,1,['rout'],['routines']
Integrability,"I am open to finding a way to force the user into using only the appropriate combinations of `basis`/`basis_relativistic` if that sounds like a more sensible choice. In principle it would be enough to eliminate the `basis_relativistic` option and always set `basis_relativistic` to a decontracted version of `basis`. However, this could be problematic when the decontracted basis has linear dependencies (I am working on this issue but I am currently slightly stuck/too busy).; The reason we have so many options was just for testing reasons, and to allow cases where `basis_relativistic` is a basis different from `basis` (e.g. to remove linear dependencies directly in the deconstructed basis). The HF example above should do. Once you address the Python issue I can run some checks. Beside external tests, there is at least one way to tell if things are internally consistent in psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288920918:391,depend,dependencies,391,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288920918,2,['depend'],['dependencies']
Integrability,"I am wondering if CPU and memory use are handled correctly in the MRCC interface. I am running some hig-level coupled cluster benchmarks but MRCC appears to run mostly single threaded, and doesn't use a lot of memory. Is the `memory` statement in Psi4 copied to the MRCC input file? I could not find the used MRCC input in the scratch directory...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3165:71,interface,interface,71,https://psicode.org,https://github.com/psi4/psi4/issues/3165,1,['interface'],['interface']
Integrability,"I am working with David Williams-Young to extend the features of his IntegratorXX and GauXC projects, which will enable access to modern quadrature grids in various programs. While going through the code in IntegratorXX, we noticed in https://github.com/wavefunction91/IntegratorXX/pull/27 that there is a potential discrepancy in the Chebychev roots in Psi4; ```; void RadialGridMgr::getChebychevRoots(int n, double r[], double w[]) {; double piOverNPlusOne = M_PI / (n + 1);; for (int i = 1; i <= n; i++) {; double x = cos(i * piOverNPlusOne);; r[i - 1] = x;; w[i - 1] =; piOverNPlusOne * sqrt(1.0 - x * x); // sqrt(1.0 - x*x) could've been replaced with sin(i*piOverNPlusOne).; }; }; ```. This should be compared to the Gauss-Chebychev rules on [Wikipedia](https://en.wikipedia.org/wiki/Chebyshev%E2%80%93Gauss_quadrature). The nodes clearly correspond to Chebychev quadrature of the second kind, but ; 1. the weights are from Gauss-Chebychev quadrature of the first kind and; 2. the factor to transform to unit weight is missing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3004:69,Integrat,IntegratorXX,69,https://psicode.org,https://github.com/psi4/psi4/issues/3004,3,['Integrat'],['IntegratorXX']
Integrability,"I apologize, maybe I'm fiddling with something different that leads to the same error message. Perhaps it's better to keep the 100% reproducible case. My point was that it was still happening, even with psi 1.2 non-dev.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442904288:86,message,message,86,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442904288,1,['message'],['message']
Integrability,"I believe I know exactly what you have experienced, please correct me if I am wrong. . It is easy to come to the conclusion that buf4_init is like a constructor. Leading to the conclusion that when you pass a `dpdbuf4` to the `buf4_init` function you get a brand new instance of a class with data initialized to zero. However these are not objects in a proper OOP sense, and for that reason the when/why of data moving into `buffer->matrix` can be confusing. The comments here should have some warning that the data that *will be* pointed to by`buffer->matrix`, will only be ""blank"" if the tensor that this (`filenumber`, `label`) combination refers to does not exist. Exist here has a very broad scope since you may be referring to an entry in a file which was written by some other module, and often it is up to the programmer to know ""This quantity was written by module A, and it is safe for me to assume that it will be on disk when the code I am writing in module B will run because I made sure that module A runs before module B in the driver"". If you expect/want a tensor to be zero-ed out you should always do that explicitly when manipulating the data. This detail is easy to overlook since common operations using the `contractXXX` methods may be doing that without you realizing it. For example by setting the pre-factor on the target to zero. . There are plans in the works for a fairly major overhaul of libDPD to address various problems, one being that the interface is very cumbersome. Hopefully those efforts will make it much easier to get comfortable writing code that uses DPD.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267204006:1230,contract,contractXXX,1230,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267204006,2,"['contract', 'interface']","['contractXXX', 'interface']"
Integrability,"I bet this is because of the calls to `exit()` in libpsio, combined with the lack of flushing of the error messages to the output. I have replaced the calls to `exit()` in #3118, which should solve this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205:107,message,messages,107,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205,1,['message'],['messages']
Integrability,"I can answer more fully later, but check where the `GENBAS` file lives in your CFOUR installation. It looks like it's looking for it at `/xstorage/tobias/bin/cfour/basis/GENBAS`. (This could be the trouble in the Psi4/Cfour route, too.) I don't remember the exact fallback procedure for GENBAS, but if it's missing from that spot, you could copy it to there or copy the one from the psi4 install (approx <install>/share/psi4/basis/GENBAS).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155521774:224,rout,route,224,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155521774,1,['rout'],['route']
Integrability,I can reproduce this and get an error message about frozen virtual DF-CCSD gradients not being implemented in `dfocc`. That is not consistent with a pb11 problem.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1912#issuecomment-635993245:38,message,message,38,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-635993245,1,['message'],['message']
Integrability,"I can reproduce this on my Mac, but the problem there is obviously that my Jupyter notebook isn't using the conda environment which has Psi's dependencies. I recommend you look into the interaction between Jupyter and conda environments. I doubt this is a bug in Psi4. I won't be able to delve further into this for a few more days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-921318629:142,depend,dependencies,142,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921318629,1,['depend'],['dependencies']
Integrability,"I can see an argument for both fast and rigorous CI solutions, and don't really have a strong opinion on how we should proceed. The minimal test may become important as we start getting more PRs; it's nice to be able to see if they're valid in a short window. That route is fine for me, as long as we plug the gaps with another test solution. Right now we only deal with a handful of PRs a day at most, so having to wait a few hours isn't too bad, which means your more extensive testing idea is valid. As I said, I don't really have a strong opinion; I was just making some suggestions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182898239:265,rout,route,265,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182898239,1,['rout'],['route']
Integrability,"I can see how the Molden format is perhaps a good fit for this, as it; presents not only the desired quantity (AO basis density matrix) but also; the associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomme",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260397625:224,contract,contractions,224,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625,2,['contract'],['contractions']
Integrability,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172192255:570,depend,dependency,570,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255,2,['depend'],"['dependencies', 'dependency']"
Integrability,"I compiled this PR with clang, ran `gibbs`, and still got the exact same error as Travis reports. ```; Structure for next step:; Cartesian Geometry (in Angstrom); C 0.0000000000 0.0000000000 0.0000000000; H 0.0000000000 0.8836649185 -0.6248454599; H 0.8836649185 0.0000000000 0.6248454599; H -0.8836649185 0.0000000000 0.6248454599; H 0.0000000000 -0.8836649185 -0.6248454599; ; Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; ```. This problem is not specific to gcc compilers, and it looks to be a bug in finding the highest point group. I'm puzzled how the original test didn't run into this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307:621,depend,dependent,621,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307,1,['depend'],['dependent']
Integrability,"I completely agree with @bgpeyton and @amjames that there are probably misuses of Z & mass in the code resulting from unclear or inconsistent definitions (I think there's even cases where the `Mol.property()` fn differs in behavior from the `Mol.fproperty()` fn (that includes dummy atoms). It would be great to survey the code and hunt these down. My trepidation comes in because Mol is delicate w/the two versions of ghosting (type A (not reversible): `@C`, type B (reversible): `extract_subset(1, 2)`) and I worry that changes would start an avalanche. In fact I definitely recommend _not_ ""fixing"" `Mol.Z()` the way I would like (`C` and `@C` both return 6) because lots of places in the Mol code depend on using that fn as a test for type A ghostedness. > I'm very unfamiliar with how masses and fragment identities are passed around. Is there a case in which having the ghost masses zero would keep you from making a properly-massed all-real-atoms copy of that molecule? That would definitely preclude any option of setting them zero permanently. What happens is that every atom at parse-time gets read into a CoordEntry object that holds Z, ghost, charge, mass, element symbol, coords, etc. If the atom is type-A ghost, then Z, ghost, and charge get set accordingly. There is no other info so type-A is not eligible to return to reality. The fragmentation pattern is also stored at parse-time with all-`Real`. For a trimer, when you `extract_subsets(1, 2)`, the `Mol.fragment_types_` gets reset to `[Real, Ghost, Absent]`. The CoordEntries don't change, but every function in Mol is trained to iterate over the frags, and handle Ghost or Absent differently, so that in the fn output, they _appear_ ghosted (type B) or absent. Because the mass, Z info in the CoordEntry is unchanged, this ghostedness is reversible. So in the type B sense, mass must not be set to 0 permanently b/c then type B would be irreversible. I suppose you're advocating zeroing mass for type A? That'd be more consistent",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363473061:701,depend,depend,701,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363473061,1,['depend'],['depend']
Integrability,"I currently plan to combine the three geometry generators into one because their logic is so similar. Could you be more specific about the interface changes and desired new features _after_ the C++ code is moved over? If combining the geometry generators is obviously going to break something down the road, best to find out now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-360926158:139,interface,interface,139,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-360926158,1,['interface'],['interface']
Integrability,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:93,message,messages,93,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013,2,['message'],['messages']
Integrability,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:532,message,message,532,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967,4,"['INTERFACE', 'message']","['INTERFACE', 'message']"
Integrability,"I do like HDF5, but it would add an extra dependency to Psi4 for something relatively simple. We use NumPy to write arrays [here](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L445), it should be noted the resulting data is in binary form and readable by anyone. Our Wavefunctions are written as `npz` objects for the SCF `GUESS READ` machinery [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L1340) using the above machinery. A JSON write would be equivalent and probably much more general. The above snippet is specific to Psi4's SCF Wavefunction, but I have been wanting to generalize this function for some time so that a user could read/write a general Wavefunction on command. We would be happy to work on the underlying data structures to make them more general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/562#issuecomment-271298945:42,depend,dependency,42,https://psicode.org,https://github.com/psi4/psi4/issues/562#issuecomment-271298945,2,['depend'],['dependency']
Integrability,"I do like the ability to do slices (and it's the correct name IMO). Perhaps if View is not used much we can just cut it out and promote the Slice class which is probably ultimately more extensible. . Sorry to grab you for more changes, but you keep bringing up good ones :). -Daniel Smith; Sent from my iPhone. . > On May 31, 2017, at 22:55, fevangelista <notifications@github.com> wrote:; > ; > @fevangelista commented on this pull request.; > ; > In psi4/src/psi4/libmints/matrix.cc:; > ; > > + double value = block->get(h,p,q);; > + set(h,p + rows_start[h],q + cols_start[h],value);; > + }; > + }; > + }; > +}; > +; > +/**; > + * Set a matrix block; > + *; > + * @param rows Rows slice; > + * @param cols Columns slice; > + * @return SharedMatrix object; > + */; > +void set_block(Slice rows,Slice cols,SharedMatrix block);; > +; > For what I can see View was not integrated extensively and it is used only in exactly three lines of psi4. View is really a shared pointer plus a set of start/end Dimension objects. It uses pointers to store what are dimension-like objects and should be modernized. Slice here is just a set of start/end Dimension objects. Indeed I think it might be a good idea to write View using Slice (perhaps my choice of class name is not idea, we could also call it DimensionRange, Range, etc.). So I think this is not a case of repetition.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-305376168:867,integrat,integrated,867,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305376168,1,['integrat'],['integrated']
Integrability,"I don't comment here all that often anymore, which is bittersweet (and I very much miss both my colleagues on PSI4 and the Vortex). We have gone through my old notes on CCA (sketch at best, we know), and many nested references therein. For Cartesian AOs, CCA matters - this lets you use a single normalization coefficient for everything, and tolerate non-normalized off-diagonal cartesian tensor components (i.e, xx is normalized in D, xy is not normalized in D, xxx is normalized in F, xxy or xyz is not normalized in F) - Jet taught me this and it is one of the coolest tricks in the book. For spherical AOs, as far as we can tell, there is *no* CCA convention except that everything be normalized (as literally all codes do). The one ""CCA"" paper we can find on this topic itself glancingly cites an older Schlegel / Frisch paper (I think before the big happening), which itself is outdated by about > two dozen articles on solid harmonics. Everyone who codes integrals deals with basis ordering - what you shudder about is weird normalization factors (particularly non-diagonal ones), not rigid permutations. . The message is this: I am not convinced there is a standard. So maybe not optimal to follow to follow an implied one. Show me a reference of a real, used standard, and Lightspeed and Tachyon will be there tomorrow. . [report (7).pdf](https://github.com/psi4/psi4/files/8746880/report.7.pdf); [jcc.20815.pdf](https://github.com/psi4/psi4/files/8746882/jcc.20815.pdf); [sh.pdf](https://github.com/psi4/psi4/files/8746881/sh.pdf)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537#issuecomment-1133519662:1118,message,message,1118,https://psicode.org,https://github.com/psi4/psi4/pull/2537#issuecomment-1133519662,1,['message'],['message']
Integrability,"I don't have a chance to compile with icpc 18 right now, but we do have it; at NIH. One way to narrow this problem down is to wrap half of the; matrix.h functions in preprocessor pragmas to kill optimization (; https://software.intel.com/en-us/node/524550), leaving the rest compiled as; normal with -O2 or higher. By eliminating half of the functions'; optimization each time, it should be quite easy to figure out which; function is causing problems by bisection. On Mon, Feb 26, 2018 at 4:11 PM, Justin Turney <notifications@github.com>; wrote:. > I'm hitting a similar error message with dcft_gradient_UHF.cc but it; > reports that the error is in libmints/matrix.h. Reducing the optimization; > level was the only way I could get it to compile. Even compiling with -O2; > gives the error, -O1 is the only way to resolve it.; >; > I see no issue with the compiler- and file-specific flags for this.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/923#issuecomment-368651645>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAMUmdYwvJwuQd4BJz52tlrgzOg8dBWUks5tYx3YgaJpZM4SPiMy>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368659317:126,wrap,wrap,126,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368659317,2,"['message', 'wrap']","['message', 'wrap']"
Integrability,"I don't have an opinion about the include_pure_transform_ flag, depends on; use cases. However, it seems at the very least that the documentation needs to get; updated. On Mon, Dec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = cor",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:64,depend,depends,64,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['depend'],['depends']
Integrability,"I don't know if it's relevant or not, but that error message was produced with the `psi4/linux-64::psi4-1.3.2+ecbda83-py37h31b3128_0` build from the `psi4` conda channel.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-759704666:53,message,message,53,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-759704666,1,['message'],['message']
Integrability,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:23,message,message,23,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547,4,['message'],['message']
Integrability,"I don't mind, but it's an additional external dependency I have to package in order to ship the manual along with the Debian packages. And those packages need to get manually approved, so it takes a while. I think I'll just drop the manual for now, upload 1.1 to Debian and then see about the psi theme in order to reactivate the manual. I do think it's a useful local resource to have, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/892#issuecomment-356291068:46,depend,dependency,46,https://psicode.org,https://github.com/psi4/psi4/issues/892#issuecomment-356291068,1,['depend'],['dependency']
Integrability,"I don't recall the actual recc. values, but that paper does discuss two sets of integration grid. probably (99, 590) for the main functional grid and ~SG1~(50, 146) for the VV10 grid.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/827#issuecomment-339688990:80,integrat,integration,80,https://psicode.org,https://github.com/psi4/psi4/issues/827#issuecomment-339688990,1,['integrat'],['integration']
Integrability,I don't think there's a need to deprecate those. Users might depend on it and it's less typing if they stay in `Wavefunction`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1970#issuecomment-664390954:61,depend,depend,61,https://psicode.org,https://github.com/psi4/psi4/pull/1970#issuecomment-664390954,1,['depend'],['depend']
Integrability,I don't wholly trust the libint/libmints error messages to trigger when requested angmom too high. you've ruled out the libint compilation?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1992#issuecomment-681079304:47,message,messages,47,https://psicode.org,https://github.com/psi4/psi4/issues/1992#issuecomment-681079304,1,['message'],['messages']
Integrability,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-347998008:323,interface,interface,323,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008,1,['interface'],['interface']
Integrability,"I found this partly non-quantum mechanical look at this issue helpful:; http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3079527/; At least in our context, in which users are selecting certain isotopies intentionally, and corresponding vibrational frequencies are being recomputed (mass-dependent), and the molecules are typically small and relatively rigid, the symmetry number should be included and lowered by isotopic substitutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345#issuecomment-210846873:282,depend,dependent,282,https://psicode.org,https://github.com/psi4/psi4/issues/345#issuecomment-210846873,1,['depend'],['dependent']
Integrability,"I get the following error when building psi4. ```; Scanning dependencies of target pcmsolver; [ 53%] Creating directories for 'pcmsolver'; [ 53%] Performing download step for 'pcmsolver'. [ 53%] No patch step for 'pcmsolver'; [ 53%] No update step for 'pcmsolver'; [ 53%] Performing configure step for 'pcmsolver'; CMake Error: The source directory ""/Users/sternc1/src/python-lib/psi4public/interfaces/pcmsolver"" does not appear to contain CMakeLists.txt.; Specify --help for usage, or press the help button on the CMake GUI.; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-configure] Error 1; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I used the following setup command:; `./setup --cc /usr/local/bin/clang-omp --cxx /usr/local/bin/clang-omp --fc /usr/local/bin/gfortran`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199:60,depend,dependencies,60,https://psicode.org,https://github.com/psi4/psi4/issues/199,3,"['depend', 'interface']","['dependencies', 'interfaces']"
Integrability,"I get this error:; > OMP: Info #270: omp_set_nested routine deprecated, please use omp_set_max_active_levels instead. Using this as an input:. ```; molecule {; He 0 0 0; --; He 2 0 0; }; import snsmp2; energy('sns-mp2'); ```. I have installed it from conda channel of psi4:. > conda create -n psi4 psi4 snsmp2 -c psi4. I also did. > conda update psi4 -c psi4. as advised on the [psi4 website](http://www.psicode.org/psi4manual/master/build_obtaining.html#faq-binarypackage) . Package versions:; ```; >>> import psi4; >>> psi4.__version__; '1.3.2'; >>> snsmp2.__version__; '1.0.1.dev24'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820:52,rout,routine,52,https://psicode.org,https://github.com/psi4/psi4/issues/1820,1,['rout'],['routine']
Integrability,"I got in touch with the developer of Molden. He mentioned that his program can fix some of the mistakes in the normalization of the contraction coefficients but not all. That is why the ORCA and PSI4 molden files gave the same results when they were loaded into Molden, despite having different contraction coefficients. In principle, the source code of molden is the authoritative source for the definition of the file format. The code can be found here:. http://www.cmbi.ru.nl/molden/. The relevant files are rdmolf.f, renorm.f and basprt.f. I'm not an expert on fortran77, so I won't be able to get a definitive answer this way. Since, the conventions are the same as these of the Gaussian94 basis set format, the contraction coefficients are given under the assumption that the primitives are normalized. It is also assumed that the normalization is done for pure (spherical) functions, irrespective of the use of Cartesian basis functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53050174:132,contract,contraction,132,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53050174,3,['contract'],['contraction']
Integrability,"I had a bit of time to work on Windows build. Current status of dependencies:; - *libint*: with some hacking (https://github.com/raimis/libint/tree/win) I have manged to build it (https://ci.appveyor.com/project/raimis/libint). There are no tests, so high probability of not detected issues.; - *libxc*: with some more hacking (https://github.com/raimis/libxc/tree/win) I have to managed to build it too (https://ci.appveyor.com/project/raimis/libxc).; - *gau2grid*: it need just a few changes (https://github.com/raimis/gau2grid/tree/win) to compile (https://ci.appveyor.com/project/raimis/gau2grid). Though I have not managed to make the test to work. It seems, `ctypes` behave differently on Windows. Finally, I have reached a point to stat building *Psi4* (https://github.com/raimis/psi4/tree/win) and got stuck with MKL configuration and other `cmake` related problems (https://ci.appveyor.com/project/raimis/psi4). @loriab, for Linux builds, do you use MKL from `conda` or install it manually?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390236786:64,depend,dependencies,64,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390236786,1,['depend'],['dependencies']
Integrability,"I had looked into the integer overflow issues in the DF code with MP3 as an example several months ago. The negative memory values reported are of course integral overflows and one can fix the printing of memory requirements by changing the int to a type that holds larger integers. But the actual problem happens later when, if I understand correctly, an array index becomes bigger than 2,147,483,647. . In my DF-MP3 test calculation this happened in the main loop in mp3_WabefT2. . Memory for I, Vs, Va, Ts, and Ta was successfully allocated, but then the quantity a * navirA * nQ became too large. I forced it to long or long-long, so the product could be evaluated (and printed printed out) as 2148655392 (as opposed to -2146311904 with int) but this positive value ""anavirAnQ3"" was illegal for the subsequent contraction. I->contract(false, true, navirA * nb, navirA, nQ, K, K, 0, anavirAnQ3, 1.0, 0.0);. So, it is the array index, and not the array value, that is bigger than the 32-bit integer. And our math libraries index arrays with the 32-bit integer type! . I tried to compile Psi against MKL and OpenBLAS with 64-bit index arrays (the ILP64 interface) but the resulting program was not stable. So, if my thinking is correct, I am afraid we do not have an easy fix as long as Psi4 expects math libraries with 32-bit integer indices. I can share some debug code (modified dfocc.h, df_ref.cc, tei_grad_corr.cc, df_corr.cc, ref_grad.cc, and mp3_W_intr.cc with some long int and printf statements) and sample outputs if anybody thinks this is helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849:814,contract,contraction,814,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849,3,"['contract', 'interface']","['contract', 'contraction', 'interface']"
Integrability,I had the following problem when trying to build Psi4 from current master branch. It seems like there was an issue extracting the Libint2-export-5-4-3-6-5-4_1.tgz archive. ```; CMake Error: Problem with archive_write_header(): Can't create 'export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h'; CMake Error: Current file: export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h; CMake Error: Problem extracting tar: ~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz; -- extracting... [error clean up]; CMake Error at libint2_external-stamp/extract-libint2_external.cmake:33 (message):; error: extract of; '~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz'; failed; ```. Relevant version numbers:; - Python: v3.6.3; - CMake: v3.19.2; - Intel C/C++ compiler: v18.0. Build instructions:; ```; cmake .. -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc; make -j 24; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2147:673,message,message,673,https://psicode.org,https://github.com/psi4/psi4/issues/2147,1,['message'],['message']
Integrability,I have a computer at work with openSUSE 13.2 (Newer version compared to your 12.3) I have recently compiled psi4 on it without this error. Maybe it's an issue with that version of ld? Your error message seems to indicate that ld knows this behavior is a bug. My version of ld is newer than yours also:; $ ld --version; GNU ld (GNU Binutils; openSUSE 13.2) 2.24.0.20140403-6.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/785#issuecomment-323494378:195,message,message,195,https://psicode.org,https://github.com/psi4/psi4/issues/785#issuecomment-323494378,1,['message'],['message']
Integrability,"I have a system, where I'm interested in running sapt2+/aug-cc-pVDZ calculation. However, it quits after the start of SAPT2+. ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SAPT2+ //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. *** tstart() called on cnode3005; *** at Sat Feb 29 03:11:38 2020. SAPT2+ ; Ed Hohenstein; 6 June 2009. Orbital Information; --------------------------; NSO = 1061; NMO = 1061; NRI = 3161; NOCC A = 69; NOCC B = 56; FOCC A = 19; FOCC B = 15; NVIR A = 992; NVIR B = 1005. Estimated memory usage: 140951.0 MB. Natural Orbital Cutoff: 1.000E-06; Disp(T3) Truncation: Yes; CCD (vv|vv) Truncation: Yes; MBPT T2 Truncation: Yes. Monomer A: 486 virtual orbitals dropped; Monomer B: 598 virtual orbitals dropped; ```; This the end of the log file.; ```; /home/XXX/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00007F6CEC755A15 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC753637 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC66BF32 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC66BD86 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC63A38D Unknown Unknown Unknown; libpcm.so.1 00007F6CEC63D75D Unknown Unknown Unknown; libpthread.so.0 00000034CF00F710 Unknown Unknown Unknown; core.so 00007F6CF40872D2 Unknown Unknown Unknown; core.so 00007F6CF4087EDA Unknown Unknown Unknown; core.so 00007F6CF408927E Unknown Unknown Unknown; core.so 00007F6CF404A1F0 Unknown Unknown Unknown; core.so 00007F6CF3F6CDF7 Unknown Unknown Unknown; core.so 00007F6CF33B0027 Unknown Unknown Unknown; core.so 00007F6CF33F983F Unknown Unknown Unknown; core.so 00007F6CF33C3CEA Unknown Unknown Unknown; core.so 00007F6CF33C3BB4 Unknown Unknown Unknown; core.so 00007F6CF304A32C Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6B8FDD1 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C184A6 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C18FC9 Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828:927,Rout,Routine,927,https://psicode.org,https://github.com/psi4/psi4/issues/1828,1,['Rout'],['Routine']
Integrability,"I have adjusted the case accordingly and I'm still encountering an error message: . ```; import psi4; import numpy as np. # Set Psi4 options for the calculation; psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [5, 0, 1, 1], # Doubly occupied orbitals; 'socc': [0, 0, 1, 0], # Singly occupied orbitals; 'restricted_docc': [5, 0, 0, 0], # Core orbitals; 'active': [0, 0, 2, 0], # Active orbitals; 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:73,message,message,73,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['message'],['message']
Integrability,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:751,depend,dependencies,751,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,2,['depend'],['dependencies']
Integrability,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:786,message,message,786,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331,1,['message'],['message']
Integrability,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:492,message,message,492,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['message'],['message']
Integrability,"I have made almost all PRs for easy/trivial code changes, which is ~80% of overall. For further progress, the easiest way is to use *Boost* library for:; - User/system time in `fnocc`, `libciomr`, and `libqt`; - File operations in `libfilesystem`; - Stacktrace printing in `libpsi4utils`. Actually, I'm a bit surprised that *Psi4* is not yet depended on *Boost*. What is *Psi4* policy on the new dependencies?. So there are two options:; 1. Use *Boost* for these cross-platform functionalities.; 2. Make a conditional compilation, so *Boost* dependency is only *Windows*. This will increase code complexity, but will avoid the new dependency on *Linux*.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-403818314:342,depend,depended,342,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-403818314,4,['depend'],"['depended', 'dependencies', 'dependency']"
Integrability,"I have noticed some other general gradient weirdness that might or might; not be related. I'll try to post that as another issue as soon as I get a; chance. On Wed, Apr 18, 2018, 12:32 PM Susi Lehtola <notifications@github.com>; wrote:. > SCAN is crazy grid dependent. You might need up to 500 radial points to; > get single points with microhartree accuracy.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/962#issuecomment-382448968>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdrK7ZaUCI_vgWtatmOzGCwmpY990ks5tp2qvgaJpZM4TTqrC>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-382458405:258,depend,dependent,258,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-382458405,1,['depend'],['dependent']
Integrability,"I have overhauled this interface in #365 for SCF/DFT/MP2/CI so that the following now works:. ``` python; prop('above_method', properties=['any_opdm_func']); ```. See [here](http://www.psicode.org/psi4manual/master/oeprop.html?highlight=oeprop) for full OEProp functionality; this documentation and the `property` documentation also had a facelift in the PR. Full tests suites can be found in the following test cases:; - ci-properties ('transition_dipole', etc, works here); - mp2-properties; - scf-properties. I did not touch occ/dfocc/cc due to how they integrated their OEProp calls, but I would assume that this will eventually be deprecated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-213409294:23,interface,interface,23,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-213409294,2,"['integrat', 'interface']","['integrated', 'interface']"
Integrability,"I have reworked this PR to a general renovation of `toclen.cc`. All errors are now handled by calling `psio_error()`, OS-provided messages are decoded by a new fn that may be useful elsewhere later and the toclen fns now first check if the stream is ought to be open and error out early with a more specific error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1250060587:130,message,messages,130,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1250060587,2,['message'],"['message', 'messages']"
Integrability,"I have seen something about mkl and Windows and 2018/2019 compatibility recently but of course can't find it now. I don't recall it as alarming, so if this PR has worked in practice, LGTM. Has @raimis definitely lifted the ""Don't merge"" directive (too many slack messages flying around)? Avoiding checkmark until confirmed so we're not merge-happy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1408#issuecomment-451223973:263,message,messages,263,https://psicode.org,https://github.com/psi4/psi4/pull/1408#issuecomment-451223973,1,['message'],['messages']
Integrability,"I have situations where I want to manually specify the number of frozen core orbitals using `num_frozen_docc`, do some work, then calculate some MBIS properties including the volume ratios. The latter causes psi4 to automatically calculate the free-atom volumes in the same method as the last-run calculation (in my case, `wb97m-d3bj`) and inherits all the settings... including `num_frozen_docc`. I can insert a `set num_frozen_docc 0; set freeze_core true` right before the `oeprop(wfn, 'MULLIKEN_CHARGES')` call and make things go away, but what worries me is just _how_ things fail. Well, sometimes things are in fact _perfectly fine_. Other times, psi4 **segfaults**. The behavior depends on _just how large_ `num_frozen_docc` is -- I think if it ends up exceeding some other quality dependent on the calculation, things go belly-up. Here's the relevant line from a coredump. ```; #0 0x00002b4f362ef958 in psi::scf::HF::compute_fcpi (this=0x223c06c0) at [snip]/psi4/psi4/src/psi4/libscf_solver/hf.cc:830; 830 for (int i = 0; i < nfzc; ++i) frzcpi_[pairs[i].second]++;; ```. And here's a minimum working example of the issue that MBIS_VOLUME_RATIOS runs into, as a standalone calc:. ```; set num_frozen_docc 20; set basis def2-tzvppd; set reference uks; molecule mol {; 0 2; H 0 0 0; units angstrom; }; E, wf = energy('wb97m-d3bj',return_wfn=True,); ```. If you flip `num_frozen_docc` to 18, _it works_. (19 works for me on some machines, not on others -- eek!). In all cases I'm invoking psi4 the same way: `psi4 -n1 -i run.in --memory 500MB`. . I'm building off of 1.6.X, using icc/2020.2-108-02c7; I don't _think_ I have anything ""special"" set in my compile environment besides `buildtype=RelWithDebInfo`. I didn't mess with any optimization flags, for sure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631:686,depend,depends,686,https://psicode.org,https://github.com/psi4/psi4/issues/2631,2,['depend'],"['dependent', 'depends']"
Integrability,I have updated my psi4 program and still got the message BasisSetNotFound; How can I download and install new basis set list,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/917#issuecomment-364853728:49,message,message,49,https://psicode.org,https://github.com/psi4/psi4/issues/917#issuecomment-364853728,1,['message'],['message']
Integrability,I have updated the body of the issue with details about the error message. Thanks in advance!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238:66,message,message,66,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238,1,['message'],['message']
Integrability,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:53,message,message,53,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767,1,['message'],['message']
Integrability,"I haven't reloaded all my freq familiarity, but I did various comparisons around the time of the thermo update, but [molpro](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/molpro.out#L469-L481) and [psi4](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/output.ref#L4113-L4136) match, and there's other examples in that folder. Psi4 output vibs through both findif routes I'm confident are nmw (through analytic I haven't looked at). Normalization sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286563411:389,rout,routes,389,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286563411,1,['rout'],['routes']
Integrability,"I haven't tested it, but one issues seems (as far as I read the traceback docs) that the exception message from the `SyntaxError` contains the offending line before the normal content, which is `ExceptionName: <text>`. . Though syntax errors usually crash for me like this:. ```; Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29; print '1'; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print('1')?. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 348, in <module>; suspect_lineno = traceback.extract_tb(exc_traceback)[1].lineno - 1 # -1 for 0 indexing; IndexError: list index out of range; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204:99,message,message,99,https://psicode.org,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204,1,['message'],['message']
Integrability,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084:280,Rout,Routine,280,https://psicode.org,https://github.com/psi4/psi4/issues/2084,1,['Rout'],['Routine']
Integrability,"I just ran the input, and it produces (admittedly unhelpful) error message `Fatal Error: UHF Density fitting NYI`. The CC3 code is not set up to use density fitting yet, unfortunately. If you remove the `cc_type` keyword, it runs correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/462#issuecomment-240188822:67,message,message,67,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240188822,1,['message'],['message']
Integrability,"I just removed opt10 from all ctest labels. Its still present, but will not run unless you specifically request it. It looks like the reference opt10 ran in about 45 minutes on 8 threads. @psi-rking If you are just testing angular dependancies can you reduce this to something like 6-31G?. Edit: Whoops, misread timing data. > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com wrote:; > ; > Yeah, we should have that mechanism to leave it as a longertest. Maybe that's what @dgasmith https://github.com/dgasmith has already done.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184228286.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184233000:231,depend,dependancies,231,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184233000,1,['depend'],['dependancies']
Integrability,"I just tried to build the present trunk using the instructions in the wiki; https://github.com/psi4/psi4/wiki/1_Obtaining#clonepsi4public. but the compilation fails in a bunch of unresolved symbols. /tmp/ccVe3Y02.ltrans0.ltrans.o: In function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/414:280,interface,interfaces,280,https://psicode.org,https://github.com/psi4/psi4/issues/414,5,['interface'],['interfaces']
Integrability,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/100#issuecomment-105456704:82,depend,dependencies,82,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704,1,['depend'],['dependencies']
Integrability,"I keep hearing about this ""problem"" also elsewhere, but the fact is that the regular grid for cube files is ill fitted for integrating the density of steep regions (e.g. at the nuclei). ; python-based integrator for testing: https://gist.github.com/hokru/71c61f5afb2e5921b5b4955fed70f5db. cubes were made for visualization not for further analysis, iirc. Does chargemol only work with cube files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513:123,integrat,integrating,123,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513,2,['integrat'],"['integrating', 'integrator']"
Integrability,"I keep seeing ""continuous-integration/travis-ci — Waiting for status to be reported"", and it doesn't appear to have run your merge of Lori's commits. Is anybody else seeing the same?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183784922:26,integrat,integration,26,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183784922,1,['integrat'],['integration']
Integrability,"I like the options-processing macros, @ryanmrichard. Here you meant `AND`, yes? Or even better, `if(NOT DEFINED ${variable})`? https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11. You may want to copy Psi4Macros from libint back over to psi4 (diff here: https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff) as I fixed that processing problem, expanded to bool options, elaborated printing, and tested a range of input values/specification routes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236132448:500,rout,routes,500,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236132448,1,['rout'],['routes']
Integrability,"I may have been unclear. It already works with multiple "":"" characters. Not sure if there is already such an error message somewhere. Format always seems: `<exception name>: <exception message>`, so the splitting the string at the first "":"" in 2 parts and then taking the second (=last) part should work well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611520933:115,message,message,115,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611520933,2,['message'],['message']
Integrability,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:570,depend,dependency,570,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298,1,['depend'],['dependency']
Integrability,"I modified the error message from being about ""core electrons"" to just ""electrons."" Aside from that, @susilehtola's comments addressed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600:21,message,message,21,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600,1,['message'],['message']
Integrability,"I noticed that there is some kind of overflow happening in the printing of the memory (see below).; Looks like all variables are doubles so idk why. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2493. The other thing is that this (and similar lines); `cost_ampAA = nocc2AA * nvir2AA;` should maybe be `cost_ampAA = naocc2AA * nvir2AA;`; Otherwise frozen-core is ignored for the memory consideration. Or I misunderstand something. If you could have a look @bozkaya ?. ```; DF-MP2.5 ; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ============================================================================== ; ============================================================================== ; ============================================================================== . MO spaces... . FC OCC VIR FV ; ----------------------; 19 49 827 0. Number of basis functions in the DF-CC basis: 2173. Available memory : 55313.11 MB ; Memory requirement for 3-index ints : 12050.26 MB ; Memory requirement for DF-CC int trans: 36889.52 MB ; Memory requirement for CC contractions: -34560.53 MB ; Total memory requirement for DF+CC int: -22510.28 MB ; Memory requirement for Wabef term : 39520.86 MB . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/898:1106,contract,contractions,1106,https://psicode.org,https://github.com/psi4/psi4/issues/898,1,['contract'],['contractions']
Integrability,I presume this actually fixes props2 (in which case should also add back to tests/CM). My concern is the change that people won't automatically get their multipoles at the origin w/o explicitly asking and that behaviour is different btwen Cart/ZMat (psi4/psi4#782). Anyone else concerned?. The scf-coverage problems we've been seeing have been compilation dependent after DF_Helper merge. Do you consider the changes to this test a fix to slightly flawed test?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/808#issuecomment-332288034:356,depend,dependent,356,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332288034,1,['depend'],['dependent']
Integrability,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182874560:286,rout,route,286,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560,1,['rout'],['route']
Integrability,"I pulled up issue 782 to remind my self what is going on, but the comments; there are somewhat terse and they don't do enough to jog my memory even; though I had a conversation with Lori about it. I'm not sure the wider; community will be able to comment much on this point without doing a little; homework to figure out what is being asked about. Could we have a bit more; commentary describing the issue?. On Tue, Sep 26, 2017 at 2:16 PM, Lori A. Burns <notifications@github.com>; wrote:. > I presume this actually fixes props2 (in which case should also add back; > to tests/CM). My concern is the change that people won't automatically get; > their multipoles at the origin w/o explicitly asking and that behaviour is; > different btwen Cart/ZMat (psi4/psi4#782; > <https://github.com/psi4/psi4/issues/782>). Anyone else concerned?; >; > The scf-coverage problems we've been seeing have been compilation; > dependent after DF_Helper merge. Do you consider the changes to this test a; > fix to slightly flawed test?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/808#issuecomment-332288034>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qds6BK6y5mzxnLMsYRrJP9RA8FGQ6ks5smT9mgaJpZM4PkgZ8>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/808#issuecomment-332291477:911,depend,dependent,911,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332291477,1,['depend'],['dependent']
Integrability,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:46,rout,routine,46,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160,1,['rout'],['routine']
Integrability,I ran clang-format over some of the files and also looked manually for odd empty lines. There is the remaining question if the unused (as far as I see) `lsda/meta_cutoff` routines should stay or be remove?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-624507775:171,rout,routines,171,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-624507775,1,['rout'],['routines']
Integrability,"I recall that the restriction arises from an assumption I made about storage requirements. I think I was assuming that o^4 and o^3v arrays could be stored in a block of memory the size of t2, but I can’t be sure without looking through the code a bit. I’m not sure how difficult it would be to remove this restriction, but I will look into it. > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com> wrote:; > ; > Well, yes, he relative sizes would effect efficiency of contraction order,; > but I don't see why they would make the code not working at all... I; > suppose this restriction is in there somewhere but I don't see why.; > ; > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:; > ; > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; > assumption that's made in the contraction order? If nvirt < ndocc then it; > might be more efficient to contract first over the occupied orbitals?; > ; > —; > You are receiving this because you were mentioned.; > ; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > .; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339458114:487,contract,contraction,487,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339458114,3,['contract'],"['contract', 'contraction']"
Integrability,"I remember the episode but not the exact error (though it was in sapt and cubeprop tests). Something about pybind's behavior being less forgiving than boost's. Also psi4 modules behaved differently wrt how much control they took upon themselves vs giving to the AIOHandler lib. I think I standardized that aspect a bit. Good news is that I think you can adjust the synchronization again, so long as the tests pass (since it was broken test cases before that prompted the change). Or the inversion may have spontaneously healed the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277503822:365,synchroniz,synchronization,365,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277503822,1,['synchroniz'],['synchronization']
Integrability,"I second that. The original FCHK writer was specifically for GDMA, and I reverse engineered it from an example that I found in the GDMA repo. It's great that people who actually know what FCHK should look like have been able to patch it up, and it seems like it was only a very minor fix to our GDMA wrapper to get back up and running. Maybe we're close to converging on a proper FCHK!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1524#issuecomment-460845537:300,wrap,wrapper,300,https://psicode.org,https://github.com/psi4/psi4/pull/1524#issuecomment-460845537,1,['wrap'],['wrapper']
Integrability,"I see a segfault when running an SCF with some of the systems in L7 (in particular [circumcoronene](http://www.begdb.com/index.php?action=oneMolecule&state=show&id=4108)). I've traced the issue, at least in part, to integer sizing bug [in this check](https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L699) when the user requests less than Q^2 memory. This is due to a wraparound during subtraction, which results in the error condition [here](https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L761) erroneously evaluating to `false`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/716:424,wrap,wraparound,424,https://psicode.org,https://github.com/psi4/psi4/issues/716,1,['wrap'],['wraparound']
Integrability,"I see that this goes a lot further than I was expecting it to; some day that will stop surprising me. It's a shame about the apparent necessity to keep the inconsistent definitions, but you're probably right when you say lots of downstream code is going to rely on the current behavior, whether or not we see it as ""correct."" The dual-identity of type-A and type-B ghosts only complicates matters further, though I definitely see the need for it. It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow, but this is likely more complicated then it sounds. Either way, the ability to go back-and-forth between real and ghost is absolutely necessary, and type-B is the only one that can consistently do that. . Fixing only type-A ghosts to return zero mass may only confuse things further. If nothing else, the functions should at least do the same thing for type-A and type-B ghosts. Consistency between `Molecule.mass` and `Molecule.Z` could be worked on later, though as you pointed out it's probably not a good idea to change `Molecule.Z`. . As for a new `Molecule` function to ensure the user knows what they're going to get, are you referring specifically to a `molecular_weight` function or more generally a function to return either the mass or Z val as either zero or real depending on input? I could get behind either of those, though with `molecular_weight` I would suggest simply setting a default for ghost atoms to return zero mass as I can't imagine anyone would want a molecular weight including ghost atom masses. . EDIT: I just saw what you said about ACS and DGAS nre edit in [#844](https://github.com/psi4/psi4/pull/844). That could work, requiring the argument c-side and giving a default py-side, though I wonder how many places we'd have to update c-side calls to conform to this. Might be the best answer with the least pain involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363495902:1356,depend,depending,1356,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363495902,2,['depend'],['depending']
Integrability,"I see three different questions here:; 1. Is it possible to carry out MRCI in Psi?; 2. Can we get an error message better than a segfault, or for this not to segfault?; 3. Does the energy error indicate you've landed on the wrong electronic state? If so, how do you land on the right one?. My thoughts:. 1. Reading that paper, it looks like Sherrill and Piecuch did (as you suspected), a two-step computation. First, they did a CASSCF computation. Then they used the orbitals from that computation to do a RASCI computation. Then they fed those orbitals into a RAS computation to do their MRCI. That said, I cannot figure out what keywords they might have used to specify the right excitation levels. None of the keywords in the manual level.; 2. I would expect that the program should be able to accept orbitals this way. Unless another developer more experienced in detci sees otherwise, this looks to me a like a bug. I'll give some time for them to comment before investigating further myself.; 3. Just to be clear, do you have any reason to think that you landed on the C electronic state? If not, you may have landed on a different electronic state entirely. I recommend you look at the section of your SCF computation marked ""Final Occupation by Irrep"". Is that consistent with your desired electronic state? Is there any other low-lying electronic state that occupation could match?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517:107,message,message,107,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517,2,['message'],['message']
Integrability,"I seemingly successfully commented out the inclusion of `libint/libint.h` in the following files. Is there any known reason that that's a Bad Idea?; - psi4/src/bin/ccenergy/ccenergy.cc; - psi4/src/bin/ccenergy/local.cc; - psi4/src/bin/cceom/local.cc; - psi4/src/bin/cclambda/local.cc; - psi4/src/bin/ccresponse/local.cc. That header is also included in `ccsort/local.cc` for at least the purpose of getting `LIBINT_MAX_AM`. If that is the sole purpose, is it better to continue including the header or to apply the compiler definitions that now ship with libint: `-USING_libint;-DMAX_AM_ERI=N` (`N` is value from linked lib, not value spec to psi4 cmake)?. That pair of compiler defs are not presently used by anything, so they can be tossed if you all turn against them. I'm still not sure if they pass the bar of ""requirements, not merely recommendations"" (https://cmake.org/cmake/help/v3.6/manual/cmake-buildsystem.7.html#build-specification-and-usage-requirements). The `USING_libint` I thought could be useful down the road as libmints interfaces to more integrals packages. The `USING_`s are replacing the double use of `ENABLE_` as cmake option and compile definition that was going on earlier. If you'd all like HAVE, WITH, ENABLED, or whatever, instead, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240423295:1041,interface,interfaces,1041,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240423295,1,['interface'],['interfaces']
Integrability,I should have been clear. We want this tagged in the same BasisSet family even though there are no corresponding DF/RI basis for those particular atoms so that we get a better failure message.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/331#issuecomment-205812617:184,message,message,184,https://psicode.org,https://github.com/psi4/psi4/pull/331#issuecomment-205812617,2,['message'],['message']
Integrability,"I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. Are any of these now available in v5.1 that I should be activating?. ```; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM05-D not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM06-D3 not in Psi4.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163,2,['interface'],['interface']
Integrability,"I strongly recommend not doing that as you can get wrong answers and/or lose all threading capacity. . To get around the mkl-on-nodes problem, I advise installing the psi4-dev conda package that provides all of psi4's dependencies, incl. numpy and mkl, then building against that. ```; cd {top-level-psi4-dir}; conda create -n p4dev35 python=3.5 psi4-dev -c psi4/label/dev -c psi4; conda activate p4dev35; `psi4-path-advisor --intel`; # cmake configures; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; make install; ```; Is there any reason the psi4 conda package itself isn't suitable? If size is an issue, then mkl is the problem, and it doesn't do to just fix mkl for psi4 b/c other pieces (numpy, chemps2) use it, too. I'm working on an openblas build. If you're resolved on statically linking mkl, short of probing the math detection, I'd consult the mkl-link-advisor and pass the resulting advice to psi4 cmake via example (G.) of http://psicode.org/psi4manual/master/build_planning.html#cmake-lapack . EDIT: `conda install` --> `conda create` on 2nd line of snippet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281:218,depend,dependencies,218,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281,1,['depend'],['dependencies']
Integrability,"I suppose I should add my setup is kind of unusual in that I don't develop with or for python, only C++, so never have that stuff installed. So it caught me out for a minute, but easy to fix. Not critical by any means, but If one were a stickler for good cmake practices code compilation should never fall over because of cmake missing dependency checks, . Perhaps I'll try and port psi4 build to meson one day .. famous last words. :D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743313067:336,depend,dependency,336,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743313067,1,['depend'],['dependency']
Integrability,"I suppose if people want to get the ""broken"" version of ADC, they can install Psi4 between (at least) 1.3.2 and 1.5, right? I don't think we need to deprecate features that don't work, and if `adcc` is a ""drop-in"" replacement for ADC, I'd too **vote for removal**. Maybe in 1.6, and perhaps 1.7, calls to ADC should be shimmed to `adcc` with a deprecation warning, and afterwards the ADC interface removed (if it's different than `adcc`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330:388,interface,interface,388,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330,1,['interface'],['interface']
Integrability,"I suspect this has to do with the python3 fixes. Will take a look tomorrow. . Sent from my iPhone. > On Aug 20, 2015, at 5:08 PM, fevangelista notifications@github.com wrote:; > ; > Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py; > ; > ```; > future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); > temp = future_re.sub(future_replace, temp); > #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); > ```; > ; > but then I get this other error message (even with the newest commit):; > ; > Traceback (most recent call last):; > File ""<string>"", line 6, in <module>; > File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; > from wrappers import *; > File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; > from driver import *; > File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; > from interface_cfour import *; > File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; > import qcdb; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/**init**.py"", line 35, in <module>; > from .molecule import Molecule; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; > from .libmintsmolecule import *; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; > from oldpymodules import OrderedDict; > ImportError: No module named oldpymodules; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-133179959:596,message,message,596,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133179959,3,"['message', 'wrap']","['message', 'wrappers']"
Integrability,I think @matthewkennedy6 fixed this for frozen scans. It's just relaxed scans that still need an interface.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/42#issuecomment-182612789:97,interface,interface,97,https://psicode.org,https://github.com/psi4/psi4/issues/42#issuecomment-182612789,1,['interface'],['interface']
Integrability,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53039792:86,contract,contraction,86,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792,2,['contract'],['contraction']
Integrability,"I think I have a partial understanding of why the python snippet works with the psi4 executable, but not psi4's python api. I suspect something about psi4's GDMA interface requires/assumes that there is an output file. When you run psi4 as an executable, the results are written to an output file, so everything is fine. When you run psi4 through the python api, the results are by default printed to your terminal and there is no output file, so you run into this problem. Here's a workaround. Add the following line to the python snippet, immediately after the `import psi4` line:; ```; psi4.core.set_output_file('output.dat', False); ```; This line changes the default output of psi4's python api (from the terminal to a file ""output.dat""). When I insert this line, the python snippet runs successfully. Someone more familiar with the GDMA interface than myself should look into how to fix psi4 so that this workaround isn't necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2706#issuecomment-1228625767:162,interface,interface,162,https://psicode.org,https://github.com/psi4/psi4/issues/2706#issuecomment-1228625767,2,['interface'],['interface']
Integrability,"I think I would leave the `OptimizationResult` with `""success"": ""false""`. Adding something optking side would be better imo especially if the goal is just a comprehensible error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214:178,message,message,178,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214,1,['message'],['message']
Integrability,I think in other orbital test we attempted to take magnitudes or norms to remove these issues. ROT is DOCC + ACT + VIR with the inactive pieces removed. I can see how the previous message was confusing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1847#issuecomment-598212613:180,message,message,180,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-598212613,1,['message'],['message']
Integrability,"I think it is very possible to use Psi4 for large basis set calculations as long as you use df or cd approximations. Of course, depending on your molecular system you should provide enough memory for OO methods. Finally, you should compile your psi4 with ""--max-am-eri=7"" option, which is necessary for our integral library (libint). I guess our binary versions are also compiled with high angular momentum options. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152821604:128,depend,depending,128,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152821604,1,['depend'],['depending']
Integrability,I think pywrap-alias does use some of detci's more obscure methods (below). I was also remembering a bad bout I had with ddd before last Christmas where Windows only hung up for detci mp5 run only by exe or by api. ```; (py38) >>> grep -e 'PASSED' -e 'D E T C I' ../tests/pywrap-alias/input.out ; [1] Au std...........................................................................PASSED; [2] MP2 sp...........................................................................PASSED; MP2 route check.................................................................PASSED; [3] MP3 occ..........................................................................PASSED; MP3 route check.................................................................PASSED; [4] MP3 detci (energy and route check)...............................................PASSED; [5] MP4 fnocc........................................................................PASSED; (a 'D E T C I' module); [6] MP11 sp..........................................................................PASSED; (a 'D E T C I' module); [7] ZAPT4 sp.........................................................................PASSED; (a 'D E T C I' module); [8] FCI sp...........................................................................PASSED; [9] MP2.5 sp.........................................................................PASSED; [10] cbs()............................................................................PASSED; [11] db().............................................................................PASSED; [12] CISD sp..........................................................................PASSED; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-683898544:487,rout,route,487,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-683898544,3,['rout'],['route']
Integrability,I think that a little noise in the gradients is inevitable with so many moving parts; that's why we have calls like [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L274-L275) for all (I think) gradients throughout the code. It sounds like we just need to consider non-Abelian symmetry in this routine to fix the issue you're describing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351180986:327,rout,routine,327,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351180986,1,['rout'],['routine']
Integrability,"I think that is likely the way to go, I believe you will still need to merge some of the new integral code. It may be worth splitting that off into a another PR to get a digestible component there. We usually can merge small chunks quicker and expanding functionality through python is usually quite preferred if that level of integration is sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-498737983:327,integrat,integration,327,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-498737983,1,['integrat'],['integration']
Integrability,I think the `np-array-interface` [test](https://github.com/psi4/psi4/blob/master/tests/numpy-array-interface/input.dat) should be checking for this already: it is hitting `Matrix.np_read()` after writing it into file.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607#issuecomment-485812426:22,interface,interface,22,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485812426,2,['interface'],['interface']
Integrability,"I think the desire to change the name was to reflect that it can be used for other general-purpose (_i.e._ not only evaluated at nuclei) ESP routines, such as grid properties. IIRC, those integrals are just the regular potential ints, modified to allow arbitrary centers to be provided. At one point in time they were strictly Cartesian AO only, to avoid multiple transformations (contraction should be performed with backtransformed D matrices in that case), but I'm not certain that's true anymore.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878#issuecomment-351194994:141,rout,routines,141,https://psicode.org,https://github.com/psi4/psi4/pull/878#issuecomment-351194994,2,"['contract', 'rout']","['contraction', 'routines']"
Integrability,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:183,message,message,183,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143,1,['message'],['message']
Integrability,"I think there are two issues here: there is a bug in the code, and the interface does not allow for useful core freezing. As for the bug, if we set `freeze_core = FC`:. ```; FC | C N Na | F I (ECP); -1 | 2 2 10 | 2 36 (28); -2 | 0 0 2 | 0 18 (28); ```; - for `freeze_core = -1`, the code ""correctly"" freezes 7 pairs on NaCN, 5 pairs on FI in addition to 14 pairs in I's ECP, and for the dimer it's 12 pairs.; - for `freeze_core = -2`, the code ""correctly"" freezes 1 pair on NaCN, 0 pairs on FI, but for the dimer it incorrectly freezes 0 pairs as the ECP has 14 pairs and the `-2` option would like to freeze only 10 pairs (1 on Na and 9 on I). As for the second problem, the most obvious way would be to allow the user to pass in a dictionary with `""element"": -shell` and/or `""element"": frozen_pairs` to specify exactly what to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-723724864:71,interface,interface,71,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-723724864,1,['interface'],['interface']
Integrability,"I think there's more variations and potential collisions, even within one user's environment, than can really be predicted and caught. In the inversion branch, we've started catching the gcc <4.9 error signature and printing a this-is-probably-what's-wrong message. Expanding that error catching and printing the customized path to the `link.txt` file is probably the best bet. [This](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/setenv.py) is a runtime env diagnosis script I wrote once. It didn't catch on, but it could be expanded for rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252942976:257,message,message,257,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252942976,1,['message'],['message']
Integrability,"I think this is enough for now. I want to very carefully check the handling of perturbations before making this accessible enough to be tested by our normal suite. For posterity, standard usage with the current interface is:; ```; std::shared_ptr<OneBodySOInt> wOBI(integral_->so_rel_potential());; OperatorSymmetry msymm(OperatorSymmetry::L, molecule_, integral_, soFactory_);; auto wMats = msymm.create_matrices(""SO Relativistic Potential"");; wMats.insert(wMats.begin(), soFactory_->create_matrix(""SO Relativistic Potential""));; wOBI->compute(wMats);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3174#issuecomment-2152661157:211,interface,interface,211,https://psicode.org,https://github.com/psi4/psi4/pull/3174#issuecomment-2152661157,1,['interface'],['interface']
Integrability,"I took a quick look at dfocc, and removing these lines; ```cpp; #include ""psi4/libciomr/libciomr.h""; #include ""psi4/libiwl/iwl.h""; #include ""psi4/libpsio/psio.hpp""; ```; from `array.h` doesn't cause any build failures. This was the only file I looked at, but reducing dependencies in that code should help to bring down the long build time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262108439:268,depend,dependencies,268,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262108439,1,['depend'],['dependencies']
Integrability,"I tried using this code to generate the potential energy curve for the CF molecule and I got this error message: . ```; import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:104,message,message,104,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['message'],['message']
Integrability,"I try to compile psi4 with gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) compiler. I got the following error:. Scanning dependencies of target mints; [ 59%] Building Fortran object src/lib/libmints/CMakeFiles/mints.dir/dkh2-dkh4_main.F90.o; [ 59%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/local.cc.o; In file included from /home/ubgroup/psi4/src/lib/libmints/mints.h:70,; from /home/ubgroup/psi4/src/lib/libmints/potentialint.h:31,; from /home/ubgroup/psi4/src/lib/libmints/mints.h:44,; from /home/ubgroup/psi4/src/lib/libmints/local.cc:30:; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids initialization of member ‘max_noon_’; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: making ‘max_noon_’ static; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids in-class initialization of non-const static member ‘max_noon_’; make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 1; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/404:126,depend,dependencies,126,https://psicode.org,https://github.com/psi4/psi4/issues/404,1,['depend'],['dependencies']
Integrability,"I understand now. It's supposed to print something like the below, which is helpful and intelligible. (I think -- can change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:174,message,message,174,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723,3,['message'],['message']
Integrability,"I updated thermo.cc so that only 1 warning message is printed when the frequencies are checked for low and imaginary values. I also added a newline after the low frequency mode warning. Previous output (3 imaginary modes, total of 12 low frequency modes):. ```; WARNING: At least one vibrational frequency is imaginary!; WARNING: At least one vibrational frequency is imaginary!; WARNING: At least one vibrational frequency is imaginary!; ```. and. ```; Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes.; ```. New output (3 imaginary modes, total of 12 low frequency modes):. ```; WARNING: At least one vibrational frequency is imaginary!; ```. and. ```; Warning: used thermodynamic relations are not appropriate for low frequency modes.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/197:43,message,message,43,https://psicode.org,https://github.com/psi4/psi4/pull/197,1,['message'],['message']
Integrability,"I use psi4 v1.7 to perform gradient calculations under the WB97M-D3BJ/DEF2-TZVPPD level. Most structures work fine, but I get the following error in some structures without a clear error message. ```; ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:187,message,message,187,https://psicode.org,https://github.com/psi4/psi4/issues/2970,2,"['Rout', 'message']","['Routine', 'message']"
Integrability,"I want to install psi4 on my openff environment since OpenFF Recharge requires it to generate electrostatic charges (https://docs.openforcefield.org/projects/recharge/en/stable/getting-started/installation.html). . I have used mamba to install openff, following steps 3 and 4 [https://docs.openforcefield.org/en/latest/install.html](here). I tried to install psi4 via mamba with the following commad:; `mamba install psi4=1.8.1 -c conda-forge/label/libint_dev -c conda-forge`. However, I got several warnings about incompatible packages:. `blas [2.4|2.5|2.6|2.7] would require; │ │ └─ libblas [3.8.0 4_openblas|3.8.0 5_openblas|3.8.0 6_openblas|3.8.0 7_openblas], which requires; │ │ └─ openblas 0.3.5.* , which does not exist (perhaps a missing channel);; `; and; ` psi4 1.8.1 would require; │ ├─ libblas * *mkl, which requires; │ │ └─ blas * mkl, which conflicts with any installable versions previously reported;; │ └─ mkl >=2022.2.1,<2023.0a0 , which conflicts with any installable versions previously reported;; `. I also attempted to install psi4=1.7, but this also led to a similar conflicts issue:. `psi4 1.7** is not installable because it requires; └─ blas 1.0 mkl, which conflicts with any installable versions previously reported.; `; I believe I need psi4 installed on my openff environment for it to be usable for openff's wrappers. I've tried installing the blas dependencies explicitly:. `mamba conda install -c conda-forge openblas` ; but this tells me the package is already installed. . and:. `mamba install 'libblas * *mkl' -c conda-forge -c defaults` which results in the same `openblas 0.3.5.* , which does not exist (perhaps a missing channel);` error. . Any ideas? I must admit I am relatively new to using mamba + managing environments, but I believe it is just a reimplementation of conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046:1337,wrap,wrappers,1337,https://psicode.org,https://github.com/psi4/psi4/issues/3046,2,"['depend', 'wrap']","['dependencies', 'wrappers']"
Integrability,"I was able to get the potential energy curve (PEC) for the ground state of the CF molecule but then once I include a method that could get the PEC for the excited state I kept getting an error. Then I wrote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:306,message,message,306,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['message'],['message']
Integrability,"I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2434,wrap,wrappers,2434,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,['wrap'],['wrappers']
Integrability,"I was attempting to run an IRC, only to receive a rather confusing error message that `symm_matrix_inv : opt_symm_matrix_eig could not diagonalize`. After spending far too much time trying to figure out why various matrices were filled with NaN, I realized the problem was that I had supplied an energy minimum, not a transition state. (The SI that I was following put in a wrong geometry.) I've attached my input file. The IRC code saw the gradient was about zero and tried to follow the lowest mode... which was a translational mode. If the new PyOptking is given an initial hessian for an IRC, could it double-check that there's actually an imaginary mode?. [input.txt](https://github.com/psi4/psi4/files/2019016/input.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1025:73,message,message,73,https://psicode.org,https://github.com/psi4/psi4/issues/1025,1,['message'],['message']
Integrability,"I was doing a geometry optimization, and only the header changed. The cclib parser skips the header lines by content and the recent psi4 output has a different sequence of blank lines and info. . As for my application, I'm trying to teach chemistry students a bit of computational chemistry. The specific goal is to calculate geometry, vibrational modes and perform a PES scan on H3O+ using two levels of theory. So once the geometry is defined, I'm setting the output file, calling `psi4.print_header()`, then running the `optimize()` and `frequency()` routines. After fixing the (outdated) cclib parser, all the data seems to come through correctly. . Cclib just needs to see that initial line (""Psi4: An Open-Source Ab Initio Electronic Structure Package"") when it starts reading to assign the correct parsing file. I couldn't find any way to manually specify a parser.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608:554,rout,routines,554,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608,1,['rout'],['routines']
Integrability,"I was just looking through the code in the libxc interface, and I noticed the following in LibXCfunctional.cc; ```; if (xc_functional_->info->flags & XC_FLAGS_HYB_CAM) rangesep++;; if (xc_functional_->info->flags & XC_FLAGS_HYB_CAMY) rangesep++;; if (xc_functional_->info->flags & XC_FLAGS_HYB_LC) rangesep++;; if (xc_functional_->info->flags & XC_FLAGS_HYB_LCY) rangesep++;; ```. While this is correct, per se, the thing is that the four cases refer to different kinds of range separation kernels. The case ```XC_FLAGS_HYB_CAM``` is the most common one, and appears to be the only one supported by Psi4. The other cases should crash, as they will give an incorrect result.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1258:49,interface,interface,49,https://psicode.org,https://github.com/psi4/psi4/issues/1258,1,['interface'],['interface']
Integrability,"I was like ""what's a correct copy-paste error message"" until I read the change, and realized that this meant rectifying a copy-pasted error message in detci...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996:46,message,message,46,https://psicode.org,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996,2,['message'],['message']
Integrability,"I was looking at the DIIS code to determine whether it properly handles the case of linear dependencies. For instance, the UHF code is; ```; if (initialized_diis_manager_ == false) {; diis_manager_ = std::make_shared<DIISManager>(max_diis_vectors, ""HF DIIS vector"", DIISManager::LargestError,; DIISManager::OnDisk);; diis_manager_->set_error_vector_size(2, DIISEntry::Matrix, gradient_a.get(), DIISEntry::Matrix,; gradient_b.get());; diis_manager_->set_vector_size(2, DIISEntry::Matrix, Fa_.get(), DIISEntry::Matrix, Fb_.get());; initialized_diis_manager_ = true;; }. diis_manager_->add_entry(4, gradient_a.get(), gradient_b.get(), Fa_.get(), Fb_.get());; ```; whereas extrapolation is handled by; ```; bool UHF::diis() { return diis_manager_->extrapolate(2, Fa_.get(), Fb_.get()); }; ```; To me, this looks like the code does **not** project linearly dependent eigenvectors out. This might certainly explain many SCF convergence problems seen with Psi4, in which the energy apparently converges but the DIIS error stagnates to a large value. Note that the fix was already in Pulay's original paper. In [Chem. Phys. Lett. 73, 393 (1980)](https://doi.org/10.1016/0009-2614(80)80396-4) he writes; > An even better choice is the use of Fock matrix elements transformed to an orthonormal basis, such as `S^-1/2 F S^-1/2` where `S` is the overlap matrix. This takes into account that a charge shift from a basis function to another is less important physically if the two functions overlap strongly. Obviously, `S^-1/2` is the orthogonalizing matrix `X`; alternatively, the molecular orbital coefficients `C` can also be used.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2217:91,depend,dependencies,91,https://psicode.org,https://github.com/psi4/psi4/issues/2217,2,['depend'],"['dependencies', 'dependent']"
Integrability,"I was originally thinking the interface would be more like:; ```python; tddft(""B3LYP/cc-pVDZ""); ```; or ; ```python; ref_e, ref_wfn = psi4.energy(""B3LYP/cc-pVDZ"", return_wfn=True); tddft(ref_wfn); ```. I would be curious as to others thoughts on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626327302:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626327302,1,['interface'],['interface']
Integrability,"I was trying to do a 4-electron FCI using the DETCI code with a huge valence basis set but it seems Psi4 cannot handle CI calculations with more than 255 functions. The errors that I encountered are mentioned in [this forum thread](http://forum.psicode.org/t/increase-ioff-max/531). In short:. - If I use more than 255 orbitals I get a memory violation error from the system and ``(subgr_lex_addr): Impossible walk!`` message from Psi4.; - If I use 408 orbitals I get . ```; RuntimeError:; Fatal Error: error: IOFF_MAX not large enough!; Error occurred in file:path/devel/psi4/psi4/src/psi4/detci/get_mo_info.cc on line: 228; ```. It would be great if someone could create a patch fixing this issue, since it severely limits the capabilities of the DETCI code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/724:418,message,message,418,https://psicode.org,https://github.com/psi4/psi4/issues/724,1,['message'],['message']
Integrability,"I was trying to run a Gaussian-2 energy calculation for hydrogen disulfide, which appears in the original G2 test set: http://scitation.aip.org/content/aip/journal/jcp/94/11/10.1063/1.460205. The job terminated after calculating the MP4(SDTQ) total energy, with message:. RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for S in /opt/science/psi/psi4/share/psi/basis/6-311g_2df_p_.gbs. When I examine the 6-311g_2df_p_.gbs file, I see that it only has entries for H, He, Li, Be, B, C, N, O, F, Ne, K, Ca. According to the comment at the top of the file it's supposed to have been merged from 6-311G*\* and 6-311G on the EMSL Basis Set Exchange. I double checked on the BSE and these basis sets also have entries for Na, Mg, Al, Si, P, S, Cl, Ar, Ga, Ge, As, Se, Br, Kr, I, as expected.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/58:262,message,message,262,https://psicode.org,https://github.com/psi4/psi4/issues/58,1,['message'],['message']
Integrability,"I will need a little bit of time to properly parse the original message, but I suspect I know the source of the discrepancy. I am guilty of writing the original FCHK implementation; I wrote it as a simple interface to the GDMA code. I don't have access to any versions of Gaussian, so I used a combination of the example FCHK files that ship with GDMA, and the GDMA source, to reverse-engineer something resembling an FCHK file (that decision has backfired in recent weeks as people use the FCHK files we produce for other interfaces and find that it's incomplete: we've been working through those bug reports steadily). Where things get tricky is that Psi4 (and its progenitor) uses the [CCA integral](https://github.com/psi4/psi4/files/2957296/CCA.pdf) ""natural"" norm convention, unlike that other code (detailed on the last page of that attachment). Therefore, there's a factor of ; ![image](https://user-images.githubusercontent.com/201881/54209345-029a9d00-44b4-11e9-85b3-0789d498cc93.png); present in our basis function norms that some other codes lack. The presence of the overlap metric in the SCF equations means that the alternative basis function normalization manifests itself in different MO coefficients, but both conventions yield equivalent wavefunctions and properties. It's these corrections that are being applied in the snippet of code that @susilehtola referenced above. I surmise that these are not being applied consistently somewhere in the translation between Psi4 and GDMA.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927:64,message,message,64,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927,6,"['interface', 'message']","['interface', 'interfaces', 'message']"
Integrability,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1116:1544,rout,routines,1544,https://psicode.org,https://github.com/psi4/psi4/issues/1116,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954:203,message,message,203,https://psicode.org,https://github.com/psi4/psi4/issues/954,1,['message'],['message']
Integrability,"I would like to use the vv10 kernel with custom parameters to use it in the DFT-NL fashion (http://pubs.acs.org/doi/full/10.1021/ct200644w).; One needs to modify the b and c parameters. I figured out that those are obtained from libxc in `LibXCfunctional.cc`. I suppose that within `LibXCFunctional::build_worker` one has to add a user-tweak somehow to modify the vv10 parameters. So to the actual questions:. - Can I already request the VV10 kernel to be included for a given functional through the python interface? (parameters aside); - Can I already request the VV10 kernel in a post-SCF fashion for a given density (a non-SCF VV10 is perfectly fine for energies, it is the default in ORCA). I think I saw this mentioned somewhere, but cannot find it.; - Any further helpful pointers to within code where I would need to make changes or need to take a look? (I am more a Fortran than C++ guy, my head hurts already)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870:507,interface,interface,507,https://psicode.org,https://github.com/psi4/psi4/issues/870,1,['interface'],['interface']
Integrability,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-228449211:212,rout,routines,212,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211,1,['rout'],['routines']
Integrability,"I wouldn't ship it in its current state, but it sounds like the `-c psi4/label/agg` (built with gcc_linux-64) is what you want. It'll end up with more dependencies than it has now (this is a minimal build) but not any more from the gcc family (except maybe gfortran).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347207093:151,depend,dependencies,151,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347207093,1,['depend'],['dependencies']
Integrability,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264468397:385,depend,dependencies,385,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397,1,['depend'],['dependencies']
Integrability,"I'd prefer a canonical or symmetric orthogonalization scheme to Gram-Schmidt, as the Gram-Schmidt vectors are dependent on how you order them. But yes, the consensus in this topic was already that re-orthogonalizing the orbitals was the way to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869303745:110,depend,dependent,110,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869303745,1,['depend'],['dependent']
Integrability,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:76,message,message,76,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697,4,['message'],"['message', 'messages']"
Integrability,"I'll break with our normal protocol and count my review as the third, because @CDSherrill has given approval (the tests pass).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-454855676:27,protocol,protocol,27,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-454855676,1,['protocol'],['protocol']
Integrability,"I'll post a PR for half of this soon. Any more comments on the interface for floats/arrays being separate (as now, with arrays not often used) or unified? I think I'm favoring the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-442463950:63,interface,interface,63,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-442463950,1,['interface'],['interface']
Integrability,"I'll review this once it passes tests. `test_cppe.py:test_cppe_tdscf_uhf` is currently failing. Based on the error message, this has nothing to do with CPPE but represents an indexing error in the code. For a first debug attempt, I would recommend removing both CPPE and the comparison against reference energies, and make sure the TDSCF completes in the first place. Let me know if you need assistance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605#issuecomment-1153836192:115,message,message,115,https://psicode.org,https://github.com/psi4/psi4/pull/2605#issuecomment-1153836192,1,['message'],['message']
Integrability,"I'll try to wrap everything up this afternoon. I just need to do the official release (which is easy, just requires me making a changelog and stuff). And I will remove the restrict keyword from cmake",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-289815684:12,wrap,wrap,12,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-289815684,1,['wrap'],['wrap']
Integrability,"I'll work on dropping Ambit's dependency on Psi4. The functions that Ambit provides should live in Psi4 anyways as they are responsible for transferring data from Psi4 to Ambit. I'm not planning on Psi4 ""absorbing"" Ambit anytime soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-234038643:30,depend,dependency,30,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234038643,1,['depend'],['dependency']
Integrability,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1354:184,message,message,184,https://psicode.org,https://github.com/psi4/psi4/issues/1354,2,['message'],['message']
Integrability,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118:280,message,message,280,https://psicode.org,https://github.com/psi4/psi4/issues/1118,2,['message'],['message']
Integrability,I'm compiling the latest master of Psi4. SNS-MP2 automatic download failed with ; ``Cloning into 'snsmp2_external'...; fatal: invalid reference: a035c27; CMake Error at /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/snsmp2/snsmp2_external-prefix/tmp/snsmp2_external-gitclone.cmake:75 (message):; Failed to checkout tag: 'a035c27'; ``; Looking up the SNS-MP2 Git I found the tag of the current release to be dd286d3. I replaced it in ``external/downstream/snsmp2/CMakeLists.txt`` and the compilation proceeded.; Is this actually the correct version for SNS-MP2? Should I submit a PR with this tiny change?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1425:320,message,message,320,https://psicode.org,https://github.com/psi4/psi4/issues/1425,1,['message'],['message']
Integrability,"I'm finding non-deterministic energies for cd-mp2, depending on amount of extraneous stuff commented in the input file. For example, the below works as is, but gives a different answer when the unused molecules are commented out (not only molecules, but irrelevant keywords can cause the problem, too). The problem shows up in the final output as correlation energy has wrong sign and not matching sum of aa, ab, bb contributions. At first I though it was because you're setting `EcorlL` but printing `Ecorl`, @bozkaya , but that turns out to be innocent. I've got a valgrind if that'll help. ```; molecule methane {; C 0.0000000 0.0000000 3.0826195; H 0.5868776 0.8381742 3.4463772; H -1.0193189 0.0891638 3.4463772; H 0.0000000 0.0000000 1.9966697; H 0.4324413 -0.9273380 3.4463772; }. molecule hf {; H; F 1 0.917; }. molecule bh_h2p {; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. set basis cc-pvdz; set scf_type df; set guess sad; set freeze_core true; set e_convergence 8; set d_convergence 7. set reference uhf; set mp2_type cd; energy('mp2'); print_variables(). compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST. ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914741; REF Energy (a.u.) : -25.94513055914741; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; CD-MP2 Corr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244:51,depend,depending,51,https://psicode.org,https://github.com/psi4/psi4/issues/244,1,['depend'],['depending']
Integrability,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:1465,interface,interface,1465,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314,2,['interface'],['interface']
Integrability,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262127128:81,depend,dependencies,81,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128,1,['depend'],['dependencies']
Integrability,"I'm having a hard time following all this, so let me try to make sure I'm understanding your concerns about `driver/p4util/numpy_helper.py:_np_read`. I think you're suggesting we explicitly mark `allow_pickle=False` for that function because; 1. security reasons mean `allow_pickle` should be `False` unless needed to be `True`; 2. `allow_pickle` is not needed to be `True` for that function (as demonstrated by `np-array-interface` passing, even with Travis passing in `False`); 3. some users may compile with pre-16.3 NumPy, where default definitions would make `allow_pickle=True`, which is bad by (1) and (2). Did I get that right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607#issuecomment-485813657:422,interface,interface,422,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485813657,1,['interface'],['interface']
Integrability,"I'm hitting a similar error message with `dcft_gradient_UHF.cc` but it reports that the error is in `libmints/matrix.h`. Reducing the optimization level was the only way I could get it to compile. Even compiling with -O2 gives the error, -O1 is the only way to resolve it. I see no issue with the compiler- and file-specific flags for this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368651645:28,message,message,28,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368651645,1,['message'],['message']
Integrability,"I'm in the process of implementing forces in my own code, ERKALE. Related; to this, I was looking at the nuclear attraction integral derivative code; in PSI. Interestingly, it would seem that there is a bug in PSI: the loop limits; are the same in the derivative code as in the normal attraction integral; code. The relevant code in src/lib/libmints/osrecur.cc is. ```; int mmax = am1 + am2;. double *F = new double[mmax+1];. // Form Fm(U) from A20; calculate_f(F, mmax, u);. // Perform recursion in m for (a|A(0)|s) using A20; for (m=0; m<=mmax; ++m) {; vi_[0][0][m] = tmp * F[m];; }; for (m=0; m<=mmax-1; ++m) {; vx_[0][0][m] = 2.0*zeta*PC[0]*vi_[0][0][m+1];; vy_[0][0][m] = 2.0*zeta*PC[1]*vi_[0][0][m+1];; vz_[0][0][m] = 2.0*zeta*PC[2]*vi_[0][0][m+1];; }; ```. Table X in the Obara-Saika paper states that; (s | Au | s)^(0) = 2 zeta ( Pu - Cu ) (s | A0 | s)^(1). If you look at what the code above does, it gives a plain zero for this; integral. Furthermore, if you look at the recursion formulas for the integral derivatives A(mu), you see that they are equivalent to the case A(0) with an additional term depending on A(mu-1i). However, in the initializations and the recursions the derivatives only go to mmax-1, not mmax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3:1110,depend,depending,1110,https://psicode.org,https://github.com/psi4/psi4/issues/3,1,['depend'],['depending']
Integrability,"I'm letting @loriab merge, since she's more familiar with MolSSI interfaces.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2905#issuecomment-1480168547:65,interface,interfaces,65,https://psicode.org,https://github.com/psi4/psi4/pull/2905#issuecomment-1480168547,1,['interface'],['interfaces']
Integrability,"I'm looking around in the same area, and I think it might be a nice option to allow natural orbital occupancies to be gathered from the SCF wavefunction when the densities are requested as keyword arguments. In the current code, if you specify `density_a`, the occupancies are taken from the `core.Wavefunction.nmopi` which is the number of molecular orbitals per irrep. In the `write.cc` file in `libmints` which is called when `set print mos` and `set molden_write True` are set, the occupancy is reported correctly. If you use the molden interface directly, I think you would simply need to compute the reference wavefunction first, return this wavefunction, and pass it into molden with a new kwarg `scf_wfn` which would then use `core.HF.occupation_a()` and `core.HF.occupation_b()` to get the correct occupations. Then you could pass the SCF wavefunction into the post-SCF methods.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/699#issuecomment-300673605:541,interface,interface,541,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300673605,2,['interface'],['interface']
Integrability,"I'm not 100% certain my ""fix"" is not just a hack - my understanding of basis sets and contractions is rather limited. The way I understand it, we're not trusting user input and are normalising all of the normal shells, using both `self.normalise_shell()` and `self.erd_normalise_shell()`. For normal shells, the inputs are the exponent `eps` and the normalisation constant `N` in: ; `psi = N * exp (-r**2 * eps)`. For ECP's, the inputs on each line aren't the exponent + normalisation, but rather they should be the three variables (`n`, `z`, `d` columns in g09 input) in the `i`th component of the potential `v(r)`:; `v(r)_i = d_i * r**(n_i) * e**(-z_i * r**2)`; The third column (`d`, if I got the above right) is stored in `self.PYcoef` and `self.PYoriginal_coef`. If this coefficient is set to zero, the whole component of the potential should be 0 - it shouldn't be normalised. The first column `n` goes to `self.rpowers` for each shell. Finally, the `self.PYexp` contains the exponent `z`. My two questions therefore are:; - should we perform any normalisation at all (including `self.normalise_shell()`) on ECP shells? To me the answer seems no...; - I am assuming the only way to tell a shell is an ECP shell from within `ShellInfo` class is if `self.rpowers` is populated. Wouldn't it be better, if `ShellInfo` received `pt=""Normalized""` when processing an ECP shell?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376423459:86,contract,contractions,86,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376423459,1,['contract'],['contractions']
Integrability,"I'm not convinced it adds much to the cmake output (I've added a few more lines higher up and added LAZ to the message line you wanted me to add to prove to myself it was doing something!):. Output from: cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr/local/psi4; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found BLAS: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found LAPACK: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- ; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""MathOpenMP_LIBRARIES-NOTFOUND;OpenMP::OpenMP_CXX"". -- ; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-fopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:111,message,message,111,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,1,['message'],['message']
Integrability,"I'm not sure I understand how the numbers are different for the case of no charges. If this routine is only computing the potential from external point charges (i.e. not the nuclei), then the routine shouldn't be run at all if there are no external point charges!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890:92,rout,routine,92,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890,2,['rout'],['routine']
Integrability,"I'm not sure how often `oeprop` really gets called directly in an input, so this is an interesting case. I'm actually tempted to say this is ""expected"" behavior - if you're not calling `oeprop` within the pre-built workflow of another method, maybe it shouldn't get a name unless you specify one. . the only issue is you may not be confident in _how_ the dipole was calculated - e.g. if you run a CCSD energy calculation, then call `oeprop`, does it form the CCSD density and contract with the dipole integrals? generally we only update the density in `properties`, so I'd wager you would actually get the SCF dipole back out. if I recall, it should be printed in the output file which density is used, but if you pull results directly from the python output then you won't necessarily know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545:476,contract,contract,476,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545,1,['contract'],['contract']
Integrability,"I'm not sure what you mean by ""pb"", but I understand the question. I'm the author of this part of the code, and I checked the signs very; thoroughly when the code was written. Most likely, this is a confusion about the sign conventions of the code.; You'll recall that the sign of a determinant depends on the ordering of the; spin orbitals. In this code, all alpha spin orbitals come first, and then; all beta spin orbitals (this winds up being an easier rule to state and; maintain than alternatives like ""order by spatial orbital, and then alpha; first and beta second within spatial orbital numbering""). With that ordering, the signs given are correct. (See, for example,; equation 2.260 of Szabo and Ostlund). Best,; David. On Wed, Sep 16, 2020 at 2:04 PM saadyalouz <notifications@github.com> wrote:. > Dear developers,; >; > I am currently running SA-CASSCF calculations on the formaldimine; > molecule. I am particularly interested by the determinant decomposition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.varia",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:295,depend,depends,295,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,2,['depend'],['depends']
Integrability,"I'm of the opinion that we should either hunt it down or leave an error message describing how the input _should_ have been written. Given what the user is trying to do, the approach they took is the one I would have tried first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-434799841:72,message,message,72,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-434799841,1,['message'],['message']
Integrability,"I'm posting this for discussion before I start coding anything. I was hoping to have some more details on prefactors, but I've both fallen ill and been given a shift in priorities, so I'm posting what I have in the interests of not wasting more time. I'm hoping to have more to say on the prefactor problem when I've recovered. @kcpearce's plans for MP2 hessians are related, but not the part of the project that I'll be focusing on. ## Motivation; Several different groups of Psi developers are dissatisfied with Psi's current technology for correlated derivatives.; * At Emory, @fevangelista has recently implemented gradients for DSRG-PT2 via a standalone code interfaced to Psi. Getting those working required consulting three(!) other experienced Psi developers and borrowing code from a fourth because the assumptions of the `libmints/libtrans` machinery are undocumented and confusing.; * At University of Georgia, the DCT code currently has to go through several contortions to be compatible with the gradient code. It has to [rewrite part of libtrans for RHF gradients](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:664,interface,interfaced,664,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['interface'],['interfaced']
Integrability,"I'm reading the cmake overview docs (which are actually cohesive, imagine that) and agree with @ryanmrichard's second SO post. It seems practical to reason about INTERFACE (which, yes, now I see is different from the add_library() STATIC/SHARED/MODULE/IMPORTED/INTERFACE business) and PRIVATE separately, then, if both, consider PUBLIC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237732780:162,INTERFACE,INTERFACE,162,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237732780,2,['INTERFACE'],['INTERFACE']
Integrability,"I'm reasonably sure there was a reason why that `""f_options"" != False` check was necessary at some point, I just don't remember it right now. As long as all test pass, it should be fine, and I'm guessing DDD will make changes to the routines anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2028#issuecomment-723523530:233,rout,routines,233,https://psicode.org,https://github.com/psi4/psi4/pull/2028#issuecomment-723523530,1,['rout'],['routines']
Integrability,"I'm sorry, but the issue does not seem to be fully solved... Yes now the atom nr in the header of the cube file is correct:; ```; Psi4 Gaussian Cube File.; Property: Dt [e/a0^3]. Isocontour range for 85% of the density: (0.0571983,0); 5 -12.329260 -10.002258 -9.679907; 131 0.160000 0.000000 0.000000; 120 0.000000 0.160000 0.000000; 122 0.000000 0.000000 0.160000; 53 0.000000 0.438284 -0.000000 -0.000001; 6 0.000000 -3.552440 -0.000000 -0.000001; 1 0.000000 -4.296614 -1.929221 -0.000001; 1 0.000000 -4.296803 0.964516 1.670895; 1 0.000000 -4.296614 0.964705 -1.670708. ```; But the integrated electrons in the cube file still misses alot of electrons. I use the cube file as input for the Chargemol code, and it works perfect for all other than molecules with Iodine as in this example. ```; Starting DDEC program; 2018/08/14 12:53:41; Copyright (c) 2014, 2015, 2016 by Thomas A. Manz and Nidia Gabaldon Limas. Rights reserved.; ; **************** THREAD INFORMATION ******************; Job running using OpenMP.; The number of parallel threads is: 4; ; ******************************************************; ; /home/termo/chargemol_09_26_2017/atomic_densities/ ; ; ******************** TIME CONTROL ********************; Starting format_total_cube_density; ******************************************************; ; inputfile = ""total_density.cube""; parameters; 5.0000000000000000 -12.329260000000000 -10.002257999999999 -9.6799070000000000 ; 131.00000000000000 0.16000000000000000 0.0000000000000000 0.0000000000000000 ; 120.00000000000000 0.0000000000000000 0.16000000000000000 0.0000000000000000 ; 122.00000000000000 0.0000000000000000 0.0000000000000000 0.16000000000000000 ; sum_negative_density= 0.0000000000000000 ; center_nabc =; 80 63 60; 55 63 60; 50 50 60; 50 69 71; 50 69 50; delta_na= 61; delta_nb= 61; delta_nc= 61; ; ******************** TIME CONTROL ********************; Starting check_grid_spacing; ******************************************************; ; The grid spacing in y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074:586,integrat,integrated,586,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074,1,['integrat'],['integrated']
Integrability,I'm still figuring out the caching of Conda-installed dependencies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444295268:54,depend,dependencies,54,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444295268,1,['depend'],['dependencies']
Integrability,"I'm stuck at this exception, possibly related to version dependencies or other recent changes ... before I delve in the debugging, has anybody seen it already? Thanks. ```; File ""C:\Users\Toni\mc3\envs\gg\lib\site-packages\psi4\driver\qcdb\psiutil.py"", line 231, in compare_molrecs; xptd = massage_dicts(xptd); File ""C:\Users\Toni\mc3\envs\gg\lib\site-packages\psi4\driver\qcdb\psiutil.py"", line 227, in massage_dicts; prov.pop('version'); AttributeError: 'str' object has no attribute 'pop'; ```. Edit: got it: a change in qcelemental 0.1.2 -> 3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-453056799:57,depend,dependencies,57,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-453056799,1,['depend'],['dependencies']
Integrability,"I'm surprised at the libxc problem, as that build number is at the top of the list here, https://anaconda.org/psi4/libxc/files, and you've got psi4 in the channels list. Perhaps you've got strict channel priority active? Psi4 _can't_ use the c-f libxc (another symbols issue) so it pins to the psi4 one. Perhaps `psi4::libxc` could get you a step deeper into the rabbit hole. :-). > Hopefully psi4 will hit conda forge soon. Agreed. There's some conflicting dependency issues to work out beforehand.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1164966523:458,depend,dependency,458,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1164966523,1,['depend'],['dependency']
Integrability,"I'm trying to optimize the geometry of ethylammonium cation using psi4. I have downloaded the latest version and an optimization of a smaller molecule ran with no trouble. This one fails with the error; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; The complete output file is attached. I don't understand the error message. Can anyone explain it to me, please?. Anthony Stone. [ethylammonium.txt](https://github.com/psi4/psi4/files/7090210/ethylammonium.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287:380,message,message,380,https://psicode.org,https://github.com/psi4/psi4/issues/2287,1,['message'],['message']
Integrability,"I'm trying to run some simple x2c jobs using the new Karlsruhe x2c basis sets. The SVP jobs run fine, but the larger basis sets cause problems. For instance,; ```; molecule {; units bohr; 0 1; Ag; Ag 1 4.60; }. set basis x2c-TZVPall-decon; set basis_relativistic x2c-TZVPall-decon; set relativistic x2c; set scf_type direct; set df_scf_guess false; set dft_radial_points 99; set dft_spherical_points 590. energy('svwn'); ```; fails to converge. For SVP, I get; ```; The 1-norm of |H_X2C - H_Dirac| is: 0.000000088631; ```; but for TZVP; ```; The 1-norm of |H_X2C - H_Dirac| is: 181094.365380967443. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```. This must be related to linear dependencies in the basis. pyscf appears to run the same calculations without problems. It uses a threshold for small exponents for the small exponents (https://programtalk.com/vs2/python/12572/pyscf/scf/x2c.py/ line 68); maybe one should also be used in psi4?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868:781,depend,dependencies,781,https://psicode.org,https://github.com/psi4/psi4/issues/868,1,['depend'],['dependencies']
Integrability,I'm using 16.0.2 with no problems on my workstation. Didn't know about the `ENABLE_XHOST` configure option but I routinely use `setup --vectorization` with no issues. I'll give xhost a try shortly. Though I'm having trouble getting cfour running on my new cluster using 16.0.2 with my flags from the old cluster (with older Intel compiler). I'm wondering now if this is related.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198705736:113,rout,routinely,113,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198705736,1,['rout'],['routinely']
Integrability,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:834,depend,depend,834,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797,1,['depend'],['depend']
Integrability,I've added a test for UHF integral dumps. The tests are in both as PsiAPI _and_ as Psithon. The former is failing without any particularly informative error message. Suggestions on how to troubleshoot?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355999602:157,message,message,157,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355999602,1,['message'],['message']
Integrability,I've added the checks for the deriv >= 1 spin-restricted case. Let me know if this is about right. The output is attached.; [nan_output.log](https://github.com/psi4/psi4/files/8960850/nan_output.log). I'll add the other cases after early feedback on the current messages.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1163531527:262,message,messages,262,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1163531527,2,['message'],['messages']
Integrability,I've changed the routines so that the memory management is entirely up to the caller.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-330901143:17,rout,routines,17,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330901143,1,['rout'],['routines']
Integrability,"I've decided that this bugfix will require some discussion before we can act because changes to the number of MOs resulting from changing linear dependencies in the basis can yield a number of different errors. If nmo increases (as in this test case), then HF::dump_to_checkpoint() fails when it attempts to write too many orbital energies. However, if nmo decreases, then the use of the previous set of MOs will fail because they will be mis-read, producing an incorrect initial guess. We should put this down as a topic for discussion at the next hack-a-thon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-37137150:145,depend,dependencies,145,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37137150,1,['depend'],['dependencies']
Integrability,"I've finally managed to get your branch to compile on my machine (Libint was throwing a fit like it always does whenever I want to do anything), so hopefully I can get to the bottom of the non-zero values soon. I get the correct SCF energy with libecpint through my (non-Psi4) code, so it has to be a wrapping issue. Edit: see below - it was indeed a wrapping issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-803690980:301,wrap,wrapping,301,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-803690980,2,['wrap'],['wrapping']
Integrability,"I've got a `fockci` conda package built, so you can try adding it to https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L90 and seeing if your pytest runs in continuous integration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628:202,integrat,integration,202,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628,1,['integrat'],['integration']
Integrability,"I've never really liked having `def property(` out on it's own. That is, I think it needs to be for driver routing purposes for the same reason `def run_dfmp2` and `def run_dfmp2_gradient` are different. For user-facing, I find `energy('mp2')` and `property('mp2')` too alike. I'd rather `properties=[]` was just a kwarg passed on to any of e(), g(), o(), f(), h() (with the understanding that an extra calc would be taken at the end of o()). But that's a large can of worms, so I'll just mention it as why I like properties as a kwarg. So I like the kwarg for that reason. I don't mind the look of `*args` in oeprop, as certainly that the most important info being conveyed to the fn, though we scarcely ever use `*args` otherwise. I think the syntax of the c-side option is rather ungainly. Python-wise I'd love to do getters and setters on the CubeProp object so it acts more like the functional object. But what worries me is users not knowing where to go to specify what they want done– c-side options, kwargs, args, methods on object. Right now, you can do most any calc with the name argument to e(), etc. plus c-side options. . But a more object-based API procedure in future will require more explicit options passing. And cubeprop, oeprop, moldenwriter are all very light-weight objects. So maybe going ahead and exporting and using all the getters and setters for these objects is the route. Figure out what the best syntax would be for that route, then use that to figure out a convenient one-line call to handle most use cases with minimal options spec. Maybe guided by the vml_cube script. Sorry, this is a ramble. Certainly I'm not clear on what's best to do to accomodate all styles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/286#issuecomment-189699831:107,rout,routing,107,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189699831,6,['rout'],"['route', 'routing']"
Integrability,"I've removed the work-in-progress marker as this first step is reasonably complete. The `Tensor` class as storage object has an acceptable interface both on the C++ and the Python side (I think!) I can use this to work further on the `linalg` namespace, add BLAS/LAPACK wrappers, and eventually transition the SCF to xtensor. I have tried to fix Azure CI, to no avail. I can't quite figure out whether I need to change the xtensor source or the CI setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-484270023:139,interface,interface,139,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-484270023,2,"['interface', 'wrap']","['interface', 'wrappers']"
Integrability,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203440132:428,message,message,428,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132,2,['message'],['message']
Integrability,"I've seen a few forum topics about users with a `wfn` file wanting to use those orbitals from one computation wanting to reuse those orbitals for a different computation. Example: [here](http://forum.psicode.org/t/read-in-from-scf-with-psi4-core-wavefunction-from-file/1467). While this can be done, the answer is non-obvious and not documented. We have documentation on what the `from_file` and `to_file` commands do, but I'm aware of no documentation on how that interfaces with orbital reading technology. We should document this, for sure, but we should also think about if we want to make a simpler way to do this, since it seems to be a common problem. For instance, would it be possible to add a new method to the wavefunction class that will set a wavefunction to the scratch wavefunction for a molecule? Or would this create additional problems?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1678:465,interface,interfaces,465,https://psicode.org,https://github.com/psi4/psi4/issues/1678,1,['interface'],['interfaces']
Integrability,I've tested the mrcc interface within about a year. _But_ I only have the old mrcc (c. 2014) before it learned how to do SCF itself.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070634536:21,interface,interface,21,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070634536,2,['interface'],['interface']
Integrability,"I've tried to re-write some of the cbs docs more thoroughly, however my sphinx-fu is not up to scratch. Especially the bits in `driver_cbs.py` under Combined interface, I am not sure what the best way of markup is - the current one is quite ugly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-421439009:158,interface,interface,158,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-421439009,1,['interface'],['interface']
Integrability,"I, too, am worried that dummy atoms and adjusted geometries weren't designed to work together, as none of the scanning examples use dummy atoms. (In which case we need an error message.) However, there is a workaround. You could define the molecule as a string, then instantiate the molecule anew for each step in the scan, like below. Would this help? Thanks for trying psi!. ```; sdimer = """"""; He; X 1 {R} ; He 2 1.0 1 180 ; """""". set basis 6-31G(d). Rvals = [1.4, 1.5]; ref_nre = {1.4: 0.8819620, 1.5: 0.8466835}. ### Compute; ecp = {}; nre = {}; for R in Rvals:; dimer = geometry(sdimer.format(R=R)); ene = energy(""mp2""); ecp[R] = ene; nre[R] = dimer.nuclear_repulsion_energy(); print(R, ene, dimer.nuclear_repulsion_energy()); ; for R in Rvals:; compare_values(ref_nre[R], nre[R], 5, f'nre {R}'). ```; ```; 1.4 -5.732454436415538 0.8819620177833327; 1.5 -5.7325858447838085 0.846683537072; nre 1.4...............................................................................PASSED; nre 1.5...............................................................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883:177,message,message,177,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883,1,['message'],['message']
Integrability,"IIRC `nmopi_` is the number of molecular orbitals, so it definitely should account for linear dependencies...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120#issuecomment-784716861:94,depend,dependencies,94,https://psicode.org,https://github.com/psi4/psi4/issues/2120#issuecomment-784716861,1,['depend'],['dependencies']
Integrability,"Ideally, the list of functionals in Psi4 would depend on the version of libxc available. And yes, it would be nice to be able to compile Psi4 without modifications against the distribution version of libint. The Fedora package supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451102082:47,depend,depend,47,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451102082,1,['depend'],['depend']
Integrability,"If [this](https://gitlab.com/libxc/libxc/merge_requests/62) LibXC PR goes through this should be closer to ready to go. They also deprecated many of the Minnesota wrappers for some reason, issue about it [here](https://gitlab.com/libxc/libxc/issues/42). So we will need to hand code these in as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-366317953:163,wrap,wrappers,163,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-366317953,1,['wrap'],['wrappers']
Integrability,"If a guess basis cleans up most of the discrepancies, then I think we're ok; for now, until the revamped SAD guess can go in. On Wed, Apr 20, 2016 at 10:04 AM, Lori A. Burns notifications@github.com; wrote:. > Landing on the correct SCF solution is tricky, and guaranteeing it is; > trickier still. I hear that in psi3, users routinely supplied docc/socc; > arrays to guide to the intended solution. Fortunately, psi4 has a variety; > of guesses to obtain the right solution, and someday, as @dgasmith; > https://github.com/dgasmith mentioned, a next-generation SAD guess will; > assure correctness for the ground states of elements, at least. But without; > a root-finding driver over the SCF code that attempts and discards guesses/; > does basis projections/ evaluates the nature of the system (which can be; > computational expensive), we cannot fix some system and method combinations; > without injuring others. It should be noted that no QC methodology to date; > is completely black box and no program always obtains the correct minima; > with default options. We are glad to have the lithium report at hand and; > will be pleased to use them to test the future SAD guess, but this is not a; > n issue that will be fixed by 1.0.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/335#issuecomment-212439352",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-212443074:326,rout,routinely,326,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212443074,2,['rout'],['routinely']
Integrability,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2372:396,message,message,396,https://psicode.org,https://github.com/psi4/psi4/issues/2372,2,['message'],['message']
Integrability,"If anyone else is having issues here, we've just configured the `ddx` interface to Psi4 and now solvent is working again on our systems—unfortunately there are no analytical gradients w/ the current interface, but I think this will change in the future (see discussion in #2767). The interface is documented nicely [here](https://psicode.org/psi4manual/master/ddx.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3202#issuecomment-2411453661:70,interface,interface,70,https://psicode.org,https://github.com/psi4/psi4/issues/3202#issuecomment-2411453661,3,['interface'],['interface']
Integrability,"If it isn't too late - we've already had one [report](http://forum.psicode.org/t/trouble-with-optimize-function-cbs-extrapolation-and-cfour/1336/3) on the forums about the CFOUR interface bugs fixed in 1577. Can we get those in here as well? It doesn't look like they're in from the compare, and I can't access your release notes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062:178,interface,interface,178,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062,1,['interface'],['interface']
Integrability,"If the above works, and you think it'd be helpful, I can edit https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to something like. ``` python; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189441001:447,rout,route,447,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441001,1,['rout'],['route']
Integrability,"If the name of the installation directory is over a certain threshold and you try to run gdma, it will crash. Probably just needs a longer string somewhere that my shallow explorations have not found. This will _not_ be fixed for 1.1, so just documenting the issue. Will add the error message when I hit it again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/667:285,message,message,285,https://psicode.org,https://github.com/psi4/psi4/issues/667,1,['message'],['message']
Integrability,"If you need some help working out what's going wrong, please send over the test output you're getting. I've just looked through your changes and I'm not seeing anything that looks out of place. . I remember there being one bug that I fixed in libecpint that will have been in the Psi4 code, but it will have only been noticeable with a specific class of ECPs (those that have an n=1 term (or n=-1 depending on your convention). The line is https://github.com/psi4/psi4/blob/d16d02e69238f1b0d90a2f1283f38e818873e748/psi4/src/psi4/libmints/ecpint.cc#L473 and should be changed to . ```tooSmall = tooSmall || ( intValues(l, i) < tolerance );```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802994469:397,depend,depending,397,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802994469,1,['depend'],['depending']
Integrability,"Im still not completely sure that there is a way to bridge the two. Ultimately the modification in-place leads to quite a few errors; however, the Psithon API make the in-place a logical operation. It would be better to do something like:; ```; new_mol = molecule.update({""var1"": 5, ""var2"": 6}); ```; or something similar. Getting that across in something like Psithon would be difficult I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332298418:52,bridg,bridge,52,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332298418,1,['bridg'],['bridge']
Integrability,Implement interface with pyddx,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767:10,interface,interface,10,https://psicode.org,https://github.com/psi4/psi4/pull/2767,1,['interface'],['interface']
Integrability,Implementation of interface to i-pi to enable molecular dynamics simulations with psi,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057:18,interface,interface,18,https://psicode.org,https://github.com/psi4/psi4/pull/1057,1,['interface'],['interface']
Integrability,"Improve PSIO error messages for READ, WRITE and LSEEK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756:19,message,messages,19,https://psicode.org,https://github.com/psi4/psi4/pull/2756,1,['message'],['messages']
Integrability,"In addition, ```basis_guess true``` should be changed so that it does something similar to the automatic auxiliary basis set selection routine. E.g. use ```pcseg-0``` as guess basis for ```(aug-)pcseg-n``` series, ```def2-SVP``` (or a version thereof with some functions removed) for ```def2``` series, etc. That way you can assure that the ECPs match.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439#issuecomment-455799123:135,rout,routine,135,https://psicode.org,https://github.com/psi4/psi4/issues/1439#issuecomment-455799123,1,['rout'],['routine']
Integrability,"In hindsight, I should have noticed this earlier:; OPTKING numbers atoms starting from 1, so the value in your options dict should be `1 2`, not `0 1`. Due to how the optimizer works, it will treat `1 2` and `1 3` as symmetry equivalent, so for actual code, you would need to manually specify Cs symmetry if you really wanted to fix only one bond. When I run the optimization with that change, it works just fine. I'm guessing that OPTKING doesn't know how to handle a request to process ""atom 0,"" which leads us to the choose-your-own-error-message adventure. This is definitely not the most graceful way to handle an invalid atom request, but I'll leave it to the core devs to decide what fix would be most appropriate, since OPTKING is scheduled to be replaced soon anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385130211:542,message,message,542,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385130211,1,['message'],['message']
Integrability,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/130#issuecomment-121658832:366,message,message,366,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832,6,['message'],['message']
Integrability,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252852440:23,depend,dependency,23,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440,3,"['depend', 'interface', 'wrap']","['dependency', 'interface', 'wrapper']"
Integrability,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/81#issuecomment-119230390:1506,message,messages,1506,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390,2,['message'],['messages']
Integrability,"In terms of the print function, `""{0:b}"".format(needed_irreps)` would give the binary representation. Perhaps that's the cleanest. If you go that route, you'd have to ensure that only the trailing `nirreps` characters are printing, which is easy to do using Python's slicing syntax.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/895#issuecomment-358783231:146,rout,route,146,https://psicode.org,https://github.com/psi4/psi4/pull/895#issuecomment-358783231,1,['rout'],['route']
Integrability,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238061055:195,depend,dependency,195,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055,2,"['INTERFACE', 'depend']","['INTERFACE', 'dependency']"
Integrability,"In the DFOCC case I just forget to use the ""puream false"" option. When I used the ""puream false"" option, I again get the incorrect normalization. Hence, I think the contraction normalization code for cartesian functions might include a bug. As far as I understand, in psi4 there is different shell info codes for ""puream true"" and ""puream false"" options. Am I right? @jturney @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/874#issuecomment-349096893:165,contract,contraction,165,https://psicode.org,https://github.com/psi4/psi4/issues/874#issuecomment-349096893,1,['contract'],['contraction']
Integrability,"In the process of debugging $#748 I noticed that after following the install instructions [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier), that some of the install_name_tool / placeholder / rpath'y stuff for some of the dependencies looks wrong. I don't know if this is causing any issues or not, but it looks potentially incorrect. ```; $ otool -L /Users/mcgibbon/miniconda/envs/p4dev/lib/libdkh.dylib; /Users/mcgibbon/miniconda/envs/p4dev/lib/libdkh.dylib:; 	@rpath/libdkh.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libgfortran.3.dylib (compatibility version 4.0.0, current version 4.0.0); 	@rpath/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/Users/ray/mc-x64-3.5/conda-bld/gcc-4.8_1477649012852/_b_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); 	@rpath/libquadmath.0.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/749:283,depend,dependencies,283,https://psicode.org,https://github.com/psi4/psi4/issues/749,1,['depend'],['dependencies']
Integrability,"Incidentally, an independent PR of mine just ran into this particular error message. I'm eager to get this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1251226972:76,message,message,76,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1251226972,1,['message'],['message']
Integrability,Include ghost atoms in PCMsolver interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1977:33,interface,interface,33,https://psicode.org,https://github.com/psi4/psi4/pull/1977,1,['interface'],['interface']
Integrability,Inconsistency in numpy wrappers,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/639:23,wrap,wrappers,23,https://psicode.org,https://github.com/psi4/psi4/issues/639,1,['wrap'],['wrappers']
Integrability,"Indeed, these are great improvements. Only the CheMPS2 print handling needs fixing before merging, I think. The PR has also greatly deranged the CMake module dependency chain, so `make -j8` fails over and over (but restartable). That needs to be handled soon but not necessarily immediately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-309297476:158,depend,dependency,158,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-309297476,1,['depend'],['dependency']
Integrability,Inscrutable LIBPSIO Message,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2224:20,Message,Message,20,https://psicode.org,https://github.com/psi4/psi4/issues/2224,1,['Message'],['Message']
Integrability,"Installed changes:; - `prefix/include/herebeheaders.h` --> `prefix/include/psi4/herebeheaders.h`; - `share/psi/python` --> `share/psi4/python`, etc. Then, Jet, you're also proposing the following?; Source changes:; - `top-source-dir/lib/python` --> `top-source-dir/share/psi4/python`. I agree the `lib` is misleading, but two directory levels is a lot just to match names. I'd leave it as is or move to `share`. That won't affect the public interface, so easier to change in future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173956800:441,interface,interface,441,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173956800,1,['interface'],['interface']
Integrability,"Installing `ambertools >=20` alongside `psi4` on MacOS with:. ```; conda create --name psi4-at-test -c conda-forge -c psi4/label/dev ""ambertools >=20"" psi4; ```. results in unresolvable dependencies. Using `mamba` instead of `conda` for dependency resolution gives potentially useful output:; ```; Encountered problems while solving.; Problem: nothing provides gcc-5-mp needed by psi4-1.2a1.dev458+efadaad-py35_gnu_0; ```; This problem was first reported by @SimonBoothroyd, hampering MacOS tests for [openff-recharge](https://github.com/openforcefield/openff-recharge).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024:186,depend,dependencies,186,https://psicode.org,https://github.com/psi4/psi4/issues/2024,2,['depend'],"['dependencies', 'dependency']"
Integrability,Integrals threading error messages,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596:26,message,messages,26,https://psicode.org,https://github.com/psi4/psi4/issues/596,1,['message'],['messages']
Integrability,Integrating adcc with Psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:0,Integrat,Integrating,0,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['Integrat'],['Integrating']
Integrability,"Interesting stuff. As for the Apple M1, I guess it depends whether we'll be pushing out a released and tested binaries for Apple M1 before clang gets around fixing the defaults, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836:51,depend,depends,51,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836,1,['depend'],['depends']
Integrability,Interface Psi4 to GauXC's sn-LinK,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:0,Interface,Interface,0,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['Interface'],['Interface']
Integrability,Interface with TREXIO,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847:0,Interface,Interface,0,https://psicode.org,https://github.com/psi4/psi4/issues/2847,1,['Interface'],['Interface']
Integrability,Interfaced Yukawa Libint2 ERI Kernel,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386:0,Interface,Interfaced,0,https://psicode.org,https://github.com/psi4/psi4/pull/2386,1,['Interface'],['Interfaced']
Integrability,"Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed. fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896:151,interface,interface,151,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896,1,['interface'],['interface']
Integrability,Is it possible that your computer ran out of memory?; Check dmesg after running it for oom-killer messages.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-924997018:98,message,messages,98,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-924997018,1,['message'],['messages']
Integrability,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126180494:655,depend,dependency,655,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494,1,['depend'],['dependency']
Integrability,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:394,message,message,394,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339,1,['message'],['message']
Integrability,"It appears Psi4 includes a hardcoded list of libxc functional names and ids in psi4/driver/procrouting/dft_funcs/libxc_xc_funcs.py. This should be eliminated in favor of using libxc's own routines for parsing the functionals: ```XC(functional_get_name)(func_id)``` and ```XC(functional_get_number)(str)```. This will eliminate the need to maintain a functional list in psi4, making all newly added libxc functionals available in Psi4 as soon as the underlying libxc library is updated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793:188,rout,routines,188,https://psicode.org,https://github.com/psi4/psi4/issues/793,1,['rout'],['routines']
Integrability,"It appears that -jN compilations – I typically build with -j4 – are failing because of incorrect blocking of dependencies. In at least one case, the build reaches libmints before libint is complete, resulting in a missing libint.h header file. When I compile serially, everything runs smoothly. However, it's not clear to me what has changed in the compilation infrastructure in the last day or so to cause this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219:109,depend,dependencies,109,https://psicode.org,https://github.com/psi4/psi4/issues/219,1,['depend'],['dependencies']
Integrability,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:3,depend,depends,3,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087,1,['depend'],['depends']
Integrability,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:168,message,message,168,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426,1,['message'],['message']
Integrability,"It is my understanding that this currently cannot be done using a single `json` file with Psi4 only. The interface only exposes `energy`, `gradient`, or `hessian` calls. . I think the best way to do what you want is via the `qcengine` interface. There's an example of geometry optimization, where you specify a `rdkit` job inside a `geometric` job see here: . https://github.com/MolSSI/QCEngine/blob/master/examples/Examples.ipynb. That example would have to be adapted for `psi4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896:105,interface,interface,105,https://psicode.org,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896,2,['interface'],['interface']
Integrability,It looks like Psi is providing wrappers for `dtzrqf` but not actually using the function (unless some downstream plugins are using it). So shouldn't be too hard. Thanks for the notice!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547:31,wrap,wrappers,31,https://psicode.org,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547,1,['wrap'],['wrappers']
Integrability,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307875382:59,contract,contraction,59,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382,2,['contract'],['contraction']
Integrability,"It seems unlikely a numpy interface would change. You might try running one of the tests that runs `fsapt.py` internally like `fsapt-terms`. You'll have to move the fsapt.py file to the launch directory or hardwire its path in the test. If your numpy error shows up there, I'd believe numpy or env problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397:26,interface,interface,26,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397,1,['interface'],['interface']
Integrability,"It shouldn't take a bit of time to execute. The implementation symbols are currently not exported but will be from the PR. I just want to expose the interface and not the implementation. Ultimately, I will move to keep the implementation header files from being installed as the interface headers are the only ones that should be used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444183208:149,interface,interface,149,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444183208,2,['interface'],['interface']
Integrability,"It sounds like @loriab is right, the external projects should be imported,; not interface. I am now under the impression public is the same as; interface except you can't link to interface. Suggesting that within a; project I think @bennybp is right they should be public, unless they are; header only at which point they are interface. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 6:40 PM, ""Lori A. Burns"" notifications@github.com wrote:. > My current leaning is that they should be IMPORTED rather than INTERFACE (; > http://stackoverflow.com/a/36649194). IMPORTED is also what they were; > before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake; > and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake),; > though certainly we want to abandon the Find modules where we can (any; > project we can influence) and replace with Config. I'm working on the; > ExternalProjects exporting their targets, so I'll report if I get anywhere.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-237704967, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8jQRwWholImqPd82AJVjlrrYfOWks5qcmpigaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237716768:80,interface,interface,80,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237716768,5,"['INTERFACE', 'interface']","['INTERFACE', 'interface']"
Integrability,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194954608:767,interface,interfaces,767,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608,1,['interface'],['interfaces']
Integrability,"It was revealed that single point can behave a little differently between `set basis bas; energy(mtd)` and `energy(mtd/bas)` calls. (copied from #2575). https://github.com/psi4/psi4/pull/2575#discussion_r876092414. Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. So after DDD, the two approaches behave the same. But psio errors aren't user friendly. Should we reconsider whether to auto clean after an energy() call? Advanced users would need to save more files explicitly. Maybe should clean() _before_ an energy() call.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2583:228,wrap,wrapper,228,https://psicode.org,https://github.com/psi4/psi4/issues/2583,1,['wrap'],['wrapper']
Integrability,"It would be great to move the finite difference code Python-side for a variety of reasons. This would require the following steps:; - [x] Finished exporting `CdSalcList` to Python, see `psi4/src/export_mints.cc:512`. Some decisions will need to be made about the matrix factory input (which isn't used) and the ""need irreps"" keyword might want to be nicely wrapped for Python.; - [x] Pop out `fd_geoms_1_0` / `fd_1_0 Python side and add unit tests. Explore various interface types. I know a big one to consider is to use dictionaries rather than list so that we can do something like: compute gradient, do some checks, compute Hessian without duplicating computations, etc.; - [x] Move the rest of the fd code Python side.; - [x] Replace C calls with Py calls and remove C++ code. Many folks might want to comment on this so please make a PR after/during step one for review.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884:357,wrap,wrapped,357,https://psicode.org,https://github.com/psi4/psi4/issues/884,2,"['interface', 'wrap']","['interface', 'wrapped']"
Integrability,"It's `dftd3` run through the psi4 interface. All we've done is tack on `-abc` to the command and then parse the `E6(abc)` line. @dsirianni, maybe page up in your terminal and check (or re-run) d3zero vs d3bj that the output line is exactly the same (for our regex to handle). Another thing to test is whether `dftd3 -func bp -abc <molfile>` outright gives exactly the same thing (`bp` is the turbomole for bp86, iirc). you can grab the text of the molfile from that big dictionary that gets printed with verbose=4. That will make sure that the ATM value when run from `.dftd3param` file (which is what psi always does) matches when `dftd3` uses its internal parameters for bp86. Thanks for the help, @hokru. I was really hoping those four numbers were supposed to be the same.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151#issuecomment-417121617:34,interface,interface,34,https://psicode.org,https://github.com/psi4/psi4/pull/1151#issuecomment-417121617,1,['interface'],['interface']
Integrability,"It's a feature not a bug?. Symmetric molecules are supposed to have symmetric wavefunctions (because; the Hamiltonian commutes with the symmetry operators). Certainly, the; exact wavefunction does has the full point group symmetry. Occasionally,; approximate QM methods can have lower-energy non-symmetric solutions.; Anytime the wavefunction has a lower symmetry than the molecule, this is; usually considered a bad thing and is often called ""artifactual (spatial); symmetry breaking."" Wes Allen and Daniel Crawford have some excellent; papers on this topic (I've made a couple contributions, also). In most applications, generally the high symmetry wavefunction is the one; that is actually desired, although it depends on the situation whether the; symmetric or non-symmetric solutions will give better predictions of; molecular properties. C2H4 is not a classic ""symmetry breaking molecule"" to my knowledge, so I'm; surprised that there is a symmetry-breaking solution to the SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:714,depend,depends,714,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['depend'],['depends']
Integrability,"It's a technical term :-) (http://forum.psicode.org/t/managed-methods-feedback-required/130/4?u=loriab), @psi-rking . Thanks for the answers, @jturney and @andysim, I'd feel better, too, if we assume less about the orientation, so long as there's no reason to the contrary. I believe @dgasmith is already adding the off-diagonals to #301, so that should wrap up this issue. And we're agreed on where such function should live in future, as they materialize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191996440:354,wrap,wrap,354,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191996440,2,['wrap'],['wrap']
Integrability,"It's not _really_ a Psi4 error message. Psi uses [QCElemental](https://github.com/MolSSI/QCElemental) for molecule parsing. It's QCElemental that raises the difficult error message, and it bubbles up through Psi. As such, I'm inclined to say this issue belongs on QCElemental's repo, not Psi's. @loriab is involved with both and is better equipped to judge where this belongs and whether it's even possible to identify the problematic line in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508:31,message,message,31,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508,2,['message'],['message']
Integrability,Its speed did not suit the project for which it was added. Its interface has been broken for a year or two. Its demise is fittingly awarded to @andysim.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1780:63,interface,interface,63,https://psicode.org,https://github.com/psi4/psi4/issues/1780,1,['interface'],['interface']
Integrability,"I’m certain I used PK when I first wrote that G2 routine. I don’t see why it can’t be used now. On Jul 14, 2016, at 5:32 PM, Lori A. Burns notifications@github.com wrote:. > I think pk for g2 would be fine. Anything but df. @edeprince3 can comment if not. ; > ; > Sent from my iPhone; > ; > > On Jul 14, 2016, at 2:11 PM, Andy Simmonett notifications@github.com wrote:; > > ; > > OK, the DF Hessians (including proper orbital response terms, with the SCF fitting basis) are in there now. There's a problem with the OUT_OF_CORE algorithm somewhere in libJK, but PK/DIRECT work just fine so I'm not sure it's worth worrying about too much. I saw that g2 uses OUT_OF_CORE; is there a reason for this, @loriab? If it's OK to switch to PK for that method, I think that's a reasonable fix for now.; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub, or mute the thread.; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-232800374:49,rout,routine,49,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232800374,1,['rout'],['routine']
Integrability,I’m traveling so I’ll see if I can update the libxc PR tonight. Which libxc (3 or 4) are each of you packagers actually aiming for? We’ve been trying to stay up to date with upstream dependencies and maximize functionals provided.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451021739:183,depend,dependencies,183,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451021739,1,['depend'],['dependencies']
Integrability,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278105814:95,message,message,95,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814,2,"['message', 'synchroniz']","['message', 'synchronization']"
Integrability,"Just a note that this bug actually affects all atoms that have 2 letters, not only `Cl`, making the current Psi4/geometric interface functional only for single-letter atoms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2871#issuecomment-1425797037:123,interface,interface,123,https://psicode.org,https://github.com/psi4/psi4/issues/2871#issuecomment-1425797037,1,['interface'],['interface']
Integrability,"Just a quick note on the failing tests so I don't forget: `dft-smoke` fails because it includes DSD-PBEP86 (which was parametrised for -D2, now is parametrised without it); `dftd3-energy` fails because of `dashparams['sr8']` not being passed in. It would make sense to generalise that interface somewhat - set defaults and then update from the passed-in dict.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370332915:285,interface,interface,285,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370332915,1,['interface'],['interface']
Integrability,"Just be super careful if there are any subtractions; the result of subtracting two unsigned quantities is itself unsigned and, if negative, it'll wrap around and give garbage. Therefore things like `if (A - B > tol)` should be `if (A > B + tol)`. Probably not relevant for this case, but keep in mind that OpenMP loop iteration variables must be signed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669#issuecomment-1212111830:146,wrap,wrap,146,https://psicode.org,https://github.com/psi4/psi4/pull/2669#issuecomment-1212111830,1,['wrap'],['wrap']
Integrability,"Just like the error message warns, SCF is not set up to restart from a wavefunction because there's need-to-project?, need-to-orthogonalize?, etc. issues that have to be handled. The wavefunction passing is set up to the level that the old `bypass_scf` kwarg handled. That is, a _completed_ scf_wfn can be passed into CC, CI, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419#issuecomment-227828506:20,message,message,20,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227828506,1,['message'],['message']
Integrability,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330583293:796,message,message,796,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293,1,['message'],['message']
Integrability,"Just to confirm: these are almost all just removal of the C-based wrapper functions, correct?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2724#issuecomment-1265862039:66,wrap,wrapper,66,https://psicode.org,https://github.com/psi4/psi4/pull/2724#issuecomment-1265862039,1,['wrap'],['wrapper']
Integrability,"Just tried a water with direct scf in ERD, and it worked fine, including 2e- energy. This was a while ago in terms of how ERD integrates. And when ERD is expected to work (essentially scf_type=direct only) is now documented. So closing. Please reopen if reappears.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/173#issuecomment-272780463:126,integrat,integrates,126,https://psicode.org,https://github.com/psi4/psi4/issues/173#issuecomment-272780463,1,['integrat'],['integrates']
Integrability,LGTM & CBS wrapper fix,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/469:11,wrap,wrapper,11,https://psicode.org,https://github.com/psi4/psi4/pull/469,1,['wrap'],['wrapper']
Integrability,"Landing on the correct SCF solution is tricky, and guaranteeing it is trickier still. I hear that in psi3, users routinely supplied docc/socc arrays to guide to the intended solution. Fortunately, psi4 has a variety of guesses to obtain the right solution, and someday, as @dgasmith mentioned, a next-generation SAD guess will assure correctness for the ground states of elements, at least. But without a root-finding driver over the SCF code that attempts and discards guesses/ does basis projections/ evaluates the nature of the system (which can be computational expensive), we cannot fix some system and method combinations without injuring others. It should be noted that no QC methodology to date is completely black box and no program always obtains the correct minima with default options. We are glad to have the lithium report at hand and will be pleased to use them to test the future SAD guess, but this is not an issue that will be fixed by 1.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-212439352:113,rout,routinely,113,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212439352,2,['rout'],['routinely']
Integrability,Large (over 1000 bfs ) CCSD(T) calculations are in principle possible with DF and FNO approximation but e.g. this routine may require very large amounts of memory and is possibly not accounted for in the memory estimation.; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/dftensor.cc#L134,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1372:114,rout,routine,114,https://psicode.org,https://github.com/psi4/psi4/issues/1372,1,['rout'],['routine']
Integrability,"Last request for the night: Can you take scf5 and run it a bunch of times in a row (maybe 20 times)? On my Ivy Bridge machine, it will sometimes pass, sometimes fail.... ```; Singlet PK UHF energy: computed value (-149.6484410) does not match (-149.5905972) to 6 decimal places; ```. Is this what you're seeing? Or is this an unrelated problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198631685:111,Bridg,Bridge,111,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198631685,1,['Bridg'],['Bridge']
Integrability,"Last time we tried with py3.8 some dependencies were not yet available for python 3.8. Might be solved now. Adcc should not be a problem, since with pypi packages 3.8 is already supported.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598880741:35,depend,dependencies,35,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598880741,1,['depend'],['dependencies']
Integrability,"Launching GDMA calculations from a python script or python interpreter causes a sudden crash. Ouptu files indicates that previous steps finish with no eroor and a GDMA input file is created, as well as a log file (fort.52, attached) with this message: `Could not open psi4 output for writing.unit = 51`. On the contrary, launching the same calculations with the psi4 executable does not produce any error. This bug was originally reported and discussed on the [psi4 forum](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126?u=flolangenfeld). The bug can be reproduce using the sample gdma h2o.dat file and its [python equivalent](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126/4?u=flolangenfeld)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1334:243,message,message,243,https://psicode.org,https://github.com/psi4/psi4/issues/1334,1,['message'],['message']
Integrability,"Let me rephrase: I tried to make my own wavefunction file, but when I succeed in that, I get a different error when setting up the active space, likely because the number of MOs in the basis set I'm picking isn't consistent with the active space defined in the input file. Anyways, this bug is the result of the exact same deep design issue in the Wavefunction class that led to #1851. **I don't know what the Wavefunction ""contract"" is, and wavefunction serialization disagrees about what the contract is with every single module that's having these problems.**. #1851 : Some modules assume that every wavefunction must have a PSIO object. Wavefunction serialization disagrees.; bsenjean's original report : The JK object constructors force callers to pass in an auxiliary basis set, even when the JK object will never use it. `detci` responds by assuming that every reference wavefunction must have a `DF_BASIS_SCF` set. Wavefunction serialization disagrees. Holger's previous analysis is right on for the mechanism of this.; Holger's new report : The properties code [assumes that every wavefunction has a matrix factory](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L88) and uses that to create an [OperatorSymmetry object](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1256). Wavefunction serialization disagrees. It doesn't attach a matrix factory, so libmints is left trying to create matrices out of `nullptr`. That segmentation faults, unsurprisingly. I don't have time to deal with these, because I have the gradient code to worry about, and I'm sure nobody else has time because _getting 1.4 out soon is kind of important_. I will say that this is not a good state of affairs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041:424,contract,contract,424,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041,2,['contract'],['contract']
Integrability,"Lingering issues for finalizing CheMPS2:; - [ ] Make sure can detect Debian installation of CheMPS2 in ""list of files"" https://packages.debian.org/sid/libchemps2-dev ; - [ ] make up new conda package; - [ ] add conda package to metapackage; - [ ] add chemps2.rst to interfaces in docs; - [ ] add chemps2 to binary; - [ ] review keywords; - [ ] add acceptance for Intel redistributable for `chemps2.so`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150:266,interface,interfaces,266,https://psicode.org,https://github.com/psi4/psi4/issues/150,1,['interface'],['interfaces']
Integrability,"Looking at the EMSL outputs with and without optimization, it looks like a simple case of ripping out any functions from contractions that are already present as standalone functions. This should be really easy to put together in Python if we need it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307915395:121,contract,contractions,121,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307915395,2,['contract'],['contractions']
Integrability,"Looking at the Window's error message, I think libmint's integral.cc needs to use C++14, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298:30,message,message,30,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298,1,['message'],['message']
Integrability,"Looking at this, we do not hardcode LibXC functionals in the full sense. We do present a list of functionals that are officially supported as we need to parse through them and make sure we actually support the underlying forms and dispersion corrections. Advanced users are free to build their own functionals from any LibXC primitive or mixed functional via the more advanced custom functional interface found [here](http://psicode.org/psi4manual/master/dft.html#advanced-functional-use-and-manipulation).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-347017285:395,interface,interface,395,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-347017285,1,['interface'],['interface']
Integrability,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:211,integrat,integration,211,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475,6,"['depend', 'integrat']","['dependent', 'integration']"
Integrability,"Looks good to me, but I just want to check one thing (that Lori knows way more about than I) before merging it. Do we want to check for FLEXIBLAS first? My only concern is that we could run into the OMP vs. GOMP issue by not knowing exactly which BLAS is wrapped. Do either of you think that's something we're likely to run into?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246#issuecomment-880219849:255,wrap,wrapped,255,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880219849,1,['wrap'],['wrapped']
Integrability,"Looks good. This is background work, not ready-to-go method algorithm, right?. Sometimes the code in dfocc tends to repeat (e.g., below <10 lines of the 138 added really differ between newly added and existing member functions). Would you want to consider consolidating such functions in future for ease of maintenance? It might also help the module's build time. ``` cpp; 2c2; < // CD-WabefT2: ; ---; > // WabefT2 ; 4c4; < void DFOCC::ccsd_WabefT2_cd(); ---; > void DFOCC::ccsd_WabefT2(); 6,8d5; < ; < timer_on(""WabefT2"");; < ; 11c8; < SharedTensor2d V, Vs, Ts, Va, Ta, bQ;; ---; > SharedTensor2d V, Vs, Ts, Va, Ta;; 12a10; > timer_on(""WabefT2"");; 44,48c42,44; < bQ = SharedTensor2d(new Tensor2d(""L <Q|AB>"", nQ_cd, navirA, navirA));; < bQ->read(psio_, PSIF_DFOCC_INTS, true, true);; < K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ_cd));; < K = bQ->transpose();; < bQ.reset();; ---; > K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ));; > K = bQabA->transpose();; > bQabA.reset();; 65c61; < I->contract(false, true, navirA*nb, navirA, nQ_cd, K, K, 0, a*navirA*nQ_cd, 1.0, 0.0);; ---; > I->contract(false, true, navirA*nb, navirA, nQ, K, K, 0, a*navirA*nQ, 1.0, 0.0);; 134a131,134; > // Read B(Q,ab); > bQabA = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (Q|AB)"", nQ, navirA, navirA));; > bQabA->read(psio_, PSIF_DFOCC_INTS, true, true);; > ; 137c137; < }// end ccsd_WabefT2_cd; ---; > }// end ccsd_WabefT2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220406272:1052,contract,contract,1052,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220406272,2,['contract'],['contract']
Integrability,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-307629750:1534,interface,interface,1534,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750,3,"['interface', 'rout']","['interface', 'routines']"
Integrability,"Looks like there's a trivial merge conflict. Lmk if you prefer (1) I resolve with the GH interface, (2) I rebase and force-push, or (3) you want to handle it. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1336497610:89,interface,interface,89,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336497610,1,['interface'],['interface']
Integrability,"Lori's message is for the experienced developer while Peter's is for the beginner.; I'd also aim more for the beginner, but include the git commands for the reasons Jonathon mentioned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-982018294:7,message,message,7,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982018294,1,['message'],['message']
Integrability,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122476853:592,message,message,592,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853,6,['message'],['message']
Integrability,"MP2 only requires the `(ia|ia)` block of two-electron integrals. In density-fitting, this means only the `(P|Q)^-1/2 (Q|ia)` block of three-center ERIs is needed. Rob's `dfmp2` code transforms the `|μν)` integrals to `|ia)` first and then multiplies by `(P|Q)^-1/2`. Ugur's code multiplies by `(P|Q)^-1/2` first and then transforms the `|μν)` quantities to `|ia)`. I notice that at least for RHF (UHF not tested) Rob's code is much faster than Ugur's for this integral transformation step. Which isn't too surprising. The integral transformations have the same scaling, but Rob's `(P|Q)^-1/2` step is _O(aux^2 mo^2)_, while Ugur's is _O(aux^2 occ vir)_. Ugur's procedure makes sense in the general case where you also need `|ii)` and `|aa)` quantities, but not for MP2. After #1390 goes in, @bozkaya, would it make sense to have custom logic for DFMP2 to change the order of contractions? I think we would see significant speedups.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1726:875,contract,contractions,875,https://psicode.org,https://github.com/psi4/psi4/issues/1726,1,['contract'],['contractions']
Integrability,MRCC interface broken with MRCC 2022 release,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497:5,interface,interface,5,https://psicode.org,https://github.com/psi4/psi4/issues/2497,1,['interface'],['interface']
Integrability,MRCC interface fails for quadruplet,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/915:5,interface,interface,5,https://psicode.org,https://github.com/psi4/psi4/issues/915,1,['interface'],['interface']
Integrability,MRCC interface is not working,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:5,interface,interface,5,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['interface'],['interface']
Integrability,"MRCC-related CTests pass with an older version (2019 with some unknown patches) of MRCC, but the 2022 release broke the interface (again?).; For what its worth, it also no longer works with Molpro 2015. ```; (p4dev) gytibor@CRD-MILAN-3:~/psi4/objdir$ ctest -L mrcc -j`getconf _NPROCESSORS_ONLN` --rerun-failed --output-on-failure; Test project /home/gytibor/psi4/objdir; Start 499: mrcc-ccsdt; Start 500: mrcc-ccsd_t_; Start 501: mrcc-ccsdt_q_; Start 502: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'N",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497:120,interface,interface,120,https://psicode.org,https://github.com/psi4/psi4/issues/2497,2,"['Rout', 'interface']","['Routine', 'interface']"
Integrability,Make ENABLE_XHOST flag checks dependent on compiler brand.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2377:30,depend,dependent,30,https://psicode.org,https://github.com/psi4/psi4/pull/2377,1,['depend'],['dependent']
Integrability,"Makes sense to me. I will be heading home soon and they are still running. I will reply tomorrow morning with how the different fixes behaved, and, I will check for any ominous looking messages in the logfile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953192603:185,message,messages,185,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953192603,1,['message'],['messages']
Integrability,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79#issuecomment-94352477:253,message,message,253,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477,3,['message'],"['message', 'messages']"
Integrability,"Minor issue: with g++, cmake has a warning about xHost (which is intel specific):. ```; CMake Warning at cmake/Psi4Macros.cmake:105 (message):; Option unfulfilled as none of -xHost valid; Call Stack (most recent call first):; cmake/Psi4Macros.cmake:161 (add_C_flags); cmake/Psi4Macros.cmake:173 (add_flags); CMakeLists.txt:48 (option_with_flags); ```. I believe the gcc/g++ alternative is `-march=native`, but I don't have much experience with it. You might need to set the options differently depending on the compiler.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237278849:133,message,message,133,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237278849,2,"['depend', 'message']","['depending', 'message']"
Integrability,"Misc. notes:. * I'll need to change `np.array` to `ndarray` wherever appropriate, for standardization; * The `geoms` top-level elements in the metadata dictionary will be renamed to `displacements`, so we don't have a `geometry` field _and others_ in `geoms`. That was confusing.; * We'll need to decide on the convention for the label for the undisplaced geometry. @loriab's proposal was ""0: 0"", and shift to 1-indexing SALCs for the interface. My preference is for """", though I understand this will likely not widely shared.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148#issuecomment-425937948:435,interface,interface,435,https://psicode.org,https://github.com/psi4/psi4/issues/1148#issuecomment-425937948,1,['interface'],['interface']
Integrability,"Mmh, how many parallel processes do you have ? aio_handler.cc spawns a new thread that is specifically for writing the integrals to disk. When there is no writing left to do, the thread should die, and a new one is generated when further writing is needed. Here it looks like it's trying to generate the thread when it already exists... Or maybe the threads are not properly dying, and it gets to the maximum number of threads. Does your computation seem to proceed normally in spite of the error message ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277489656:497,message,message,497,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277489656,1,['message'],['message']
Integrability,"Modifies the exception translator to communicate the file() and line() information to the python exception wrapper class. When debugging a plugin (my use case), this makes it much easier to figure out the source of an exception that's thrown from C++ as `throw PSIEXCEPTION('message')`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/152:107,wrap,wrapper,107,https://psicode.org,https://github.com/psi4/psi4/pull/152,2,"['message', 'wrap']","['message', 'wrapper']"
Integrability,Molden format issue (normalization of contraction coefficients of D and higher),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60:38,contract,contraction,38,https://psicode.org,https://github.com/psi4/psi4/issues/60,1,['contract'],['contraction']
Integrability,"My current leaning is that they should be IMPORTED rather than INTERFACE (http://stackoverflow.com/a/36649194). IMPORTED is also what they were before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake), though certainly we want to abandon the Find modules where we can (any project we can influence) and replace with Config. I'm working on the ExternalProjects exporting their targets, so I'll report if I get anywhere.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237704967:63,INTERFACE,INTERFACE,63,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237704967,1,['INTERFACE'],['INTERFACE']
Integrability,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:602,message,message,602,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,2,['message'],['message']
Integrability,"My hunch is that the interface is not ""actually buggy"", but that it was silently changed MRCC-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1077506388:21,interface,interface,21,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1077506388,1,['interface'],['interface']
Integrability,"My issue here seems specific to our cluster. I have no problems on my workstation or our second cluster. Maybe the old (gcc 4.7.2) on the cluster makes troubles together with the local installation of gcc 4.9.4. But I have no real desire to dig into this... Btw, uncommenting these cmake debug messages did produce no output at all (or I did something wrong)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/657#issuecomment-289040592:294,message,messages,294,https://psicode.org,https://github.com/psi4/psi4/issues/657#issuecomment-289040592,1,['message'],['messages']
Integrability,"My sincerest apologies to the Psi4 community, I didn't even begin to fathom that these timers were going to be such a fiasco. I dropped the sampling down to 1 point per timer so I expect they should be invisible now, but I can't confirm this at the moment. If someone wants to check this and close the issue if it's been resolved I would appreciate it. In the meantime I'll have to look into VTune as it appears to do everything I was making these timers do, but with a pretty GUI interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98518253:481,interface,interface,481,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98518253,1,['interface'],['interface']
Integrability,"My thoughts on the questions:; > How much validation do we want?. I would think that input would need to be validated always as the source is unknown, and output should be validated as part of the test suite, but then does not need to be validated at run-time before they are returned since (ideally) the test-suite ensures that our output jsons always adhere to the schema. Is there a best practice followed by applications using JSON APIs? For example does the JSON ""consumer"" always hold responsibility for checking that the object received is valid, or is it up to the JSON ""producer"" to ensure that objects are valid before sending them? . >A full test suite should like come from the schema itself?. Not sure what you mean here. Should the schema project provide functionality to validate objects that can be used by applications adhering to the schema to test that their JSON generating functions are generating valid objects? That would be great, and would reduce the amount of work that needs to be done by devs of individual QC packages to adopt the interface. > How we will we handle extra psi vars? Is the current setup sufficient.; If the schema allows for extra/arbitrary fields somewhere, we could provide all psivars/arrays there. If not then I guess we can just add handling of additional psivars in the future as they apply to new revisions of the schema?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/979#issuecomment-384995562:1060,interface,interface,1060,https://psicode.org,https://github.com/psi4/psi4/pull/979#issuecomment-384995562,1,['interface'],['interface']
Integrability,"My understanding is that there are two issues:; 1. All correlated densities are written to ""CC Density"". The reference Lori linked (http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm) says there are separate density sections for MP2, CI, and CC. Susi said it's adequate for the correlated density to be written to one of the three. Forum posters want the densities sent to the ""proper"" place. I don't know whether the current behavior is adequate for Gaussian or not, but I can easily believe this would confuse some other program that consumes FCHK files. I am not convinced that this is an aesthetic issue and that FCHK is ""undefined"" in this regard. Again, would it be possible to use the `name` attribute of a wavefunction to figure out the right density title?; 2. Sometimes a correlated wavefunction displays as having a ""density"" which is really the SCF density (http://forum.psicode.org/t/density-labels-in-fchk-files/1445/3) and sometimes the correlated density overwrites the reference density (http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532/13). Issue #1478 mentions this but doesn't go into details. In particular, I'm bothered by the fact that forum users report CC density does not override, but Susi reports that CC density does override. The difference is probably that Susi ran a property computation, but the forum user may have just run an energy computation. This part should be moved to #1478, with a caveat that whoever fixes this should check whether it fixes FCHK problems or not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-533691631:1092,interface,interface,1092,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-533691631,1,['interface'],['interface']
Integrability,"NTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicate code. added HF Hessian testing, through DF can't be uncommented until refs released in qcng.; - [x] the addition of ccsd iterations qcvar to dfocc could maybe be reverted. ## Questions; - [x] Any critical eye or independent tests that you can bring to the manybody wrapper much appreciated, @jeffschriber. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:7402,wrap,wrapper,7402,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['wrap'],['wrapper']
Integrability,"Neither overall chg/mult nor fragment chg/mult will effect Mol.Z(at); all that info is stored separately. BasisSets are associated with each atom in Mol, so it does make some, though not a lot of, sense that ECPs should affect Z(at). Once upon a time there were true/false/large/small choices for `freeze_core`. They got dropped. I don't remember why, but I'd venture b/c they caused more confusion than convenience. But a lot more was handled c-side then. I expect a more flexible interface (that also takes frozen_docc into account) would have support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-385871335:482,interface,interface,482,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-385871335,1,['interface'],['interface']
Integrability,New MRCC Release Broke Psi Interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866:27,Interface,Interface,27,https://psicode.org,https://github.com/psi4/psi4/issues/1866,1,['Interface'],['Interface']
Integrability,"Nice @loriab! As we, very briefly, discussed at WWDC: ; 1. I had to rework the way the PCM potential is added to the Fock matrix in `hf.cc` in #810. I ended up adding a `std::vector<SharedMatrix> external_potentials_` to the base HF objects to store the PCM potential computer at each iteration. This data member is then used in `form_F()` in the derived classes. This is in `rohf.cc`, for example:; ```; // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fa_->add(Vext); });; }. // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fb_->add(Vext); });; }; ```; For the PCM (and I'm pretty sure also EFP) potential, this is enough: these do not need to distinguish between alpha and beta.; The caveat of this approach is that `compute_E()` cannot rely on tracing the Fock matrix with the density matrix to calculate the energy anymore, since there might be more (or less) polarization energy included in that way. In the mentioned PR, I modified the `compute_E()` functions to only use traces of one- and two-electron integrals to calculate the energy. I think this approach could be ported Python side and would fit very nicely with the infrastructure changes you are proposing.; 2. Since PCMSolver itself is quite far from being pybind-able, I suggest I pybind the wrapper within Psi4 (`libpsipcm/psipcm.h` and `libpsipcm/psipcm.cc`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/847#issuecomment-343481294:1493,wrap,wrapper,1493,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-343481294,1,['wrap'],['wrapper']
Integrability,"No UHF-MP2 gradients in my code. Sorry. -Rob. On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns notifications@github.com; wrote:. > for df-mp2, these are the cases:; > uhf energy: good, this is is Rob's code (we're pretty sure; test); > rohf energy: we think this may be in Rob's code, but not verified vs other; > codes; > uhf grad: we think this may be in Rob's code, but not verified vs other; > codes; > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > w/o subsequent opt; > ; > ticket task: verify the above with the code and with the authors. if; > needed, re-route in driver (see mp2_type as example in proc.py. If; > anything looks to hard or want to defer, create a new ticket for it, and do; > all you can to close out this one.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121080590:591,rout,route,591,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121080590,1,['rout'],['route']
Integrability,"No idea what is causing DSYEV to fail, but before I implemented the new wrapper this would have gone undetected, so if anyone tried to `git bisect` it crash/no crash would not be a good indicator. The old wrapper ignored the info value from LAPACK and let execution continue despite the diagonalization failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085:72,wrap,wrapper,72,https://psicode.org,https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085,2,['wrap'],['wrapper']
Integrability,"No merge goes unpunished ... Something of #1475 and the gdma interface aren't playing nicely. I'll look at it, but posting here for general notification and in case anyone takes it up while I do some meetings. ```; (p4dev37) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-quaternary/objdir37: (master) stage/bin/psi4 ../tests/gdma/gdma1/input.dat . RHF density not found; Job abandoned; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1523:61,interface,interface,61,https://psicode.org,https://github.com/psi4/psi4/issues/1523,1,['interface'],['interface']
Integrability,"No problem, @andysim, I'm glad my practical tests and your docs readings are in agreement. Do you or @jturney happen to know the ""restrict"" status of libint?; - grepping the code, there's no trace of `restrict`; - it's written in C so restrict should be handled automatically (I think); - except the generated files are `.cc`, so CMake builds them as `CXX`, where imposing restrict would need detection of the proper compiler flag; - if libint _is_ written under the restrict contract, we need to either; - change the `.cc` to `.c` so CMake builds them as C and handles restrict internally; - add CXX restrict detection to CMake (psi4 already has it, so just needs transferring)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241076197:476,contract,contract,476,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241076197,1,['contract'],['contract']
Integrability,"No worries, this was easy compared to the actual libint2 interface that you all had to write and test. I've updated the post to clarify that this PR closes #2114. I found and updated only one test with an unnecessary `ints_tolerance 0`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2139#issuecomment-804380750:57,interface,interface,57,https://psicode.org,https://github.com/psi4/psi4/pull/2139#issuecomment-804380750,1,['interface'],['interface']
Integrability,"No, guess=read is specifically disabled https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L451 . As to how to run the calc, there's ways to deposit and collect scratch files in a qcng.compute run, and that could be done with the npy file and the optimize() fn or the optking qcng procedure. Ultimately, the optking qcng procedure should set the orbitals protocol so that it collects orbitals from gradients and can reseed them for the next gradient. The barrier to that right now is that psi4 can write the QCSchema Wavefunction, but it can't reinitialize a psi4.Wfn from it. (It's a BasisSet coeff issue I noticed last summer but haven't been able to follow up on.). So this input is something we don't want to prevent, but it would need some hacking at the present, and it might hit some other problem along the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-870754037:382,protocol,protocol,382,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-870754037,1,['protocol'],['protocol']
Integrability,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/78#issuecomment-83015983:140,integrat,integrate,140,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983,1,['integrat'],['integrate']
Integrability,"No, the code is generated and compiled during the build. There is no compilation at run time and dependency on MSVC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390251325:97,depend,dependency,97,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390251325,1,['depend'],['dependency']
Integrability,"No, the content of my CMakeLists.txt is identical to the given tag. I further add that i can compile the code with gcc_4.9.2 without any problems on my lap top,; but i need to compile it on the cluster, and there we have the older version of gcc, therefore; the compilation with intel 2017. find_package(pybind11 CONFIG QUIET). if(${pybind11_FOUND}); message(STATUS ""Found pybind11: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})""); add_library(pybind11_external INTERFACE) # dummy; else(); include(ExternalProject); message(STATUS ""Suitable pybind11 could not be located, building one instead.""); ExternalProject_Add(pybind11_external; GIT_REPOSITORY https://github.com/psi4/pybind11; GIT_TAG oct18ud; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/external; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYBIND11_CPP_STANDARD=-std=c++${PSI4_CXX_STANDARD}; -DPYBIND11_TEST=OFF; -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install; DESTDIR=${CMAKE_BINARY_DIR}/stage); endif()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261729566:351,message,message,351,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261729566,3,"['INTERFACE', 'message']","['INTERFACE', 'message']"
Integrability,"Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message. ```; Traceback (most recent call last):; File ""<string>"", line 59, in <module>; Boost.Python.ArgumentError: Python argument types in; psi4.scf(str); did not match C++ signature:; scf(void); scf(P7_object, P7_object); ```. Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange. ```; #methane test. molecule {; #charge multiplicity; 0 1; C0 0.000000 0.000000 0.000000; H0 1.092199 0.000000 -0.000001; H0 -0.364063 0.138497 1.020380; H0 -0.364067 -0.952923 -0.390247; H0 -0.364068 0.814425 -0.630132; }. set globals {; reference RHF; maxiter 999; }. basis {; assign C0 C0bas; assign H0 H0bas; #C 3-21G; [ C0bas ]; cartesian; ****; C 0 ; S 3 1.00; 172.2560000 0.0617669 ; 25.9109000 0.3587940 ; 5.5333500 0.7007130 ; SP 2 1.00; 3.6649800 -0.3958970 0.2364600 ; 0.7705450 1.2158400 0.8606190 ; SP 1 1.00; 0.1958570 1.0000000 1.0000000 ; ****; #H 3-21G; [ H0bas ]; cartesian; ****; H 0 ; S 2 1.00; 5.4471780 0.1562850 ; 0.8245470 0.9046910 ; S 1 1.00; 0.1831920 1.0000000 ; ****; }. scf('energy'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79:37,message,messages,37,https://psicode.org,https://github.com/psi4/psi4/issues/79,2,['message'],"['message', 'messages']"
Integrability,"Not a big deal. My preference would be to produce an equivalent file to; CFOUR. For example, the Crawford group has some chiroptical scripts; related to ROA that use second derivatives (file15-like) or dipole moment; derivatives (file17-like) but the headers vary slightly between PSI and; CFOUR, and this causes headaches, or worse, incorrect results if errors; aren't thrown. On Sun, Apr 15, 2018 at 10:03 PM, Lori A. Burns <notifications@github.com>; wrote:. > Origin aside, do I gather correctly that optking (or its successors;; > optking being the only visible consumer of the .hess file) isn't; > dependent on the 6 and if I could absorb the format into FCMFINAL, it'd; > be ok with your code, @psi-rking <https://github.com/psi-rking>?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/953#issuecomment-381467223>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTLfdpPdF-9uBf3JwnOPE52-M4vmYks5tpAoPgaJpZM4TPKkE>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381624417:604,depend,dependent,604,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381624417,1,['depend'],['dependent']
Integrability,"Not a fluke. Note l. 93 of the configure build step reports that a suitable `adcc` could not be found, despite its inclusion in the build environment step. Sorry Lori, but I'm relying on you to solve this one. I have no idea how to isolate the dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883533069:244,depend,dependency,244,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883533069,1,['depend'],['dependency']
Integrability,"Not quite on the L2 conversion -- there's still https://github.com/psi4/psi4/pull/2473 awaiting bug diagnosis https://github.com/evaleev/libint/issues/242 . That said, #2473 isn't touching onebody.h/cc, so the message may indeed be defunct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3025#issuecomment-1677835469:210,message,message,210,https://psicode.org,https://github.com/psi4/psi4/issues/3025#issuecomment-1677835469,1,['message'],['message']
Integrability,"Not sure what you exactly mean. Setting vv10_b in the superfunctional is straightforward. I followed what was done for the LRC omega. . Ideally the user has not do anything for the pre-defined functionals once I get the -nl dashparam to work. The manual setting is more for developers who want to fit the vv10_b for a new functional. Using DFT-NL should be like using DFT-D. Having the vv10 integrator exposed to python and supplying a user-defined density would be nice. And for a post-scf VV10 correction that is probably the way to go for the scfitertopy implementation. Though this pybind is currently a level too much for me, i dont even understand the errors i get. Small steps for me ;-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-364091920:391,integrat,integrator,391,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-364091920,1,['integrat'],['integrator']
Integrability,Not sure what's going on. In your `/Users/crawdad/psi4/bin/psi4` do you have lines like https://github.com/psi4/psi4/blob/master/psi4/run_psi4.py#L142-L144 in there? The `KeyError` that's being raised is handled in the lines following. Could you also add a `print(args)` before the error and paste the results in (from your error message above the KeyError is raised near line 110)?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258684467:330,message,message,330,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258684467,1,['message'],['message']
Integrability,Note that rewriting of hard-coded paths in binary and rpath (even if new path is longer) is one of conda's great and routine features. Just FYI that this issue is to suit developers convenience.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235922678:117,rout,routine,117,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235922678,1,['rout'],['routine']
Integrability,"Note to Self: Optimizations do not play nicely with this. It sets the orbital guess type to read, so it displays the following error message...; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```. ...even though it should not have been set at the driver level! Within the assumption that we have no way to cast orbitals between symmetries, the best option seems to be to have the big basis read from the projected orbitals while the small basis uses a core guess during any findif computations and reads during optimizations. Thoughts? This will probably end with a lot of poking at the driver code. EDIT: I thought this error message was exclusively post this fix, but I was able to get the error message pre this fix on the cluster. Investigate after I get this SCF finally converged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149:133,message,message,133,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149,3,['message'],['message']
Integrability,"Numpy `.so` that links BLAS can be found at `python -c ""import os; import numpy as np; print(os.path.dirname(np.__file__))""` + `/numpy/core/multiarray.*.so`. Where the star depends on your python installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387923462:173,depend,depends,173,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387923462,1,['depend'],['depends']
Integrability,"OInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to `TwoBodyAOInt`, `initialize_sieve`, which allows for manual initialization of screening variables via `create_sieve_pair_info()` needed for JK builds.; - [X] Uses the above function to fix combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` which were broken.; - [X] Updates the `test_comprehensive_jk_screening.py` and `test_erisieve.py` test to account for the previously-described fixes. ## Questions; -[] Should we keep the `initialize_sieve` name? I named it as such, because it is basically a light wrapper to manually call `create_sieve_pair_info`. But the name of ""sieve"" might be objectionable. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:2514,wrap,wrapper,2514,https://psicode.org,https://github.com/psi4/psi4/pull/3060,1,['wrap'],['wrapper']
Integrability,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:157,message,messages,157,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677,1,['message'],['messages']
Integrability,"OK, I had only run the default 50 steps. On Wed, Mar 30, 2016 at 9:53 AM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Thats very odd, I get a failure; > at a large number of steps for both SCF and DFT. I guess you can consider; > that this doesn't identify the TS, but it should still fail with a; > understandable error message.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203471756",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203487706:366,message,message,366,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203487706,1,['message'],['message']
Integrability,"OK, I have finally managed to get a pair of builds (current master and this PR's branch) that do not entirely swallow the exception messages for write errors in the PK integral calculation. For me, it took building Psi4 entirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:132,message,messages,132,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857,1,['message'],['messages']
Integrability,"OK, I understand. In that case, maybe writing your own wrapper around HDF5 for temporary files would be a better option, because you would be able to pass strings to functions to specify the data you manipulate, while in TREXIO we have different functions for different data. So creating a new intermediate in the code would be straightforward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396201059:55,wrap,wrapper,55,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396201059,1,['wrap'],['wrapper']
Integrability,"OK, another change of plan. The only reason to symmetrize the response terms is to be able to use JK instances that use symmetry under the hood (which, AFAIK, is only `OUT_OF_CORE`). I'm half way through doing this, but it makes the code very messy and I only just realized that `OUT_OF_CORE` can't even handle non-symmetric density matrices. I think the best plan at this point is for me to abandon the symmetrization, clean the code up, squash the last few commits and add a py-side error message if `OUT_OF_CORE` is requested. Does anybody disagree? If more important integral technologies were affected, I'd say we go ahead an symmetrize. As it is, we'd be introducing a lot of messy code, just to cover an unimportant corner case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-234048374:491,message,message,491,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234048374,1,['message'],['message']
Integrability,"OK, then I suggest that for all cases where we're switching basis sets, we should do a `clean()` - it's done in the CBS routine which is used for `energy()` and `gradient()` (as the CBS routines can handle ""method/basis"" syntax), we might as well do it for `properties()`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379562043:120,rout,routine,120,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379562043,2,['rout'],"['routine', 'routines']"
Integrability,"OK. I'm also not sure about the automatic root following bit... If the energy has converged, the Fock gradient *has to* be small, since it is the orbital gradient. This is if you use DIIS. If, however, you use orbital rotation techniques with gradient descent methods, this can happen in case the preconditioning isn't working properly. But even in such cases most chemical models don't cause problems; it's orbital-dependent models that tend to be hairy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-450748956:416,depend,dependent,416,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-450748956,1,['depend'],['dependent']
Integrability,"OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater rad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5209,depend,dependencies,5209,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['depend'],['dependencies']
Integrability,"Obligatory @susilehtola and @hokru pings. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Improved UKS gradient parallelization. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Commented LSDA gradients; - [x] Synchronizing of RKS and UKS gradient code is **deferred** to a separate PR. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2839:526,Synchroniz,Synchronizing,526,https://psicode.org,https://github.com/psi4/psi4/pull/2839,1,['Synchroniz'],['Synchronizing']
Integrability,"Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386#issuecomment-997413176:117,interface,interface,117,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997413176,1,['interface'],['interface']
Integrability,"Oh yea, this need to have a double split so that original line breaks are kept.; ```python; lines = []; for x in msg.splitlines():; lines.extend(wrap(x, linewidth).splitlines()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867#issuecomment-613407334:145,wrap,wrap,145,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613407334,1,['wrap'],['wrap']
Integrability,"Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. If true, numpy is really calling the system BLAS instead of MKL, and perhaps the instability resides in there? Is there a way we can link psi4 to MKL in the conda build, to test this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311736829:125,depend,dependencies,125,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311736829,1,['depend'],['dependencies']
Integrability,"Oh, I see the problem: the mixing happens in `form_C` but SADNO doesn't call that routine in the zeroth iteration. I'm working on a guess agnostic fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410#issuecomment-1016685742:82,rout,routine,82,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016685742,1,['rout'],['routine']
Integrability,"Oh, here's the full debuginfo. ==12645== Process terminating with default action of signal 11 (SIGSEGV); ==12645== Access not within mapped region at address 0x0; ==12645== at 0x11C73A9: psi::scfgrad::SCFGrad::compute_gradient() (scf_grad.cc:330); ==12645== by 0x11BF3EC: psi::scfgrad::scfgrad(psi::Options&) (wrapper.cc:16); ==12645== by 0x67BD9E: py_psi_scfgrad() (python.cc:177); ==12645== by 0x682F96: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (invoke.hpp:75); ==12645== by 0x31C2429AAA: boost::python::objects::function::call(_object_, _object_) const (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2429CC7: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2432C4A: boost::python::handle_exception_impl(boost::function0<void>) (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2427F84: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x3D50849C0D: PyObject_Call (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D508D9582: PyEval_EvalFrameEx (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D508DDCBE: PyEval_EvalCodeEx (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D5086DA36: ??? (in /usr/lib64/libpython2.7.so.1.0)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/6#issuecomment-17472943:310,wrap,wrapper,310,https://psicode.org,https://github.com/psi4/psi4/issues/6#issuecomment-17472943,1,['wrap'],['wrapper']
Integrability,"Oh, sorry I missed the message about the TOCLEN. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Apr 4, 2016 at 10:21 AM, Daniel Smith notifications@github.com; wrote:. > The job did not have enough memory and failed due to a TOCLEN error. I; > shot you a gchat about this awhile back, but did not receive a response and; > consequently forgot about it.; > ; > > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford <; > > notifications@github.com> wrote:; > > ; > > What was the bug in cc5?; > > ; > > ## ; > > ; > > Prof. T. Daniel Crawford; > > crawdad@vt.edu; > > ; > > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5; > > > now; > > > runs, passes, and the output.ref is updated.; > > > ; > > > —; > > > You are receiving this because you were mentioned.; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > > ; > > > —; > > > You are receiving this because you authored the thread.; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205307609>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205318258",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205319180:23,message,message,23,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205319180,1,['message'],['message']
Integrability,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332340271:859,bridg,bridge,859,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271,1,['bridg'],['bridge']
Integrability,"Ok, I agree with your idea @dgasmith. I'll make sure the RHF stuff is working properly (I think there's still a small bug in the spherical harmonic hessians) and we can probably close this one out when all is working and more tests are added. I know you're both busy, but if you get a chance could you take a look at `tests/scf-hess1` and see if you have any recommendations about implementing the call into the `frequencies` wrapper, please?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230570771:426,wrap,wrapper,426,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230570771,1,['wrap'],['wrapper']
Integrability,"Ok, I have a PR to this branch that fixes it. Here's some information for those reviewing. The code that's causing the issue is the stuff that handles symmetry-dependent input arrays, such as DOCC, SOCC, making sure that they are mapped correctly if the molecule is displaced to a lower symmetry point group. The dimension `nirreps` is the current (displaced) symmetry and may be lower than the parent symmetry `nirreps_ref`. The problem came from re-use of the arrays that handle docc and frozen orbitals. In the first step they are read from wfn (which relays the info in the reduced symmetry so no mapping is needed). Then, after accumulating the info from wfn, the same arrays are used to query the input file, which has the full dimensions so the arrays should be resized. @raimis correctly identified the mismatch in the dimensioning and his idea of increasing the dimensions to `nirreps_ref` is correct; the conversion routine just doesn't do this correctly without reading past the end of the wfn's reduced dimension arrays. This fix just handles the wfn quantities first, then resizes for the mrcc parsing step. There are a few comments in there to help clarify what's happening. I think this section just failed to keep up with the many changes to how wfn handles things over the last decade. Thanks very much for your help, @raimis .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965:160,depend,dependent,160,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965,2,"['depend', 'rout']","['dependent', 'routine']"
Integrability,"Ok, I just pushed a (still slightly broken) version that changes the libint2 interface very significantly, and almost has gradients working. The problematic derivatives are those where the angular momentum is greater in the bra than the ket, so perhaps that's a limitation that I need to resolve by ensuring loops satisfy ang mom constraints. Here's how I built the code in case anybody wants to replicate... 1. Clone the libint2 repo and checkout the v2.6 branch. 2. `LIBS=-L/u/andysim/anaconda3/lib CXXFLAGS=""-std=c++14 -I/u/andysim/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:77,interface,interface,77,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417,1,['interface'],['interface']
Integrability,"Ok, I tested it and it's a piece of cake. I'll save the info in Molden format and change the script for VMD to use this interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-285471455:120,interface,interface,120,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-285471455,1,['interface'],['interface']
Integrability,"Ok, I'll pull in that test case in the chemps2 follow-up PR. So, [1] I'll accept this after travis re-certifies it, [2] I'll re-rebase #383 , [3] anytime after that one re-certifies, I think it's ready for merging. For anyone following this thread for binary updates, there are now mac versions of 1.7 chemps (libs and bin) and pychemps (py interface) at https://anaconda.org/psi4 . They're untested until either (a) this PR merges into psi4 or (b) I find a small enough test case w/i the chemps2 repo. @SebWouters , I'd like to find a < 30 s test case, but the compiled or py tests churn away for several minutes on my laptop before I kill them. Does this sound like incorrect behavior? Or, if correct, is a shorter test case manageable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223826600:341,interface,interface,341,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223826600,1,['interface'],['interface']
Integrability,"Ok, I've a better theory of What's Going Wrong — it can't find `iomp5`. Try . (1) hinting it with `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/dir/containing/iomp5/`. (2) uncommenting all those `#message` in https://github.com/psi4/psi4/blob/master/external/common/lapack/FindMathOpenMP.cmake#L39-L67",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396741289:187,message,message,187,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396741289,1,['message'],['message']
Integrability,"Ok, I've cleared up the last two missing items.; - [x] user dft dicts `dft_functional={..., 'dispersion': {...}}` now work. they go through the same route, but the pieces are treated a little differently. ""params"" are the final say -- the user option `DFT_DISPERSION_PARAMETERS` has no effect. ""name"" and ""citation"" aren't ""blessed"" like the official ones, so they're not going to get printed unless they match official ones. I think that's reasonable -- don't want to be printing citations unquestioned.; - [x] now tracing citations again. see below for examples. always printing the disp level citation. printing the dash param citation if available (not listed for many common functionals. No opportunity for user-defined citation. It can be put it, but I didn't see the point of trusting unverified values.; - [x] put in a few more checks that'll catch some problems when adding new official fctl dictionaries.; - [x] renamed some files based on slack discussion. ```; ================================================================================; => DLDF+D09: Empirical Dispersion <=. Podeszwa and Szalewicz Dispersion Correction; Pernal, K.; Podeszwa, R.; Patkowski, K.; Szalewicz, K. (2009), Phys. Rev. Lett., 103: 263201. s6 = 1.000000. ================================================================================; => OTPSS-D: Empirical Dispersion <=. Grimme's -D2 Dispersion Correction; Grimme, S. (2006), J. Comp. Chem., 27: 1787-1799; Parametrisation from: L. Goerigk, S. Grimme, J. Chem. Theory. Comput. 6, 107-126, 2010. s6 = 1.000000; alpha6 = 20.000000; sr6 = 1.150000. ================================================================================; => Custom: Empirical Dispersion <=. Grimme's -D2 Dispersion Correction; Grimme, S. (2006), J. Comp. Chem., 27: 1787-1799. s6 = 2.750000; alpha6 = 20.000000; sr6 = 1.100000. ================================================================================; ```. Also been rebased. Windows is failing b/c it's downloading py27. I'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151#issuecomment-426866307:149,rout,route,149,https://psicode.org,https://github.com/psi4/psi4/pull/1151#issuecomment-426866307,2,['rout'],['route']
Integrability,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240647129:707,wrap,wrapper,707,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129,2,['wrap'],['wrapper']
Integrability,"Ok, now I am on . ```; commit 35ed00607bd31a3fe5668ce6f1aae70c9c28b436; Author: dgasmith <malorian@me.com>; Date: Tue Jan 12 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171081034:270,interface,interfaces,270,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034,5,['interface'],['interfaces']
Integrability,"Ok, thank you Susi. @loriab I see that you have added a synchronization step in AIOHandler::write, see former commit id c205621. Do you remember the reason for that ? As far as I can remember, the way AIOHandler is designed we should never need a synchronization here. @jturney From the git history, the error message Susi is seeing was added by you during KTB. Do you remember why you put it there ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277502940:56,synchroniz,synchronization,56,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277502940,3,"['message', 'synchroniz']","['message', 'synchronization']"
Integrability,"Ok, the only non-invasive way I see around this is the below in the main CM file (change primary language as needed):. ```; if(CMAKE_CXX_COMPILER_ID MATCHES Intel); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); else(); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-march=native"" ""-xHost"" ""/arch:AVX2""); endif(); ```. For Intel, `-march=native` might be a near approximation to `-xHost`, but I'd rather use the latter official flag.; Do you want to try this out for Libxc, @susilehtola?. I observed another problem that when conda compilers are present and `-DCMAKE_CXX_COMPILER=icpc` passed, that the `-fno-plt` set in the envvar `CXXFLAGS` by conda env activation was unsupported by Intel and so triggered all three `ENABLE_XHOST` options to fail unless `CXXFLAGS=` explicitly cleared/set beforehand. I had deliberately _not_ made psi4 CMake dependent on envvars, but it looks like CMake started doing that in 3.10, hmpf. https://cmake.org/cmake/help/v3.10/manual/cmake-env-variables.7.html#manual:cmake-env-variables(7)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854:1031,depend,dependent,1031,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854,2,['depend'],['dependent']
Integrability,"Ok, this has been rebased and a lot of the internal CI commits have been squashed. It's now in pretty good working order. Remaining reservations:. * `qcel.constants` interface may still change; * snsmp2 only works if you pull from my branch (which CM is set up to do; but snsmp2 conda pkg won't work) b/c they use psifiles and physconst. I patched those up, of course, but I don't want to send that PR to RMcG until we're sure about the interface.; * ionization tests still seem fragile. the dftd3-dft-bench-ionization works with CI but not for me locally. Even with these, I think it's pretty much RTG. Glad to hear arguments against or arguments about want qcelemental conda pkg first. #### Note that this _does_ add qcelemental dependence, whereas the previous codata 2014 one didn't (that just used qcelemental-generated data added to _this_ repo).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1234#issuecomment-426084025:166,interface,interface,166,https://psicode.org,https://github.com/psi4/psi4/pull/1234#issuecomment-426084025,3,"['depend', 'interface']","['dependence', 'interface']"
Integrability,"Ok, this one's been rebased and is ready for review. Many thanks to @loriab for the help integrating the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1382#issuecomment-445559926:89,integrat,integrating,89,https://psicode.org,https://github.com/psi4/psi4/pull/1382#issuecomment-445559926,1,['integrat'],['integrating']
Integrability,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:614,wrap,wrap,614,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259,4,"['message', 'wrap']","['message', 'wrap']"
Integrability,"Okay, I've updated the body of this issue with five SCF outputs that fail to converge with the default `INTS_TOLERANCE` (1e-12), but do converge when `INTS_TOLERANCE` is explicitly set to 0.0. All calculations were done with a clean version of psi4 master (the previous outputs were with a psi4 branch containing commits from an unrelated project). @susilehtola yes, that is the relevant commit in which the default `INTS_TOLERANCE` changed. I agree that the new default appears conservative enough, and I'm surprised such a small threshold has this kind of effect, even for a large, diffuse basis set. Do you know of any integral screening protocols specific to diffuse functions?. @hokru your observation that some virtual orbitals have negative energies is true for all zero-screening outputs. Would this imply that the SCF solution is not the global minimum? I don't have any specifics about these structures, they're part of a large dataset for a ML project. However, they all look relatively ordinary. @JonathonMisiewicz Your observation that `INTS_TOLERANCE` has a large effect on the very first SCF iteration also is true of all five outputs. In the second example, the first SCF iteration differs between the two outputs by almost four(!) hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-779545622:641,protocol,protocols,641,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-779545622,1,['protocol'],['protocols']
Integrability,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139102907:291,rout,routines,291,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907,1,['rout'],['routines']
Integrability,"On the SAPT wavefunction: right now, we do not know what SAPT should return. I see that you have added an error message reading ""SAPT incomplete wavefunction is only dimer SCF"", which is a bit confusing because at first I thought SAPT had a problem _reading_ the wavefunction in. Maybe a message reading ""SAPT returns incomplete wavefunction, only dimer SCF"" would be better. Also, I don't think SAPT can meaningfully return a wavefunction, at least not in its current state... Do you think it would be better if methods like that just returned an empty structure or the equivalent of a NULL pointer in Python ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-184846709:112,message,message,112,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184846709,2,['message'],['message']
Integrability,"On the `exception.message`, change https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L3934 from `== False` to `is False`, then run cepa2. You should get an exception that doesn't have a message, so it throws another exception. On the Cons, yes, there are rather more kept errors than I would have expected. We can ignore them more broadly in `.flake8` if we choose, including all line lengths and imports not used. The noqa for things like VARH don't bother me too much. On the overriding a single error, yes, would have to insert to ignore code fairly promptly to keep getting good results. I've had the driver to within a few chosen exceptions of pep8 compliant, so maintaining it as such I don't think is too onerous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263290760:18,message,message,18,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263290760,2,['message'],['message']
Integrability,"On the psivars, it's the global aspect that we'd like to squash by moving psivars into (perhaps module nested) dictionaries in the Wavefunction object. . I agree that the ESP gets to be a lot of psivars and is rather more suited to a psiarray than multiple individual psivars. Perhaps atom centers are a special case of grid point that still gets psivars/array set. . But then I also agree that as much as possible, the OEProp objects should be manipulatable py-side. . There started to be an effort to standardize these lesser-used user-facing functions (http://forum.psicode.org/t/ideas-to-simplify-wave-function-passing/161/11?u=loriab and https://github.com/psi4/psi4/pull/286) and they degenerated into bug-fixing, so there's still no consensus. And there's the antagonism between API-like function arguments and QC-like long list of options to tweak. This is a meandering way of saying that I don't presently have a plan for grid/prop interface. I think making the python access to the OEProp object full-functioned would be the most flexible approach.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234668387:941,interface,interface,941,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234668387,2,['interface'],['interface']
Integrability,"One final logistical point before I head off for the night: my current plan is to make these changes and commit those. If you are willing to add `occ`/`dfocc` documentation and docstring changes to your to-do list, I say we can call this PR a wrap so I can slay the behemoth that is orbital convergence. If you don't have time for that, I can take documentation on, but that will delay getting orbital convergence fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581087208:243,wrap,wrap,243,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581087208,1,['wrap'],['wrap']
Integrability,"One thing I found before I decided to drop looking into this personally:; Psi rotates the orbitals [pairwise](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libscf_solver/stability.cc#L269). My experience with orbital optimization says the correct thing to do here is multiply the coefficient matrices by a matrix exponential of the unstable vector, and that the current approach will lead to different orbitals depending on what order you apply the pairwise rotations in. It's probably worth reexamining why this pairwise approach is justified, or confirming that it isn't. This calls to mind the Givens rotation approach from the old Sherrill-Krylov paper. And now back to other projects for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-549478909:420,depend,depending,420,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-549478909,1,['depend'],['depending']
Integrability,One thing to note about the c++ standard is that it is showing up on the command line twice. I'm almost certain that one is coming from pybind11 interface definitions (which might not be a good idea). . cd /home/ben/programming/psi4/build.reference/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /opt/intel2017/compilers_and_libraries_2017.1.132/linux/bin/intel64/icpc; -I/home/ben/programming/psi4/psi4.reference/psi4/include; -I/home/ben/programming/psi4/psi4.reference/psi4/src; -isystem /home/ben/programming/psi4/build.reference/stage/home/ben/programming/psi4/install.reference/include; -isystem /usr/include/python2.7 -xHost -qopenmp; -std=c++11 -O3 -DNDEBUG -fPIC -std=c++11; -o CMakeFiles/options.dir/print.cc.o; -c /home/ben/programming/psi4/psi4.reference/psi4/src/psi4/liboptions/print.cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281389274:145,interface,interface,145,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281389274,1,['interface'],['interface']
Integrability,"Ooh, I like option 2. Thanks for the suggestion! I guess most other packages don't have this problem because they don't generate Makefiles for you. Another solution could be using a relative path so that it always finds the include files relative to the binary, regardless of whether or not they are installed. I guess it depends on how you guys want users to run things. But I think in general, most users will be confused by the current behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-226007667:322,depend,depends,322,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226007667,1,['depend'],['depends']
Integrability,"Oops, I missed your comment. The old `addBasis` still works the same way, and the normalization associated with it is appropriate for external basis functions derived from density fitting. In QM/MM we normally want some Gaussians at different points in space, and in this case we want unit normalization so that the charges, dipoles, etc. specified don't need to be adjusted. Essentially there are two use cases, and I just added a new one here. Not really a bug fix, but also harmless if we want it in 1.4 - entirely up to you. It gives us a backend that can be tested for the multipole interface at least :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2069#issuecomment-771874219:588,interface,interface,588,https://psicode.org,https://github.com/psi4/psi4/pull/2069#issuecomment-771874219,1,['interface'],['interface']
Integrability,"Opportunity to avoid Libxc5 surprises ourselves and help Libxc out by testing their new parameters interface: https://gitlab.com/libxc/libxc/-/merge_requests/284 . I'll get to it later this week, but if anyone wants to play with the p4/xc connection, go for testing. Ping me on any setup issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934:99,interface,interface,99,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934,1,['interface'],['interface']
Integrability,"Optimization flags come from [another source](https://github.com/AnacondaRecipes/aggregate/blob/master/ctng-compilers-activation-feedstock/recipe/conda_build_config.cos6.x86_64.yaml#L46), but yes, I see what you mean that they look to be clobbered. I can rebuild openblas locally to see if that helps. But I'd be surprised if there were fundamental accuracy errors in the openblas package that weren't noticed by the whole conda-forge-dependent community (where openblas is their default blas_impl) or conda defaults (which still has `nomkl` options)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840:435,depend,dependent,435,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840,1,['depend'],['dependent']
Integrability,"Origin aside, do I gather correctly that optking (or its successors; optking being the only visible consumer of the `.hess` file) isn't dependent on the `6` and if I could absorb the format into `FCMFINAL`, it'd be ok with your code, @psi-rking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381467223:136,depend,dependent,136,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381467223,1,['depend'],['dependent']
Integrability,P.S. Ignore most of my commit messages (I have too much fun when coding :)),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311#issuecomment-932984324:30,message,messages,30,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-932984324,1,['message'],['messages']
Integrability,"PCM fails with symmetry group coordinates, need to add error message for this to help user",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1939:61,message,message,61,https://psicode.org,https://github.com/psi4/psi4/issues/1939,1,['message'],['message']
Integrability,"PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Internal code has been replaced by an external Python module, QCManyBody; - [x] Several n-body efficiency improvements and a new option `supersystem_ie_only` that computes the IE rather than MBE, useful for trimers and larger.; - [x] bug fix for gradient or Hessian vmfc for max_nbody >=3. ## Dev notes & details; * Unrelated; - [x] updated basis_set_exchange to v0.10 and probably fixed the internal build; - [x] switched internal build of optking to a tag that can work with py312; - [x] qcvar `GEOMETRY ITERATIONS` wasn't actually getting set. `OPTIMIZATION ITERATIONS` is actually listed in the docs glossary, so switched to that and set it.; - [x] added `resp` to the codedeps now that it's on c-f, and thus to the ecosystem testing; - [x] fixed previously excused docs links to qcfractal; - [x] added back dftd4 to ecosystem for py312; * QCManyBody: build; - [x] Adds a new pure-python required dependency, `qcmanybody`, available from c-f or pypi; * QCManyBody: BSSE efficiency improvements/bug fixes; - [x] `bsse_type=cp` + `return_total_data=True` (not default for energy) will now no longer do every species in both supersystem (for cp) and natural (for uncp) basis sets. It will do everything in the supersystem basis (since cp requested) and only monomers in the monomer basis (for rtd=T).; - [x] `driver=g/h` + `return_total_data=False`, an unlikely combination, won't just fail with syntax error; - [x] `bsse_type=vmfc` + `driver=g/h + `max_nbody`>2 are now computed correctly. Previously (at least since v1.6), only the two highest-body terms were getting summed into the contribution, so values were wrong for trimers and above (assuming max_nbody=fragment count).; - [x] `bsse_type=vmfc` + multilevel were running unnecessary calculations, so now more efficient; * QCManyBody output; - [x] the internal driver_nbody code had been setting a lot of terse qcvariables like ""2"", ""3CP"", ""GRADIENT 1"". ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3160:1348,depend,dependency,1348,https://psicode.org,https://github.com/psi4/psi4/pull/3160,1,['depend'],['dependency']
Integrability,"PS: In #2997 I added the band-aid workaround of printing to `stderr` for PSIO errors, since those are quite common due to disks getting full and whatnot, but doing that globally in `PSIEXCEPTION` itself seems inelegant.; Users who are not affected by the missing error message would get the entire stack trace, etc. twice, which would make the already quite noisy error exits worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785:269,message,message,269,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785,1,['message'],['message']
Integrability,"PSIO error 12 means write error:; https://github.com/psi4/psi4/blob/58efb602ee9fdf3d774a3a6f073dbf47f2ac249b/psi4/src/psi4/libpsio/config.h#L55. Unfortunately your environment does not seem to give you the rest of the error message, so we dont actually know why a write has failed. Are you sure you have enough free disk space for the temporary files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915:224,message,message,224,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915,1,['message'],['message']
Integrability,"PSIO errors are notoriously difficulty to understand, but my intuition is to say that this is a memory issue, if it's dependent on the size of the active space. What do you mean by ""I ask for 16gb memory on the cluster""? I'm not debugging your queuing system, but does that mean you're changing `psi4.set_memory(int(2e9))`? That looks closer to 1.6 than 16 GB.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900:118,depend,dependent,118,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900,2,['depend'],['dependent']
Integrability,Parallelization of integral routines for PE/EFP,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2007:28,rout,routines,28,https://psicode.org,https://github.com/psi4/psi4/issues/2007,1,['rout'],['routines']
Integrability,"Pardon my asking and not looking at the code and `timer.dat`s, but right now we always calc the ind-exch(s^2) and disp-exch(s^2) and optionally the (s^inf) variants if requested by `DO_IND_EXCH_SINF` and/or `DO_DISP_EXCH_SINF`, right?. This arrangement is great for probing the terms, but does it make sense to define a route whereby the s^2 terms are skipped, the s^inf terms computed instead and `energy(sapt0)` returns the inf totals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-458285252:320,rout,route,320,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-458285252,1,['rout'],['route']
Integrability,"Pass [these](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L40-L42) in via `cmake -DPYTHON_EXECUTABLE=/such/and/such/python -DPYTHON...`. Note that one can use conda to get a head start on dependencies like cmake, Libint, libxc, python, etc. (http://psicode.org/psi4manual/master/conda.html#faq-psi4deps). Also math libs, though they haven't made it into docs yet. But you seem to have the build under control. `otool -L` looks fine, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316421062:199,depend,dependencies,199,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316421062,1,['depend'],['dependencies']
Integrability,"Passed 15.79 sec; Start 213: mints1; 395/412 Test #310: pywrap-molecule .................. Passed 15.68 sec; Start 410: skeletonscf; 396/412 Test #335: scf3 ............................. Passed 16.05 sec; Start 240: numpy-array-interface; 397/412 Test #383: psi4numpy-rhf .................... Passed 16.60 sec; Start 175: docs-bases; 398/412 Test #217: mints5 ........................... Passed 15.35 sec; Start 216: mints4; 399/412 Test #212: mcscf3 ........................... Passed 15.82 sec; Start 309: pywrap-db3; 400/412 Test #213: mints1 ........................... Passed 14.72 sec; Start 176: docs-dft; 401/412 Test #210: mcscf1 ........................... Passed 15.82 sec; Start 209: matrix1; 402/412 Test #410: skeletonscf ...................... Passed 15.75 sec; Start 365: options1; 403/412 Test #175: docs-bases ....................... Passed 14.47 sec; Start 403: json-schema-1-throws; 404/412 Test #216: mints4 ........................... Passed 14.79 sec; Start 88: cepa1; 405/412 Test #240: numpy-array-interface ............ Passed 15.57 sec; 406/412 Test #309: pywrap-db3 ....................... Passed 14.49 sec; 407/412 Test #209: matrix1 .......................... Passed 15.24 sec; 408/412 Test #176: docs-dft ......................... Passed 16.24 sec; 409/412 Test #365: options1 ......................... Passed 13.68 sec; 410/412 Test #403: json-schema-1-throws ............. Passed 13.62 sec; 411/412 Test #88: cepa1 ............................ Passed 16.51 sec; 412/412 Test #319: sapt4 ............................ Passed 1885.78 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 85.75 sec*proc (2 tests); autotest = 1081.30 sec*proc (26 tests); cart = 14263.36 sec*proc (123 tests); cas = 59.52 sec*proc (1 test); casscf = 245.49 sec*proc (11 tests); cbs = 978.44 sec*proc (11 tests); cc = 5456.09 sec*proc (65 tests); cdomp2 = 39.91 sec*proc (2 tests); cepa = 180.93 sec*proc (7 tests); ci = 233.38 sec*proc (8 tests); cisd = 294.07 sec*",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:38061,interface,interface,38061,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['interface'],['interface']
Integrability,Passed 3.04 sec; Start 241: ocepa-grad1; 291/411 Test #283: opt-freeze-coords ................ Passed 2.87 sec; Start 314: sad1; 292/411 Test #108: dcft2 ............................ Passed 1.83 sec; Start 351: dft-reference; 293/411 Test #236: mpn-bh ........................... Passed 2.81 sec; Start 118: dfcasscf-fzc-sp; 294/411 Test #344: dfep2-1 .......................... Passed 2.76 sec; Start 3: casscf-fzc-sp; 295/411 Test #255: omp2p5-grad1 ..................... Passed 2.61 sec; Start 384: psi4numpy-rhf-hessian; 296/411 Test #314: sad1 ............................. Passed 2.30 sec; Start 137: dfmp2-grad4; 297/411 Test #269: opt3 ............................. Passed 3.64 sec; Start 120: dfccd1; 298/411 Test #118: dfcasscf-fzc-sp .................. Passed 1.88 sec; Start 88: cepa2; 299/411 Test #241: ocepa-grad1 ...................... Passed 3.89 sec; Start 391: python-mints2; 300/411 Test #351: dft-reference .................... Passed 2.90 sec; Start 239: numpy-array-interface; 301/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.53 sec; Start 235: mp2-property; 302/411 Test #239: numpy-array-interface ............ Passed 0.65 sec; Start 388: python-curve; 303/411 Test #120: dfccd1 ........................... Passed 1.64 sec; Start 253: omp2p5-1; 304/411 Test #3: casscf-fzc-sp .................... Passed 3.57 sec; Start 119: dfcasscf-sp; 305/411 Test #88: cepa2 ............................ Passed 2.64 sec; Start 130: dfmp2-2; 306/411 Test #137: dfmp2-grad4 ...................... Passed 3.41 sec; Start 139: dfomp2-1; 307/411 Test #253: omp2p5-1 ......................... Passed 1.33 sec; Start 136: dfmp2-grad3; 308/411 Test #391: python-mints2 .................... Passed 2.45 sec; Start 284: props1; 309/411 Test #388: python-curve ..................... Passed 2.06 sec; Start 116: ao-dfcasscf-sp; 310/411 Test #119: dfcasscf-sp ...................... Passed 1.71 sec; Start 135: dfmp2-grad2; 311/411 Test #235: mp2-property ..................... Passed 2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:27999,interface,interface,27999,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['interface'],['interface']
Integrability,Passed 32.49 sec; Start 229: mp2-grad2; 219/411 Test #225: mom .............................. Passed 5.76 sec; Start 230: mp2-module; 220/411 Test #223: molden1 .......................... Passed 7.31 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 4.00 sec; Start 232: mp2p5-grad2; 222/411 Test #224: molden2 .......................... Passed 7.09 sec; Start 233: mp3-grad1; 223/411 Test #229: mp2-grad2 ........................ Passed 3.96 sec; Start 234: mp3-grad2; 224/411 Test #233: mp3-grad1 ........................ Passed 4.67 sec; Start 235: mp2-property; 225/411 Test #231: mp2p5-grad1 ...................... Passed 6.26 sec; Start 236: mpn-bh; 226/411 Test #232: mp2p5-grad2 ...................... Passed 6.64 sec; Start 237: nbody-he-cluster; 227/411 Test #226: mp2-1 ............................ Passed 12.37 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 4.88 sec; Start 239: numpy-array-interface; 229/411 Test #235: mp2-property ..................... Passed 3.31 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 241: ocepa-grad1; 231/411 Test #236: mpn-bh ........................... Passed 4.34 sec; Start 242: ocepa-grad2; 232/411 Test #241: ocepa-grad1 ...................... Passed 11.81 sec; Start 243: ocepa1; 233/411 Test #238: nbody-intermediates .............. Passed 18.27 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 5.53 sec; Start 245: ocepa3; 235/411 Test #219: mints-benchmark .................. Passed 41.71 sec; Start 246: omp2-1; 236/411 Test #110: dcft4 ............................ Passed 423.92 sec; Start 247: omp2-2; 237/411 Test #246: omp2-1 ........................... Passed 4.28 sec; Start 248: omp2-3; 238/411 Test #204: frac-ip-fitting .................. Passed 69.19 sec; Start 249: omp2-4; 239/411 Test #247: omp2-2 ........................... Passed 16.82 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:21315,interface,interface,21315,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['interface'],['interface']
Integrability,"Per this [discussion](http://forum.psicode.org/t/numpy-psi4-dependency/199), there was talk of requiring numpy. However, I can't seem to find the announcement of it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225172815:60,depend,dependency,60,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225172815,1,['depend'],['dependency']
Integrability,"Perhaps Kirk would be willing to add this feature for us. On Mon, Jun 12, 2017 at 2:32 PM, Lori A. Burns <notifications@github.com>; wrote:. > We have a clear policy (at least for what was originally added) of using; > optimized contractions from EMSL. From Kirk Peterson's website; > <http://tyr0.chem.wsu.edu/%7Ekipeters/basis.html>, we don't have that; > option, so we get what he supplies. Not sure what to do about it, unless; > implement a fn to re-optimize contractions.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/728#issuecomment-307878490>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdij1x5IEyCPr7tRTjpEHhtNZnbNuks5sDYQzgaJpZM4NuweP>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307880460:229,contract,contractions,229,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307880460,4,['contract'],['contractions']
Integrability,"Playing around with absolute errors between finite difference and analytical for a UKS water cation (mean/max):; ```; # Cation Water; B3LYP - 0.000005 / 0.000019; TPSS - 0.000259 / 0.001291; TPSS - 0.000264 / 0.001321 # (150, 434) ; M05 - 0.001182 / 0.006572; ```. Big kick from GGA -> MGGA as commented. Now what if we run UKS and RKS gradients on a neutral molecule:; ```; # Neutral Water; RKS TPSS - 0.000007 / 0.000024; UKS TPSS - 0.000007 / 0.000024; RKS M05 - 0.000020 / 0.000091; UKS M05 - 0.000012 / 0.000091; ```. So now we know pretty much that the XC input and output is correct, the integration of the XC data to gradient is correct, and that the normal XC data to AO gradient integration is correct. With this knowledge we are left with a single piece of code that could be [wrong](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/v.cc#L2477-L2496). We therefore spot the error (a good exercise before looking at the answer) and we now get the following:. ```; # Cation Water - fixed; RKS TPSS - 0.000007 / 0.000024; UKS TPSS - 0.000007 / 0.000028; RKS M05 - 0.000020 / 0.000091; UKS M05 - 0.000012 / 0.000050; ```. This makes me happy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-384487129:595,integrat,integration,595,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-384487129,2,['integrat'],['integration']
Integrability,"Please let us know how you installed Psi4. In particular, we need to know the version number that should appear in the header of your input file. @loriab, I hate to keep pinging you on things, but I feel that the CFOUR interface is your department.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155129126:219,interface,interface,219,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155129126,1,['interface'],['interface']
Integrability,Please take a look at [this message](https://github.com/psi4/psi4/pull/644#issuecomment-286609790). I think you've got the same problem.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/585#issuecomment-286612538:28,message,message,28,https://psicode.org,https://github.com/psi4/psi4/pull/585#issuecomment-286612538,1,['message'],['message']
Integrability,"Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553:24,message,message,24,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553,1,['message'],['message']
Integrability,Possible fixes for the angular momentum and contraction coefficients are here:. https://github.com/psi4/psi4/compare/master...PeterKraus:ecp_fix,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/926#issuecomment-370134225:44,contract,contraction,44,https://psicode.org,https://github.com/psi4/psi4/issues/926#issuecomment-370134225,1,['contract'],['contraction']
Integrability,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369640226:116,depend,depending,116,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226,4,['depend'],['depending']
Integrability,"Posting Dom's very nice summary for easier perusal and searchability. Effective `scf_type df` Testing: `mem_df` & `disk_df`; =====================================================. All tests listed below examine calls to both `energy()` and `gradient()` when; employing the `scf_type mem_df` and `scf_type disk_df` settings. Each test; employs a different model chemistry (indicated in the test description) and the; Physicists' water molecule, unless otherwise indicated. 1. Physicists' water, HF/6-31G; - **TEST FAILED**; - Error message:; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); ; RuntimeError:; Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; The most recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:531,message,message,531,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['message'],['message']
Integrability,"Pretty much anything that is global should be on its way out. . I haven't quite figured out how to rationalize two objects that are connected, but are separate entities yet. Currently I have just been appending the object to the Wavefunction python-side:. ``` python; def prop(wfn, ...):; oeprop = psi4.OEProp(wfn, ...); wfn.oeprop = oeprop; return wfn; ```. This works, but you get a vague attribute not found python message if the wavefunction does not have an oeprop object. We can go through and add `None` types for all of these attributes, but that doesn't really work long term.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234665928:418,message,message,418,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234665928,1,['message'],['message']
Integrability,"Pretty sure I'm using the homebrew boost, but that could still be the; problem. I upgraded homebrew a few days ago, but I didn't recompile PSI; since. The current homebrew boost is 1.60.0, and cmake sees it when it; configures. Everything compiles smoothly, but I get the following error; immediately on any attempt to execute with any input file:. Traceback (most recent call last):. File ""<string>"", line 6, in <module>. File ""/Users/crawdad/psi4/share/psi4/python/aliases.py"", line 39, in; <module>. ```; from wrappers import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/wrappers.py"", line 39, in; <module>. ```; from driver import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/driver.py"", line 265, in; <module>. ```; for ssuper in superfunctional_list():; ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 3365, in; superfunctional_list. ```; sup = superfunctionals[key](key, 1, 1); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1910, in; build_b3lypd1_superfunctional. ```; sup = build_b3lyp_superfunctional(name, npoints, deriv); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1224, in; build_b3lyp_superfunctional. ```; sup = psi4.SuperFunctional.blank(); ```. TypeError: No to_python (by-value) converter found for C++ type:; boost::shared_ptrpsi::SuperFunctional. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:39 PM, Andy Simmonett notifications@github.com; wrote:. > Messaging from 30000 feet, @lothian https://github.com/lothian . Fancy!; > I bet the problem you're seeing is due to some incompatibility between the; > way boost and psi4 are compiled. On the Mac I had a hard time getting a GCC; > version to compile. I had to compile boost with some modified settings to; > get the code to link, but it failed in the way that you described when it; > did link. I had no problems using the Homebrew (or the Psi4 bundled) Boost; > if I used clang.; > ; > —; > Reply to this emai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178853828:513,wrap,wrappers,513,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178853828,2,['wrap'],['wrappers']
Integrability,Print full PSIO error message to cerr as well,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997:22,message,message,22,https://psicode.org,https://github.com/psi4/psi4/pull/2997,1,['message'],['message']
Integrability,Proper update of post-scf wave-functions for fchk interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/747:50,interface,interface,50,https://psicode.org,https://github.com/psi4/psi4/pull/747,1,['interface'],['interface']
Integrability,"Psi4 1.0 and its successors in the 1.0 release series have the new SAPT code _and_ build with GCC 4.8. But for all the aforementioned reasons I advise building a 1.1a1 series Psi4 (and the fact that I tested the sapt2+3dmp2 forum post on a 1.1a1 series). We can get around your problem 4.8.2 problem. You don't have to compile _everything_ with >=4.9 GCC, just Psi4. (HDF5 isn't a dependency unless you `ENABLE_CheMPS2=ON`; GSL no longer a dependency at all; Python only an interpreter and header dependency, not library). You can get a gcc 5.2 from conda vis [these instructions](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/build_planning.rst#how-to-satisfy-the-gcc--49-requirement-on-linux-without-updating-the-os) and use that to compile Psi4, without ever interfering with your system gcc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274087513:381,depend,dependency,381,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274087513,3,['depend'],['dependency']
Integrability,Psi4 1.4rc1 in-core DF is very sensitive to linear dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211:51,depend,dependencies,51,https://psicode.org,https://github.com/psi4/psi4/issues/2211,1,['depend'],['dependencies']
Integrability,Psi4 interface to MRCC and threading,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1132:5,interface,interface,5,https://psicode.org,https://github.com/psi4/psi4/issues/1132,1,['interface'],['interface']
Integrability,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463:721,depend,dependent,721,https://psicode.org,https://github.com/psi4/psi4/issues/2463,1,['depend'],['dependent']
Integrability,QCEngine support would be great for a general interface and access to all the LNO and F12 goodies!. The PSI4 (and I suspect also ORCA and Molpro) interface is a bit different in the sense that those programs compute the integrals and hand them over to MRCC for arbitrary order CC(n) type of calculations. Dates back to when MRCC was essentially only doing that. . Not sure how much use the (broken) 'classic' interface has.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1092765492:46,interface,interface,46,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1092765492,3,['interface'],['interface']
Integrability,RHF/ROHF stability analysis is already implemented but following instabilities (`STABILITY_ANALYSIS=FOLLOW`) is only available with UHF. Once we have the generalized Davidson solver (#886) it will be possible to:; - Add RHF/ROHF root following; - Move the UHF stability analysis code to use the solver and maintain a single interface; ; See #973 for some more information.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1005:324,interface,interface,324,https://psicode.org,https://github.com/psi4/psi4/issues/1005,1,['interface'],['interface']
Integrability,"Raise the error that we can't do stability analysis on DFT ""wavefunctions"" before we bother to compute the (potentially very expensive) integrals necessary for this. The same error message is getting raised C-side under the same condition. This commit just raises it sooner, because spending the better part of an an hour computing integrals for no reason is annoying. ## Checklist; - [x] No tests run in addition to quicktests, since this is so simple and mirroring a C-side operation. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1337:181,message,message,181,https://psicode.org,https://github.com/psi4/psi4/pull/1337,1,['message'],['message']
Integrability,"Ran into this issue myself a week ago. It turns out that you need to patch a few file in the MRCC tarball and recompile to make it work (and this has to be done independently of the Psi4 interface) I couldn't see this info advertised on the MRCC website, I happened to browse the ""Patches"" section in their download page and noticed that there were few patches more recent than the tarball I had just downloaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151:187,interface,interface,187,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151,1,['interface'],['interface']
Integrability,Range separations not handled properly in libxc interface for range separated functionals,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1258:48,interface,interface,48,https://psicode.org,https://github.com/psi4/psi4/issues/1258,1,['interface'],['interface']
Integrability,"Rebase is done!. > Right, internal build, by adding `ENABLE_gauxc=ON` about here: https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L135 . And please check there's a gauxc test somewhere in ctests or pytests that runs with smoke or quick -- the ones I noticed were marked long. Thanks for the heads-up! There were no smoke/quick tests for the GauXC interface, so I tagged a couple of the tests in `test\_compositejk.py` as such. The Azure file was updated, as well. . Let's see how the CI responds.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2278146048:383,interface,interface,383,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2278146048,1,['interface'],['interface']
Integrability,"Rebased and pushed, some timings en route.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742#issuecomment-316501447:36,rout,route,36,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-316501447,1,['rout'],['route']
Integrability,"Rebuilding Psi4 1.3.2 in Fedora rawhide fails with; ```; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; error: Bad exit status from /var/tmp/rpm-tmp.sQzcRh (%build); ```; The issue here is that distutils was deprecated in Python 3.10 and marked for deletion in 3.12:; https://docs.python.org/3/whatsnew/3.10.html#distutils-deprecated. The file in master has been slightly updated, but still features the use of distutils, so this issue is likely present on the master branch as well.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020:207,message,message,207,https://psicode.org,https://github.com/psi4/psi4/issues/3020,1,['message'],['message']
Integrability,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/132#issuecomment-121991365:397,message,message,397,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365,6,['message'],['message']
Integrability,"Regarding the debian detection: since CMake decides the folder location,; CMake should also detect it:. The headers are always in /usr/include/chemps2/, but since in; https://github.com/psi4/psi4public/blob/f81842d2e9c255490d450681bc6bdeca551b81e1/src/bin/dmrg/dmrgscf.cc; they are included as ""chemps2/DMRG.h"" etc, it will always need. ```; /usr/include; ```. I suppose CMake will always look there, but it cannot hurt to append this; folder again :-). The library is in the folder. ```; /usr/${CMAKE_INSTALL_LIBDIR}; ```. where the latter part is automatically set by calling. ```; include(GNUInstallDirs); ```. in the CMakeLists.txt. Check; https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt#L10 and; https://github.com/SebWouters/CheMPS2/blob/master/CheMPS2/CMakeLists.txt#L21; for an example. Best wishes,; Sebastian. 2015-07-19 16:23 GMT-04:00 Lori A. Burns notifications@github.com:. > Lingering issues for finalizing CheMPS2:; > ; > -; > ; > Make sure can detect Debian installation of CheMPS2 in ""list of files""; > https://packages.debian.org/sid/libchemps2-dev; > -; > ; > make up new conda package; > -; > ; > add conda package to metapackage; > -; > ; > add chemps2.rst to interfaces in docs; > -; > ; > add chemps2 to binary; > -; > ; > review keywords; > -; > ; > add acceptance for Intel redistributable for chemps2.so; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-123019591:1199,interface,interfaces,1199,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123019591,1,['interface'],['interfaces']
Integrability,"Regarding the general case `MultipoleInt` vs. special routines like `DipoleInt`. Keep in mind that asking for `MultipoleInt`s with order=2 will give overlap, dipole, quadrupole. Asking for `QuadrupoleInt`s will only give quadrupoles. Computing the extra integrals isn't really a big deal in terms of efficiency, but it might be a little surprising for the user to find that the indexing doesn't start from zero. The current quadrupole integral implementation just calls Libint2 and picks out only the quadrupole components. Going with only MultipoleInts is better for maintenance, but changes the API and could lead to some surprises. However, there isn't really any efficiency penalty for doing that, so I don't really have a strong opinion either way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077806309:54,rout,routines,54,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077806309,1,['rout'],['routines']
Integrability,Rehabilitates Cfour interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/730:20,interface,interface,20,https://psicode.org,https://github.com/psi4/psi4/pull/730,1,['interface'],['interface']
Integrability,"Related issue: [2577](https://github.com/psi4/psi4/issues/2577). Using a similar script as the previous reporter (using Psi4 1.9.1 and this build; `conda install -n $VENV_PSI4 psi4 numpy scipy dftd3-python dftd4-python gcp-correction python=$PYTHON_VERSION -c conda-forge`); ```; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'check'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97X-D3BJ/def2-TZVPD', molecule=mol); ```. I get the NYI message:; `psi4.driver.p4util.exceptions.ValidationError: Stability analysis not yet supported for XC functionals.`. Is the implementation of stability check for DFT on the roadmap for the near future? This would be very helpful especially when running UKS as we have observed that open shell systems often have instabilities in the SCF. . I also tried with `PBE/6-31G` and still get this exception. However, this [merged PR](https://github.com/psi4/psi4/pull/2849) implemented stability check for GGA functionals - is this a bug? The NYI message looks like it's triggered for every DFT functional ([see this line](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L578)), whereas [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/subclass_methods.py#L129) the program only raises the error if the functional is meta or needs vv10.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236:475,message,message,475,https://psicode.org,https://github.com/psi4/psi4/issues/3236,2,['message'],['message']
Integrability,"Related to issue #414 : when using the GCC 5.2 trick reported [here](http://psicode.org/psi4manual/master/build_planning.html#faq-modgcc) AND building CheMPS2, which requires to specify the -DCMAKE_AR and -DCMAKE_RANLIB variables, the build fails with the message:. `sorry - this program has been built without plugin support`. I traced it back to gcc-ar for both gcc5.2 from conda and gcc4.8 from the local system being built without plugin support. After more staring, it looks like both gcc-ar are wrappers which call the same /usr/bin/ar, which was built without plugin support. Anyone can think of a workaround for this ? Could we install a local ar in the conda environment and have gcc5.2 call this one, for example ?. (Note: Edited for clarity.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660:256,message,message,256,https://psicode.org,https://github.com/psi4/psi4/issues/660,2,"['message', 'wrap']","['message', 'wrappers']"
Integrability,Relativity does add some further complications into the mix. IIRC the X2C transform would have to be computed differently. (Whether it's an electric or magnetic field depends on the frame!),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758#issuecomment-558061727:167,depend,depends,167,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558061727,1,['depend'],['depends']
Integrability,Remove direct pthread dependency,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199:22,depend,dependency,22,https://psicode.org,https://github.com/psi4/psi4/pull/1199,1,['depend'],['dependency']
Integrability,"Removed the DETCI refs from the docs table, and in select ccsd. . I also updated occ psivars. It was setting `CURRENT CORRELATION ENERGY` for `{df/cd}-ccsd(t)` but it was not setting `CCSD(T) CORRELATION ENERGY`. The test now runs through a more complete set of cross checking. Testing conv (fnocc, ccenergy) and df/cd (fnocc, occ) both with and without frozen core. . Note: The changes to occ required a rebuild, and I am noticing when doing df/cd (either occ or fnocc module) I get a message printed to `stdout`""No atoms detected, returning"". Are we aware of this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-381827387:486,message,message,486,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-381827387,1,['message'],['message']
Integrability,Reopening because; > Someone more familiar with the GDMA interface than myself should look into how to fix psi4 so that this workaround isn't necessary.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2706#issuecomment-1228661577:57,interface,interface,57,https://psicode.org,https://github.com/psi4/psi4/issues/2706#issuecomment-1228661577,1,['interface'],['interface']
Integrability,Reorder dfocc:dfmp2 Contractions to Remove Bottleneck,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1726:20,Contract,Contractions,20,https://psicode.org,https://github.com/psi4/psi4/issues/1726,1,['Contract'],['Contractions']
Integrability,"Replace sq_rsp(...) with a new DSYEV wrapper, part 1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:37,wrap,wrapper,37,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['wrap'],['wrapper']
Integrability,"Reproach well deserved, @jgonthier. Info has been in [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L71), but that admittedly is an awful error message. I've figured out how to hit it locally (conda directory structure bypasses it all), and a fix will appear soon to a PR near you. Thanks for the report. @edeustua, `-DOpenMP_LIBRARY-DIRS` probably _is_ the intended solution. The usual case where this issue appears is you're building Psi with GCC compilers and MKL LAPACK. For a usual from-intel (as opposed to from-conda) MKL installation, libraries mkl_rt and iomp5 are in different locations. With GCC+MKL, Psi needs to explicitly use iomp5 to suppress the tenacious gomp. But unless the location of iomp5 is already known to CMake through another detection sequence, it can't find the library, hence the (poor) error message you got. `OpenMP_LIBRARY_DIRS` is the intended solution. If I'm misunderstanding your circumstance, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976:170,message,message,170,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976,2,['message'],['message']
Integrability,"Reproduce with the below env.yml file:. ```yaml; channels:; - conda-forge; - psi4. dependencies:; - python =3.9; - datamol ; - numpy; - scikit-learn; - pytorch >=1.10.2; - tqdm; - jupyterlab; - openmm; - psi4 >=1.6; ```. then `mamba env create -n tmp_psi4 -f env.yml` and the error is. ```; conda-forge/linux-64 Using cache; conda-forge/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change. Looking for: ['python=3.10', 'datamol', 'numpy', 'scikit-learn', ""pytorch[version='>=1.10.2']"", 'tqdm', 'jupyterlab', 'openmm', ""psi4[version='>=1.6']""]. Encountered problems while solving:; - nothing provides intel-openmp needed by psi4-1.6+77475b5-py39hceaf722_0; ```. I tried multiple combination of python and psi4 versions without success. Note that the above has been only tested on a linux machine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621:83,depend,dependencies,83,https://psicode.org,https://github.com/psi4/psi4/issues/2621,1,['depend'],['dependencies']
Integrability,Right now it crashes with no helpful message. @jturney can you take a look?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/52:37,message,message,37,https://psicode.org,https://github.com/psi4/psi4/issues/52,1,['message'],['message']
Integrability,"Right, Ed's SAPT's CPHF still prints E but no longer considers deltaE for convergence. (There's a few more notes on the Google Doc.) Austin's away -- I'll get this compiling. Was there another message (appears in my email) that got deleted on GH?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3105#issuecomment-1859232261:193,message,message,193,https://psicode.org,https://github.com/psi4/psi4/pull/3105#issuecomment-1859232261,1,['message'],['message']
Integrability,"Right, without more information, the most I'm expecting is to update the error message with something that makes clear whether this is something the user can fix by changing settings as well as what the problem is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684:79,message,message,79,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684,2,['message'],['message']
Integrability,"Roberto, I could not find libpcm.so in /interfaces/lib. If I ran nm on all files I get:. ```; interfaces/lib/libgetkw.a(Getkw.cpp.o):; 000000000000eb18 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE10BOOL_ARRAY; 000000000000ea58 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3DBL; 000000000000ea38 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3INT; 000000000000ea98 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3STR; 000000000000ea78 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4BOOL; 000000000000eab8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4DATA; 000000000000eaf8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9DBL_ARRAY; 000000000000ead8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9INT_ARRAY; 000000000000eb38 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9STR_ARRAY; 000000000000ea18 b __ZGVZN5Getkw8readlineERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_19basic_istringstreamIcS3_NS0_9allocatorIcEEEEE3buf; U __ZN10GetkwErrorC1ERNSt3__119basic_ostringstreamIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; U __ZN10GetkwErrorD1Ev; 0000000000001e90 T __ZN5Getkw10popSectionEv; 0000000000001640 T __ZN5Getkw10setVerboseEb; 0000000000001a80 T __ZN5Getkw11pushSectionERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 0000000000002110 T __ZN5Getkw7readKeyEP7SectionRNSt3__113basic_istreamIcNS2_11char_traitsIcEEEE; 00000000000020d0 T __ZN5Getkw8convBoolERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 0000000000003af0 T __ZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 00000000000009a0 T __ZN5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171058175:40,interface,interfaces,40,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171058175,2,['interface'],['interfaces']
Integrability,"Run:; ```; molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. wfn = energy('scf/cc-pvdz', return_wfn=True)[1]; print(wfn.Fa_subset(""MO"").nph); ```. The result MO basis Fock matrix is not diagonal, as expected. The correct way to transform the SO basis Fock matrix into the MO basis matrix is contraction against the C coefficient matrices. This is not what the `Fa_subset` function does. It instead goes through [a series of matrix mulitplications involving the overlap matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.cc#L1047-L1050). This is the correct transformation rule for the density matrix. Not-so-coincidentally, `Da_subset` goes through exactly the same function, where this behavior is correct. If you try to use the same logic for both helpers, you're going to get one of them wrong, guaranteed. While the mechanism of the bug is clear to me, I'm not sure what the best fix should be. Perhaps we should intercept ""MO"" as a special case in `Fa_subset` so it never sees the `matrix_subset_helper`? Under the hood, the code would return `Fa_->transform(Ca_)`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989:302,contract,contraction,302,https://psicode.org,https://github.com/psi4/psi4/issues/1989,1,['contract'],['contraction']
Integrability,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023:283,message,message,283,https://psicode.org,https://github.com/psi4/psi4/issues/2023,1,['message'],['message']
Integrability,"Running e.g. `pcmsolver` calculations with symmetry will lead to a crash:; ```; File ""/Users/kruse/qc/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 300, in scf_iterate; upcm, Vpcm = self.get_PCM().compute_PCM_terms(Dt, calc_type). RuntimeError:; Fatal Error: Matrix::gemm error: Number of irreps do not equal.; Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1349; The most recent 3 function calls were:; ```. The PCM message suggests c1 symmetry is enforced:; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1520-L1522; but the `use_c1` option is for making post-SCF c1 wavefunction and not for the SCF itself.; Similar issue with the `cppe` addon for polarizable embedding. Either a graceful exist or actually making a c1 wfn object is desirable.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1978:489,message,message,489,https://psicode.org,https://github.com/psi4/psi4/issues/1978,1,['message'],['message']
Integrability,"Running larger calculations with scf_type pk gives me lots and lots of error messages; ```; $ psi4; thread already exists.; thread already exists.; thread already exists.; ```; and so on. These seem to arise from src/psi4/libpsio/aio_handler.cc. I'm wondering if these really are errors, if they should be printed, and whether stdout instead of the log file is the right place to do it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596:77,message,messages,77,https://psicode.org,https://github.com/psi4/psi4/issues/596,1,['message'],['messages']
Integrability,Ryan thinks this routine seems to be giving wrong values for g-shells. Check.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/47:17,rout,routine,17,https://psicode.org,https://github.com/psi4/psi4/issues/47,1,['rout'],['routine']
Integrability,SCAN is crazy grid dependent. You might need up to 500 radial points to get single points with microhartree accuracy.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-382448968:19,depend,dependent,19,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-382448968,1,['depend'],['dependent']
Integrability,"Same here, just ; /edfs/users/deprince/software/psi4/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. > On Feb 27, 2018, at 11:34 AM, Robert T. McGibbon <notifications@github.com> wrote:; > ; > Any error message on the crash?; > ; > No.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/923#issuecomment-368940098>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGpwnGu_Xbo1lZTU4IJZALbsctYGNks5tZC6bgaJpZM4SPiMy>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368940820:240,message,message,240,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368940820,1,['message'],['message']
Integrability,Saving orbital file can crash if # of MO's changes due to linear dependency shift,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32:65,depend,dependency,65,https://psicode.org,https://github.com/psi4/psi4/issues/32,1,['depend'],['dependency']
Integrability,See the newly generated `output.ref` for user-facing interface at default print level. I've manually checked print levels 2 and 3.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079#issuecomment-759538205:53,interface,interface,53,https://psicode.org,https://github.com/psi4/psi4/pull/2079#issuecomment-759538205,1,['interface'],['interface']
Integrability,"Seems Psi4 and EMSL and libint are internally consistent, so the issue is to accept `.gbs` files that are truly Gaussian-style in AM labeling, not just Gaussian-style in format. Do you happen to know, @susilehtola, if G94 (a) does not skip any letters, such that EMSL and G94 are inconsistent for all AM >=7 or (b) skips a different letter so that EMSL and G94 are inconsistent only for AM==7? It sounds like (a), but I want to be sure. . I was only faintly aware that there was an ""L=l"" gbs format. Found [this](http://www.ccl.net/chemistry/resources/messages/1996/09/12.004-dir/) on it, so will investigate, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/628#issuecomment-282107744:552,message,messages,552,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282107744,1,['message'],['messages']
Integrability,"Seems reasonable to me. We can inject the default parameters for the model parameters (``ga``, ``gc``, ``wf``) when we transform the parameters provided from *dftd4* to the qcng format. It might make sense to add them in the ``parameters.toml`` file in *dftd4* as well, not sure about that yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2121#issuecomment-1368077959:31,inject,inject,31,https://psicode.org,https://github.com/psi4/psi4/issues/2121#issuecomment-1368077959,1,['inject'],['inject']
Integrability,Set up integration with Danger.Systems,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809:7,integrat,integration,7,https://psicode.org,https://github.com/psi4/psi4/pull/809,1,['integrat'],['integration']
Integrability,"Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of target psi4-core; ...; -- The CXX compiler identification is Intel 16.0.3.20160415; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Using pybind11: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/include (version 2.0.0 for Py3.5.2 and -std=c++11); -- Using Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; ...; -- Using CheMPS2: /theoryfs2/ds/c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:2348,depend,dependencies,2348,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,1,['depend'],['dependencies']
Integrability,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211:225,depend,dependencies,225,https://psicode.org,https://github.com/psi4/psi4/issues/2211,1,['depend'],['dependencies']
Integrability,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021:681,message,messages,681,https://psicode.org,https://github.com/psi4/psi4/issues/1021,2,['message'],"['message', 'messages']"
Integrability,Show file name in error message,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2801:24,message,message,24,https://psicode.org,https://github.com/psi4/psi4/pull/2801,1,['message'],['message']
Integrability,"Show seg faults, buffer overflows, and doubly linked list errors: https://travis-ci.org/psi4/psi4/jobs/471402754. Azure Gibbs failure looks like:; ```; 2018-12-23T01:04:44.9842835Z 61/142 Test #210: gibbs ............................***Failed 33.09 sec; 2018-12-23T01:04:44.9843015Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843106Z 	N2 Gibbs Free Energy..............................................PASSED; 2018-12-23T01:04:44.9843160Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843216Z 	H2O Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843489Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843563Z 	NH3 Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843609Z Traceback (most recent call last):; 2018-12-23T01:04:44.9843656Z File ""D:/a/1/b/build/stage/bin/psi4"", line 287, in <module>; 2018-12-23T01:04:44.9843903Z exec(content); 2018-12-23T01:04:44.9843947Z File ""<string>"", line 71, in <module>; 2018-12-23T01:04:44.9843996Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 1096, in optimize; 2018-12-23T01:04:44.9844066Z moleculeclone.update_geometry(); 2018-12-23T01:04:44.9844095Z ; 2018-12-23T01:04:44.9844134Z RuntimeError: ; 2018-12-23T01:04:44.9844201Z Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; 2018-12-23T01:04:44.9844301Z Error occurred in file: D:\a\1\s\psi4\src\psi4\libmints\molecule.cc on line: 2016; 2018-12-23T01:04:44.9844337Z ; 2018-12-23T01:04:44.9844403Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. as shown in the logs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954:1542,depend,dependent,1542,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954,1,['depend'],['dependent']
Integrability,"Simint Integration, Continued",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:7,Integrat,Integration,7,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['Integrat'],['Integration']
Integrability,Simplify EFP routines,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2111:13,rout,routines,13,https://psicode.org,https://github.com/psi4/psi4/pull/2111,1,['rout'],['routines']
Integrability,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688:984,Depend,Dependencies,984,https://psicode.org,https://github.com/psi4/psi4/issues/688,4,"['Depend', 'depend']","['Dependencies', 'dependencies']"
Integrability,"Since `cppe` has its own Python interface now (which it did not when I started this PR), I guess there is no reason to interface with psi4 on the C++ layer?. I guess it would be much simpler wrt maintenance of the code to refactor everything and use the `cppe` Python interface directly. What do you think, @loriab, @dgasmith, @robertodr ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596:32,interface,interface,32,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596,6,['interface'],['interface']
Integrability,"Since nobody answered this yet, let me do so and bump this thread... You are right Lori, at present the s^2 variants are always computed, and the s^inf variants are computed in addition if the respective variables are True. As the new addition makes it possible to run complete SAPT0 without the s^2 approximation, it definitely makes sense to create a route that does exactly that, skipping the s^2 calculations altogether. However, it probably needs a new name (`energy('sapt0-sinf')` or similar) so the meaning of the standard and widely used `energy('sapt0')` is unchanged. It might also make sense to define new optional routes for higher-order SAPT that combine SAPT0-level s^inf exchange corrections with higher-level s^2 exchange corrections. I don't have a good name for such routes though: `energy('sapt2-sinf')` is not a good idea because it's not _all_ s^inf.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052:353,rout,route,353,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052,3,['rout'],"['route', 'routes']"
Integrability,Small updates to adcc integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1892:22,integrat,integration,22,https://psicode.org,https://github.com/psi4/psi4/pull/1892,1,['integrat'],['integration']
Integrability,"So I was thinking about getting rid of `""component""` too. The difference between something like ""MP2"" and ""B2PLYP"" is that while there's a name for the SCF component of MP2 (it's HF), there's no such thing for the SCF part of B2PLYP. Also, before components were introduced, the keys in the `VARH` dict had to be valid methods, having a check against component gets around this issue. I think a much cleaner interface may be to rework how the extrapolation functions (`corl_xtpl_helgaker_2` etc.) work. Rather than passing in an energy/gradient/Hessian, we could pass in the `wfn` + the variable to extrapolate, and instead of trying to shoehorn the dft extrapolation into the existing interface, it could be neatly contained in a single extrapolation function. The only issue I see with this is that the printing of the CBS stages would have to move from `cbs()` into the extrapolation function itself. This is perhaps better discussed once DDD is in?. ------. I have made changes to the duplication detection, merging the two loops. Instead of a simple counter, it's now an array of job-indices, with the first element being the highest priority (ie the one with the matching wfn). Also, @hokru your ""requested"" syntax now works, see the added test which combines components arbitrarily. `ctest -L cbs` passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657:408,interface,interface,408,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657,4,['interface'],['interface']
Integrability,"So I've added the option to be able to run frequency calculations via the cbs interface, both using the `""method/basis""` and `frequency(cbs, ...)` syntax. I've added the tests for this too - I wanted to get a reference value for the `HF/cc-pV[DT]Z` extrapolation from other codes (thanks @hokru), but we failed to get it run correctly. When compared to large basis sets, one gets these results:. Freq 1 | Freq 2 | Freq 3 | zeta | RMS; -- | -- | -- | -- | -- ; 1809.246 | 3923.151 | 4020.177 | 2 |   174.1217 ; 1753.040 | 4126.975 | 4226.872 | 3 |    4.1162; 1750.381 | 4130.709 | 4230.122 | 4 |    1.4733; 1748.147 | 4130.445 | 4230.985 | 5 |    0.2300; 1748.003 | 4130.108 | 4230.827 | 6 |    ; 1747.741 | 4130.226 | 4230.575 | [dt] |   0.2207; 1749.876 | 4131.278 | 4230.490 | [tq] |   1.2899; 1747.595 | 4130.375 | 4231.193 | [q5] |   0.3520. I think the convergence is reasonable - it's clear the results (even with HF/[dt]) are not complete junk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-424317527:78,interface,interface,78,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-424317527,2,['interface'],['interface']
Integrability,"So be it, https://github.com/psi4/psi4/pull/348/commits/2fb0d6ba85dc30392cf2c2f2213244221160eae0 . I think that wraps this issue up. Will close it when the relevant docs get checked in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345#issuecomment-210979527:112,wrap,wraps,112,https://psicode.org,https://github.com/psi4/psi4/issues/345#issuecomment-210979527,1,['wrap'],['wraps']
Integrability,"So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions. Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; ```; SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; std::shared_ptr<BasisSet> bs3) {; auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; }; ```; and it is also revealed in the Python interface, which means that you should be able to call it. Hopefully someone else can tell how to fit all the pieces together.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063:402,wrap,wrapper,402,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063,4,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"So the rotational entropy depends on the rotational symmetry factor (from full symmetry, not computational symmetry) and moments of inertia. And the translational entropy depends on the molecular weight. Now when one does isotopic substitutions, the molecular mass, moments of inertia, and potentially (if an asymmetric substitution) the rotational symmetry factor change. Psi4 uses these changed values to recompute the translational and rotational partition functions. I'm pleased to report that we agree nicely with other programs for standard isotope and different temperatures and nonstandard isotopes and for nonstandard isotopes up through vibrations and enthalpy. For entropy of isotopes, in particular translational and rotational entropy, we hit a snag. The good news is that I think we're right (go @psi-rking) and everyone else is wrong. ; - Q-Chem 4.3 & Molpro 2010.1; - For default isotope H2O, we agree completely; - For non-symmetry-changing D2O, we agree (both trans and rot), as both programs recompute the total molecular mass and the symmetry number is unchanged.; - For symmetry-changing HDO and DTO, we agree for trans entropy. But both programs still use the symmetry number of the parent, so rot entropy disagrees with us but agrees with each other.; - For all isotopologs, vib entropy agrees completely; - NWChem 6.6; - For default isotope H2O, we agree completely; - For _any_ non-default isotope D2O, HDO, DTO; - trans entropy disagrees since the total molecular mass is not recomputed.; - rot entropy disagrees since the symmetry number is not updated. And it disagrees with Q-Chem and Molpro (which also don't update the symmetry number) presumably because by not updating the molecular mass they also don't update the MOI.; - For all isotopologs, vib entropy agrees completely. So, @psi-rking, @jturney, and any others with thermo experience, is psi4 indeed right on this issue? Conditions, key results, and input files below. . Conditions. ```; HF/sto-3g. O -0.000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345:26,depend,depends,26,https://psicode.org,https://github.com/psi4/psi4/issues/345,2,['depend'],['depends']
Integrability,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:606,message,message,606,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684,1,['message'],['message']
Integrability,"Some comments for posterity:; * The Coulomb terms also come from the derivatives of two-electron integrals. You can (and for efficiency should) contract the TEI derivatives against the 1RDM to get the Coulomb terms. Conceptually, this is the interaction of an orbital with the mean field of all orbitals. It's not a pure one-electron interaction, but it's close enough.; * For purposes of thinking about the implementation, this issue is two very different ones: (1) exposing the existing pieces of the SCF gradient and (2) further decomposing those pieces into per-orbital contributions, where applicable. (1) is as easy as setting array variables on the wavefunction. Per-orbital contributions aren't even computed, as they shouldn't be in an efficient code, so (2) is non-trivial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091:144,contract,contract,144,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091,1,['contract'],['contract']
Integrability,"Some of the MRCC-related tests fail to run, for reasons unrelated to the actual MRCC interface as far as I can tell.; ```; (p4env) gytibor@CRD-CSLW-1:~/qcta$ pytest -m mrcc /home/gytibor/miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.9.12, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/gytibor/miniconda3/envs/p4env/lib/python3.9/site-packages/psi4, configfile: pytest.ini; collected 4121 items / 4114 deselected / 7 selected. ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_addons.py . [ 14%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_composite.py F [ 28%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsd_t_/test_input.py F [ 42%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsdt/test_input.py . [ 57%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsdt_q_/test_input.py . [ 71%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/optfreq/test_input.py F [ 85%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/rohf_ccsdt_q_/test_input.py . [100%]; .; <snip>; .; ========================================================================================================== short test summary info ==========================================================================================================; FAILED ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_composite.py::test_allen_focal_point - NameError: name 'psi4' is not defined; FAILED ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsd_t_/test_input.py::test_mrcc_ccsd_t_ - AssertionError: Using the `local_options` keyword argument is deprecated in fa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2634:85,interface,interface,85,https://psicode.org,https://github.com/psi4/psi4/issues/2634,1,['interface'],['interface']
Integrability,"Some things to add to the wishlist from my end:. - [ ] Update COSX to support arbitrary grids via modification of X-matrix handling (see https://github.com/psi4/psi4/issues/2890 for further details).; * Susi notes: I don’t think one needs a separate formulation, just propagating the sign to the A tensor would suffice since it carries a grid index; * Further update: this wish is now addressed in https://github.com/psi4/psi4/pull/2931.; - [ ] Add CFMM and/or DF-CFMM to Psi4 officially. These already exist in Psi4 development branches, but need to be updated to match modern Psi4 developments (e.g., current formulations of CompositeJK) and actually put into Psi4. The first PR for these methods already exists (https://github.com/psi4/psi4/pull/2665).; - [ ] Support for [J-Engine](https://doi.org/10.1063/1.470986). J-Engine is a nice algorithm by the Head-Gordon group to help reduce the prefactor of J-build calculations via reformulation of how integral intermediates are formed and contracted with the density matrix to form Coulomb matrix elements. As it deals with shuffling around how integral intermediates are formed and combined with the density, any J-Engine effort will likely require coordination with the Valeev group and development within Libint2 itself (although the Valeev group did seem interested in J-Engine from what discussions I had with their researchers). ; - [ ] Support for mixed basis sets in TwoBodyAOInt sieving.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763:991,contract,contracted,991,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763,1,['contract'],['contracted']
Integrability,"Somewhere I saw a question about whether psi4 in psi4conda could update. . tl;dr no, create a new environment instead, as you'll get the latest, and it's far more predictable. Technically, yes, `conda update psi4 -c psi4` should get you the latest stable release, v1.3.2 from mid-2019, or `conda update psi4 -c psi4/label/dev` should get you the latest nightly build from this week. However, practical advice is that whenever your psi4 is more than a few months old, don't update, just create a new environment, `conda create -n <env-name-of-your-choice> python=3.<python-version-of-your-choice> psi4 -c psi4/label/dev`, activate that env, and use that new psi4 instead of the (remaining, still functional) psi4 in the main environment of psi4conda. The reasons that a freshly solved environment is better is that: (1) Far upstream packages like mkl or numpy or hdf5 update over time and new psi4 may not be built against the older ones in the psi4conda env, so you don't get the newest psi. (2) To make psi4-served conda packages easy to use for both compiling and installing binary psi4, I don't pin dependencies very tightly, so the constraints of the env may not allow all the latest packages to be pulled or even a consistent set of packages. Same advice for any psi4 install, not just psi4conda.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2071#issuecomment-750716944:1102,depend,dependencies,1102,https://psicode.org,https://github.com/psi4/psi4/issues/2071#issuecomment-750716944,1,['depend'],['dependencies']
Integrability,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-190956405:373,message,message,373,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405,1,['message'],['message']
Integrability,Sorry for taking so long:. ```; # define library; add_library(core STATIC ${CORE_SOURCE_FILES} ${CORE_HEADER_FILES}). # link dependencies; target_link_libraries(; core; ${Boost_LIBRARIES}; ${ICONV_LIBRARIES}; ${CORE_SYSTEM_LIBRARIES}; ). # This has been sufficient to enable C++11 for me. I should probably explicitly list; # the features I require.; target_compile_features(core PUBLIC cxx_constexpr); ```. Since I stated `PUBLIC` on the `target_compile_features` targets that depend on `core` will require that specific C++11 to be enabled.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-158770738:125,depend,dependencies,125,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-158770738,2,['depend'],"['depend', 'dependencies']"
Integrability,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-225993854:818,interface,interface,818,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854,4,['interface'],['interface']
Integrability,"Sorry to get in on this kind of late, but that message:; >`...stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name typedef typename _Iterator::iterator_category iterator_category; ^`. Does seem vaguely familiar and I have not been able to get psi4 working on our clusters with intel-16.1. I have not tried recently though so if it would help you out at all @jgonthier I could try a build tonight and let you know what I see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288590352:47,message,message,47,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288590352,1,['message'],['message']
Integrability,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920:653,message,message,653,https://psicode.org,https://github.com/psi4/psi4/issues/1920,2,['message'],['message']
Integrability,"Sorry, @loriab, I didn't see your previous message announcing the cleanup and introduction of the new qmefp-puream test. I think it's all good as-is, but the folders qc-scfefp-sp1 and qc-scfefp-sp2 appear to not contain an input.dat. Should they be deleted?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/115#issuecomment-171512142:43,message,message,43,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-171512142,1,['message'],['message']
Integrability,"Sorry, I missed your last question, @JonathonMisiewicz. Correct, there [is a bug in MKL](https://community.intel.com/t5/Intel-oneAPI-Math-Kernel-Library/Memory-data-race-problems-in-DGETRI/m-p/1313691) that is being fixed, so all `general_invert` calls are potentially vulnerable. I will note that many of the `general_invert` calls in the code give the correct answer still (including the one fixed in this PR, for many system sizes), as does the standalone code I used to report the issue. It looks like some kind of an uninitialized variable somewhere in Intel's kernels so it's likely to be context-dependent whether the right answer is returned. I'm pretty sure it's been present for at least the last few versions and we only just noticed it, so I suspect it's not that pervasive. Regardless, we need to update our MKL dependency as soon as the fix is published.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761:603,depend,dependent,603,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761,2,['depend'],"['dependency', 'dependent']"
Integrability,"Sorry, I only just saw this thread. I don't know if this is useful, but here's some code that computes a DFT wavefunction as a simple way to set up a DFT integration grid. It then uses that integration grid to integrate the electron density at the HF level in this example. Most of this was stolen from @dgasmith ; ``` python; import psi4; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""sto-3g"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-10}). method = ""HF""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()). # Vpot builder; _, wfn_V = psi4.energy(""SVWN"", return_wfn=True, molecule=mol); Vpot = wfn_V.V_potential(). points_func = Vpot.properties()[0]. # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()). # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :lpos.shape[0]]. # Build a local density; localDa = wfn.Da().np[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(nelectrons); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428:154,integrat,integration,154,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428,6,['integrat'],"['integrate', 'integration']"
Integrability,"Sorry, I overlooked that statement in your original message. Note to self: learn to read bug reports more carefully in future",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311746162:52,message,message,52,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311746162,2,['message'],['message']
Integrability,"Sorry, I’m out of action due to serious illness so probably can’t be much help. I was working on derivatives but they were buggy. They should in theory be simple, but I don’t know when I’ll be in a position to get back to them. Sorry again :/. > On 7 Nov 2018, at 21:23, Andy Simmonett <notifications@github.com> wrote:; > ; > Description; > ; > This PR builds on the start that @PeterKraus made to get the libecpint library from @robashaw up and running as Psi4's ECP engine.; > ; > Todos; > ; > Notable points (developer or user-interest) that this PR has or will accomplish.; > ; > Improve the speed and stability of the ECP integrals.; > Questions; > ; > @robashaw are the derivative integrals ready to go in Libecpint yet? If not, do you have any idea how much work it will be to implement them?; > Checklist; > ; > Make libecpint play nicely with our CMake infrastructure; > Write wrappers for ECP integral code, making the new code path optional for now; > Tests added for any new features; > Status; > ; > Ready for review; > Ready for merge; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/1340; > ; > Commit Summary; > ; > Import libecpint via CMake; > File Changes; > ; > M CMakeLists.txt (3); > M external/upstream/CMakeLists.txt (1); > A external/upstream/libecpint/CMakeLists.txt (57); > M psi4/CMakeLists.txt (9); > M psi4/psi4Config.cmake.in (2) ; > Patch Links:; > ; > https://github.com/psi4/psi4/pull/1340.patch; > https://github.com/psi4/psi4/pull/1340.diff; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-439512371:887,wrap,wrappers,887,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-439512371,2,['wrap'],['wrappers']
Integrability,"Sorry, didn’t mean to question the need for -fopenmp to compile the openblasusing program. Just concerned about this quote. . “AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with USE_OPENMP=1. This disables the native/pthreads parallelism, and uses OMP instead, this way you get thread safety and nested parallelism should also work.“. If that’s true and if other programs rely on openblas native threading, then the conda openblas can never be used for psi even after PR and rebuild. . Whereas if USE_OPENMP=1 only adds capabilities, there’s a plan forward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390229801:191,rout,routines,191,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390229801,1,['rout'],['routines']
Integrability,"Sounds good! @susilehtola's diagnosis of a badly behaved numerical functional sounds viable to me. He's more knowledgeable about how to treat such situations than I am. And yes, I'm starting to think I should amend the ADIIS/EDIIS error message to explicitly mention that something else is the usual culprit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748955323:237,message,message,237,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748955323,1,['message'],['message']
Integrability,"Status update on this, including developments from half an hour ago. Numerical tests indicate the difference in reaction energies between the current DF scheme and the new one are negligible. The Excel file is attached if anybody wants to look over the numbers themselves. @ssh2 and I are agreed that between that and some additional theoretical points, we'll just switch the density fitting scheme to fix Point 2. In the new scheme, the cumulant gets contracted against RIFIT integrals as before, and the _entire_ rest of the 2RDM gets contracted against JKFIT integrals. [df_dcft_comparison.xlsx](https://github.com/psi4/psi4/files/3023032/df_dcft_comparison.xlsx). Point 1 is trickier. I've spoken with @jturney about DF gradients in Psi. Although `deriv.cc` does a check to see if the wavefunction is density fitted in the gradient code, it isn't for density fitted gradients but to check whether necessary tensors exist on disk or as member variables. As far as I know, every DF gradient in Psi runs through its own module. DF-MP2 gradients have `dfmp2`, DF-SCF has `scfgrad`, and Bozkaya has `dfocc`. This will require some attention, but likely won't get it until after ACS Orlando.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331:452,contract,contracted,452,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331,2,['contract'],['contracted']
Integrability,Storage of contraction coefficients,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3038:11,contract,contraction,11,https://psicode.org,https://github.com/psi4/psi4/issues/3038,1,['contract'],['contraction']
Integrability,"Stupid question, you do reuse integrals on the same shell, don't you? As in J. Chem. Phys. 2003, 118, 9481. The other issue is that for Cr2 the integrals are horribly slow probably because the integrals engine isn't taking advantage of the general contraction. E.g. cc-pVDZ is [20s16p8d2f|6s5p3d1f] for Cr so you'll end up doing a whole lot of extra work to get those integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224448359:248,contract,contraction,248,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224448359,1,['contract'],['contraction']
Integrability,Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505108492:134,rout,routines,134,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505108492,1,['rout'],['routines']
Integrability,"Summing up discussion from the conference call on Wednesday:; * This is a non-trivial bug to fix. The easy fix of removing `psio_` from the wavefunction won't work from DFOCC, as that is how DFOCC gets some of its integrals.; * DGAS is generally uneasy with changes to the wavefunction specification. The current plan is to put actual error messages instead of segfaults for the four aforementioned modules and leave this aside, otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851#issuecomment-608613470:341,message,messages,341,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-608613470,1,['message'],['messages']
Integrability,"Sure, I'm ok with that modification. On Fri, Feb 26, 2016 at 2:24 PM, Lori A. Burns notifications@github.com; wrote:. > If the above works, and you think it'd be helpful, I can edit; > https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to; > something like; > ; > ```; > elif reference == 'ROHF':; > if mtd_type == 'CONV':; > if module == 'DETCI': # no default for this case; > func = run_detci; > elif module in ['']:; > psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282#issuecomment-189441001.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189441755:584,rout,route,584,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441755,1,['rout'],['route']
Integrability,Synchronize DFT Psivars,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2477:0,Synchroniz,Synchronize,0,https://psicode.org,https://github.com/psi4/psi4/issues/2477,1,['Synchroniz'],['Synchronize']
Integrability,TDDFT Not Triplet Spin-Integrated,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2841:23,Integrat,Integrated,23,https://psicode.org,https://github.com/psi4/psi4/issues/2841,1,['Integrat'],['Integrated']
Integrability,TDSCF psithon interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885:14,interface,interface,14,https://psicode.org,https://github.com/psi4/psi4/pull/1885,1,['interface'],['interface']
Integrability,"Tagged `action-items-needed`. It isn't clear to me if there's anything that needs to be changed in `libmints`, or if we're just going to tell users to use the ddCOSMO interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-869213120:167,interface,interface,167,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-869213120,2,['interface'],['interface']
Integrability,"Technically, the problem is in the DFOCC module, not the OCC module. Thoughts, @bozkaya? The part that grabs my attention is the line `Memory requirement for CC contractions: -49826.57 MB`. Somehow, I doubt that negative memory is accurate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-560949511:161,contract,contractions,161,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-560949511,1,['contract'],['contractions']
Integrability,"Tensor2d::lineq_pople` (PR #2684); - [x] Delete unused function overloads from `libmints`: `Matrix::diagonalize` (PR #2693); - [x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2177,wrap,wrapper,2177,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,Test #314: sapt4 ............................ Passed 176.27 sec; Start 31: cc16; 15/401 Test #113: dcft8 ............................ Passed 344.19 sec; Start 275: opt14; 16/401 Test #354: tu6-cp-ne2 ....................... Passed 347.59 sec; Start 41: cc26; 17/401 Test #110: dcft5 ............................ Passed 355.89 sec; Start 276: opt-irc-1; 18/401 Test #112: dcft7 ............................ Passed 358.91 sec; Start 90: cepa-module; 19/401 Test #164: dft1 ............................. Passed 106.51 sec; Start 96: cisd-opt-fd; 20/401 Test #223: mp2-def2 ......................... Passed 82.85 sec; Start 28: cc13d; 21/401 Test #42: cc27 ............................. Passed 392.24 sec; Start 44: cc29; 22/401 Test #75: cc7 .............................. Passed 394.89 sec; Start 47: cc31; 23/401 Test #275: opt14 ............................ Passed 76.63 sec; Start 368: dft-custom-mgga; 24/401 Test #174: fsapt1 ........................... Passed 424.29 sec; Start 19: cbs-xtpl-wrapper; 25/401 Test #276: opt-irc-1 ........................ Passed 89.12 sec; Start 316: sapt6; 26/401 Test #17: cbs-xtpl-opt ..................... Passed 104.19 sec; Start 114: dcft9; 27/401 Test #40: cc25 ............................. Passed 450.80 sec; Start 179: isapt2; 28/401 Test #36: cc21 ............................. Passed 451.45 sec; Start 69: cc52; 29/401 Test #96: cisd-opt-fd ...................... Passed 87.68 sec; Start 74: cc6; 30/401 Test #368: dft-custom-mgga .................. Passed 62.73 sec; Start 200: frac-ip-fitting; 31/401 Test #19: cbs-xtpl-wrapper ................. Passed 62.39 sec; Start 166: dft1-alt; 32/401 Test #90: cepa-module ...................... Passed 125.09 sec; Start 343: sapt-dft2; 33/401 Test #236: ocepa-freq1 ...................... Passed 489.86 sec; Start 58: cc41; 34/401 Test #179: isapt2 ........................... Passed 46.85 sec; Start 366: dft-custom-dhdf; 35/401 Test #316: sapt6 ............................ Passed 72.26 sec; Start 11: cbs-de,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:3011,wrap,wrapper,3011,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['wrap'],['wrapper']
Integrability,"Test case 32 from the FH51 subset of [GMTKN55](http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/FH51ref.html) computes the isomerization energy between H2C-C5-CH2 and heptatriyne. So as to not to bury the lede: very strange energies result when running H2C-C5-CH2 with wB97X-3c, which I suspect are tied to this message:. ```; !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!; ``` . The energy of H2C-C5-CH2 is computed to be -43.4074821405164926 Eh, and the energy of heptatriyne is computed to be -42.0459519798808898, leading to a predicted ∆E of -854 kcal/mol. The ""correct"" high-level value is -14.30 kcal/mol, and the authors of the wB97X-3c paper report an energy of -13.17 kcal/mol for this system. Similar results are seen when using B3LYP-D4/vDZP or r2SCAN-D4/vDZP, suggesting that vDZP is the common factor here. The orbital occupancies for H2C-C5-CH2 do seem a bit odd to me? I'm not used to seeing such low-energy virtual orbitals... ```; Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -1.094498 2A -1.062498 3A -1.041834 ; 4A -1.016695 5A -0.963137 6A -0.898331 ; 7A -0.834072 8A -0.703197 9A -0.700832 ; 10A -0.661618 11A -0.660116 12A -0.605235 ; 13A -0.596357 14A -0.526703 15A -0.507419 ; 16A -0.419207 . Virtual: . 17A -0.218606 18A -0.112811 19A -0.091525 ; 20A 0.037195 21A 0.048637 22A 0.051338 ; 23A 0.054059 24A 0.105612 25A 0.106004 ; 26A 0.174431 27A 0.193680 28A 0.196900 ; ```. Not sure what ECP factors could be driving these issues, or how to fix this, but thought I should raise an issue. Here's all the input and output files:. Input file for H2C-C5-CH2:; ```; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:322,message,message,322,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['message'],['message']
Integrability,"Testing if I can still send messages. This PR has shiny new features, by the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627#issuecomment-282393960:28,message,messages,28,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-282393960,1,['message'],['messages']
Integrability,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195957592:333,message,message,333,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592,3,['message'],['message']
Integrability,"Thank you for bring this to our attention! I was also able to recreate the bug using your example. I looked into it a little bit, and found something interesting. Particularly, it seems the presence of randomness is dependent on the size of the basis set. When one switches the basis set in your minimal example from STO-3G to STO-6G:. ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/sto-6g',; ```. One seems randomness in the final answer, but to a decreased amount:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.18948320502566343; -0.18948320502566343; -0.19856521894753998; -0.18948320502566343; -0.18948320502566343; -0.3347954277756876; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; ```. That said, the answer PK commonly converges to here seems wrong anyway, as using DIRECT leads to an answer of -0.47102563660383534 h, and DF leads to the close answer of -0.4711430783826256 h. . When switching to the 3-21G basis set:; ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/3-21g',; ```. Everything seems to look good:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element ; 1 --multiplicity 2; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; ```. Consistent answers, and closely matching the DIRECT energy of -0.4964017399788503 h. These findings lead me to suspect that the issue you pointed out here is due to PK having issues handling calculations with extremely small basis function counts. Regardless, I shall look into this more. Thank you again for bringing this to our attention!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896:216,depend,dependent,216,https://psicode.org,https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896,1,['depend'],['dependent']
Integrability,"Thank you for fixing the gradient routines. Having PSI4 gradients will be really helpful. I am calling PSI4 in my QMMM calculations, so I will run through some of my pre-made test cases and look at extern1 to confirm that I am doing everything correctly. Thanks,; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184#issuecomment-156224641:34,rout,routines,34,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156224641,1,['rout'],['routines']
Integrability,Thank you for the explanation! I really like how dependencies become more explicit (greppable).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276181143:49,depend,dependencies,49,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276181143,1,['depend'],['dependencies']
Integrability,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55#issuecomment-40186517:582,message,message,582,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,Thank you. The input came from an xyz file sent to me and I hadn't thought to check it for errors.; But that psi4 error message would be much more helpful if translated into intelligible English.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910170283:120,message,message,120,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910170283,1,['message'],['message']
Integrability,"Thanks @PeterKraus, I'm pretty sure I was also trying all the guess algorithms but probably with the basis_guess also - annoying... -and that is probably the root of the problem -> basis_guess from non-ECP to ECP basis set. (@PeterKraus I have sent you a PM on forum.psicode.org on related/unrelated stuff, as there is no message option here on github?!?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432532178:322,message,message,322,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432532178,1,['message'],['message']
Integrability,"Thanks @andysim, I can do that name change. And I think the ""strictly Cartesian"" is still true. This is the way they are used in `psipcm.cc`:; ```; if (basisset_->has_puream()) {; D_carts = std::make_shared<Matrix>(""D carts"", basisset_->nao(), basisset_->nao());; D_carts->back_transform(D, my_aotoso_);; } else; D_carts = D;. ContractOverDensityFunctor contract_density_functor(ntess_, tess_pot_e_, D_carts);; // Add in the electronic contribution to the potential at each tessera; potential_int_->compute(contract_density_functor);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878#issuecomment-351198084:327,Contract,ContractOverDensityFunctor,327,https://psicode.org,https://github.com/psi4/psi4/pull/878#issuecomment-351198084,1,['Contract'],['ContractOverDensityFunctor']
Integrability,"Thanks @loriab for your detailed answer. In fact, I would like to do focal-point analyses for small molecules (including HF, MP2, CC, DBOC, and relativistic corrections) in a somewhat automated form. Psi4, which is able to execute MRCC and CFOUR, seems to me an optimal frame for this purpose (I saw that certain FPA schemes are already implemented in it). . The Psi4/Cfour route looks simpler for me. Basically I will use Cartesian coordinates, but in some cases it would be useful to do CCSD(T) optimizations via CFOUR (requiring internal coordinates). How to execute the solution you posted with Psi4? I tried to put it into a file `test.dat` and run `psi4 test.dat`, but -- after correcting the possible typo [`atomic_result.dict()` instead of `atomicresult.dict()`], I received the following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:374,rout,route,374,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,2,['rout'],['route']
Integrability,"Thanks Daniel! I looked at the changes and couldn't imagine what was; causing this. I'll follow your suggestion. Best,; Nick. On Wed, Nov 30, 2016 at 11:13 PM, Daniel Smith <notifications@github.com>; wrote:. > This is actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074858:879,message,message,879,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858,1,['message'],['message']
Integrability,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185833831:131,interface,interfaces,131,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831,1,['interface'],['interfaces']
Integrability,"Thanks for a clear exposition of the problem. This is one that will be fixed as part of the in-progress integral overhaul. At one point we had a relatively slow integral transformation routine (which has since been sped up) and I experimented with a flag to allow the AO->SO transformation to incorporate the Cartesian->pure transformation also. That's what the `force_cartesian_` member of the integral code is for. Given that the transformation is no longer a performance concern in the integral code, the `include_pure_transform_` machinery will be remove and the petite list will only handle unitary AO->SO transformations, as originally intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075:185,rout,routine,185,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075,2,['rout'],['routine']
Integrability,"Thanks for fixing that one! I have found another however which comes up when I request to save all wavefunction properties via QCEngine using the latest dev version of psi4, here is the error message.; ```; QCEngine Input Error: Traceback (most recent call last):; File ""/Users/joshua/miniconda3/envs/psi4/lib//python3.8/site-packages/psi4/driver/schema_wrapper.py"", line 410, in run_qcschema; ret = qcel.models.AtomicResult(**ret_data, stdout=_read_output(outfile)); File ""pydantic/main.py"", line 274, in pydantic.main.BaseModel.__init__\npydantic.error_wrappers.ValidationError: 1 validation error for AtomicResult\nwavefunction -> occupations_a; Return quantity scf_occupations_a does not exist in the values. (type=value_error); ```. I think this is related to the lines here which pulls out the occupations which have been commented out I am not sure if these simply need to be uncommented or if there is some formatting that needs to be worked out https://github.com/psi4/psi4/blob/670a85012a2864dd6673ac4a39243156205c500e/psi4/driver/schema_wrapper.py#L344. ccing @dgasmith in case he knows the status of this. @hokru could you please re-open this issue or should I make a new one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1987#issuecomment-719726946:192,message,message,192,https://psicode.org,https://github.com/psi4/psi4/issues/1987#issuecomment-719726946,2,['message'],['message']
Integrability,"Thanks for helping with that, Lori. I think the CMake and libmints integration tasks are pretty well separated at this point. The stuff I added to external was mostly placeholder so please overwrite at will - you have write access to my branch. It looks like some upstream changes to the CMake config file naming scheme might be needed, so I just decided to build a standalone lib and worry about integration later - therefore you won't be interfering with anything if you feel like changing the CMake stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421:67,integrat,integration,67,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421,2,['integrat'],['integration']
Integrability,"Thanks for looking into it. It looks like none of these involve `Array2d::diagonalize`, so this PR is good on that front. This PR does not touch `Matrix::diagonalize`, so those calls are safe from it. But, some `Tensor2d::diagonalize` calls would indeed fail after this PR. I think the easiest option here is to back out the removal of `Tensor2d::diagonalize` overloads for now. FYI, my plan was to _eventually_ change the function signature of `Tensor2d::diagonalize` after this PR. The `init_dim` and `cutoff` arguments have been defunct (as in no-op, unused) for ages. But that can wait until dfocc is no longer in such flux, I can excise `sq_rsp` while keeping the current interfaces.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2684#issuecomment-1500354378:677,interface,interfaces,677,https://psicode.org,https://github.com/psi4/psi4/pull/2684#issuecomment-1500354378,1,['interface'],['interfaces']
Integrability,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:142,integrat,integration,142,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,9,"['depend', 'integrat']","['depends', 'integrate', 'integration']"
Integrability,"Thanks for tackling these Python 2 vs. 3 issues. The python driver is the least computationally expensive portion of a given psi4 calculation, so I think we're ok with conversion to items and values and a uniform interface to 2 and 3. On your earlier question of patch format, the psi4/psi4release repo isn't so much a repo as a history-less presentation of the code. We can merge in your pull request, but the more important merge will be to the private psi4/psi4 repository. So, the answer is e-mail or pull request will do very well, especially for simple patches. If you should be interested in doing more, see http://psicode.org/developers.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20536164:213,interface,interface,213,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20536164,2,['interface'],['interface']
Integrability,"Thanks for testing!. The `No such TARGET` messages are nothing to worry about. I have it printing every language, but only the active/requested langs become part of `tgt::MathOpenMP`. Whoops on ambit. I must have been building with intel again. If you would, try adding https://github.com/psi4/psi4/blob/master/external/upstream/chemps2/CMakeLists.txt#L50 and https://github.com/psi4/psi4/blob/master/external/upstream/chemps2/CMakeLists.txt#L55 lines to https://github.com/psi4/psi4/blob/master/external/upstream/ambit/CMakeLists.txt . Unfortunately, the only way to test it running is to build the ambit template plugin. But just compiling is a start. For gpu_dfcc, I've built it with gcc54 and the rest of psi with gcc72. But there's no reason a pure gcc54 build shouldn't work. Fortunately, conda supplies both. I'm glad to tweak gpudfcc openmp if need be. I can only build, not run, so the setup may be lacking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400340712:42,message,messages,42,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400340712,1,['message'],['messages']
Integrability,"Thanks for the MVS bug fix, @susilehtola. I'll pull it over when it gets merged on GL. And for the tag, too. It'll be nice to have a one that includes Daniel's python interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383599351:167,interface,interface,167,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383599351,1,['interface'],['interface']
Integrability,"Thanks for the PR, Erica! I pushed some lines to the Azure CI so that einsums is enabled and your code has a chance of running :-) . It won't always be this ugly -- ultimately Einsums will be req'd. There's also a blas dependency detail (mkl=2022 vs. 2023) I need to work out to get rid of that openblas pkg.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-1862153818:219,depend,dependency,219,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-1862153818,1,['depend'],['dependency']
Integrability,"Thanks for the bug report! I knew there was no way I got that thoroughly right. Add `message(STATUS ""Detecting MathOpenMP -- ?OpenMP=${ENABLE_OPENMP}, ?MKL=${isMKL}, CXX=${CMAKE_CXX_COMPILER_ID}"")` near the top of https://github.com/psi4/psi4/blob/master/external/common/lapack/FindMathOpenMP.cmake and also uncomment the debug printing at the end of that file. Rerun the cmake to generate a fresh objdir and start the build, but no need to let it go past compiling the first psi4 dir. Post the sections like you did above, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396713304:85,message,message,85,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396713304,1,['message'],['message']
Integrability,"Thanks for the bug report. What's _happening_ is that test 243 is testing an eigenvector compute routine. The phase is non-deterministic, so the test does postprocessing on the phase. Due to an error in the test itself, the phase postprocessing was not done on the first row, causing the incorrect sign. tl;dr: Your Psi compilation is fine. The test was buggy. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061:97,rout,routine,97,https://psicode.org,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061,1,['rout'],['routine']
Integrability,Thanks for the clarification! Revising the error message should reduce confusion.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577#issuecomment-1126191477:49,message,message,49,https://psicode.org,https://github.com/psi4/psi4/issues/2577#issuecomment-1126191477,1,['message'],['message']
Integrability,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:57,wrap,wrapping,57,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058,4,"['message', 'wrap']","['message', 'wrap', 'wrapping']"
Integrability,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-35465591:264,wrap,wrapper,264,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591,4,['wrap'],['wrapper']
Integrability,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:290,message,message,290,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['message'],['message']
Integrability,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/383#issuecomment-220698751:149,depend,depends,149,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751,1,['depend'],['depends']
Integrability,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:435,rout,routing,435,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,3,"['depend', 'rout']","['dependencies', 'depending', 'routing']"
Integrability,"Thanks for the quick replies/bug fixes!. @susilehtola - we have indeed had our eye on integrating libxc, but it's coming down to manpower/tech debt issues right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2206#issuecomment-870877291:86,integrat,integrating,86,https://psicode.org,https://github.com/psi4/psi4/issues/2206#issuecomment-870877291,1,['integrat'],['integrating']
Integrability,"Thanks for the reply and suggestions @loriab !. > Good, thanks!; > ; > Assuming [this is the log](https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=i386&ver=1%3A1.2.1-1&stamp=1546604357&raw=0) to look at, a few comments:. It's the ia32 (32bit) build, the x86_64 one is here:; https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=amd64&ver=1%3A1.2.1-1&stamp=1546603567&raw=0. > * no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`). Thanks, I thought I had removed them already. > * psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`). It is using python3, this must be some indirect dependency which I can do nothing about.; ; > * production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8. OK, I will look into that. > * I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`). Hrm right, I will take another look at building the manual, thanks for pointing that out. > * threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270. Ok, I'll try to run that during bulid as well. > * Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`). That one is likely due to 32bit: `tests/options1/input.dat` tried to allocate more than 4 GB in the last two attempts in the `check set_memory() wrapper` test; the same applies to `json-v11-energy` and `json_data[""memory""] = ""5GB""`. . So those a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762:716,depend,dependency,716,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762,1,['depend'],['dependency']
Integrability,"Thanks for the report. I imagine the problem is that we (@zachglick) [changed the relevant constructor a few months back to have a default boolean argument](https://github.com/psi4/psi4/commit/85ce7af9c23d0280946e2040967e12bcd6ab3f01#diff-c513bb8f4c4e0c8ba6348974ebff6db2L182-R182). objdump tells me Psi exposes a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double, bool)` symbol, and your error message is looking for a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double)` symbol. I'm surprised that adding a default argument would force other programs to supply a value, but I'll leave this to somebody more experienced in the ways of plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270:409,message,message,409,https://psicode.org,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270,1,['message'],['message']
Integrability,"Thanks for the report. You're right, dependency handling in that l2 fork is lacking. I think I've finally got dependencies straight in the successor to the fork https://github.com/evaleev/libint/pull/233/files#diff-8e69ff48dd421c27038dafc327ded859e9be46b2e1aecec070d8b263a7b03d02R266 . Note that depending on how you build the l2 library, those boost headers may be bundled with it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2427#issuecomment-1032300043:37,depend,dependency,37,https://psicode.org,https://github.com/psi4/psi4/issues/2427#issuecomment-1032300043,3,['depend'],"['dependencies', 'dependency', 'depending']"
Integrability,"Thanks for the response. I will try out conda install again. . In the meantime, I want to explain why I turned to #2024. ; I encounter this issue while installing just normal psi4: (this is from mamba install); ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```. How I get to this point: ; First I used `conda install psi4 -c psi4`, but it will throw me this errors. (nothing is conflicting?) So I turned to `mamba` to help me with the conflicts. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions; ```. This is what mamba got back to me if I installed the normal build. `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires chemps2 >=1.8.10,<1.8.11.0a0, but none of the providers can be installed; ```. So then I tried to install `chemps2`, this can be installed normally. . Then I tried mamba to install psi4 again. . `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires libgfortran >=3.0.1,<4.0.0.a0, but none of the providers can be installed; ```. Lastly, I tried to install libgfortran, but resulted in the above message. ; ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496:1847,message,message,1847,https://psicode.org,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496,1,['message'],['message']
Integrability,"Thanks for the response. Psi is no stranger to forking our dependencies to fit our needs. Remember that one of our requirements is ease of use. For example, let's take our `dfmp2` code. We need to store over 18 different intermediates on disk, most of which are meaningless outside of the context of DFMP2. Needing to have a JSON file listing all intermediates, and making sure that the intermediate names of different modules don't clash, are problems we don't have in the current code, and introducing those make ease-of-use more complicated. That said, I see the merit in having a unified listing of all intermediates, at least on a per-module level. I'll think more about this, and of course, I can only speak for myself, not all Psi core developers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396175430:59,depend,dependencies,59,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396175430,1,['depend'],['dependencies']
Integrability,"Thanks for the suggestion. This is going to have trouble as-is because `driver` is under schema control https://github.com/MolSSI/QCElemental/blob/master/qcelemental/models/common_models.py#L57-L70 . Do you have this working locally? Could you be running `psi4 --json` rather than `psi4 --qcschema`? The former is an old but still supported route that undergoes fewer checks, iirc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328#issuecomment-946912359:341,rout,route,341,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-946912359,1,['rout'],['route']
Integrability,"Thanks for the swift response from both of you. `set tpdm true` combined with the `get_tpdm` function gets the TPDM as a matrix into Python, which is what I need for my use case. (The map from matrix indices to orbital indices would also be nice, but I think I can dig that up myself.) So this isn't blocking me anymore, and there shouldn't be much ""digging into details"" of DETCI required!. I think the primary question is if we want to have a `detci` dirty mode or not, and if so, how much information it should keep. The other action item is to have an error message instead of the segfault, but I can do that myself, now that I have more context on expected DETCI operation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586435576:562,message,message,562,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586435576,1,['message'],['message']
Integrability,"Thanks for the tip. Would you elaborate on ""Don't include any commit; already pushed to a central server"" a quote from the link you sent? Would; I need to cancel the pull request, then go ahead and push the squashed; version to my fork, then reinitiate the pull request?. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Fri, Jan 29, 2016 at 4:19 PM, Daniel Smith notifications@github.com; wrote:. > As a note this is a perfect example where you probably want to squash; > commits so that the git history is more understandable. A quick rundown; > would be something like the following:; > ; > git rebase -i HEAD~5; > Change the commits that you no longer want from pick to squash, save the; > file.; > ; > See here; > https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages; > for more information.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/228#issuecomment-176995836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/228#issuecomment-177002304:853,Message,Messages,853,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-177002304,1,['Message'],['Messages']
Integrability,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252802760:258,depend,dependency,258,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760,7,"['depend', 'message']","['dependency', 'message']"
Integrability,"Thanks for this!. Mimicking is the right thing to do here. We encode irreducible representations into bitstring so that the nonzero blocks of our matrix are exactly those with the property `row_irrep ^ col_irrep ^ symmetry_ = 0`. As a consequence, `A ^ B = C`. The check itself looks correct to me, and this is a huge improvement. For the sake of debug information, I'm tempted to ask for calls to `rowspi().print()` and `colspi().print` on all three matrices involved before the error message appears. I'd also like if the error message included the symmetries of all three matrices and the particular Ha that created the problem. Susi, what do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1262315350:486,message,message,486,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1262315350,2,['message'],['message']
Integrability,"Thanks for trying out Psi4 and the Psi4/Cfour interface, @tobirolinew. I can probably fix your immediate problem, but please read on. :-). There's three ways of running a Cfour calc through a more flexible front-end right now:; * QCEngine (already present in a Psi4 installation. takes a dictionary as input. geometry must be in Cartesians.); * QCDB (extra install. depends on QCEngine. inputs look much like Psi4/Cfour only `psi4.` becomes `qcdb.`. can use Z-Matrices.); * Psi4/Cfour (the first in time of these three. what you're trying now.). I'm trying to deprecate this last one in favor of the better maintained first ones. Your job would look something like the below through QCEngine (code below not tested). ```; import psi4; import qcengine as qcng. h2o = psi4.geometry(""""""; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; """"""). atomicinput = {; ""driver"": ""energy"",; ""molecule"": h2o.to_schema(dtype=2),; ""model"": {; ""method"": ""ccsd(t)"",; ""basis"": ""aug-pvqz"",; },; ""keywords"": {; ""SCF_CONV"": 12,; ""CC_CONV"": 12,; },; }. atomicresult = qcng.compute(atomicinput, ""cfour""). import pprint; pprint.pprint(atomic_result.dict()); ```. What types of calcs are you ultimately looking to run? How would you like to proceed: the QCEngine or Psi4/Cfour route? Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883:46,interface,interface,46,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883,3,"['depend', 'interface', 'rout']","['depends', 'interface', 'route']"
Integrability,"Thanks for waiting. I've had a lot to do lately. Psi4 isn't interpreting your input file like you intended. Psi4 1.4 will contain an error message indicating something is an amiss. The first issue is that you never actually create a molecule in the input fragment you gave me. Maybe you account for this in the full script, but if you don't, supply your string to the function `psi4.geometry`. The second issue is a deeper one. Psi interprets all singly-occupied orbitals as alpha orbitals, so Psi sees your input file and thinks you want a singlet with two unpaired alpha electrons. That's physical nonsense, so Psi4 will (in an error message we added in 1.4) complain and refuse to proceed. In 1.3, it will not be smart enough to realize an issue, proceed, and potentially give nonsense. Of course, what you want is a singlet diradical ROHF state, with an unpaired alpha electron and an unpaired beta electron in each determinant in your linear combination. I know how to tell Psi you want a singlet, but I'm not aware of any way to further specify that you want a singlet diradical ROHF state. Is there a reason why you need the diradical to be the starting point for your CASSCF?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-641504469:139,message,message,139,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641504469,2,['message'],['message']
Integrability,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/227#issuecomment-175470082:628,interface,interface,628,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082,1,['interface'],['interface']
Integrability,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:49,integrat,integration,49,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759,3,['integrat'],"['integrate', 'integrated', 'integration']"
Integrability,"Thanks very much, @amjames! @loriab did a ton of heavy lifting to get them able to be integrated into the docs, so many thanks to her as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/637#issuecomment-284583309:86,integrat,integrated,86,https://psicode.org,https://github.com/psi4/psi4/pull/637#issuecomment-284583309,1,['integrat'],['integrated']
Integrability,"Thanks! It all looks good at first look-through. I'll integrate it with Psi4's build system tonight and report back any issues. * By the way, I think if you remove the LICENSE file (naming it something else or putting the info elsewhere), GitHub will auto-detect the LGPL-3.0 license, as in [this skeleton repo](https://github.com/loriab/licensetestrepo); * Is `Libint` the official upper/lowercasing from the project? Or just the branding casing? I'm not particular, but CMake only allows one casing, so I have to ask when I notice it changing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-298452280:54,integrat,integrate,54,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298452280,1,['integrat'],['integrate']
Integrability,"Thanks! fyi, if you include ""fixes #310"" in the commit message, it'll close the issue when the PR gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196683371:55,message,message,55,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196683371,1,['message'],['message']
Integrability,"Thanks!. * this is dimer - m1 - m2, and the monomer geometries are uniform, so what you're seeing is a big increase in inaccuracy for the dimer depending on if its extent is near or far. is that right?; * any idea about ""OptM3 with GC"" characteristics and how it relates to defgrid2 https://sites.google.com/site/orcainputlibrary/numerical-precision?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304#issuecomment-928273414:144,depend,depending,144,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-928273414,1,['depend'],['depending']
Integrability,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292#issuecomment-189992984:730,message,message,730,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984,1,['message'],['message']
Integrability,"Thanks, @j3mdamas, I had meant to cc mj-harvey and @susilehtola and forgot. Target release is probably our regional QC conference ~May 18. We're currently sending back responses to reviewers of the accompanying paper. Todo items are: building Mac plugins from conda distribution, updating some add-on integrations we promised in the paper, paper, relicensing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297866382:301,integrat,integrations,301,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297866382,1,['integrat'],['integrations']
Integrability,"Thanks, @jgonthier. Given that the Travis CI tests run every time somebody submits or merges a PR, we're going to be running that test a lot. If we don't see the problem again, it was probably just a strange artifact of the invalid read that was non-deterministic. If we keep seeing it after you have fixed that read, we probably just need to reduce the optimization level for that one routine. Either way, thanks for checking it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182875337:386,rout,routine,386,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182875337,1,['rout'],['routine']
Integrability,"Thanks, @rmcgibbo, it actually is standard practice to make a conda package of ""endorsed plugins"". I haven't gotten to that, but if you pre-approve, that's very helpful. :-). I also have a plan that even optional run-time dependencies (e.g., plugins) can be built at CMake superbuild-time with `-DENABLE_rt_dep=ON`. This is purely user-convenience since they're downstream of psi. Are you good with either/both of these options for SNS-MP2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-344708105:222,depend,dependencies,222,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344708105,1,['depend'],['dependencies']
Integrability,"Thanks, @susilehtola, but I patched up master earlier in the week to get things working, as the retweaking and py interface stuff were wrt master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-386621898:114,interface,interface,114,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-386621898,1,['interface'],['interface']
Integrability,"Thanks, I'll add that as it can ease detection. In this case it's not important as Libint2 only uses Python to process files for the Fortran interface and for some testing -- any Python will do there. https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805:141,interface,interface,141,https://psicode.org,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805,1,['interface'],['interface']
Integrability,"Thanks. Don't worry about pulling my changes into this tree--that sounds like it would unnecessarily complicate matters. I did (briefly) try my suggestion for format_kwargs_for_input and it didn't work out--the input parser does not like the binary format! An alternative is to use json rather than pickle. This works for the format_kwargs_for_input case (both python 2 and python 3 tests pass) but not for wrappers.py (db_func is a function, which json can't serialize by default, so pywrap-db2 still fails under python 3) and I have didn't look at the pickle use in text.py. As far as automated testing goes, I've found just testing the setups I use regularly gets most of the benefits (especially as some people are not great at running tests before committing!). I am a fan...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20634786:407,wrap,wrappers,407,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20634786,1,['wrap'],['wrappers']
Integrability,"Thanks. I haven't tackled Mac yet (or clang on Linux) on the conda revamp, but it's unlikely to be a problem. If I had built packages the canonical conda way (dynamic link _everything_), psi4 wouldn't have had this problem in the first place. Slowly all my ""tricks"" in the original psi4 binary (where python itself was practically the only non-static dependency) have been given up for good technical reasons in favor of system packages from the conda ecosystem. On Mac (clang), I never implemented those tricks in the first place, so it didn't hit this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-380133564:351,depend,dependency,351,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-380133564,1,['depend'],['dependency']
Integrability,"Thanks. I mainly wanted to get the discussion going. Slack can be used also in the browser. psi4 is very modular and having `adcc` as a fully optional dependency, c-layer or python-layer, is fine. The `psi4 plugins` (see http://psicode.org/psi4manual/master/prog_newcode.html) are independent of the psi4 code base, though can still use psi4's libraries. Examples would be `sns-mp2` or `v2rdm_casscf`. There you can basically do whatever you want. With python-layer integrations I mean that you add to the proper psi4 python code base. This is what you already did. http://psicode.org/psi4manual/master/proc_py.html; Check the managed method section for how multiple implementations of the same method are usually handled. You only need the `wfn` object?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286:151,depend,dependency,151,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286,2,"['depend', 'integrat']","['dependency', 'integrations']"
Integrability,"Thanks. We're planning to work on synchronizing `dfocc` back with the rest of Psi after the 1.6 release later this month, so I'm hopeful we can get this moving again. Depending on what my schedule looks like, I may be able to split this PR up so that we can get the `occ` part in, while we're waiting on `dfocc`. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077:34,synchroniz,synchronizing,34,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077,2,"['Depend', 'synchroniz']","['Depending', 'synchronizing']"
Integrability,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184429744:629,rout,routinely,629,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744,1,['rout'],['routinely']
Integrability,"That DFT interface hasn't changed in years, so I'm inclined to think it's a Boost version thing. A temporary workaround (if you don't need DFT) is to comment out in `driver.py`. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178857878:9,interface,interface,9,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178857878,3,"['Integrat', 'interface', 'rout']","['Integrate', 'interface', 'routines']"
Integrability,"That depends on the version. Fedora 28 has 4.0.5, Fedora 29 has 4.2.3, Fedora 30 might get the next version of libxc...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451101422:5,depend,depends,5,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451101422,1,['depend'],['depends']
Integrability,That depends on whether `integral_->electrostatic()` is threaded or not. But threading over grid points would probably be faster in this case.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1614#issuecomment-488006485:5,depend,depends,5,https://psicode.org,https://github.com/psi4/psi4/issues/1614#issuecomment-488006485,1,['depend'],['depends']
Integrability,That loop looks about as simple as it gets. What kills me is the loop structure ~10 lines above is nearly identical. Any error message on the crash?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368927971:127,message,message,127,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368927971,2,['message'],['message']
Integrability,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:842,depend,dependencies,842,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['depend'],['dependencies']
Integrability,"That was just stubs in case I ever got around to it. No significant code; along those lines was completed. -Rob. On Mon, Jul 13, 2015 at 3:35 PM, psi4 notifications@github.com wrote:. > We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were; > hopeful. Were we mistaken or was it not finished or not tested, or what’s; > the status.; > ; > Anyway ok, can re-route through Ugur’s code.; > ; > Lori; > ; > > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com; > > wrote:; > > ; > > No UHF-MP2 gradients in my code. Sorry.; > > ; > > -Rob; > > ; > > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com; > > <mailto:notifications@github.com>>; > > wrote:; > > ; > > > for df-mp2, these are the cases:; > > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > > rohf energy: we think this may be in Rob's code, but not verified vs; > > > other; > > > codes; > > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > > codes; > > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his; > > > omp2; > > > w/o subsequent opt; > > > ; > > > ticket task: verify the above with the code and with the authors. if; > > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > > anything looks to hard or want to defer, create a new ticket for it,; > > > and do; > > > all you can to close out this one.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/107 <; > > > https://github.com/psi4/psi4public/issues/107>>.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/107#issuecomment-121080590>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107#issuecomment-121081025.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121081364:368,rout,route,368,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081364,2,['rout'],['route']
Integrability,"That would make sense. Yeah, would be great if you could check this. On Oct 25, 2017 4:19 PM, ""Eugene DePrince"" <notifications@github.com> wrote:. > I recall that the restriction arises from an assumption I made about; > storage requirements. I think I was assuming that o^4 and o^3v arrays could; > be stored in a block of memory the size of t2, but I can’t be sure without; > looking through the code a bit. I’m not sure how difficult it would be to; > remove this restriction, but I will look into it.; >; >; > > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com>; > wrote:; > >; > > Well, yes, he relative sizes would effect efficiency of contraction; > order,; > > but I don't see why they would make the code not working at all... I; > > suppose this restriction is in there somewhere but I don't see why.; > >; > > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com>; > wrote:; > >; > > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > > <https://github.com/edeprince3> could it be that that nvirt > ndocc is; > an; > > assumption that's made in the contraction order? If nvirt < ndocc then it; > > might be more efficient to contract first over the occupied orbitals?; > >; > > —; > > You are receiving this because you were mentioned.; > >; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or; > mute; > > the thread; > > <https://github.com/notifications/unsubscribe-; > auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > > .; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub <; > https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute; > the thread <https://github.com/notifications/unsubscribe-; > auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; > >; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339460309:663,contract,contraction,663,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339460309,1,['contract'],['contraction']
Integrability,"That's a good idea, Peter. As far as I know, the XML stuff is only for the high level API, which we are not using. We still parse the basis sets with the same parser and use the same internal data structures - there's just a simple conversion to the library's data structures and then they are handed off. So your concern about duplicate basis set libraries is not a concern, but it would be nice to be able to disable the high level API at compile time, to remove the XML dependency. It's not a huge problem if not - the XML lib is easily obtained from conda forge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-804509150:473,depend,dependency,473,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-804509150,2,['depend'],['dependency']
Integrability,"That's great! I can see the log now, at least for the continuous-integration/Distelli link. Not the Disteli-CI link; that could just be the malformed URL causing a problem though. What's the difference between those hooks?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235419018:65,integrat,integration,65,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235419018,1,['integrat'],['integration']
Integrability,"That's indeed what I had in mind (in my third ansatz). Add a `qc_module` and a `select_adc` branching between `adcc` and the builtin. I guess one can just use `psi4.addons` in `select_adc` to query the availability of `adcc` before going into the branching. That was at least my idea so for. --. > Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?. You mean because it's not parallel at the moment? Yes, that's indeed a problem and was a deal breaker for some of the things we wanted to try in the past ... I have already discussed this with @maxscheurer and he promised to have a look once we have gotten a few other things out of the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180:323,rout,routine,323,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180,1,['rout'],['routine']
Integrability,"That's much clearer, thank you. The syntax seems good to me, but I vote for single access / multi storage. That prevents the syntax from getting unwieldy if we decide we need variables of types other than float and array. My main reason is that having different accessors feels like a clunky interface to me, especially for PsiAPI. Variable getting in PsiAPI should treat types like Python does, not C++.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485:292,interface,interface,292,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485,2,['interface'],['interface']
Integrability,"That's the merge of @loriab's new printing / running machinery into the existing master, which we expect to pass. What we need to see is 9c5d3c3 of this PR. It's not running because of merge conflicts (I only just noticed that error message), so you'll need to pull the master branch in and add the conflict resolution to the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183790721:233,message,message,233,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183790721,1,['message'],['message']
Integrability,"The ""nightly"" build `conda install psi4 -c psi4/label/dev` for Linux/WSL is published and should be compatible with numpy `1.16.3`. I looked in sns-mp2 and didn't see the `np.load` culprit, so should be fine, but please let me know if not. Yeah, the ""nightly"" build _is_ nightly (unless I forget to toggle it on), but it's also an extension of our CI system, so it's catching extra things (in this most recent halt -- the Hessian CPHF threshold) from more tests and ecosystem integration. So appears sporadic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610:476,integrat,integration,476,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610,1,['integrat'],['integration']
Integrability,"The ""one word"" in the terminal is probably a system message that psi4 was killed off for some reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-924958424:52,message,message,52,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-924958424,1,['message'],['message']
Integrability,"The ""other"" lebedev_mapping_: That's just the declaration for it. The problem is that `SphericalGrid::build` is a _static_ method so the; constructor isn't called when that happens. Someone might yank out the; `new` there and still statically access `lebedev_mapping_` and we are back; where we started. There's no guarantee of construction, so I stapled it; into the one place it's actually used. (And, again, I don't understand why it's used at all as it never seems to; show up downstream). Even if it was in the constructor though (which would fire on the _new_) it; would still need the mutex to ensure it's initialized once as; lebedev_mapping_ is also (purposefully) static. No sense doing the rebuild; of the map on every single object instantiation. On Wed, Oct 5, 2022, 4:59 AM Susi Lehtola ***@***.***> wrote:. > lebedev_mapping_ is a member of SphericalGrid, so initialize_lebedev(); > should be called in the constructor of SphericalGrid. No need to add; > mutexes etc.; >; > More worryingly, I also see another lebedev_mapping_ in cubature.cc; >; > https://github.com/psi4/psi4/blob/ac8f87a1dd3fdda2aabc3318713d6e5ce00e2c70/psi4/src/psi4/libfock/cubature.cc#L5065; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2736#issuecomment-1268150804>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JCEAMFQBY2H6OKMPYLWBU7NRANCNFSM6AAAAAAQ5DTWOY>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268457086:1493,Message,Message,1493,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268457086,1,['Message'],['Message']
Integrability,"The -D_GLIBCXX_ASSERTIONS has been added to the standard Fedora build flags starting from Fedora 28. This turns on cheap range checks for C++ arrays, vectors, and strings, see; https://fedoraproject.org/wiki/Changes/HardeningFlags28. After a lot of work, I was able to get the Fedora package updated to psi4 1.2.1 and package its new dependencies. However, the new, stringent build flags reveal some broken code in psi4. Could you build the code with -D_GLIBCXX_ASSERTIONS and fix all the crashing code?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1255:334,depend,dependencies,334,https://psicode.org,https://github.com/psi4/psi4/issues/1255,1,['depend'],['dependencies']
Integrability,"The 25 minute cap is a ctest cap that we control. The cap helps figure out if a test case is stuck in a loop or not. Cheers,; Daniel Smith. > On Feb 15, 2016, at 5:54 PM, David Sherrill notifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Jus",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184433294:894,rout,routinely,894,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294,1,['rout'],['routinely']
Integrability,"The 6-31G case runs fine in ~20 minutes on one core. I'll call it a; 'longtest' and check it in now.; -Rollin. On Mon, Feb 15, 2016 at 4:54 PM, David Sherrill notifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184432870:867,rout,routinely,867,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870,1,['rout'],['routinely']
Integrability,"The CMake variables were not the problem, the version number was. Apparently the one in `-c psi4/label/test` is 1.8.2 and not 1.8.3. But now, the compilation failed while building liboptions.cc with the following message: ; `cd /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/bin/icpc -DUSING_LAPACK_MKL -I/global/home/users/jgonthier/software/psi4/psi4/include -I/global/home/users/jgonthier/software/psi4/psi4/src -isystem /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/stage/usr/local/psi4/include -isystem /global/home/users/jgonthier/software/miniconda/include/python2.7 -isystem /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/mkl/include -xHost -qopenmp -O3 -DNDEBUG -fPIC -std=c++11 -o CMakeFiles/options.dir/liboptions.cc.o -c /global/home/users/jgonthier/software/psi4/psi4/src/psi4/liboptions/liboptions.cc; /global/home/users/jgonthier/software/miniconda/envs/gcc52/gcc/include/c++/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^`. As you can see I use Intel compilers 2016 with Intel MKL, in the GCC 5.2 conda environment. Could it be a problem with Intel compilers ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288525890:213,message,message,213,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288525890,1,['message'],['message']
Integrability,"The CheMPS2 interface is missing support for an additional input value for the parameter `DMRG_SCF_ACTIVE_SPACE`. According to [Psi4 documentation](http://www.psicode.org/psi4manual/1.2/autodoc_glossary_options_c.html#term-dmrg-scf-active-space-dmrg) it can be `INPUT`, `NO` and `LOC`, which map to `0`, `1` and `2` respectively for the variable `WhichActiveSpace_in` in [CheMPS2](https://sebwouters.github.io/CheMPS2/dmrgscfcalcs.html). However, `WhichActiveSpace_in` accepts an additional value of `3` for reordering orbitals without localization. This feature seems to have been introduced in https://github.com/SebWouters/CheMPS2/commit/79fb7c6f2b4cc2d628e5593fc8aa548c572a9e83.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1242:12,interface,interface,12,https://psicode.org,https://github.com/psi4/psi4/issues/1242,1,['interface'],['interface']
Integrability,"The DFT kernel was not threaded previously and now depends on the BLAS not threading itself automatically. If we roll back to 1.1 does the issue become better?. -Daniel Smith; Sent from my iPhone. . > On Jun 6, 2018, at 04:29, Peter Kraus <notifications@github.com> wrote:; > ; > To add to Lori's table from here, I've compiled the 1.2-rc2 tag against various blas/lapack combinations, and ran the dft-bench-ionisation test (wB97X-D, revTPSS, PW6B95, TPSS, PWB6K only):; > ; > 	N=1	N=4	N=1	N=4; > Psi4/1.2-rc2-acml-5.3.1	FAIL	 	 	 ; > Psi4/1.2-rc2-lapack-3.8.0	395.944	299.438	1.00	1.32; > Psi4/1.2-rc2 (1.2rc2.dev35)	268.523	223.574	1.47	1.77; > Psi4/1.2-rc2-blis-0.3.2	356.723	262.964	1.11	1.51; > Psi4/1.2-rc2-openblas-0.2.20	FAIL	 	 	 ; > Psi4/1.2-rc2-openblas-0.3.0	FAIL	 	 	 ; > All compiled with gcc-7.1.0, cmake-3.8.2, dftd3-3.2-r0.; > ; > ACML-5.3.1 is a binary.; > ; > Netlib's BLAS and lapack (3.8.0) compiled with -O3 -march=barcelona -fPIC and -O3 -frecursive -march=barcelona -fPIC respectively, including deprecated functions. I had to add -DENABLE_dkh=ON to the psi4 build options, otherwise the fortran compiler wouldn't get picked up.; > ; > The 1.2rc2.dev35 is a binary that was available in conda, compiled against mkl 2018.0.2, intel-openmp 2018.0.0.; > ; > Flame's blis-0.3.2 was compiled into netlib's lapack-3.8.0, with ./configure auto; lapack compiled as above.; > ; > OpenBLAS-0.2.20 was compiled with USE_THREAD=0 USE_OPENMP=0 TARGET=BARCELONA. OpenBLAS-0.3.0 was compiled with both make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32 and make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32 CFLAGS=""-fPIC -fopenmp -fstack-protector-strong"" FFLAGS=""-fPIC -fopenmp -fstack-protector-strong"" and linked using the .so and .a; it doesn't pass at all even with psi4 -n 1.; > ; > The node I used is a 2 x Quad-Core AMD Opteron(tm) Processor 2352, running up-to-date Debian 8.; > ; > —; > You are receiving this because you were mentioned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-395091290:51,depend,depends,51,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-395091290,1,['depend'],['depends']
Integrability,"The DFT section of the manual at http://www.psicode.org/psi4manual/master/dft.html as well as https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dft.rst contains references to RC1 in multiple places. Given that 1.0 has been released, I believe the manual should be updated in these parts..; ```; The spherical grids are rotated according to a common set of rules developed during the implementation of SG1. At the moment, the rules for tetrahedral, octohedral, and icosohedral systems are not complete, so there may be some ambiguity in the grid orientation for these systems. A complete grid orientation rule set will be available in RC1. Radial grid types are controlled by the DFT_RADIAL_SCHEME option, which at the moment may be either TREUTLER or BECKE, while the number of radial points are controlled by the DFT_RADIAL_POINTS option, which is any positive integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater radius of each atom, as described in Becke’s 1988 paper. If inaccurate integration is suspected in systems with anions or very diffuse basis functions, the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The MultiExp, Mura, and EM radial grids will be available in RC1. The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME option, which may be one of TREUTLER, BECKE, or NAIVE. The faster Stratmann weighting scheme is under development, and will be available in RC1.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/564:1025,integrat,integration,1025,https://psicode.org,https://github.com/psi4/psi4/issues/564,1,['integrat'],['integration']
Integrability,"The DSYEV problems might be due to the machine generated code in libxc returning NaNs. I still think it would be a good idea to clean these up within Psi4 if they arise, since not all functionals are well-behaving and ""fixing"" the functional amounts to using larger density / gradient thresholds. The B5050LYP issue boggles me. I did rewrite the routine to accept external parameters in October, but as far as I can see the resulting definition is exactly the same as before. The underlying functionals may have been regenerated, but that also should not affect anything. Could this be just an issue within Psi4, e.g. changes in the density-fitting routines or the fitting basis? One could just run the calculations with conventional integrals, since (h2o)2 is still small.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-602031298:346,rout,routine,346,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-602031298,2,['rout'],"['routine', 'routines']"
Integrability,"The Jensen _pc_ basis sets [1-7] are analogous to the Dunning _cc_ basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the _cc_ basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241120477:1004,wrap,wrapper,1004,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477,1,['wrap'],['wrapper']
Integrability,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299:573,rout,routes,573,https://psicode.org,https://github.com/psi4/psi4/issues/2299,1,['rout'],['routes']
Integrability,"The MCSCF printing and the NO are different routines (hence why `nat_orbs` was broken for MCSCF, but not CI). What kind of printing would you want here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/590#issuecomment-275767955:44,rout,routines,44,https://psicode.org,https://github.com/psi4/psi4/issues/590#issuecomment-275767955,1,['rout'],['routines']
Integrability,"The MRCC interface is a different case because:; 1. At the time it was coded, we had a developer who would volunteer to deal with it if requested.; 2. We had a well-defined use case where we already knew that adding the feature was the correct fix. Those are two special conditions, and there's a reason that there aren't other messages like the MRCC message in the Psi codebase!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068221472:9,interface,interface,9,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068221472,3,"['interface', 'message']","['interface', 'message', 'messages']"
Integrability,"The PSI4 (0.3.183, 5427c0a) gradient routine does not seem to be giving the correct values when an external field is defined using the QMMM module. I attached two test calculations:; 1) A water dimer with 1 water QM and the second represented as point charges. ```; memory 1 gb; set reference rks; set basis 6-31++G**; set guess sad; set scf_type df. molecule QMregion {; 0 1; O -0.778803000000 0.000000000000 1.132683000000; H -0.666682000000 0.764099000000 1.706291000000; H -0.666682000000 -0.764099000000 1.706290000000; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834,1.649232019048,0.0,-2.356023604706); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-3.799961446760); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-0.912085762652); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:37,rout,routine,37,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['rout'],['routine']
Integrability,"The ROHF Hessian isn't very stable, could be that CG isn't valid depending on the condition value of the Hessian.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716#issuecomment-530400897:65,depend,depending,65,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-530400897,1,['depend'],['depending']
Integrability,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/911:332,message,message,332,https://psicode.org,https://github.com/psi4/psi4/issues/911,1,['message'],['message']
Integrability,"The `--new-plugin` and `--new-plugin-makefile` generators are a really awesome idea. Unfortunately, they don't quite work properly with the latest conda binaries from `conda install -c psi4 psi4`, because the `Makefile` is generated with absolute paths to the build machine. For example, I get something like this setting the compiler and include directories in the generated makefile. I assume this works great on your cluster, but no to much on mine:. ```; # Flags that were used to compile Psi4.; CXX = /theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -O3 -no-prec-div -DNDEBUG; LDFLAGS = -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel -L/theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/usr/lib64 /theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/lib64/libpthread.so.0 /theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/lib64/libc.so.6; INCLUDES = -I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/home/rmcgibbo/miniconda/envs/2.7/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include; OBJDIR = /scratch/cdsgroup/conda-builds/work/build; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214:1489,interface,interfaces,1489,https://psicode.org,https://github.com/psi4/psi4/issues/214,1,['interface'],['interfaces']
Integrability,"The `MintsHelper::one_body_ao_computer` function is a helper routine for all one-body integrals to parallelize them. All of the overlap, potential, etc run through them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505191466:61,rout,routine,61,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505191466,1,['rout'],['routine']
Integrability,"The `cc` module [has](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis.cc) [a](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_RHF.cc) [habit](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_ROHF.cc) [of](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_UHF.cc) [rewriting](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cclambda/diis.cc) [DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccresponse/diis.cc) when they really should [just use `libdiis`.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libdiis/diismanager.h). In addition to code cleanup, I predict an important practical benefit. The central code uses Rob Parrish tricks to treat linearly dependent matrices. In my experience during the DIIS refactor, these often arise close to convergence. So by refactoring this, we can allow for effective DIIS even for tight convergence of the `cc` equations. I have [reason to believe](https://github.com/psi4/psi4archive/commit/2b2eb6c5a710dde180b1ef7a050012069afeae8d) this has a great to deal to do with anomalies in `cc55`. Don't even think about taking this until after #943 is closed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2519:784,depend,dependent,784,https://psicode.org,https://github.com/psi4/psi4/issues/2519,1,['depend'],['dependent']
Integrability,"The `dct` module does not seem to like linear dependencies. Example 1:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; s_tolerance 1e-3; }. energy('dct'); ```. The computation runs to completion and gives energies that are at least _plausible_. But the output file is littered with; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```; and `stderr` receives several MKL errors. Example 2:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; dct_type df; s_tolerance 1e-3; }. energy('dct'); ```. Using the DF code triggers a segfault. There may well be more examples I haven't found yet as I venture into other parts of the module. Either way, I'm going to be fixing this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2231:46,depend,dependencies,46,https://psicode.org,https://github.com/psi4/psi4/issues/2231,1,['depend'],['dependencies']
Integrability,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:238,depend,dependent,238,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204,1,['depend'],['dependent']
Integrability,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83124188:569,wrap,wrapper,569,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188,2,['wrap'],['wrapper']
Integrability,"The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046:110,depend,depends,110,https://psicode.org,https://github.com/psi4/psi4/issues/2046,2,['depend'],"['dependency', 'depends']"
Integrability,"The affected files are psi_start.cc, python.cc, and version.cc . One potential complication is that it has to be accessible before much else has started up in order to be a command-line option. After The Inversion might be a time to find a solution that won't need changing again in short order. The fact of the versioned_code target building first rather than last is, I think, just because it hasn't any dependencies, since it really only depends on `git describe`. If you want to tweak this to happen later, rather than sooner, go right ahead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239193115:406,depend,dependencies,406,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239193115,2,['depend'],"['dependencies', 'depends']"
Integrability,"The argument would go that the gradient is correct, but the optimizer gives a new geometry that is so unnatural that the SCF can't be easily converged. The optimizer determines the next step based on more than just the current gradient. It also depends on the coordinate system in which it conducts the optimization, which is what setting `opt_coordinates` would change. There are some other things to look for (like messages about being unable to backtransform coordinates), but adding new things to try is premature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257:245,depend,depends,245,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257,2,"['depend', 'message']","['depends', 'messages']"
Integrability,"The attempt at a coherent decision put basic methods `SCF_TYPE` and `MP2_TYPE` at `DF` among conv/df/cd-ness. And higher-order methods `MP_TYPE`, `CC_TYPE`, `CEPA_TYPE` at `CONV`. OMP2 is controlled by `MP2_TYPE`, so it should still be defaulting to density-fitted. Let me know if it's not. For the higher-order OMP3/OMP2.5/OCEPA(0), CONV and DF have the same reference and gradient capabilities. For higher-order non-oo, CONV tends to be more supported. If we set `MP_TYPE` or `CEPA_TYPE` at `DF`, then, at best, users will get different CONV or DF depending on mp2 vs. mp4 or cepa(0) vs cepa(3). Other route is to split off more `*_TYPE` options for the oo methods, whereupon they really start to proliferate. I rather prefer to keep the defaults as they are at present (omp2 df, others conv). But will go with consensus. This message is just the background info of implications.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/279#issuecomment-188499509:550,depend,depending,550,https://psicode.org,https://github.com/psi4/psi4/issues/279#issuecomment-188499509,3,"['depend', 'message', 'rout']","['depending', 'message', 'route']"
Integrability,"The authors' DM21 functional implementation has a PySCF interface, so you can already use PySCF to run calculations. Hooking it up to Psi4 will be a much bigger task, since unlike PySCF, Psi4 doesn't handle density functionals in Python...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2380#issuecomment-991694381:56,interface,interface,56,https://psicode.org,https://github.com/psi4/psi4/issues/2380#issuecomment-991694381,1,['interface'],['interface']
Integrability,"The basisset class states that the unique contraction coefficients are normalized; https://github.com/psi4/psi4/blob/b5f5dea5cc34e51f9b5e3796d9a8eca5e1cb14c2/psi4/src/psi4/libmints/basisset.h#L154. But, what does this really mean? That the contraction is normalized, or that the contraction coefficients are in terms of normalized Gaussian primitives? This should be made clearer in the source.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3038:42,contract,contraction,42,https://psicode.org,https://github.com/psi4/psi4/issues/3038,3,['contract'],['contraction']
Integrability,"The big difference between AO and plane wave methods is that plane-wave bases are **verbose**. The reason why plane-wave methods don't accelerate convergence using the Fock matrix is that **it is typically never built** since it could not be stored. Instead, it is always contracted right away with trial vectors, as in traditional configuration interaction approaches, for example. The acceleration based on Fock matrix extrapolation is much more efficient than one based on the electron density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073:272,contract,contracted,272,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073,1,['contract'],['contracted']
Integrability,"The big picture purpose of this PR is not clear to me. I understand that bullet point 4 is test coverage. Are the other three bullet points changing an interface, adding functionality, or pure code reorganization?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126#issuecomment-919135259:152,interface,interface,152,https://psicode.org,https://github.com/psi4/psi4/pull/2126#issuecomment-919135259,2,['interface'],['interface']
Integrability,"The bug is also basis set dependent (def2-SVPD runs fine in Psi4 1.3.2), which also points to this. As a workaround, this issue can probably be solved for this system by using a better initial guess.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2594#issuecomment-1147657283:26,depend,dependent,26,https://psicode.org,https://github.com/psi4/psi4/issues/2594#issuecomment-1147657283,1,['depend'],['dependent']
Integrability,The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1877048909:27,message,messages,27,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877048909,1,['message'],['messages']
Integrability,"The code checks the number of GPUs and throws an exception if there are none. Regarding the memory, the code in its current form requires at least as much CPU memory as the GPU has. For GP100, that is 16 GB. I’ll reduce this test case to 16 GB, but I need to think carefully how to reduce it safely to a “normal” amount. > On Jun 14, 2018, at 11:16 AM, Lori A. Burns <notifications@github.com> wrote:; > ; > @loriab commented on this pull request.; > ; > In tests/gpu_dfcc/gpu_dfcc1/input.dat <https://github.com/psi4/psi4/pull/997#discussion_r195463106>:; > ; > > @@ -0,0 +1,34 @@; > +#! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; > +; > +sys.path.insert(0,'../../../.'); > +; > +import gpu_dfcc; > +; > +molecule {; > + O 0.000000000000 0.000000000000 -0.068516219310 ; > + H 0.000000000000 -0.790689573744 0.543701060724 ; > + H 0.000000000000 0.790689573744 0.543701060724 ; > +}; > +; > +memory 32000 mb; > What happens on a computer with only CPUs? Do we need to disable if hardware not detected? Only import the plugin if num_gpus>1? Or is it just harmless or non-obliging if no GPUs to work with? Clearly I've just no experience with hardware-dependent tests.; > ; > In any case, I hope memory req. can be toned down?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/997#pullrequestreview-128837847>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGg6UFdaiUjSouvB5u5K8uNAWsj5mks5t8n5DgaJpZM4Tutpb>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-397334449:1152,depend,dependent,1152,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-397334449,1,['depend'],['dependent']
Integrability,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-232996171:633,rout,routines,633,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171,2,['rout'],['routines']
Integrability,"The code is probably attempting to use an out-of-core algorithm for one of the contractions, because it thinks it only has the default of 500 Mb; increasing the number of frozen virtuals probably allows it to run in core, which is why that trick is successful. If you add `memory 10 Gb` (or however much you have available) to the top of your input, it should help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/523#issuecomment-261793389:79,contract,contractions,79,https://psicode.org,https://github.com/psi4/psi4/issues/523#issuecomment-261793389,1,['contract'],['contractions']
Integrability,"The code samples on the [Interface to NumPy page of the documentation](https://psicode.org/psi4manual/master/numpy.html) do not currently run. A forum report says that at the least, `psi4.Matrix` needs to be replaced with `psi4.core.Matrix`. Somebody should check that all the code on that page actually runs, and that it's accessible to non-experts. I've had to link a couple forum users to that page lately. This is a great project for a new developer who wants to learn the fundamentals of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2087:25,Interface,Interface,25,https://psicode.org,https://github.com/psi4/psi4/issues/2087,1,['Interface'],['Interface']
Integrability,"The conda packages are in a state of transition just now wrt gcc, so I can't give you bullet-proof directions for this procedure without a lot of back-and-forth, but there is a procedure to build psi4 from source using all dependencies from conda, including MKL. It's outlined here (http://psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380494702:223,depend,dependencies,223,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380494702,1,['depend'],['dependencies']
Integrability,"The correct detection of the D2h subgroup seems to depend on the orientation. In the attached input; are two different geometries at two different orienations, but both Oh symmetry. case 1 was symmetrized using the SYVA code after C1 optimization with DFT (https://www.sciencedirect.com/science/article/pii/S0010465517300310); case 2 was downloaded from a website about symmetry. (see input). input:; [oh.txt](https://github.com/psi4/psi4/files/2320825/oh.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1177:51,depend,depend,51,https://psicode.org,https://github.com/psi4/psi4/issues/1177,1,['depend'],['depend']
Integrability,"The correlation reference you're looking for is: S. H. Vosko, L. Wilk, and M. Nusair, “Accurate spin-dependent electron liquid correlation energies for local spin density calculations: A critical analysis,” Can. J. Phys., 58 (1980) 1200-11. I just wasn't sure if there needed to be a reference for the specific x/c combination.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1111#issuecomment-414866720:101,depend,dependent,101,https://psicode.org,https://github.com/psi4/psi4/issues/1111#issuecomment-414866720,1,['depend'],['dependent']
Integrability,"The current cap for ctest is 25 minutes on a single core. Is there any reason not to do this on a tiny basis like 6-31G or 3-21G?. This is just if you want the test case to be run routinely, there is nothing wrong with having extra long test cases that are only run if specifically requested. > On Feb 15, 2016, at 5:01 PM, Rollin King notifications@github.com wrote:; > ; > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > 1gb of memory. Is that short enough? If so, I'll commit the change.; > ; > -Rollin; > ; > ## ; > ; > Dr. Rollin A. King; > Professor and Chair of Chemistry; > Bethel University; > rking@bethel.edu; > ; > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > I just removed opt10 from all ctest labels. Its still present, but will; > > not run unless you specifically request it.; > > ; > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > ; > > > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com; > > > wrote:; > > > ; > > > Yeah, we should have that mechanism to leave it as a longertest. Maybe; > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/issues/253#issuecomment-184228286>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/253#issuecomment-184233000.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184413127.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184418683:180,rout,routinely,180,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184418683,1,['rout'],['routinely']
Integrability,"The current master branch of libxc includes support for double hybrids, as well as functionals with several range-separation constants (e.g. the HISS functional). It would be great to have Psi4 as an early adopter, so that we could test whether the interface is sane and the implementations are correct. The direct libxc interface will also include functionals like wB97M(2) that aren't available in Psi4 at the moment.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1875:249,interface,interface,249,https://psicode.org,https://github.com/psi4/psi4/issues/1875,2,['interface'],['interface']
Integrability,The dftd3 and gcp system calls (and others like that) will need to checked by someone familiar with the windows shell.; When I made the ORCA-to-gcp interface it gave all sorts of trouble on Windows with escape characters.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-383499846:148,interface,interface,148,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-383499846,1,['interface'],['interface']
Integrability,"The diffs come up clean for every section of variable printing in OCEPA, CEPA, OMP2, OMP3, OMP2.5, MP3, MP2.5, MP2... Numbers vary, unsurprisingly. There's no printing difference depending on closed vs open-shell except for ROHF-MP2. I can't find an ROHF-MP2 test anywhere, so I compared a UHF-MP2 and an ROHF-MP2 calculation. After fixing one silly mistake (see last commit), the diff was exactly what I expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1785#issuecomment-576081766:179,depend,depending,179,https://psicode.org,https://github.com/psi4/psi4/pull/1785#issuecomment-576081766,1,['depend'],['depending']
Integrability,"The error can appear in form of various crashes (e.g. bad alloc, weird print outs) but it seems ultimately the problem is that ghost atoms do not have an atomic radius for pcmsolver. I finally got a proper error message:. ```; PCMSolver fatal error.; In function initMolecule at line 588 of file /Users/github/builds/conda-builds/pcmsolver_1532565726046/work/src/interface/Meddle.cpp; In the molecule:; Geometry (in Angstrom); Center X Y Z; ------------ ------------ ------------ ------------; N-5.29177e-11 -0.0550546 0; H-0.477098 0.254982 -0.826358; H-0.477098 0.254982 0.826358; H0.954196 0.254982 0; -5.29177e-11 -0.0550546 5.29177; -0.477098 0.254982 4.46541; -0.477098 0.254982 6.11813; 0.954196 0.254982 5.29177; Rotor type: Asymmetric; Some atoms do not have a radius attached.; Please specify a radius for all atoms!; ```. input for testing: [ghost_pcm.txt](https://github.com/psi4/psi4/files/3256204/ghost_pcm.txt). ---. A manual specification is possible as a work-around but automatic would be nice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1656:212,message,message,212,https://psicode.org,https://github.com/psi4/psi4/issues/1656,2,"['interface', 'message']","['interface', 'message']"
Integrability,"The extraction of the error message looks complicated, but I want to catch the case where the message contains other "":"" characters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611412812:28,message,message,28,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611412812,2,['message'],['message']
Integrability,"The fchk interface works, the only issues are aesthetic. However, other parts of Psi4 aren't functioning as they should, i.e. the issue of the reference density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-533646187:9,interface,interface,9,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-533646187,1,['interface'],['interface']
Integrability,"The fitted version of the SAP guess we described in https://aip.scitation.org/doi/10.1063/5.0004046 might be useful for Psi4. Unlike the original version of SAP that I have already implemented in Psi4, this version of the guess doesn't need quadrature at all. Instead, the guess for the electron screening part of the Hamiltonian is formed with density-fitting type routines as; ```; Vsap(u,v) = \sum_A (uv|A); ```; where the As are auxiliary functions. The guess Hamiltonian is then obtained as `Hsap = Hcore + Vsap`, and can be diagonalized to get guess orbitals and orbital energies. The fitted guess is extremely rapid to form, since each nucleus has just one, tightly contracted s-type auxiliary basis function. The implementation should be rather straightforward; the main stumbling blocks are just . - the need to pass in the new type of fitting basis set from Python to the C++ routines and; - the need to translate the auxiliary basis set's contraction coefficients to the proper format (coefficients `c[i].c` get transformed by the exponents `c[i].z` by `c[i].c *= pow(c[i].z/M_PI,1.5)`). Since the implementation will require changes throughout, I'd need some help from the core developers to do this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2054:366,rout,routines,366,https://psicode.org,https://github.com/psi4/psi4/issues/2054,4,"['contract', 'rout']","['contracted', 'contraction', 'routines']"
Integrability,"The following either gives `NaN` energy or (positive) 60,000 [Eh] depending on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ seem to check out, did not try larger. Other guesses, `s_tolerence`, or fitting basis appear to have no effect on this error. UHF works fine. ```; molecule mol {; 0 2; C -2.83891 -0.84747 -0.20778; N -2.06959 -0.27604 0.77905; C -0.85937 -0.82512 0.74757; N -0.82980 -1.74677 -0.21226; C -2.05910 -1.77487 -0.83179; C -2.45490 0.86620 1.59959; C 0.35903 -2.49473 -0.61265; F -1.01767 1.46174 -1.11980; B 0.28985 1.63764 -0.63648; F 0.23738 1.82826 0.77419; F 0.89453 2.73957 -1.24020; F 1.05039 0.46734 -0.88673; H -0.02604 -0.54755 1.38339; H -2.27287 -2.45330 -1.64959; H -3.86751 -0.55086 -0.37733; H -3.45079 0.68580 2.01748; H -1.72185 0.98138 2.40249; H -2.44673 1.75972 0.96603; H 0.98379 -1.85263 -1.24323; H 0.91655 -2.78676 0.28358; H 0.03922 -3.39046 -1.15377; C 2.81822 0.12352 1.52490; C 3.26768 -0.78277 0.56145; H 3.28632 0.11977 2.50813; H 2.01109 0.81253 1.27433; N 3.64537 -1.55240 -0.23308; }. set {; basis aug-cc-pVQZ; scf_type df; guess gwh; reference rohf; }. energy('SCF'); ```. An example of initial convergence can be seen for UHF/aQZ:. ```; Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -716.29320215568873 -7.16293e+02 1.25967e-02; @DF-UHF iter 2: 27.48017620380119 7.43773e+02 1.97120e-02 DIIS; @DF-UHF iter 3: -561.81810445462588 -5.89298e+02 9.53326e-03 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371:66,depend,depending,66,https://psicode.org,https://github.com/psi4/psi4/issues/371,1,['depend'],['depending']
Integrability,"The following input crashes with a Segfault:. ```; molecule HeLi {; 	0 1; 	He 0.000000000 0.000000000 0.000000000; 	--; 	1 1; 	Li 3.300000000 0.000000000 0.000000000. 	units angstrom; 	no_reorient; }. set globals {; 	basis aug-cc-pVDZ; 	df_basis_scf aug-cc-pVDZ; 	df_basis_sapt aug-cc-pVDZ; 	df_basis_mp2 aug-cc-pVDZ; }. set_memory(32000000000); energy('sapt2+3(ccd)dmp2'); ```. ```; /home/apps/psi/psi4conda/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002B46FE54BA15 Unknown Unknown Unknown; libpcm.so.1 00002B46FE549637 Unknown Unknown Unknown; ```; etcetera. Output stops suddenly:; ```; <snip>; ==> CCD Dispersion <==. Beginning Monomer A CCD. Iter Energy (H) dE (H) RMS (H); 1 -0.02083174 0.020831739 0.000000000; 2 -0.02587434 0.005042604 0.000504656; 3 -0.02710324 0.001228894 0.000126313; 4 -0.02740459 0.000301348 0.000031758; 5 -0.02747899 0.000074401 0.000008016 DIIS; 6 -0.02750358 0.000024596 0.000002027 DIIS; 7 -0.02750357 -0.000000016 0.000000004 DIIS; 8 -0.02750358 0.000000015 0.000000002 DIIS; 9 -0.02750358 0.000000001 0.000000000 DIIS. Beginning Monomer B CCD; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1564:544,Rout,Routine,544,https://psicode.org,https://github.com/psi4/psi4/issues/1564,1,['Rout'],['Routine']
Integrability,"The following input fails with a segfault; ```; molecule {; 0 5; Fe; }. set basis pcseg-0; set reference rohf; set scf_type pk; set mcscf_type conv; # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]. # Ar core; set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; # spd active space; set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; cas_e, cas_wfn = energy('rasscf', return_wfn=True). # Dynamical correlation from Ar core; set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); ```. There's something wrong in the input or the code, since there's an error message in the log file; ```; ==> Setting up CI strings <==. There are 2730 alpha and 105 beta strings; (subgr_lex_addr): Impossible walk!; The CI space requires 18211 (1.82E+04) determinants and 44 blocks; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693:691,message,message,691,https://psicode.org,https://github.com/psi4/psi4/issues/1693,1,['message'],['message']
Integrability,"The following input file demonstrates errors in the second decimal place:; ```; molecule {; La 1 -0.5 0; La 1 0.5 0; O 0 -1 0; O 0 0 0; O 0 1 0; }. set {; basis def2-svp; scf_type df; df_basis_sad def2-universal-jkfit; df_basis_scf def2-universal-jkfit; points 5; }. func = 'hf'; anal = gradient('scf', dft_functional=func, dertype=1); fndf = gradient('scf', dft_functional=func, dertype=0); anal.print_out(); fndf.print_out(); ```. The counterpart where La is replaced with B agrees to six decimal places. This is _strongly_ suggestive of an error in ECPs. Let's keep all discussion on this issue focused on this error. DFT integration is irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672:625,integrat,integration,625,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672,1,['integrat'],['integration']
Integrability,"The following input file fails with the following message:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4/lib/python/inputparser.py"", line 732, in process_input; temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); TypeError: sub() got an unexpected keyword argument 'flags'; ```. I was wondering: is it possible that recent changes to python affect the ability to read user-defined basis sets from input files?. ```; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. basis {; cartesian; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169:50,message,message,50,https://psicode.org,https://github.com/psi4/psi4/issues/169,1,['message'],['message']
Integrability,"The following snippet of code fails because of the extra space at the end of `'SCF_TYPE '`. ```python; import psi4; psi4.set_options({'SCF_TYPE ' : 'DIRECT'}); ```. This is an innocent error that should be fixed by psi4, or reported back to the user with a readable error message. Simply stripping the option label of left and right spaces would prevent this issue (with no potential side effects). If the option is not found, then psi4 should throw an exception saying something like ""Option `'...'` is not valid."". This is the error message:; ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-c64c7a4449ad> in <module>; 1 import psi4; 2 ; ----> 3 psi4.set_options({'SCF_TYPE ' : 'DIRECT'}). /usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py in set_options(options_dict, verbose); 444 for k, v, in options_dict.items():; 445 mobj = optionre.match(k); --> 446 module = mobj.group('module').upper()[:-2] if mobj.group('module') else None; 447 option = mobj.group('option').upper(); 448 . AttributeError: 'NoneType' object has no attribute 'group'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2004:272,message,message,272,https://psicode.org,https://github.com/psi4/psi4/issues/2004,2,['message'],['message']
Integrability,The functional interface should be modified in such a way that Psi4 pulls the info about the functionals (i.e. the citations) from libxc; there's little sense in duplicating this information.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1597#issuecomment-482030604:15,interface,interface,15,https://psicode.org,https://github.com/psi4/psi4/pull/1597#issuecomment-482030604,1,['interface'],['interface']
Integrability,"The gdma wrapper expects an output file and/or fails to detect `stdout` correctly; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/gdma_interface/wrapper.cc#L51. A work around is to specify an output file for the python script; `psi4.core.set_output_file(""script.out"")`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1334#issuecomment-436198661:9,wrap,wrapper,9,https://psicode.org,https://github.com/psi4/psi4/issues/1334#issuecomment-436198661,2,['wrap'],['wrapper']
Integrability,The gmda interface seems pretty straightforward. I could look into this since I'm using it daily. . Is there any documentation on how to keep an isolated installation of psi4 for development? Any tips would be appreciated!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2706#issuecomment-1228698239:9,interface,interface,9,https://psicode.org,https://github.com/psi4/psi4/issues/2706#issuecomment-1228698239,1,['interface'],['interface']
Integrability,The input file should be fort.56. Memory should be handled here: https://github.com/psi4/psi4/blob/8418efe67717940cda6e8446814d9689e9c303e8/psi4/src/psi4/mrcc/mrcc.cc#L932. Threading should be handled here: https://github.com/psi4/psi4/blob/8418efe67717940cda6e8446814d9689e9c303e8/psi4/driver/procrouting/proc.py#L4994. It's been a long time since any of these interfaces were managed. Are you sure the mrcc was compiled with openmp enabled?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3165#issuecomment-2135954456:362,interface,interfaces,362,https://psicode.org,https://github.com/psi4/psi4/issues/3165#issuecomment-2135954456,1,['interface'],['interfaces']
Integrability,"The input; ```; molecule {; H; H 1 0.60; }. set basis cc-pVDZ; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; # STO-3G active space; set active [1, 0, 0, 0, 0, 1, 0, 0 ]; energy('casscf'); ```; fails with the up-to-date master branch with the error message; ```; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 5483, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: DSYEV diagonalizer failed in DETCI SEM!; Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""cc-pVDZ""); core.set_global_option(""DOCC"", [ 1, 0, 0, 0, 0, 0, 0, 0 ]); core.set_global_option(""ACTIVE"", [1, 0, 0, 0, 0, 1, 0, 0 ]); --> energy('casscf'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: DSYEV diagonalizer failed in DETCI SEM! !; ! Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! !; !----------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3096:239,message,message,239,https://psicode.org,https://github.com/psi4/psi4/issues/3096,1,['message'],['message']
Integrability,"The integration runs some checks on PRs, notably that C++ code style conforms to `.clang-format`. ## Description; [Danger.Systems](http://danger.systems/ruby/) provides a DSL to perform checks on PRs. It's a Ruby gem that runs on Travis, reads the `Dangerfile` and comments on a PR through a bot.; The current version of the `Dangerfile`:; 1. **Fails PR** if C++ code style does not comply with `.clang-format`; 1. **Fails PR** if Python code style does not comply with `.style.yapf`; 2. **Warns** if PR is classed as work in progress, _i.e._ contains `[WIP]` in the title; 3. **Warns** if PR is classed as trivial, _i.e._ contains `#trivial` in the title; 4. **Fails PR** if there are merge commits in the history; 5. **Warns** if PR introduced code changes (in subdirectories `psi4`, `external`, `cmake`) without adding tests and/or docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Integrate with Danger.Systems; - [x] Danger checks that C++ code style complies with `.clang-format`; - [x] Clean up `.travis.yml` from now useless PPA; - [x] Ignore `build*` directories; - [x] Danger checks that Python code style complies with `.style.yapf`; - [x] Enabled caching of some dependencies on Travis. ## Questions; 1. I think it's better to pull this in once `clang-format` has been run over the whole code base.; 2. Where is a good place to document the behavior of the bot?; 3. Are the commented sections in `.travis.yml` supposed to be there for future use?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809:4,integrat,integration,4,https://psicode.org,https://github.com/psi4/psi4/pull/809,3,"['Integrat', 'depend', 'integrat']","['Integrate', 'dependencies', 'integration']"
Integrability,"The interface include directories/libraries of (external) projects don't seem to propagate when they are added via `psi4_add_library`. I think you mentioned you had a problem with this before. It looks like the problem might be line 64 in `Psi4Macros.cmake`:. ```; target_link_libraries(${libname} INTERFACE ${name_i}); ```. I think that should be PUBLIC rather than INTERFACE. That way, the `${libname}` library will use the added library, as well as pass it along on its interface. Changing that causes other build issues, though, and I'm not 100% positive what it should be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237703940:4,interface,interface,4,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237703940,4,"['INTERFACE', 'interface']","['INTERFACE', 'interface']"
Integrability,"The issue has been reported to the MRCC forum. It is broken even with Molpro 2022.; Perhaps it would be more maintainable to teach QCEngine how to run standalone MRCC calculations, rather than trying to pass SCF wavefunctions via a fragile interface that keeps being broken?. PS: [MRCC forum topic](https://www.mrcc.hu/index.php/forum/running-mrcc/287-molpro-w-mrcc-keywd-errror)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1092754283:240,interface,interface,240,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1092754283,1,['interface'],['interface']
Integrability,"The key change is that in 1.3.2, psi4 was using Libint1. Now in 1.4 and 1.5, psi4 uses Libint2 that is much capable and has a cleaner interface and is maintained. Along with that is better screening, and it looks like you've hit a case that didn't have an expected use, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/twobody.cc#L244-L249 . If you're exploring, perhaps switch to ab|ab to proceed. If the aa|bb was deliberate, let us know, though there probably won't be a prompt change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439#issuecomment-1037759512:134,interface,interface,134,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1037759512,1,['interface'],['interface']
Integrability,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:336,integrat,integration,336,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817,1,['integrat'],['integration']
Integrability,"The libecpint results have been very thoroughly tested against near-exact numerical integration routines, so I would be surprised if they are wrong. I will have to take a closer look at what you've done so far to know whether the problem is bugs in the original code or a change in the way certain things are handled. I can clarify though that libecpint does _no_ normalization of the basis functions. I do know the reason there are now some non-zero quantities though - I was screening them assuming everything would eventually be transformed to spherical gaussians! So it won't have affected results as long as cartesians weren't being used. . @PeterKraus has also noted a problem with linking against pugixml, and I'm not sure what the problem is, but hopefully we'll work out how to fix it soon. . That said, it is worth noting that I have almost finished wrapping a python package of libecpint, so that might prove an easier root to install the library?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802951976:84,integrat,integration,84,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802951976,3,"['integrat', 'rout', 'wrap']","['integration', 'routines', 'wrapping']"
Integrability,"The main things worth looking at:; * psi4/driver/driver.py, psi4/src/core.cc; 	Do we have any recommended changes to the error messages? Any error messages I should add but didn't?; * Are there any files I didn't edit that I should have, just based on the fact that I am renaming an entire module?; * I also removed some options which the code stopped using. (The MO_RELAX and IGNORE_TAU options, both of which were marked to be used as debug tools.) Is there anything I should do for that other than remove mention of them in psi4/src/read_options.cc and anywhere they appeared in the DCT code?. Beyond that, the changes should be search and replace. Particularly zealous reviewers can double-check that the only instances of `dcft` left are those that refer to specific citations or say that `dcft` was the old name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719#issuecomment-532653590:127,message,messages,127,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-532653590,2,['message'],['messages']
Integrability,"The new CMake system documentation is primarily in the comments within the top level CMakeLists.txt. I have noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /hom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:1013,message,message,1013,https://psicode.org,https://github.com/psi4/psi4/issues/516,1,['message'],['message']
Integrability,"The new error printing in #1862 seems to struggle when the message it's trying to print contains newlines. Consider the following input file. ```; molecule {; symmetry c1; N; N 1.500; }; set {; basis cc-pVD; }; energy('scf'); ```. This will raise a syntax error because I have a malformed Z-matrix. The new box will print out. ```; !----------------------------------------------------------------------------------!; ! !; ! Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]: symmetry c1 N !; ! N 1.500 !; ! !; !----------------------------------------------------------------------------------!; ```. where the original error message is the more readable. ```; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; symmetry c1; N; N 1.500; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867:59,message,message,59,https://psicode.org,https://github.com/psi4/psi4/issues/1867,2,['message'],['message']
Integrability,The newly built adcc conda packages (with the less strict dependency constraints) are now available in the [adcc/label/dev](https://anaconda.org/adcc/adcc/files) channel. Perhaps would be good to try them here and check they ease compatibility as expected.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598785196:58,depend,dependency,58,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598785196,1,['depend'],['dependency']
Integrability,"The numpy from Miniforge3-MacOSX-arm64 comes with libopenblas. They just hide the actual blas library behind more a more generic interface like cblas. This way they can easily switch between openblas or mkl for example.; You can check what is being actually used:. ```; Holgers-MacBook-Air:kruse :~ > otool -L /Users/kruse/miniforge3/lib/libcblas.dylib; /Users/kruse/miniforge3/lib/libcblas.dylib:; 	@rpath/libopenblas.0.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libgfortran.5.dylib (compatibility version 6.0.0, current version 6.0.0); 	@rpath/libomp.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1292.0.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961478826:129,interface,interface,129,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961478826,1,['interface'],['interface']
Integrability,"The one-electron integrals (OEIs) in psi4 are in the process of being overhauled. The (old) native psi4 Obara-Saika code was recently replaced with an interface to the (new) libint2 library (#2388). I've found that in my specific use case, while the new OEI code is serially faster than the old OEI code, the new OEI code scales surprisingly poorly with multiple cores. . ### Background. I'm in the process of implementing semi-numerical exchange for psi4. The cost of this algorithm is dominated by the calculation of OEIs with the following functional form:; ```; (u | (r - r_g)^{-1} | v),; ```; where `u` and `v` are basis functions, and `r_g` is a point in space on some quadrature. A naive semi-numerical exchange code computes these integrals over all `u`, `v`, and `r_g`, requiring O(N^3) work. In current psi4, integrals of this type can be computed with either the old OS code (via the `MultipolePotentialInt` class) or the new libint2 interface (via the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quad",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:151,interface,interface,151,https://psicode.org,https://github.com/psi4/psi4/issues/2491,2,['interface'],['interface']
Integrability,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461:690,message,message,690,https://psicode.org,https://github.com/psi4/psi4/issues/1461,1,['message'],['message']
Integrability,"The original basis is SO. The behavior for D and F are different because ""AO basis quantities"" mean different things for those two cases. For the F matrix, ""AO basis"" means that you have a formula in terms of one-electron functions, and you just throw those in. To change basis, you just linearity. F_pq = C_mu,p C_nu,q F_mu,nu. For D, ""AO basis"" means ""if you contract this against an AO basis integral, you'll get the same result as if you had contracted an MO basis quantity against MO basis integral."" In that case, D_mu,nu F_mu,nu = D_p,q F_p,q = D_p,q C_mu,p C_nu,q F_mu,nu, so we end with D_mu,nu = C_mu,p C_nu,q D_p,q. Note that it _differs_ whether you need to contract your C matrices against the AO or the MO basis quantity.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-680945095:361,contract,contract,361,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-680945095,3,['contract'],"['contract', 'contracted']"
Integrability,"The parallel work in Psi4 was in an Intel development environment, and with that `MKL` reference in your error, looks like that might have been hard-coded. If you don't have MKL to build against, you could also consider the binary that has high-quality math libs baked in (but does have processor optimizations turned off, which may or may not be relevant depending on the age/homogeneity of your HPC env).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226018652:356,depend,depending,356,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226018652,1,['depend'],['depending']
Integrability,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:168,interface,interface,168,https://psicode.org,https://github.com/psi4/psi4/issues/2178,1,['interface'],['interface']
Integrability,The primary goal of this PR was completed through another route with #554 and the remaining bits added in 759e83e.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/543#issuecomment-270960957:58,rout,route,58,https://psicode.org,https://github.com/psi4/psi4/pull/543#issuecomment-270960957,1,['rout'],['route']
Integrability,"The problem appears to be as follows:. The Bozkaya OO code and the DCT OO code use different indexing conventions with libdpd. What one code says is a column index, the other says is a row index. Consequently, they conflict with each other when trying to pull files from libtrans. At the least, that is what is happening on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dcft/dcft_integrals_UHF.cc#L362) of the DCT code. While a user can fix this with `clean()` calls, an in-program fix is harder. If we put a `clean()` call at the end of the energy calls in `procrouting`, we obliterate the density matrices that may be needed if `energy` was called by `gradient`. The only solutions I can see are to unify the indexing conventions or to leave modification/sorting of `libtrans` files to `libtrans`. We had also best do _something_ to prevent this problem from recurring. What that looks like will depend on the fix we make. Either way, might I suggest we put this on the agenda for PsiCon?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435137456:919,depend,depend,919,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435137456,1,['depend'],['depend']
Integrability,"The problem appears to be that, when the wave function is labelled ""ROHF"", MRCC it expects the orbitals to be truly spin restricted (which is reasonable behavior, in general). However, for open-shell systems, ROHF-B-CC naturally yields spin-unrestricted orbitals due to the fact that the alpha and beta T1 amplitudes are distinct. (This can be avoided using less conventional open-shell B-CC formulations, but Psi4 uses the ""standard"" approach.) However, given that the UHF- and ROHF-based algorithms yield the same results in Psi4 (apart from differences associated with using frozen core), the interface to MRCC should work correctly if the user chooses `reference uhf`. No changes to either Psi4 or MRCC appear to be necessary to avoid this problem. Kirk Peterson has confirmed that this corrects the interface failure he reported earlier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234:596,interface,interface,596,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234,2,['interface'],['interface']
Integrability,"The problem first appeared [here](https://travis-ci.org/psi4/psi4public/builds/106133128), and it affects every clang build on the Travis machines. I did some hacking of the setup, to run cc1 through Valgrind [here](https://travis-ci.org/andysim/psi4public), but it's showing an illegal instruction. That could be a genuine illegal instruction being generated (how, I have no idea), or just a red herring due to Valgrind not recognizing one of the instructions generated. The fact that none of us can reproduce it is mystifying to me. That commit simply pulled in the new cctransort code from the private repo into master. I don't believe there's anything wrong with the cctransort code, but I'd like to be able to depend on the CI tests again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-180503623:715,depend,depend,715,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180503623,2,['depend'],['depend']
Integrability,"The problem was indeed boost. I've switched my testboard nightly builds to; use the boost we distribute with PSI, but at some point we'll have to; figure out why the interface to 1.60.0 isn't working properly. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 5:58 PM, Andy Simmonett notifications@github.com; wrote:. > The failures on the Travis tests systems are likely unrelated to the file; > closing error. Can you reproduce those problems on the CCQC cluster,; > @jturney https://github.com/jturney? I haven't been able to reproduce; > the problem on any of our machines; the valgrind trace shows an illegal; > instruction, but that may just be something that Valgrind can't handle.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178874533.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-179352477:166,interface,interface,166,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-179352477,1,['interface'],['interface']
Integrability,"The psi4 code unchanged since May 2019 has suddenly started throwing circular import errors?. Any changes to the dependency list? Particularly, is qcengine present?. Python 3.11 only? I've never tried a 3.11 prerelease.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1203208847:113,depend,dependency,113,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1203208847,1,['depend'],['dependency']
Integrability,"The reason its bouncing is we are not entirely sure the range-seperatated gradients are correct. This admittedly could use a better error message. On `psi4.gradient('scf/3-21g', df_functional='wb97x', dertype=1)` I think this shows a need to scan for valid `kwargs`. This could be difficult to do however.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-346668004:138,message,message,138,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346668004,1,['message'],['message']
Integrability,"The reference wavefunction shouldn't be changed, but cloning the wavefunction _before_ `cctransort`, and then having `cctransort` set `same_a_b_orbs_` sounds reasonable to me. I'd also agree with the driver changing this right before or right after `cctransort`, depending on what is most convenient for the internal logic of `cctransort`. `Wavefunction` doesn't define a way to set change `same_a_b_orbs_`, but we can add one easily.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1041983239:263,depend,depending,263,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041983239,1,['depend'],['depending']
Integrability,"The result of test has changed:; ```; $ ctest --output-on-failure -R cookbook-rohf-orb-rot; Test project /home/raimis/psi4.git/linux_build; Start 401: cookbook-rohf-orb-rot; 1/1 Test #401: cookbook-rohf-orb-rot ............***Failed 22.19 sec; 	X SCF energy......................................................PASSED; 	X CCSD energy.....................................................PASSED; 	A SCF energy......................................................PASSED; 	A CCSD energy.....................................................PASSED; 	X SCF energy......................................................PASSED; 	X CCSD energy.....................................................PASSED; 	A SCF energy: computed value (-150.1081361) does not match (-150.0872987) to 6 digits.; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 84, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/p4util/util.py"", line 230, in compare_values; raise TestComparisonError(message). TestComparisonError: 	A SCF energy: computed value (-150.1081361) does not match (-150.0872987) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; cart = 22.19 sec*proc (1 test); cookbook = 22.19 sec*proc (1 test); psi = 22.19 sec*proc (1 test). Total Test time (real) = 22.35 sec. The following tests FAILED:; 	401 - cookbook-rohf-orb-rot (Failed); Errors while running CTest; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-457158095:1087,message,message,1087,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-457158095,1,['message'],['message']
Integrability,"The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511:848,message,messages,848,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511,2,['message'],['messages']
Integrability,"The switch to 2022 CMake fork of Libint2 in #2413 should have healed this issue, as it has better dependency handling and demands fewer dependencies. Try it out when you get a chance, please. You may find this dependency table helpful: https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md#prerequisites",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-1077930064:98,depend,dependency,98,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-1077930064,3,['depend'],"['dependencies', 'dependency']"
Integrability,"The test `pywrap-opt-sowreap` is failing for me with the following error message:. ```; Performing finite difference calculations; 5 displacements needed ...; An error has occurred Py-side; Traceback:; <type 'exceptions.TypeError'>: 'float' object is not iterable: File ""<string>"", line 25, in <module>. File ""/home/avcopan/Documents/code/github/psi4/share/python/driver.py"", line 1158, in optimize; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs). ```. I did some poking around and it looks like the problem is that this code (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L1153)):. ```; def optimize(name, **kwargs):; # ...; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs); psi4.set_gradient(G); thisenergy = psi4.get_variable('CURRENT ENERGY'); ```. breaks when gradient is called in sow-reap mode because it returns `0.0` rather than a matrix-wavefunction tuple (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L843)):. ```; def gradient(name, **kwargs):; # ...; if dertype == 1:; # ...; else:; # ...; if (opt_mode.lower() == 'sow'):; optstash.restore(); return 0.0; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/291:73,message,message,73,https://psicode.org,https://github.com/psi4/psi4/issues/291,1,['message'],['message']
Integrability,"The test case is trying to figure out whether or not a linear dependency messes up the calculation. It appears that the linear dependency is not messing up the calculation and the issue is that the final energies do not match. At some point the optimizer must have changed and as a result the energies no longer match to five decimal places, but rather to only three. I loosened the check to three decimal places. Commit 3bc5f146dfbbc6a09d9ccbe034f2ffdd7d32d6e9 fixes this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/125#issuecomment-121739386:62,depend,dependency,62,https://psicode.org,https://github.com/psi4/psi4/issues/125#issuecomment-121739386,2,['depend'],['dependency']
Integrability,"The test failure looks completely random. I expect this will pass tests if it goes through again. I can't re-force tests, so the best solution I have is to amend the commit message and force push the PR. That'll force another run of tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856:173,message,message,173,https://psicode.org,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856,1,['message'],['message']
Integrability,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1965:22,message,message,22,https://psicode.org,https://github.com/psi4/psi4/issues/1965,2,['message'],['message']
Integrability,"The`tu4-h2o-freq` also was also a victim of a merge problem. It needs `dertype=1` because the DZ basis has a fitting basis with _f_ orbitals. That means the Hessians require AM=5, so Travis gets upset. I guess the stderr messages aren't part of the log; do you think there's a simple fix for that, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235144975:221,message,messages,221,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144975,2,['message'],['messages']
Integrability,"There are no new docs for those, but I had them as open items when I opened the PR. I spoke with Lori about them since, and we agreed that listing them in ""What are the add-on capabilities for Psi4 and what are their dependencies?"" and including links to repos was sufficient. I checked them to indicate their documentation status was resolved (though I agree the check alone indicates some new doc was added)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2205#issuecomment-869713777:217,depend,dependencies,217,https://psicode.org,https://github.com/psi4/psi4/pull/2205#issuecomment-869713777,1,['depend'],['dependencies']
Integrability,"There are suggestions that our ADC code is currently incorrect and we have marked it, we could consider deprecating our own ADC module in favor of this approach. Otherwise the select adc approach is the correct one. For now I would inject a name of `adcc-adc` or similar so that it is currently a unique identifier for testing and we can correctly wire up the select functionality later. Dictionary objects are fine to return to the user, the Wavefunction is a PyBind11 dynamic object so you can set additional objects to it `wfn.mydata = {""hello"": ""world""}`. I would take this approach for the first pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547900288:232,inject,inject,232,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547900288,1,['inject'],['inject']
Integrability,There are various ways to modify the wfn object at the python level. E.g. using the numpy interface (https://psicode.org/psi4manual/master/numpy.html) or wfn serialization (https://github.com/psi4/psi4/blob/master/samples/serial-wfn/input.dat). You can easily overwrite the Density or Coefficient matrix with a numpy array or a psi4 matrix object. What is an example operation where our current interface is insufficient?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2086#issuecomment-762070854:90,interface,interface,90,https://psicode.org,https://github.com/psi4/psi4/issues/2086#issuecomment-762070854,2,['interface'],['interface']
Integrability,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:714,depend,dependencies,714,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202,1,['depend'],['dependencies']
Integrability,"There have been reports of X2C not being well-behaved in the presence of linear dependencies. Calling on @fevangelista or @susilehtola to give details. Quoting Francesco from Slack:. > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2201:80,depend,dependencies,80,https://psicode.org,https://github.com/psi4/psi4/issues/2201,3,['depend'],"['dependencies', 'dependency']"
Integrability,"There is at least one group that I know of that is working on developing basis sets specifically contracted for X2C computations. Thus, it may not be a good idea to automatically decontract the basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-289018269:97,contract,contracted,97,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-289018269,1,['contract'],['contracted']
Integrability,"There is one slight problem, though. The orbitals appear to be blocked by symmetry group, so they don't come out in energy ordering. I would need to modify the bitstring part of the dump_vec routine to map the bitstrings into Aufbau order. I couldn't find with a quick look if there's already something that would give me a mapping between detci's orbital numbering vs. the energy ordering. I note that I could build the mapping from calcinfo's scfeigval members, but is there a cleaner way to do this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-300683881:191,rout,routine,191,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-300683881,1,['rout'],['routine']
Integrability,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98491250:480,integrat,integrate,480,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250,2,['integrat'],"['integrate', 'integration']"
Integrability,"There's a lot going on here, so bear with me. In DF algorithms we approximate `(ab|cd)≈(ab|P) M_PQ (Q|cd)`, where `M` is the inverse of the metric tensor `M = (P|Q)^{-1}`. For calculations involving symmetric densities (such as SCF energies), we can write the `M` quantity as a product of inverse square roots instead; multiplying one to the left and the other to the right gives two identical intermediates, saving memory. That symmetric approach is used in the conventional algorithms that existed pre-1.4. When computing the inverse square root that's needed, the [power() function](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2284) is used; that function respects a cutoff that is used to eliminate (near) linear dependencies and increase stability (and was widely implemented by @susilehtola as part of an effort to increase stability of the code). In cases where the density involved is not totally symmetric, such as excited states, the symmetric DF intermediates are not used and instead the decomposition is asymmetric: `(ab|cd)≈[(ab|P)] [M_PQ (Q|cd)]`. This asymmetric decomposition is also used in the recently introduced `wcombine` algorithm that combines coulomb-attenuated integrals and conventional ERIs to speed up exchange evaluation. To generate the second intermediate in this approach, a full inverse of the metric is needed, instead of the inverse square root, and this is achieved by calling [general_invert()](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2236). This matrix inversion does not eliminate (near) linear dependencies and the system reported in #2279 is susceptible (see comments below for a demo). The `wcombine` algorithm was implemented after @susilehtola's cleanup efforts and inadvertently failed to remove linear dependencies during metric inversion; this PR corrects this oversight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900:782,depend,dependencies,782,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900,3,['depend'],['dependencies']
Integrability,There's some build-time --> run-time transitions that wouldn't be too hard.; - [x] libefp --> pylibefp (in #953) July 2018; - [ ] gdma --> py-wrapped gdma exe; - [ ] chemps2 --> pychemps2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972#issuecomment-406479505:142,wrap,wrapped,142,https://psicode.org,https://github.com/psi4/psi4/issues/972#issuecomment-406479505,1,['wrap'],['wrapped']
Integrability,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20545979:794,interface,interface,794,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979,2,['interface'],['interface']
Integrability,"They may not directly use PyDIIS but they include a header file that does include pybind; therefore, a fix was needed. . I would think that instead of adding `target_link_libraries(XXXX PUBLIC pybind11::headers)` to the modules that need it the modules should state their own dependencies. For example, `scfgrad` should have:. ```; target_link_libraries(scfgrad PUBLIC scf_solver). not. target_link_libraries(scfgrad PUBLIC pybind11::headers); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2387#issuecomment-1000871565:276,depend,dependencies,276,https://psicode.org,https://github.com/psi4/psi4/pull/2387#issuecomment-1000871565,1,['depend'],['dependencies']
Integrability,"Third the ""rather fragile"" understatement. It'll stay as it is for now. But I've got geometric working in another branch. And a summer student is hooking up pylibefp. So more options and better interface forthcoming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385430713:194,interface,interface,194,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385430713,1,['interface'],['interface']
Integrability,"This PR 1) adds a slightly more user-friendly message to a possible exception raised in the F-SAPT post-analysis script and 2) makes the FISAPT_FSAPT_FILEPATH, FISAPT_FSSAPT_FILEPATH, and FISAPT_PLOT_FILEPATH options work without adding a '/' to the end of the option. . On 2), this option only worked properly if the '/' is appended to the end of the directory name (example: ""FISAPT_FSAPT_FILEPATH myfsapt/""), and this only works if done in a set block. Now, this way of setting the option will work, as well as ""FISAPT_FSAPT_FILEPATH myfsapt"" inside and outside of a set block. - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/679:46,message,message,46,https://psicode.org,https://github.com/psi4/psi4/pull/679,1,['message'],['message']
Integrability,"This PR LGTM. I'm a little iffy about naming a SCF_TYPE based only on its exchange algorithm, but (1) it's in line with COSX and (2) that's an issue that I think we're kicking ahead to the actual J & K separation. There's big code changes, but from my gross comparisons, they're code moving around (collecting J from COSK and K from Direct) in new JK wrappings. > How do we feel about having the integral-direct DF-J implementation in two separate JK subclasses? The plan is to remove this in the second CompositeJK PR, when DFJLinK and DFJCOSK are combined, but is the dual implementation of DF-J something people would take issue with?. No problem by me for temporary dual implementation. If there's any chance this could be forgotten, please file a issue just as a reminder.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1300831794:351,wrap,wrappings,351,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1300831794,1,['wrap'],['wrappings']
Integrability,"This PR addresses #2379 . All fsapt tests pass after refactoring (except fsapt-d) Any insights? This is the error message (Running test fsapt-d). ```; !----------------------------------------------------------------------------------!; ! !; ! Unsuccessful run. Check input, particularly geometry in [a0]. Model: !; ! Model(method='hf-d3', basis='(auto)') !; ! !; !----------------------------------------------------------------------------------!; ```. Additional information:; I compiled my code with gcc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877:114,message,message,114,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877,1,['message'],['message']
Integrability,This PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.; It is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2723:678,inject,injection,678,https://psicode.org,https://github.com/psi4/psi4/pull/2723,2,['inject'],['injection']
Integrability,"This PR contains the implementation of XDM-enabled density functional theory calculations in psi4. XDM is a dispersion correction in which the dispersion coefficients that enter the asymptotic dispersion formula are calculated post-SCF from the self-consistent electron density and kinetic energy density. XDM maintains the simplicity and accuracy of a damped asymptotic dispersion correction while, at the same time, it calculates the dispersion coefficients from the self-consistent wavefunction. . The XDM energy and gradient are calculated by the [postg](https://github.com/aoterodelaroza/postg) external program, to which the new code interfaces. The implementation is very similar to the way in which psi4 currently interfaces to gCP. In addition, a few XDM-enabled functionals are provided to facilitate its use. A few tests, samples, and documentation are also included in the package. That said, I recommend that you check the XDM/postg documentation meets psi4 standards as I have no way to verify what it looks like in HTML form.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699:640,interface,interfaces,640,https://psicode.org,https://github.com/psi4/psi4/pull/1699,2,['interface'],['interfaces']
Integrability,"This PR fixes a part of #2012, where requesting to freeze n-th fixed previous shell (using `set freeze_core -n` syntax) would happily carry on, even if an ECP present on a certain atom would substitute more electrons than in the n-th shell. This means the example in #2012 using `freeze_core -2` now throws an exception. The issue of ""smart freezing"" of electrons of alkali metals and a further revamp of the interface (per-atom or per-element spec.) is for a different PR. ## Questions; - [x] Do I need to add a test?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2222:409,interface,interface,409,https://psicode.org,https://github.com/psi4/psi4/pull/2222,1,['interface'],['interface']
Integrability,"This PR solves one clear lack-of-threading problem with MKL. But we've had hints of a more elusive one where threading-or-not depends on MKL library load order. Be on the looking for this. To check both threads issues, I've checked in a timings script (originally Daniel's) [here](https://raw.githubusercontent.com/loriab/psi4/b381e6c0865f3e47986044a409e4c7e7b1f21757/tests/python/threading/input.py) to compare p4 vs np threading and n1 vs nmax threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279194347:126,depend,depends,126,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279194347,2,['depend'],['depends']
Integrability,"This bug has been holding up a forum help request for a couple weeks, but beyond that, this isn't urgent at all. Good luck!. It occurs to me that I was messing with the ZMAT/Cartesian system in #1108. The changes I made _shouldn't_ have broken anything, but that would explain why we're getting this bug in dev, but user isn't getting it in 1.2.1. Send me a message if you need me to explain the context for that PR. The bug I was wrangling was nasty, so my issue description may be a little confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-437329548:358,message,message,358,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-437329548,1,['message'],['message']
Integrability,"This could explain some bugs we've been seeing lately. I don't know who introduced ""coldim"" and why it is needed if we already; have nmopi. On Tue, Feb 23, 2021 at 9:37 PM Eugene DePrince <notifications@github.com>; wrote:. > DF-CC freaks out when linear dependencies are present, and i tracked the; > issue to an inconsistency between reference_wavefunction_->nmopi() and; > reference_wavefunction_->Ca()->coldim(). The latter has the correct value; > when linear dependencies are removed.; >; > Should nmopi() and Ca()->coldim() be consistent in this case?; >; > Minimal input:; >; > molecule {; > o; > h 1 1.0; > h 1 1.0 2 104.5; > }; >; > set {; > basis 'aug-cc-pvtz'; > scf_type df; > cc_type df; > s_tolerance 1e-3; > }; > energy('ccsd'); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2120>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5THGTZ2CCKELMGOIZ3TARQ5JANCNFSM4YDUMEUA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120#issuecomment-785511707:255,depend,dependencies,255,https://psicode.org,https://github.com/psi4/psi4/issues/2120#issuecomment-785511707,2,['depend'],['dependencies']
Integrability,"This fundamentally isn't how Psi4 works. Psi uses a AO density matrix representation wherever it can, switching to a real space for evaluation of DFT functionals but nowhere else. Maybe you can use Psi4 functions to write your own HF code with this functionality (I'd need to think harder to know if that's even doable), but you can't inject such a density into Psi4's existing HF algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3070#issuecomment-1791042158:335,inject,inject,335,https://psicode.org,https://github.com/psi4/psi4/issues/3070#issuecomment-1791042158,1,['inject'],['inject']
Integrability,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333:1084,depend,dependency,1084,https://psicode.org,https://github.com/psi4/psi4/issues/2333,1,['depend'],['dependency']
Integrability,"This is actually a PyBind11 version error. It doesn't appear that our CMake is detecting the discrepancy. Please blow away your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074419:634,message,message,634,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419,1,['message'],['message']
Integrability,"This is diatomic subroutine is a neat feature to have, especially for; pedagogical purposes. On Fri, Nov 11, 2016 at 5:54 PM, Andy Simmonett notifications@github.com; wrote:. > Description; > ; > Completely changes the algorithm used for fitting diatomic potentials from; > Lagrange interpolations (was tens of thousands of lines of Python) to using weighted; > least squares http://dx.doi.org/10.1063/1.4862157, which can be; > implemented with a couple of lines of Python.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Remove the old interpolation code.; > - Add weighted least squares routine.; > - Add exception to handle non-convergent cases.; > - Document changes.; > - New function to plot the fit to screen/file using matplotlib.; > ; > Status; > - Ready to go; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/515; > Commit Summary; > - Completely overhauls the diatomic code to use weighted least squares; > fitting, instead of Lagrange interpolation. Optionally generates plots of; > the results.; > ; > File Changes; > - _M_ doc/sphinxman/source/diatomic.rst; > https://github.com/psi4/psi4/pull/515/files#diff-0 (2); > - _M_ psi4/driver/diatomic.py; > https://github.com/psi4/psi4/pull/515/files#diff-1 (170); > - _D_ psi4/driver/diatomic_fits.py; > https://github.com/psi4/psi4/pull/515/files#diff-2 (49060); > - _M_ psi4/driver/p4util/exceptions.py; > https://github.com/psi4/psi4/pull/515/files#diff-3 (12); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/515.patch; > - https://github.com/psi4/psi4/pull/515.diff; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/515, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdkAhbXRujKqYMI0ebQRkBB4FdOHOks5q9PILgaJpZM4KwN-5; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/515#issuecomment-260078097:635,rout,routine,635,https://psicode.org,https://github.com/psi4/psi4/pull/515#issuecomment-260078097,1,['rout'],['routine']
Integrability,"This is great; I really like that you've addressed the inconsistency between CI and CC, which I didn't notice before. The scheme in your last message looks good to me. I think that numbering the first excited state `1`, and the second `2`, _etc._ makes the most sense, for obvious reasons. Zero basing the excited states would lead to an off-by-one error in the cardinal and ordinal notation. LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260098726:142,message,message,142,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260098726,1,['message'],['message']
Integrability,"This is just about as far as this PR is going to go. Fully removing memory_manager would require a way to store how much memory has been ""spent."" Keeping track of that without globals requires a wavefunction. Once the wavefunction is in place to track memory, the MemoryManager can be removed from psimrcc without much hassle. Two issues before potentially merging this:; 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. `.data()` and passing const refs is enough, according to my very preliminary tests, but I'll do some more in-depth ones once I figure out how to use VTune.; 2. Do we want this as a 1.4 target? We really don't need more PR dependencies before 1.4, given that the 1.4 paper is already published, but 1.4 is still not release-ready. If we don't, then let's hold off on the merge until after 1.4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409:707,depend,dependencies,707,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409,1,['depend'],['dependencies']
Integrability,"This is not particularly surprising as the M0x functionals use rather high polynomials in the density which exacerbate their grid dependency and general stability. . To be extra sure can you run a few other meta-GGA's that are not of the M0x series to check their stability. That could potentially be telling, especially if this is with regard to our meta-GGA gradient code or LibXC's kernels.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-381257009:130,depend,dependency,130,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-381257009,1,['depend'],['dependency']
Integrability,"This is the list of issues tied into wavefunction_pass that should be cleared up before the 1.0 release.; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet (SCF methods can only take a molecule at the moment. `ref_wfn` supersedes `molecule` in all other methods.).; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] Will just pass through the reference wavefunction with a warning; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used (Thats fine, see above).; - [ ] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code. (Moved to another ticket); - [ ] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow. (Moved to another ticket); - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes (see #249).; - [x] DF and RI calls should soft fail with a proper error message.; - [x] Cubeprop, Molden, OEProp etc functions should fail better when not passed a wavefunction.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259:1078,wrap,wrapper,1078,https://psicode.org,https://github.com/psi4/psi4/issues/259,2,"['message', 'wrap']","['message', 'wrapper']"
Integrability,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2486:223,synchroniz,synchronize,223,https://psicode.org,https://github.com/psi4/psi4/issues/2486,1,['synchroniz'],['synchronize']
Integrability,"This is the output I get from running the same system directly through libecpint's main API (with normalised contraction coefficients in the orbital basis). All the results seem to agree with the output you have labelled as `native'. This suggests to me that something is going wrong when the libecpint containers are being created, but I'm struggling to see what exactly it is. It might be worth comparing what your ECP object for argon looks like with one created by libecpint by loading from file. [output.txt](https://github.com/psi4/psi4/files/6173525/output.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-803052000:109,contract,contraction,109,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-803052000,1,['contract'],['contraction']
Integrability,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20548249:1087,rout,routines,1087,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249,1,['rout'],['routines']
Integrability,"This is very strange! Yes, the CD-MP2 Correlation Energy is positive,; which is definitely wrong. I can't imagine why seemingly innocent; changes to the input file would change the result, unless there is; just a memory leak or something. Valgrind might be a good idea. On Fri, Feb 12, 2016 at 12:05 PM, Lori A. Burns notifications@github.com; wrote:. > I'm finding non-deterministic energies for cd-mp2, depending on amount of; > extraneous stuff commented in the input file. For example, the below works; > as is, but gives a different answer when the unused molecules are commented; > out (not only molecules, but irrelevant keywords can cause the problem,; > too). The problem shows up in the final output as correlation energy has; > wrong sign and not matching sum of aa, ab, bb contributions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.945130559",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183423323:405,depend,depending,405,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323,1,['depend'],['depending']
Integrability,"This is what I do for my Catalina build with gcc9/mkl against conda python+libraries. . a) get `psi4-dev psi4-rt psi4 -c psi4/label/dev` from conda (conda psi4 binaries plus dependencies to build from source); (`conda remove -f v2rdm_casscf` because it gives symbol errors); b) `export PATH=/Users/kruse/homebrew/bin:$PATH` for my homebrew gcc-9; c) run the below script (This is what `psi4-path-advisor` gave me plus making sure the correct compilers are used, plus a custom installation dir. Since recently I also have to turn of 2 default plugins because of symbol problems `-DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF`, might not be necessary for everyone). ```; #!/bin/bash; export MKLROOT=/Users/kruse/qc/miniconda3; rm -rif objdir; /Users/kruse/qc/miniconda3/bin/cmake -H. -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsCache.cmake -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsMKLCache.cmake -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_Fortran_COMPILER=gfortran-9 -Bobjdir -DCMAKE_INSTALL_PREFIX=/Users/kruse/qc/psi4.bin -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317:174,depend,dependencies,174,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317,1,['depend'],['dependencies']
Integrability,"This is what the Basis Set Exchange's comparison tool reports. [7zapa-nr.txt](https://github.com/psi4/psi4/files/6870639/7zapa-nr.txt); [6zapa-nr.txt](https://github.com/psi4/psi4/files/6870640/6zapa-nr.txt); [5zapa-nr.txt](https://github.com/psi4/psi4/files/6870641/5zapa-nr.txt); [4zapa-nr.txt](https://github.com/psi4/psi4/files/6870642/4zapa-nr.txt); [3zapa-nr.txt](https://github.com/psi4/psi4/files/6870643/3zapa-nr.txt); [2zapa-nr.txt](https://github.com/psi4/psi4/files/6870644/2zapa-nr.txt). A further study shows that 2zapa-6zapa are the sets from the Supporting Information of the nZaPa paper. However, 7zapa in Psi4 is not the basis from that paper. According to notes in the MolSSI's internal Basis Set Exchange repository, some of the contraction coefficients were fixed in the nZaPa-CV paper and the rectified contractions should also be used in the non-CV sets i.e. the nZaPa sets. Since it looks like these are different, I'll just revert to the old Psi4 copy and fix the formatting by hand....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2254#issuecomment-885837392:749,contract,contraction,749,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-885837392,2,['contract'],"['contraction', 'contractions']"
Integrability,"This is... a complicated one. As far as I can tell, there are multiple issues here:. 1. Are there any other ways SAPT can detect non-SPD MO hessians? This would have caught the error with the SAP file.; 2. Why did the SAP_stability not detect an instability in the second case? If it's genuinely stable, there's not much we can do. This may be a failing in the Davidson solver.; 3. Instability following should be changed to use an exponentiation rather than Givens rotation.; 4. SAPT should detect disturbingly large delta HF energies and warn the user that the results are suspicious. The error message should also be clarified, but that's #1682.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604:597,message,message,597,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604,1,['message'],['message']
Integrability,"This issue is a follow up on discussions [here](https://github.com/psi4/psi4/pull/1151#issuecomment-417101476) about adding ATM dispersion to psi4 through `dftd3 -abc`. There were concerns that when run through the psi4 interface, dftd3 wasn't producing the damping-function independent ATM corrections that it should. Running dftd3 command-line with input below _does_ produce uniform values for `E6(ABC)`:; ```; >>> dftd3 s22_16.xyz -func b-p -abc -zero; >>> dftd3 s22_16.xyz -func b-p -abc -bj; >>> dftd3 s22_16.xyz -func b-p -abc -zerom; >>> dftd3 s22_16.xyz -func b-p -abc -bjm; ```; ```; Edisp /kcal,au: -2.0736 -0.00330456; Edisp /kcal,au: -4.4003 -0.00701230; Edisp /kcal,au: -2.0377 -0.00324733; Edisp /kcal,au: -5.2756 -0.00840720; ```; ```; E6(ABC) "" : -0.000110; E6(ABC) "" : -0.000110; E6(ABC) "" : -0.000110; E6(ABC) "" : -0.000110; ```; `s22_16.xyz`; ```; 10; etylene-ethyne dimer; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; ```. If you run the `-bj` through a parameter file. `.dftd3par.local` `1.000000 0.394600 3.282200 4.851600 0.000000 4`. Get the same energies as above; ```; >>> dftd3 s22_16.xyz; _________________________________; ; | DFTD3 V3.1 Rev 1 |; | S.Grimme, University Bonn |; | October 2015 |; | see dftd3 -h for options |; _________________________________; ; Please cite DFT-D3 work done with this code as:; S. Grimme, J. Antony, S. Ehrlich and H. Krieg,; J. Chem. Phys. 132 (2010), 154104; If used with BJ-damping cite also; S. Grimme, S. Ehrlich and L. Goerigk,; J. Comput. Chem. 32 (2011), 1456-1465; For DFT-D2 the reference is; S. Grimme, J. Comput. Chem., 27 (2006), 1787-1799; For DFT-D3M or DFT-D3M(BJ) the reference is; D.G.A. Smith, L.A. Burns, K. Patkowski, and ; C.D. Sherrill, J. Phys. Ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1407:220,interface,interface,220,https://psicode.org,https://github.com/psi4/psi4/issues/1407,1,['interface'],['interface']
Integrability,This issue is adressed in https://github.com/psi4/psi4/pull/1133; I did not use the GridIterator interface as the memory overhead of passing the complete grid from python is currently neglibible. ; Also only one of the Grid functions is converted. Converting the others after the split will be trivial.; Therefore closing the issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1116#issuecomment-414577458:97,interface,interface,97,https://psicode.org,https://github.com/psi4/psi4/issues/1116#issuecomment-414577458,1,['interface'],['interface']
Integrability,"This issue is solvable, but I'm not sure how good the end result will be. The code needs to be changed so that it. 1. determines the number of alpha and beta electrons in the new wave function; 2. assembles the occupied orbitals in the old basis based on the number of electrons in the two calculations; 2.1. if the number of electrons matches, everything is fine and the occupied orbitals are used as-is; 2.2. if the new calculation has K fewer electrons, then the code must drop the K lowest-lying orbitals from the input; 2.3. if the new calculation has K more electrons, then the guess fails, a warning message is printed out and the code switches to e.g. SAD; 3. compute the projection with the given input orbitals",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-664898846:607,message,message,607,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664898846,1,['message'],['message']
Integrability,"This issue was originally about issues with converging an SCF, and now I'm not sure what it's about. I need you to re-focus the issue. Are you saying that for the same geometry, Psi is giving different energies/gradients depending on which optimization run it was part of?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957955746:221,depend,depending,221,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957955746,1,['depend'],['depending']
Integrability,"This job completes just fine for me on the current master, although with some entirely reasonable warning messages. What version of Psi4 are you using? My guess is that you're using 1.7 or earlier, and #2619 fixed this bug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2858#issuecomment-1397482999:106,message,messages,106,https://psicode.org,https://github.com/psi4/psi4/issues/2858#issuecomment-1397482999,1,['message'],['messages']
Integrability,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:1073,depend,depends,1073,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576,1,['depend'],['depends']
Integrability,"This looks great! Thanks for figuring out this very tricky problem. A long time ago, @fevangelista and I figured out the machinery to map symmetry-dependent arrays like `DOCC` and `SOCC` into the appropriate subgroups. Would you mind quickly testing to see if `DOCC` can be specified in c2v symmetry with your current version? If not, we'll have to open a follow up PR to make sure this mapping is done (I think it's best left out of this PR to avoid scope creep).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-446624242:147,depend,dependent,147,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-446624242,1,['depend'],['dependent']
Integrability,"This might be rather an issue for https://github.com/piecuch-group/cct3 but will affect psi4 users nonetheless. The following is a minimal input:; ```; import cct3. set {; basis cc-pVDZ; ints_tolerance 1e-11; }. molecule eins {; units bohr; symmetry c1; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. molecule zwei {; units bohr; symmetry c1; h -2.514213562373 -1.000000000000 0.000000000000; h -2.514213562373 1.000000000000 0.000000000000; h 2.514213562373 -1.000000000000 0.000000000000; h 2.514213562373 1.000000000000 0.000000000000; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. energy(""cr-cc(2,3)"",molecule=eins); clean(); energy(""cr-cc(2,3)"",momlecule=zwei); ```. The error is:; ```; (base) kruse@sphinx1 /scratch/kruse/CCT3 $ psi4.git -v -s . -n 16 input.dat; forrtl: severe (104): incorrect RECL= specifier value for connected file, unit 250, file /scratch/kruse/CCT3/PA; Image PC Routine Line Source; libifcoremt.so.5 00002AD86592CE75 for__io_return Unknown Unknown; libifcoremt.so.5 00002AD8659522E0 for_open Unknown Unknown; cct3.so 00002AD865620EDF integrals_mp_load Unknown Unknown; cct3.so 00002AD86562C3EB solver_mp_solve_c Unknown Unknown; cct3.so 00002AD8655F75A6 driver_mp_run_cc_ Unknown Unknown; cct3.so 00002AD86563683E cc_ Unknown Unknown; cct3.so 00002AD85AD0AAE1 cct3 Unknown Unknown; ```. The `PA` file is opened for _writing_ with a record length `recl` using orbital dimensions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009:1196,Rout,Routine,1196,https://psicode.org,https://github.com/psi4/psi4/issues/2009,1,['Rout'],['Routine']
Integrability,"This problem was already mentioned in passing here: https://github.com/psi4/psi4/issues/662#issuecomment-475861476. This is a simple example input file showing the problem:. ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); ```. I have set my `$PSIPATH` to a directory containing the basis set file (downloaded from EMSL):. ```bash; ll $PSIPATH; total 2.1M; drwxr-xr-x. 2 toon toon 4.0K Apr 29 17:13 .; drwxr-xr-x. 7 toon toon 4.0K Apr 29 16:34 ..; -rw-r--r--. 1 toon toon 2.1M Apr 29 15:49 ano-rcc.gbs; ```. When running Psi4 on this input, I get the following error message:. ```; Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filename(basgbs); File ""/home/toon/miniconda3/envs/p4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613:626,message,message,626,https://psicode.org,https://github.com/psi4/psi4/issues/1613,1,['message'],['message']
Integrability,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:674,contract,contract,674,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885,4,['contract'],"['contract', 'contracts']"
Integrability,"This sounds nice! Python accessibility of amplitudes would be a great new feature. And cleanup from C structs towards Wavefunction object would also be welcome. The proposed layer of abstraction between DPD and libpsio is perhaps worth some discussion. libpsio is, itself, a layer of abstraction between Psi and low-level I/O. I think there is an advantage of having a centralized library that all of Psi is supposed to use to do I/O. Then, improvements can be done in only one place (that library), unless there is a design problem with that library's API. The I/O library could be improved to use HDF5, or whatever, on the backend. So, do we need an all-new interface between the CC libraries and libpsio, or is it just that libpsio itself needs its backend replaced?. Best,. David. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 10:33:45 AM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: [psi4/psi4] Coupled Cluster Rewrite (#1247). We (@amjames<https://github.com/amjames> and @robertodr<https://github.com/robertodr>) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending PR #1061, Expose wavefunction and amplitudes to python<https://github.com/psi4/psi4/pull/1061> available satisfying the constraints and comments offered by @dgasmith<https://github.com/dgasmith> and @amjames<https://github.com/amjames>.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:. * It will be possible to experiment with these quantities easily.; * Writing and reading amplitudes to file (HDF5<https://portal.hdfgroup.org/display/support>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:660,interface,interface,660,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['interface'],['interface']
Integrability,This was done to force linear dependencies on a small system for debugging. The forum post has the originally reported molecule where 1 MO is removed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1998#issuecomment-683270457:30,depend,dependencies,30,https://psicode.org,https://github.com/psi4/psi4/issues/1998#issuecomment-683270457,1,['depend'],['dependencies']
Integrability,"This whole thread was very useful. I was able to create a conda environment with the latest psi4, openff-toolkit, and openff-recharge using this yml. The only thing not really mentioned in this thread, or the psicode latest installation is pinning pydantic version 1.x. I was getting this error ; ```; `; __pydantic_self__.__pydantic_validator__.validate_python(data, self_instance=__pydantic_self__) TypeError: Array.validate_type() takes 2 positional arguments but 3 were given`; ```. from this line of code in my example ( i believe it, recharge may need to pin pydantic 1.x). ```; from openff.recharge.esp.storage import MoleculeESPRecord; qc_data_record = MoleculeESPRecord.from_molecule(; openff_mol_3D, conformer=conformer, grid_coordinates=grid, esp=esp, electric_field=None, esp_settings=qc_data_settings; ); ```. ```. name: psi4; channels:; - conda-forge; - conda-forge/label/libint_dev; dependencies:; - conda-forge::psi4>=1.8.2; - conda-forge::openff-toolkit; - conda-forge::openff-recharge; - conda-forge::pydantic<2. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752:898,depend,dependencies,898,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752,1,['depend'],['dependencies']
Integrability,This will be a nice interface to have!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699#issuecomment-521029898:20,interface,interface,20,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521029898,1,['interface'],['interface']
Integrability,"This won't be a comprehensive reply, just a getting-started one. In the beginning, there were lots o' blockers:; * no mkl; * no c++11; * no intel compiler capability for multiarch packages; * psi4 has dependencies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:201,depend,dependencies,201,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,2,['depend'],['dependencies']
Integrability,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7#issuecomment-19470461:697,message,message,697,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461,1,['message'],['message']
Integrability,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:166,integrat,integration,166,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492,4,"['depend', 'integrat']","['depends', 'integration']"
Integrability,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-170794065:260,depend,dependencies,260,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065,3,"['depend', 'interface']","['dependencies', 'interfaces']"
Integrability,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:880,depend,depending,880,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['depend'],['depending']
Integrability,"Time to start working on the Psi4 1.0 release notes, #hype! Please read through and update as needed @psi4/p4manage. Loosely organized at the moment, feel free to re-do. These notes span from the Psi4 beta5 release to the official Psi4 1.0 release.; ## User improvements; - Created binary linux distribution of Psi4 for users through conda; - Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - Al",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:468,wrap,wrapper,468,https://psicode.org,https://github.com/psi4/psi4/issues/367,2,['wrap'],['wrapper']
Integrability,"To answer your probable follow-up question, we hope to have a new Conda package soon. It depends on a tricky bug fix I'm working on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1782#issuecomment-575400886:89,depend,depends,89,https://psicode.org,https://github.com/psi4/psi4/issues/1782#issuecomment-575400886,1,['depend'],['depends']
Integrability,"To be clear, if the MKL_DEBUG_CPU_TYPE=5 envvar trick is used, all MKL functions will execute the AVX2 path, but if there are CPU dispatch routines inserted into the program by the Intel compiler, then code that is outside the MKL functions will probably still only use SSE2 when run on AMD CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633672888:139,rout,routines,139,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633672888,2,['rout'],['routines']
Integrability,"To cut down on the printing, you could use `core.be_quiet()` and `core.reopen_outfile()` depending on the print level",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791590947:89,depend,depending,89,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791590947,1,['depend'],['depending']
Integrability,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:217,interface,interface,217,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598,2,['interface'],['interface']
Integrability,"To expand on my request for changes a little more, the wording is problematic since the problem I believe you are getting at has nothing to do with the file being in cache, it has to do with the file-entry existing on disk. . Yes if the quantity is held in cache, the data is accessible right away, but if it is not held in cache you may still be modifying a non-zero quantity depending on how you manipulate the buffer later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267205350:377,depend,depending,377,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267205350,1,['depend'],['depending']
Integrability,"Transferred from [forums](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471). Awaiting a more complete report from user, but we can say some things already. A user is told that one of their matrices is not ""SPD"" during an open-shell SAPT0 computation, and the computation quits. The relevant lines in the code are [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libsapt_solver/usapt0.cc#L1462-L1466). I assume SPD is short for semi-positive definite. Action Items:; First, we need SAPT developers to translate the error message. Without that, the fix could be anything from writing an error message that tells the user what if anything they can do, or it could involve a change in the USAPT logic.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682:548,message,message,548,https://psicode.org,https://github.com/psi4/psi4/issues/1682,2,['message'],['message']
Integrability,"Transferred from the [forums](http://forum.psicode.org/t/regarding-cisd-calculation/1474). A user reported a CISD computation on a system with 190 orbitals and C2v symmetry that quit after ""Setting up CI strings"" with absolutely no error message. I reproduced this with a post-1.3.2 dev version of Psi on my cluster, in serial with 30 GB. (The original reporter is using an antique version of Psi.). @dgasmith pointed out that DETCI may have problems with a system of this size, but I'm not familiar enough with DETCI's computational costs to know if those problems would crash DETCI. At minimum, there should be an error message printed out. If there is an actual DETCI bug, that should ideally be fixed. My apologies to the person who has to do that.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1685:238,message,message,238,https://psicode.org,https://github.com/psi4/psi4/issues/1685,2,['message'],['message']
Integrability,"Transferred from the [forums](http://forum.psicode.org/t/sapt-dft-issues/1444). A user reports an SCF convergence failure during a SAPT(DFT) computation. While this _could_ be an example of a routine SCF convergence failure, the fact that it appears during SAPT(DFT) combined with how spectacular the convergence failure _is_ have me suspecting it's something more. When I run the user's input file on 1.3.2 release (see forum post), the failing SCF has iterations like this:; ```; @DF-RKS iter SAD: -2.88905500214392 -2.88906e+00 0.00000e+00 ; @DF-RKS iter 1: 0.79355642730661 3.68261e+00 8.89827e-02 DIIS ; @DF-RKS iter 2: -2.69913194172793 -3.49269e+00 1.70278e-02 DIIS ; @DF-RKS iter 3: 0.05174993763519 2.75088e+00 1.04154e-02 DIIS ; @DF-RKS iter 4: 4.56710002468099 4.51535e+00 8.67682e-02 DIIS ; @DF-RKS iter 5: 4.56708994805846 -1.00766e-05 8.67628e-02 DIIS ; @DF-RKS iter 6: 4.56706596773139 -2.39803e-05 8.67500e-02 DIIS; ```. The usual convergence tricks - playing with DIIS settings and damping - still leave a problem. Notice that iterations 1, 3, and 4 are terrible, going up in energy by _multiple Hartrees_ even after what should be a decent guess. The user reports that they are observing such problems for more complicated systems, but can reduce the problem to this two atom problem. You'd need to ask them to get the original systems, but this seems like a good starting point.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1684:192,rout,routine,192,https://psicode.org,https://github.com/psi4/psi4/issues/1684,1,['rout'],['routine']
Integrability,"Travis CI currently takes 2-6 (average 3) hours to complete depending on the current travis load, which is a bit on the long side. To help with this I am proposing that we reduce the number of build types from 15 to the following:; - Latest clang/gcc with both debug and release flags (4 cases); - Oldest supported clang/gcc with both debug and release flags (4 cases). It should be noted that travis CI typically runs the first 3-6 test cases immediately upon submission and then runs the rest in a general queue. The real time killer is when the 15th CI case does not start to run for 2-5 hours after initial submission. With the proposed changes we will hopefully be running through travis consistently in about an hour. . This will deteriorate our CI coverage a bit; however, I think this keeps with the CI spirit and should catch the corner cases that we really worry about. I am looking a bit into something like Docker in addition to Travis so that we can run a full test suite on a local box at the touch of a button. PS: Fiddling around with commits to practice squashing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237:60,depend,depending,60,https://psicode.org,https://github.com/psi4/psi4/pull/237,1,['depend'],['depending']
Integrability,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/452:341,interface,interfaces,341,https://psicode.org,https://github.com/psi4/psi4/issues/452,7,['interface'],['interfaces']
Integrability,"Turns out @robertodr's original `_EP_IS_EXTERNAL_PROJECT` error [was because](http://public.kitware.com/pipermail/cmake-developers/2015-April/025035.html) I moved all the external_* dependencies from `ExternalProject_Add(psi4-core ...) add_dependencies(psi4-core chemps2_external ...)` to `ExternalProject_Add(psi4-core DEPENDS chemps2_external ...)`, and CMake didn't learn to accept interface libs in that role until 3.3. So, I still rather want 3.3 because the DEPENDS looks tidier and the HDF5 version thing, but I can make 3.2 work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281446113:182,depend,dependencies,182,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281446113,6,"['DEPEND', 'depend', 'interface']","['DEPENDS', 'dependencies', 'interface']"
Integrability,"Two comments:; - `dlDF` is based off M05, you might want to try TPSS or SCAN.; - I am not really sure this clears our derivative code from problems. All meta functionals use the same integration code and could still be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-382383114:183,integrat,integration,183,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-382383114,2,['integrat'],['integration']
Integrability,"Two of the versions of Psi4 dependencies on your machine are incompatible with each other. For us to have any idea _why_ they are incompatible, we need to know how you got these dependencies in the first place. Did you try to build Psi from source? Did you try to install Psi4 with conda?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1080979081:28,depend,dependencies,28,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1080979081,2,['depend'],['dependencies']
Integrability,"Two rather immediate questions:; * Do we want to allow computing separate reference and correlation densities? We have some machinery for this in Psi starting [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L472), but no current code in Psi uses this. The alternative is that the caller code manually adds the reference 1PDM/2PDM/Lagrangian to the correlated values.; * The interface I'm currently planning for the 1RDM/Lagrangian is that the caller code passes a map from an array of orbital space labels to a SharedMatrix with the relevant 1RDM/Lagrangian block. This is what most codes have natively, the one exception being CC. Opinions on this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736#issuecomment-546491403:406,interface,interface,406,https://psicode.org,https://github.com/psi4/psi4/issues/1736#issuecomment-546491403,1,['interface'],['interface']
Integrability,"Unclear if it is a related, but running `make test` then leads to the following error:. > Traceback (most recent call last):; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/bin/psi4"", line 140, in <module>; import psi4; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/lib//psi4/__init__.py"", line 59, in <module>; raise ImportError(""{0}"".format(err)); ImportError: To be able to register buffer protocol support for the type 'psi4.core.CIVector' the associated class<>(..) invocation must include the pybind11::buffer_protocol() annotation!. Maybe I manually rebuild pybind11 incorrectly in my attempts to get psi4 compiled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273485753:404,protocol,protocol,404,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273485753,1,['protocol'],['protocol']
Integrability,"Unfortunately it looks like you just repushed the same changes. . First run, `git rebase -i HEAD~7`. You should see all of your changes plus a few more. Change all of your commits from ""pick"" to ""squash"" _except_ for your very first one where you want to switch to ""reword"" so that you can rephrase this message. Save this file, you will then get a chance to reword the squashed commits (I would). You can then run `git log --oneline` to make sure the history looks right. Also, examine a few files to make sure the correct changes are there. When you are ready to push, `git push origin master --force` will overwrite the history on the remote. If something goes wrong before you push you can reset these changes by `git reset --hard origin/master`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292#issuecomment-190452935:304,message,message,304,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-190452935,1,['message'],['message']
Integrability,"Unknown Unknown; python3.7 000056310E0CB107 _PyFunction_FastC Unknown Unknown; python3.7 000056310E1334B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19E29D PyRun_StringFlags Unknown Unknown; python3.7 000056310E142EB4 Unknown Unknown Unknown; python3.7 000056310E0CB789 _PyMethodDef_RawF Unknown Unknown; python3.7 000056310E0CBA31 _PyCFunction_Fast Unknown Unknown; python3.7 000056310E137795 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19D331 PyRun_FileExFlags Unknown Unknown; python3.7 000056310E19D523 PyRun_SimpleFileE Unknown Unknown; python3.7 000056310E19E655 Unknown Unknown Unknown; python3.7 000056310E19E77C _Py_UnixMain Unknown Unknown; libc-2.26.so 00007F895E88906A __libc_start_main Unknown Unknown; python3.7 000056310E142FF0 Unknown Unknown Unknown; Aborted; ```; ; </details>. I first actually tried to reproduce this using the very convenient MyBinder link on the front page in python, rather than with a psithon input file, but unfortunately because it's an uncaught C++ exception that doesn't actually get translated into a python exception, it just kills the jupyter kernel and no error message is reported to the jupyter client running in the browser. Appologies in advance if this is a duplicate bug report. The fact that the grid is missing is okay; that's #827 IIUC. But if possible, -- especially for usage of the Python interface rather than the command line program -- it would might be better if these exceptions were translated into python rather than such violent crashes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:5043,message,message,5043,https://psicode.org,https://github.com/psi4/psi4/issues/2080,2,"['interface', 'message']","['interface', 'message']"
Integrability,"Unmarking this as attached to any milestone. As noted in my previous message, this is a very difficult (and not pressing) bug to fix because we _really_ want to avoid touching wavefunction API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851#issuecomment-815284339:69,message,message,69,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-815284339,1,['message'],['message']
Integrability,Update dependencies for Windows,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124:7,depend,dependencies,7,https://psicode.org,https://github.com/psi4/psi4/pull/1124,1,['depend'],['dependencies']
Integrability,"Update that I've got the interface modernized to named tweaks, and I'm working on the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-763229656:25,interface,interface,25,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-763229656,1,['interface'],['interface']
Integrability,"Update to ""Interface to Numpy""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2089:11,Interface,Interface,11,https://psicode.org,https://github.com/psi4/psi4/pull/2089,1,['Interface'],['Interface']
Integrability,"Update: testing is currently made very difficult by an issue with exception messages not propagating out of the threaded neighborhood of https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/aio_handler.cc ; But it was a good idea to actually try it, because I have found another corner case _even beyond this issue_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304827495:76,message,messages,76,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304827495,1,['message'],['messages']
Integrability,Updates MRCC interface to allow perturbative methods with ROHF reference.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634:13,interface,interface,13,https://psicode.org,https://github.com/psi4/psi4/pull/634,1,['interface'],['interface']
Integrability,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272:132,message,message,132,https://psicode.org,https://github.com/psi4/psi4/issues/2272,1,['message'],['message']
Integrability,Version 1.4 will include a new integral library https://github.com/psi4/psi4/pull/1721 with much improved screening for 1e-integrals. That will give a decent speed-up already. The interface to ddCOSMO mentioned above is still planned and high on the priority list.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-583252363:180,interface,interface,180,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-583252363,1,['interface'],['interface']
Integrability,Very bad linear dependencies may lead to NaN or infinite condition no,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1844:16,depend,dependencies,16,https://psicode.org,https://github.com/psi4/psi4/pull/1844,1,['depend'],['dependencies']
Integrability,WIP: Simint integration in Psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/533:12,integrat,integration,12,https://psicode.org,https://github.com/psi4/psi4/pull/533,1,['integrat'],['integration']
Integrability,"We have a clear policy (at least for what was originally added) of using optimized contractions from EMSL. From [Kirk Peterson's website](http://tyr0.chem.wsu.edu/~kipeters/basis.html), we don't have that option, so we get what he supplies. Not sure what to do about it, unless implement a fn to re-optimize contractions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307878490:83,contract,contractions,83,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307878490,4,['contract'],['contractions']
Integrability,"We intend to avoid conda as it would make the application run slower. Do you; mean dftd3-python pkg from conda forge is the only option at the moment?; I was able to use the interface to grimme's dftd3 compiled through the source, ; however, to use the three-body becke johnson damping it is the simple dftd3 we need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755:174,interface,interface,174,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755,2,['interface'],['interface']
Integrability,"We might be talking about two different things. @loriab is talking about `add_library`, while I'm talking about `target_link_libraries`. This is my understanding (although someone can correct me if I'm wrong): when doing a `target_link_libraries`, INTERFACE will only add it to the library's interface. PUBLIC will actually make the project link to the target library. Ie. ```; target_link_libraries(mints PUBLIC erd); ```. will add anything that is part of the erd's interface to mints (headers, libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files will be compiled with erd's include directory, etc). It will also add erd to mints interface (anything linked to mints will pull in the erd includes). On the other hand. ```; target_link_libraries(mints INTERFACE erd); ```. will only add it to mint's interface (and not actually cause header paths, etc, to be added to the command line for files in mints, but will be added for libraries depending on mints).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237727449:248,INTERFACE,INTERFACE,248,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237727449,8,"['INTERFACE', 'depend', 'interface']","['INTERFACE', 'depending', 'interface']"
Integrability,"We now have [a reproducible example of the problem](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471/4?u=jmisiewicz)! As @jgonthier suspected, this indicates a negative eigenvalue in the orbital hessian. The following input will run into the problem. Stability analysis indicates a tiny negative eigenvalue in the MO hessian. When you follow the instability, SAPT completes with no problems. The error message should be rewritten to suggest the user adds stability following. If we want to collect pathological test cases for future SCF work, we should also recommend they post their failing inputs on the forums. ```; molecule {; 0 1; C -1.39179 -0.20044 0.00015; Cl -0.43716 1.29883 0.00009; F -1.08662 -0.91763 1.08111; F -1.08730 -0.91729 -1.08123; H -2.44780 0.05805 0.00053; --; 0 2; Cl 2.22327 -0.26007 -0.00012; }. set {; basis 6-311++G**; reference uhf; soscf true; soscf_max_iter 30; }. energy('sapt0'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893:417,message,message,417,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893,1,['message'],['message']
Integrability,"We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were hopeful. Were we mistaken or was it not finished or not tested, or what’s the status. Anyway ok, can re-route through Ugur’s code. Lori. > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com wrote:; > ; > No UHF-MP2 gradients in my code. Sorry.; > ; > -Rob; > ; > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com <mailto:notifications@github.com>>; > wrote:; > ; > > for df-mp2, these are the cases:; > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > rohf energy: we think this may be in Rob's code, but not verified vs other; > > codes; > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > codes; > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > > w/o subsequent opt; > > ; > > ticket task: verify the above with the code and with the authors. if; > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > anything looks to hard or want to defer, create a new ticket for it, and do; > > all you can to close out this one.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > <https://github.com/psi4/psi4public/issues/107 <https://github.com/psi4/psi4public/issues/107>>.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/107#issuecomment-121080590.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121081025:169,rout,route,169,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081025,2,['rout'],['route']
Integrability,"We should use a more informative/tailored error message. But the reason it can't drop a wfn file is because non-Hartree--Fock Hessians are computed by finite difference, so there's at most a dummy wfn with mol, basis, qcvariables, etc. No goodies like MO coefficients or occupations. What piece of data were you seeking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068#issuecomment-1786385522:48,message,message,48,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1786385522,1,['message'],['message']
Integrability,"We'll also need to consider [interface codes](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/interface_dftd3.py#L152-L157) that do file writing, too. Is it wanted to keep only mpi process == 1 writing the files or to keep the filenames unique so it doesn't matter if N mpi processes are writing the files? Or either, depending on the situation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548#issuecomment-266885278:29,interface,interface,29,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266885278,2,"['depend', 'interface']","['depending', 'interface']"
Integrability,"We'll be wrapping up libxc 5.1.0 in December, which means it could be pulled in Psi4 1.4. The update is strongly recommended, since it solves a huge list of issues in 5.0.0, see https://gitlab.com/libxc/libxc/-/issues/186, as well as introduces new functionals that users may be interested in, especially r2SCAN by Furness et al. The update should be very easy, since 5.1.0 will be API compatible with 5.0.0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2057:9,wrap,wrapping,9,https://psicode.org,https://github.com/psi4/psi4/issues/2057,1,['wrap'],['wrapping']
Integrability,"We've had a recent forum request to support `.wfx` files for interface to QTAIM programs. This seems like a relatively simple Python project, and a good one for a new developer. You can see the file format specification [here](http://aim.tkgristmill.com/wfxformat.html).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2341:61,interface,interface,61,https://psicode.org,https://github.com/psi4/psi4/issues/2341,1,['interface'],['interface']
Integrability,"Weirdly, cc44 was failing with `-n2` as expected a couple weeks ago, but today it runs just fine. Threads and low mem appear to be setting correctly. Possibly something with the extra SCF routing control or composite JK.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2576#issuecomment-1540837654:188,rout,routing,188,https://psicode.org,https://github.com/psi4/psi4/issues/2576#issuecomment-1540837654,1,['rout'],['routing']
Integrability,"Well, I wholly approve of this sentence: ""Please note that ; sSAPT0 is thus not the same as requesting `exch_scale_alpha 3.0`."" For the psivars, I think I'll just compute from the keyword in the driver, same as you do and pass it along the the qcdb routine (which doesn't access `psi4` commands. Below is what you're doing I think. ``` python; alpha = psi4.get_option('SAPT', 'EXCH_SCAL_ALPHA'); scale = 1.0 if alpha is True else (0.0 if alpha is False else alpha); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/248#issuecomment-183819601:249,rout,routine,249,https://psicode.org,https://github.com/psi4/psi4/pull/248#issuecomment-183819601,1,['rout'],['routine']
Integrability,"Well, the branches of the hidden repo are so developers can store code that's vulnerable to scientific scooping. And the master of the hidden repo is so we can integrate without being overly concerned about breaking things for people outside email's reach. . That said, you're right that we don't have the synching procedure automated so that public is often a couple weeks behind. After the May round of conferences, we're going to set up a continuous integration box so that we can do a nightly or weekly push to public if safe. . Sent from my iPhone. > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > ; > @loriab why do you actually work with a hidden repo? It's quite annoying that all kinds of stuff is fixed/changed but not visible to us.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98490617:160,integrat,integrate,160,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98490617,2,['integrat'],"['integrate', 'integration']"
Integrability,"Well, yes, he relative sizes would effect efficiency of contraction order,; but I don't see why they would make the code not working at all... I; suppose this restriction is in there somewhere but I don't see why. On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:. @CDSherrill <https://github.com/cdsherrill> @edeprince3; <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; assumption that's made in the contraction order? If nvirt < ndocc then it; might be more efficient to contract first over the occupied orbitals?. —; You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub; <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339448378:56,contract,contraction,56,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339448378,3,['contract'],"['contract', 'contraction']"
Integrability,What happens if you use a tighter integration grid?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075911725:34,integrat,integration,34,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075911725,1,['integrat'],['integration']
Integrability,What is left for this PR and what level of integration are you shooting for in this first pass?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552262003:43,integrat,integration,43,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552262003,1,['integrat'],['integration']
Integrability,"What you say seems exact. Just to be sure: when you are in ""developer mode"" (you get the library from the GitHub repo, not the tar.gz), when you run `make` Emacs parses an org-mode file and creates a JSON from the tables. Then, this JSON file is read by a Python script to generate C functions and headers, and the Fortran and Python interfaces. The names of the functions are `trexio_<group>_write_<attribute>`. So you can edit the trex.org file to add extra info to the JSON. There are 2 possibilities:; 1. You create at the top of the file, just before the Metadata section a block like:; ```python; #+begin_src python :tangle trex.json; ""psi4mp2"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]],; ""t1"" : [ ""float"", [ ""mo.num"", ""mo.num"" ]],; },; ""psi4ccsd"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]]; },; #+end_src; ``` ; 2. Or you create a section in the Org-mode syntax like; ```text; * Psi4; This section documents the temporary arrays specific to psi4. ** DFMP2 (psi4dfmp2 group); Here, we specify the data for DFMP2.... [\; t = \sum_{ij} ...; \]; \[; W = \sum_{ijab} ...; \] . #+NAME: psi4dfmp2; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |; | ~t~ | ~float~ | ~(mo.num,mo.num)~ | t in the equation above |. #+CALL: json(data=psi4dfmp2, title=""psi4dfmp2""). ** CCSD (psi4ccsd group); Here, we specify the data for CCSD.... #+NAME: psi4ccsd; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |. #+CALL: json(data=psi4ccsd, title=""psi4ccsd"", last=1). ```; Now if in Emacs you execute ""Ctrl-C Ctrl-C"" when your cursor is on the line ""CALL:json ..."", it will automatically genera",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918:334,interface,interfaces,334,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918,1,['interface'],['interfaces']
Integrability,"What's strange is that DFHelper thinks it has 19 gib, it only needs 5 gib, but it insists on using its disk machinery. It could just be a printing error where the code is printing out the wrong message. The calculation should give you a ""timer.dat"" file too. can you post that as well? That one has timers around the disk writes, so we can see if they're actually happening.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503207470:194,message,message,194,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503207470,1,['message'],['message']
Integrability,"When I passed OpenMP_CXX_LIBRARY_DIRS (correctly!) to cmake, it found libiomp5.so fine during the cmake step but then the build failed in the step configuring psi4-core where, presumably, the lapack detection cmake routines run again. At that point, OpenMP_CXX_LIBRARY_DIRS isn't set and it fails to find iomp5. I got past that point of the build by physically adding the relevant path into the HINTS list that includes ${OpenMP_CXX_LIBRARY_DIRS} in FindMathOpenMP.cmake (not exactly a portable solution but hopefully helps locate the problem). ```; $ ldd core.so ; linux-vdso.so.1 (0x00007ffc19d77000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x000014c592535000); libmkl_rt.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_rt.so (0x000014c591e88000); libiomp5.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64/libiomp5.so (0x000014c591aad000); libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x000014c59188f000); libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x000014c59150e000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x000014c59117b000); libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x000014c590f63000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x000014c590ba9000); /lib64/ld-linux-x86-64.so.2 (0x000014c595e3e000); ```. No dependence on libgomp.so and ""make test"" has passed 408/411 tests (2 longs ones still running, and cubeprop-esp failed due to a slight difference in the ESP cubes, although I've seen that fail before).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271:215,rout,routines,215,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271,2,"['depend', 'rout']","['dependence', 'routines']"
Integrability,"When I run psi4 on a remote computer with `psi4 & disown` and exit before the job is complete, it crashes with messages like the following. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1360, in optimize print('Optimizer: Optimization complete!'); ```. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1727, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1466, in hessian; return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver_cbs.py"", line 1955, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs)File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; _process_displacement(; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 167, in _process_displacement; sys.stdout.flush(); ```. It seems to work if I add a redirect of the output to /dev/null, `psi4 > /dev/null & disown`, but I was wondering if there would be a way to fix this inside of psi4 (might require the removal of all print statements). It took me way too long to figure out this problem, so if nothing else, I hope that posting this issue will help others with this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1983:111,message,messages,111,https://psicode.org,https://github.com/psi4/psi4/issues/1983,1,['message'],['messages']
Integrability,"When I run this input file, the error message I get is `Killed: 9` which [often signifies being out of memory](https://stackoverflow.com/a/33978359). You've only allowed 2GB RAM for the entire program. We also know `DFHelper Memory: AOs need 0.898 GiB`. I haven't looked at the analytic hessian code, but being out of memory seems like the most likely culprit here. We can add ""get memory estimate of analytic hessian and reduce if possible"" to our to-do list, but for your computation, all you can do is give it more memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925013890:38,message,message,38,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925013890,1,['message'],['message']
Integrability,"When PSI4 updates in miniconda, the testing dialogue,. ```; Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst.......................................................PASSED; SAPT0 Eexch.......................................................PASSED; SAPT0 Eind........................................................PASSED; SAPT0 Edisp.......................................................PASSED; SAPT0 Etotal......................................................PASSED; ```. prints as a single line which is wrapped by the terminal:. ```; Nuclear Repulsion Energy..........................................PASSED SAPT0 Eelst....; ...................................................PASSED SAPT0 Eexch...................; ....................................PASSED SAPT0 Eind...................................; .....................PASSED SAPT0 Edisp.................................................; ......PASSED SAPT0 Etotal......................................................PASSED; ```. It seems like there should be a newline after each ""PASSED"". I updated the post-link.sh script to print the test dialogue with cat instead of echo. This seems to fix the problem on my machines (Ubuntu and RedHat with Gnome terminal and Konsole). While I was updating the printing, I also added comments and made the script delete the temporary files after PSI4 is done running.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/191:542,wrap,wrapped,542,https://psicode.org,https://github.com/psi4/psi4/pull/191,1,['wrap'],['wrapped']
Integrability,"When passing the -DCMAKE_INSTALL_PREFIX=/home/user/directory at the top-level build this flag does not get passed on to cmake processes that are called by the main, like in my case pybind11. As a result cmake tries to install that package in /usr/local. Is there any way around it other than manually installing all the dependencies?; ; ```; [100%] Built target pybind11_tests; Install the project...; -- Install configuration: ""MinSizeRel""; -- Installing: /usr/local/include/pybind11; CMake Error at cmake_install.cmake:41 (file):; file INSTALL cannot make directory ""/usr/local/include/pybind11"":; Permission denied; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548:320,depend,dependencies,320,https://psicode.org,https://github.com/psi4/psi4/issues/1548,1,['depend'],['dependencies']
Integrability,"When requesting the wavefunction as part of the result via the protocol in QCEngine only the `orbitals_and_eigenvalues` option works successfully. I think this is due to an error in the returned dictionary here https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/schema_wrapper.py#L324.I think this line should say `""density_a"": ""scf_density_a"",`. QCEngine error:; ```; QCEngine Unknown Error: Traceback (most recent call last):; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib//python3.7/site-packages/psi4/driver/schema_wrapper.py"", line 400, in run_qcschema; ret = qcel.models.Result(**ret_data, stdout=_read_output(outfile)); File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 520, in __init__; super().__init__(*args, **kwargs); File ""pydantic/main.py"", line 344, in pydantic.main.BaseModel.__init__; File ""pydantic/main.py"", line 900, in pydantic.main.validate_model; File ""pydantic/fields.py"", line 556, in pydantic.fields.ModelField.validate; File ""pydantic/fields.py"", line 732, in pydantic.fields.ModelField._apply_validators; File ""pydantic/class_validators.py"", line 280, in pydantic.class_validators._generic_validator_cls.lambda4; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 463, in _wavefunction_protocol; ret_wfn[key] = wfn[key]; KeyError: 'scf_density_ba'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1987:63,protocol,protocol,63,https://psicode.org,https://github.com/psi4/psi4/issues/1987,1,['protocol'],['protocol']
Integrability,Which is essentially what the wrappers I wrote do.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/155#issuecomment-126341283:30,wrap,wrappers,30,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-126341283,1,['wrap'],['wrappers']
Integrability,"While testing out some enhancements to third-order SAPT, Jonathan Waldrop and I seem to have found a bug in the E(30)ind implementation in psi4/psi4/src/psi4/libsapt_solver/ind30.cc. The E(30)ind correction is given by Eq. (72) of JCP 125, 154107 (2006), which stems from evaluating the matrix elements in Eq. (75) using the second-order induction amplitudes in Eq. (79). Psi4 proceeds slightly differently, by actually evaluating the induction amplitudes from Eq. (79) (as far as I can see, the code in psi4/psi4/src/psi4/libsapt_solver/amplitudes.cc matches Eq. (79) exactly) and contracting them with the \omega electrostatic potential matrix elements in psi4/psi4/src/psi4/libsapt_solver/ind30.cc in SAPT2p3::ind30(). The problem is that this algorithm accounts for the first 2 matrix elements in Eq. (75) but not for the last one, <VS_AS_B>. Unless I understand something incorrectly, the Psi4 code is missing the <VS_AS_B> contribution in E(30)ind. Going now back to Eq. (72), it is easy to prove that <VS_AS_B>=4s^r_a v^{ab}_{rs} s^s_b, that is, it contributes a quarter of the last term in Eq. (72). Our working hypothesis was that, because of the omission of this term, E(30)ind programmed in Psi4 has the last term in Eq. (72) multiplied by 12 instead of 16. Therefore, Jonathan modified his Psi4NumPy E(30)ind code to include this last term with the incorrect factor of 12, and now his values are matching Psi4 perfectly! In other words, we are quite certain that the Psi4 implementation includes the last term in Eq. (72) with an erroneous factor of 12 instead of 16. Fortunately, this doesn’t affect the SAPT2+(3) or SAPT2+3 results that also include delta HF, but it will (slightly) affect the third-order SAPT results computed without delta HF. I think the E(30)ind,resp code is fine but the wrong E(30)ind will slightly affect the scaled approximated value of E(30)exch-ind,resp. Please let me know if I need to explain anything better or if I can be of any further help. All the best,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1677:582,contract,contracting,582,https://psicode.org,https://github.com/psi4/psi4/issues/1677,1,['contract'],['contracting']
Integrability,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901:95,depend,dependent,95,https://psicode.org,https://github.com/psi4/psi4/issues/901,1,['depend'],['dependent']
Integrability,"Whoops,. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178858441:23,Integrat,Integrate,23,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178858441,2,"['Integrat', 'rout']","['Integrate', 'routines']"
Integrability,"Why did the matrices come out lower/upper diagonal before, how is that fixed now? Does the integral routine only fill one half when the basis sets are the same?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2986#issuecomment-1591433295:100,rout,routine,100,https://psicode.org,https://github.com/psi4/psi4/pull/2986#issuecomment-1591433295,1,['rout'],['routine']
Integrability,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:876,Rout,Routine,876,https://psicode.org,https://github.com/psi4/psi4/issues/2080,1,['Rout'],['Routine']
Integrability,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110183382:753,wrap,wrap,753,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382,2,['wrap'],['wrap']
Integrability,"Wondering if it mightn't be better to just continue routing everything with a `/` to `driver_cbs._cbs_gufunc` only now with an extra kwarg `cbs_allowed=True` that is false for `def properties()`. I worry about not breaking (or complicating) recursive driver cases (where cbs and nbody function re-enter energy, hessian, properties etc. after being broken into smaller pieces (like `mp2/cc-pv[dt]z` --> `mp2/cc-pvdz`)).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379562840:52,rout,routing,52,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379562840,1,['rout'],['routing']
Integrability,"Wondering what's the status of 1.4 - AFAIK there was a paper out describing it, yet the latest (only) alpha release is over a year old. Do you have timeframe for 1.4? For Debian, I think I would need to package a couple more new dependencies which takes a while, so if it won't ship in 2020 anyway, it might not need to be rushed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-683409888:229,depend,dependencies,229,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-683409888,1,['depend'],['dependencies']
Integrability,"Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302490589:153,integrat,integrating,153,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302490589,1,['integrat'],['integrating']
Integrability,Would it make sense to add a `qc_module adcc` in this case?; Then a new `select_adc` in proc.py could manage both the (old) `run_adc` and `run_adcc`. . Though having an optional/external `qc_module` is unprecedented I think. --. Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547800055:254,rout,routine,254,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547800055,1,['rout'],['routine']
Integrability,Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1305901307:95,depend,dependence,95,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1305901307,1,['depend'],['dependence']
Integrability,"Would you post the input that triggered this, please? I had thought we had the disk/mem routing printing right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503136419:88,rout,routing,88,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503136419,1,['rout'],['routing']
Integrability,"Wraps new lapack function tests in a Fortran_ENABLED block; and resolves OpenMP linking issues. Ultimately, we'd want to change the detection from a Fortran function to a C function. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1342:0,Wrap,Wraps,0,https://psicode.org,https://github.com/psi4/psi4/pull/1342,1,['Wrap'],['Wraps']
Integrability,X2C Linear Dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2201:11,Depend,Dependencies,11,https://psicode.org,https://github.com/psi4/psi4/issues/2201,1,['Depend'],['Dependencies']
Integrability,X2C linear dependencies?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868:11,depend,dependencies,11,https://psicode.org,https://github.com/psi4/psi4/issues/868,1,['depend'],['dependencies']
Integrability,"XC contains an implementation of the sn-LinK algorithm, a seminumerical method very similar to COSX for computing the exact exchange term (i.e., the K matrix). Like the XC components of GauXC, sn-LinK also has support for GPU execution. At PsiCon 2023, it was noted that GauXC's sn-LinK algorithm could be interfaced to Psi4 through the `CompositeJK` framework. This would give Psi4 its first-ever instance of noncommercial GPU support for the JK construction process. And that is the goal of this PR - interfacing Psi4 to GauXC's sn-LinK code via `CompositeJK`. This interface is implemented primarily via a new `SplitJK` derived class, `snLinK`, which contains the guts of the interface to GauXC. The `snLinK` constructor parameterizes and constructs the `GauXC::XCIntegrator` object and all related objects (e.g., load balancer, molecular weights partitioner), as well as other auxiliary work such as defining the GauXC execution space. `snLinK::build_G_component` constructs the K matrix from the input density via the GauXC integrator's `eval_exx` function. `build_G_component` also handles fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:1341,integrat,integrator,1341,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['integrat'],['integrator']
Integrability,"XC_WB97M_V: 1.00E-13 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 2115829; Total Blocks = 14225; Max Points = 256; Max Functions = 1539; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-33 entry C line 198 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 34-89 entry H line 18 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 90-101 entry N line 258 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 102-106 entry O line 318 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped). ```. </details>. CPU",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:12245,Rout,Routine,12245,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Rout'],['Routine']
Integrability,"Yea, this one is on us. We need to talk a bit about how to make operations like you are showing easier. We were only thinking of -D when originally building this interface, but allowing a bit more flexibility when mixing these functionals together would be useful. The other option is to use a function generator in `custom_hyb_funcs.py` or `superfuncs.py` that loops over all nl `dash_params`, generates a new function, and appends it the dictionary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-364492929:162,interface,interface,162,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-364492929,1,['interface'],['interface']
Integrability,"Yeah the not defined option is best. The extra printing looks good. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 29, 2016 5:11 AM, ""Lori A. Burns"" notifications@github.com wrote:. > I like the options-processing macros, @ryanmrichard; > https://github.com/ryanmrichard.; > ; > Here you meant AND, yes? Or even better, if(NOT DEFINED ${variable})?; > https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11; > ; > You may want to copy Psi4Macros from libint back over to psi4 (diff here:; > loriab/libint1@e992700; > https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff); > as I fixed that processing problem, expanded to bool options, elaborated; > printing, and tested a range of input values/specification routes.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-236132448, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi4KbNA_LZ9m3xza9XqeG7EkicSaDks5qacPBgaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236171587:797,rout,routes,797,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236171587,1,['rout'],['routes']
Integrability,"Yeah, it seems like the simple REST interface doesn't require a queue for simple tasks; substructure searches and conformer stuff seems to generate a ticket, as before. I learned all I know from scanning the document linked above, so I'm far from an expert. I did a little testing with both Python versions and it _seems_ to be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/507#issuecomment-258979667:36,interface,interface,36,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979667,2,['interface'],['interface']
Integrability,"Yeah, that ""fc not implemented for oo"" message is of module scope. That's not unreasonable for a module author to write, but it is harder to interpret b/c of the known connection btwn occ/dfocc. And reasonably impossible for an outsider who sees psi as a cohesive entity to interpret. Some mention in the docs would be nice. But the scalable way forward as I see it is to add ae/fc to managed methods like https://github.com/psi4/psi4/pull/1850/files#diff-dbf22cd80d16f6d8ef8250145a6d91bfR153 and to expand explicit testing for NYI https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R154. That way, a user who doesn't specify a module will get a ""can't do"" at the driver level and module authors can stay module-local in their messaging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612132054:39,message,message,39,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612132054,1,['message'],['message']
Integrability,"Yeah, the issue is that https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L699` improperly wraps around when `memory_` < `2*two_memory`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/716#issuecomment-308205184:146,wrap,wraps,146,https://psicode.org,https://github.com/psi4/psi4/issues/716#issuecomment-308205184,1,['wrap'],['wraps']
Integrability,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204212411:181,message,message,181,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411,2,['message'],['message']
Integrability,"Yeah, we’re using a released libxc4. But that contains an unfavored (by them) fix that has to be hand applied to each release. Their favored fix is in their master but can’t be released because it breaks ABI so has to wait until libxc5. This PR has the interface to the libxc5 fix. Peculiar story but yes, still relevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-529103526:253,interface,interface,253,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-529103526,1,['interface'],['interface']
Integrability,"Yeah. The C matrix is contracted against the AO ERI integrals, so you need to pass in C matrices in the AO basis. I missed that the first time. 😅",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2184#issuecomment-845956657:22,contract,contracted,22,https://psicode.org,https://github.com/psi4/psi4/pull/2184#issuecomment-845956657,1,['contract'],['contracted']
Integrability,"Yeh, the MRCC wrapper code requires that the traditional two electron integrals be on disk (not there with DF methods or integral direct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35#issuecomment-35249235:14,wrap,wrapper,14,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-35249235,1,['wrap'],['wrapper']
Integrability,"Yep, gcc version is your problem. Note this part of the cmake output:. > CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; > Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; > this build won't work without GCC intervention:; > https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; > Call Stack (most recent call first):; > CMakeLists.txt:119 (include). Acquire a >=4.9 gcc according to that link (or any way you care to) and pass `gcc-name` and `gxx-name` to icc/icpc as Daniel and that link advised. After that, the cmake warning won't go away (which is why I couldn't make it a fatal error), but it will compile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733493:125,message,message,125,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733493,1,['message'],['message']
Integrability,"Yep, which brings us (well, me) to the actual moving. I'm planning on making a PR _very_ early into the development process for this, because the interfacing requirements are murky, and I want to make sure that what I'm preparing is suitable for this ""variety of reasons"" we want this code moved. I'm assuming the limitations of the current interface will be clearer once I start playing with the code. Since I don't have to wrap my head around pointers and references for the rest of this issue, I'm hoping progress will be a bit faster.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-359186675:341,interface,interface,341,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-359186675,4,"['interface', 'wrap']","['interface', 'wrap']"
Integrability,"Yes that's exactly the error I had. With that fix, it may be possible at some point to have, for example, libint/libderiv as dependencies of libmints only, and then anything depending on libmints will pull in libint headers. That's something to play with (that was your original intent I think).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237869256:125,depend,dependencies,125,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237869256,2,['depend'],"['dependencies', 'depending']"
Integrability,"Yes! I just spoke to Stefan Grimme about it this week. On Fri, Aug 30, 2019, 5:25 AM Chrinide <notifications@github.com> wrote:. > Dear Psi4 Developers,; >; > Is there any plan to add the newly DFTD4 interface in Psi4; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1710?email_source=notifications&email_token=AAXVA5QI52CHLFQNLL3YE5LQHDRPZA5CNFSM4ISLIJ2KYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HIM3Y5A>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5VQ3EV6BB4PVR3LQ43QHDRPZANCNFSM4ISLIJ2A>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1710#issuecomment-526599417:200,interface,interface,200,https://psicode.org,https://github.com/psi4/psi4/issues/1710#issuecomment-526599417,1,['interface'],['interface']
Integrability,"Yes, I agree that details instructions and more demonstrations could be; added in separate PR, and not a reason to stall Alex's integration efforts. On Fri, Dec 2, 2022 at 2:04 PM Lori A. Burns ***@***.***>; wrote:. > /home/runner/work/psi4/psi4/code/objdir/doc/sphinxman/source/optking.rst:346:; > ERROR: Undefined substitution referenced: ""optking_frag_mode"".; >; > docs error above. probably needs double underscore after optking.; >; > Do we have a figure in there yet illustrating the inter-fragment; > definitions? I have no time to work on it today, but could tomorrow; > (Saturday).; >; > interfrag figure would be great. but if we get to the point where; > everything else is ready, I think that could be a separate PR.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2727#issuecomment-1335779471>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TB764VCREPSYNXVVTTWLJI3HANCNFSM6AAAAAAQWELJAU>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1335896146:128,integrat,integration,128,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1335896146,2,"['Message', 'integrat']","['Message', 'integration']"
Integrability,"Yes, I think simply producing that list would be sufficient. LibXC could also product a `char**` that we could wrap and pull out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-329267656:111,wrap,wrap,111,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-329267656,2,['wrap'],['wrap']
Integrability,"Yes, I've been updating them as I notice them, and 2845 is the most recent. afaik, there aren't any outstanding expired types. Sorry about the poor commit message - it was part of a big docs update. If you're still working from v1.3, https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848 may be useful patches, too. Thanks for working on keeping this old version going. On the moving-past-v1.3 front, I now have a version of Libint2 that has solid harmonic ordering runtime-switchable, so a single build could work for all open-source consumers, finally including psi. But that'll require upstream acceptance into L2 and new versions (maybe could get away with rebuild?) of the quantum chem packages. So nothing imminent, but some progress.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502:155,message,message,155,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502,1,['message'],['message']
Integrability,"Yes, NumPy is officially required at runtime see [here](https://github.com/psi4/psi4/wiki/2_Planning#-what-are-the-tools-and-dependencies-strictly-required-for-building-psi4) for requirement list. We'll accept PRs that rely on NumPy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225178276:125,depend,dependencies-strictly-required-for-building-,125,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225178276,1,['depend'],['dependencies-strictly-required-for-building-']
Integrability,"Yes, adding a header=true is possible. What conv crit changed so you know? Geom opt, scf, cc, other? I suspect geom opt since we switched that out in Dec. . So in your Jupiter notebook, you're importing psi4, setting an output file (soon to incl header), running a single job(cclib consumable) closing that output file, processing or storing it, setting another output file, running another single job?. I ask b/c the Jupiter route usually amalgamates lots of outputs (that cclib won't like). Another route would be to have a node that prints the header at each energy/gradient/Hess/opt/freq call.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596:426,rout,route,426,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596,2,['rout'],['route']
Integrability,"Yes, indeed. I was testing this afternoon that AM=4 passed the quicktests and failed the expected all tests. They all behaved as expected wrt pass/fail, but the failures (except for irc) didn't print the usual diagnostic message. Running a specimen through gdb tonight reveals compute_quartet segfault. So something likely unaligned, possibly only with int, not deriv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240606872:221,message,message,221,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240606872,1,['message'],['message']
Integrability,"Yes, it's often right (that's how I got the reference value for the compare_values function, from a simple input file). My concern is that in a more complex input file, it started throwing odd energies, depending on the (commented) input file contents. It's possible there was something funny with my setup, but the error is consistent enough that I'm really suspicious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183512111:203,depend,depending,203,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183512111,2,['depend'],['depending']
Integrability,"Yes, proposals to create interfaces to external programs are far beyond the scope of this issue. Please make a new one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-2426850861:25,interface,interfaces,25,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-2426850861,1,['interface'],['interfaces']
Integrability,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195054956:134,message,message,134,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956,1,['message'],['message']
Integrability,"Yes, that's just what we needed. We made some changes in 1.6 (finally delivering on the driver refactor we promised in the 1.4 paper) with a very high likelihood of causing bugs in how Psi4 passes information around, which is what your error appears to be. ""Check the interface to CFOUR works"" may have slipped through the cracks of things we tested. Lori would know for sure. I unfortunately don't have CFOUR so can't test this myself, but I'll agitate to get a hold of one of the developers who does.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155154225:268,interface,interface,268,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155154225,1,['interface'],['interface']
Integrability,"Yes, the 1 electron integral routines are getting a very significant rewrite after that pull request is in; they will use libint2, and will be screened for overlap. The original 1e integral code was really written with the standard core hamiltonian in mind, where performance is never an issue. Parallelization of that rewritten code should be relatively easy. I haven't quite decided the best order to reconcile the changes to the integral engine with #1946 yet, but we'll get that merged as soon as we can. Thanks for posting this issue so that we can all coordinate - hopefully everything will be much easier when all of the old integral code is ripped out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528:29,rout,routines,29,https://psicode.org,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528,1,['rout'],['routines']
Integrability,"Yes, the Fedora packages use shared Boost libs, but since they're versioned dependencies there shouldn't be any problem as the dependency breaks when the Boost soname changes. Anyway, this should be solved with 1.1 since there's no Boost anymore. Because the Fedora packaging guidelines have changed, I'll also be able to compile in more functionality such as CheMPS2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531#issuecomment-263455822:76,depend,dependencies,76,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263455822,4,['depend'],"['dependencies', 'dependency']"
Integrability,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172147949:564,depend,dependencies,564,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949,2,['depend'],['dependencies']
Integrability,"Yes, the symmetrize call is nice and should help cleanup any inevitable; small numerical noise. Would be great if it could be extended to; non-Abelian point groups! But the noise @wardence is seeing looks a bit; more serious than just roundoff error. (Sorry to tease an issue before it; gets posted.). On Tue, Dec 12, 2017 at 3:17 PM, Andy Simmonett <notifications@github.com>; wrote:. > I think that a little noise in the gradients is inevitable with so many; > moving parts; that's why we have calls like this; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L274-L275>; > for all (I think) gradients throughout the code. It sounds like we just; > need to consider non-Abelian symmetry in this routine to fix the issue; > you're describing; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/867#issuecomment-351180986>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdgWeF2gB7_UhJZNjJt2DDz91wdahks5s_t9IgaJpZM4QonpI>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351195906:726,rout,routine,726,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351195906,1,['rout'],['routine']
Integrability,"Yes, there's now py27, py35, py36 for Linux and Mac. I've been getting the build and packaging automated again these past few days. There's a few more external projects that need final integration (simint, ambit, a slight dkh fix). I'm aiming for RC1 by mid next week because I'll be away for a bit after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-289781613:185,integrat,integration,185,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-289781613,1,['integrat'],['integration']
Integrability,"Yes, this is a bug. The wrong one should produce an error. Take a look at the `remove_symmetry` routine of `Matrix`. Something like the following might work:. ```; MintsHelper helper(wfn->basisset(), wfn->options(), 0);; SharedMatrix sotoao = helper.petite_list()->sotoao();. SharedMatrix work; work = SharedMatrix( new Matrix( ""work"", num_irreps, nsopi, nmopi ) );; SharedMatrix AO_RDM; AO_RDM = SharedMatrix( new Matrix( nao, nao ) );; AO_RDM->remove_symmetry (work, sotoao);; ```. There are various examples of using `remove_symmetry` in `libmints/writer.cc` and `libscf_solver/hf.cc`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/274#issuecomment-187696803:96,rout,routine,96,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187696803,1,['rout'],['routine']
Integrability,"Yes, we'd like to depend on BSE rather than the internal library after a round of checking consistency. This is also important for roundtripping QCSchema Wfn.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2253#issuecomment-883195975:18,depend,depend,18,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-883195975,1,['depend'],['depend']
Integrability,"Yes, works! That wraps up the documentation shuffling, I think. Provides all the good stuff of the trac page is in the 116MB `db/trac.db` file, that tarball looks good, too. Another issue closed, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112#issuecomment-121398769:17,wrap,wraps,17,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121398769,1,['wrap'],['wraps']
Integrability,"Yet another issue [rescued from the the forums](http://forum.psicode.org/t/problem-with-tungsten-dft-and-hf-scf-unreasonable-energies/1129/2). The user reports using conda's 1.2.1 to attempt to converge a molecule with ECPs and observes a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:308,depend,depending,308,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['depend'],['depending']
Integrability,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273738266:541,depend,dependencies,541,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266,2,['depend'],['dependencies']
Integrability,"You could probably use the `ciwave.cc::get_dimension` which will get you the offsets for orbital indices. Feel free to write something there that provides orders. The above message in the `form_*` functions is probably all thats required. I would say yes to a dirty flag, but have a warning that it isn't exactly supported. There are a lot of functionality there that is only meant to be used in conjunction with some careful usage.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586440640:173,message,message,173,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586440640,1,['message'],['message']
Integrability,"You may have found a memory allocation/usage bug. What kind of; computation is this?. Unfortunately we don't really have a way to estimate scratch usage at; present. It's a feature we'd like to add, but it needs to be added for; every module separately, so is a somewhat daunting task. In principle, can; be known ahead of time based on number of basis functions, number of atoms,; etc., but is different for every method (and sometimes depends on the; particular algorithm used within that method). On Mon, Aug 24, 2020 at 5:55 PM David Slochower <notifications@github.com>; wrote:. > I see memory usage significantly above psi4.set_memory() limit. I do see; > the note in the documentation that memory usage might be *slightly*; > higher, but if I even request within 20% of a node's total memory; > (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now,; > running with psi4.set_memory(""200 GB""), I see persistent VIRT usage of; > 259 GB and RES 256 GB. I know that determining the *actual* amount of memory; > consumed by a process is tricky; > <https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process>,; > but this is important to me to prevent the scheduler from killing my jobs.; > After some troubleshooting, I am requesting 300 GB from the scheduler, but; > 200 GB from psi4, and end up with ~260 GB used. Is this expected?; >; > Relatedly, but separate, is there a way to estimate what the scratch file; > size may be? I was planning to use node-local storage until I found out my; > scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead; > of time (number of atoms × level of theory × some magic thing?); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1985>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5WFYJDHW36AZTXMGCDSCLOVDANCNFSM4QJ6TFCA>; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520:437,depend,depends,437,https://psicode.org,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520,1,['depend'],['depends']
Integrability,"You mean a standard format for point charge files for QMMM? Not that I know of. ; I know the AMBER QM/MM interface a bit, and there are all kinds of formats for different QM programs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625897093:105,interface,interface,105,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625897093,1,['interface'],['interface']
Integrability,"You might also consider putting a check in the Libxc interface. If the code can dump out the density data for the points yielding NaNs, this would be valuable information for filing bugs in Libxc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1158381577:53,interface,interface,53,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1158381577,1,['interface'],['interface']
Integrability,"You're completely correct. The first version of MRPT2 was forked from the MRCCSD code, and used an out-of-core sort. However, not all integrals are needed in MP2, so it's quite wasteful to sort all integrals and only use a subset, which inspired us to write an integral direct version. When the CINTS code from Psi3 was replaced, this integral direct code didn't make it into Psi4. It should be quite easy for me to write a density fitted version, which is an even better approach. I have a few other things to do first, but I'll reply to this message when the code is done. Thanks for the feedback.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/30#issuecomment-32127370:544,message,message,544,https://psicode.org,https://github.com/psi4/psi4/issues/30#issuecomment-32127370,2,['message'],['message']
Integrability,"Your read of the paper sounds right to me. I think a better fix would be to temporarily unset `freeze_core` if it's been set, print a warning message, carry through with the computation, and then set it back. I'll wait to hear back from the author of the Psi implementation before making any changes, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462818976:142,message,message,142,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462818976,1,['message'],['message']
Integrability,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238059613:375,INTERFACE,INTERFACE,375,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613,3,"['INTERFACE', 'interface']","['INTERFACE', 'interface']"
Integrability,"Yup. And no changes to dependency lists either; no qcengine. And yes, this is with Python 3.11 in Fedora rawhide.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1203221687:23,depend,dependency,23,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1203221687,1,['depend'],['dependency']
Integrability,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105224328:373,depend,dependencies,373,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328,2,['depend'],['dependencies']
Integrability,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1329:805,depend,depending,805,https://psicode.org,https://github.com/psi4/psi4/issues/1329,1,['depend'],['depending']
Integrability,"[This section of the docs](https://psicode.org/psi4manual/master/build_planning.html#what-are-the-tools-and-dependencies-strictly-required-for-building-psi4), that lists the essential dependencies of Psi4, is missing two python libraries that are required for `ctest -L smoke` to pass:. 1. `cpuinfo` from `py-cpuinfo`; 2. `psutil`. It looks like both of these are transitive dependencies from QCengine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2789:108,depend,dependencies-strictly-required-for-building-,108,https://psicode.org,https://github.com/psi4/psi4/issues/2789,3,['depend'],"['dependencies', 'dependencies-strictly-required-for-building-']"
Integrability,"](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L511). Because the Quantum Trio-era `detci` and `cc` codes used QT ordering, that `IntegralTransform` must be [told to assume QTOrder](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518), so all other modules must use QT order.; * The need to assemble a single 1PDM is, superficially, because [`IntegralTransform` is told to expect that](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518). `backtransform_density` was never designed with any other structure in mind.; * Each code has its own density-fitted gradients for the simple reason that nobody tried to design truly general density-fitted gradients for Psi. ## Conventions; Unless otherwise indicated, any mention of ""1PDM"" or ""2PDM"" refers to relaxed quantities, the things you contract against the one-electron and two-electron integral derivatives. ## Interface Proposal; * Backtransformation of two-index quantities no longer requires having the _entire_ matrix assembled. You can backtransform blocks at a time based on occupation, which is what you're more likely to have.; * Either each caller code creates its own integral transformation object and instructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored correlated derivatives. The two particle-density matrix is just replaced with the intermediates from Equation 79 of [Ugur's paper](https://aip.scitation.org/doi/10.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:4572,Interface,Interface,4572,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['Interface'],['Interface']
Integrability,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ___________________",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3295,message,message,3295,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['message'],['message']
Integrability,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/qcdb/molecule.py:1298: in run_dftd3; verbose=verbose); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:10261,rout,routine,10261,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['rout'],['routine']
Integrability,"_NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:1261,depend,dependencies,1261,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,_t-1 ................. Passed 4.15 sec; Start 248: numpy-array-interface; 141/415 Test #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Start 23: cc10; 152/415 Test #211: matrix1 .......................... Passed 1.16 sec; Start 24: cc11; 153/415 Test #10: castup3 .......................... Passed 13.51 sec; Start 25: cc12; 154/415 Test #9: castup2 .......................... Passed 13.71 sec; Start 26: cc13; 155/415 Test #1: adc1 ............................. Passed 24.99 sec; Start 29: cc13c; 156/415 Test #2: adc2 ............................. Passed 37.11 sec; Start 30: cc13d; 157/415 Test #24: cc11 ............................. Passed 50.15 sec; Start 31: cc14; 158/415 Test #23: cc10 ............................. Passed 71.48 sec; Start 33: cc16; 159/415 Test #25: cc12 ............................. Passed 71.24 sec; Start 36: cc19; 160/415 Test #20: cbs-xtpl-wrapper ................. Passed 94.08 sec; Start 37: cc2; 161/415 Test #12: cbs-parser ....................... Passed 116.86 sec; Start 38: cc21; 162/415 Test #19: cbs-xtpl-nbody ..............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:14527,wrap,wrapper,14527,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,_xc : 10.133u 0.133s 6.536w 33504 calls; SAPT(DFT): Monomer B DFT : 28.650u 0.350s 17.421w 1 calls; SAPT(DFT):SAPT(DFT):JK : 0.250u 0.000s 0.149w 1 calls; SAPT(DFT):SAPT(DFT):elst : 0.000u 0.000s 0.000w 1 calls; SAPT(DFT):SAPT(DFT):exch : 0.200u 0.000s 0.126w 1 calls; SAPT(DFT):SAPT(DFT):ind : 45.583u 0.533s 27.664w 1 calls; RV: Form Vx : 44.150u 0.533s 26.828w 16 calls; Derivative Properties : 9.050u 0.050s 5.407w 22336 calls; V_XCd : 6.933u 0.067s 4.389w 22336 calls; SAPT(DFT):SAPT(DFT):disp : 5.000u 0.167s 3.141w 1 calls; DFH: initialize() : 0.583u 0.000s 0.350w 1 calls; DFH: sparsity prep : 0.033u 0.000s 0.024w 1 calls; DFH: AO Construction : 0.533u 0.000s 0.313w 1 calls; DFH: transform() : 0.117u 0.017s 0.075w 1 calls; DFH: Total Workflow : 0.033u 0.000s 0.021w 6 calls; DFH: Total Transform : 0.017u 0.000s 0.014w 4 calls; DFH: 1st Contraction : 0.000u 0.000s 0.009w 2 calls; DFH: 2nd Contraction : 0.017u 0.000s 0.005w 2 calls; DFH: MO to disk : 0.000u 0.000s 0.001w 2 calls; DFH: Direct Contractions : 0.083u 0.017s 0.046w 1 calls; DF Integrals : 0.767u 0.083s 0.514w 1 calls; W Integrals : 0.000u 0.000s 0.001w 1 calls; Exch-Disp20 N^5 : 0.033u 0.033s 0.043w 1 calls; Exch-Disp20 N^4 : 0.267u 0.033s 0.178w 1 calls. -----------------------------------------------------------; SAPT(DFT): Dimer SCF : 2.883u 0.033s 1.795w 1 calls; | JK: (A|mn) : 0.683u 0.000s 0.418w 1 calls; | JK: (A|Q)^-1/2 : 0.083u 0.000s 0.053w 1 calls; | JK: (Q|mn) : 0.100u 0.017s 0.062w 1 calls; | HF: Form H : 0.017u 0.000s 0.006w 1 calls; | HF: Form S/X : 0.000u 0.000s 0.002w 1 calls; | HF: Guess : 0.133u 0.000s 0.089w 1 calls; | | SAD Guess : 0.133u 0.000s 0.087w 1 calls; | HF: Form G : 0.517u 0.000s 0.309w 11 calls; | | JK: D : 0.000u 0.000s 0.000w 11 calls; | | JK: USO2AO : 0.000u 0.000s 0.000w 11 calls; | | JK: JK : 0.517u 0.000s 0.308w 11 calls; | | | JK: J : 0.033u 0.000s 0.027w 11 calls; | | | | JK: J1 : 0.017u 0.000s 0.014w 11 calls; | | | | JK: J2 : 0.017u 0.000s 0.013w 11 calls; | | | JK:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200:2918,Contract,Contractions,2918,https://psicode.org,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200,1,['Contract'],['Contractions']
Integrability,"`DESTDIR` hasn't been part of Psi4 cmake for a few years since it was updated for Windows compatibility. Looking through some docs, I see it can have influence if set as an environment variable. That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325646186:280,rout,routes,280,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325646186,1,['rout'],['routes']
Integrability,`Libint2::cxx` misses dependency on Boost,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2427:22,depend,dependency,22,https://psicode.org,https://github.com/psi4/psi4/issues/2427,1,['depend'],['dependency']
Integrability,`SphericalGrid::order` Contract Broken,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2765:23,Contract,Contract,23,https://psicode.org,https://github.com/psi4/psi4/issues/2765,1,['Contract'],['Contract']
Integrability,"``` CMAKE_INSTALL_DATADIR=share```. %%DATADIR%% is not a literal, this is just an error message with substituted tokens. ```%%DATADIR%%=/usr/local/share/psi4```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214286601:88,message,message,88,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214286601,1,['message'],['message']
Integrability,"```; $ ctest -R cubeprop-esp -V; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 360; Start 360: cubeprop-esp. 360: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/cubeprop-esp/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/cubeprop-esp/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 360: Test timeout computed to be: 1500; 360: 	Comparing Dt......................................................PASSED; 360: Traceback (most recent call last):; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"", line 264, in <module>; 360: exec(content); 360: File ""<string>"", line 37, in <module>; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 387, in compare_cubes; 360: raise TestComparisonError(message); 360: ; 360: TestComparisonError: 	Comparing ESP: computed cube file does not match expected cube file.; 360: Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 1/1 Test #360: cubeprop-esp ...................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937:563,depend,dependency,563,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937,2,['depend'],['dependency']
Integrability,"```; $ ctest -R json-schema_0_properties -V; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 401; Start 401: json-schema_0_properties. 401: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/json/json-schema_0_properties/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 401: Test timeout computed to be: 1500; 401: ; 401: *** tstart() called on computer06; 401: *** at Mon Jul 9 14:44:29 2018; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: 6-31G; 401: Role: ORBITAL; 401: Keyword: BASIS; 401: atoms 1 entry O line 117 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: atoms 2-3 entry H line 26 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: ; 401: ; 401: ---------------------------------------------------------; 401: SCF; 401: by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:575,depend,dependency,575,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,2,['depend'],['dependency']
Integrability,"```; >>> ""ijij->"".encode().decode(""latin-1""); 'ijij->'; >>> r""ijij->""; 'ijij->'; >>> ; ```. I would think it is rather the parsing. I tried to step through `get_combined_dims_view` in `einsum.c.src` but it is quite confusing. . At the beginning of the function, the value of `label` is `labels=0x3ffffffcdf8 ""i\377j\377\375\377\061\340""` for the `iijj` case and `labels=0x3ffffffcdf8 ""ij\376\377\375\377\061\340""` for the `ijij` case. Conversely, the value of `label` is 105 and 106 towards the end of the function for the `iijj`` case and 105 and 254 for the ""ijij"" case, the latter being the weird unicode character from the error message. At that point I see:. ```; 2135 if (combineoffset < 0 && new_dims[i] != 0 &&; (gdb) p i; $229 = 1023; (gdb) p label; $230 = 254; (gdb) p iop; $231 = 0; (gdb) p new_dims[i]; $232 = 4296307584; (gdb) n; 1502 return ((PyArrayObject_fields *)arr)->dimensions[idim];; (gdb) n; 2142 return NULL;; ```. which looks odd, and the `NULL` is part of the error message we see:. ```; if (combineoffset < 0 && new_dims[i] != 0 &&; new_dims[i] != PyArray_DIM(op, idim)) {; PyErr_Format(PyExc_ValueError,; ""dimensions in operand %d for collapsing ""; ""index '%c' don't match (%d != %d)"",; iop, label, (int)new_dims[i],; (int)PyArray_DIM(op, idim));; return NULL;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465#issuecomment-452041570:633,message,message,633,https://psicode.org,https://github.com/psi4/psi4/issues/1465#issuecomment-452041570,2,['message'],['message']
Integrability,"```; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE) (Required is at; least version ""3.6""); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake/Modules/FindPythonInterp.cmake:182 (FIND_PACKAGE_HANDLE_STANDARD_ARGS); /usr/share/cmake/pybind11/FindPythonLibsNew.cmake:98 (find_package); /usr/share/cmake/pybind11/pybind11Tools.cmake:50 (find_package); /usr/share/cmake/pybind11/pybind11Common.cmake:188 (include); /usr/share/cmake/pybind11/pybind11Config.cmake:250 (include); CMakeLists.txt:60 (find_package); ```; Looks like the error originates from `psi4/CMakeLists.txt`; ```; find_package(pybind11 2.2.2 CONFIG REQUIRED); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705:86,message,message,86,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705,1,['message'],['message']
Integrability,"```; execute_process(; COMMAND /bin/sh -c ""if test -t 1; then return 1; else return 0; fi""; RESULT_VARIABLE OUTPUT_IS_TERMINAL; OUTPUT_FILE /dev/stdout; ). message(""OUTPUT_IS_TERMINAL=${OUTPUT_IS_TERMINAL}""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2680#issuecomment-1213467412:156,message,message,156,https://psicode.org,https://github.com/psi4/psi4/issues/2680#issuecomment-1213467412,1,['message'],['message']
Integrability,"```; molecule sco {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. b3lyphfx10 = { ; ""name"": ""b3lyp_hfx10"",; ""x_functionals"": {""GGA_X_B88"": {""alpha"": 0.81}, ""LDA_X"": {""alpha"": 0.09}},; ""x_hf"": {""alpha"": 0.10},; ""c_functionals"": {""GGA_C_LYP"": {""alpha"": 0.81},""LDA_C_VWN_RPA"": {""alpha"": 0.19}}; }. set globals {; basis def2-tzvp; reference rhf ; maxiter 500 ; }. frequency('scf', dft_functional=b3lyphfx10); ```. This fails unless `dertype = 1` is passed to the `frequency` call. The driver instead tries to route it through analytic hessians (which are Not Yet Implemented for GGA).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2882:492,rout,route,492,https://psicode.org,https://github.com/psi4/psi4/issues/2882,1,['rout'],['route']
Integrability,"```; sapt4; 2016-02-16 10:46; SAPT incomplete wavefunction is only dimer SCF; SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places. An error has occurred Py-side; Traceback:; <class 'p4xcpt.TestComparisonError'>: SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places.: File ""<string>"", line 67, in <module>. File ""/Users/stanlen1/gitrepos/psi4/share/python/p4util/util.py"", line 100, in compare_values; raise TestComparisonError(message); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260#issuecomment-184840463:496,message,message,496,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184840463,1,['message'],['message']
Integrability,"```DESTDIR``` is **always** set during build and install. It contains the real stage directory path that cmake uses to determine where files are installed. psi4 build adds ```DESTDIR``` to its inner stage directory which causes this problem. > That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-). What does this mean?; Every port uses DESTDIR to supply stage directory. It is super well tested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325649105:329,rout,routes,329,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325649105,1,['rout'],['routes']
Integrability,"```console; $ cmake --version; cmake version 3.18.4. CMake suite maintained and supported by Kitware (kitware.com/cmake).; $ ls /path/to/eigen3/share/eigen3/cmake; Eigen3Config.cmake Eigen3ConfigVersion.cmake Eigen3Targets.cmake UseEigen3.cmake; ```. Here Eigen 3.3.7 is manually installed. ```console; $ git describe --always; v1.5-178-gd725195826a1; $ cmake -G Ninja -B build -S . -D BOOST_ROOT:PATH=/path/to/boost -D Eigen3_DIR:PATH=/path/to/eigen3/share/eigen3/cmake; $ cmake --build build -- external/upstream/libint2/all; …; -- Looking for posix_memalign - found; -- Could NOT find Eigen3 (missing: EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK) (Required is at least version ""2.91.0""); CMake Error at CMakeLists.txt:124 (message):; C++ API cannot be built without Eigen3; configure (via CMake) and install; Eigen3 and add the install prefix to CMAKE_PREFIX_PATH, or add; -DREQUIRE_CXX_API=OFF to the CMake command line if the C++ API is not; required. -- Configuring incomplete, errors occurred!; See also ""external/upstream/libint2/libint2_external-prefix/src/libint2_external-build/CMakeFiles/CMakeOutput.log"".; ninja: build stopped: subcommand failed.; ```. The source of libint2 is; https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L63. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following line:; ```; 115:find_package(Eigen3 MODULE); ```; Hence `find_package` runs in only MODULE mode, where CMake searches `FindEigen3.cmake` (https://cmake.org/cmake/help/v3.18/command/find_package.html). Its location is set by the `CMakeLists.txt`:; ```; 6:list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules); ```. CMake passes only the `Eigen3_DIR` variable. https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L87. but it is not used by `FindEigen3.cmake`, resulting in configuration error. https://",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2606:719,message,message,719,https://psicode.org,https://github.com/psi4/psi4/issues/2606,1,['message'],['message']
Integrability,"`coldim` isn't a wavefunction attribute. It's the dimension of the columns of the orbital coefficient `Matrix` and is thus a `Matrix` attribute. Redundancy is not the problem here. The problem is that `nmopi_` is _wrong_. Why it's wrong is a deeper issue. The `common_init` code is called anytime a wavefunction is initialized, and it initializes all orbital spaces by assuming no linear dependences. This is reasonable if you can rely on the linear dependency checking code to be called later and to re-initialize orbital spaces if necessary. If you cannot (as in this case), you get this issue. My naive vote would be to move orbital space initialization out of `common_init` entirely. If you're initializing from a reference wavefunction that already has those spaces defined, there's no need to touch those. Otherwise, initialize MO spaces only once you have determined the number of MOs, i.e., after [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libscf_solver/hf.cc#L785).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120#issuecomment-785518560:388,depend,dependences,388,https://psicode.org,https://github.com/psi4/psi4/issues/2120#issuecomment-785518560,2,['depend'],"['dependences', 'dependency']"
Integrability,"`python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:1565,protocol,protocol,1565,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['protocol'],['protocol']
Integrability,"a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix that ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:1846,rout,routine,1846,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160,1,['rout'],['routine']
Integrability,ad2 ..................... Passed 28.08 sec; Start 204: frac-ip-fitting; 71/404 Test #299: pywrap-alias ..................... Passed 36.56 sec; Start 250: omp2-5; 72/404 Test #59: cc42 ............................. Passed 20.06 sec; Start 242: ocepa-grad2; 73/404 Test #373: dft-custom-mgga .................. Passed 57.03 sec; Start 183: isapt2; 74/404 Test #320: sapt6 ............................ Passed 55.07 sec; Start 244: ocepa2; 75/404 Test #57: cc40 ............................. Passed 21.98 sec; Start 153: dfomp2p5-grad2; 76/404 Test #250: omp2-5 ........................... Passed 25.71 sec; Start 249: omp2-4; 77/404 Test #242: ocepa-grad2 ...................... Passed 26.85 sec; Start 263: omp3-grad2; 78/404 Test #153: dfomp2p5-grad2 ................... Passed 20.54 sec; Start 170: dft1-alt; 79/404 Test #204: frac-ip-fitting .................. Passed 44.19 sec; Start 347: sapt-dft2; 80/404 Test #244: ocepa2 ........................... Passed 30.49 sec; Start 19: cbs-xtpl-wrapper; 81/404 Test #11: cbs-delta-energy ................. Passed 54.44 sec; Start 77: cc8; 82/404 Test #17: cbs-xtpl-opt ..................... Passed 56.20 sec; Start 43: cc28; 83/404 Test #249: omp2-4 ........................... Passed 21.37 sec; Start 147: dfomp3-2; 84/404 Test #263: omp3-grad2 ....................... Passed 20.20 sec; Start 107: dcft1; 85/404 Test #77: cc8 .............................. Passed 8.45 sec; Start 151: dfomp2p5-2; 86/404 Test #183: isapt2 ........................... Passed 47.88 sec; Start 46: cc30; 87/404 Test #147: dfomp3-2 ......................... Passed 14.61 sec; Start 276: opt11; 88/404 Test #151: dfomp2p5-2 ....................... Passed 13.89 sec; Start 82: cc9a; 89/404 Test #107: dcft1 ............................ Passed 14.95 sec; Start 371: dft-custom-dhdf; 90/404 Test #43: cc28 ............................. Passed 26.56 sec; Start 81: cc9; 91/404 Test #82: cc9a ............................. Passed 8.92 sec; Start 78: cc8a; 92/404 Test #46: cc30 ..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:7615,wrap,wrapper,7615,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['wrap'],['wrapper']
Integrability,add integratorxx to buildsys,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3041:4,integrat,integratorxx,4,https://psicode.org,https://github.com/psi4/psi4/pull/3041,1,['integrat'],['integratorxx']
Integrability,"added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (Failed); 	319 - cubeprop-esp (Failed); ```. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:1851,wrap,wrapper,1851,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['wrap'],['wrapper']
Integrability,"advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:2094,depend,dependency,2094,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['depend'],['dependency']
Integrability,"algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm present within GauXC. Construction of the interface is specified at compile-time with the compile-time flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling the behavior of `SNLINK`. For controlling the GauXC grid, `SNLINK_RADIAL_POINTS`, `SNLINK_SPHERICAL_POINTS`, and `SNLINK_RADIAL_SCHEME` control the GauXC radial point count, spherical point count, and radial quadrature, respectively. `SNLINK_USE_GPU` controls GPU execution of GauXC. Finally, `SNLINK_INTS_TOLERANCE` controls the integral screening threshold used by GauXC's sn-LinK algorithm. ## Dev notes & details; - [X] Adds a new new Psi4 compile-time option, `ENABLE_gauxc`. When set to `ON`, `ENABLE_gauxc` will build Psi4 with support for GauXC. The Psi4 build system has been adjusted so ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:2976,interface,interfaced,2976,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interfaced']
Integrability,"all are with mkl 11.3 update 2; all tests run in serial; all with gcc (GCC) 4.8.5 20150623; - i7-3930K, Sandy Bridge-E; - xhost on (default), release: **Good**; - i7-4790K, Haswell-DT; - xhost on (default), release: **Bad**; - xhost off, release: **Bad**; - xhost on (default), debug: **Bad**",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198621819:110,Bridg,Bridge-E,110,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198621819,1,['Bridg'],['Bridge-E']
Integrability,"allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` approach of including back-transforming the 3-Center density intermediate in the main loop. In that case, the calling code doesn't even need to back-transform the density. If this change works, we can eliminate some code duplication in `dfmp2`, for an added bonus. In this case, all `dfocc` would need to do is stash intermediates it already computes in a place where my code can find them and then delete its back-transformation code. **Q:** What's this about adding a new block algorithm?; **A:** For large systems, you may not be able to assume that the three-center intermediate (naux*nmo^2) fits in memory. To remedy this, `dfmp2` uses a block algorithm, where it reads only ""blocks"" of this intermediate at a time. The old DF gradient code was based on Rob'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079:1717,interface,interface,1717,https://psicode.org,https://github.com/psi4/psi4/pull/2079,1,['interface'],['interface']
Integrability,"als are doubly occupied.; (""docc"" = ""doubly occupied""). Also, if you're doing a RAS, you need to tell the code the max number of; holes in RAS I, and the max number of particles in RAS III. I forget the; keywords off the top of my head. Additionally, if it's high-spin open-shell, at least to keep the SCF; straight (can't remember if DETCI needs this or not), you probably should; be specifying the symmetries of the singly occupied orbitals with the SOCC; keyword. There may or may not be some additional problems. On Tue, Aug 13, 2019 at 6:42 AM Susi Lehtola <notifications@github.com>; wrote:. > The following input fails with a segfault; >; > molecule {; > 0 5; > Fe; > }; >; > set basis pcseg-0; > set reference rohf; > set scf_type pk; > set mcscf_type conv; > # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]; >; > # Ar core; > set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; > # spd active space; > set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; > set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; > set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; > cas_e, cas_wfn = energy('rasscf', return_wfn=True); >; > # Dynamical correlation from Ar core; > set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; > set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; > ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); >; > There's something wrong in the input or the code, since there's an error; > message in the log file; >; > ==> Setting up CI strings <==; >; > There are 2730 alpha and 105 beta strings; > (subgr_lex_addr): Impossible walk!; > The CI space requires 18211 (1.82E+04) determinants and 44 blocks; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1693?email_source=notifications&email_token=AAXVA5TD2EJDK5M4KQ6Q5TTQEKFYNA5CNFSM4ILJOWVKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HE5Q2AQ>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5QEYCCJVE5424DTXB3QEKFYNANCNFSM4ILJOWVA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260:1463,message,message,1463,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260,1,['message'],['message']
Integrability,"anual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am not talking complete non-sense here. Also, while the CASSCF bit worked, the CASSCF energy is much higher than I expected (by ~0.2 hartree). The C-state minimum lies above the 3P+3P limit, instead ~2-3 eV below it. So, it would also be helpful if someone could teach me the best way to carry out the CASSCF calculation on the C state. Thanks,. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907:1924,message,message,1924,https://psicode.org,https://github.com/psi4/psi4/issues/1907,1,['message'],['message']
Integrability,"are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `P",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:2405,interface,interface,2405,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['interface'],['interface']
Integrability,"ary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1093,depend,dependencies,1093,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,2,['depend'],['dependencies']
Integrability,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:2131,depend,dependencies,2131,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['depend'],['dependencies']
Integrability,"ase update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code.; - [x] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow.; - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes.; - [x] DF and RI calls should soft fail with a proper error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:3608,wrap,wrapper,3608,https://psicode.org,https://github.com/psi4/psi4/pull/246,2,"['message', 'wrap']","['message', 'wrapper']"
Integrability,asscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.98 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 10.00 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 8.90 sec; Start 11: cbs-delta-energy; 18/411 Test #325: scf-bz2 .......................... Passed 137.96 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 13.43 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #10: castup3 .......................... Passed 9.55 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 15.41 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 9.22 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 34.00 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 27.35 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #278: opt13 ............................ Passed 937.76 sec; Start 20: cc1; 26/411 Test #11: cbs-delta-energy ................. Passed 87.39 sec; Start 21: cc10; 27/411 Test #20: cc1 .............................. Passed 39.26 sec; Start 22: cc11; 28/411 Test #21: cc10 ............................. Passed 16.76 sec; Start 23: cc12; 29/411 Test #316: sapt2 ............................ Passed 390.55 sec; Start 24: cc13; 30/411 Test #17: cbs-xtpl-opt ..................... Passed 79.98 sec; Start 26: cc13b; 31/411 Test #19: cbs-xtpl-wrapper ................. Passed 69.43 sec; Start 27: cc13c; 32/411 Test #23: cc12 ............................. Passed 22.65 sec; Start 28: cc13d; 33/411 Test #22: cc11 ............................. Passed 25.63 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 186.38 sec; Start 30: cc15; 35/411 Test #26: cc13b ............................ Passed 73.68 sec; Start 31: cc16; 36/411 Test #27: cc13c ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:2521,wrap,wrapper,2521,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['wrap'],['wrapper']
Integrability,asscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 57.71 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 113.77 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 53.70 sec; Start 22: cc11; 20/411 Test #21: cc10 ............................. Passed 10.30 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 23.57 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 10.89 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.82 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 221.87 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 28.09 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 42.99 sec; Start 30: cc15; 27/411 Test #25: cc13a ............................ Passed 275.86 sec; Start 31: cc16; 28/411 Test #195: fd-freq-gradient-large ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:1945,wrap,wrapper,1945,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['wrap'],['wrapper']
Integrability,assed 11.23 sec; Start 229: mp2-grad2; 219/411 Test #206: ghosts ........................... Passed 34.53 sec; Start 230: mp2-module; 220/411 Test #224: molden2 .......................... Passed 17.32 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 9.84 sec; Start 232: mp2p5-grad2; 222/411 Test #229: mp2-grad2 ........................ Passed 9.84 sec; Start 233: mp3-grad1; 223/411 Test #200: fnocc2 ........................... Passed 59.94 sec; Start 234: mp3-grad2; 224/411 Test #231: mp2p5-grad1 ...................... Passed 7.83 sec; Start 235: mp2-property; 225/411 Test #233: mp3-grad1 ........................ Passed 8.32 sec; Start 236: mpn-bh; 226/411 Test #235: mp2-property ..................... Passed 4.28 sec; Start 237: nbody-he-cluster; 227/411 Test #232: mp2p5-grad2 ...................... Passed 13.18 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 12.06 sec; Start 239: numpy-array-interface; 229/411 Test #226: mp2-1 ............................ Passed 30.19 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.80 sec; Start 241: ocepa-grad1; 231/411 Test #219: mints-benchmark .................. Passed 43.72 sec; Start 242: ocepa-grad2; 232/411 Test #236: mpn-bh ........................... Passed 7.46 sec; Start 243: ocepa1; 233/411 Test #204: frac-ip-fitting .................. Passed 80.74 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 18.49 sec; Start 245: ocepa3; 235/411 Test #241: ocepa-grad1 ...................... Passed 28.23 sec; Start 246: omp2-1; 236/411 Test #183: isapt2 ........................... Passed 136.14 sec; Start 247: omp2-2; 237/411 Test #238: nbody-intermediates .............. Passed 36.59 sec; Start 248: omp2-3; 238/411 Test #246: omp2-1 ........................... Passed 16.61 sec; Start 249: omp2-4; 239/411 Test #237: nbody-he-cluster ................. Passed 71.20 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:21285,interface,interface,21285,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['interface'],['interface']
Integrability,assed 3.66 sec; Start 230: mp2-grad2; 220/412 Test #225: molden2 .......................... Passed 3.82 sec; Start 231: mp2-module; 221/412 Test #219: mints8 ........................... Passed 15.95 sec; Start 232: mp2p5-grad1; 222/412 Test #229: mp2-grad1 ........................ Passed 3.19 sec; Start 233: mp2p5-grad2; 223/412 Test #230: mp2-grad2 ........................ Passed 3.94 sec; Start 234: mp3-grad1; 224/412 Test #207: ghosts ........................... Passed 34.34 sec; Start 235: mp3-grad2; 225/412 Test #232: mp2p5-grad1 ...................... Passed 4.41 sec; Start 236: mp2-property; 226/412 Test #234: mp3-grad1 ........................ Passed 3.21 sec; Start 237: mpn-bh; 227/412 Test #233: mp2p5-grad2 ...................... Passed 6.31 sec; Start 238: nbody-he-cluster; 228/412 Test #227: mp2-1 ............................ Passed 10.68 sec; Start 239: nbody-intermediates; 229/412 Test #235: mp3-grad2 ........................ Passed 5.49 sec; Start 240: numpy-array-interface; 230/412 Test #236: mp2-property ..................... Passed 4.03 sec; Start 241: ocepa-freq1; 231/412 Test #240: numpy-array-interface ............ Passed 1.00 sec; Start 242: ocepa-grad1; 232/412 Test #237: mpn-bh ........................... Passed 4.64 sec; Start 243: ocepa-grad2; 233/412 Test #242: ocepa-grad1 ...................... Passed 11.23 sec; Start 244: ocepa1; 234/412 Test #244: ocepa1 ........................... Passed 5.71 sec; Start 245: ocepa2; 235/412 Test #239: nbody-intermediates .............. Passed 18.78 sec; Start 246: ocepa3; 236/412 Test #205: frac-ip-fitting .................. Passed 70.79 sec; Start 247: omp2-1; 237/412 Test #220: mints-benchmark .................. Passed 46.59 sec; Start 248: omp2-2; 238/412 Test #247: omp2-1 ........................... Passed 4.70 sec; Start 249: omp2-3; 239/412 Test #184: isapt2 ........................... Passed 124.89 sec; Start 250: omp2-4; 240/412 Test #238: nbody-he-cluster ................. Passed 44.71 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:21392,interface,interface,21392,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['interface'],['interface']
Integrability,"atible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old; ```. ### what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: `conda install libint=1.2.1=h87b9b30_4 -c psi4`. ### what can go wrong with locally-built psi4?. * A major use of the `libint` conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the `$CONDA_PREFIX/lib/libint.so` to which a psi4 `core.so` is linked suddenly changes identity, psi4 will be deranged.; * To fix this, `cmake` needs to detect the new libint headers and a half-dozen psi4 files need to rebuild.; ```; > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1); ```; * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. ### Notes; * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * `simint` max is AM7 both past and near future. Only `libint` is changing.; * Between higher AM and optimizing for multiple architectures, t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:2282,depend,dependency,2282,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['depend'],['dependency']
Integrability,"b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2464,depend,dependency,2464,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['depend'],['dependency']
Integrability,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:4891,depend,dependencies,4891,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['depend'],['dependencies']
Integrability,"bject via the `Da`, `Db`, and `X` member variables. This is the most important point for this section! All codes except `cc` already store the OPDM/Lagrangian as `SharedMatrix` objects, so this is the path of least resistance. The one holdout predates `libmints` and instead uses a `libmints` `Matrix`-like structure. (See discussion in Step Four.) Existing code had to perform many an astounding number of type conversions to ultimately convert back to the type we had originally. `dct`, for instance, went `SharedMatrix` -> `file2` -> QTOrdered Block Matrix -> PSIO Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in the new version. When you use a `Matrix`, the transformation reduces to a `linalg::triplet` call.; 3. Lastly, prefactors. Because it's ambiguous what you call the Lagrangian, I'm going to use as a point of reference ""the thing you contract against the overlap derivatives"", because that is pefectly unambiguous. In the old code, you'd send -2 times that thing. Now, you send -1 times that thing. This is necessary for consistency with how the SCF code determines the value of the Lagrangian on a wavefunction object. If you want an example for how this works, see the newly added code in `dct_gradient_UHF.cc:compute_ewdm_odc`. With these changes, 30 lines of code replaces about 230. I call this a good start. ### Step Two: Conventional TPDM Tech; I don't see a way around still using `dpdbuf4` for this, even though this isn't the most plugin-friendly. The main simplification here will be eliminating the need to dump to `libiwl`. ## Questions; - [ ] There is a goof in `libtrans`: There is a [pre-defined frozen core space `O`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L51-L57), and also a [pre-defined occupied space `o`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:2230,contract,contract,2230,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['contract'],['contract']
Integrability,"build constructors by following instructions https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md. * edit tag and hash; * clear package cache; * `python run.py`; * check for noarch (BAD); * upload to vergil. generate the download site; * create new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md mind the edition string `v13rc2` for this and future filenames; * copy and edit new https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; * enter `scripts/` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; * run the `install-generator.py` in place. it will dump new files into `data/installs/` _subdirs_. be sure to `git add` them.; * installer page is ready. if wanted, edit the desination of the `Download` nav button https://github.com/psi4/psicode-hugo-website/blob/master/config.toml#L35; * pays to test; * installer on Mac and Linux; * that download button and `curl` downloading register on the download counters on vergil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733:744,message,messages,744,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733,2,['message'],['messages']
Integrability,c-sp .................... Passed 17.22 sec; Start 291: psimrcc-ccsd_t-3; 347/413 Test #223: mints9 ........................... Passed 2.09 sec; Start 364: x2c3; 348/413 Test #333: scf1 ............................. Passed 6.77 sec; Start 190: fci-tdm; 349/413 Test #224: mints10 .......................... Passed 2.65 sec; Start 97: cisd-h2o-clpse; 350/413 Test #222: mints-helper ..................... Passed 2.06 sec; Start 137: dfmp2-grad2; 351/413 Test #353: dft-reference .................... Passed 3.64 sec; Start 354: stability2; 352/413 Test #273: opt5 ............................. Passed 7.47 sec; Start 300: pubchem2; 353/413 Test #205: frac ............................. Passed 8.25 sec; Start 271: opt3; 354/413 Test #216: mints3 ........................... Passed 2.75 sec; Start 335: scf2; 355/413 Test #291: psimrcc-ccsd_t-3 ................. Passed 3.01 sec; Start 356: tu2-ch2-energy; 356/413 Test #190: fci-tdm .......................... Passed 2.43 sec; Start 241: numpy-array-interface; 357/413 Test #364: x2c3 ............................. Passed 3.21 sec; Start 312: rasci-c2-active; 358/413 Test #181: fsapt2 ........................... Passed 5.35 sec; Start 351: sapt-sf1; 359/413 Test #97: cisd-h2o-clpse ................... Passed 2.35 sec; Start 331: scf-guess-read2; 360/413 Test #300: pubchem2 ......................... Passed 1.65 sec; Start 259: omp3-1; 361/413 Test #241: numpy-array-interface ............ Passed 0.85 sec; Start 347: dfep2-2; 362/413 Test #354: stability2 ....................... Passed 2.54 sec; Start 334: scf-occ; 363/413 Test #356: tu2-ch2-energy ................... Passed 1.48 sec; Start 87: cepa0-grad2; 364/413 Test #335: scf2 ............................. Passed 3.66 sec; Start 86: cepa0-grad1; 365/413 Test #351: sapt-sf1 ......................... Passed 2.53 sec; Start 218: mints5; 366/413 Test #347: dfep2-2 .......................... Passed 2.64 sec; Start 366: options1; 367/413 Test #388: cookbook-rohf-orb-rot ............ Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:33619,interface,interface,33619,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['interface'],['interface']
Integrability,"c.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. Th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:2670,wrap,wrapper,2670,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['wrap'],['wrapper']
Integrability,c; Start 77: cc8; 82/404 Test #17: cbs-xtpl-opt ..................... Passed 56.20 sec; Start 43: cc28; 83/404 Test #249: omp2-4 ........................... Passed 21.37 sec; Start 147: dfomp3-2; 84/404 Test #263: omp3-grad2 ....................... Passed 20.20 sec; Start 107: dcft1; 85/404 Test #77: cc8 .............................. Passed 8.45 sec; Start 151: dfomp2p5-2; 86/404 Test #183: isapt2 ........................... Passed 47.88 sec; Start 46: cc30; 87/404 Test #147: dfomp3-2 ......................... Passed 14.61 sec; Start 276: opt11; 88/404 Test #151: dfomp2p5-2 ....................... Passed 13.89 sec; Start 82: cc9a; 89/404 Test #107: dcft1 ............................ Passed 14.95 sec; Start 371: dft-custom-dhdf; 90/404 Test #43: cc28 ............................. Passed 26.56 sec; Start 81: cc9; 91/404 Test #82: cc9a ............................. Passed 8.92 sec; Start 78: cc8a; 92/404 Test #46: cc30 ............................. Passed 23.04 sec; Start 69: cc51; 93/404 Test #19: cbs-xtpl-wrapper ................. Passed 39.85 sec; Start 292: psimrcc-fd-freq2; 94/404 Test #170: dft1-alt ......................... Passed 45.46 sec; Start 237: nbody-he-cluster; 95/404 Test #78: cc8a ............................. Passed 11.18 sec; Start 27: cc13c; 96/404 Test #81: cc9 .............................. Passed 11.79 sec; Start 1: adc1; 97/404 Test #347: sapt-dft2 ........................ Passed 45.78 sec; Start 79: cc8b; 98/404 Test #276: opt11 ............................ Passed 30.65 sec; Start 65: cc48; 99/404 Test #79: cc8b ............................. Passed 6.52 sec; Start 80: cc8c; 100/404 Test #27: cc13c ............................ Passed 17.28 sec; Start 30: cc15; 101/404 Test #80: cc8c ............................. Passed 10.62 sec; Start 256: omp2p5-grad2; 102/404 Test #69: cc51 ............................. Passed 28.59 sec; Start 63: cc46; 103/404 Test #371: dft-custom-dhdf .................. Passed 41.90 sec; Start 68: cc50; 104/404 Test #1: a,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:8712,wrap,wrapper,8712,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['wrap'],['wrapper']
Integrability,"c` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/dfgrad.cc) does not make method-specific assumptions but cannot be used by other modules because it [uses](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tei_grad_corr.cc#L181) [custom tensor machinery](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tensors.h). `dfmp2` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/corr_grad.cc#L123) is specific to `dfmp2`. `dct` does not produce true density fitted gradients but contracts its density matrices against derivatives of conventional integrals, which is close but not exact. Further, this lack of general density-fitted gradient machinery in Psi is blocking developers who want density-fitted gradients interfaced through Psi. (@fevangelista at least, and I believe @edeprince3 and @ssh2 as well.). ## Causes of Problems with the Current Design; * Many of the problems with the existing conventional integral gradients are due to the `libtrans` interface between the MO quantities and the AO quantities.; * `libtrans` only recognizes TPDM in `libiwl` format, which is why all codes must use that.; * There is a single `IntegralTransform` call [for all modules](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L511). Because the Quantum Trio-era `detci` and `cc` codes used QT ordering, that `IntegralTransform` must be [told to assume QTOrder](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518), so all other modules must use QT order.; * The need to assemble a single 1PDM is, superficially, because [`IntegralTransform` is told to expect that](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518). `backtransform_density` was never designed with any other structure in mind.; * Each code has its own density-fitted gradients for the simple reason that nobody tried to design truly general density-fitted gradients for Ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:3416,interface,interface,3416,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['interface'],['interface']
Integrability,cct3 integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1833:5,integrat,integration,5,https://psicode.org,https://github.com/psi4/psi4/issues/1833,1,['integrat'],['integration']
Integrability,"change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under [psi4, xyz, xyz+, psi4+]:; H6 1.51000000 0.78000000 0 44000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:1124,message,message,1124,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723,1,['message'],['message']
Integrability,"clang 4.0 / ifort 15.0.3 / MKL on macOS 10.12. After compiling from source code (tag v1.1), with ENABLE_gdma=ON, the following command quits without any output.; ```bash; python -c 'import psi4; print(psi4.__file__)'; ```; Running; ```bash; python -v -c ""import psi4""; ```; The last few lines of output are; ```bash; import psi4 # precompiled from /path/psi4-gdma/lib/psi4/__init__.pyc; dlopen(""/path/psi4-gdma/lib/psi4/core.so"", 2);; import psi4.core # dynamically loaded from /path/psi4-gdma/lib/psi4/core.so; ```; No error message. Modifying the following code; https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L1219-L1221; to; ```cpp; #ifdef INTEL_Fortran_ENABLED; static int argc = 1;; static char* argv = (char*) """";; for_rtl_init_(&argc, &argv);; #endif; ```; solves the problem. Any comments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/771:526,message,message,526,https://psicode.org,https://github.com/psi4/psi4/issues/771,1,['message'],['message']
Integrability,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:2909,rout,routine,2909,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['rout'],['routine']
Integrability,"class, it is important that the implementation be as efficient and maintainable as possible. In that respect, I think there are some general improvements to be made:; > ; > The way you've structured incremental Fock keeps eight lists of matrices attached to each `JK` object: copies of the previous `J`, `K`, `wK`, and `D` matrices, and differences between the last two iterations `J`, `K`, `wK`, `D`. In the interest of efficiency, I think it would be best to not store these matrices. Incremental Fock as implemented in the `DFJCOSK` class is a little better about this. That code adds the difference in `J`/`K`/`wK` to the appropriate buffer, which is not zeroed out between SCF iterations. This requires keeping only one list of matrices, the previous iteration `D`, which in my opinion is cleaner. (I have some thoughts on getting around storing the previous `D` matrix too.); > ; > Speaking more broadly about the design of the `JK` class, one valuable aspect of the `JK` class is that it is stateless and decoupled from the SCF procedure. `JK` classes have a well-defined [interface](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L175-L209). The variables like `incfock_count_` that you've proposed adding to the `JK` class break this statelessness, and my opinion that kind of logic should be in the SCF driver, not the `JK` object.; > ; > Let me know if any of these thoughts are unclear. I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR. The scope of this PR is to fix the numerical instabilities of `incfock` in COSX. Per @davpoolechem, using `incfock` on COSX indeed leads to significant time savings on larger systems, even if it is always OFF by default for the last iteration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623:1296,interface,interface,1296,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623,1,['interface'],['interface']
Integrability,composite method wrapper error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/455:17,wrap,wrapper,17,https://psicode.org,https://github.com/psi4/psi4/issues/455,1,['wrap'],['wrapper']
Integrability,conda install needs ncurses as dependency,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/289:31,depend,dependency,31,https://psicode.org,https://github.com/psi4/psi4/issues/289,1,['depend'],['dependency']
Integrability,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1110:175,depend,depending,175,https://psicode.org,https://github.com/psi4/psi4/issues/1110,2,['depend'],"['dependence', 'depending']"
Integrability,convert MDI to optional dependency,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1929:24,depend,dependency,24,https://psicode.org,https://github.com/psi4/psi4/pull/1929,1,['depend'],['dependency']
Integrability,"cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cmake --version; cmake version 3.4.3; $ git rev-parse --verify HEAD; b162ed15fcf1bfbc40b99bcc3a9ea7b812760033",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/414:1577,message,messages,1577,https://psicode.org,https://github.com/psi4/psi4/issues/414,1,['message'],['messages']
Integrability,"ction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quality; ## New methods; - Added quadratic convergence algorithms for RHF, UHF, ROHF; - Added DF-CCSD gradients (RHF references); - Added conventional and DF RASSCF and CASSCF energies; - Added X2C scalar relativistic corrections; - Added QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:2107,integrat,integration,2107,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['integrat'],['integration']
Integrability,d 1.52 sec; Start 229: mp2-grad2; 234/411 Test #229: mp2-grad2 ........................ Passed 1.88 sec; Start 230: mp2-module; 235/411 Test #230: mp2-module ....................... Passed 35.05 sec; Start 231: mp2p5-grad1; 236/411 Test #231: mp2p5-grad1 ...................... Passed 1.53 sec; Start 232: mp2p5-grad2; 237/411 Test #232: mp2p5-grad2 ...................... Passed 1.75 sec; Start 233: mp3-grad1; 238/411 Test #233: mp3-grad1 ........................ Passed 1.47 sec; Start 234: mp3-grad2; 239/411 Test #234: mp3-grad2 ........................ Passed 1.76 sec; Start 235: mp2-property; 240/411 Test #235: mp2-property ..................... Passed 2.66 sec; Start 236: mpn-bh; 241/411 Test #236: mpn-bh ........................... Passed 3.13 sec; Start 237: nbody-he-cluster; 242/411 Test #237: nbody-he-cluster ................. Passed 25.31 sec; Start 238: nbody-intermediates; 243/411 Test #238: nbody-intermediates .............. Passed 9.70 sec; Start 239: numpy-array-interface; 244/411 Test #239: numpy-array-interface ............ Passed 0.74 sec; Start 240: ocepa-freq1; 245/411 Test #240: ocepa-freq1 ...................... Passed 47.05 sec; Start 241: ocepa-grad1; 246/411 Test #241: ocepa-grad1 ...................... Passed 2.50 sec; Start 242: ocepa-grad2; 247/411 Test #242: ocepa-grad2 ...................... Passed 8.81 sec; Start 243: ocepa1; 248/411 Test #243: ocepa1 ........................... Passed 2.08 sec; Start 244: ocepa2; 249/411 Test #244: ocepa2 ........................... Passed 17.07 sec; Start 245: ocepa3; 250/411 Test #245: ocepa3 ........................... Passed 9.75 sec; Start 246: omp2-1; 251/411 Test #246: omp2-1 ........................... Passed 1.19 sec; Start 247: omp2-2; 252/411 Test #247: omp2-2 ........................... Passed 4.05 sec; Start 248: omp2-3; 253/411 Test #248: omp2-3 ........................... Passed 3.58 sec; Start 249: omp2-4; 254/411 Test #249: omp2-4 ........................... Passed 10.52 sec; Start 250: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:22238,interface,interface,22238,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['interface'],['interface']
Integrability,d 2.87 sec; Start 314: sad1; 292/411 Test #108: dcft2 ............................ Passed 1.83 sec; Start 351: dft-reference; 293/411 Test #236: mpn-bh ........................... Passed 2.81 sec; Start 118: dfcasscf-fzc-sp; 294/411 Test #344: dfep2-1 .......................... Passed 2.76 sec; Start 3: casscf-fzc-sp; 295/411 Test #255: omp2p5-grad1 ..................... Passed 2.61 sec; Start 384: psi4numpy-rhf-hessian; 296/411 Test #314: sad1 ............................. Passed 2.30 sec; Start 137: dfmp2-grad4; 297/411 Test #269: opt3 ............................. Passed 3.64 sec; Start 120: dfccd1; 298/411 Test #118: dfcasscf-fzc-sp .................. Passed 1.88 sec; Start 88: cepa2; 299/411 Test #241: ocepa-grad1 ...................... Passed 3.89 sec; Start 391: python-mints2; 300/411 Test #351: dft-reference .................... Passed 2.90 sec; Start 239: numpy-array-interface; 301/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.53 sec; Start 235: mp2-property; 302/411 Test #239: numpy-array-interface ............ Passed 0.65 sec; Start 388: python-curve; 303/411 Test #120: dfccd1 ........................... Passed 1.64 sec; Start 253: omp2p5-1; 304/411 Test #3: casscf-fzc-sp .................... Passed 3.57 sec; Start 119: dfcasscf-sp; 305/411 Test #88: cepa2 ............................ Passed 2.64 sec; Start 130: dfmp2-2; 306/411 Test #137: dfmp2-grad4 ...................... Passed 3.41 sec; Start 139: dfomp2-1; 307/411 Test #253: omp2p5-1 ......................... Passed 1.33 sec; Start 136: dfmp2-grad3; 308/411 Test #391: python-mints2 .................... Passed 2.45 sec; Start 284: props1; 309/411 Test #388: python-curve ..................... Passed 2.06 sec; Start 116: ao-dfcasscf-sp; 310/411 Test #119: dfcasscf-sp ...................... Passed 1.71 sec; Start 135: dfmp2-grad2; 311/411 Test #235: mp2-property ..................... Passed 2.60 sec; Start 225: mom; 312/411 Test #130: dfmp2-2 .......................... Passed 1.55 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:28137,interface,interface,28137,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['interface'],['interface']
Integrability,"d and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:12808,interface,interface,12808,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['interface'],['interface']
Integrability,"d be handled. This PR addresses both of the above issues by changing DFJLinK to use the same incremental Fock formalism as DFJCOSK. Using the DFJCOSK incremental Fock formalism is preferred because DFJCOSK stores fewer matrices in the DFJCOSK class for incremental Fock usage, reducing memory requirements from a practical perspective, and lowering the amount of state contained in DFJLinK from a code design perspective. In standardizing the DFJLinK and DFJCOSK incremental Fock processes, the next CompositeJK PR will be smoother, and CompositeJK development can continue parallel to the developments discussed in https://github.com/psi4/psi4/pull/2682. Additionally, this PR serves as a first step the to decomposition of https://github.com/psi4/psi4/pull/2682 as discussed in that PR's comments, allowing for the full standardization of IncFock among integral-direct JK subclasses. For reviewers, since this PR is the bottleneck for two different routes of JK development (CompositeJK and IncFock standardization), it should be considered the highest-priority JK development PR to merge into Psi4 at the moment. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Switches DFJLinK to using the incremental Fock build implementation used in DFJCOSK. This change standardizes the incremental Fock implementation between DFJLinK and DFJCOSK and improves the memory usage of DFJLinK in the process.; - [X] Changes LinK machinery to support new incremental Fock formalism. ## Questions; - [ ] Since this PR specifically focuses on changes to DFJLinK, there are still a couple of small differences in IncFock between DFJLinK and DFJCOSK, mainly, refactorings and the aforementioned bells and whistles that DFJLinK has that DFJCOSK doesn't. Would it be better to make adjustments to DFJCOSK in this PR as well, to further standardize the two; or is it preferrable to punt that down to the next CompositeJK PR, when DFJLinK and DFJCOSK are combined into the pilot CompositeJK implementa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792:2511,rout,routes,2511,https://psicode.org,https://github.com/psi4/psi4/pull/2792,1,['rout'],['routes']
Integrability,"d distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example GCC-5.1, it takes one command.; > ; > Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not; > a trivial task.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105224328.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:1746,depend,dependencies,1746,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['depend'],['dependencies']
Integrability,"d still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 packa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1790,depend,dependency,1790,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['depend'],['dependency']
Integrability,"d that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may chime in!). But I don't know if there are insurmountable blockers to this process, or if that's been explored recently.; * **What can we do to help?** We ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300:1156,depend,dependency,1156,https://psicode.org,https://github.com/psi4/psi4/issues/2300,1,['depend'],['dependency']
Integrability,"dded QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEFP; - Added PCM implicit solvent added for SCF; - Added interface to DMRG-CI and DMRG-SCF code in CheMPS2; - Added code to do potential energy scans via the WebMO interface; ## Performance optimization; - Sped up integrals computation by optimizing lib mints layer; - The PK JK builder has received significant performance improvements; - SAD guess has been improved dramatically, now default for all RHF computations; ## Bug fixes; - Various bug fixes and improvements to optimizer and IRC code; - Fixed a bug with DF-K in systems with only one occupied orbital; - Fixed an integer overflow bug in DF-CCSD(T); - Fixed modules that crashed when not finding full integral files available (because DF-HF was run instead of conventional HF); - Fixed problem with double hybrid DFT total energies not being printed; - Fixed crash caused by changing number of MO's during optimization (changes in number of MO's dropped due to linear dependencies); - Innumerable additional bug fixes and tweaks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:3442,interface,interface,3442,https://psicode.org,https://github.com/psi4/psi4/issues/367,3,"['depend', 'interface']","['dependencies', 'interface']"
Integrability,"default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProje",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:2152,depend,dependencies,2152,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,"dentification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:4273,message,message,4273,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,1,['message'],['message']
Integrability,"dering combinations with a build-time setting in psi `psi4_SHGAUSS_ORDERING`; - [ ] successor to #2537 . no plans to transition to `sss` though. grab the fchk changes from that PR so it can be closed unmerged. fchk changes can be a follow-up PR.; - [x] need to transform cmake var from str to int; - [x] need to print gau/std to output file; - [x] ~only Linux CI expected to pass, as that's the only conda package built with the new L2. unedit docs-cf, two azure files, and one ecosystem file~; - [x] removed all the `LGTM_SRC` stuff since it's defunct and all the ""CHOOSE"" stuff, since a master L2 won't work anymore b/c need the shg order switching.; - [x] finishes the job of fully C++17 from #2392 . Newest Intel compilers from 2023.0 oneapi (versions icpc 2021.8 and icpx 2023.0) are ok with Libint2 and C++17. For older Intel, there's a keyword `psi4_CXX_STANDARD_Libint2` that can be reset to 14.; - [ ] pull together accumulated xhost changes (hiccup here is that `icpx` can take `-xHost` but `icx` can't, and our `option_with_flags` routine tries both so it throws an unnecessary warning. not a must for this PR).; - [x] the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). This isn't too debilitating since only HF and SVWN have analytic hessians anyways, so when an incapable L2 is detected (imagine that -- we can ask L2 what it can do!), it falls back to FD. That would be easy enough except the tests check too tightly for 3-pt FD to match analytical refs. So I've added a `d2ints` label to ctest and pytest to allow not running. This should probably convert to a skipif someday. Most of the tests I've checked individually and they would pass if findif points=5.; - [x] You notice a ""new"" boost-cpp dependency. Compiling against the header-only L2 C++11 interface (as psi4 does) requires a sele",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861:1883,rout,routine,1883,https://psicode.org,https://github.com/psi4/psi4/pull/2861,1,['rout'],['routine']
Integrability,"dern side of the string-passing change at gcc 5.1(https://greek0.net/blog/2016/10/29/gcc_compatibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00007f4312184000); 	libxc.so => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-332960335:1136,message,message,1136,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335,1,['message'],['message']
Integrability,"dient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:17880,message,message,17880,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['message'],['message']
Integrability,"do something about it. . Basically, if it's a `method/basis` string, that gets parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L2513 . If the user passes in a set of `**kwargs`, those get parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1486. Finally, if the user passes in `cbs_metadata` as an argument, this does not get parsed. Note that all three of those have to be ""validated""... > ; > What transformations are applied to that structured dictionary by the time it enters that input function, where is the specification for the input dictionary, and where is the specification for the output dictionary? I know that the input dictionaries are allowed to have a ""treatment"" field, but the output dictionaries are not, so they need to have different specifications. The only specification I see is in the ""Combined interface"" section of the `cbs` docstring. So we have a missing specification. So the user-facing portion (which is the only real spec) is defined in the ""combined interface"". The internal ""validated"" dictionary is in my view perfectly well documented here:; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365 . I question whether the validated dictionary needs further specification, as it's not user facing. Note that the validator function is under-prefixed, so having a docstring for it is kinda moot anyway. > ; > Furthermore, if that function is only responsible for validating (like the name says), then why is it returning a completely new dictionary that isn't following the same specification? I suspect the function name is incorrect and the docstring is incomplete. This is because of `""method/basis""` and `**kwargs` pathways, which have to be lined up somewhere. I thought rather than splitting the validation logic into ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373:1456,interface,interface,1456,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373,2,['interface'],['interface']
Integrability,"documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/psi4/issues/468#issuecomment-252927823, or ; > mute the thread ; > h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252929596:936,depend,dependencies,936,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596,2,['depend'],"['dependencies', 'dependency']"
Integrability,"e C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:3438,message,message,3438,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['message'],['message']
Integrability,"e as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__init__.py from May technically didn't play nicely with the build-and-copy-into-place of t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:3362,depend,depends,3362,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['depend'],['depends']
Integrability,"e core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the external dependencies in a far more controlled manner. Right now the external libraries are: ambit, boost, erd, libint, efp, dkh, and gdma. I still need to move GTFock there.; ## Headers. I strongly encourage the Psi4 community to review what a forward declaration is as well as how to properly use header files. I have posted a primer on our [BestPractices](https://github.com/psi4/psi4/wiki/BestPractices) wiki. There is a lot of copy/paste going on in the preamble of source files. You really should be assembling you includes/typedefs/etc. on a file by file basis to ensure you know what you are including, where it is coming from, and most importantly are only including what you need. The reason the build is so much faster is that I have trimmed many of the unneeded includes.; ### Unified Header Inclusions. All include files are (or should be) relative to root (In practice I missed some, but they are in the same directory as the file they are included in and are fine for now). The reason for this ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:4395,depend,dependencies,4395,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,"e some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1081,adapter,adapter,1081,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapter'],['adapter']
Integrability,"e'll then just change the variable in the header and eliminate the relevant converters.; * To eliminate code duplication, I added some new objects to the wavefunction that ""contain"" alpha/beta specific quantities. So instead of needing to write the orbital rotation code once for closed-shell, once for open-shell alpha, and once for open-shell beta, you only write it once. I'm not sure how well it generalizes to other functions, but it sure cleaned up update_mo!. ## Capability Loss/Gain; As a result of this switch, we lose the ability to ""level shift"" in OCC. ""Level shift"" is a misnomer and actually refers to scaling the diagonal elements of the DIIS B-matrix. When I'm done, the orbital convergence will be so much better that we won't notice it's gone. In the short term, this does cause more test failures. ## Questions; * Because we're losing ""level shifting"", we're losing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we'r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:2699,message,message,2699,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['message'],['message']
Integrability,"e, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure. ## Questions; - [x] Is `libciomr` a good place for the new wrappers to live in? The one they are replacing is there, so it seemed like as good of a place as any. ## Checklist; - [x] No new feature",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:2052,wrap,wrapper,2052,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['wrap'],['wrapper']
Integrability,e; pyqtchart 5.12 py37he336c9b_8 conda-forge; pyqtwebengine 5.12.1 py37he336c9b_8 conda-forge; pyrsistent 0.18.1 py37h5e8e339_0 conda-forge; pysocks 1.7.1 py37h89c1867_3 conda-forge; pytest 6.2.5 py37h06a4308_2 ; python 3.7.12 hb7a2778_100_cpython conda-forge; python-dateutil 2.8.2 pyhd3eb1b0_0 ; python_abi 3.7 2_cp37m conda-forge; pytz 2021.3 pyhd3eb1b0_0 ; pyyaml 6.0 py37h7f8727e_1 ; pyzmq 22.3.0 py37h336d617_1 conda-forge; qcelemental 0.24.0 pyhd8ed1ab_0 psi4; qcengine 0.23.0 pyhd8ed1ab_0 psi4; qt 5.12.9 h9d6b050_2 conda-forge; qtconsole 5.2.2 pyhd8ed1ab_1 conda-forge; qtconsole-base 5.2.2 pyhd8ed1ab_1 conda-forge; qtpy 2.0.1 pyhd8ed1ab_0 conda-forge; rdkit 2020.09.5 py37he53b9e1_0 conda-forge; readline 8.1 h46c0cb4_0 conda-forge; reportlab 3.5.67 py37hfdd840d_1 ; reproc 14.2.1 h36c2ea0_0 conda-forge; reproc-cpp 14.2.1 h58526e2_0 conda-forge; requests 2.25.1 pyhd3deb0d_0 conda-forge; ruamel_yaml 0.15.80 py37h5e8e339_1004 conda-forge; send2trash 1.8.0 pyhd8ed1ab_0 conda-forge; setuptools 49.6.0 py37h89c1867_3 conda-forge; simint 0.7 h642920c_1 psi4; six 1.15.0 pyh9f0ad1d_0 conda-forge; soupsieve 2.3.1 pyhd8ed1ab_0 conda-forge; sqlalchemy 1.4.32 py37h7f8727e_0 ; sqlite 3.38.0 hc218d9a_0 ; terminado 0.13.3 py37h89c1867_0 conda-forge; testpath 0.6.0 pyhd8ed1ab_0 conda-forge; tk 8.6.12 h27826a3_0 conda-forge; toml 0.10.2 pyhd3eb1b0_0 ; tornado 6.1 py37h5e8e339_2 conda-forge; tqdm 4.59.0 pyhd8ed1ab_0 conda-forge; traitlets 5.1.1 pyhd8ed1ab_0 conda-forge; typing-extensions 4.1.1 hd3eb1b0_0 ; typing_extensions 4.1.1 pyh06a4308_0 ; urllib3 1.26.3 pyhd8ed1ab_0 conda-forge; wcwidth 0.2.5 pyh9f0ad1d_2 conda-forge; webencodings 0.5.1 py_1 conda-forge; wheel 0.36.2 pyhd3deb0d_0 conda-forge; widgetsnbextension 3.6.0 py37h89c1867_0 conda-forge; wrapt 1.13.3 py37h7f8727e_2 ; xz 5.2.5 h516909a_1 conda-forge; yaml 0.2.5 h516909a_0 conda-forge; zeromq 4.3.4 h9c3ff4c_1 conda-forge; zipp 3.7.0 pyhd3eb1b0_0 ; zlib 1.2.11 h166bdaf_1014 conda-forge; zstd 1.5.2 ha95c52a_0 conda-forge; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693:8795,wrap,wrapt,8795,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693,1,['wrap'],['wrapt']
Integrability,ec; Start 231: mp2-module; 221/412 Test #219: mints8 ........................... Passed 15.95 sec; Start 232: mp2p5-grad1; 222/412 Test #229: mp2-grad1 ........................ Passed 3.19 sec; Start 233: mp2p5-grad2; 223/412 Test #230: mp2-grad2 ........................ Passed 3.94 sec; Start 234: mp3-grad1; 224/412 Test #207: ghosts ........................... Passed 34.34 sec; Start 235: mp3-grad2; 225/412 Test #232: mp2p5-grad1 ...................... Passed 4.41 sec; Start 236: mp2-property; 226/412 Test #234: mp3-grad1 ........................ Passed 3.21 sec; Start 237: mpn-bh; 227/412 Test #233: mp2p5-grad2 ...................... Passed 6.31 sec; Start 238: nbody-he-cluster; 228/412 Test #227: mp2-1 ............................ Passed 10.68 sec; Start 239: nbody-intermediates; 229/412 Test #235: mp3-grad2 ........................ Passed 5.49 sec; Start 240: numpy-array-interface; 230/412 Test #236: mp2-property ..................... Passed 4.03 sec; Start 241: ocepa-freq1; 231/412 Test #240: numpy-array-interface ............ Passed 1.00 sec; Start 242: ocepa-grad1; 232/412 Test #237: mpn-bh ........................... Passed 4.64 sec; Start 243: ocepa-grad2; 233/412 Test #242: ocepa-grad1 ...................... Passed 11.23 sec; Start 244: ocepa1; 234/412 Test #244: ocepa1 ........................... Passed 5.71 sec; Start 245: ocepa2; 235/412 Test #239: nbody-intermediates .............. Passed 18.78 sec; Start 246: ocepa3; 236/412 Test #205: frac-ip-fitting .................. Passed 70.79 sec; Start 247: omp2-1; 237/412 Test #220: mints-benchmark .................. Passed 46.59 sec; Start 248: omp2-2; 238/412 Test #247: omp2-1 ........................... Passed 4.70 sec; Start 249: omp2-3; 239/412 Test #184: isapt2 ........................... Passed 124.89 sec; Start 250: omp2-4; 240/412 Test #238: nbody-he-cluster ................. Passed 44.71 sec; Start 251: omp2-5; 241/412 Test #248: omp2-2 ........................... Passed 17.52 sec; Start 252: omp2-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:21529,interface,interface,21529,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['interface'],['interface']
Integrability,"ed #2677)**; - [x] Delete unused functions/overloads from `occ`: `Array2d::diagonalize`, `Array2d::davidson`, `Array2d::cdsyev`, `Array2d::cdgesv`, `Array2d::lineq_flin`, `Array2d::lineq_pople`, `SymBlockMatrix::davidson`, `SymBlockMatrix::diagonalize`, `SymBlockMatrix::cdsyev`, `SymBlockMatrix::cdgesv`, `SymBlockMatrix::lineq_flin`, `SymBlockMatrix::lineq_pople` (never called and not PSI_API) **(merged #2679)**; - [x] Delete unused functions/overloads from `dfocc`: `Array2d::diagonalize, Array2d::davidson, Array2d::cdsyev, Array2d::cdgesv, Array2d::lineq_flin, Array2d::lineq_pople` and `Tensor2d::davidson, Tensor2d::cdsyev, Tensor2d::cdgesv, Tensor2d::lineq_flin, Tensor2d::lineq_pople` (PR #2684); - [x] Delete unused function overloads from `libmints`: `Matrix::diagonalize` (PR #2693); - [x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrap",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:1494,wrap,wrapper,1494,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,ed 15.43 sec; Start 399: json-v11-gradient; 385/412 Test #381: psi4numpy-cphf ................... Passed 14.94 sec; Start 401: json-schema-1-ghost; 386/412 Test #384: psi4numpy-rhf-gradient ........... Passed 14.67 sec; Start 379: mints12; 387/412 Test #355: tu2-ch2-energy ................... Passed 14.64 sec; Start 310: pywrap-molecule; 388/412 Test #397: python-memdfjk ................... Passed 14.35 sec; Start 388: python-energy; 389/412 Test #405: json-schema-1-properties ......... Passed 14.49 sec; Start 335: scf3; 390/412 Test #215: mints3 ........................... Passed 15.09 sec; Start 217: mints5; 391/412 Test #399: json-v11-gradient ................ Passed 14.86 sec; Start 212: mcscf3; 392/412 Test #379: mints12 .......................... Passed 14.63 sec; Start 383: psi4numpy-rhf; 393/412 Test #401: json-schema-1-ghost .............. Passed 15.23 sec; Start 210: mcscf1; 394/412 Test #310: pywrap-molecule .................. Passed 14.37 sec; Start 240: numpy-array-interface; 395/412 Test #388: python-energy .................... Passed 14.64 sec; Start 213: mints1; 396/412 Test #335: scf3 ............................. Passed 14.09 sec; Start 309: pywrap-db3; 397/412 Test #217: mints5 ........................... Passed 14.04 sec; Start 175: docs-bases; 398/412 Test #212: mcscf3 ........................... Passed 13.97 sec; Start 216: mints4; 399/412 Test #210: mcscf1 ........................... Passed 13.81 sec; Start 410: skeletonscf; 400/412 Test #383: psi4numpy-rhf .................... Passed 14.91 sec; Start 209: matrix1; 401/412 Test #240: numpy-array-interface ............ Passed 13.74 sec; Start 176: docs-dft; 402/412 Test #213: mints1 ........................... Passed 14.04 sec; Start 365: options1; 403/412 Test #309: pywrap-db3 ....................... Passed 13.36 sec; Start 403: json-schema-1-throws; 404/412 Test #175: docs-bases ....................... Passed 13.52 sec; Start 88: cepa1; 405/412 Test #216: mints4 ........................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:37077,interface,interface,37077,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['interface'],['interface']
Integrability,"elete `Wabei_RHF_FT2_a.cc` (never called and not PSI_API) **(merged #2677)**; - [x] Delete unused functions/overloads from `occ`: `Array2d::diagonalize`, `Array2d::davidson`, `Array2d::cdsyev`, `Array2d::cdgesv`, `Array2d::lineq_flin`, `Array2d::lineq_pople`, `SymBlockMatrix::davidson`, `SymBlockMatrix::diagonalize`, `SymBlockMatrix::cdsyev`, `SymBlockMatrix::cdgesv`, `SymBlockMatrix::lineq_flin`, `SymBlockMatrix::lineq_pople` (never called and not PSI_API) **(merged #2679)**; - [x] Delete unused functions/overloads from `dfocc`: `Array2d::diagonalize, Array2d::davidson, Array2d::cdsyev, Array2d::cdgesv, Array2d::lineq_flin, Array2d::lineq_pople` and `Tensor2d::davidson, Tensor2d::cdsyev, Tensor2d::cdgesv, Tensor2d::lineq_flin, Tensor2d::lineq_pople` (PR #2684); - [x] Delete unused function overloads from `libmints`: `Matrix::diagonalize` (PR #2693); - [x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:1432,wrap,wrappers,1432,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrappers']
Integrability,"eneric python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:2871,depend,dependency,2871,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['depend'],['dependency']
Integrability,"engthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincav",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:1142,interface,interface,1142,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['interface'],['interface']
Integrability,enhances the visibility of psi4's error messages,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862:40,message,messages,40,https://psicode.org,https://github.com/psi4/psi4/pull/1862,1,['message'],['messages']
Integrability,"eometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 304, in popen\n ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 858, in __",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1760,Message,Message,1760,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['Message'],['Message']
Integrability,"er API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Triplet TDDFT excitations from RKS are now supported. ## Theoretical Analysis. Why were DFT triplets harder than HF triplets? To understand this, we need to understand both the origin of the triplet matrix and the spin properties of the relevant matrix elements. 1. Starting from the UKS RPA/TDA matrices when Ca = Cb, we can do a similarity transformation to obtain the singlet and triplet RKS matrices. The new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbitals have the same spin. Meanwhile, the DFT V terms are second derivatives of the DFT energy with respect to orbital rotation generators. These are not spin-free.; 3. Now let's combine the two above facts. After performing the spin-integration in the triplet case, you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:1653,integrat,integrates,1653,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['integrat'],['integrates']
Integrability,"erhaul.; This is another shard of the https://github.com/psi4/psi4/pull/2642 mega-PR that can be merged after PR #2678 and #2738 are in. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with ne",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:1709,wrap,wrapper,1709,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['wrap'],['wrapper']
Integrability,"ers, GMPXX, and Eigen3; * configure something like Exhibit A below. `CMAKE_PREFIX_PATH` is where you hint your boost, gmp, eigen, etc. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, too: https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L86-L87; * If that configures, let it build `cmake --build <build_dir> -j<N>`. definitely do this step in parallel. ### Note on AM=7; Regular AM is 5. If you only need 7, you can use this tarball rather than generating your own with `--target export` in L2 repo: https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2_rev1.tgz Start above directions at ""Now back at your psi4 clone..."". Still GCC only, not Intel compilers. ### Exhibit A; ```; cmake -S. -Bbuild \; -G Ninja \; -D LIBINT_BUILD_LIBRARY_AS_SUBPROJECT=OFF \; -D CMAKE_INSTALL_PREFIX=/path/to/l2/install \; -D REQUIRE_CXX_API=ON \; -D REQUIRE_CXX_API_COMPILED=OFF \; -D BUILD_TESTING=ON \; -D CMAKE_PREFIX_PATH=""/psi/toolchainconda/envs/singleboost;/psi/toolchainconda/envs/singlegmp;/psi/toolchainconda/envs/singleeigen"" \; -D ENABLE_MPFR=OFF \; -D LIBINT_LOCAL_EIGEN3_INSTALL=OFF \; -D CMAKE_CXX_COMPILER",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:2008,depend,dependency,2008,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['depend'],['dependency']
Integrability,"es.; * `libtrans` only recognizes TPDM in `libiwl` format, which is why all codes must use that.; * There is a single `IntegralTransform` call [for all modules](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L511). Because the Quantum Trio-era `detci` and `cc` codes used QT ordering, that `IntegralTransform` must be [told to assume QTOrder](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518), so all other modules must use QT order.; * The need to assemble a single 1PDM is, superficially, because [`IntegralTransform` is told to expect that](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518). `backtransform_density` was never designed with any other structure in mind.; * Each code has its own density-fitted gradients for the simple reason that nobody tried to design truly general density-fitted gradients for Psi. ## Conventions; Unless otherwise indicated, any mention of ""1PDM"" or ""2PDM"" refers to relaxed quantities, the things you contract against the one-electron and two-electron integral derivatives. ## Interface Proposal; * Backtransformation of two-index quantities no longer requires having the _entire_ matrix assembled. You can backtransform blocks at a time based on occupation, which is what you're more likely to have.; * Either each caller code creates its own integral transformation object and instructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored corr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:4496,contract,contract,4496,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['contract'],['contract']
Integrability,"escription; In this PR, we implement a pilot version of least squares tensor hypercontraction (LS-THC)... factoring 4-index ERIs (O(N^4)) into two-index quantities (i.e. $(mn|rs) = x_{m}^{P}x_{n}^{P}Z^{PQ}x_{r}^{Q}x_{s}^{Q}$). In the LS-THC formulation, $P$ and $Q$ are derived from grid points, and. $x_{m}^{P} = w_{P}^{\frac{1}{4}} \phi_{m}(x_{P}, y_{P}, z_{P})$,; $E^{PQ} = x_{m}^{P}x_{n}^{P}(mn|rs)x_{r}^{Q}x_{s}^{Q}$; $S^{PP'} = (x_{m}^{P}x_{m}^{P'})^{2}$; $Z^{PQ} = (S^{PP'})^{-1} E^{P'Q'} (S^{QQ'})^{-1}$. This is based off of the work of [Parrish et al. (2012)](https://pubs.aip.org/aip/jcp/article/137/22/224106/194901/Tensor-hypercontraction-II-Least-squares). These quantities can be constructed integral-direct and non-iteratively. No four or even three-index quantities are stored, thereby allowing for the future development of efficient, low-memory quantum chemistry algorithms in Psi. This is a PR in a series of planned PRs that will involve:; 1.) LS-THC-JK (integral-direct SCF without recomputing ERIs every iteration and faster K construction); 2.) LS-THC-MP2; 3.) Local grid implementation of LS-THC to allow for use in local correlation methods (DLPNO-MP2, DLPNO-CCSD/(T)). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Added Python interface (Pybind) for building LS-THC quantities that allow for rapid prototyping of new methods involving THC; - [x] Developed infrastructure for the development of alternate ways to perform THC (i.e. PF-THC). ## Dev notes & details; - [x] Implemented LS-THC C/Py-side for future QC methods. ## Questions; - [x] Is this the proper way to export this object Py-side?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3157:1386,interface,interface,1386,https://psicode.org,https://github.com/psi4/psi4/pull/3157,1,['interface'],['interface']
Integrability,"eset to 14.; - [ ] pull together accumulated xhost changes (hiccup here is that `icpx` can take `-xHost` but `icx` can't, and our `option_with_flags` routine tries both so it throws an unnecessary warning. not a must for this PR).; - [x] the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). This isn't too debilitating since only HF and SVWN have analytic hessians anyways, so when an incapable L2 is detected (imagine that -- we can ask L2 what it can do!), it falls back to FD. That would be easy enough except the tests check too tightly for 3-pt FD to match analytical refs. So I've added a `d2ints` label to ctest and pytest to allow not running. This should probably convert to a skipif someday. Most of the tests I've checked individually and they would pass if findif points=5.; - [x] You notice a ""new"" boost-cpp dependency. Compiling against the header-only L2 C++11 interface (as psi4 does) requires a select few boost headers. In building the L2 package, one can either ask L2 to copy those few files in to `include/libint2/boost/` (that is, vendor boost) or not, effectively passing the problem along to the consumer (psi). In my own conda packages for L2, I did the former, so psi didn't need any boost. For the c-f L2 packages, I figured it was better practice to not vendor, hence the ""new"" dep. It's header-only, not boost::python or any of the boost compiled libs, so not too much trouble, I think. ## Questions; Can look at the libmints files to form an opinion on these.; - [x] `libint2::initialize()` was called three times, but `libint2::finalize()` only once. I added two more, but should I have?; - [x] Also, since we need to set the ordering, should the init be centralized in core.cc, or is it fine as is?; - [ ] technically, ordering could be set at runtime. that seemed hard to rel",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861:2746,depend,dependency,2746,https://psicode.org,https://github.com/psi4/psi4/pull/2861,1,['depend'],['dependency']
Integrability,"esolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-DIAG_METHOD-DETCI) are deprecated kwargs (see also: #2640 ), so I can't test them. . given [`np.linalg.eigh`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigh.html) just uses LAPACK's syevd/heevd, and `RSP` is just supposed to be LAPACK's dsyev, this result is very perturbing. . I've attached output files for the [Davidson](https://github.com/psi4/psi4/files/13431543/output_dav.txt) and [RSP](https://github.com/psi4/psi4/files/13431545/output_rsp.txt) schemes, as well as [GAMESS](https://github.com/psi4/psi4/files/13431555/output_gms.txt).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:2707,rout,routines,2707,https://psicode.org,https://github.com/psi4/psi4/issues/3083,2,['rout'],['routines']
Integrability,"esolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error messages have been wanting, being hampered by being generated by exceptions. In particular, they give no clue how close you are to a working method -- do you need to tweak aefc or uhf/rohf or is this method nowhere in psi or have you misspelled it? Now, the ManagedMethodsError exception has been reworked to return current conditions data (to be caught and reformatted) and the error message itself (usually not seen directly) has been reworked to provide more conditions and a link to the table row in the docs where one can see what _would_ run. Back at driver_util.py, these errors are reformatted according to whether managed or plain method, whether deriv isn't available at all or just not demanded deriv, etc. Whenever possible, try to provide conditions that didn't run and a docs link. Some examples of before and after at https://github.com/psi4/psi4/pull/2731/files#diff-d6e974accd9a58a9993b3babac9fab5c85099ba6072de01c9a6bcc4ad430dc56L22-R82 .; - [x] Added mp4(sdq), mp4, zapt2, cisd, qcisd, qcisd(t), fci, cepa(1), cepa(3), acpf, aqcc, ccd, bccd, bccd(t), cc2, cc3, and some representative DFTs (svwn, pbe, b3lyp, wb97x, b2plyp) to standard suite testing to nail down their capabilities. Added some advice to the stdsuite so that others can perhaps edit it.; * all but cepa(1), cepa(3), acpf, aqcc,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:9417,message,message,9417,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['message'],['message']
Integrability,est #302: pywrap-cbs1 ...................... Passed 30.77 sec; Start 91: cepa-module; 58/411 Test #316: sapt2 ............................ Passed 305.80 sec; Start 319: sapt5; 59/411 Test #58: cc41 ............................. Passed 36.59 sec; Start 69: cc51; 60/411 Test #230: mp2-module ....................... Passed 54.15 sec; Start 60: cc43; 61/411 Test #91: cepa-module ...................... Passed 23.95 sec; Start 167: dft-b3lyp; 62/411 Test #279: opt14 ............................ Passed 73.59 sec; Start 74: cc5a; 63/411 Test #60: cc43 ............................. Passed 20.33 sec; Start 204: frac-ip-fitting; 64/411 Test #317: sapt3 ............................ Passed 71.21 sec; Start 104: dcft-grad2; 65/411 Test #104: dcft-grad2 ....................... Passed 11.72 sec; Start 115: dcft9; 66/411 Test #74: cc5a ............................. Passed 36.60 sec; Start 292: psimrcc-fd-freq2; 67/411 Test #69: cc51 ............................. Passed 55.79 sec; Start 19: cbs-xtpl-wrapper; 68/411 Test #319: sapt5 ............................ Passed 62.74 sec; Start 144: dfomp2-grad2; 69/411 Test #115: dcft9 ............................ Passed 17.82 sec; Start 46: cc30; 70/411 Test #144: dfomp2-grad2 ..................... Passed 12.75 sec; Start 61: cc44; 71/411 Test #167: dft-b3lyp ........................ Passed 61.83 sec; Start 149: dfomp3-grad2; 72/411 Test #204: frac-ip-fitting .................. Passed 58.04 sec; Start 11: cbs-delta-energy; 73/411 Test #149: dfomp3-grad2 ..................... Passed 14.73 sec; Start 43: cc28; 74/411 Test #46: cc30 ............................. Passed 23.10 sec; Start 259: omp3-3; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 46.33 sec; Start 17: cbs-xtpl-opt; 76/411 Test #292: psimrcc-fd-freq2 ................. Passed 55.91 sec; Start 100: ci-property; 77/411 Test #61: cc44 ............................. Passed 42.92 sec; Start 389: python-pubchem; 78/411 Test #43: cc28 ............................. Passed 33.97 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:6525,wrap,wrapper,6525,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['wrap'],['wrapper']
Integrability,est #371: dft-custom-dhdf .................. Passed 87.91 sec; Start 279: opt14; 43/411 Test #240: ocepa-freq1 ...................... Passed 60.77 sec; Start 76: cc7; 44/411 Test #47: cc31 ............................. Passed 43.50 sec; Start 145: dfomp2-grad3; 45/411 Test #281: opt-irc-2 ........................ Passed 97.20 sec; Start 319: sapt5; 46/411 Test #317: sapt3 ............................ Passed 76.93 sec; Start 69: cc51; 47/411 Test #316: sapt2 ............................ Passed 359.14 sec; Start 167: dft-b3lyp; 48/411 Test #279: opt14 ............................ Passed 77.60 sec; Start 292: psimrcc-fd-freq2; 49/411 Test #319: sapt5 ............................ Passed 74.24 sec; Start 29: cc14; 50/411 Test #69: cc51 ............................. Passed 68.34 sec; Start 75: cc6; 51/411 Test #76: cc7 .............................. Passed 103.34 sec; Start 204: frac-ip-fitting; 52/411 Test #167: dft-b3lyp ........................ Passed 67.69 sec; Start 19: cbs-xtpl-wrapper; 53/411 Test #145: dfomp2-grad3 ..................... Passed 121.49 sec; Start 114: dcft8; 54/411 Test #29: cc14 ............................. Passed 41.75 sec; Start 61: cc44; 55/411 Test #292: psimrcc-fd-freq2 ................. Passed 66.23 sec; Start 74: cc5a; 56/411 Test #75: cc6 .............................. Passed 56.18 sec; Start 159: dft-grad-meta; 57/411 Test #19: cbs-xtpl-wrapper ................. Passed 49.61 sec; Start 24: cc13; 58/411 Test #204: frac-ip-fitting .................. Passed 62.23 sec; Start 297: pubchem1; 59/411 Test #61: cc44 ............................. Passed 50.54 sec; Start 17: cbs-xtpl-opt; 60/411 Test #74: cc5a ............................. Passed 53.95 sec; Start 100: ci-property; 61/411 Test #114: dcft8 ............................ Passed 75.09 sec; Start 280: opt-irc-1; 62/411 Test #159: dft-grad-meta .................... Passed 54.04 sec; Start 389: python-pubchem; 63/411 Test #297: pubchem1 ......................... Passed 54.36 sec; Start 28: c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:5100,wrap,wrapper,5100,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['wrap'],['wrapper']
Integrability,est #372: dft-custom-dhdf .................. Passed 97.85 sec; Start 76: cc6; 63/412 Test #281: opt-irc-1 ........................ Passed 72.44 sec; Start 193: fd-freq-energy; 64/412 Test #280: opt14 ............................ Passed 89.89 sec; Start 260: omp3-3; 65/412 Test #70: cc51 ............................. Passed 73.29 sec; Start 320: sapt5; 66/412 Test #76: cc6 .............................. Passed 70.93 sec; Start 261: omp3-4; 67/412 Test #318: sapt3 ............................ Passed 90.41 sec; Start 231: mp2-module; 68/412 Test #260: omp3-3 ........................... Passed 33.57 sec; Start 17: cbs-xtpl-opt; 69/412 Test #193: fd-freq-energy ................... Passed 58.53 sec; Start 116: dcft9; 70/412 Test #317: sapt2 ............................ Passed 354.70 sec; Start 293: psimrcc-fd-freq2; 71/412 Test #261: omp3-4 ........................... Passed 31.51 sec; Start 21: cc1; 72/412 Test #116: dcft9 ............................ Passed 25.23 sec; Start 20: cbs-xtpl-wrapper; 73/412 Test #21: cc1 .............................. Passed 21.49 sec; Start 250: omp2-4; 74/412 Test #231: mp2-module ....................... Passed 55.07 sec; Start 19: cbs-xtpl-nbody; 75/412 Test #17: cbs-xtpl-opt ..................... Passed 47.15 sec; Start 251: omp2-5; 76/412 Test #250: omp2-4 ........................... Passed 22.47 sec; Start 205: frac-ip-fitting; 77/412 Test #320: sapt5 ............................ Passed 82.22 sec; Start 168: dft-b3lyp; 78/412 Test #251: omp2-5 ........................... Passed 18.07 sec; Start 62: cc44; 79/412 Test #19: cbs-xtpl-nbody ................... Passed 29.87 sec; Start 28: cc13c; 80/412 Test #20: cbs-xtpl-wrapper ................. Passed 52.36 sec; Start 145: dfomp2-grad2; 81/412 Test #293: psimrcc-fd-freq2 ................. Passed 76.06 sec; Start 31: cc15; 82/412 Test #28: cc13c ............................ Passed 20.22 sec; Start 44: cc28; 83/412 Test #31: cc15 ............................. Passed 30.15 sec; Start 264: omp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:6928,wrap,wrapper,6928,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['wrap'],['wrapper']
Integrability,est #389: python-pubchem ................... Passed 53.08 sec; Start 61: cc44; 49/411 Test #111: dcft5 ............................ Passed 256.36 sec; Start 170: dft1-alt; 50/411 Test #61: cc44 ............................. Passed 68.38 sec; Start 100: ci-property; 51/411 Test #170: dft1-alt ......................... Passed 47.95 sec; Start 2: adc2; 52/411 Test #2: adc2 ............................. Passed 41.32 sec; Start 230: mp2-module; 53/411 Test #100: ci-property ...................... Passed 53.35 sec; Start 219: mints-benchmark; 54/411 Test #305: pywrap-checkrun-rohf ............. Passed 328.05 sec; Start 348: sapt-compare; 55/411 Test #219: mints-benchmark .................. Passed 40.12 sec; Start 38: cc23; 56/411 Test #348: sapt-compare ..................... Passed 43.18 sec; Start 131: dfmp2-3; 57/411 Test #230: mp2-module ....................... Passed 79.66 sec; Start 40: cc25; 58/411 Test #145: dfomp2-grad3 ..................... Passed 526.80 sec; Start 19: cbs-xtpl-wrapper; 59/411 Test #131: dfmp2-3 .......................... Passed 40.26 sec; Start 307: pywrap-db1; 60/411 Test #35: cc2 .............................. Passed 327.30 sec; Start 74: cc5a; 61/411 Test #307: pywrap-db1 ....................... Passed 39.70 sec; Start 17: cbs-xtpl-opt; 62/411 Test #41: cc26 ............................. Passed 280.38 sec; Start 29: cc14; 63/411 Test #19: cbs-xtpl-wrapper ................. Passed 77.77 sec; Start 42: cc27; 64/411 Test #74: cc5a ............................. Passed 97.39 sec; Start 276: opt11; 65/411 Test #318: sapt4 ............................ Passed 1909.66 sec; Start 47: cc31; 66/411 Test #276: opt11 ............................ Passed 105.52 sec; Start 273: opt7; 67/411 Test #17: cbs-xtpl-opt ..................... Passed 206.55 sec; Start 36: cc21; 68/411 Test #273: opt7 ............................. Passed 91.44 sec; Start 206: ghosts; 69/411 Test #110: dcft4 ............................ Passed 800.05 sec; Start 312: rasci-ne; 70/411 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:5705,wrap,wrapper,5705,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['wrap'],['wrapper']
Integrability,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:2140,rout,routing,2140,https://psicode.org,https://github.com/psi4/psi4/pull/2536,1,['rout'],['routing']
Integrability,etkw3getINSt3__16vectorIiNS1_9allocatorIiEEEEEERKT_RKNS1_12basic_stringIcNS1_11char_traitsIcEENS3_IcEEEE; 0000000000005e10 S __ZNK5Getkw3getIbEERKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE; 00000000000060f0 S __ZNK5Getkw3getIdEERKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE; 0000000000005b30 S __ZNK5Getkw3getIiEERKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE; 00000000000016f0 T __ZNK5Getkw4reprERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEE; 0000000000001650 T __ZNK5Getkw5printEv; 00000000000017a0 T __ZNK5Getkw7getSectERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; U __ZTI10GetkwError; 000000000000bd10 S __ZTI5Getkw; 000000000000c7f8 S __ZTS5Getkw; 000000000000bcf0 S __ZTV5Getkw; 000000000000eb00 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE10BOOL_ARRAY; 000000000000ea40 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3DBL; 000000000000ea20 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3INT; 000000000000ea80 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3STR; 000000000000ea60 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4BOOL; 000000000000eaa0 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4DATA; 000000000000eae0 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9DBL_ARRAY; 000000000000eac0 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9INT_ARRAY; 000000000000eb20 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9STR_ARRAY; 000000000000ea00 b __ZZN5Getkw8readlineERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_19basic_istringstreamIcS3_NS0_9allocatorIcEEEEE3buf; interfaces/lib/libgetkw.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171058175:5253,interface,interfaces,5253,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171058175,1,['interface'],['interfaces']
Integrability,"etonsointegrals .............. Passed 1.37 sec; Start 175: docs-dft; 390/411 Test #334: scf3 ............................. Passed 1.13 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.14 sec; Start 215: mints4; 392/411 Test #209: mcscf1 ........................... Passed 0.86 sec; Start 208: matrix1; 393/411 Test #354: tu2-ch2-energy ................... Passed 0.98 sec; Start 364: options1; 394/411 Test #382: psi4numpy-rhf .................... Passed 0.89 sec; Start 402: json-schema-1-throws; 395/411 Test #211: mcscf3 ........................... Passed 0.76 sec; Start 87: cepa1; 396/411 Test #309: pywrap-molecule .................. Passed 1.18 sec; 397/411 Test #216: mints5 ........................... Passed 1.01 sec; 398/411 Test #396: python-memdfjk ................... Passed 1.06 sec; 399/411 Test #212: mints1 ........................... Passed 0.85 sec; 400/411 Test #409: skeletonscf ...................... Passed 0.69 sec; 401/411 Test #239: numpy-array-interface ............ Passed 0.72 sec; 402/411 Test #174: docs-bases ....................... Passed 0.62 sec; 403/411 Test #175: docs-dft ......................... Passed 0.68 sec; 404/411 Test #215: mints4 ........................... Passed 0.63 sec; 405/411 Test #208: matrix1 .......................... Passed 0.56 sec; 406/411 Test #308: pywrap-db3 ....................... Passed 0.70 sec; 407/411 Test #402: json-schema-1-throws ............. Passed 0.54 sec; 408/411 Test #364: options1 ......................... Passed 0.58 sec; 409/411 Test #87: cepa1 ............................ Passed 1.69 sec; 410/411 Test #18: cbs-xtpl-func .................... Passed 1416.82 sec; 411/411 Test #318: sapt4 ............................ Passed 1680.10 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 56.67 sec*proc (2 tests); autotest = 2018.64 sec*proc (26 tests); cart = 19448.39 sec*proc (123 tests); cas = 58.63 sec*proc (1 test); casscf = 130.95 sec*proc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:37641,interface,interface,37641,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['interface'],['interface']
Integrability,"etry-broken solution. At 90 degrees, the true symmetry of the molecule is D2d. Since this is a non-Abelian group, Psi4 (and most codes) can't run it as D2d, so it gets run in a subgroup. Here, there are 2 choices for subgroups, C2v and D2. Psi4 picks C2v, very unfortunately, and in that subgroup, it finds a wavefunction that is very symmetry broken (compared to the full symmetry D2d), and it gets a really large, totally unphysical dipole moment of 3.2 debye. . I haven't yet managed to convince Psi4 that D2 is an acceptable subgroup at the 90 degrees geometry, but if I set the torsion angle to just off of 90 degrees (say, 89.9 deg), the code correctly detects D2 symmetry, and gets a much lower energy solution of -77.87817, which is the same one Daniel and Bert are finding for their computations that turn symmetry off (difference is because of my slightly perturbed geometry). And the dipole moment is pleasantly 0.000 debye, like it's supposed to be. . So, you guys are actually finding a symmetric solution when you use C1 (which is what's supposed to happen), and it's the correct-symmetry solution, unlike the C2v solution that Psi4 is falling into at this geometry. I take some small consolation in the fact that Q-Chem also finds the same C2v solution at 90 degrees, in my quick tests (with or without symmetry turned on). I don't know of a general strategy to teach Psi4 that D2 is a better choice in this case than C2v, because both are legitimate subgroups. And I don't think the idea of running everything in C1 is necessarily a good idea either, since then one is opened up to the possibility of getting unphysical symmetry breaking solutions like in the case of NO3. But, in this case, using symmetry also got us an unphysical symmetry-broken solution because we used the wrong point group. So, I'm not sure of a general strategy for all this, although I share the concern of @dgasmith that the behavior can be non-deterministic depending on small details that shouldn't matter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349737355:3180,depend,depending,3180,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349737355,1,['depend'],['depending']
Integrability,external charge field interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1541:22,interface,interface,22,https://psicode.org,https://github.com/psi4/psi4/issues/1541,1,['interface'],['interface']
Integrability,"external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake:145 (find_package); CMakeLists.txt:31 (find_package). -- Configuring incomplete, errors occurred!; ```; I'm using cmake version 3.10.2, GNU compilers version 7.3.0 and Intel MKL 2019.1.144; I noticed that ``stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake`` does",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:1504,message,message,1504,https://psicode.org,https://github.com/psi4/psi4/issues/1426,1,['message'],['message']
Integrability,f-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 28.77 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 875.05 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 13.09 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Passed 41.74 sec; Start 22: cc11; 28/411 Test #19: cbs-xtpl-wrapper ................. Passed 87.45 sec; Start 23: cc12; 29/411 Test #17: cbs-xtpl-opt ..................... Passed 124.67 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 40.19 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 65.06 sec; Start 27: cc13c; 32/411 Test #20: cc1 .............................. Passed 164.35 sec; Start 28: cc13d; 33/411 Test #11: cbs-delta-energy ................. Passed 341.48 sec; Start 29: cc14; 34/411 Test #26: cc13b ............................ Passed 204.38 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 209.71 sec; Start 31: cc16; 36/411 Test #13: cbs-xtpl-alpha ........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:2526,wrap,wrapper,2526,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['wrap'],['wrapper']
Integrability,f1 ......................... Passed 1.06 sec; Start 217: mints4; 387/413 Test #222: mints-helper ..................... Passed 1.14 sec; Start 366: options1; 388/413 Test #336: scf3 ............................. Passed 0.87 sec; Start 214: mints1; 389/413 Test #332: scf-bs ........................... Passed 1.06 sec; Start 211: mcscf1; 390/413 Test #216: mints3 ........................... Passed 1.11 sec; Start 177: docs-dft; 391/413 Test #223: mints9 ........................... Passed 2.13 sec; Start 162: dft-grac; 392/413 Test #347: dfep2-2 .......................... Passed 2.02 sec; Start 311: pywrap-molecule; 393/413 Test #8: castup1 .......................... Passed 1.50 sec; Start 310: pywrap-db3; 394/413 Test #213: mcscf3 ........................... Passed 0.90 sec; Start 176: docs-bases; 395/413 Test #217: mints4 ........................... Passed 0.61 sec; Start 210: matrix1; 396/413 Test #366: options1 ......................... Passed 0.61 sec; Start 103: cubeprop-frontier; 397/413 Test #241: numpy-array-interface ............ Passed 0.80 sec; Start 88: cepa1; 398/413 Test #214: mints1 ........................... Passed 0.75 sec; 399/413 Test #177: docs-dft ......................... Passed 0.62 sec; 400/413 Test #218: mints5 ........................... Passed 1.04 sec; 401/413 Test #212: mcscf2 ........................... Passed 1.45 sec; 402/413 Test #211: mcscf1 ........................... Passed 0.71 sec; 403/413 Test #300: pubchem2 ......................... Passed 1.60 sec; 404/413 Test #176: docs-bases ....................... Passed 0.57 sec; 405/413 Test #310: pywrap-db3 ....................... Passed 0.66 sec; 406/413 Test #210: matrix1 .......................... Passed 0.67 sec; 407/413 Test #311: pywrap-molecule .................. Passed 1.08 sec; 408/413 Test #162: dft-grac ......................... Passed 1.48 sec; 409/413 Test #280: opt13 ............................ Passed 825.08 sec; 410/413 Test #103: cubeprop-frontier ................ Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:37319,interface,interface,37319,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['interface'],['interface']
Integrability,"few comments:. It's the ia32 (32bit) build, the x86_64 one is here:; https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=amd64&ver=1%3A1.2.1-1&stamp=1546603567&raw=0. > * no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`). Thanks, I thought I had removed them already. > * psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`). It is using python3, this must be some indirect dependency which I can do nothing about.; ; > * production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8. OK, I will look into that. > * I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`). Hrm right, I will take another look at building the manual, thanks for pointing that out. > * threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270. Ok, I'll try to run that during bulid as well. > * Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`). That one is likely due to 32bit: `tests/options1/input.dat` tried to allocate more than 4 GB in the last two attempts in the `check set_memory() wrapper` test; the same applies to `json-v11-energy` and `json_data[""memory""] = ""5GB""`. . So those are accounted for, the ones which are weird are the . ```; Exit Status: infile ( -11 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; failures. I've updated the packaging and am running a new build/test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762:1256,message,message,1256,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762,2,"['message', 'wrap']","['message', 'wrapper']"
Integrability,fmt: clang-format GDMA interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1166:23,interface,interface,23,https://psicode.org,https://github.com/psi4/psi4/pull/1166,1,['interface'],['interface']
Integrability,fmt: clang-format MRCC wrapper,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1160:23,wrap,wrapper,23,https://psicode.org,https://github.com/psi4/psi4/pull/1160,2,['wrap'],['wrapper']
Integrability,fockci integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1838:7,integrat,integration,7,https://psicode.org,https://github.com/psi4/psi4/issues/1838,1,['integrat'],['integration']
Integrability,"for df-mp2, these are the cases:; uhf energy: good, this is is Rob's code (we're pretty sure; test); rohf energy: we think this may be in Rob's code, but not verified vs other codes ; uhf grad: we think this may be in Rob's code, but not verified vs other codes ; rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2 w/o subsequent opt. ticket task: verify the above with the code and with the authors. if needed, re-route in driver (see mp2_type as example in `proc.py`. If anything looks to hard or want to defer, create a new ticket for it, and do all you can to close out this one. After discussion below, consolidated tasks:; - [x] re-route uhf grad through Ugur's code; - [x] make rohf grad fail gracefully; - [x] test all four cases; - [x] for uhf, make sure findif of Rob == Ugur; - [ ] comment `dfmp2/corr_grad.cc` stubs according to below",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107:438,rout,route,438,https://psicode.org,https://github.com/psi4/psi4/issues/107,2,['rout'],['route']
Integrability,"four/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1078, in _opener\n'; ' return self._accessor.open(self, flags, '; 'mode)\n'; 'FileNotFoundError: [Errno 2] No such file or '; 'directory: '; ""'/xstorage/tobias/bin/cfour/basis/GENBAS'\n"",; 'error_type': 'unknown_error',; 'extras': None},; 'extras': None,; 'id': None,; 'input_data': {'driver': 'energy',; 'keywords': {'CC_CONV': 12, 'SCF_CONV': 12},; 'model': {'basis': 'aug-pvqz', 'method': 'ccsd(t)'},; 'molecule': {'atom_labels': ['', '', ''],; 'atomic_numbers': [8, 1, 1],; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragments': [[0, 1, 2]],; 'geometry': [0.0,; 0.0,; -0.12403886030029525,; 0.0,; -1.431430901356359,; 0.9842933627189459,; 0.0,; 1.431430901356359,; 0.9842933627189459],; 'mass_numbers': [16, 1, 1],; 'masses': [15.99491461957,; 1.00782503223,; 1.00782503223],; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'H2O',; 'provenance': {'creator': 'QCElemental',; 'routine': 'qcelemental.molparse.from_string',; 'version': 'v0.24.0'},; 'real': [True, True, True],; 'schema_name': 'qcschema_molecule',; 'schema_version': 2,; 'symbols': ['O', 'H', 'H'],; 'validated': True},; 'provenance': {'cpu': 'Intel(R) Xeon(R) CPU E7-4870 v2 @ '; '2.30GHz',; 'creator': 'QCEngine',; 'hostname': 'nod10',; 'qcengine_version': 'v0.23.0',; 'username': 'tobias',; 'version': 'v0.23.0',; 'wall_time': 1.2955999374389648}},; 'success': False}; ```; ; Could you please help me what causes this error?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:2995,rout,routine,2995,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,2,['rout'],['routine']
Integrability,freq-energy ................... Passed 58.53 sec; Start 116: dcft9; 70/412 Test #317: sapt2 ............................ Passed 354.70 sec; Start 293: psimrcc-fd-freq2; 71/412 Test #261: omp3-4 ........................... Passed 31.51 sec; Start 21: cc1; 72/412 Test #116: dcft9 ............................ Passed 25.23 sec; Start 20: cbs-xtpl-wrapper; 73/412 Test #21: cc1 .............................. Passed 21.49 sec; Start 250: omp2-4; 74/412 Test #231: mp2-module ....................... Passed 55.07 sec; Start 19: cbs-xtpl-nbody; 75/412 Test #17: cbs-xtpl-opt ..................... Passed 47.15 sec; Start 251: omp2-5; 76/412 Test #250: omp2-4 ........................... Passed 22.47 sec; Start 205: frac-ip-fitting; 77/412 Test #320: sapt5 ............................ Passed 82.22 sec; Start 168: dft-b3lyp; 78/412 Test #251: omp2-5 ........................... Passed 18.07 sec; Start 62: cc44; 79/412 Test #19: cbs-xtpl-nbody ................... Passed 29.87 sec; Start 28: cc13c; 80/412 Test #20: cbs-xtpl-wrapper ................. Passed 52.36 sec; Start 145: dfomp2-grad2; 81/412 Test #293: psimrcc-fd-freq2 ................. Passed 76.06 sec; Start 31: cc15; 82/412 Test #28: cc13c ............................ Passed 20.22 sec; Start 44: cc28; 83/412 Test #31: cc15 ............................. Passed 30.15 sec; Start 264: omp3-grad2; 84/412 Test #145: dfomp2-grad2 ..................... Passed 33.33 sec; Start 27: cc13b; 85/412 Test #62: cc44 ............................. Passed 57.63 sec; Start 390: python-pubchem; 86/412 Test #205: frac-ip-fitting .................. Passed 71.71 sec; Start 262: omp3-5; 87/412 Test #168: dft-b3lyp ........................ Passed 75.48 sec; Start 245: ocepa2; 88/412 Test #27: cc13b ............................ Passed 23.72 sec; Start 243: ocepa-grad2; 89/412 Test #264: omp3-grad2 ....................... Passed 24.30 sec; Start 257: omp2p5-grad2; 90/412 Test #44: cc28 ............................. Passed 51.88 sec; Start 150: dfomp3-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:7604,wrap,wrapper,7604,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['wrap'],['wrapper']
Integrability,"fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm present within GauXC. Construction of the interface is specified at compile-time with the compile-time flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:2438,interface,interface,2438,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability,"fyi, you can put `fixes psi4/psi4#281` in the commit message of one of the commits in the PR, then the issue will close when the PR gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281#issuecomment-189511708:53,message,message,53,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189511708,1,['message'],['message']
Integrability,"g (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2758,message,message,2758,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,1,['message'],['message']
Integrability,"g it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:2849,depend,depending,2849,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['depend'],['depending']
Integrability,"g noise in nearly all Psi4 gradients, and I have not taken; the time to follow up on it. It puzzles me, because we never saw stuff; like this in Psi3... those gradients were already symmetric and did not; need a ""symmetrize"" function to be called.... The only part of Psi that; I've checked that seems immune to this problem is Daniel Crawford's CC; gradients, which are perfectly symmetric. On Wed, Jan 30, 2019 at 10:40 AM Jonathon Misiewicz <; notifications@github.com> wrote:. > Discovered while remedying test cases where reference numbers needed to be; > changed due to my upcoming #1143; > <https://github.com/psi4/psi4/issues/1143> fix. DFOCC gradients are not; > symmetrized. If you'd like an example, just look in the reference output; > files; > <https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604>!; > Symmetry of the overlap gradient is broken in the seventh decimal place.; > The other terms have some errors, but much smaller. That the overlap; > gradient is most afflicted is unsurprising, since the overlap integrals are; > contracted against one of the many ""generalized Fock matrices"". This one; > depends on the 1RDM and 2RDM, which are not currently symmetrized.; >; > I'm hoping to include this in 1.3 with the #1143; > <https://github.com/psi4/psi4/issues/1143> fix, since this bug could lead; > to optimizations failing, as we saw with DFMP2 two weeks ago (#1483; > <https://github.com/psi4/psi4/pull/1483>). Because individual terms are; > printed, the individual terms need to be symmetrized, and it may take me; > some time to find where the symmetrize calls need to be placed. If it; > takes too long, I'm fine with delaying to 1.4.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1504>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdjLHuk3Pa0yVJNLncI2ChdXedn-Rks5vIbzcgaJpZM4aad4X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782:1159,contract,contracted,1159,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782,2,"['contract', 'depend']","['contracted', 'depends']"
Integrability,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2190,interface,interface,2190,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,2,['interface'],['interface']
Integrability,"ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:2664,Depend,Depending,2664,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['Depend'],['Depending']
Integrability,"ghts reserved.; ; **************** THREAD INFORMATION ******************; Job running using OpenMP.; The number of parallel threads is: 4; ; ******************************************************; ; /home/termo/chargemol_09_26_2017/atomic_densities/ ; ; ******************** TIME CONTROL ********************; Starting format_total_cube_density; ******************************************************; ; inputfile = ""total_density.cube""; parameters; 5.0000000000000000 -12.329260000000000 -10.002257999999999 -9.6799070000000000 ; 131.00000000000000 0.16000000000000000 0.0000000000000000 0.0000000000000000 ; 120.00000000000000 0.0000000000000000 0.16000000000000000 0.0000000000000000 ; 122.00000000000000 0.0000000000000000 0.0000000000000000 0.16000000000000000 ; sum_negative_density= 0.0000000000000000 ; center_nabc =; 80 63 60; 55 63 60; 50 50 60; 50 69 71; 50 69 50; delta_na= 61; delta_nb= 61; delta_nc= 61; ; ******************** TIME CONTROL ********************; Starting check_grid_spacing; ******************************************************; ; The grid spacing in your electron density input file is adequate.; ; ******************** TIME CONTROL ********************; Finished check_grid_spacing in 0.11500000208616257 seconds; ******************************************************; ; ; ******************** TIME CONTROL ********************; Finished format_total_cube_density in 1.1610000133514404 seconds; ******************************************************; ; ncore = 0.0000; nvalence = 62.0000; pixelvolume = 4.0960E-03; numerically integrated valence density = 3.3967E+01; sum_valence_occupancy_correction = 0.0000E+00; checkme = 2.8033E+01; The electrons are not properly accounted for. ```. So here 28 electrons short in the cube of the 62 expected.... running on latest master:; ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.3a1.dev221. Git: Rev {master} 28a9a54. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074:2479,integrat,integrated,2479,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074,1,['integrat'],['integrated']
Integrability,"gin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the external dependencies in a far more controlled manner. Right now the external libraries are: ambit, boost, erd, libint, efp, dkh, and gdma. I still need to move GTFock there.; ## Headers. I strongly encourage the Psi4 community to review what a forward declaration is as well as how to properly use header files. I have posted a primer on our [BestPractices](https://github.com/psi4/psi4/wiki/BestPractices) wiki. There is a lot of copy/paste going on in the preamble of source files. You really should be assembling",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3906,wrap,wrapper,3906,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['wrap'],['wrapper']
Integrability,"gy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ---------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3078,message,message,3078,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['message'],['message']
Integrability,"hars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1034; #52 0x00007faabd6c3bf6 in builtin_exec_impl (module=<optimized out>, ; ```; Looks like the problem occurs within OpenBLAS, but it might be a good idea to double-check the Psi4 code at; ```; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; ```; i.e.; https://github.com/psi4/psi4/blob/f9ccef7676ce0549f5d18b82d9e13ae83c99532e/psi4/src/psi4/scfgrad/jk_grad.cc#L461. since raw calls to BLAS routines are easy to mess up... maybe there'd be a way to code these up with the built-in wrappers that always use the correct size arguments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:22511,rout,routines,22511,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,"['rout', 'wrap']","['routines', 'wrappers']"
Integrability,"hat `icpx` can take `-xHost` but `icx` can't, and our `option_with_flags` routine tries both so it throws an unnecessary warning. not a must for this PR).; - [x] the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). This isn't too debilitating since only HF and SVWN have analytic hessians anyways, so when an incapable L2 is detected (imagine that -- we can ask L2 what it can do!), it falls back to FD. That would be easy enough except the tests check too tightly for 3-pt FD to match analytical refs. So I've added a `d2ints` label to ctest and pytest to allow not running. This should probably convert to a skipif someday. Most of the tests I've checked individually and they would pass if findif points=5.; - [x] You notice a ""new"" boost-cpp dependency. Compiling against the header-only L2 C++11 interface (as psi4 does) requires a select few boost headers. In building the L2 package, one can either ask L2 to copy those few files in to `include/libint2/boost/` (that is, vendor boost) or not, effectively passing the problem along to the consumer (psi). In my own conda packages for L2, I did the former, so psi didn't need any boost. For the c-f L2 packages, I figured it was better practice to not vendor, hence the ""new"" dep. It's header-only, not boost::python or any of the boost compiled libs, so not too much trouble, I think. ## Questions; Can look at the libmints files to form an opinion on these.; - [x] `libint2::initialize()` was called three times, but `libint2::finalize()` only once. I added two more, but should I have?; - [x] Also, since we need to set the ordering, should the init be centralized in core.cc, or is it fine as is?; - [ ] technically, ordering could be set at runtime. that seemed hard to reliably prevent mixing of scratch files so I stuck with the restricted build-ti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861:2801,interface,interface,2801,https://psicode.org,https://github.com/psi4/psi4/pull/2861,1,['interface'],['interface']
Integrability,"hat have negative grid weights, due to the use of an intermediate matrix in COSX that uses the square root of negative grid weights. https://github.com/psi4/psi4/pull/2906 ""fixed"" this issue by having COSX throw an exception when grids with negative weights were encountered. This PR provides a COSX reformulation that allows COSX to work with negative grid weights. The reformulation does two primary things:; - The $X$ matrix (Eq. 4 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is redefined as $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$. In words, $X_{\kappa g}$ now uses the square root of the _magnitude_ of the weights, instead of the square root of the raw weights.; - To correct for the above, the computation of the $G$ matrix (Eq. 7 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is performed as $G_{\nu g} = \sum_{\tau} \text{sign}(w_{g}) A_{\nu \tau} (r_{g}) F_{\tau g}$ . In words, the sign of the corresponding grid weights are included in the formation of $G_{\nu g}$, when $A_{\nu \tau}$ and $F_{\tau g}$ are contracted. One other thing comes out as a consequence of this:; - For overlap fitting, the numerical overlap matrix $S_{N}$ (Eq. 13 in [Izsák 2011](https://doi.org/10.1063/1.3646921)) is computed as $S_{N} = X * X_{\text{alt}}^{T}$, where $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$ (the same as the first bullet point in the reformulation above), and $X_{\text{alt},\kappa g} = \text{sign}(w_{g}) \sqrt{|w_{g}|} \kappa(r_{g})$. Essentially, $S_{N}$ now uses two variants of the $X$ matrix in its formulation, one of which folds the grid weight sign into itself. ## User API & Changelog headlines; - [X] COSX can now be used with a wider variety of grids, as a bug preventing COSX to be used with specific grid configurations has been fixed.; ## Dev notes & details; - [X] The COSX implementation has been reformulated to enable calculations with grids containing negative grid weights. ## Questions; - [x] Is the current way of han",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2931:1386,contract,contracted,1386,https://psicode.org,https://github.com/psi4/psi4/pull/2931,1,['contract'],['contracted']
Integrability,"helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in outfile or message printed to stdout; > - PBE/cc-pVDZ: Passed; > - wPBE/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:4607,message,message,4607,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['message'],['message']
Integrability,hema-1-ghost .............. Passed 1.34 sec; Start 352: stability2; 384/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 354: tu2-ch2-energy; 385/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 330: scf-bs; 386/411 Test #398: json-v11-gradient ................ Passed 1.38 sec; Start 382: psi4numpy-rhf; 387/411 Test #406: skeletonaointegrals .............. Passed 1.11 sec; Start 387: python-energy; 388/411 Test #411: skeletonwavefunction ............. Passed 0.91 sec; Start 209: mcscf1; 389/411 Test #408: skeletonmointegrals .............. Passed 0.89 sec; Start 188: fci-tdm; 390/411 Test #354: tu2-ch2-energy ................... Passed 0.76 sec; Start 308: pywrap-db3; 391/411 Test #352: stability2 ....................... Passed 0.85 sec; Start 211: mcscf3; 392/411 Test #410: skeletonsointegrals .............. Passed 0.91 sec; Start 334: scf3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 239: numpy-array-interface; 394/411 Test #330: scf-bs ........................... Passed 0.83 sec; Start 409: skeletonscf; 395/411 Test #387: python-energy .................... Passed 0.72 sec; Start 175: docs-dft; 396/411 Test #209: mcscf1 ........................... Passed 0.65 sec; Start 216: mints5; 397/411 Test #188: fci-tdm .......................... Passed 0.82 sec; Start 208: matrix1; 398/411 Test #308: pywrap-db3 ....................... Passed 0.67 sec; Start 212: mints1; 399/411 Test #409: skeletonscf ...................... Passed 0.60 sec; Start 364: options1; 400/411 Test #239: numpy-array-interface ............ Passed 0.64 sec; Start 215: mints4; 401/411 Test #211: mcscf3 ........................... Passed 0.68 sec; Start 174: docs-bases; 402/411 Test #334: scf3 ............................. Passed 0.68 sec; Start 402: json-schema-1-throws; 403/411 Test #175: docs-dft ......................... Passed 0.66 sec; Start 87: cepa1; 404/411 Test #216: mints5 ........................... Passed 0.66 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:36904,interface,interface,36904,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['interface'],['interface']
Integrability,"hen you enter and ""bounce"" to other fns now have a single plan/compute/proceed-to-analytic decision step.; * `task_planner.py` — new file. all that complexity of figuring out which of cbs/findif/nbody are active (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:1656,wrap,wrapper,1656,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['wrap'],['wrapper']
Integrability,"here-mentioned DETCI and MRCC changes integrated in.; - [x] CCD is given select_ccd* functions to raise a sensible error message since the default (cc_type=CONV) isn't implemented. ; - [x] CC2 and CC3 are given select_* functions since now CCENERGY and MRCC cover them. This led to controversy (unresolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error messages have been wanting, being hampered by being generated by exceptions. In particular, they give no clue how close you are to a working method -- do you need to tweak aefc or uhf/rohf or is this method nowhere in psi or have you misspelled it? Now, the ManagedMethodsError exception has been reworked to return current conditions data (to be caught and reformatted) and the error message itself (usually not seen directly) has been reworked to provide more conditions and a link to the table row in the docs where one can see what _would_ run. Back at driver_util.py, these errors are reformatted according to whether managed or plain method, whether deriv isn't available at all or just not demanded deriv, etc. Whenever possible, try to provide conditions that didn't run and a docs link. Some examples of before and after at https://github.com/psi4/psi4/pull/2731/files#diff-d6e974accd9a58a9993b3babac9fab5c85099ba6072de01c9a6bcc4ad430dc56L22-R82 .; - [x] Added mp4(sdq), mp4, zapt2, cisd, qcisd, qcisd(t), ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:9032,message,messages,9032,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['message'],['messages']
Integrability,"hon'); +sys.path.append(os.path.dirname(__file__) + '/../../../driver'); +#sys.path.append(os.environ.get('PSIDATADIR')+'/driver'); try:; import qcdb; except ImportError:; @@ -72,7 +72,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - dbse = raw_input(' dbse = ').strip(); + dbse = input(' dbse = ').strip(); if dbse.isalnum():; user_obedient = True; ; @@ -82,7 +82,7 @@ print(""""""; All files with this extension in the current directory will be processed; Additionally, all files with extension p4m in the current dir will be processed as psi4 mol format; """"""); -fext = raw_input(' fext = [xyz] ').strip(); +fext = input(' fext = [xyz] ').strip(); if fext == """":; fext = 'xyz'; ; @@ -95,7 +95,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - line2 = raw_input(' line2 = [cgmp] ').strip().lower(); + line2 = input(' line2 = [cgmp] ').strip().lower(); if line2 == """":; line2 = 'cgmp'; if line2 == 'comment' or line2 == 'cgmp' or line2 == 'trash':; @@ -121,7 +121,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - route = raw_input(' route = ').strip().lower(); + route = input(' route = ').strip().lower(); if route.isdigit():; route = int(route); if route == 1 or route == 2 or route == 3:; @@ -135,7 +135,7 @@ if route == 2:; """"""); user_obedient = False; while not user_obedient:; - Nrxn = raw_input(' Nrxn = ').strip().lower(); + Nrxn = input(' Nrxn = ').strip().lower(); if Nrxn.isdigit():; Nrxn = int(Nrxn); user_obedient = True; @@ -174,10 +174,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; f.close(); ; # use Molecule object to read geometry in xyz file; - if xyzfile.endswith(fext):; - mol = qcdb.Molecule.init_with_xyz(xyzfile, no_com=True, no_reorient=True); - else:; - mol = qcdb.Molecule(''.join(text)); + mol = qcdb.Molecule.from_string(''.join(text), fix_com=True, fix_orientation=True); Nsyst = mol.natom(); ; # alter second line; @@ -203,8 +200,7 @@ for xyzfile in (glob.glob('*.' + fext) + glo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:2049,rout,route,2049,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,2,['rout'],['route']
Integrability,"hon-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `PSIDATADIR=/path/to/share/psi4` or `psi4 -l /path/to/share/psi4`.; - wB97X-based functionals were using the 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:2636,interface,interface,2636,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['interface'],['interface']
Integrability,"hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm present within GauXC. Construction of the interface is specified at compile-time with the compile-time flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling the behavior of `SNLINK`. For controlling the GauXC grid, `SNLINK_RADIAL_POINTS`, `SNLINK_SPHERICAL_POINTS`, and `SNLINK_RADIAL_SCHEME` control the GauXC radial point count, spherical point count, and radial quadrature, respectively. `SNLINK_USE_GPU` controls GPU execution of GauXC. Finally, `SNLINK_INTS_TOLERANCE` controls the integral screening threshold used by GauXC's sn-LinK algorithm. ## Dev notes & details; - [X] Adds a new new Psi4 compile-time option, `ENABLE_gauxc`. When set to `ON`, `ENABLE_gauxc` will build Psi4 with support for GauXC. The Psi4 build system has been adjusted so that Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC instance defined by `gauxc_DIR`. The `gauxc_ENABLE_GPU` keyword builds the Psi4/GauX",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:3112,interface,interface,3112,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability,"http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting. Try that one... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 9:08 PM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > http://stackoverflow.com/questions; > ; > Would seem to confirm @bennybp is right.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > ; > On Aug 4, 2016 8:46 PM, ""Ben Pritchard"" notifications@github.com wrote:; > ; > > We might be talking about two different things. @loriab; > > https://github.com/loriab is talking about add_library, while I'm; > > talking about target_link_libraries.; > > ; > > This is my understanding (although someone can correct me if I'm wrong):; > > when doing a target_link_libraries, INTERFACE will only add it to the; > > library's interface. PUBLIC will actually make the project link to the; > > target library. Ie; > > ; > > target_link_libraries(mints PUBLIC erd); > > ; > > will add anything that is part of the erd's interface to mints (headers,; > > libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files; > > will be compiled with erd's include directory, etc). It will also add erd; > > to mints interface (anything linked to mints will pull in the erd; > > includes). On the other hand; > > ; > > target_link_libraries(mints INTERFACE erd); > > ; > > will only add it to mint's interface (and not actually cause header; > > paths, etc, to be added to the command line for files in mints, but will be; > > added for libraries depending on mints).; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/pull/442#issuecomment-237727449, or mute; > > the thread; > > https://github.com/notifications/unsubscribe-auth/AFCRi4fOIlApdwffAQCnOh3vJtJFA7ADks5qcoffgaJpZM4JHR4P; > > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237730328:49,interface,interface-public-private-mean-in-cmake-target-compilation-setting,49,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237730328,9,"['INTERFACE', 'depend', 'interface']","['INTERFACE', 'depending', 'interface', 'interface-public-private-mean-in-cmake-target-compilation-setting']"
Integrability,"hub.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L2513 . If the user passes in a set of `**kwargs`, those get parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1486. Finally, if the user passes in `cbs_metadata` as an argument, this does not get parsed. Note that all three of those have to be ""validated""... > ; > What transformations are applied to that structured dictionary by the time it enters that input function, where is the specification for the input dictionary, and where is the specification for the output dictionary? I know that the input dictionaries are allowed to have a ""treatment"" field, but the output dictionaries are not, so they need to have different specifications. The only specification I see is in the ""Combined interface"" section of the `cbs` docstring. So we have a missing specification. So the user-facing portion (which is the only real spec) is defined in the ""combined interface"". The internal ""validated"" dictionary is in my view perfectly well documented here:; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365 . I question whether the validated dictionary needs further specification, as it's not user facing. Note that the validator function is under-prefixed, so having a docstring for it is kinda moot anyway. > ; > Furthermore, if that function is only responsible for validating (like the name says), then why is it returning a completely new dictionary that isn't following the same specification? I suspect the function name is incorrect and the docstring is incomplete. This is because of `""method/basis""` and `**kwargs` pathways, which have to be lined up somewhere. I thought rather than splitting the validation logic into the separate functions above, it's simpler to interpret both of these branches as an incomplete `cbs_metadata` which then needs to ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373:1620,interface,interface,1620,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373,2,['interface'],['interface']
Integrability,hybrid dft-sapt integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1834:16,integrat,integration,16,https://psicode.org,https://github.com/psi4/psi4/issues/1834,1,['integrat'],['integration']
Integrability,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3353,Integrat,Integration,3353,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,3,"['Integrat', 'rout']","['Integration', 'routines']"
Integrability,"iagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ### New sanity checks; - [x] Add a sanity check for non-square matrices in `mcscf::MatrixBase::diagonalize`; - [x] Add a sanity check for non-square matrices in `dfoccwave::Tensor2d::diagonalize`; - [x] Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"" in `libmints/matrix.cc` (`Matrix::diagonalize`); - [x] Check that all requested roots converge in the `libqt` Davidson solver used by `adc/prepare_tensors.cc`; - [x] Mark the return value of the `libqt` Davidson solve",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:3226,wrap,wrapper,3226,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"ib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python2 (found version ""2.7.11"") ; -- Found Python: /usr/lib64/libpython2.7.so ; -- Boost version: 1.60.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /home/piton/gitdir/psi4/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. Error message:. [100%] Linking CXX executable ../../../bin/psi4; CMakeFiles/psi4_objlib.dir/create_new_plugin.cc.o: In function `boost::re_detail_106000::perl_matcher<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<boost::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::match_imp()':; create_new_plugin.cc:(.text._ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv[_ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv]+0x42d): undefined reference to`boost::match_results<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<boost::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > >::maybe_assign(boost::match_results<__gnu_cxx::__normal_itera",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:5428,message,message,5428,https://psicode.org,https://github.com/psi4/psi4/issues/312,1,['message'],['message']
Integrability,"id) (); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2343; #8 0x00007f219d9a89c4 in __kmp_api_GOMP_parallel_40_alias (); from /home/susi/.conda/envs/p4env/lib/libgomp.so.1; #9 0x00007f21a9f5f757 in psi::MintsHelper::metric_grad (this=0x56025ac87f20, D=..., aux_name=...); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2335; #10 0x00007f21a9b85c92 in psi::scfgrad::DFJKGrad::build_AB_x_terms (this=0x56025a8b4200); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:862; #11 0x00007f21a9b818c2 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x56025a8b4200); --Type <RET> for more, q to quit, c to continue without paging--; at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:257; #12 0x00007f21a9b7595c in psi::scfgrad::SCFDeriv::compute_gradient (this=0x7ffc67b35840); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/scf_grad.cc:249; #13 0x00007f21a9b3855d in psi::scfgrad::scfgrad (ref_wfn=..., options=...); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/wrapper.cc:46; #14 0x00007f21a841948d in py_psi_scfgrad (ref_wfn=...) at /home/work/psi4-1.9.1/psi4/src/core.cc:317; #15 0x00007f21a84ae799 in pybind11::detail::argument_loader<std::shared_ptr<psi::scf::HF> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (this=0x7ffc67b35f10, ; f=@0x56025a2cca88: 0x7f21a84193f0 <py_psi_scfgrad(std::shared_ptr<psi::scf::HF>)>); at /usr/include/pybind11/cast.h:1480; #16 0x00007f21a84a146f in pybind11::detail::argument_loader<std::shared_ptr<psi::scf::HF> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>)) && (this=0x7ffc67b35f10, ; f=@0x56025a2cca88: 0x7f21a84193f0 <py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:2229,wrap,wrapper,2229,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,1,['wrap'],['wrapper']
Integrability,"iency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overload/template parameter will then be deduced. Using `nullptr` also makes the code more readable, especially if `auto` is used consistently throughout.; _Reference_: Item 8 in [Effective Modern C++].; _Note_: This PR only replaces `NULL` with `nullptr`. ## Todos; * **Developer Interest**; - [x] Converts `std::shared_ptr<TYPE> VARIABLE = std::shared_ptr<TYPE>(new TYPE(PARAMETERS));` to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:2122,DEPEND,DEPENDENT,2122,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['DEPEND'],['DEPENDENT']
Integrability,"iirc, @jeffschriber is going to take up bridging between psiapi tddft by @robertodr (atop QC guts by various) and ~`energy(""tddft"")` for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1836:40,bridg,bridging,40,https://psicode.org,https://github.com/psi4/psi4/issues/1836,1,['bridg'],['bridging']
Integrability,"in ; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:518,Rout,Routine,518,https://psicode.org,https://github.com/psi4/psi4/issues/3159,2,['Rout'],['Routine']
Integrability,"in cc/ccdensity/ael.cc; This code determines approximate excitation level. It used to work.; Apparently no longer called. I'm not sure why.; (I'm not on the very latest psi4, so it's possible it's been excised. On Thu, Oct 6, 2022 at 8:39 PM TiborGY ***@***.***> wrote:. > As an old-timer, I would say yes, libciomr is the place. At least as long; > as there is still a libciomr, that's where I would look. This is nice; > improvement!; >; > ccdensity has a sq_rsp too. did you miss that one?; >; > I ran a search and none of the remaining hits were from ccdensity.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2686#issuecomment-1270997653>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TGYDX6IXCJ5SUMXZVLWB55NJANCNFSM56SE6U4Q>; > .; > You are receiving this because you commented.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686#issuecomment-1271795143:865,Message,Message,865,https://psicode.org,https://github.com/psi4/psi4/pull/2686#issuecomment-1271795143,1,['Message'],['Message']
Integrability,"include <boost/regex.hpp>`; - [x] `lib/libmints/get_writer_file_prefix.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/matrix.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/molecule.cc:#include <boost/regex.hpp>`; - [x] `lib/libmints/oeprop.cc:#include <boost/regex.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/regex.hpp>`; - [x] `lib/libthce/laplace.cc:#include <boost/regex.hpp>`. `std::regex` is a drop in replacement **except** no more pearl syntax support. Not sure how much pearl we use, I think its all python based so we _should_ be fine.; ## . Boost serial:; - [x] `lib/libmints/serializers.h:#include <boost/serialization/serialization.hpp>`. No idea here, do we actually use our serialization capability?; ## . Boost xpressive(??):; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/lib3index/denominator.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/basisset_parser.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libmints/matrix.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/xpressive/xpressive.hpp>`; - [x] `lib/libthce/laplace.cc:#include <boost/xpressive/xpressive.hpp>`. Since Xpressive is based off boost spirit it scares me a bit. Not sure what this does exactly.; ## . Also, @andysim I still have no idea on EFP. I would need your help to remove boost from that. I will be traveling until August 10th at which point ill start ripping this out provided we have a path forward for the remaining issues.; ## ; ### LAB edit, 4 Aug. big ticket items/dependencies:; - [x] `add_custom_target(BoostPy)` convert Boost Python to Pybind11; - [x] `add_custom_target(BoostNonPy)` evict all the other Boost libraries we depend on (checkboxed above); - [x] `add_custom_target(FilterBranch DEPENDS BoostPy BoostNonPy)` remove all Boost tarballs and other large files from repo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450:4365,depend,dependencies,4365,https://psicode.org,https://github.com/psi4/psi4/issues/450,3,"['DEPEND', 'depend']","['DEPENDS', 'depend', 'dependencies']"
Integrability,"index bdcda4962..000000000; --- a/cmake/custom_sanitize.cmake; +++ /dev/null; @@ -1,44 +0,0 @@; -if(ENABLE_ASAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - else(); - message(WARNING ""ASAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_TSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - else(); - message(WARNING ""TSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:3079,message,message,3079,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,8,['message'],['message']
Integrability,ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Looking for include file dlfcn.h; -- Looking for include file dlfcn.h - found; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for erf; -- Looking for erf - found; -- Looking for MPI_Finalize; -- Looking for MPI_Finalize - not found; -- Checking for restrict keyword; -- Checking for restrict keyword - **restrict**; -- Looking for Fortran dgemm; -- Looking for Fortran dgemm - not found; -- Looking for Fortran dgemm; -- Looking for Fortran dgemm - not found; -- Looking for Fortran sgemm; -- Looking for Fortran sgemm - not found; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; CMake Error at /usr/local/Cellar/cmake/2.8.12.1/share/cmake/Modules/FindBLAS.cmake:594 (message):; A required library with BLAS API not found. Please specify library; location.; Call Stack (most recent call first):; /usr/local/Cellar/cmake/2.8.12.1/share/cmake/Modules/FindLAPACK.cmake:142 (find_package); CMakeLists.txt:135 (find_package),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:4448,message,message,4448,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['message'],['message']
Integrability,"inly an FYI to all and a query to @robertodr and @bast to make sure we're not trying to solve things that they've already done. #### Current State; * psi4 uses Radovan Bast's detection scheme circa 2014 or so; * said scheme finds MKL just fine- usually the shared lib versions and always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:1242,depend,dependencies,1242,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['depend'],['dependencies']
Integrability,"ion (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion with dipole-dipole polarizabilities at the expansion sites (#1401) ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to Libxc5 (#1101, #2113, #2169, #2191) . ## Additional Non-Core Contributors to v1.4. @ramis, @jwaldrop107, @obrien951, @dsirianni, @Dpgibney, @derekmetcalf, @alenaizan, @susilehtola, @tovestra, @jeffschriber, @zachglick, @maxscheurer, @chapincavender, @PhillCli, @mdamer, @katrinleinweber, @mfherbst, @edeprince3, @konpat, @kcpearce, @Icyyork, @timostrunk, @shivupa, @taylor-a-barnes, @shannonhouck, @bennybp, @tomspur, @jgonthier, @sjrl, @kis-gergely-dzsi, @ferchault, @andyj10224, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:1825,depend,dependency,1825,https://psicode.org,https://github.com/psi4/psi4/issues/1562,4,"['Interface', 'Interoperab', 'depend', 'interface']","['Interface', 'Interoperability', 'dependency', 'interfaces']"
Integrability,"ion of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm present within GauXC. Construction of the interface is specified at compile-time with the compile-time flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling the behavior of `SNLINK`. For controlling the GauXC grid, `SNLINK_RADIAL_POINTS`, `SNLINK_SPHERICAL_POINTS`, and `SNLINK_RADIAL_SCHEME` control the GauXC radial point count, sphe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:2607,interface,interface,2607,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability,"ions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVXZ-PP` issue can certainly wait. The user can combine their own basis sets into user-supplied `.gbs`'s (which is what I was doing for my systems anyway) and the CBS function will happily use them, as long as they match the regex.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:1131,interface,interface,1131,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,2,"['depend', 'interface']","['dependent', 'interface']"
Integrability,irc-1; 74/413 Test #75: cc5a ............................. Passed 101.97 sec; Start 281: opt14; 75/413 Test #19: cbs-xtpl-nbody ................... Passed 99.42 sec; Start 21: cc1; 76/413 Test #149: dfomp3-2 ......................... Passed 52.68 sec; Start 80: cc8b; 77/413 Test #246: ocepa2 ........................... Passed 63.98 sec; Start 158: dfomp2p5-grad2; 78/413 Test #17: cbs-xtpl-opt ..................... Passed 82.27 sec; Start 65: cc47; 79/413 Test #80: cc8b ............................. Passed 39.55 sec; Start 194: fd-freq-energy; 80/413 Test #21: cc1 .............................. Passed 62.73 sec; Start 64: cc46; 81/413 Test #281: opt14 ............................ Passed 79.81 sec; Start 35: cc19; 82/413 Test #373: dft-custom-dhdf .................. Passed 92.67 sec; Start 265: omp3-grad2; 83/413 Test #327: scf-bz2 .......................... Passed 127.64 sec; Start 109: dcft1; 84/413 Test #65: cc47 ............................. Passed 41.31 sec; Start 20: cbs-xtpl-wrapper; 85/413 Test #282: opt-irc-1 ........................ Passed 95.47 sec; Start 258: omp2p5-grad2; 86/413 Test #158: dfomp2p5-grad2 ................... Passed 61.57 sec; Start 144: dfomp2-4; 87/413 Test #35: cc19 ............................. Passed 58.05 sec; Start 319: sapt3; 88/413 Test #194: fd-freq-energy ................... Passed 85.55 sec; Start 82: cc9; 89/413 Test #64: cc46 ............................. Passed 87.60 sec; Start 153: dfomp2p5-2; 90/413 Test #207: frac-traverse .................... Passed 238.30 sec; Start 321: sapt5; 91/413 Test #258: omp2p5-grad2 ..................... Passed 77.83 sec; Start 294: psimrcc-fd-freq2; 92/413 Test #109: dcft1 ............................ Passed 84.01 sec; Start 67: cc49; 93/413 Test #144: dfomp2-4 ......................... Passed 69.24 sec; Start 79: cc8a; 94/413 Test #20: cbs-xtpl-wrapper ................. Passed 95.04 sec; Start 78: cc8; 95/413 Test #265: omp3-grad2 ....................... Passed 116.89 sec; Start 83: cc9a; 96/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:8170,wrap,wrapper,8170,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['wrap'],['wrapper']
Integrability,"itals guess (#1672); - Analytic Hessians for LSDA functionals (#1664); - Add qc2p basis set from CFOUR (#1718); - Update to g2g v2 API (#1718); - Density cumulant functional theory (DCFT) thoroughly rebranded to density cumulant theory (DCT). Adjust your calls and keywords accordingly or psi will reproach you (#1719).; - Drop Travis-CI (thank you for years of compiling) and consolidate on Azure for Linux and Windows builds so we can host more complex pipelines (#1752).; - Update orthogonalization routines and consolidate them back to libmints instead of SCF (#1759); - Let the `Deriv` class be instructable in the flavor it computes, rather than trying to devine SCF vs correlated (#1756); - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:6945,rout,routines,6945,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['rout'],['routines']
Integrability,"ithout needing to edit anything. (I did have to use -DOpenMP_LIBRARY_DIRS to point at the Intel version of libiomp5.so.). I did get:. `No such TARGET ""OpenMP::OpenMP_C""` and `No such TARGET ""OpenMP::OpenMP_Fortran""`. in the cmake output but it built and (the few tests before I killed it) ran fine. As a further test, I've also tried enabling lots of other optional bits (ambit, CheMPS2, dkh, libefp, simint, gdma, PCMSolver, and snsmp2) to check whether the fortran error caused any issues with them. It looks like everything builds apart from ambit (which looks like it was only just re-enabled and so probably needs tweaking somewhere). Building ambit bails out with the same lack of MathOpenMP that I was seeing before #1053:. ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=C;CXX;Fortran, C/CXX/Fortran=GNU/GNU/; -- Found TargetOpenMP: 1 ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:108 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); cmake/FindTargetLAPACK.cmake:30 (find_package); CMakeLists.txt:90 (find_package). -- Configuring incomplete, errors occurred!; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeError.log"".; external/upstream/ambit/CMakeFiles/ambit_external.dir/build.make:106: recipe for target 'external/upstream/ambit/ambit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280:1006,message,message,1006,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280,1,['message'],['message']
Integrability,"ity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512:1728,rout,routine,1728,https://psicode.org,https://github.com/psi4/psi4/pull/2512,1,['rout'],['routine']
Integrability,"k_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1358:1861,depend,dependency,1861,https://psicode.org,https://github.com/psi4/psi4/pull/1358,1,['depend'],['dependency']
Integrability,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:2708,depend,dependencies,2708,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['depend'],['dependencies']
Integrability,"l bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:2037,rout,routed,2037,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['rout'],['routed']
Integrability,"l indexing conventions, but I could be mistaken.; * There is currently no general machinery for density-fitted correlated gradients. There are three(!) different modules with their own correlated gradient procedure: `dfmp2`, `dfocc`, and `dct`. `dfocc` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/dfgrad.cc) does not make method-specific assumptions but cannot be used by other modules because it [uses](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tei_grad_corr.cc#L181) [custom tensor machinery](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tensors.h). `dfmp2` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/corr_grad.cc#L123) is specific to `dfmp2`. `dct` does not produce true density fitted gradients but contracts its density matrices against derivatives of conventional integrals, which is close but not exact. Further, this lack of general density-fitted gradient machinery in Psi is blocking developers who want density-fitted gradients interfaced through Psi. (@fevangelista at least, and I believe @edeprince3 and @ssh2 as well.). ## Causes of Problems with the Current Design; * Many of the problems with the existing conventional integral gradients are due to the `libtrans` interface between the MO quantities and the AO quantities.; * `libtrans` only recognizes TPDM in `libiwl` format, which is why all codes must use that.; * There is a single `IntegralTransform` call [for all modules](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L511). Because the Quantum Trio-era `detci` and `cc` codes used QT ordering, that `IntegralTransform` must be [told to assume QTOrder](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518), so all other modules must use QT order.; * The need to assemble a single 1PDM is, superficially, because [`IntegralTransform` is told to expect that](https://github.com/psi4/psi4/blob/master/psi4/src/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:3174,interface,interfaced,3174,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['interface'],['interfaced']
Integrability,"l integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this beha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:2787,rout,routine,2787,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['rout'],['routine']
Integrability,"l quadrature, respectively. `SNLINK_USE_GPU` controls GPU execution of GauXC. Finally, `SNLINK_INTS_TOLERANCE` controls the integral screening threshold used by GauXC's sn-LinK algorithm. ## Dev notes & details; - [X] Adds a new new Psi4 compile-time option, `ENABLE_gauxc`. When set to `ON`, `ENABLE_gauxc` will build Psi4 with support for GauXC. The Psi4 build system has been adjusted so that Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC instance defined by `gauxc_DIR`. The `gauxc_ENABLE_GPU` keyword builds the Psi4/GauXC interface to support GPU execution. Additionally, for internally-build GauXC instances, setting `gauxc_ENABLE_GPU` to `ON` will build the internal GauXC install with GPU support. For external GauXC installs, `gauxc_ENABLE_GPU` will ensure that the external GauXC install supports GPU execution. ; - [X] Adds a new `SplitJK` derived class, `snLinK`. When Psi4 is built with GauXC support, `snLinK` contains the implementation of the details of the Psi4/GauXC interface, and is responsible for calling GauXC within Psi4. When Psi4 is not built with GauXC support, snLinK will instead throw an exception upon construction, as implemented in a stub class. The `snLinK` class supports both CPU and GPU execution of GauXC, controllable at runtime via the `SNLINK_USE_GPU` keyword. Additionally, the `snLinK` class operates correctly regardless of the value of `psi4_SHGAUSS_ORDERING`, as well as for both Spherical and Cartesian basis sets. ; - [X] Updates the `test_compositejk.py` and `test_comprehensive_jk_screening.py` pytests to test sn-LinK functionalities, given that GauXC is installed.; - [X] Adds a new file, `gauxc_writer.py` to generate HDF5 files as input for GauXC's `standalone_driver` functionality. Reference files for benzene at the cc-pVDZ, cc-pVTZ, and cc-pVQZ basis set have been added, and a `test_gauxc_writer.py` file has been added to test the writer's functionality, given that GauXC is installed. . ## Notes; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:4640,interface,interface,4640,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability,"lar because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1728,rout,routes,1728,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['rout'],['routes']
Integrability,"last sequence PR before splitting away qcdb. I suggest it form the start of `v1.3` . ~Since originally posted (+27k/–10k), this PR has had #834 subtracted from it (now +13k/–7k). It is built atop #965, so I wouldn't review until that gets pulled in and subtracted from this. What does need answering soonish is whether for 1.2/1.3 purposes, the remaining commits of this PR should be separated further.~. ~Now this has had #965 rebased through, it should be stable for a good while. It now has size (+9k/–6k). There doesn't seem much interest in promoting the below to 1.2, so no need for further subdivision.~. This has now had **v1.2 rebased through** so I sincerely hope it's been kneaded for the last time. ## Todos: Py-side SCF/PCM/EFP (1.3); * **Developer Interest**; - [x] SCF iterations moved py-side; - [x] includes control of MOM, DIIS, damping, soscf, frac, efp; - [x] SCF finalize, stability, post-iterations, printing moved py-side; - [x] Rework a good bit of Wfn::HF::common_init() to minimize the convergence helper controllers that are c-side; - [x] A couple export/def bugs fixed in Wfn::HF and more fns exported and moved to public in class; - [x] PCMSolver interface reworked for py-side; - [x] libefp EFP object moved from c-side `P::e.EFP` to a py-side attached EFP attribute on the `psi4.core.Molecule` object.; - [x] Psi4 forgot about the c-side EFP object in bin, lib, globals, exports (still in options); - [x] EFP/EFP calcs moved purely py-side; - [x] SCF/EFP calcs carry out operations on the EFP object py-side; - [x] efp_torque no longer in `P::e` but `EFP TORQUE` in `P::e:arrays`. ## Todos: Py-side Mol Parsing (could be split out for 1.2); * **User Interest**; - [x] `molecule {...}` will take xyz (element symbol _or_ atomic number) or psi4 formats.; - [x] overall chgmult now specifiable through `1 3\n--` before any fragments.; - [x] can specify atomic number, mass number, mass, ghosting, extra-label in mol spec.; * **Developer Interest**; - [x] `*.Molecule` forg",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953:1675,interface,interface,1675,https://psicode.org,https://github.com/psi4/psi4/pull/953,1,['interface'],['interface']
Integrability,le ....................... Passed 75.42 sec; Start 151: dfomp3-grad2; 65/413 Test #170: dft1 ............................. Passed 105.14 sec; Start 58: cc40; 66/413 Test #75: cc5a ............................. Passed 70.15 sec; Start 19: cbs-xtpl-nbody; 67/413 Test #62: cc44 ............................. Passed 56.22 sec; Start 47: cc30; 68/413 Test #70: cc51 ............................. Passed 79.80 sec; Start 244: ocepa-grad2; 69/413 Test #183: fsapt-allterms ................... Passed 566.00 sec; Start 373: dft-custom-dhdf; 70/413 Test #252: omp2-5 ........................... Passed 67.36 sec; Start 282: opt-irc-1; 71/413 Test #151: dfomp3-grad2 ..................... Passed 66.98 sec; Start 17: cbs-xtpl-opt; 72/413 Test #47: cc30 ............................. Passed 68.93 sec; Start 265: omp3-grad2; 73/413 Test #244: ocepa-grad2 ...................... Passed 64.99 sec; Start 281: opt14; 74/413 Test #58: cc40 ............................. Passed 77.29 sec; Start 20: cbs-xtpl-wrapper; 75/413 Test #19: cbs-xtpl-nbody ................... Passed 78.00 sec; Start 194: fd-freq-energy; 76/413 Test #327: scf-bz2 .......................... Passed 122.73 sec; Start 60: cc42; 77/413 Test #373: dft-custom-dhdf .................. Passed 91.90 sec; Start 246: ocepa2; 78/413 Test #282: opt-irc-1 ........................ Passed 84.38 sec; Start 319: sapt3; 79/413 Test #265: omp3-grad2 ....................... Passed 64.41 sec; Start 21: cc1; 80/413 Test #60: cc42 ............................. Passed 60.49 sec; Start 158: dfomp2p5-grad2; 81/413 Test #20: cbs-xtpl-wrapper ................. Passed 71.25 sec; Start 301: pywrap-alias; 82/413 Test #17: cbs-xtpl-opt ..................... Passed 84.79 sec; Start 294: psimrcc-fd-freq2; 83/413 Test #194: fd-freq-energy ................... Passed 71.76 sec; Start 321: sapt5; 84/413 Test #281: opt14 ............................ Passed 84.37 sec; Start 12: cbs-parser; 85/413 Test #246: ocepa2 ........................... Passed 62.00 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:7285,wrap,wrapper,7285,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['wrap'],['wrapper']
Integrability,"le in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:2936,rout,routine,2936,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['rout'],['routine']
Integrability,"le is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught many of my errors where I thought I was getting an object of type T, but really it was type M (usually failing to dereference a shared pointer). If M has the same members as T, auto will allow this behavior to work, undermining the type system and leading to hard to find errors, in my opinion]. The nullptr type is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:2570,depend,dependency,2570,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,2,['depend'],['dependency']
Integrability,"le total_elecs = sum_of_elecs*D_[0]*D_[1]*D_[2];. ```; example file:; ```; molecule mol {; 0 1; C -0.000000000000 0.000000000000 -1.285087454295; N -0.000000000000 1.193800518377 -0.689363570963; N -0.000000000000 0.000000000000 1.378195289586; C 0.000000000000 -1.112779051192 0.642308628677; C -0.000000000000 1.112779051192 0.642308628677; N 0.000000000000 -1.193800518377 -0.689363570963; CL 0.000000000000 -2.604296831956 1.503991149589; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; gr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311:1573,integrat,integrated,1573,https://psicode.org,https://github.com/psi4/psi4/issues/1311,1,['integrat'],['integrated']
Integrability,"lectron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of threads: 1; Number of atoms: 3; Number of AO shells: 12; Number of SO shells: 9; Number of primitives: 25; Number of atomic orbitals: 25; Number of basis functions: 25. Number of irreps: 4; Integral cutoff 0.00e+00; Number of functions per irrep: [ 12 2 4 7 ]. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 13773 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. ==> Transform all two-electron integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second half-transformatio",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:7266,Wrap,Wrapper,7266,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Wrap'],['Wrapper']
Integrability,"liance). For the GCC 4.4 gives us about 90%; compliance and 4.8 full compliance. Clang 2.9 is 90% and they claim 3.3; for full support, but I'm confused by their caveat of them not having to; provide support for two features. This suggests to me that they still are; not at full compliance and never will be. I fully support the usage of C++11 as it allows coding options previously not possible or provides a nicer syntax for them. One possibility of backwards support is to wrap C++11 code with macros; however this only works if that code could have been written with C++98 originally. This also leads to code duplication which I think is a cardinal sin of programming. In my experience so far the only C++11 feature that I have been unable to reproduce using C++98 is variadic templates. The best you can do is write a recursive normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:1416,depend,depending,1416,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,2,['depend'],['depending']
Integrability,"libxc defines cam_alpha = full exact exchange and cam_beta = short-range only exact exchange.; So, in the long range you have cam_alpha, and in the short range you have cam_alpha+cam_beta. For N12-SX the code in libxc reads; ```; case XC_HYB_GGA_X_N12_SX:; params->CC = CC_N12_SX;; p->cam_alpha = 0.00;; p->cam_beta = 0.25;; p->cam_omega = 0.11;; ```; where cam_beta is the one you have above, and the minus sign comes from the convention used in Psi4. (You can define F = H0 + J(P) + K(P), or F = H0 + J(P) - K(P), depending how you define your exchange matirx. The former choice is more physical as it includes the minus sign within K.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/916#issuecomment-365321499:516,depend,depending,516,https://psicode.org,https://github.com/psi4/psi4/pull/916#issuecomment-365321499,1,['depend'],['depending']
Integrability,"line 81, in <module>; from .driver import endorsed_plugins; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/opt/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /opt/psi4/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZNK3psi12Wavefunction26tpdm_gradient_contributionEv; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1514132855674/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 51; The most recent 5 function calls were:. psi::plugin_load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&); py_psi_plugin_load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >); pybind11::cpp_function::dispatcher(_object*, _object*, _object*). forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002AC3069B82CD Unknown Unknown Unknown; libpthread.so.0 00002AC301BBD1F0 Unknown Unknown Unknown; ld-linux-x86-64.s 00002AC30148A0D1 Unknown Unknown Unknown; ld-linux-x86-64.s 00002AC3014847A6 Unknown Unknown Unknown; libdl.so.2 00002AC301DCB5EC Unknown Unknown Unknown; libdl.so.2 00002AC301DCB10F Unknown Unknown Unknown; core.so 00002AC303C6DC02 Unknown Unknown Unknown; core.so 00002AC303DC58E2 Unknown Unknown Unknown; core.so 00002AC303DE4A13 Unknown Unknown Unknown; core.so 00002AC303955DEC Unknown Unknown Unknown; libpython3.6m.so. 00002AC30175D1C9 Unknown Unknown Unknown; libpython3.6m.so. 00002AC301705E96 Unknown Unknown Unknown; libpython3.6m.so. 00002AC3018614B5 Unknown Unknown Unknown; libpython3.6m.so. 00002AC301810E03 Unknown Unknown Unknown; libpython3.6m.so. 00002AC30182F8FA Unknown Unknown Unknown; python 0000000000400C1D Unknown Unknown Unknown; libc.so.6 00002AC3026F9A15 Unknown Unknown Unknown; python 000000000040",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373052900:1359,Rout,Routine,1359,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373052900,1,['Rout'],['Routine']
Integrability,ls .............. Passed 0.89 sec; Start 293: psimrcc-pt2; 384/411 Test #210: mcscf2 ........................... Passed 1.22 sec; Start 378: mints12; 385/411 Test #411: skeletonwavefunction ............. Passed 0.92 sec; Start 309: pywrap-molecule; 386/411 Test #293: psimrcc-pt2 ...................... Passed 0.87 sec; Start 211: mcscf3; 387/411 Test #102: decontract ....................... Passed 1.19 sec; Start 396: python-memdfjk; 388/411 Test #229: mp2-grad2 ........................ Passed 1.47 sec; Start 214: mints3; 389/411 Test #298: pubchem2 ......................... Passed 1.42 sec; Start 382: psi4numpy-rhf; 390/411 Test #309: pywrap-molecule .................. Passed 1.08 sec; Start 209: mcscf1; 391/411 Test #378: mints12 .......................... Passed 1.17 sec; Start 188: fci-tdm; 392/411 Test #211: mcscf3 ........................... Passed 0.72 sec; Start 308: pywrap-db3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.79 sec; Start 239: numpy-array-interface; 394/411 Test #396: python-memdfjk ................... Passed 0.95 sec; Start 409: skeletonscf; 395/411 Test #209: mcscf1 ........................... Passed 0.70 sec; Start 175: docs-dft; 396/411 Test #188: fci-tdm .......................... Passed 0.71 sec; Start 364: options1; 397/411 Test #308: pywrap-db3 ....................... Passed 0.68 sec; Start 212: mints1; 398/411 Test #214: mints3 ........................... Passed 1.04 sec; Start 402: json-schema-1-throws; 399/411 Test #409: skeletonscf ...................... Passed 0.61 sec; Start 215: mints4; 400/411 Test #175: docs-dft ......................... Passed 0.58 sec; Start 216: mints5; 401/411 Test #239: numpy-array-interface ............ Passed 0.67 sec; Start 208: matrix1; 402/411 Test #364: options1 ......................... Passed 0.55 sec; Start 174: docs-bases; 403/411 Test #212: mints1 ........................... Passed 0.56 sec; Start 87: cepa1; 404/411 Test #402: json-schema-1-throws ............. Passed 0.56 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:36767,interface,interface,36767,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['interface'],['interface']
Integrability,ls; Properties : 51.000u 0.717s 30.270w 55840 calls; Functional : 16.767u 0.117s 10.525w 55840 calls; V_xc : 10.133u 0.133s 6.536w 33504 calls; SAPT(DFT): Monomer B DFT : 28.650u 0.350s 17.421w 1 calls; SAPT(DFT):SAPT(DFT):JK : 0.250u 0.000s 0.149w 1 calls; SAPT(DFT):SAPT(DFT):elst : 0.000u 0.000s 0.000w 1 calls; SAPT(DFT):SAPT(DFT):exch : 0.200u 0.000s 0.126w 1 calls; SAPT(DFT):SAPT(DFT):ind : 45.583u 0.533s 27.664w 1 calls; RV: Form Vx : 44.150u 0.533s 26.828w 16 calls; Derivative Properties : 9.050u 0.050s 5.407w 22336 calls; V_XCd : 6.933u 0.067s 4.389w 22336 calls; SAPT(DFT):SAPT(DFT):disp : 5.000u 0.167s 3.141w 1 calls; DFH: initialize() : 0.583u 0.000s 0.350w 1 calls; DFH: sparsity prep : 0.033u 0.000s 0.024w 1 calls; DFH: AO Construction : 0.533u 0.000s 0.313w 1 calls; DFH: transform() : 0.117u 0.017s 0.075w 1 calls; DFH: Total Workflow : 0.033u 0.000s 0.021w 6 calls; DFH: Total Transform : 0.017u 0.000s 0.014w 4 calls; DFH: 1st Contraction : 0.000u 0.000s 0.009w 2 calls; DFH: 2nd Contraction : 0.017u 0.000s 0.005w 2 calls; DFH: MO to disk : 0.000u 0.000s 0.001w 2 calls; DFH: Direct Contractions : 0.083u 0.017s 0.046w 1 calls; DF Integrals : 0.767u 0.083s 0.514w 1 calls; W Integrals : 0.000u 0.000s 0.001w 1 calls; Exch-Disp20 N^5 : 0.033u 0.033s 0.043w 1 calls; Exch-Disp20 N^4 : 0.267u 0.033s 0.178w 1 calls. -----------------------------------------------------------; SAPT(DFT): Dimer SCF : 2.883u 0.033s 1.795w 1 calls; | JK: (A|mn) : 0.683u 0.000s 0.418w 1 calls; | JK: (A|Q)^-1/2 : 0.083u 0.000s 0.053w 1 calls; | JK: (Q|mn) : 0.100u 0.017s 0.062w 1 calls; | HF: Form H : 0.017u 0.000s 0.006w 1 calls; | HF: Form S/X : 0.000u 0.000s 0.002w 1 calls; | HF: Guess : 0.133u 0.000s 0.089w 1 calls; | | SAD Guess : 0.133u 0.000s 0.087w 1 calls; | HF: Form G : 0.517u 0.000s 0.309w 11 calls; | | JK: D : 0.000u 0.000s 0.000w 11 calls; | | JK: USO2AO : 0.000u 0.000s 0.000w 11 calls; | | JK: JK : 0.517u 0.000s 0.308w 11 calls; | | | JK: J : 0.033u 0.000s 0.027w 11 calls; | ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200:2814,Contract,Contraction,2814,https://psicode.org,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200,1,['Contract'],['Contraction']
Integrability,ma-1-properties; 372/411 Test #298: pubchem2 ......................... Passed 1.36 sec; Start 309: pywrap-molecule; 373/411 Test #401: json-schema-1-orient ............. Passed 2.44 sec; Start 408: skeletonmointegrals; 374/411 Test #403: json-schema-1-gradient ........... Passed 2.11 sec; Start 410: skeletonsointegrals; 375/411 Test #330: scf-bs ........................... Passed 1.83 sec; Start 387: python-energy; 376/411 Test #378: mints12 .......................... Passed 1.28 sec; Start 354: tu2-ch2-energy; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.68 sec; Start 188: fci-tdm; 378/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 411: skeletonwavefunction; 379/411 Test #220: mints-helper ..................... Passed 2.03 sec; Start 349: sapt-sf1; 380/411 Test #398: json-v11-gradient ................ Passed 2.22 sec; Start 396: python-memdfjk; 381/411 Test #209: mcscf1 ........................... Passed 3.10 sec; Start 239: numpy-array-interface; 382/411 Test #405: skeleton ......................... Passed 3.04 sec; Start 211: mcscf3; 383/411 Test #387: python-energy .................... Passed 2.65 sec; Start 334: scf3; 384/411 Test #396: python-memdfjk ................... Passed 0.90 sec; Start 382: psi4numpy-rhf; 385/411 Test #96: cisd-h2o-clpse ................... Passed 4.24 sec; Start 308: pywrap-db3; 386/411 Test #400: json-schema-1-ghost .............. Passed 3.33 sec; Start 175: docs-dft; 387/411 Test #404: json-schema-1-properties ......... Passed 3.31 sec; Start 216: mints5; 388/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 364: options1; 389/411 Test #354: tu2-ch2-energy ................... Passed 3.22 sec; Start 409: skeletonscf; 390/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 208: matrix1; 391/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 212: mints1; 392/411 Test #364: options1 ......................... Passed 0.58 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:35941,interface,interface,35941,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['interface'],['interface']
Integrability,"make configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push fixes step 7, also the MAX_AMs now start with WITH_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2990,depend,dependency,2990,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,2,['depend'],['dependency']
Integrability,maybe a bkgd dependency like clang version changed such that mac isn't getting dftd4 3.6 but an oldr 3.3 hence the errors.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018794586:13,depend,dependency,13,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018794586,1,['depend'],['dependency']
Integrability,"mentation_2018/en/debugger//gdb-igfx/info/; CC=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-cc; XDG_RUNTIME_DIR=/run/user/1000; READELF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-readelf; GCC_AR=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gcc-ar; OBJDUMP=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-objdump; LESSCLOSE=/usr/bin/lesspipe %s %s; GPROF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gprof; FFLAGS=-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe; GXX=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-g++; I_MPI_ROOT=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:10076,depend,dependencies,10076,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['depend'],['dependencies']
Integrability,"mize()` function. In addition, a dictionary of GeomeTRIC-specific keywords and options (like constraints) may be passed to the optimizer. The `test_h2o_constrained` pytest demonstrates how this is done. . ```; e = optimize(..., engine=`geometric`, optimizer_keywords={...}); ```; Output is consistent with Psi4's default geometry optimization:; <details><summary>Example result </summary>; <p>. ```; >>> grep ""~"" output.dat. ==> GeomeTRIC Optimizer <== ~; Psi4 convergence criteria QCHEM not recognized by GeomeTRIC, switching to GAU_TIGHT ~; Measures of convergence in internal coordinates in au. ~; Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 1.50e-05 1.00e-05 6.00e-05 4.00e-05 ~; --------------------------------------------------------------------------------------------- ~; 0 -7.64427364e+01 -------- 5.01e-02 4.03e-02 -------- -------- ~; 1 -7.64446505e+01 -1.91e-03 2.68e-03 1.95e-03 3.06e-02 2.16e-02 ~; 2 -7.64446681e+01 -1.77e-05 5.27e-04 4.17e-04 4.22e-03 3.98e-03 ~; 3 -7.64446684e+01 -3.06e-07 * 2.27e-05 2.03e-05 4.11e-04 2.93e-04 ~; 4 -7.64446684e+01 6.91e-10 * 3.28e-06 * 2.74e-06 * 1.78e-05 * 1.49e-05 * ~; Optimization converged! ~. ```. </p>; </details>. ## Todos; - [x] Working GeomeTRIC interface; - [x] Improved printing and error handling; - [x] Pytest(s); - [x] Constrained optimizations; - [x] Process GeomeTRIC keywords in Psi4 input; - [x] Composite energy calls (CBS, etc.); - [x] Documentation. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813:1750,interface,interface,1750,https://psicode.org,https://github.com/psi4/psi4/pull/1813,1,['interface'],['interface']
Integrability,mpmath is a required for one of the dependencies which was probably added sometime between your first cloning and your re-clone. . A couple of things: ; - Was the installation of mpmath successful? ; - Did you install into the base env or a different one? ; - Is that one active? ; - You can see if mpmath is available in the env that is active while you are trying to build by looking at the output from `conda list`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181157:36,depend,dependencies,36,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181157,1,['depend'],['dependencies']
Integrability,"mport qcdb; except ImportError:; @@ -72,7 +72,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - dbse = raw_input(' dbse = ').strip(); + dbse = input(' dbse = ').strip(); if dbse.isalnum():; user_obedient = True; ; @@ -82,7 +82,7 @@ print(""""""; All files with this extension in the current directory will be processed; Additionally, all files with extension p4m in the current dir will be processed as psi4 mol format; """"""); -fext = raw_input(' fext = [xyz] ').strip(); +fext = input(' fext = [xyz] ').strip(); if fext == """":; fext = 'xyz'; ; @@ -95,7 +95,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - line2 = raw_input(' line2 = [cgmp] ').strip().lower(); + line2 = input(' line2 = [cgmp] ').strip().lower(); if line2 == """":; line2 = 'cgmp'; if line2 == 'comment' or line2 == 'cgmp' or line2 == 'trash':; @@ -121,7 +121,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - route = raw_input(' route = ').strip().lower(); + route = input(' route = ').strip().lower(); if route.isdigit():; route = int(route); if route == 1 or route == 2 or route == 3:; @@ -135,7 +135,7 @@ if route == 2:; """"""); user_obedient = False; while not user_obedient:; - Nrxn = raw_input(' Nrxn = ').strip().lower(); + Nrxn = input(' Nrxn = ').strip().lower(); if Nrxn.isdigit():; Nrxn = int(Nrxn); user_obedient = True; @@ -174,10 +174,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; f.close(); ; # use Molecule object to read geometry in xyz file; - if xyzfile.endswith(fext):; - mol = qcdb.Molecule.init_with_xyz(xyzfile, no_com=True, no_reorient=True); - else:; - mol = qcdb.Molecule(''.join(text)); + mol = qcdb.Molecule.from_string(''.join(text), fix_com=True, fix_orientation=True); Nsyst = mol.natom(); ; # alter second line; @@ -203,8 +200,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; ; if route == 3 and mol.nfragments() == 1:; ; - frag_pattern = mol.BFS(); - mol = mol.auto_fragments(); + frag_pattern, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:2099,rout,route,2099,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,2,['rout'],['route']
Integrability,"mpty. -->; - [x] MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method; - [x] Many NYI messages, whether from ManagedMethodError, MissingMethodError, or plain ValidationError from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes.; - [x] New tables in the docs with details on accessible methods.; - [x] Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF.; - [x] Running DF through CCENERGY (experimental, expert only) may now require `set qc_module ccenergy`. ## Dev notes & details; - [x] running stdsuite writes a storage file, and a new document_capabilities script turns the storage file into various tables that newly (1) include all-electron/frozen-core info (notated ""aefc"" in places), (2) show default modules and default e.g., mp2_type, (3) cover most single-ref ground-state total-energy methods, (4) are proven to honor return val and qcvar contracts. details of how and why this works are at [psi4/share/psi4/scripts/merge_stdsuite.py](https://github.com/psi4/psi4/pull/2731/files#diff-4a81ee0fb4705fe6acd6ac7f6417f5a899437a93780329a5f647a94eea425c24R8) . If you want to suggest changes to notation, keep in mind that main-body cell contents must be expressible in a single unicode character width, otherwise the table gets far too wide; layering allowed. Several tables are produced:; - [x] an all-methods, one row per method table for the front page: introduction.rst#capabilities . this table complements the comprehensive hand-written one. [summary](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_summary.rst); - [x] an all-methods, one row per module per method table for the ""Alternate Implementations"" page: [details](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_details.rs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:1661,contract,contracts,1661,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['contract'],['contracts']
Integrability,"n before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solut",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:1939,Message,Message,1939,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['Message'],['Message']
Integrability,"n easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > between CI and CC, which I didn't notice before. The scheme in your last; > message looks good to me. I think that numbering the first excited state 1,; > and the second 2, _etc._ makes the most sense, for obvious reasons. Zero; > basing the excited states would lead to an off-by-one error in the cardinal; > and ordinal notation. LGTM.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260098726, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdlnHpEnsW3uYECUYCgCd3NnmYLimks5q9TIfgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260126337:2212,interface,interface,2212,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337,2,"['interface', 'message']","['interface', 'message']"
Integrability,"n from Psi3 with many issues. While its innards could be improved, the function signature is horrid. It should be deprecated and replaced with something better.; Stemming from the awful interface, users of `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. This is now rectified by adding failure checks wherever the new DSYEV wrappers are called.; Checks against non-square matrices are also added where there is both a row and column count at the call site. Some of the call sites would be dfocc territory, this PR does not include them to avoid conflicts with the dfocc overhaul.; This is another shard of the https://github.com/psi4/psi4/pull/2642 mega-PR that can be merged after PR #2678 and #2738 are in. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:1000,wrap,wrappers,1000,https://psicode.org,https://github.com/psi4/psi4/pull/2686,2,"['interface', 'wrap']","['interface', 'wrappers']"
Integrability,"n function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/414:1260,interface,interfaces,1260,https://psicode.org,https://github.com/psi4/psi4/issues/414,1,['interface'],['interfaces']
Integrability,"n psi. Also, separate a set of references that can reside in qcng for common testing btwn p4/qcng/qcdb. This runs several classes of tests --; * can each mp2-capable module do something sensible with each scf_type?; * can each mp2-capable module return the same right answer for each capable scf_type/mp2_type?; * can each mp2_type returns something good w/o the user knowing about modules?; * all above for gradient, plus check against findif; * for all these, is the full qcvars, return values, `CURRENT ENERGY`, etc. contract fulfilled for both P::e and wfn? . ## Todos; - [x] check mp2 fundamentals from mp2 energy targets (e.g., `MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from mp2 gradient targets (e.g., `MP2 TOTAL ENERGY` from `gradient('mp2')`; - [ ] check scs mp2 from mp2 targets (e.g., `CUSTOM SCS-MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from post-mp2 targests (e.g., `MP2 TOTAL ENERGY`) from `energy('fnoccsd')`; - [x] routing; - [x] I think we got the logic of `check_disk_df` off a little in proc.py in that we were checking if correlated method type was `DISK_DF` (my fault) and along the way forbidding `PK` refs with `DF` correlated. I think I fixed this for dfocc but haven't done df with fnocc yet.; - [x] Also corrected logic that was letting through mixed ref+corl derivatives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in driver on wfn and P::e; - [x] Newly sets `MP2 SINGLES ENERGY` and `MP2 DOUBLES ENERGY`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:1075,rout,routing,1075,https://psicode.org,https://github.com/psi4/psi4/pull/1850,1,['rout'],['routing']
Integrability,"ncies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:1359,depend,dependency,1359,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['depend'],['dependency']
Integrability,"nda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*.h ; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM1 8; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM12 7; /home/toon/miniconda3/envs/p4dev/include/libint/libint.h:#define LIBINT_MAX_AM 9; ```. I have no other version of libint installed on my test system. Any suggestions? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341:2018,message,message,2018,https://psicode.org,https://github.com/psi4/psi4/issues/1341,1,['message'],['message']
Integrability,"ndent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to wo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1179,integrat,integrating,1179,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['integrat'],['integrating']
Integrability,"ne 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; - DLDF+D09/cc-pVDZ: **GRADIENTS FAILED**; ```; Segmentation fault: 11; ```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Us",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:4112,message,message,4112,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['message'],['message']
Integrability,"neat, thanks Andy! I started looking at the build/packaging for libecpint last week, so hopefully I can keep up with your interface progress.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802937537:122,interface,interface,122,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802937537,1,['interface'],['interface']
Integrability,new Multipole interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1720:14,interface,interface,14,https://psicode.org,https://github.com/psi4/psi4/pull/1720,1,['interface'],['interface']
Integrability,"new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbitals have the same spin. Meanwhile, the DFT V terms are second derivatives of the DFT energy with respect to orbital rotation generators. These are not spin-free.; 3. Now let's combine the two above facts. After performing the spin-integration in the triplet case, you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have been modified to have a singlet flag, necessary to pass to compure_Vx whether to compute the singlet or triplet term.; - [x] HF classes no longer have a `potential_` attribute. Ind",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:2233,integrat,integration,2233,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['integrat'],['integration']
Integrability,"ng, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:1880,Message,Message,1880,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['Message'],['Message']
Integrability,"nknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; invalid value encountered in scalar divide; invalid value encountered in divide; Optimizer: Optimization complete!; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 00000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:3809,Rout,Routine,3809,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Rout'],['Routine']
Integrability,"nknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; invalid value encountered in scalar divide; invalid value encountered in divide; Optimizer: Optimization complete!; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 00000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:4444,Rout,Routine,4444,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Rout'],['Routine']
Integrability,nmopi() and Ca()->coldim() not consistent when linear dependencies present,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120:54,depend,dependencies,54,https://psicode.org,https://github.com/psi4/psi4/issues/2120,1,['depend'],['dependencies']
Integrability,"ns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:955,depend,dependency,955,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['depend'],['dependency']
Integrability,"ns you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consol",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:7072,wrap,wrapped,7072,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['wrap'],['wrapped']
Integrability,"nstructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored correlated derivatives. The two particle-density matrix is just replaced with the intermediates from Equation 79 of [Ugur's paper](https://aip.scitation.org/doi/10.1063/1.4896235): the thing you contract against the metric derivative and the thing you contract against the density fitted-integral derivative.; * At present, I envision the caller being responsible for supplying the object contracted against the overlap derivatives: orbital Lagrangian, energy-weighted density matrix, or possibly other names. It's always possible to determine this from the other intermediates needed for gradients. (At least for conventional integrals, and probably for density-fitted as well.) It may be worth coding for the transformation to do this.; * While solving response equations is common to many derivative methods, it's counterproductive to generalize this beyond providing a common conjugate gradient solver (which is outside my role here). For example, consider the orbital response term of MP2 between Ugur's MP2 paper, [Francesco's DSRG (regularized MP2) paper](https://aip.scitation.org/doi/10.1063/1.5100175), and the [DiStasio/Head-Gordon MP2 paper](https://onlinelibrary.wiley.com/doi/full/10.1002/jcc.20604) behind Rob's implementation. All three codes will get the same relaxed PDMs and solve orbital response terms by conjugate gradients, but they do not agree on which terms should be called orbital ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:5856,contract,contracted,5856,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['contract'],['contracted']
Integrability,"nted and working, see the [adcc manual](https://adc-connect.org/calculations.html#general-adc-n-calculations), so this should mainly be an effort of connecting the strings together on the Psi4 side. Currently I am still very much in the planning phase of this PR, thankful for any early pointers or feedback to get me moving in a sensible direction. Since this is my first PR here I still feel a little lost inside the Psi4 source :smile:. My implementation so far hooks into the driver python code of Psi4 and branches out to either `adcc` or the built-in ADC module of Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Get ADC(2) calculation triggered in adcc from Psi4 (see `adcc_examples` subfolder).; - [x] Allow all ADC variants to be run in Psi4; - [x] Proper error handling of Psi4 SCF references not supported in adcc (symmetry, density-fitting, ...); - [x] Integration of adcc installation into Psi4 build system; - Currently adcc can only be installed via `pip`, but we would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with the calculation results? Right now only the MP2 ground state energy is returned to the python world in ADC calculations of Ps4 if I understand this right. Our [ExcitedStates](https://adc-connect.org/reference.html#adcc.ExcitedStates) object, however, is capable of returning more results",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:1210,Integrat,Integration,1210,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['Integrat'],['Integration']
Integrability,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1767,message,message,1767,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857,3,['message'],['message']
Integrability,"nually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libraries) to set library folder path.; Then, Intel Compiler + Intel OMP libraries works even single thread calculation for dft-custom-gga test. Anyway, I am not sure why on",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:1135,message,message,1135,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,2,['message'],['message']
Integrability,"o latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not always be the case. I believe some of pybind's asserted control over symbols is actually meant to allow better mixing of pb projects, in which case we should also consider doing as they advise and only exporting the symbols we need. ## Status; - [x] Ready to go. This is now pointing to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814:1268,depend,dependency,1268,https://psicode.org,https://github.com/psi4/psi4/pull/814,1,['depend'],['dependency']
Integrability,"o separate PRs for reviewer convenience. Then I can bring in this PR. - [x] #2886; - [x] #2887; - [x] #2888; - [x] #2889. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Triplet TDDFT excitations from RKS are now supported. ## Theoretical Analysis. Why were DFT triplets harder than HF triplets? To understand this, we need to understand both the origin of the triplet matrix and the spin properties of the relevant matrix elements. 1. Starting from the UKS RPA/TDA matrices when Ca = Cb, we can do a similarity transformation to obtain the singlet and triplet RKS matrices. The new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbitals have the same spin. Meanwhile, the DFT V terms are second derivatives of the DFT energy with respect to orbital rotation generators. These are not spin-free.; 3. Now let's combine the two above facts. After performing the spin-integration in the triplet case, you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zer",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:1617,integrat,integrate,1617,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['integrat'],['integrate']
Integrability,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:1300,message,message,1300,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['message'],['message']
Integrability,"o transition to a modular nature and it is easiest for the users of these modules if they only have to specify the Psi4 include directory as an include and not each subdirectory of it. Note that this is how nearly every professional C++ library I am aware of does this (Boost, Eigen, TBB, ...). The second (and arguably better reason) is doing it any other way makes the superbuild a lot harder when something is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:6332,interface,interface,6332,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['interface'],['interface']
Integrability,"object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/transform_read_so.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_bw.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_mk.cc.o; [ 12%] Linking CXX static library libpsimrcc.a; [ 12%] Built target psimrcc; [ 12%] Building CXX object src/psi4/sapt/CMakeFiles/sapt.dir/wrapper.cc.o; [ 12%] Linking CXX static library libsapt.a; [ 12%] Built target sapt; Consolidate compiler generated dependencies of target scf_solver; [ 13%] Built target scf_solver; Consolidate compiler generated dependencies of target scfgrad; [ 13%] Built target scfgrad; Consolidate compiler generated dependencies of target l2export; [ 13%] Built target l2export; Consolidate compiler generated dependencies of target 3index; [ 13%] Built target 3index; Consolidate compiler generated dependencies of target ciomr; [ 15%] Built target ciomr; Consolidate compiler generated dependencies of target cubeprop; [ 16%] Built target cubeprop; Consolidate compiler generated dependencies of target disp; [ 16%] Built target disp; Consolidate compiler generated dependencies of target dpd; [ 25%] Built target dpd; Consolidate compiler generated dependencies of target filesystem; [ 25%] Built target filesystem; Consolidate compiler generated dependencies of target fock; [ 25%] Building CXX object src/psi4/libfock/CMakeFiles/fock.dir/DiskDFJK.cc.o; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:17: error: no viable overloaded operator[] for type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ~~~~~~~~^~~~~~~~~~~~~~; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:68: error: member access into incomplete type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ^; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3006:674,depend,dependencies,674,https://psicode.org,https://github.com/psi4/psi4/issues/3006,10,['depend'],['dependencies']
Integrability,"occ': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, superfunc). RuntimeError:; Fatal Error: Input DOCC array has the wrong dimensions; Error occurred in file: /home/c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1250,message,message,1250,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['message'],['message']
Integrability,odd DF-CCSD problems depending on molecule input method,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1110:21,depend,depending,21,https://psicode.org,https://github.com/psi4/psi4/issues/1110,1,['depend'],['depending']
Integrability,"odd, I know of the increased grid dependency from colleagues. But both qchem and Grimme's manual SCAN implementation in Turbomole do not seem to have NaN issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345775474:34,depend,dependency,34,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345775474,1,['depend'],['dependency']
Integrability,"odels (COSMO, PCM, linearised Poisson-Boltzmann) following a domain-decomposition approach. At its current stage I open the PR to get some feedback from devs about the suggested changes and structure and to finalise the upstream python interface of ddX. Note that this PR Is currently deliberately done on top of an outdated master, since any commit after #2388 introduces segfaults (details see below), which so far I have not yet been able to trace down. Any help on that would be much appreciated. ## User API & Changelog headlines; - Implementation of PCM and COSMO solvation models based on the ddx library. ## Dev notes & details; - Introduction of a NumIntHelper class to compute some integrals numerically using a DFT grid; - Introduction of ddx solvation model and new ddx options. ## Reproducer for the mysterious segfault; As part of rebasing against the current master I encountered a really strange segfault. I managed to produce a minimal example, which has really nothing to do with ddx and only adds a python interface to a simple numerical electrostatic integral. See here for a [trimmed-down diff](https://github.com/psi4/psi4/compare/master...mfherbst:psi4:segfault). On my machine checking out this `segfault` branch with `0_configure.sh`, building and running the `mytests/runtests.sh` script gives a segfault inside the numerical integration in the `PCMPotentialInt` class. Note that the code I added *is not even called*, the call to `PCMPotentialInt` happens from the pcm code *which I have not modified*. Now, commenting out; ```c++; PrintIntegralsFunctor printer;; potential_integrals_->compute(printer);; ```; the segfault disappears. I'm getting the weird feeling I'm doing something really stupid here and I just missed it. ## Questions; - [x] Thoughts on the NumIntHelper?; - [x] Is D -> D_cart needed or not ([this stuff](https://github.com/psi4/psi4/pull/2767/commits/108b6bb1a53cdc428933475dea991e08a3330d98#diff-48947c7a095c933d6843e0564043f051b0e54dff111fff222bf25cd",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767:1196,interface,interface,1196,https://psicode.org,https://github.com/psi4/psi4/pull/2767,1,['interface'],['interface']
Integrability,"of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or releva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:1009,interface,interface,1009,https://psicode.org,https://github.com/psi4/psi4/pull/2132,2,['interface'],['interface']
Integrability,"ok, I just rebased this, rebuilt with all addons, and ran fulltests. I think it's ready. The interface to physconst may change soonish, but the values of the physical constants won't. after this merges, there'll need to be a pause on merges b/c I want to tag a `1.3a1` (since answers can change with constants).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1213#issuecomment-425678168:93,interface,interface,93,https://psicode.org,https://github.com/psi4/psi4/pull/1213#issuecomment-425678168,2,['interface'],['interface']
Integrability,"ok，thanks.在 2023年2月14日，上午6:34，Jonathon Misiewicz ***@***.***> 写道：﻿; @mars303 Is there still an issue here, or can we close this?. —Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2869#issuecomment-1428848043:245,Message,Message,245,https://psicode.org,https://github.com/psi4/psi4/issues/2869#issuecomment-1428848043,1,['Message'],['Message']
Integrability,omp_set_nested routine deprecated,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820:15,rout,routine,15,https://psicode.org,https://github.com/psi4/psi4/issues/1820,1,['rout'],['routine']
Integrability,"on of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement semi-numerical exchange in the `DFCOSK` class; - [x] Add tests & docs. ## Questions; - [x] What do we want the `SCF_TYPE` keyword for this algorithm to be? It's currently `COSK`. It could also be `DFJCOSK`. It might make more sense to call the algorithm `SNK` (for semi-numerical exchange) over `COSK`, as the latter is more general, and will still be accurate even if we change the screening procedure. (The former refers to a very specific screening procedure).; - [x] For anyone who regularly uses COSK: do you have a preference for how the tightness of the integration grids are specified? Currently, the user gives the number of spherical/angular points. We could also predefine a set of allowed spherical/angular combos. That might be easier for users (they don't have to know about lebedev numbers, for example), but it sacrifices flexibility.; - [x] This is less a question and more of a note: the `DFTGrid` class is in serious need of a refactor so that it does not read from global options. This PR kicks the can down the road by adding another constructor to the class, which takes `double`-type options. I'd be happy to hear any thoughts on what to do with this class, though that probably deserves its own issue. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:2714,integrat,integration,2714,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['integrat'],['integration']
Integrability,"on.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 360; Start 360: cubeprop-esp. 360: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/cubeprop-esp/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/cubeprop-esp/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 360: Test timeout computed to be: 1500; 360: 	Comparing Dt......................................................PASSED; 360: Traceback (most recent call last):; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"", line 264, in <module>; 360: exec(content); 360: File ""<string>"", line 37, in <module>; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 387, in compare_cubes; 360: raise TestComparisonError(message); 360: ; 360: TestComparisonError: 	Comparing ESP: computed cube file does not match expected cube file.; 360: Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 1/1 Test #360: cubeprop-esp .....................***Failed 6.27 sec. 0% tests passed, 1 tests failed out of 1. Label Time Summary:; cubeprop = 6.27 sec*proc (1 test); psi = 6.27 sec*proc (1 test). Total Test time (real) = 6.33 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); Errors while running CTest; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937:1756,message,message,1756,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937,1,['message'],['message']
Integrability,"ons in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/maste",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:1476,rout,routing,1476,https://psicode.org,https://github.com/psi4/psi4/pull/2536,1,['rout'],['routing']
Integrability,"ons in the wiki; https://github.com/psi4/psi4/wiki/1_Obtaining#clonepsi4public. but the compilation fails in a bunch of unresolved symbols. /tmp/ccVe3Y02.ltrans0.ltrans.o: In function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to han",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/414:1085,interface,interfaces,1085,https://psicode.org,https://github.com/psi4/psi4/issues/414,1,['interface'],['interfaces']
Integrability,"ons@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbalance; > between monomer basis and dimer basis calculations but it isn't). Also,; > subsequently we were asked to look into the performance of; > energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel; > alternation.; > Do you have any thoughts on this and have suggestions for determining; > optimum number of processors (does it depend on memory?) for this sort of; > calculation?; > Thanks.; > Rika; > PS Do you need an input deck for this? Originally, the smallest case he; > had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT; > job) but since then I think I have a 48 hr test case that will also display; > this behaviour. I'll need to ask the user for permission to pass it on; > first though.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/57; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-41629946:2343,depend,depend,2343,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946,1,['depend'],['depend']
Integrability,"ook 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:1995,depend,dependencies,1995,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,"ormation. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:1887,interface,interface,1887,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['interface'],['interface']
Integrability,"ortran: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log"". Howevewer, there is no file /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log and no directory objdir at all.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:16035,Interface,Interface,16035,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Interface'],['Interface']
Integrability,"ose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3764,message,message,3764,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['message'],['message']
Integrability,"ou can also use libxc identifiers in Psi4 but the syntax is a bit more verbose (you need to define a Psi4-style functional). Yes, I agree that `xc = 'lda_x,lda_c_vwn_rpa'` is better in terms of readability. Thanks for letting me know!. > That does not suffice. In addition to setting the grid with e.g. mf.grids.atom_grid = (100,590) you need to turn pruning off explicitly with mf.grids.prune = None. I noticed that too which is why I had used it in the script I provided. > By defaults PySCF truncates basis functions to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly defaults) upto $<1 \mu H$ accuracy even for large systems. This is why I was trying to find out w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1212,depend,dependencies,1212,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,1,['depend'],['dependencies']
Integrability,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:9428,interface,interface,9428,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3821,interface,interface,3821,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,p ........................ Passed 6.39 sec; Start 8: castup1; 22/411 Test #8: castup1 .......................... Passed 1.55 sec; Start 9: castup2; 23/411 Test #9: castup2 .......................... Passed 3.53 sec; Start 10: castup3; 24/411 Test #10: castup3 .......................... Passed 3.78 sec; Start 11: cbs-delta-energy; 25/411 Test #11: cbs-delta-energy ................. Passed 23.24 sec; Start 12: cbs-parser; 26/411 Test #12: cbs-parser ....................... Passed 12.37 sec; Start 13: cbs-xtpl-alpha; 27/411 Test #13: cbs-xtpl-alpha ................... Passed 59.71 sec; Start 14: cbs-xtpl-energy; 28/411 Test #14: cbs-xtpl-energy .................. Passed 8.36 sec; Start 15: cbs-xtpl-freq; 29/411 Test #15: cbs-xtpl-freq .................... Passed 5.43 sec; Start 16: cbs-xtpl-gradient; 30/411 Test #16: cbs-xtpl-gradient ................ Passed 12.13 sec; Start 17: cbs-xtpl-opt; 31/411 Test #17: cbs-xtpl-opt ..................... Passed 32.38 sec; Start 19: cbs-xtpl-wrapper; 32/411 Test #19: cbs-xtpl-wrapper ................. Passed 37.42 sec; Start 20: cc1; 33/411 Test #20: cc1 .............................. Passed 6.42 sec; Start 21: cc10; 34/411 Test #21: cc10 ............................. Passed 3.59 sec; Start 22: cc11; 35/411 Test #22: cc11 ............................. Passed 3.22 sec; Start 23: cc12; 36/411 Test #23: cc12 ............................. Passed 3.59 sec; Start 24: cc13; 37/411 Test #24: cc13 ............................. Passed 18.49 sec; Start 26: cc13b; 38/411 Test #26: cc13b ............................ Passed 7.05 sec; Start 27: cc13c; 39/411 Test #27: cc13c ............................ Passed 9.49 sec; Start 28: cc13d; 40/411 Test #28: cc13d ............................ Passed 15.84 sec; Start 29: cc14; 41/411 Test #29: cc14 ............................. Passed 22.66 sec; Start 30: cc15; 42/411 Test #30: cc15 ............................. Passed 5.86 sec; Start 31: cc16; 43/411 Test #31: cc16 ............................. Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:2986,wrap,wrapper,2986,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['wrap'],['wrapper']
Integrability,p ........................ Passed 6.75 sec; Start 8: castup1; 22/411 Test #8: castup1 .......................... Passed 1.50 sec; Start 9: castup2; 23/411 Test #9: castup2 .......................... Passed 4.01 sec; Start 10: castup3; 24/411 Test #10: castup3 .......................... Passed 4.07 sec; Start 11: cbs-delta-energy; 25/411 Test #11: cbs-delta-energy ................. Passed 28.35 sec; Start 12: cbs-parser; 26/411 Test #12: cbs-parser ....................... Passed 10.90 sec; Start 13: cbs-xtpl-alpha; 27/411 Test #13: cbs-xtpl-alpha ................... Passed 73.68 sec; Start 14: cbs-xtpl-energy; 28/411 Test #14: cbs-xtpl-energy .................. Passed 8.11 sec; Start 15: cbs-xtpl-freq; 29/411 Test #15: cbs-xtpl-freq .................... Passed 6.02 sec; Start 16: cbs-xtpl-gradient; 30/411 Test #16: cbs-xtpl-gradient ................ Passed 11.17 sec; Start 17: cbs-xtpl-opt; 31/411 Test #17: cbs-xtpl-opt ..................... Passed 33.93 sec; Start 19: cbs-xtpl-wrapper; 32/411 Test #19: cbs-xtpl-wrapper ................. Passed 39.62 sec; Start 20: cc1; 33/411 Test #20: cc1 .............................. Passed 8.61 sec; Start 21: cc10; 34/411 Test #21: cc10 ............................. Passed 4.22 sec; Start 22: cc11; 35/411 Test #22: cc11 ............................. Passed 4.24 sec; Start 23: cc12; 36/411 Test #23: cc12 ............................. Passed 4.36 sec; Start 24: cc13; 37/411 Test #24: cc13 ............................. Passed 21.72 sec; Start 26: cc13b; 38/411 Test #26: cc13b ............................ Passed 8.83 sec; Start 27: cc13c; 39/411 Test #27: cc13c ............................ Passed 11.97 sec; Start 28: cc13d; 40/411 Test #28: cc13d ............................ Passed 18.77 sec; Start 29: cc14; 41/411 Test #29: cc14 ............................. Passed 29.63 sec; Start 30: cc15; 42/411 Test #30: cc15 ............................. Passed 8.11 sec; Start 31: cc16; 43/411 Test #31: cc16 ............................. Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:3006,wrap,wrapper,3006,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['wrap'],['wrapper']
Integrability,"parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to worry that he/she does. > Should adcc be distributed/build with psi4 in the end? (conda, cmake, etc.). Not sure what will work best. We are working on getting adcc distributed via conda ourselves, so I guess one could just pull it from there as part of the usual psi4 installation procedure. If the interfacing is done on the python level as I described above and as I did in the PR so far, this should not introduce big changes. One could even easily make the dependency optional. I am happy to hear other suggestions, too :smile:. Since we have a mandatory binary blob (in the form of the `adccore` library) for the moment, building the code completely as part of the psi4 setup is not possible unfortunately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:2624,depend,dependency,2624,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['depend'],['dependency']
Integrability,"pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` obj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1538,interface,interface,1538,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['interface'],['interface']
Integrability,"pends on; use cases. However, it seems at the very least that the documentation needs to get; updated. On Mon, Dec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should alwa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:1048,depend,depending,1048,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['depend'],['depending']
Integrability,"place 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught many of my errors where I thought I was getting an object of type T, but really it was type M (usually failing to dereference a shared pointer). If M has the same members as T, auto will allow this behavior to work, undermining the type system and leading to hard to find errors, in my opinion]. The nullptr type is nice, but the fringe cases I've seen where standard NULL fails to accomplish the same behavior are bit contrived. . I think those are the main features of C++11 that people would be using; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:2688,wrap,wrapper,2688,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,2,['wrap'],['wrapper']
Integrability,"primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1097,Depend,Dependencies,1097,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305,3,"['Depend', 'depend']","['Dependencies', 'dependencies']"
Integrability,prototype basis-dependent basis guess,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1484:16,depend,dependent,16,https://psicode.org,https://github.com/psi4/psi4/pull/1484,1,['depend'],['dependent']
Integrability,psi4 mrcc interface PSIO_ERROR,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35:10,interface,interface,10,https://psicode.org,https://github.com/psi4/psi4/issues/35,1,['interface'],['interface']
Integrability,"psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libefp | no | psi4 | psi4 | --- | | C; resp | no | | | | psi4 | Py; snsmp2 | no | | | | psi4 | Py; v2rdm_casscf | no | psi4 | psi4 | --- | | C++, Fortran. * openfermion is better housed on c-f anyways. devs are willing (I have an open issue on this with them). only issue is that they have several optional dependencies, and their test suite fails rather than skipping the tests that need these.; * pycppe also on c-f already; * pylibefp and libefp built together; * v2rdm_casscf is a psi4 plugin and has no meaningful pinning to psi4 itself as it often needs rebuilding when psi4 innards change",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:2303,depend,dependencies,2303,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900,1,['depend'],['dependencies']
Integrability,"psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #T",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:7618,depend,dependency,7618,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependency']
Integrability,psiembed integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1839:9,integrat,integration,9,https://psicode.org,https://github.com/psi4/psi4/issues/1839,1,['integrat'],['integration']
Integrability,psixas integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1837:7,integrat,integration,7,https://psicode.org,https://github.com/psi4/psi4/issues/1837,1,['integrat'],['integration']
Integrability,"pullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:1271,depend,dependencies,1271,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['depend'],['dependencies']
Integrability,"qcarchive tag, protocol passing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3013:15,protocol,protocol,15,https://psicode.org,https://github.com/psi4/psi4/pull/3013,1,['protocol'],['protocol']
Integrability,"quickly added some (non-parallel) timers and @zachglick is correct:; ```; HF: Form G : 5.233u 0.133s 0.805w 10 calls; | JK: D : 0.000u 0.000s 0.000w 10 calls; | JK: USO2AO : 0.017u 0.000s 0.000w 10 calls; | JK: JK : 5.217u 0.133s 0.804w 10 calls; | | DFH: compute_JK() : 5.217u 0.133s 0.804w 10 calls; | | | DFH: Grabbing AOs : 0.000u 0.000s 0.000w 10 calls; | | | DFH: compute_J : 0.267u 0.000s 0.046w 10 calls; | | | DFH: compute_K : 4.867u 0.133s 0.756w 10 calls; | JK: AO2USO : 0.000u 0.000s 0.000w 10 calls; PCM: compute_eMEP : 126.433u 0.417s 69.654w 11 calls; PCM: compute_PCM_type : 7.533u 0.000s 4.518w 11 calls; PCM: compute_V : 115.633u 0.000s 69.407w 11 calls; | PCM_V: contract : 0.000u 0.000s 0.000w 11 calls; | PCM_V: pot_int : 115.633u 0.000s 69.407w 11 calls; ```. This is an indole-benzene stack with DF-HF/MINIX and 4 threads, making the run time PCM bound.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438269712:682,contract,contract,682,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438269712,1,['contract'],['contract']
Integrability,"r any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:1845,interface,interface,1845,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['interface'],['interface']
Integrability,"r pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7846,message,message,7846,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['message'],['message']
Integrability,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:10407,Interface,Interface,10407,https://psicode.org,https://github.com/psi4/psi4/issues/581,2,['Interface'],['Interface']
Integrability,"ral major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a densi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:1169,depend,depending,1169,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['depend'],['depending']
Integrability,"rapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2498,wrap,wrapper,2498,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,rc-1 ........................ Passed 116.92 sec; Start 204: frac-ip-fitting; 67/411 Test #91: cepa-module ...................... Passed 178.98 sec; Start 61: cc44; 68/411 Test #167: dft-b3lyp ........................ Passed 65.78 sec; Start 46: cc30; 69/411 Test #74: cc5a ............................. Passed 101.58 sec; Start 17: cbs-xtpl-opt; 70/411 Test #302: pywrap-cbs1 ...................... Passed 201.06 sec; Start 43: cc28; 71/411 Test #115: dcft9 ............................ Passed 163.68 sec; Start 104: dcft-grad2; 72/411 Test #204: frac-ip-fitting .................. Passed 73.44 sec; Start 230: mp2-module; 73/411 Test #61: cc44 ............................. Passed 90.14 sec; Start 19: cbs-xtpl-wrapper; 74/411 Test #46: cc30 ............................. Passed 123.09 sec; Start 159: dft-grad-meta; 75/411 Test #43: cc28 ............................. Passed 112.18 sec; Start 57: cc40; 76/411 Test #17: cbs-xtpl-opt ..................... Passed 138.99 sec; Start 297: pubchem1; 77/411 Test #19: cbs-xtpl-wrapper ................. Passed 90.48 sec; Start 389: python-pubchem; 78/411 Test #159: dft-grad-meta .................... Passed 52.62 sec; Start 100: ci-property; 79/411 Test #230: mp2-module ....................... Passed 122.41 sec; Start 65: cc48; 80/411 Test #18: cbs-xtpl-func .................... Passed 2286.51 sec; Start 2: adc2; 81/411 Test #297: pubchem1 ......................... Passed 56.65 sec; Start 11: cbs-delta-energy; 82/411 Test #104: dcft-grad2 ....................... Passed 167.43 sec; Start 59: cc42; 83/411 Test #389: python-pubchem ................... Passed 54.35 sec; Start 259: omp3-3; 84/411 Test #100: ci-property ...................... Passed 59.03 sec; Start 81: cc9; 85/411 Test #57: cc40 ............................. Passed 93.38 sec; Start 170: dft1-alt; 86/411 Test #2: adc2 ............................. Passed 41.64 sec; Start 149: dfomp3-grad2; 87/411 Test #65: cc48 ............................. Passed 82.20 sec; Start 153: dfomp2p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:7341,wrap,wrapper,7341,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['wrap'],['wrapper']
Integrability,"re were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the external dependencies in a far more controlled manner. Right now the external libraries are: ambit, boost, erd, libint, efp, dkh, and gdma. I still need to move GTFock there.; ## Headers. I strongly encourage the Psi4 community to review what a forward declaration is as well as how to properly use header files. I have posted a primer on our [BestPractices](https://github.com/psi4/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3800,depend,dependencies,3800,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,"ream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow. Interestingly, the stand-alone version I built doesn't even link against libiomp5.so or and LAPACK or BLAS libraries (apart from the CUDA libraries):; ```; $ ldd gpu_dfcc.so; linux-vdso.so.1 (0x00007ffd6e3f1000); libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x0000151f3769b000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x0000151f37497000); librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x0000151f3728f000); libpython2.7.so.1.0 => /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0 (0x0000151f36d12000); libcublas.so.9.1 => /usr/lib/x86_64-linux-gnu/libcublas.so.9.1 (0x0000151f3377b000); libcusolver.so.9.1 => /usr/lib/x86_64-linux-gnu/libcusolver.so.9.1 (0x0000151f2e006000); libcudart.so.9.1 => /usr/lib/x86_64-linux-gnu/libcudart.so.9.1 (0x0000151f2dd98000); core.so => not found; libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x0000151f2da17000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x0000151f2d684000); libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x0000151f2d46c000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x0000151f2d0b2000); /lib64/ld-linux-x86-64.so.2 (0x0000151f37b7f000); libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x0000151f2ce94000); libutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x0000151f2cc91000); ```; So it could be that some of these issues arise from dependencies that aren't actually needed. I could be wrong, mind!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:3342,depend,dependencies,3342,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,1,['depend'],['dependencies']
Integrability,"reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3204,interface,interface,3204,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['interface'],['interface']
Integrability,"registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; |",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:4039,wrap,wrapper,4039,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['wrap'],['wrapper']
Integrability,"rger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:2830,Contract,Contracted,2830,https://psicode.org,https://github.com/psi4/psi4/pull/475,2,['Contract'],['Contracted']
Integrability,"right now nbody->cbs->singleresult is the only multilevel path implemented. it has the routing split btwn `SingleResult` and `CBSComputer` in the main task_planner.py https://github.com/dgasmith/psi4/blob/recursive/psi4/driver/task_planner.py#L149-L154 . nbody also has a separate processing step in its computer so that it first inits, takes a break for some logic, then spins up the next level (single or cbs) in `build_tasks`, which is a dummy fn in all other computers. I've got working locally the findif->cbs->singleresult multilevel path. this doesn't require intermediate logic, so the spinning up of the next step (cbs or singleresult) could be done internally to the FinDifComputer based on whether `method == 'cbs'` or not. This requires FinDifComputer to be aware that computers other than SingleResult exist. Organizationally, is it better to (a) keep the logic of CBSComputer vs SingleResult in task_planner and pass it to the Findifcomputer (possibly at the need to add build_tasks to FinDifComputer) or to (b) tuck it away within FinDifComputer? I'm thinking (a). Secondly, with using actual pydantic objects instead of dicts and turning on no-extras, Computers are objecting to formerly passed-through kwargs (e.g., `irrep` through cbs). At a first pass, I've been popping them in the Computer and explicitly passing them on where relevant. I'm thinking this is the wrong approach (again, why should cbs admit existence of findif). So my next approach would be to split up kwargs in task_planner and pass them on as relevant only within that file. (Leftover kwargs still passed into the computers -- pydantic will probably object, but the user meant something by them.). thoughts on any of this? @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-549948276:87,rout,routing,87,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-549948276,1,['rout'],['routing']
Integrability,"rk with the distributed driver. Now all such methods and a reasonable number of levels are added explicitly to the procedures table and splitting/parsing happen at run_detci.; - [x] the `scf_type`, `mp2_type`, `mp_type`, `ci_type`, `cc_type` keywords were a good idea in that they allow different defaults for different levels of theory and are fairly easy to guess and uniform to use. One flaw is that you don't know programmatically what controls what method -- it's all hard-coded, sometimes in more than one place, in proc.py . Now there's a method:type association dict in procrouting/proc_data.py . There's also a little function there serving up the info, so you can get out the keyword and current value with `method_algorithm_type(mtd).keyword` and `method_algorithm_type(mtd).now`, respectively. This helps clean up proc.py and allows the controlling keyword to be linked for each method in the generated tables.; - [x] in proc.py, ; - [x] select_* functions have been made more boilerplate and elsewhere-mentioned DETCI and MRCC changes integrated in.; - [x] CCD is given select_ccd* functions to raise a sensible error message since the default (cc_type=CONV) isn't implemented. ; - [x] CC2 and CC3 are given select_* functions since now CCENERGY and MRCC cover them. This led to controversy (unresolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error mess",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:8084,integrat,integrated,8084,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['integrat'],['integrated']
Integrability,"route for example `energy('scs-mp3')` through managed method proc routines, otherwise mp3 may route to df and scs-mp3 route to conv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968:0,rout,route,0,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968,4,['rout'],"['route', 'routines']"
Integrability,"rreps, and returns a `std::vector` of `Eigen::Map` objects, each `Map` in the `vector` corresponding to one irrep of the Psi4 matrix. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Adds two new functions, `eigen_map()` and `eigen_maps()`, usable in Psi4 plugins and downstream programs, that return a formulation of the calling `Psi::Matrix` object, that is usable in contexts where `Eigen::Matrix` objects are required/desired. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds two new member functions to `Psi4::Matrix`, `eigen_map()` and `eigen_maps()`, that return `Eigen::Map` representations of the Psi4 matrix object. ## Questions; - [X] N/A. ## Notes; - [X] I did look into forward declaring the necessary Eigen classes, but forward declaring `Eigen::Map` turns out to be a bit ugly, as it is a class template that, to forward declare, ends up requiring forward declarations for other Eigen classes and enums (such as `Stride` and `AlignmentType`) that aren't specifically necessary for the Psi4 use case. Therefore, I have skipped forward declarations here.; - [X] I can confirm the correctness of the `eigen_map()` function, as I have implemented these PR changes into my Psi-GauXC interface, wherein `eigen_map()` replaces the original formulation I used for the equivalent result. `eigen_maps()`, however, is currently untested as there is no current use case for it yet, and should thus be considered experimental. . ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3143:2753,interface,interface,2753,https://psicode.org,https://github.com/psi4/psi4/pull/3143,1,['interface'],['interface']
Integrability,"ry installers](https://psicode.netlify.com/installs/v14/); * Span: [437 PRs](https://github.com/psi4/psi4/milestone/5?closed=1), roughly 1559-2264. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: deepdiff, Libint1; - Added dependencies: QCEngine, Libint2. ## New Methods; - Add ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Note that this is for dftd3 call, not energy call (#1491); - MP2D energies and gradients with help of external program (#1661); - SCAN functionals – SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L (#1597); - hybrid LDA functionals – CAM-LDA0, LDA0 (when Libxc puts them in a release) (#1645); - FISAPT-D (#1670); - Superposition of atomic potentials (SAP) guess (#1665, #1700); - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion with dipole-dipole polarizabilities at the expansion sites (#1401) ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Int",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:1562,rout,routines,1562,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,"s (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally va",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:2509,depend,depending,2509,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['depend'],['depending']
Integrability,"s GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:2274,integrat,integration,2274,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['integrat'],['integration']
Integrability,"s also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence go",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1820,message,message,1820,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,['message'],['message']
Integrability,"s have stuff in src and built forms; ```; > cat ../psi4/metadata.py ; __version__ = '1.7'; __version_long = '1.7+6ce35a5'; __version_upcoming_annotated_v_tag = '1.8a1'. def version_formatter(dummy):; return '(inplace)'; > cat stage/lib/psi4/metadata.py ; __version__ = '1.7'; __version_branch_name = ''; __version_cmake = '1.7.0.0'; __version_is_clean = 'True'; __version_last_release = '1.7'; __version_long = '1.7+6ce35a5'; __version_prerelease = 'False'; __version_release = 'True'. def version_formatter(formatstring='{version}'):; if formatstring == 'all':; formatstring = '{version} {{{branch}}} {githash} {cmake} {clean} {release} {lastrel} <-- {versionlong}'. release = 'release' if (__version_release == 'True') else ('prerelease' if (__version_prerelease == 'True') else ''). ans = formatstring.format(version=__version__,; versionlong=__version_long,; githash=__version_long[len(__version__)+1:],; clean='' if __version_is_clean == 'True' else 'dirty',; branch=__version_branch_name,; lastrel=__version_last_release,; cmake=__version_cmake,; release=release); return ans. if __name__ == '__main__':; print(version_formatter(formatstring='all')); ```. So I think tarballs are roughly still working. But I can totally believe that either I'm working in an edge case or the two of you have found one. My closest suspects:; * perhaps you're in a repo that isn't the psi repo. I bet that'd defeat https://github.com/psi4/psi4/blob/master/psi4/versioner.py#L50 that switches the version logic from git to tarball; * that version logic is tested for release tarballs only, not tarballs of random commits; * the increasing dependency on qcengine (which arose long after the versioning system design) for finite difference and dispersion depends a lot on computing the psi4 (and other) versions. Hence the ""pull tags"" message. I can believe there's a way that communication breaks down. I'd suggest you compare commands and cat-ed files and see where the discrepancy in workflow/environment arises.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:4191,depend,dependency,4191,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,6,"['depend', 'message']","['dependency', 'depends', 'message']"
Integrability,"s in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ### New sanity checks; - [x] Add a sanity check for non-square matrices in `mcscf::MatrixBase::diagonalize`; - [x] Add a sanity check for non-square matrices in `dfoccwave::Tensor2d::diagonalize`; - [x] Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"" in `libmints/matrix.cc` (`Matrix::diagonalize`); - [x] Check that all requested roots converge in the `libqt`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:3097,wrap,wrapper,3097,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"s letting through mixed ref+corl derivatives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in driver on wfn and P::e; - [x] Newly sets `MP2 SINGLES ENERGY` and `MP2 DOUBLES ENERGY` in C++ where available.; - [x] Fixes up the conventional CCSD qcvars in ccenergy, including closes #1702 ; - [x] Fixes up CD/DF-CCSD qcvars in fnocc, dfocc; - [x] Moves qcvars in fnocc from P::e.globals to wfn; - [x] Adds fc/ae aspects to managed method for gradient mp2. Old behavior for fc conv mp2 grad was to stop with an informative message. New behavior is to hop into finite difference. Users who definitely want to avoid finite difference for compute time or accuracy should run `gradient(..., dertype=1)` to get psi to stop instead. ## Questions; - [ ] ~Organization of tests is not finalized. qcng does 6 tests per method (r/u/ro x ae/fc) (https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/test_standard_suite_ccsd.py), which is nice, but in psi, it's nice to keep all the modules together. I'm undecided.~; - [ ] @JonathonMisiewicz, did you ever get the impression that `pcg_convergence` should be tighter in dfocc? Present setting 1.e-6 doesn't converge gradients to 6 digits. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review - most of the new tests are skipped pending https://github.com/MolSSI/QC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:2427,message,message,2427,https://psicode.org,https://github.com/psi4/psi4/pull/1850,1,['message'],['message']
Integrability,"s optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:1480,interface,interface,1480,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['interface'],['interface']
Integrability,"s://github.com/edeprince3/v2rdm_casscf/blob/master/backtransform_tpdm.cc) to get V2RDM CASSCF gradients. As best as I can tell, the rewrite just changes orbital indexing conventions, but I could be mistaken.; * There is currently no general machinery for density-fitted correlated gradients. There are three(!) different modules with their own correlated gradient procedure: `dfmp2`, `dfocc`, and `dct`. `dfocc` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/dfgrad.cc) does not make method-specific assumptions but cannot be used by other modules because it [uses](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tei_grad_corr.cc#L181) [custom tensor machinery](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tensors.h). `dfmp2` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/corr_grad.cc#L123) is specific to `dfmp2`. `dct` does not produce true density fitted gradients but contracts its density matrices against derivatives of conventional integrals, which is close but not exact. Further, this lack of general density-fitted gradient machinery in Psi is blocking developers who want density-fitted gradients interfaced through Psi. (@fevangelista at least, and I believe @edeprince3 and @ssh2 as well.). ## Causes of Problems with the Current Design; * Many of the problems with the existing conventional integral gradients are due to the `libtrans` interface between the MO quantities and the AO quantities.; * `libtrans` only recognizes TPDM in `libiwl` format, which is why all codes must use that.; * There is a single `IntegralTransform` call [for all modules](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L511). Because the Quantum Trio-era `detci` and `cc` codes used QT ordering, that `IntegralTransform` must be [told to assume QTOrder](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518), so all other modules must use QT order.; * ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:2938,contract,contracts,2938,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['contract'],['contracts']
Integrability,sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 51.38 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 121.61 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 55.81 sec; Start 22: cc11; 20/411 Test #20: cc1 .............................. Passed 24.98 sec; Start 23: cc12; 21/411 Test #21: cc10 ............................. Passed 12.69 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 12.25 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.41 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 226.61 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 38.66 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 49.77 sec; Start 30: cc15; 27/411 Test #25: cc13a ............................ Passed 289.64 sec; Start 31: cc16; 28/411 Test #195: fd-freq-gradient-large ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:1947,wrap,wrapper,1947,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['wrap'],['wrapper']
Integrability,scf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 63.51 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 128.24 sec; Start 21: cc10; 19/411 Test #21: cc10 ............................. Passed 10.56 sec; Start 22: cc11; 20/411 Test #19: cbs-xtpl-wrapper ................. Passed 70.14 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 27.02 sec; Start 24: cc13; 22/411 Test #23: cc12 ............................. Passed 11.49 sec; Start 26: cc13b; 23/411 Test #22: cc11 ............................. Passed 16.46 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 274.86 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 46.68 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 47.39 sec; Start 30: cc15; 27/411 Test #195: fd-freq-gradient-large ........... Passed 355.17 sec; Start 31: cc16; 28/411 Test #25: cc13a ......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:1949,wrap,wrapper,1949,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['wrap'],['wrapper']
Integrability,"scribed [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same cond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:2672,interface,interface,2672,https://psicode.org,https://github.com/psi4/psi4/issues/2491,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,sed 3.08 sec; Start 364: tu1-h2o-energy; 131/415 Test #303: psimrcc-pt2 ...................... Passed 1.68 sec; Start 212: mcscf1; 132/415 Test #414: json-schema-1-gradient ........... Passed 1.69 sec; Start 365: tu2-ch2-energy; 133/415 Test #392: psi4numpy-dfmp2 .................. Passed 1.94 sec; Start 394: psi4numpy-rhf-gradient; 134/415 Test #401: python-mints9 .................... Passed 2.41 sec; Start 344: scf3; 135/415 Test #406: python-mints13 ................... Passed 2.29 sec; Start 319: pywrap-molecule; 136/415 Test #337: scf-guess-read1 .................. Passed 3.82 sec; Start 407: python-memdfjk; 137/415 Test #360: sapt-sf1 ......................... Passed 3.67 sec; Start 393: psi4numpy-rhf; 138/415 Test #398: python-energy .................... Passed 3.51 sec; Start 215: mints1; 139/415 Test #319: pywrap-molecule .................. Passed 1.48 sec; Start 375: options1; 140/415 Test #297: psimrcc-ccsd_t-1 ................. Passed 4.15 sec; Start 248: numpy-array-interface; 141/415 Test #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:13602,interface,interface,13602,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['interface'],['interface']
Integrability,"serves a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174500000; H -4.468441100000 -0.526892600000 -1.348265500000; C -3.356878400000 -0.865573300000 1.355714100000; H -3.371868200000 -0.108729700000 2.151443200000; C -3.157712400000 1.802287600000 0.144667000000; H -2.704252500000 2.31",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:1271,wrap,wrapper,1271,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['wrap'],['wrapper']
Integrability,"sh is set at 1e-4. I didn't do anything about the failure (ref values deleted and tests are not active), so this is just to bring up that CD threshold is untuned for dertype or E_/D_/R_CONVERGENCE.; * refuted first two thirds of a prominent footnote: `DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented.`; - [x] upgraded stdsuite runner to catch up with qcdb and qcengine last year by (1) implementing per-dertype and abs/rel comparison checks (nothing is actually loosened) and (2) dropping a dict summary of each test to a record file.; - [x] arranged for available `td-{dft}` calls to show up in the energy table, https://psicode.org/psi4manual/master/energy.html; - [x] fixed `energy(""psimrcc_scf"")` to use regular SCF as ref for PSIMRCC and added a test; - [x] rehabilitated `energy(""qchf"")` (which never had its initialism expanded in the whole of the codebase, btw) so it runs. added a test. it probably ought to be better integrated with regular SCF module. Regular SCF has a qchf option that is unused.; - [x] adjusted some qcvars in FNOCC to collect more components from cepa-like methods and to collect different perturbative triples for qcisd.; - [x] collected qcvars correctly in DFOCC for CCD and QCHF. (It was harvesting the CCD method that tipped me into the rabbit-hole that became this PR.). - [x] TODO `pytest -m quick` is still friendly to run (CI finished in reasonable time), but the additions to stdsuite have make ordinary full pytests expensive. I need to manipulate default marks so folks don't inadvertently start hours of tests. `pytest -v ../tests/pytests/test_standard_suite.py -m ""not noci"" -n auto --durations 100 --durations-min 60.0` runs in 25 minutes on a 20-core machine with no individual test over 4m. That's not reasonable for a laptop. Blame the slow-to-converge oo methods, and it's going to get worse with occd and friends.; - [ ] TODO https://github.com/MolSSI/QCEngine/pull/376 and a new",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:11957,integrat,integrated,11957,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['integrat'],['integrated']
Integrability,"so depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to worry that he/she does. > Should adcc be distributed/build with psi4 in the end? (conda, cmake, etc.). Not sure what will work best. We are working on gett",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1281,interface,interface,1281,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['interface'],['interface']
Integrability,"so the environment is solvable on Linux:; ```conda create -n amber ambertools=20.9 python=3.7 blas=*=mkl gau2grid psi4/label/dev::libxc psi4/label/dev::psi4=1.4a2.dev1058 -c conda-forge -c defaults -c psi4/label/dev```. on Mac, I agree that `libgfortran` is the problem. it comes about b/c conda-forge pins on gfortran v4 and defaults on gfortran v3 (then there's various soversions and libgfortran versions, too). once upon a time, the pinning that was applied by run_exports was >3.0.1, but that's been narrowed to >3.0.1,<4.0.0 . there's still some old add-on packages with the former, so if I suppress the libgfortran pinning on psi4 itself (psi4=1.4a2.dev1084 for py37 at https://anaconda.org/psi4/psi4/files), then I can get an environment to solve with it and ambertools=20. of course, then the libgfortran.3.dylib is missing, but if I symlink (!) that to libgfortran.4.dylib, I can get some psi4 test cases to pass (gdma fails to load lib, while some dft is off a bit). altogether, not a satisfactory or safe fix. and libxc is both required and fortran, so I can't just build you a non-fortran psi4. so unless I think of something else, I think you just can't mix fortran dependencies when compiled against a mix of c-f and defaults pinnings. sorry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014:1180,depend,dependencies,1180,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014,1,['depend'],['dependencies']
Integrability,sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 109.54 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 109.00 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 45.45 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 31.10 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 47.18 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 255.04 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 101.66 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 311.67 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 122.44 sec; Start 31: cc16; 36/411 Test #30: cc15 .................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:2526,wrap,wrapper,2526,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['wrap'],['wrapper']
Integrability,"sr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. ---. The full out from the ./setup for the 0.3 release with the intel/13.1.0 compiler is:. ./setup --cc mpicc --cxx mpicxx --fc mpif77 --prefix /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/psi4 --omp --mpi --mkl parallel --cmake ~/bin/cmake/bin/cmake; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/cmake/bin/cmake -DCMAKE_Fortran_COMPILER=mpif77 -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DENABLE_MPI=ON -DENABLE_SGI_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:8855,Interface,Interface,8855,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Interface'],['Interface']
Integrability,ssed 3.99 sec; Start 121: dfccdl1; 326/411 Test #257: omp3-1 ........................... Passed 4.41 sec; Start 377: pywrap-align-chiral; 327/411 Test #284: props1 ........................... Passed 5.03 sec; Start 4: casscf-semi; 328/411 Test #243: ocepa1 ........................... Passed 6.83 sec; Start 246: omp2-1; 329/411 Test #327: scf-guess-read1 .................. Passed 2.70 sec; Start 363: zaptn-nh2; 330/411 Test #377: pywrap-align-chiral .............. Passed 3.07 sec; Start 314: sad1; 331/411 Test #388: python-curve ..................... Passed 4.00 sec; Start 253: omp2p5-1; 332/411 Test #121: dfccdl1 .......................... Passed 4.11 sec; Start 397: json-v11-energy; 333/411 Test #363: zaptn-nh2 ........................ Passed 2.47 sec; Start 384: psi4numpy-rhf-hessian; 334/411 Test #246: omp2-1 ........................... Passed 4.32 sec; Start 239: numpy-array-interface; 335/411 Test #314: sad1 ............................. Passed 3.56 sec; Start 213: mints2; 336/411 Test #239: numpy-array-interface ............ Passed 0.68 sec; Start 328: scf-upcast-custom-basis; 337/411 Test #295: psithon1 ......................... Passed 9.99 sec; Start 391: python-mints2; 338/411 Test #397: json-v11-energy .................. Passed 4.06 sec; Start 119: dfcasscf-sp; 339/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.87 sec; Start 120: dfccd1; 340/411 Test #213: mints2 ........................... Passed 3.23 sec; Start 203: frac; 341/411 Test #328: scf-upcast-custom-basis .......... Passed 3.10 sec; Start 355: tu3-h2o-opt; 342/411 Test #253: omp2p5-1 ......................... Passed 6.90 sec; Start 210: mcscf2; 343/411 Test #4: casscf-semi ...................... Passed 8.94 sec; Start 116: ao-dfcasscf-sp; 344/411 Test #391: python-mints2 .................... Passed 2.70 sec; Start 406: skeletonaointegrals; 345/411 Test #119: dfcasscf-sp ...................... Passed 3.75 sec; Start 214: mints3; 346/411 Test #210: mcscf2 ........................... Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:31376,interface,interface,31376,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['interface'],['interface']
Integrability,st #149: dfomp3-grad2 ..................... Passed 123.25 sec; Start 69: cc51; 57/411 Test #26: cc13b ............................ Passed 128.87 sec; Start 75: cc6; 58/411 Test #30: cc15 ............................. Passed 109.80 sec; Start 386: cookbook-rohf-orb-rot; 59/411 Test #167: dft-b3lyp ........................ Passed 66.58 sec; Start 28: cc13d; 60/411 Test #299: pywrap-alias ..................... Passed 70.59 sec; Start 242: ocepa-grad2; 61/411 Test #47: cc31 ............................. Passed 162.25 sec; Start 20: cc1; 62/411 Test #24: cc13 ............................. Passed 309.67 sec; Start 31: cc16; 63/411 Test #280: opt-irc-1 ........................ Passed 96.64 sec; Start 17: cbs-xtpl-opt; 64/411 Test #204: frac-ip-fitting .................. Passed 68.08 sec; Start 100: ci-property; 65/411 Test #29: cc14 ............................. Passed 343.83 sec; Start 74: cc5a; 66/411 Test #278: opt13 ............................ Passed 797.72 sec; Start 19: cbs-xtpl-wrapper; 67/411 Test #359: tu6-cp-ne2 ....................... Passed 350.78 sec; Start 107: dcft1; 68/411 Test #292: psimrcc-fd-freq2 ................. Passed 76.46 sec; Start 159: dft-grad-meta; 69/411 Test #69: cc51 ............................. Passed 82.00 sec; Start 58: cc41; 70/411 Test #75: cc6 .............................. Passed 84.41 sec; Start 379: cc-module; 71/411 Test #242: ocepa-grad2 ...................... Passed 79.99 sec; Start 91: cepa-module; 72/411 Test #100: ci-property ...................... Passed 63.75 sec; Start 61: cc44; 73/411 Test #159: dft-grad-meta .................... Passed 50.20 sec; Start 297: pubchem1; 74/411 Test #20: cc1 .............................. Passed 93.10 sec; Start 389: python-pubchem; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 92.53 sec; Start 60: cc43; 76/411 Test #74: cc5a ............................. Passed 103.50 sec; Start 200: fnocc2; 77/411 Test #17: cbs-xtpl-opt ..................... Passed 122.34 sec; Start 170: dft1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:6558,wrap,wrapper,6558,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['wrap'],['wrapper']
Integrability,st #253: mbis-1 ........................... Passed 10.77 sec; Start 258: mbis-6; 76/185 Test #258: mbis-6 ........................... Passed 16.06 sec; Start 259: mcscf1; 77/185 Test #259: mcscf1 ........................... Passed 2.04 sec; Start 262: mints1; 78/185 Test #262: mints1 ........................... Passed 1.93 sec; Start 263: mints2; 79/185 Test #263: mints2 ........................... Passed 3.59 sec; Start 272: mints10; 80/185 Test #272: mints10 .......................... Passed 2.30 sec; Start 274: molden1; 81/185 Test #274: molden1 .......................... Passed 3.07 sec; Start 275: molden2; 82/185 Test #275: molden2 .......................... Passed 2.82 sec; Start 284: mp2p5-grad1; 83/185 Test #284: mp2p5-grad1 ...................... Passed 2.74 sec; Start 288: mp2-property; 84/185 Test #288: mp2-property ..................... Passed 4.86 sec; Start 289: mpn-bh; 85/185 Test #289: mpn-bh ........................... Passed 3.94 sec; Start 302: numpy-array-interface; 86/185 Test #302: numpy-array-interface ............ Passed 1.88 sec; Start 305: olccd-grad2; 87/185 Test #305: olccd-grad2 ...................... Passed 8.44 sec; Start 306: olccd1; 88/185 Test #306: olccd1 ........................... Passed 3.32 sec; Start 310: omp2-2; 89/185 Test #310: omp2-2 ........................... Passed 6.22 sec; Start 314: omp2-grad1; 90/185 Test #314: omp2-grad1 ....................... Passed 3.07 sec; Start 317: omp2p5-2; 91/185 Test #317: omp2p5-2 ......................... Passed 6.67 sec; Start 320: omp3-1; 92/185 Test #320: omp3-1 ........................... Passed 3.05 sec; Start 328: opt1; 93/185 Test #328: opt1 ............................. Passed 6.47 sec; Start 348: opt-freeze-coords; 94/185 Test #348: opt-freeze-coords ................ Passed 6.55 sec; Start 351: phi-ao; 95/185 Test #351: phi-ao ........................... Passed 21.33 sec; Start 355: props4; 96/185 Test #355: props4 ........................... Passed 3.14 sec; Start 356: psimrcc-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:7939,interface,interface,7939,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,['interface'],['interface']
Integrability,st #79: cc8a ............................. Passed 53.51 sec; Start 282: opt-irc-1; 88/413 Test #158: dfomp2p5-grad2 ................... Passed 80.48 sec; Start 20: cbs-xtpl-wrapper; 89/413 Test #81: cc8c ............................. Passed 52.58 sec; Start 17: cbs-xtpl-opt; 90/413 Test #21: cc1 .............................. Passed 86.44 sec; Start 78: cc8; 91/413 Test #82: cc9 .............................. Passed 67.08 sec; Start 34: cc18; 92/413 Test #142: dfomp2-2 ......................... Passed 51.07 sec; Start 319: sapt3; 93/413 Test #373: dft-custom-dhdf .................. Passed 90.03 sec; Start 321: sapt5; 94/413 Test #83: cc9a ............................. Passed 56.13 sec; Start 391: python-pubchem; 95/413 Test #265: omp3-grad2 ....................... Passed 78.67 sec; Start 194: fd-freq-energy; 96/413 Test #34: cc18 ............................. Passed 48.82 sec; Start 247: ocepa3; 97/413 Test #78: cc8 .............................. Passed 62.52 sec; Start 69: cc50; 98/413 Test #20: cbs-xtpl-wrapper ................. Passed 78.50 sec; Start 294: psimrcc-fd-freq2; 99/413 Test #282: opt-irc-1 ........................ Passed 94.89 sec; Start 50: cc33; 100/413 Test #327: scf-bz2 .......................... Passed 118.72 sec; Start 33: cc17; 101/413 Test #391: python-pubchem ................... Passed 60.41 sec; Start 63: cc45; 102/413 Test #319: sapt3 ............................ Passed 76.94 sec; Start 56: cc39; 103/413 Test #17: cbs-xtpl-opt ..................... Passed 105.69 sec; Start 206: frac-ip-fitting; 104/413 Test #321: sapt5 ............................ Passed 74.14 sec; Start 68: cc4a; 105/413 Test #69: cc50 ............................. Passed 50.27 sec; Start 101: ci-property; 106/413 Test #247: ocepa3 ........................... Passed 59.63 sec; Start 169: dft-b3lyp; 107/413 Test #50: cc33 ............................. Passed 44.16 sec; Start 275: opt7; 108/413 Test #63: cc45 ............................. Passed 27.72 sec; Start 150: dfomp3-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:9330,wrap,wrapper,9330,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['wrap'],['wrapper']
Integrability,"stand the problem, it's easiest to work with a toy system. I'm choosing the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. mtd = ""hf/sto-6g"". set tdscf_tda true; set reference uks ; set tdscf_states [0, 0, 2, 0]. energy(""td-"" + mtd). set reference rks ; set tdscf_states [0, 0, 1, 0]; energy(""td-"" + mtd). set tdscf_triplets only; energy(""td-"" + mtd); ```. Within the TDA approximation, we need to find the roots of a Hermitian matrix. This matrix has the structure J + V + X. J consists of _Coulomb integrals_, V consists of _the exchange correlation second derivative elements_, and X is everything else - it's not relevant for this problem. Because of the spin-properties of the Hamiltonian (and approximate DFT functionals), the matrix becomes block-diagonal upon transforming the basis states (i-a) α and (i-a) β into their normalized plus and minus combinations. The plus eigenvectors correspond to singlets, and the negative eigenvectors to triplets. Matrix elements take the form 1/2 * [(α|α) ± (α|β) ± (β|α) + (β|β)], where parentheses denote a spin-dependent matrix element. Upon exploiting spin-restriction, this reduces to [(α|α) ± (α|β)]. Now, J matrix elements are spinfree, i.e., the Coulomb integral (pq|pq) doesn't care whether the bra and the ket have the same spin-index or not, so long as p and q have the same spinindex. Therefore, the plus spin combination reduces to 2 * (pq|pq), and the minus spin combination reduces to 0. The V matrix elements are not spinfree. Whether you differentiate with respect to an alpha excitation twice or an alpha followed by a beta produces different integrals. The formula [(α|α) ± (α|β)] does not simplify. Unfortunately, Psi combines the V terms into the J terms. Psi currently computes the + case of the V terms with no mechanism to request the - terms. _This_ is why we can't do triplets. This should be fixed, once the code is better organized and commented so it's clear exactly which terms need the freedom to change sign.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2841:1292,depend,dependent,1292,https://psicode.org,https://github.com/psi4/psi4/issues/2841,1,['depend'],['dependent']
Integrability,t #313: rasci-h2o ........................ Passed 1.13 sec; Start 222: mints-helper; 376/413 Test #132: dfmp2-2 .......................... Passed 1.70 sec; Start 356: tu2-ch2-energy; 377/413 Test #329: scf-guess-read1 .................. Passed 1.55 sec; Start 8: castup1; 378/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 1.46 sec; Start 332: scf-bs; 379/413 Test #384: psi4numpy-rhf .................... Passed 0.97 sec; Start 216: mints3; 380/413 Test #380: mints12 .......................... Passed 1.30 sec; Start 336: scf3; 381/413 Test #104: decontract ....................... Passed 1.30 sec; Start 300: pubchem2; 382/413 Test #355: tu1-h2o-energy ................... Passed 1.26 sec; Start 212: mcscf2; 383/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 1.63 sec; Start 213: mcscf3; 384/413 Test #356: tu2-ch2-energy ................... Passed 0.86 sec; Start 218: mints5; 385/413 Test #330: scf-upcast-custom-basis .......... Passed 1.54 sec; Start 241: numpy-array-interface; 386/413 Test #351: sapt-sf1 ......................... Passed 1.06 sec; Start 217: mints4; 387/413 Test #222: mints-helper ..................... Passed 1.14 sec; Start 366: options1; 388/413 Test #336: scf3 ............................. Passed 0.87 sec; Start 214: mints1; 389/413 Test #332: scf-bs ........................... Passed 1.06 sec; Start 211: mcscf1; 390/413 Test #216: mints3 ........................... Passed 1.11 sec; Start 177: docs-dft; 391/413 Test #223: mints9 ........................... Passed 2.13 sec; Start 162: dft-grac; 392/413 Test #347: dfep2-2 .......................... Passed 2.02 sec; Start 311: pywrap-molecule; 393/413 Test #8: castup1 .......................... Passed 1.50 sec; Start 310: pywrap-db3; 394/413 Test #213: mcscf3 ........................... Passed 0.90 sec; Start 176: docs-bases; 395/413 Test #217: mints4 ........................... Passed 0.61 sec; Start 210: matrix1; 396/413 Test #366: options1 ......................... Passed 0.61 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:36254,interface,interface,36254,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['interface'],['interface']
Integrability,t #317: sapt3 ............................ Passed 76.93 sec; Start 69: cc51; 47/411 Test #316: sapt2 ............................ Passed 359.14 sec; Start 167: dft-b3lyp; 48/411 Test #279: opt14 ............................ Passed 77.60 sec; Start 292: psimrcc-fd-freq2; 49/411 Test #319: sapt5 ............................ Passed 74.24 sec; Start 29: cc14; 50/411 Test #69: cc51 ............................. Passed 68.34 sec; Start 75: cc6; 51/411 Test #76: cc7 .............................. Passed 103.34 sec; Start 204: frac-ip-fitting; 52/411 Test #167: dft-b3lyp ........................ Passed 67.69 sec; Start 19: cbs-xtpl-wrapper; 53/411 Test #145: dfomp2-grad3 ..................... Passed 121.49 sec; Start 114: dcft8; 54/411 Test #29: cc14 ............................. Passed 41.75 sec; Start 61: cc44; 55/411 Test #292: psimrcc-fd-freq2 ................. Passed 66.23 sec; Start 74: cc5a; 56/411 Test #75: cc6 .............................. Passed 56.18 sec; Start 159: dft-grad-meta; 57/411 Test #19: cbs-xtpl-wrapper ................. Passed 49.61 sec; Start 24: cc13; 58/411 Test #204: frac-ip-fitting .................. Passed 62.23 sec; Start 297: pubchem1; 59/411 Test #61: cc44 ............................. Passed 50.54 sec; Start 17: cbs-xtpl-opt; 60/411 Test #74: cc5a ............................. Passed 53.95 sec; Start 100: ci-property; 61/411 Test #114: dcft8 ............................ Passed 75.09 sec; Start 280: opt-irc-1; 62/411 Test #159: dft-grad-meta .................... Passed 54.04 sec; Start 389: python-pubchem; 63/411 Test #297: pubchem1 ......................... Passed 54.36 sec; Start 28: cc13d; 64/411 Test #24: cc13 ............................. Passed 61.45 sec; Start 58: cc41; 65/411 Test #17: cbs-xtpl-opt ..................... Passed 52.63 sec; Start 2: adc2; 66/411 Test #100: ci-property ...................... Passed 50.10 sec; Start 219: mints-benchmark; 67/411 Test #58: cc41 ............................. Passed 34.52 sec; Start 170: dft1-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:5494,wrap,wrapper,5494,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['wrap'],['wrapper']
Integrability,"t -c psi4/label/dev -c psi4`. I can `import psi4` correctly using the python interactive shell. ```bash; $ source activate p4env; $ python; ```; ```python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:1419,message,message,1419,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['message'],['message']
Integrability,t ................ Passed 1.41 sec; Start 335: scf3; 386/412 Test #405: json-schema-1-properties ......... Passed 1.45 sec; Start 240: numpy-array-interface; 387/412 Test #412: skeletonwavefunction ............. Passed 1.62 sec; Start 213: mints1; 388/412 Test #388: python-energy .................... Passed 1.31 sec; Start 309: pywrap-db3; 389/412 Test #294: psimrcc-pt2 ...................... Passed 1.64 sec; Start 176: docs-dft; 390/412 Test #217: mints5 ........................... Passed 1.26 sec; Start 365: options1; 391/412 Test #397: python-memdfjk ................... Passed 1.87 sec; Start 410: skeletonscf; 392/412 Test #406: skeleton ......................... Passed 1.57 sec; Start 175: docs-bases; 393/412 Test #383: psi4numpy-rhf .................... Passed 1.25 sec; Start 216: mints4; 394/412 Test #212: mcscf3 ........................... Passed 1.34 sec; Start 209: matrix1; 395/412 Test #210: mcscf1 ........................... Passed 1.13 sec; Start 403: json-schema-1-throws; 396/412 Test #240: numpy-array-interface ............ Passed 0.83 sec; Start 88: cepa1; 397/412 Test #355: tu2-ch2-energy ................... Passed 1.66 sec; 398/412 Test #365: options1 ......................... Passed 0.66 sec; 399/412 Test #335: scf3 ............................. Passed 1.37 sec; 400/412 Test #176: docs-dft ......................... Passed 0.77 sec; 401/412 Test #309: pywrap-db3 ....................... Passed 0.79 sec; 402/412 Test #189: fci-tdm .......................... Passed 1.52 sec; 403/412 Test #213: mints1 ........................... Passed 0.95 sec; 404/412 Test #407: skeletonaointegrals .............. Passed 1.98 sec; 405/412 Test #410: skeletonscf ...................... Passed 0.71 sec; 406/412 Test #175: docs-bases ....................... Passed 0.64 sec; 407/412 Test #209: matrix1 .......................... Passed 0.60 sec; 408/412 Test #403: json-schema-1-throws ............. Passed 0.61 sec; 409/412 Test #216: mints4 ........................... Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:37277,interface,interface,37277,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['interface'],['interface']
Integrability,"t of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:1598,rout,routines,1598,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['rout'],['routines']
Integrability,"t parser (#1743); - In `-o stdout` mode, `core.be_quiet()` followed by `core.reopen_outfile()` no longer petulantly deprives you of output (#1735); - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:11841,message,message,11841,https://psicode.org,https://github.com/psi4/psi4/issues/1562,4,"['depend', 'interface', 'message']","['dependencies', 'interface', 'message']"
Integrability,t symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:4647,depend,depending,4647,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['depend'],['depending']
Integrability,"t, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ### New sanity checks; - [x] Add a sanity check for non-square matrices in `mcscf::MatrixBase::diagonalize`; - [x] Add a sanity c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2845,wrap,wrapper,2845,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"table and splitting/parsing happen at run_detci.; - [x] the `scf_type`, `mp2_type`, `mp_type`, `ci_type`, `cc_type` keywords were a good idea in that they allow different defaults for different levels of theory and are fairly easy to guess and uniform to use. One flaw is that you don't know programmatically what controls what method -- it's all hard-coded, sometimes in more than one place, in proc.py . Now there's a method:type association dict in procrouting/proc_data.py . There's also a little function there serving up the info, so you can get out the keyword and current value with `method_algorithm_type(mtd).keyword` and `method_algorithm_type(mtd).now`, respectively. This helps clean up proc.py and allows the controlling keyword to be linked for each method in the generated tables.; - [x] in proc.py, ; - [x] select_* functions have been made more boilerplate and elsewhere-mentioned DETCI and MRCC changes integrated in.; - [x] CCD is given select_ccd* functions to raise a sensible error message since the default (cc_type=CONV) isn't implemented. ; - [x] CC2 and CC3 are given select_* functions since now CCENERGY and MRCC cover them. This led to controversy (unresolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error messages have been wanting, being hampered by being generated by exceptions. In particular, they give no clue how close you are to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:8167,message,message,8167,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['message'],['message']
Integrability,"tagging @robertodr because of pcmsolver, but I assume it's an issue on psi4's side of the interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1656#issuecomment-670372487:90,interface,interface,90,https://psicode.org,https://github.com/psi4/psi4/issues/1656#issuecomment-670372487,1,['interface'],['interface']
Integrability,"tasks for after #1721. feel free to add items. - [ ] switch CI to conda package, not from-source build; - [ ] remove Libint1 & Libint1t; - [ ] remove ERD #1780 ; - [ ] determine the best way to handle spherical harmonic max AM requirements in libmints, without the LIBINT_MAX_AM macro; - [ ] ~fix lgtm l2 build and move extra cmake out of main CMakeLists.txt~ LGTM defunct; - [ ] resolve `libint2_DIR` vs. `Libint2_DIR` with Valeev; - [x] update sphinx<2 requirement -- we're on 7 now?; - [ ] update one electron integrals to use Libint2, and remove existing routines",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1940:559,rout,routines,559,https://psicode.org,https://github.com/psi4/psi4/issues/1940,1,['rout'],['routines']
Integrability,"th/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libdkh.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/liberd.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libsimint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libefp.dylib (compatibility version 0.0.0, current version 0.0.0); 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib (compatibility version 1.0.0, current version 1.0.0); 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib (compatibility version 1.0.0, current version 1.0.0); 	@rpath/libchemps2.2.dylib (compatibility version 2.0.0, current version 0.0.0); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```; - I can play a few tricks with `install_name_tool` to basically get rid of the dependency on `libLAPACK.dylib` and `libBLAS.dylib`. I did that by changing `core.so` to reference `libz` in their place:; ```; $ install_name_tool -change /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib libz.dylib core.so; $ install_name_tool -change /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib libz.dylib core.so; $ otool -L core.so; core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libpcm.1.dylib (compatibility version 1.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	@rpath/libgdma.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compati",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311749244:1642,depend,dependency,1642,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311749244,1,['depend'],['dependency']
Integrability,"thanks, @konpat, this is mostly waiting on v1.3 tag before merge. what's hooked up at present is enough to collect sinf info for runs en masse, and I think that's the plan. Then use best-ways-to-sum-together findings to decide what `energy('sapt???')` should be defined (though I agree that something like `energy('sapt0-sinf')` is almost certainly wanted). would you want to add a paragraph about the sinf methods to https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/sapt.rst ? `.. include:: autodir_options_c/sapt__aio_cphf.rst` is how to auto-inject the read_options.cc blurb into the narrative docs. feel free to put any papers in the introduction.rst sections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-465341629:558,inject,inject,558,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-465341629,1,['inject'],['inject']
Integrability,"the (conventional or DF) integrals written to disk. This got; handled by some logic where necessary for scf_type = disk_df, apparently,; but did not get handled for mem_df. Works ok for ccenergy? It also needs conventional integrals written to; disk. Maybe that is getting intercepted correctly. On Mon, May 14, 2018 at 6:14 PM, Lori A. Burns <notifications@github.com>; wrote:. > Posting Dom's very nice summary for easier perusal and searchability.; > Effective scf_type df Testing: mem_df & disk_df; >; > All tests listed below examine calls to both energy() and gradient() when; > employing the scf_type mem_df and scf_type disk_df settings. Each test; > employs a different model chemistry (indicated in the test description); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:951,message,message,951,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['message'],['message']
Integrability,"this PR is ready to go; - fix uninitialized variables in dfocc affecting UHF calcs. @bozkaya should review; - fix bug where default `cepa(0)` was routing to qcisd instead of cepa; - fix bug where dfocc `cepa(0)` with `DF` was getting orbital-optimized; - added test case that compares mp2 calcs btwn occ/fnocc/detci/dfmp2. rohf conv still broken btwn detci and occ, but not addressed here",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/270:146,rout,routing,146,https://psicode.org,https://github.com/psi4/psi4/pull/270,1,['rout'],['routing']
Integrability,"thm in Psi4 (currently DF-DirJ, LinK, and COSX) is contained within CompositeJK itself. This runs a high risk of CompositeJK becoming monolithic, especially as more separate J/K build methods are added (e.g., CFMM). This PR is meant to be the solution to that issue. Rather than storing every separate J or K build algorithm in CompositeJK itself, they are now implemented as derived classes of a new base class, SplitJK. SplitJK features the `build_G_component` member function, which derived classes of SplitJK then implement to execute their own algorithm for building one of J or K. CompositeJK is reworked to match, featuring a pair of shared_ptrs to SplitJK classes, one representing the J algorithm, and one representing the K algorithm. Actual machinery for computing J or K, as well as other functionalities such as header printing, is then done through calling corresponding functions from the SplitJK pointers. My thought is for this PR to be added in v1.9. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [x] Implements the SplitJK class for representing algorithms that build one of J or K.; - [x] Refactors DF-DirJ, LinK, and COSX as derived classes of SplitJK.; - [x] Reworks the CompositeJK class to execute in terms of SplitJK derived classes. ## Questions; - [ ] Is passing the eri_computers variable to COSX::build_G_component() as an argument acceptable, even though it is unused in that function? My logic, for now, is that the SplitJK implementation allows for a universal interface for calling different SplitJK derived classes, and thus different composite algorithm combinations; but this is a case where specifically fine-tuning the input for different methods may be preferable. What does everyone think?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2955:1958,interface,interface,1958,https://psicode.org,https://github.com/psi4/psi4/pull/2955,1,['interface'],['interface']
Integrability,"thub.com/loriab/libint/tree/new-cmake-harness-lab-rb1; * collect deps as described https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md . You'll need C++ compiler, CMake, Ninja, Boost headers, GMPXX, and Eigen3; * configure something like Exhibit A below. `CMAKE_PREFIX_PATH` is where you hint your boost, gmp, eigen, etc. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, too: https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L86-L87; * If that configures, let it build `cmake --build <build_dir> -j<N>`. definitely do this step in parallel. ### Note on AM=7; Regular AM is 5. If you only need 7, you can use this tarball rather than generating your own with `--target export` in L2 repo: https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2_rev1.tgz Start above directions at ""Now back at your psi4 clone..."". Still GCC only, not Intel compilers. ### Exhibit A; ```; cmake -S. -Bbuild \; -G Ninja \; -D LIBINT_BUILD_LIBRARY_AS_SUBPROJECT=OFF \; -D CMAKE_INSTALL_PREFIX=/path/to/l2/install \; -D REQUIRE_CXX_API=ON \; -D REQUIRE_CXX_API_COMPILED=OFF \; -D BUILD_TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:1783,depend,dependencies,1783,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['depend'],['dependencies']
Integrability,"tl;dr Psi4 itself needs no changes for numpy v2, but its runtime major version does need to match the compile-time major version. Current conda-package v1.9.1 with _1 needs to be used in a np v1 env. I'll rebuild a _2 soon that can be used with np v2. longer:; Numpy v2 is up on conda-forge and so may show up in an environment near you. The situation wrt psi4 is that it needs either v1 or v2 depending on what it was compiled against. So:. * the conda package -- AVOIDABLE PROBLEM, this is compiled against numpy v1, so constrain your env. I'll do a new build against v2 after qcel is ready.; * an old objdir compiled against a v1 numpy -- no problem, just don't let any new conda commands update the env to v2 numpy. use `numpy=1* -c conda-forge` in any `conda update` or `conda install` commands.; * a fresh objdir where the numpy is v2 -- no problem, psi4 compiles just fine. Might need https://github.com/MolSSI/QCElemental/pull/338; * an old objdir compiled against a v1 numpy that now sees a v2 numpy at runtime -- PROBLEM, see signature below. downgrade the numpy with `conda install numpy=1 -c conda-forge`. The symptom of an incompatible psi4+numpy is the following. ```; !----------------------------------------------------------------------------------!; ! !; ! Following atoms are too close: [(0, np.int64(1), np.float64(0.0)), (0, !; ! np.int64(2), np.float64(0.0)), (1, np.int64(2), np.float64(0.0))] !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3184:394,depend,depending,394,https://psicode.org,https://github.com/psi4/psi4/issues/3184,1,['depend'],['depending']
Integrability,"tonmointegrals .............. Passed 0.89 sec; Start 188: fci-tdm; 390/411 Test #354: tu2-ch2-energy ................... Passed 0.76 sec; Start 308: pywrap-db3; 391/411 Test #352: stability2 ....................... Passed 0.85 sec; Start 211: mcscf3; 392/411 Test #410: skeletonsointegrals .............. Passed 0.91 sec; Start 334: scf3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 239: numpy-array-interface; 394/411 Test #330: scf-bs ........................... Passed 0.83 sec; Start 409: skeletonscf; 395/411 Test #387: python-energy .................... Passed 0.72 sec; Start 175: docs-dft; 396/411 Test #209: mcscf1 ........................... Passed 0.65 sec; Start 216: mints5; 397/411 Test #188: fci-tdm .......................... Passed 0.82 sec; Start 208: matrix1; 398/411 Test #308: pywrap-db3 ....................... Passed 0.67 sec; Start 212: mints1; 399/411 Test #409: skeletonscf ...................... Passed 0.60 sec; Start 364: options1; 400/411 Test #239: numpy-array-interface ............ Passed 0.64 sec; Start 215: mints4; 401/411 Test #211: mcscf3 ........................... Passed 0.68 sec; Start 174: docs-bases; 402/411 Test #334: scf3 ............................. Passed 0.68 sec; Start 402: json-schema-1-throws; 403/411 Test #175: docs-dft ......................... Passed 0.66 sec; Start 87: cepa1; 404/411 Test #216: mints5 ........................... Passed 0.66 sec; 405/411 Test #208: matrix1 .......................... Passed 0.54 sec; 406/411 Test #212: mints1 ........................... Passed 0.53 sec; 407/411 Test #364: options1 ......................... Passed 0.54 sec; 408/411 Test #215: mints4 ........................... Passed 0.52 sec; 409/411 Test #174: docs-bases ....................... Passed 0.51 sec; 410/411 Test #402: json-schema-1-throws ............. Passed 0.54 sec; 411/411 Test #87: cepa1 ............................ Passed 1.69 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:37496,interface,interface,37496,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['interface'],['interface']
Integrability,"transform blocks at a time based on occupation, which is what you're more likely to have.; * Either each caller code creates its own integral transformation object and instructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored correlated derivatives. The two particle-density matrix is just replaced with the intermediates from Equation 79 of [Ugur's paper](https://aip.scitation.org/doi/10.1063/1.4896235): the thing you contract against the metric derivative and the thing you contract against the density fitted-integral derivative.; * At present, I envision the caller being responsible for supplying the object contracted against the overlap derivatives: orbital Lagrangian, energy-weighted density matrix, or possibly other names. It's always possible to determine this from the other intermediates needed for gradients. (At least for conventional integrals, and probably for density-fitted as well.) It may be worth coding for the transformation to do this.; * While solving response equations is common to many derivative methods, it's counterproductive to generalize this beyond providing a common conjugate gradient solver (which is outside my role here). For example, consider the orbital response term of MP2 between Ugur's MP2 paper, [Francesco's DSRG (regularized MP2) paper](https://aip.scitation.org/doi/10.1063/1.5100175), and the [DiStasio/Head-Gordon MP2 paper](https://onlinelibrary.wiley.com/doi/full/10.1002/jcc.20604) behind Rob's implementatio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:5662,contract,contract,5662,https://psicode.org,https://github.com/psi4/psi4/issues/1736,2,['contract'],['contract']
Integrability,"ub.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2867,wrap,wrap,2867,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,1,['wrap'],['wrap']
Integrability,"uggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-DIAG_METHOD-DETCI) are deprecated kwargs (see also: #2640 ), so I can't test them. . given [`np.linalg.eigh`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigh.html) just uses LAPACK's syevd/heevd, and `RSP` is just supposed to be LAPACK's dsyev, this result is very perturbing. . I've attached output files for the [Davidson](https://github.com/psi4/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:2269,rout,routine,2269,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['rout'],['routine']
Integrability,"uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day. thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge. I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547:39,integrat,integratorxx,39,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547,2,['integrat'],['integratorxx']
Integrability,"ulates throughout the job. Psi4Errors printed above when a particular molecule fails to optimize, leading to the calculation to skip to the next molecule Other job input parameters are 1 node, 16 cores. . I have attempted to produce a minimal example of the context I running my program and where the memory leaks occur. ```; from openff.recharge.grids import LatticeGridSettings, GridGenerator; import psutil; import psi4; from openff.toolkit.topology import Molecule; from psi4.core import GeometryUnits; from openff.units.elements import SYMBOLS; from qcelemental.models.common_models import Model; from qcelemental.models import Molecule as QCMolecule; from qcelemental.models.procedures import OptimizationInput, QCInputSpecification; import qcengine; from openff.units import unit; import numpy. def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False). def xtb_ff_opt(qc_mol: QCMolecule) -> QCMolecule:; """"""; Runs an xtb ff optimisation on the conformer using the qc_engine wrapper. . Parameters; ----------; conformer_no; The conformer number in the molecule to run the optimisation on. . Returns; -------; The ff optimised conformer. ; """"""; xtb_model = Model(method=""gfn2-xtb"", basis=None); keywords = {""verbosity"": ""muted""}; return qcengine_opt(; qc_mol=qc_mol, model=xtb_model, program=""xtb"", spec_keywords=keywords; ). def qcengine_opt(qc_mol: QCMolecule, model: Model, program: str, spec_keywords: dict[str, str]) -> QCMolecule:; """"""; A general function to run an optimisation via qcengine.; """"""; spec = QCInputSpecification(model=model, keywords=spec_keywords, driver=""gradient""); opt_spec = OptimizationInput(; initial_molecule=qc_mol,; input_specification=spec,; keywords={""coordsys"": ""dlc"", ; ""program"": program; } ; ); opt = qcengine.compute_procedure(opt_spec, ""geometric"", local_options = { ""memory"": 4, ; ""ncores"": 1}, ; raise_error=True); print(opt); return opt.final_molecule. def generate_grid(molecu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:5394,wrap,wrapper,5394,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['wrap'],['wrapper']
Integrability,"ult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:1800,message,messages,1800,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['message'],['messages']
Integrability,update PCMSolver interface to v1.2.3,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2903:17,interface,interface,17,https://psicode.org,https://github.com/psi4/psi4/pull/2903,1,['interface'],['interface']
Integrability,update distributed driver interface for qcfractal next,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645:26,interface,interface,26,https://psicode.org,https://github.com/psi4/psi4/pull/2645,1,['interface'],['interface']
Integrability,update error message box: preserve newlines,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1868:13,message,message,13,https://psicode.org,https://github.com/psi4/psi4/pull/1868,1,['message'],['message']
Integrability,"uration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of target psi4-core; ...; -- The CXX compiler identification is Intel 16.0.3.20160415; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Using pybind11: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/include (version 2.0.0 for Py3.5.2 and -std=c++11); -- Using Python 3.5: /theoryfs2/ds/cdsgroup/min",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:2291,depend,dependencies,2291,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,1,['depend'],['dependencies']
Integrability,user interface to tddft,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1836:5,interface,interface,5,https://psicode.org,https://github.com/psi4/psi4/issues/1836,1,['interface'],['interface']
Integrability,"utdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; =========================================================================================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8034,message,message,8034,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['message'],['message']
Integrability,"ution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1580,wrap,wrap,1580,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['wrap'],['wrap']
Integrability,"values. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ###",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2716,wrap,wrapper,2716,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"values. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure. ## Questions; - [x] Is `libciomr` a good place for the new wrappers to live in? The one they are replacing is there, so it seemed like as good of a place as any. ## Checklist; - [x] No new features; - [x] 503/503 ctests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:2324,wrap,wrapper,2324,https://psicode.org,https://github.com/psi4/psi4/pull/2686,5,['wrap'],"['wrapper', 'wrappers']"
Integrability,"vates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:1955,depend,dependency,1955,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['depend'],['dependency']
Integrability,"version. > Traceback (most recent call last):; > File ""/root/miniconda3/envs/psi4/bin/psi4"", line 184, in <module>; > import psi4; > File ""/root/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/__init__.py"", line 82, in <module>; > from .driver import endorsed_plugins; > File ""/root/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; > import v2rdm_casscf; > File ""/root/miniconda3/envs/psi4/lib//python3.7/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; > psi4.core.plugin_load(sofile); > RuntimeError:; > Fatal Error: load_plugin: Cannot open library: /root/miniconda3/envs/psi4/lib/python3.7/site-packages/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZN3psi8ERISieveC1ESt10shared_ptrINS_8BasisSetEEd; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1573157589938/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; > The most recent 5 function calls were:; > ; > ; > forrtl: severe (174): SIGSEGV, segmentation fault occurred; > Image PC Routine Line Source; > libgdma.so 00007FDBC5B360DC for__signal_handl Unknown Unknown; > libpthread-2.27.s 00007FDBD8DF2890 Unknown Unknown Unknown; > ld-2.27.so 00007FDBD9016A31 Unknown Unknown Unknown; > libc-2.27.so 00007FDBD8B472DF _dl_catch_excepti Unknown Unknown; > libc-2.27.so 00007FDBD8B4736F _dl_catch_error Unknown Unknown; > libdl-2.27.so 00007FDBD87D1735 Unknown Unknown Unknown; > libdl-2.27.so 00007FDBD87D10B3 dlclose Unknown Unknown; > core.cpython-37m- 00007FDBC6A8034A Unknown Unknown Unknown; > core.cpython-37m- 00007FDBC672D382 Unknown Unknown Unknown; > core.cpython-37m- 00007FDBC6756337 Unknown Unknown Unknown; > core.cpython-37m- 00007FDBC6762AB4 Unknown Unknown Unknown; > python3.7 00007FDBD94D3B65 PyCFunction_Call Unknown Unknown; > python3.7 00007FDBD95B2E74 Unknown Unknown Unknown; > python3.7 00007FDBD95B99E7 Py_FinalizeEx Unknown Unknown; > python3.7 00007FDBD95D1C63 Unknown Unknown Unknown; > python3.7 0000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1750:1163,Rout,Routine,1163,https://psicode.org,https://github.com/psi4/psi4/issues/1750,1,['Rout'],['Routine']
Integrability,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1416,integrat,integration,1416,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,2,['integrat'],['integration']
Integrability,w 2 calls; RV: Form V : 51.150u 0.583s 31.023w 24 calls; Properties : 51.000u 0.717s 30.270w 55840 calls; Functional : 16.767u 0.117s 10.525w 55840 calls; V_xc : 10.133u 0.133s 6.536w 33504 calls; SAPT(DFT): Monomer B DFT : 28.650u 0.350s 17.421w 1 calls; SAPT(DFT):SAPT(DFT):JK : 0.250u 0.000s 0.149w 1 calls; SAPT(DFT):SAPT(DFT):elst : 0.000u 0.000s 0.000w 1 calls; SAPT(DFT):SAPT(DFT):exch : 0.200u 0.000s 0.126w 1 calls; SAPT(DFT):SAPT(DFT):ind : 45.583u 0.533s 27.664w 1 calls; RV: Form Vx : 44.150u 0.533s 26.828w 16 calls; Derivative Properties : 9.050u 0.050s 5.407w 22336 calls; V_XCd : 6.933u 0.067s 4.389w 22336 calls; SAPT(DFT):SAPT(DFT):disp : 5.000u 0.167s 3.141w 1 calls; DFH: initialize() : 0.583u 0.000s 0.350w 1 calls; DFH: sparsity prep : 0.033u 0.000s 0.024w 1 calls; DFH: AO Construction : 0.533u 0.000s 0.313w 1 calls; DFH: transform() : 0.117u 0.017s 0.075w 1 calls; DFH: Total Workflow : 0.033u 0.000s 0.021w 6 calls; DFH: Total Transform : 0.017u 0.000s 0.014w 4 calls; DFH: 1st Contraction : 0.000u 0.000s 0.009w 2 calls; DFH: 2nd Contraction : 0.017u 0.000s 0.005w 2 calls; DFH: MO to disk : 0.000u 0.000s 0.001w 2 calls; DFH: Direct Contractions : 0.083u 0.017s 0.046w 1 calls; DF Integrals : 0.767u 0.083s 0.514w 1 calls; W Integrals : 0.000u 0.000s 0.001w 1 calls; Exch-Disp20 N^5 : 0.033u 0.033s 0.043w 1 calls; Exch-Disp20 N^4 : 0.267u 0.033s 0.178w 1 calls. -----------------------------------------------------------; SAPT(DFT): Dimer SCF : 2.883u 0.033s 1.795w 1 calls; | JK: (A|mn) : 0.683u 0.000s 0.418w 1 calls; | JK: (A|Q)^-1/2 : 0.083u 0.000s 0.053w 1 calls; | JK: (Q|mn) : 0.100u 0.017s 0.062w 1 calls; | HF: Form H : 0.017u 0.000s 0.006w 1 calls; | HF: Form S/X : 0.000u 0.000s 0.002w 1 calls; | HF: Guess : 0.133u 0.000s 0.089w 1 calls; | | SAD Guess : 0.133u 0.000s 0.087w 1 calls; | HF: Form G : 0.517u 0.000s 0.309w 11 calls; | | JK: D : 0.000u 0.000s 0.000w 11 calls; | | JK: USO2AO : 0.000u 0.000s 0.000w 11 calls; | | JK: JK : 0.517u 0.000s 0.308w 11 c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200:2761,Contract,Contraction,2761,https://psicode.org,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200,1,['Contract'],['Contraction']
Integrability,"wargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_func",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:2056,wrap,wrappers,2056,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['wrap'],['wrappers']
Integrability,"whoa, quite a lot of details to handle DFT xtpl -- thanks for working it all out!. > Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?. I'd do a minimum of cleanup here and save it for ddd in 1.5. > The fact that the DFT VV10 ENERGY contribution is included in DFT FUNCTIONAL TOTAL ENERGY is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change DFT VV10 ENERGY to behave like empirical dispersion corrections in terms of variables?. Having VV10 follow the empirical dispersion pattern feels more natural to me. Can add a message warning that usage has changed whenever the var is called for a spell like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L624-L628",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952:687,message,message,687,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952,1,['message'],['message']
Integrability,"will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:2471,depend,dependencies,2471,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,with ENABLE_GENERIC=OFF:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found BLAS: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so); -- LAPACK will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found LAPACK: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so); -- Found LAPACK MKL: /home/termo/intel/mkl/lib/intel64/libmkl_rt.so;... ```; with ENABLE_GENERIC=ON:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external BLAS library found (have you set the MATH_ROOT environment; variable?); Call Stack (most recent call first):; cmake/math/ConfigMath.cmake:105 (config_math_service); external/common/lapack/CMakeLists.txt:12 (include); ```; [CMakeOutput.log](https://pastebin.com/pWwucBCZ),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004:663,message,message,663,https://psicode.org,https://github.com/psi4/psi4/issues/1004,1,['message'],['message']
Integrability,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572:2230,depend,dependencies,2230,https://psicode.org,https://github.com/psi4/psi4/issues/2572,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2317,wrap,wrapper,2317,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure. ## Questions; - [x] Is `libciomr` a good place for the new wrappers",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:1912,wrap,wrapper,1912,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['wrap'],['wrapper']
Integrability,"y makefiles written by cmake.; You don't need to use it in your code, it always works. > You need to build psi4 with the env variable DESTDIR=/tmp/path-to-onstall-psi4-to.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. Got it, `CMAKE_INSTALL_PREFIX` and envvar `DESTDIR` can work together to produce a working installation (and ugly extra files).; ```; > cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr; > cd objdir && cmake --build .; > make DESTDIR=/psi/gits/testinstall4 install; -- Installing: /psi/gits/testinstall4/usr//bin/psi4; ...; > /psi/gits/testinstall4/usr/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; SCF energy............................................................................PASSED; ```. > DESTDIR is a GNU standard. It is totally separate from CMAKE_INSTALL_PREFIX. Yes, I see [here](https://www.gnu.org/prep/standards/html_node/DESTDIR.html) how it's a GNU recommendation that we're only half complying with (full installation plus aforementioned ugly extra files). > Can you just remove the internal stage directory and make it install like all other cmake based projects?. Not really. The internal stage directory was a compromise so that developers could continue to never have to type `make install` and was a prerequisite to them approving the transition from GNUMake to CMake at all. Since then, the stage/ has proven convenient and robust to support fairly transparent mixing of externally detected and internally build dependencies that makes having lots of dependencies (as opposed to monolithic software) tolerable to the users and developers. I'd be glad to seek or try any tweaks to the build system that remedy this install issue, but on the whole, the internal stage solves a lot and breaks a little. What I'm not quite following is how this issue is blocking you. I'm glad to have finally understood and reproduced the issue, but it sounds like an extra `rm -rf` or two gets the desired behavior?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604:1588,depend,dependencies,1588,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604,2,['depend'],['dependencies']
Integrability,"you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have been modified to have a singlet flag, necessary to pass to compure_Vx whether to compute the singlet or triplet term.; - [x] HF classes no longer have a `potential_` attribute. Individual classes may need to access signatures of the specific subclass they have. Instead, subclasses now have a specific subclass for their `potential_` attribute if applicable. An abstract method has been added to the HF base class to get the potential when the subclass doesn't change the method signature.; - [x] RV::compute_Vx_full now exists alongside RV::compute_Vx. The former needs to exist so we can have a flag to control the spin-integration. The latter needs to exist to not break polymorphism when we don't need that flag.; - [x] A new function has been created to make a UKS version of an RKS functional.; - [x] If a triplet is requested, `compute_functional` will build a UKS functional, compute for that, and cannibalize the pieces to get the properly triplet spin-integrated quantity.; - [x] Ability to do `DAXPBY` added.; - [x] Updated a bad test value. ## Checklist; - [x] `test_tdscf_excitations.py` passes. All 70 of the tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:3702,integrat,integration,3702,https://psicode.org,https://github.com/psi4/psi4/pull/2885,2,['integrat'],"['integrated', 'integration']"
Integrability,"you want the dftd3-python pkg from conda-forge. I think you've got the executable/lib, but the qcengine interface uses the python bindings which are in a different package.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2936#issuecomment-1528087425:104,interface,interface,104,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528087425,1,['interface'],['interface']
Integrability,"you'd submit to psi4 with `input.protocols.native_files = ""all""` and then access the file _contents_ as `result.native_files[""grid_field.dat""]`, and that can be readily read into arrays. we don't have any grid-dependent qcvariables at present. adding those would probably need a pass that included MO cube files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2307#issuecomment-929603384:33,protocol,protocols,33,https://psicode.org,https://github.com/psi4/psi4/issues/2307#issuecomment-929603384,2,"['depend', 'protocol']","['dependent', 'protocols']"
Integrability,"…on the external point charges of the ExternalPotential. ## Description; Provides a way to get the gradient of the potential between a Wavefunction object and an ExternalPotential object on the external point charges. These gradients are collected and stored in a protected SharedMatrix object of the ExternalPotnetial during the ExternalPotential.computePotentialGradients() routine, and they are accessible through a ExternalPotential.gradient() method which is bound to a corresponding method in the Python API. ## User API & Changelog headlines; - [ ] Given a Wavefunction object with an ExternalPotential for which a gradient call has been made, the corresponding gradient on the embedded point charges represented by the ExternalPotential can be retrieved by calling gradient() on the ExternalField. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087:376,rout,routine,376,https://psicode.org,https://github.com/psi4/psi4/pull/3087,1,['rout'],['routine']
Modifiability," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497:1958,variab,variable,1958,https://psicode.org,https://github.com/psi4/psi4/issues/2497,5,['variab'],['variable']
Modifiability," 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1394,variab,variable,1394,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['variab'],['variable']
Modifiability, - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5402,plugin,plugins,5402,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability, - [ ] 32. optking/beran: missing docs comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4319,plugin,plugins,4319,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability, - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeL,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5052,plugin,plugins,5052,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability," / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5r0SAMgaJpZM4NK33f>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1398,plugin,plugins,1398,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305,4,['plugin'],['plugins']
Modifiability," 0.68542522 0.00000000 -4.16299454; C -2.88740001 0.00000000 -1.13057937; N -2.05486054 0.00000000 0.01405448; C -2.81721573 0.00000000 1.05258796; C -4.23537365 0.00000000 0.67022148; C -4.27600326 0.00000000 -0.70111647; C -2.35903958 0.00000000 2.45806358; C -2.48623109 0.00000000 -2.40919453; C -1.07657777 0.00000000 -2.84029441; H 1.32705735 0.00000000 5.04949752; H -1.32705735 0.00000000 5.04949752; H 3.13133350 0.00000000 3.22359766; H 5.09358852 0.00000000 1.32905912; H 5.16675318 0.00000000 -1.31569036; H 3.24762417 0.00000000 -3.18492574; H -1.32960963 0.00000000 -5.03269392; H 1.32960963 0.00000000 -5.03269392; H -5.09358852 0.00000000 1.32905912; H -5.16675318 0.00000000 -1.31569036; H -3.13133350 0.00000000 3.22359766; H -3.24762417 0.00000000 -3.18492574; units angstrom; }. set {; reference rhf; scf_type DF; guess SAD; d_convergence 4; e_convergence 4; basis cc-pvqz; df_basis_mp2 cc-pvqz-ri; }. set dfmp2 {; print 1; }. energy('dfmp2'). dfmp2.exampleFN(); ```. My plugin is given below:. ```; /*; *@BEGIN LICENSE; *; * dfmp2 by Psi4 Developer, a plugin to:; *; * PSI4: an ab initio quantum chemistry software package; *; * This program is free software; you can redistribute it and/or modify; * it under the terms of the GNU General Public License as published by; * the Free Software Foundation; either version 2 of the License, or; * (at your option) any later version.; *; * This program is distributed in the hope that it will be useful,; * but WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; * GNU General Public License for more details.; *; * You should have received a copy of the GNU General Public License along; * with this program; if not, write to the Free Software Foundation, Inc.,; * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; *; *@END LICENSE; */. #include <libplugin/plugin.h>; #include <psi4-dec.h>; #include <libparallel/parallel.h>; #include <liboptions/libop",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157:1943,plugin,plugin,1943,https://psicode.org,https://github.com/psi4/psi4/issues/157,1,['plugin'],['plugin']
Modifiability," 0.75695; H2 4.11483 0.00000 -0.75695; --; 1 1; X O1 R H1 125.25 H2 180.0; NA X 0.1 O1 180.0 H2 180.0; }. # set the scan variable of R above, ex: distance, manually/automatically assign; # ----------------------------------------------------------------; def frange(start, stop, step): ## do not change the section of def frange; 	i = start; 	while i < stop:; 		yield i; 		i += step; # ----------------------------------------------------------------; # Rvals=[2.5, 3.0, 4.0] ## manually assign the variable, ex: distance at 2.5, 3.0 and 4.0 anstrom; Rvals=[]; for j in frange(1.4, 1.9, 0.1): ## automatically assign the variable; the endpoint will not be performed; 	Rvals.append(round(j,2)) ## decimal is 2. ; # basis set; # ----------------------------------------------------------------; ##set basis <basisset>; set basis 6-31G(d). set guess sad; set scf_type df; set freeze_core false ## false for ions; ####cp(""df-mp2"") ## moved to below. # get the energy at each variable; # ----------------------------------------------------------------------------; # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work). ecp = {}; for R in Rvals:; dimer.R = R; ecp[R] = energy(""mp2"", bsse_type = ""cp"") ## for new version; #ecp[R] = cp(""df-mp2"") ## for beta version; e= ecp[R] * psi_hartree2kcalmol; psi4.print_out(""R, E_int [kcal/mol]: %3.1f %10.6f\n"" % (R, e)). # print out all the energies; # ----------------------------------------------------------------------------; psi4.print_out(""\n""); psi4.print_out(""CP-corrected interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""). for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)); ```; Output; ```; R [Ang] E_int [kcal/mol] ; -----------------------------------------------------; 1.4 70.792944; 1.5 70.792944; 1.6 70.792944; 1.7 70.792944; 1.8 70.792944; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:1427,variab,variable,1427,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['variab'],['variable']
Modifiability," 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAIL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8490,variab,variable,8490,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['variab'],['variable']
Modifiability," 16 Mar 2022 — #2474, #2482, #2484; * step C — 21 March 2022 — #2489; * step C — 21 March 2022 — #2483; * step B — 23 March 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 25 March 2022 — #2386; * step C — 25 March 2022 — #2496; * step C — 30 March 2022 — #2504; * step C — 31 March 2022 — #2517; * step C — 31 March 2022 — #2414; * step C — #2503; * step C — #2502; * step A — 8 May 2023 — #2537; * step A' — 8 May 2023 — #2861; * step C — #2473 (depends on https://github.com/evaleev/libint/pull/242); * step B — WIP sidestepping; * step B — WIP — https://github.com/evaleev/libint/pull/259; * step B — WIP — https://github.com/evaleev/libint/pull/233; * step B — WIP — https://github.com/evaleev/libint/pull/205; * step B' — WIP runtime changes from step B, no buildtime changes; * step B' — WIP — https://github.com/evaleev/libint/pull/271; * step B' — WIP — #3047 ; * step B' — WIP — https://github.com/conda-forge/libint-feedstock/pull/22; * coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. #### Added; * 15 Feb: `_15` pkg for step B; * 18 Feb: `_4` pkg for step B (thanks, Jet!); * 22 Feb: add OS->MD step in. convert unordered steps to letters; * 16/17 Mar: switch out good conda packages for step 3 (M: 4->6; W: 3->5); * 23 Mar: add more PRs and items to list from 2414; * 23 Mar: added `_7` pkg for mac for step B; * 23 Mar: clarified M-D multipole integral notes (@maxscheurer); * 25 Mar: reordered some bullets for merged PRs; * 5 Apr: add more M-D/OS removal PRs to step C (@maxscheurer); * 5 Apr: switch to new linux pkg for step A (L: 12->16); * 9 Apr: add new mac pkg for step A (M: 8) and edited step A; * 21 May: updated table for v1.6; * 10 Feb 2023: updated table for v1.7 and A' replacing step A. deleted A packages and posted A' Linux one; * 17 Feb 2023: added A' Mac; * 16 May 2023: finish out A' row for v1.8; * 4 Dec 2023: finish out A'' row (incomplete B' strategy) for v1.9. note L2 sh",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:7690,config,config,7690,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['config'],['config']
Modifiability, 31. optking/beran: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 32. optking/beran: missing docs comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skelet,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4236,plugin,plugins,4236,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability," 4.728530D-01 8.484700D-02; 1.932000D-01 7.632000D-03; D 1 1.00; 4.728530D-01 1.000000D+00; D 1 1.00; 1.932000D-01 1.000000D+00; D 1 1.00; 7.820000D-02 1.0000000; F 1 1.00; 4.064000D-01 1.000000D+00; F 1 1.00; 1.848000D-01 1.0000000. ****. I 0; I-ECP 4 28; g potential; 1; 2 1.00000000 0.00000000; s-g potential; 3; 2 40.03337600 49.98964900; 2 17.30057600 281.00655600; 2 8.85172000 61.41673900; p-g potential; 4; 2 15.72014100 67.41623900; 2 15.20822200 134.80769600; 2 8.29418600 14.56654800; 2 7.75394900 28.96842200; d-g potential; 4; 2 13.81775100 35.53875600; 2 13.58780500 53.33975900; 2 6.94763000 9.71646600; 2 6.96009900 14.97750000; f-g potential; 4; 2 18.52295000 -20.17661800; 2 18.25103500 -26.08807700; 2 7.55790100 -0.22043400; 2 7.59740400 -0.22164600. """""",; key=""basis"",; name=""ECP+valence"",; ). psi4.set_options(; {; ""e_convergence"": 1e-8,; ""d_convergence"": 1e-8,; }; ). psi4.core.set_output_file(""output_ecp_plus_valence.dat"", False). psi4.energy(""scf""); e1 = psi4.variable(""HF TOTAL ENERGY""). ### valence only; psi4.basis_helper(; """"""; assign aug-cc-pvtz; assign I noecp. [noecp]; I 0; S 11 1.00; 5.546500D+03 1.560000D-04; 8.382140D+02 9.860000D-04; 1.821870D+02 2.792000D-03; 3.121230D+01 -4.325100D-02; 1.953140D+01 2.341340D-01; 8.240990D+00 -7.509430D-01; 2.194550D+00 8.829680D-01; 1.109110D+00 4.620610D-01; 3.746410D-01 2.228600D-02; 1.770800D-01 -4.353000D-03; 8.106100D-02 1.102000D-03; S 11 1.00; 5.546500D+03 -7.300000D-05; 8.382140D+02 -5.080000D-04; 1.821870D+02 -1.158000D-03; 3.121230D+01 1.219300D-02; 1.953140D+01 -8.785400D-02; 8.240990D+00 3.382000D-01; 2.194550D+00 -5.765500D-01; 1.109110D+00 -4.092980D-01; 3.746410D-01 5.674590D-01; 1.770800D-01 6.124890D-01; 8.106100D-02 1.432310D-01; S 1 1.00; 3.746410D-01 1.000000D+00; S 1 1.00; 1.770800D-01 1.000000D+00; S 1 1.00; 1.001000D-01 1.000000D+00; S 1 1.00; 4.120000D-02 1.0000000; P 9 1.00; 1.889880D+02 5.850000D-04; 2.128680D+01 3.692300D-02; 1.003960D+01 -2.353240D-01; 3.451800D+00 3.414830D-01; 1.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167#issuecomment-2120930760:3088,variab,variable,3088,https://psicode.org,https://github.com/psi4/psi4/pull/3167#issuecomment-2120930760,2,['variab'],['variable']
Modifiability," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21420,plugin,plugin,21420,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,4,['plugin'],['plugin']
Modifiability," >	 // => Auxiliary Basis Set <= //; 												 >	 std::shared_ptr<BasisSet> auxiliary = reference_->get_basisset(""DF_BASIS_SAPT"");; 												 >; // => Sizing <= //											 // => Sizing <= //. int nn = primary_->nbf();										 int nn = primary_->nbf();; 												 <; int na = Cocc0A->colspi()[0];									 int na = Cocc0A->colspi()[0];; int nb = Cocc0B->colspi()[0];									 int nb = Cocc0B->colspi()[0];; int nr = Cvir0A->colspi()[0];									 int nr = Cvir0A->colspi()[0];; int ns = Cvir0B->colspi()[0];									 int ns = Cvir0B->colspi()[0];; int nQ = auxiliary->nbf();										 int nQ = auxiliary->nbf();; size_t nrQ = nr * (size_t)nQ;									 size_t nrQ = nr * (size_t)nQ;; size_t nsQ = ns * (size_t)nQ;									 size_t nsQ = ns * (size_t)nQ;. int nT = 1;												 int nT = 1;; #ifdef _OPENMP												#ifdef _OPENMP; nT = Process::environment.get_n_threads();								 nT = Process::environment.get_n_threads();; #endif													#endif. // => Stashed Variables <= //									 // => Stashed Variables <= //. std::shared_ptr<Matrix> S = matrix_cache[""S""];							 std::shared_ptr<Matrix> S = matrix_cache[""S""];; std::shared_ptr<Matrix> D_A = matrix_cache[""D_A""];						 <; std::shared_ptr<Matrix> P_A = matrix_cache[""P_A""];						 <; std::shared_ptr<Matrix> V_A = matrix_cache[""V_A""];							 std::shared_ptr<Matrix> V_A = matrix_cache[""V_A""];; std::shared_ptr<Matrix> J_A = matrix_cache[""J_A""];						 <; std::shared_ptr<Matrix> K_A = matrix_cache[""K_A""];						 <; std::shared_ptr<Matrix> D_B = matrix_cache[""D_B""];						 <; std::shared_ptr<Matrix> P_B = matrix_cache[""P_B""];						 <; std::shared_ptr<Matrix> V_B = matrix_cache[""V_B""];							 std::shared_ptr<Matrix> V_B = matrix_cache[""V_B""];; std::shared_ptr<Matrix> J_B = matrix_cache[""J_B""];						 <; std::shared_ptr<Matrix> K_B = matrix_cache[""K_B""];						 <; std::shared_ptr<Matrix> K_O = matrix_cache[""K_O""];						 <; 												 <; // => Auxiliary C matrices <= //								 <; 												 <; std::shared_ptr<Matrix> Cr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790:2882,Variab,Variables,2882,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790,2,['Variab'],['Variables']
Modifiability," > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults.; > ; > ```; > ==> E20 Dispersion (MP2) <==; > ; > ; > Disp20 (MP2) -0.37881730 [mEh]; > Exch-Disp20,u 0.02037338 [mEh]; > Scaling Scheme: Disp; > Scaling Factor: 0.707; > ; > SAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2600,variab,variable,2600,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,2,['variab'],['variable']
Modifiability," @psi-rking, I don't remember seeing any projection of rot/trans out of Hessian. Is this just because by using SALCs you're assured of only displacements in vib-active directions? Assuming we someday get an analytic Hessian mtd, projection would be needed, right? I'm inclined to group projection with the vib analysis for comparison of proj and unproj freqs, so psi4.fd module needn't be involved.; - [ ] signature `SharedMatrix fd_freq_1(boost::shared_ptr<Molecule> mol, Options &options, const boost::python::list& grad_list, int freq_irrep_only)` (just like at present); - [ ] remove communication with globals (`Process`); - [ ] return nmw H (just like at present). vibrational analysis; - should move to python; - possibly already drafted/ready by Addison/Brandon; - [ ] tentative signature `normalmode(molecule, hessian, gradient=None, **kwargs)` where the arrays are `psi4.Matrix` or numpy arrays, gradient defaults to None (just there to project out of Hessian), and I don't care about the function name; - [ ] mass-weights by masses in molecule; - [ ] does H = 1 – R – T projection; - should dress up printing w/reduced masses IR intensities (if get dipder) someday but that's beyond the scope of this issue; - [ ] returns freq & normco arrays (or OrderedDict w/symm, force constant, etc. info). thermo analysis; - should move to python; - already ready by Addison/Brandon; - [ ] needs printing and Cp additions backported from forthcoming C++ version; - [ ] tentative signature `thermo(molecule, frequencies, E0=None, **kwargs); - [ ] stash all those energy pieces in a dict or psivars; - should review anharm analysis so harm readily subcases it; - [ ] tentatively returns Total Gibbs Energy in E_h. application; - [ ] take freq-isotope test case (not checked in yet) and rewrite it (and the `driver.frequency()` fn) so that wfn (containing mol & H) from first H2O 2nd deriv calc can be passed into vib and thermo analyses w/o ever recomputing H. All the compare_values should still pass.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/347:3730,rewrite,rewrite,3730,https://psicode.org,https://github.com/psi4/psi4/issues/347,1,['rewrite'],['rewrite']
Modifiability," C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1251,config,configured,1251,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['config'],['configured']
Modifiability," CFOUR, seems to me an optimal frame for this purpose (I saw that certain FPA schemes are already implemented in it). . The Psi4/Cfour route looks simpler for me. Basically I will use Cartesian coordinates, but in some cases it would be useful to do CCSD(T) optimizations via CFOUR (requiring internal coordinates). How to execute the solution you posted with Psi4? I tried to put it into a file `test.dat` and run `psi4 test.dat`, but -- after correcting the possible typo [`atomic_result.dict()` instead of `atomicresult.dict()`], I received the following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1078, in _opener\n'; ' return self._accessor.open(self, flags, '; 'mode)\n'; 'FileNotFoundError: [Errno 2] No such file or '; 'directory: '; ""'/xstorage/tobias/bin/cfour/basis/GENBAS'\n"",; 'error_type': 'un",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:1220,config,config,1220,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,2,['config'],['config']
Modifiability," Check out [`proc.py/run_sapt`](https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/proc.py#L2611) for an interesting case of passing wavefunctions and molecules into primary `proc.py` functions.; - `DF` and `RI` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:2245,plugin,plugins,2245,https://psicode.org,https://github.com/psi4/psi4/pull/246,2,['plugin'],['plugins']
Modifiability," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:4023,Config,Configuring,4023,https://psicode.org,https://github.com/psi4/psi4/issues/1041,3,"['Config', 'config']","['Configuring', 'configure']"
Modifiability," EST] INFO: qcfractalcompute.config: Reading configuration data from configs/config.3049902-1.yaml; Traceback (most recent call last):; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <module>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <dictcomp>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/lila/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1696426865911/work/build/stage/share/psi4'; ``` . To decode this output a little, the failure results from qcarchive trying to get the version of psi4. The specific qcarchive code is here: https://github.com/MolSSI/QCFractal/blob/32a29a86d6673b0ea1a743b02d3af314c2fd164c/qcfractalcompute/qcfractalcompute/run_scripts/qcengine_list.py#L12. The code to query the version in qcarchive is newer than issue #3084, which is why it probably was not caught at the time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126:1866,variab,variable,1866,https://psicode.org,https://github.com/psi4/psi4/issues/3126,2,['variab'],['variable']
Modifiability, PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:5866,Adapt,Adapted,5866,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Modifiability," Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:2078,rewrite,rewrite,2078,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rewrite'],['rewrite']
Modifiability," Setting option MAX_AM_ERI: 6; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4033,config,configuration,4033,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,2,['config'],['configuration']
Modifiability," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1587,plugin,plugin,1587,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,1,['plugin'],['plugin']
Modifiability," This allows for easy extension of the COSX code to support more grids in the future, if desired; and allows for smoother implementation of other features in this PR. 2. Control over the active COSX grid now relies on the `current_grid_` string variable instead of the boolean `early_screening_` variable. This fits better with the `unordered_map` arrangement this code proposes, and is not limited to a two-grid scheme. 3. Upon user request (i.e., setting `DEBUG` != 0), information about each grid is printed out. Information printed out includes: total number of grid points, total number of grid blocks, average grid points per block, and average grid points per atom. 4. The timer.dat file presents the amount of time spent in COSX per grid, as well as the total COSX time. ## User API & Changelog headlines; - [X] Setting `DEBUG` to != 0 now prints out specific information on each grid used during a COSX calculation. ## Dev notes & details; - [X] COSX grids, and related variables, are now grouped together in `unordered_map` objects, and the code is adjusted to match.; - [X] Control over active grids is now controlled by `gridopt_` instead of `early_screening_`.; - [X] For COSX calculations, timer.dat now generates COSX timings per-grid, as well as the overall COSX time.; - [X] Informational printout of COSX grids has been added. ## Questions; - [ ] What do we want to do with `early_screening_`? In this PR, it basically has no use, since its functionality has been replaced by that of `gridopt_`. Early screening as a tactic (i.e., using looser ERI screening thresholds for early SCF iterations) _is_ a thing that could be added in the future for which `early_screening_` could be applicable, but that is not yet in Psi4 as far as I know. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3032:1356,variab,variables,1356,https://psicode.org,https://github.com/psi4/psi4/pull/3032,1,['variab'],['variables']
Modifiability," TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1150,adapt,adapters,1150,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapt'],['adapters']
Modifiability, [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5296,plugin,plugins,5296,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability," _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:4687,plugin,plugin,4687,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['plugin'],['plugin']
Modifiability," `PSI_API`, to serve as a potential replacement for the lost functionality. Other LAPACK functions are already `PSI_API`, so this should not be any more burden Psi4-side. ### Archival; - [x] Add `ael.cc` to [psi4attic](https://github.com/psi4/psi4attic) **(merged https://github.com/psi4/psi4attic/pull/1)**; - [ ] Add `Wabei_RHF_FT2_a.cc` to [psi4attic](https://github.com/psi4/psi4attic). ### TODO; - [ ] Rework the remaining `Matrix::diagonalize` to only take references, and rework all callers to only pass references, eliminating pointer arguments. May touch: `dct/dct_memory.cc`, `libmints/cdsalclist.cc`, `libmints/molecule.cc`, ...; - [ ] `adc/prepare_tensors.cc` is now the only remaining caller of the Davidson solver in `libqt`. It has exactly one call site, and the solver is not `PSI_API`. Candidate for future cleanup. ## Questions; - [ ] Question1. ## Checklist; - [x] No new features; - [x] Almost the entire test suite passes, sans MRCC due to unrelated issues. Some runtime-loaded plugins are not covered.; ```; ========================================================================================================== short test summary info ==========================================================================================================; > FAILED ../tests/mrcc/ccsd_t_/test_input.py::test_mrcc_ccsd_t_ - AssertionError: Using the `local_options` keyword argument is deprecated in favor of using `task_config`, in version 0.30.0 it will stop working.; > FAILED ../tests/pytests/test_composite.py::test_allen_focal_point - NameError: name 'psi4' is not defined; > FAILED ../tests/mrcc/optfreq/test_input.py::test_mrcc_optfreq - AssertionError: Using the `local_options` keyword argument is deprecated in favor of using `task_config`, in version 0.30.0 it will stop working.; > =========================================================================== 3 failed, 3726 passed, 173 skipped, 219 xfailed, 7068 warnings in 2238.06s (0:37:18) ==================================",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:6341,plugin,plugins,6341,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['plugin'],['plugins']
Modifiability," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:11363,Config,ConfigX,11363,https://psicode.org,https://github.com/psi4/psi4/pull/442,2,"['Config', 'variab']","['ConfigX', 'variable']"
Modifiability," b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:1445,config,config,1445,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['config'],['config']
Modifiability," being overhauled. The (old) native psi4 Obara-Saika code was recently replaced with an interface to the (new) libint2 library (#2388). I've found that in my specific use case, while the new OEI code is serially faster than the old OEI code, the new OEI code scales surprisingly poorly with multiple cores. . ### Background. I'm in the process of implementing semi-numerical exchange for psi4. The cost of this algorithm is dominated by the calculation of OEIs with the following functional form:; ```; (u | (r - r_g)^{-1} | v),; ```; where `u` and `v` are basis functions, and `r_g` is a point in space on some quadrature. A naive semi-numerical exchange code computes these integrals over all `u`, `v`, and `r_g`, requiring O(N^3) work. In current psi4, integrals of this type can be computed with either the old OS code (via the `MultipolePotentialInt` class) or the new libint2 interface (via the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Core",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:1007,plugin,plugin,1007,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['plugin'],['plugin']
Modifiability," called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:1700,variab,variable,1700,https://psicode.org,https://github.com/psi4/psi4/pull/1393,1,['variab'],['variable']
Modifiability, comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-so,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5099,plugin,plugins,5099,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability," common to many derivative methods, it's counterproductive to generalize this beyond providing a common conjugate gradient solver (which is outside my role here). For example, consider the orbital response term of MP2 between Ugur's MP2 paper, [Francesco's DSRG (regularized MP2) paper](https://aip.scitation.org/doi/10.1063/1.5100175), and the [DiStasio/Head-Gordon MP2 paper](https://onlinelibrary.wiley.com/doi/full/10.1002/jcc.20604) behind Rob's implementation. All three codes will get the same relaxed PDMs and solve orbital response terms by conjugate gradients, but they do not agree on which terms should be called orbital response or the exact form of the conjugate gradient equation to be solved. The caller code should be able to compute the PDMs however they want, with just a link to the relevant paper in the comments. ## Open Questions; * @dgasmith, what do you need to get MP2 RDM information passed to double hybrid functionals (#1333)?; * Crawford group in general, how willing are you to adapt the CC gradients to the new style of gradients?; * What is the fate of CI gradients? These were operational in Psi3 but were not hooked back up to Psi4. This means that at present, Psi can't even do CASSCF gradients. I believe this is enough of an issue for @fevangelista that he was playing with getting these hooked back in.; * Do we want to allow blocks to only include the correlation density but not the reference density? This is simple enough for a Hartree-Fock reference but does introduce ambiguity for other references, e.g., if MR-DSRG wants the gradient code to add a CAS reference to its correlation density.; * Is there some inherent problem with Psi's 3-index tensor technology that would have forced Ugur to use his own tensor classes? I'm not familiar with 3-index manipulations.; * One of the other major problems with the current approach to gradients is prefactors. When writing different blocks of the gradient code to `libiwl`, there's a prefactor you need for dif",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:7252,adapt,adapt,7252,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['adapt'],['adapt']
Modifiability," dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:1192,config,configuration,1192,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,2,['config'],['configuration']
Modifiability," engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:2241,adapt,adapted,2241,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['adapt'],['adapted']
Modifiability," external/upstream/libint2/all; …; -- Looking for posix_memalign - found; -- Could NOT find Eigen3 (missing: EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK) (Required is at least version ""2.91.0""); CMake Error at CMakeLists.txt:124 (message):; C++ API cannot be built without Eigen3; configure (via CMake) and install; Eigen3 and add the install prefix to CMAKE_PREFIX_PATH, or add; -DREQUIRE_CXX_API=OFF to the CMake command line if the C++ API is not; required. -- Configuring incomplete, errors occurred!; See also ""external/upstream/libint2/libint2_external-prefix/src/libint2_external-build/CMakeFiles/CMakeOutput.log"".; ninja: build stopped: subcommand failed.; ```. The source of libint2 is; https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L63. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following line:; ```; 115:find_package(Eigen3 MODULE); ```; Hence `find_package` runs in only MODULE mode, where CMake searches `FindEigen3.cmake` (https://cmake.org/cmake/help/v3.18/command/find_package.html). Its location is set by the `CMakeLists.txt`:; ```; 6:list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules); ```. CMake passes only the `Eigen3_DIR` variable. https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L87. but it is not used by `FindEigen3.cmake`, resulting in configuration error. https://github.com/evaleev/libint does not seem to have `find_package(Eigen3 MODULE)` line and `FindEigen3.cmake` file. A workaround is to `export EIGEN3_ROOT=/path/to/eigen3/include`, or patch; ```diff; --- a/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt; +++ b/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt; @@ -114,3 +114,3 @@; ; -find_package(Eigen3 MODULE); +find_package(Eigen3); ; ```; and remove `FindEigen3.cmake`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2606:1786,variab,variable,1786,https://psicode.org,https://github.com/psi4/psi4/issues/2606,2,"['config', 'variab']","['configuration', 'variable']"
Modifiability," for TARGET blas:; blas.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; blas.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; blas.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;... ```. Building then fails with:; ```; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:3118,config,configure,3118,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,1,['config'],['configure']
Modifiability," friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version dete",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:2062,variab,variables,2062,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['variab'],['variables']
Modifiability," from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in `psi4/lib`. After installation, PSI4 will look in; $prefix/share/psi. If you want to specify a non-standard location for; this; information, you can do this by setting the environmental variable; $PSI4DATADIR to the directory containg the basis, grids, etc.,; subdirectories. -Rob. On Fri, Apr 11, 2014 at 9:39 AM, zxinfish notifications@github.com wrote:. > Reopened #56 https://github.com/psi4/psi4public/issues/56.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56#issuecomment-40206429:1424,variab,variable,1424,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429,1,['variab'],['variable']
Modifiability," gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavef",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2242,plugin,plugin,2242,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,['plugin'],['plugin']
Modifiability," i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1382,variab,variable,1382,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['variab'],['variable']
Modifiability," into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""./../skeletonambit/pymodule.py"", line 65, in run_skeletonambit; skeletonambit_wfn = psi4.core.plugin('skeletonambit.so', ref_wfn). RuntimeError: ambit::Tensor::build: Ambit has not been initialized.; ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/593:2199,plugin,plugin,2199,https://psicode.org,https://github.com/psi4/psi4/pull/593,1,['plugin'],['plugin']
Modifiability," lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); 2018-12-05T15:55:39.8052689Z SKIP [1] lib\psi4\tests\test_addons.py:940: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp); 2018-12-05T15:55:39.8053679Z ; 2018-12-05T15:55:39.8055000Z ============ 7 passed, 15 skipped, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3963,plugin,plugin,3963,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['plugin'],['plugin']
Modifiability," make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2720,plugin,plugins,2720,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,2,"['plugin', 'variab']","['plugins', 'variables']"
Modifiability, missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4831,plugin,plugins,4831,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability," name you want, and comment out any optional qc addons you don't want. ; 2. Then issue something like`conda env create -f Linux-buildrun-maxeco.yaml` and activate the environment. ; 3. Clone psi4, then `cmake -S. -Bobjdir -DBUILD_SHARED_LIBS=ON ...`, and it usually configures fine. ; 4. For Apple Silicon, there isn't a env yaml file yet, but replacing `libblas=*=*mkl` with `libblas=*=*accelerate` or `libblas=*=*openblas`, getting rid of other mkl lines, and aggressively pruning qc addons (not many ported to arm64) should do the trick.; 5. For Apple in general, you probably need the `target-sdk` stuff at https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml; 6. For Linux, if you want a high-AM L2, replace this line `conda-forge/label/libint_dev::libint=2.7.3dev1` https://github.com/psi4/psi4/blob/master/devtools/conda-envs/Linux-buildrun-maxeco.yaml#L22 with `psi4/label/testing::libint2=2.7.2=h2fe1556_1` . Despite the different package names, versions, and channels, they're built from the same source, just different configuration. (I can't build a big AM w/i the 6h c-f time window.). ### Future Build Tools. Previously, the main build helper has been the `psi4-dev` conda package that combines a maximal set of build tools (compilers, cmake, etc.) and psi4 buildtime ecosystem packages along with a little script `psi4-path-advisor` to firmly configure cmake with conda env locations. As far as I know, this is pretty convenient and durable, especially for build-once-use-forever workflows. Complications I've heard of are (1) Mac `CONDA_BUILD_SYSROOT` sometimes required present/absent and (2) `psi4-dev` is monolithic, awkward to update, or sometimes out-of-date with psi4 master's requirements. I, for one, don't often use `psi4-dev` b/c I want more flexibility with switching out packages. **So, I'd be glad to hear thoughts on what form and contents the build helpers should take. A few plans and questions below, but any feedback appreciated.**. 1. Do you want",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:2536,config,configuration,2536,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['config'],['configuration']
Modifiability," no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh compile. The build script has moved away from setup.py to a pure CMake input.; - After the inversion you will still have the option to use standard ""Psithon"" inputs or to import psi4 as a Python module.; ## Progress (master branch); - [x] CMake Rewrite; - [x] Kill the boost; - [x] Inversion; - [x] History rewrite; - [x] Official 1.1 release; ## . Sincerely,; - Lori, Jet, Andy, and Daniel",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:4469,Plugin,Plugin,4469,https://psicode.org,https://github.com/psi4/psi4/issues/468,3,"['Plugin', 'Rewrite', 'rewrite']","['Plugin', 'Rewrite', 'rewrite']"
Modifiability," only pops up for cbs/findif/nbody jobs, which can be confusing. This PR promotes to tag complaint to upon `import psi4` for uniformity.; - [x] ""OliP"" [reported a bug at the forum](http://forum.psicode.org/t/problems-with-cbs-and-version-1-6/2494) where an input like the below returned `‘<’ not supported between instances of ‘dict’ and ‘dict’ `. This came about because I was comparing well-behaved dertype per method tuples like; ```; ['hf', 'mp2', 'ccsd(t)', 'ccsd(t)']; [(2, {}), (1, {}), (1, {}), (1, {})]; ```. rather than the real-life cases one gets with ROHF. Sorting on only the dertype fixes the bug.; ```; ['hf', 'mp2', 'ccsd(t)', 'ccsd(t)']; [(2, {}), (0, {1: ""\nPsiException: select_mp2_gradient: Method 'mp2' with MP2_TYPE 'DF', FREEZE_CORE 'True', and REFERENCE 'ROHF' not available\n\n""}), (0, {1: ""\nPsiException: select_ccsd_t__gradient: Method 'ccsd(t)' with CC_TYPE 'CONV' and REFERENCE 'ROHF' not available\n\n""}), (0, {1: ""\nPsiException: select_ccsd_t__gradient: Method 'ccsd(t)' with CC_TYPE 'CONV' and REFERENCE 'ROHF' not available\n\n""})]; ```. ```; molecule N {; 0 4; N 0.00 0.00 0.00; }. set {; scf_type direct; reference rohf; r_convergence 6; d_convergence 7; e_convergence 8; freeze_core true; }. e_cbs = energy(‘cbs’,; scf_basis=‘aug-cc-pV[TQ5]Z’,; corl_wfn=‘mp2’,; corl_basis=‘aug-cc-pV[TQ]Z’,; delta_wfn=‘ccsd(t)’,; delta_basis=‘aug-cc-pV[DT]Z’); ```. - [x] @hokru reported that `energy('SCF/def2-SVP',bsse_type=['cp','nocp'],dft_functional=my_functional)` got broken with the distributed driver. That's patched up for string `dft_functional` at least.; - [x] I noticed that a change I made to `_qcvars_transitions` to help version reported would make `variables(include_deprecated_keys=True)` fail. that's fixed. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2590:2041,variab,variables,2041,https://psicode.org,https://github.com/psi4/psi4/pull/2590,1,['variab'],['variables']
Modifiability," psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:2008,plugin,plugin,2008,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['plugin'],['plugin']
Modifiability," pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1112,config,configfile,1112,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['config'],['configfile']
Modifiability," reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for displacements and normal modes. My hunch is that this is a problem with changing the symmetry of the molecule between the two findif calls, but I'd like Py-side findif to be accepted before looking into this, just in case. Sound good?. ## Checklist; - [x] Tests added for any newly functional features; - [x] [All of full tests run, modulo DFT benchmarks and plugins](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge (as soon as the last review is in)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1108:2357,plugin,plugins,2357,https://psicode.org,https://github.com/psi4/psi4/pull/1108,1,['plugin'],['plugins']
Modifiability," state and; maintain than alternatives like ""order by spatial orbital, and then alpha; first and beta second within spatial orbital numbering""). With that ordering, the signs given are correct. (See, for example,; equation 2.260 of Szabo and Ostlund). Best,; David. On Wed, Sep 16, 2020 at 2:04 PM saadyalouz <notifications@github.com> wrote:. > Dear developers,; >; > I am currently running SA-CASSCF calculations on the formaldimine; > molecule. I am particularly interested by the determinant decomposition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1452,variab,variables,1452,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,2,['variab'],['variables']
Modifiability," test (wB97X-D, revTPSS, PW6B95, TPSS, PWB6K only):.   | N=1 | N=4 | N=1 | N=4; -- | -- | -- | -- | --; Psi4/1.2-rc2-acml-5.3.1 | FAIL |   |   |  ; Psi4/1.2-rc2-lapack-3.8.0 | 395.944 | 299.438 | 1.00 | 1.32; Psi4/1.2-rc2 (1.2rc2.dev35) | 268.523 | 223.574 | 1.47 | 1.77; Psi4/1.2-rc2-blis-0.3.2 | 356.723 | 262.964 | 1.11 | 1.51; Psi4/1.2-rc2-openblas-0.2.20 | FAIL |   |   |  ; Psi4/1.2-rc2-openblas-0.3.0 | FAIL |   |   |  . All compiled with gcc-7.1.0, cmake-3.8.2, dftd3-3.2-r0:. `cmake -H. -BBUILDS/$1 -DCMAKE_INSTALL_PREFIX=/opt/packages/psi4/$1 -DLAPACK_INCLUDE_DIRS=/path/to/lapack -DMAX_AM_ERI=5` . ACML-5.3.1 is a binary. . Netlib's BLAS and lapack (3.8.0) compiled with `-O3 -march=barcelona -fPIC` and `-O3 -frecursive -march=barcelona -fPIC` respectively, including deprecated functions. I had to add `-DENABLE_dkh=ON` to the psi4 build options, otherwise the fortran compiler wouldn't get picked up. The 1.2rc2.dev35 is a binary that was available in conda, compiled against `mkl 2018.0.2, intel-openmp 2018.0.0`. Flame's blis-0.3.2 was compiled into netlib's lapack-3.8.0, with `./configure auto`; lapack compiled as above. OpenBLAS-0.2.20 was compiled with `USE_THREAD=0 USE_OPENMP=0 TARGET=BARCELONA`. OpenBLAS-0.3.0 was compiled with both: ; `make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32` and ; `make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32 CFLAGS=""-fPIC -fopenmp -fstack-protector-strong"" FFLAGS=""-fPIC -fopenmp -fstack-protector-strong""` and; `make CC=gcc FC=gfortran DYNAMIC_ARCH=1 BINARY=64 NO_LAPACK=0 NO_AFFINITY=1 USE_THREAD=0 USE_OPENMP=0 NUM_THREADS=32 CFLAGS=""-fopenmp -march=barcelona -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe"" FFLAGS=""-fopenmp -march=barcelona -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe""` ; linked using the `.so` and `.a`; it doesn't pass at all even with `psi4 -n 1`. The node I used is a 2 x Quad-Core AMD Opteron(tm) Processor 2352, running up-to-date Debian 8.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-394986909:1304,config,configure,1304,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-394986909,1,['config'],['configure']
Modifiability," the JSON. There are 2 possibilities:; 1. You create at the top of the file, just before the Metadata section a block like:; ```python; #+begin_src python :tangle trex.json; ""psi4mp2"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]],; ""t1"" : [ ""float"", [ ""mo.num"", ""mo.num"" ]],; },; ""psi4ccsd"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]]; },; #+end_src; ``` ; 2. Or you create a section in the Org-mode syntax like; ```text; * Psi4; This section documents the temporary arrays specific to psi4. ** DFMP2 (psi4dfmp2 group); Here, we specify the data for DFMP2.... [\; t = \sum_{ij} ...; \]; \[; W = \sum_{ijab} ...; \] . #+NAME: psi4dfmp2; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |; | ~t~ | ~float~ | ~(mo.num,mo.num)~ | t in the equation above |. #+CALL: json(data=psi4dfmp2, title=""psi4dfmp2""). ** CCSD (psi4ccsd group); Here, we specify the data for CCSD.... #+NAME: psi4ccsd; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |. #+CALL: json(data=psi4ccsd, title=""psi4ccsd"", last=1). ```; Now if in Emacs you execute ""Ctrl-C Ctrl-C"" when your cursor is on the line ""CALL:json ..."", it will automatically generate the JSON code from the data of the table and put it in the file, similarly to what happens when you are using a Jupyter Notebook and you evaluate a cell. Note: the `last=1` argument handles the presence/absence of a comma in the generated JSON. So `last=1` should be present only in the very last JSON block of the file. ; When you compile the library, this will generate the functions `trexio_[read|write|has]_psi4mp2_w` and `trexio_[read|write|has]_psi4ccsd_w`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918:1589,Variab,Variable,1589,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918,1,['Variab'],['Variable']
Modifiability," this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example GCC-5.1, it takes one command.; > ; > Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:1147,plugin,plugins,1147,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['plugin'],['plugins']
Modifiability," to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly defaults) upto $<1 \mu H$ accuracy even for large systems. This is why I was trying to find out why the difference was around 35 uH for decane. Furthermore, since the no. of grid points coming out of pyscf and psi4 were different even for the same number of radial and angular grid points, I even tried to use the same grids as psi4 in pyscf but still got the same result. Here is the script I used; ```python; import os. ncores = 8; os.environ['OMP_NUM_THREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1697,config,config,1697,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,1,['config'],['config']
Modifiability," to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one coul",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1011,plugin,plugin,1011,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['plugin'],['plugin']
Modifiability," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4086,Config,Configuring,4086,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['Config'],['Configuring']
Modifiability,"""Gradient per KS-MO"" does _not_ ""just require exposing it."" First, you need to define it properly. Exact exchange depends on two KS-MOs, not just one, so it isn't clear to me how you'd meaningfully define this as a one KS-MO property. Then, you'd need to implement it, since Psi4 doesn't do this naturally. You'd probably need to decompose the density as a sum of densities for each MO and run the gradient computation on each, so a gradient computation takes #MO's times longer. This should not be the default algorithm. Putting the gradient terms on the wavefunction as array variables seems relatively straightforward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-796658578:578,variab,variables,578,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-796658578,2,['variab'],['variables']
Modifiability,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:403,config,configfile,403,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097,2,"['config', 'plugin']","['configfile', 'plugins']"
Modifiability,"# Description; Substantial changes to the Psi4 DFT infrastructure to add several hundred new DFT functional forms. In addition, adds the SAPT(DFT) and EP2 methods. Several major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:190,enhance,enhancements,190,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['enhance'],['enhancements']
Modifiability,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:857,plugin,plugin,857,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['plugin'],['plugin']
Modifiability,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:23,Variab,Variable,23,https://psicode.org,https://github.com/psi4/psi4/issues/1375,1,['Variab'],['Variable']
Modifiability,"## Big Picture of the Project; See #1783. tl;dr: The goal is to improve orbital convergence in `occ`, but I need the module cleaned up to make it easier to think about the code I'm needing to mess with. I'm breaking a monolith PR into several. ## Description of the PR; The current PR has two objectives. First, condense the MP2 amplitude functions, MP2 energy functions, and MP2 1RDM functions into one function each. Although several methods needed these functions with minimal changes, there were two or three functions created for each of those three. Dealing with how he handled spin-scaling forced me to take a second objective: to clean OCC's handling of spin-scaling variables. OCC previously allowed the user to overwrite the definitions of opposite-spin scaling and spin-component-scaling schemes and used far too many variables. The current scheme still allows users to make their own definitions, but those are now sent to custom variables. In addition, many keywords have been eliminated. OCC's handling of spin-scaling now differs from DFOCC's, but I am not fool enough to take on that module. Obligatory ping of @susilehtola and @hokru, who expressed opinions about this on Slack, and @loriab, who expressed many opinions about this on Slack. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] We have shed another 800+ lines of code.; - [x] Major refactor of spin-scaling in OCC. All keywords for manual handling of spin scaling in OCC are removed. Please use `os_scale` and `ss_scale` for custom scaling. Select the spin scaling method that goes to the current energy by the method string you pass to the energy call.; ~~- [ ] Update documentation accordingly.~~ Deferred to Lori PR. ## Checklist; - [x] Quick tests, occ related tests, manual diff checks, and `test_mp2.py` all pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789:675,variab,variables,675,https://psicode.org,https://github.com/psi4/psi4/pull/1789,4,"['refactor', 'variab']","['refactor', 'variables']"
Modifiability,"## Big Picture of the Project; See #1783. tl;dr: The goal is to improve orbital convergence in `occ`, but I need the module cleaned up to make it easier to think about the code I'm needing to mess with. I'm breaking a monolith PR into several. ## Description of the PR; The objective of the current PR is to clean up `occ/manager.cc`. All duplicated printing and variable setting code is now located in `postprocessing.cc`. ## Infrastructure Changes; * Less code duplication and less code!; * The important `occ` variables are now set in `variables_` C-side so they can be set Py-side.; * A new file has been created, `postprocessing.cc`, for all `occ`'s repetitive printng and Psi variable-setting needs. ## Questions; * @loriab, please check that there's nothing obvious missing. In particular, there is no `test_omp.py`, so I just made a .txt file for you. ## Checklist; - [x] [Quick tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1785:363,variab,variable,363,https://psicode.org,https://github.com/psi4/psi4/pull/1785,3,['variab'],"['variable', 'variable-setting', 'variables']"
Modifiability,## Description. <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] adds `CCSD(AT)` to cbs driver; - [x] progress counter for `(AT)`part.; - [x] fix for #1957 ; - [x] fix for printing wrong variable in `dfocc`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2013:235,variab,variable,235,https://psicode.org,https://github.com/psi4/psi4/pull/2013,1,['variab'],['variable']
Modifiability,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/413:499,plugin,plugin,499,https://psicode.org,https://github.com/psi4/psi4/pull/413,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description. Add Jensen [aug-]pc[[s][seg]-N basis sets; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Add the segmented Jensen basis sets; - [x] Fix up some default auxilliary fns for them; - [x] Need to adapt CBS wrapper [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/driver_cbs.py#L59-L73); ## Questions; - [ ] @jvansan should look it over, particularly the default auxiliary basis sets I chose; ## Status; - [x] Ready to go; ## Other good stuff provided by @jvansan that we don't want to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:250,adapt,adapt,250,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['adapt'],['adapt']
Modifiability,"## Description. Allow CDJK to read a previously generated Cholesky vector. This is useful for my work as we use cholesky in an external plugin to PSI4. The code was generating the Cholesky integrals every time the JK object was initialized. . A workflow where this would be useful is given below,. ```; scf_type cd; set df_ints_io save; refscf, refwfn = energy('scf', return_wfn=True); set df_ints_io load; energy('my_plugin', ref_wfn=refwfn) ; ```. Before, the cholesky vectors could be written after CDJK was initialized. It was not possible to read in Cholesky vectors into CDJK before. . I'm not sure how useful this will be in PSI4, but I have needed this when studying transition metal complexes as the generation of the cholesky integrals takes quite a long time. ; ## Todos; - [x] Read previously generated cholesky vectors from file. ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405:136,plugin,plugin,136,https://psicode.org,https://github.com/psi4/psi4/pull/405,1,['plugin'],['plugin']
Modifiability,"## Description. Code used in the roa driver has been re-organized into a module `findif_response_utils`. ; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - ROA driver functions the same as it does currently.; - New drivers (in the works) will use this module rather than c+p functions from roa.py . _RE comments by @dgasmith_; - [x] Change naming scheme in tensor_helpers.py to clarify return types are not proper matrix/tensor objects; - [x] Change Exceptions raised to `PsiException` so that error information is printed to screen and the output files ; ## Questions; - [x] @lothian thoughts on the `registered_props` dict? It isn't very flexible, but I don't know if this kind of driver _needs_ to be flexible. The hard-coded `registerd_props` dict has been removed in favor of a solution that allows each driver to choose the arguments to the `property()` function in each sub-dir. The module doesn't need to know anything except what the calling driver tells it :).; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/395:676,flexible,flexible,676,https://psicode.org,https://github.com/psi4/psi4/pull/395,2,['flexible'],['flexible']
Modifiability,"## Description. Configures LGTM properly. In the last cbs() pass, I refined the encoding of ""an SCF is produced in the course of a CCSD"" to ""a HF is produced in the course of a CCSD"". Unfortunately, I only refined it in a first pass that hit mp2, ccsd, ccsd(t), etc., not the lesser used fno-ccsd(t), mp3, cisd, etc. which can also be extrapolated. The alarming result is that if you used the latter, you'd get that the extrapolation of HF between 0 and –300 is –600.; ## Todos; - [x] introduces a `.lgtm` file to define the approval regex and number of approvers.; - [x] Now all methods that are usable in cbs() use the same psivar.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/469:16,Config,Configures,16,https://psicode.org,https://github.com/psi4/psi4/pull/469,1,['Config'],['Configures']
Modifiability,"## Description. Distribute test cases and misc.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] For each test case in `samples`, add a `test.in` (intact w/ `#TEST` lines) alongside the plain `input.dat` (w/o`#TEST` lines). This way one can test (by hand) from an installed copy (e.g., conda pkg).; - [x] In `setup`, be more explicit about how to handle argument values that argparse might want to interpret as arguments themselves. Response to http://forum.psicode.org/t/odd-behavior-of-setup/233; - [x] Fix bug that kept undefined literal `${MCONDA}` in `psi4-config` for conda packages. This bug made it useless for querying `psi4-config --includes` for plugin configuration.; ## Status; - [x] Ready to go. Nothing controversial here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/401:603,config,config,603,https://psicode.org,https://github.com/psi4/psi4/pull/401,4,"['config', 'plugin']","['config', 'configuration', 'plugin']"
Modifiability,"## Description. Documentation for plugin creation using binary distribution (on linux only).; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [X] Documents setup of conda envs (w gcc and openblas), compilation of Makefile.conda, and updates documentation of --new-plugin with `+ambit` keyword.; ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/366:34,plugin,plugin,34,https://psicode.org,https://github.com/psi4/psi4/pull/366,2,['plugin'],['plugin']
Modifiability,## Description. Don't build the ambit plugin if ambit is not present.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436:38,plugin,plugin,38,https://psicode.org,https://github.com/psi4/psi4/pull/436,1,['plugin'],['plugin']
Modifiability,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/433:99,flexible,flexible,99,https://psicode.org,https://github.com/psi4/psi4/pull/433,3,"['flexible', 'variab']","['flexible', 'variable']"
Modifiability,## Description. Extends DDX interface to support SCF response and TDSCF. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967:16,Extend,Extends,16,https://psicode.org,https://github.com/psi4/psi4/pull/2967,1,['Extend'],['Extends']
Modifiability,"## Description. Finally, some modernization of the PK JK object. I coded everything trying to maximize code reuse and using polymorphism where it would be good, but if you have any suggestions on the code organization please let me know.; Traditionally, PK denotes the integral supermatrices stored on disk. Here I use it more generally for the class of algorithm storing integrals somewhere instead of recomputing them.; ## Caution:. Some older commits contain additional attempts at algorithms that were deleted since (for being inefficient). You may want to review the most recent commits only.; ## Todos. Notable points that this PR has accomplished:; - [x] In-core PK algorithm when enough memory is available; - [x] ""Reorder"" PK algorithm: the PK supermatrices are directly written on file without any intermediates by reordering the integral computation (thanks to @dgasmith for discussion), good for large to medium memory; - [x] ""Yoshimine"" PK algorithm: pre-sorts integrals on disk, similar to more traditional algorithm. Best for low memory, otherwise quite slow.; - [x] Automatic selection of the algorithm depending on available memory; - [x] wK long-range integrals are also handled; - [x] Non-symmetric density matrices are handled ; ## Questions; - [x] I'd like this pull request to stay unmerged for a few days so everyone who wants to have a look at it has some time to do so. (@andysim, @jturney ?); ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/387:124,polymorphi,polymorphism,124,https://psicode.org,https://github.com/psi4/psi4/pull/387,1,['polymorphi'],['polymorphism']
Modifiability,## Description. Fixes the os.environ KeyError in setup with compilers are not provided to the setup script and CC/CXX/FC environment variables are not set.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Fixes setup.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/329:133,variab,variables,133,https://psicode.org,https://github.com/psi4/psi4/pull/329,1,['variab'],['variables']
Modifiability,"## Description. General wavefunction cleanup, should fix #259. The other TODO's in that issue have been moved to separate issues or were already flagged elsewhere.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Fixed py-side Molden writer; - [x] Added a py-side Molden test; - [x] Moved `return_wfn` warnings into the `energy` class. As these can only be called from here I think thats fine for now. Needs to find a better home in the future.; - [x] Modernized a few plugins; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/304:510,plugin,plugins,510,https://psicode.org,https://github.com/psi4/psi4/pull/304,1,['plugin'],['plugins']
Modifiability,## Description. If Matrix::gemm was called with matrices of different point group size the routine did not fail and returned erroneous results.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Checks the nirrep variable on each matrix of the gemm and throws if they are different.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/276:252,variab,variable,252,https://psicode.org,https://github.com/psi4/psi4/pull/276,1,['variab'],['variable']
Modifiability,"## Description. Increases compatibility with external analysis tools, by providing Gaussian formatted checkpoint file (FCHK) output. Also adds built-in distributed multipole analysis via Stone's GDMA package.; ## Todos; - [x] Add FCHK writer to libmints.; - [x] Incorporate GDMA 2, for distributed multipole analysis.; - [x] Add GDMA options, to prevent user from having to provide a separate input file.; - [x] Put GDMA results in the variables map.; - [x] Add GDMA test case.; - [x] Document FCHK writer and GDMA.; ## Questions; - [x] Although GDMA is released under GPL2, I want to try to contact Anthony Stone to get explicit permission to release his code as a subdirectory of Psi4. I don't think there are any legal problems with including an FCHK writer; I simply followed the [format description](http://www.gaussian.com/g_tech/g_ur/f_formchk.htm) and checked it against some of the GDMA examples. Anybody disagree?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323:436,variab,variables,436,https://psicode.org,https://github.com/psi4/psi4/pull/323,1,['variab'],['variables']
Modifiability,## Description. It was discovered that Psi4 was not properly passing Boost configuration to Ambit this PR rectifies that. Also bumps up the Ambit version tag to v0.1.1-alpha as other fixes were pushed to Ambit.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Fixes Boost configuration passing to Ambit.; - [x] Updates Ambit version tag to v0.1.1-alpha.; - [x] Ambit was not being forced linked into the binary on Linux.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/275:75,config,configuration,75,https://psicode.org,https://github.com/psi4/psi4/pull/275,2,['config'],['configuration']
Modifiability,"## Description. Just removes the VERSION file, because the information is already contained in CMake's configuration files.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Gets rid of the superfluous VERSION file.; - [x] Allows me to see how the new template and contributing files work in practice.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272:103,config,configuration,103,https://psicode.org,https://github.com/psi4/psi4/pull/272,1,['config'],['configuration']
Modifiability,## Description. Makes all components of the dHF computation in FISAPT available as Psi Variables.; ## Todos; - [x] Export detailed components of FISAPT dHF as Psi variables; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480:87,Variab,Variables,87,https://psicode.org,https://github.com/psi4/psi4/pull/480,2,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,"## Description. Minor mods to gdma docs, commas in basis sets, and kJ/mol; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Make GDMA manual pdf linkable from sphinx docs, autodoc gdma setting of array variables, small other GDMA documentation tweaks; - [x] Add the warning about 5930 processors + fnocc + Intel 2015 compilers composed by @ryanmrichard ; - [x] Process basis sets in input parser a little differently so that can use commas in `6-311G(2d,2p)` mentioned in #43 ; - [x] Updated SAPT output format (@jgonthier & @andysim, note); - added third column in kJ/mol ; - realigned output columns (Total SAPT were off) and between SAPT levels; - changed `scal.` to `sc.` to save space; - adjusted fisapt formatting accordingly; - added `[]` around units; - [x] added kJ/mol in `cp()`, `n_body()`, `database()`; ## Questions; - [x] @andysim, I think you were the one who set it up in the input parser so that comma was always signal for python list. Do you foresee any trouble with the scheme here?; ## Status; - [x] Ready to go, though changes to thermo aren't in yet",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/330:242,variab,variables,242,https://psicode.org,https://github.com/psi4/psi4/pull/330,1,['variab'],['variables']
Modifiability,"## Description. The `setup` script was not honoring the user's `CC`, `CXX`, or `FC` environment variables as it claimed to do. Also, if compiler options were not set then allow CMake to decide.; ## Todos; - [x] Honor environment variables.; - [x] Allow CMake to decide which compilers to use.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/325:96,variab,variables,96,https://psicode.org,https://github.com/psi4/psi4/pull/325,2,['variab'],['variables']
Modifiability,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1253:338,rewrite,rewrite,338,https://psicode.org,https://github.com/psi4/psi4/pull/1253,1,['rewrite'],['rewrite']
Modifiability,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1243:338,rewrite,rewrite,338,https://psicode.org,https://github.com/psi4/psi4/pull/1243,1,['rewrite'],['rewrite']
Modifiability,"## Description. The open-shell SAPT0 code, with documentation included.; ## Todos; - [x] Implement all open-shell SAPT0 terms; - [x] Add documentation; - [x] Add export of Psi variables; ## Questions; - [ ] When ROHF is requested, we cannot compute the relaxed induction term, hence only unrelaxed induction is available for the Psi variables. For now, I export it in the `SAPT IND20,R ENERGY` and `SAPT EXCH-IND20,R ENERGY` and I issue a warning in the output file that these variables actually contain the unrelaxed induction. This way, the PsiVar machinery computes the total induction energy correctly. @loriab, is that fine ? It should be quite rarely used anyway.; ## Status; - [x] Ready to go, as far as I'm concerned.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/479:176,variab,variables,176,https://psicode.org,https://github.com/psi4/psi4/pull/479,3,['variab'],['variables']
Modifiability,"## Description. This PR does two things:. 1. Adds a new compile-time option, `FORCE_PEDANTIC`, that adds the `-pedantic-errors` flag to the compilation flag list when enabled. The `-pedantic-errors` flag has the compilation fail any time the code does not strictly follow the C++ language standard, i.e., whenever a compiler-specific language extension is used. `FORCE_PEDANTIC` is currently set to be enabled by default. ; 2. Fixes any instances of the code where the above option/flag would cause a compilation failure. This only requires two changes currently - removing extra semicolons in `libdiis/diismanager.h`, and replacing use of variable-length C-style arrays in `libmints/extern.cc`. The goal of these changes is to improve code portability across different compilers. By effectively disabling compiler-specific language extensions, the code no longer relies on specific compiler functionalities to work, and therefore should be compatible with a larger range of compilers across a wider variety of systems. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds a new compile-time setting, `FORCE_PEDANTIC`, that causes compilation to fail whenever use of a compiler-specific extension is detected.; - [X] Removes extraneous semicolons in `libddis/diismanager.h` that led to compiler error with the `FORCE_PEDANTIC` option enabled.; - [X] Replaces the use of variable-length C-style arrays in `libmints/extern.cc` with `std::vector` constructs. ## Questions; - [X] Should this new option be on by default?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145:640,variab,variable-length,640,https://psicode.org,https://github.com/psi4/psi4/pull/3145,2,"['portab', 'variab']","['portability', 'variable-length']"
Modifiability,"## Description. This PR makes a couple of changes to the handling of grids, and debugging thereof, within the COSX code:. 1. The code is refactored so that grids, instead of being stored in separate variables, are combined together in an `unordered_map` structure. Variables reliant on specific grids, such as `Q_mat_`, are treated similarly; and the code is adjusted to match. This allows for easy extension of the COSX code to support more grids in the future, if desired; and allows for smoother implementation of other features in this PR. 2. Control over the active COSX grid now relies on the `current_grid_` string variable instead of the boolean `early_screening_` variable. This fits better with the `unordered_map` arrangement this code proposes, and is not limited to a two-grid scheme. 3. Upon user request (i.e., setting `DEBUG` != 0), information about each grid is printed out. Information printed out includes: total number of grid points, total number of grid blocks, average grid points per block, and average grid points per atom. 4. The timer.dat file presents the amount of time spent in COSX per grid, as well as the total COSX time. ## User API & Changelog headlines; - [X] Setting `DEBUG` to != 0 now prints out specific information on each grid used during a COSX calculation. ## Dev notes & details; - [X] COSX grids, and related variables, are now grouped together in `unordered_map` objects, and the code is adjusted to match.; - [X] Control over active grids is now controlled by `gridopt_` instead of `early_screening_`.; - [X] For COSX calculations, timer.dat now generates COSX timings per-grid, as well as the overall COSX time.; - [X] Informational printout of COSX grids has been added. ## Questions; - [ ] What do we want to do with `early_screening_`? In this PR, it basically has no use, since its functionality has been replaced by that of `gridopt_`. Early screening as a tactic (i.e., using looser ERI screening thresholds for early SCF iterations) _is_ a thin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3032:137,refactor,refactored,137,https://psicode.org,https://github.com/psi4/psi4/pull/3032,5,"['Variab', 'refactor', 'variab']","['Variables', 'refactored', 'variable', 'variables']"
Modifiability,"## Description. This is part of Psi4 porting to Windows (#933). `psithon2` test fails on Windows:; ```; 2018-12-05T15:52:01.1057243Z 8/9 Test #307: psithon2 .........................***Failed 24.86 sec; 2018-12-05T15:52:01.1057730Z 	Built-in energy...................................................PASSED; 2018-12-05T15:52:01.1059103Z 	PSIPATH database..................................................PASSED; 2018-12-05T15:52:01.1059291Z 	Built-in database.................................................PASSED; 2018-12-05T15:52:01.1059763Z 	PSIPATH plugin....................................................PASSED; 2018-12-05T15:52:01.1059834Z ; 2018-12-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in sc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1410:553,plugin,plugin,553,https://psicode.org,https://github.com/psi4/psi4/pull/1410,1,['plugin'],['plugin']
Modifiability,"## Description. With prompting and help from @SebWouters this PR updates ChemPS2 to v1.7 for DMRG-CASPT2 computations.; ## Todos; - [x] Psi4 now uses ChemPS2 tag 1.7; - [x] ChemPS2 no longer requires GSL, nuked that from CMake; - [x] Fiddled with the CMake a bit to clear up BLAS linking issues; - [x] Names have moved from `dmrgci` to `dmrg-ci` following discussion with @loriab @SebWouters ; - [x] Updated `src/dmrg` to latest version from ChemPS2; - [x] Added CASPT2 test case; - [x] Closes #263, #266, and #384 ; - [ ] Issue #150 is still open, for 1.0 we really need to clean this up. I think the two largest issues are the documentation and the keyword review. I think @loriab and @dgasmith will have to handle the rest.; - [ ] We have been experiencing some linking issues. While this works on my linux box and OS X laptop a few others testing this compilation would be beneficial. May close #264.; ## Questions; - [x] Keywords have moved around to align to the ""plugin"" version of ChemPS2 with a few minor alterations. Please check these out @loriab @kannon92 @SebWouters ; - [x] Do we want to add additional test cases?; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388:970,plugin,plugin,970,https://psicode.org,https://github.com/psi4/psi4/pull/388,1,['plugin'],['plugin']
Modifiability,## Description. With this change `psi4 --new-plugin` now creates `Makefile.conda`.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [X] Add `Makefile.conda` and fetch CMAKE_INSTALL_PREFIX; ## Status; - [X] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/358:45,plugin,plugin,45,https://psicode.org,https://github.com/psi4/psi4/pull/358,1,['plugin'],['plugin']
Modifiability,## Description. `1.0rc2` prep; ## Todones; - [x] pull ambit and chemps repos from proper upstream; - [x] bump chemps to `1.7.1`; - [x] fix that +something plugins weren't actually getting their specialized code. ambit couldn't run with default (c2v) input file; - [x] prep version computer for `1.0rc2`; ## Status; - [x] Ready to go. curious about travis and scf5,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/430:155,plugin,plugins,155,https://psicode.org,https://github.com/psi4/psi4/pull/430,1,['plugin'],['plugins']
Modifiability,"## Description. docs and licenses and castup, oh my; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] few tweaks to the energy/grad docstring tables, #249 ; - [x] improve molecule and fn return docs, #351 & #352 ; - [x] update licenses in plugin template dir, since those are mixed py/c++ and awkward to do by script; - [x] hesitant replacement of cast-up with pyconstruct basis machinery. no differences detected in relevant output files (castup1/2/3, sapt2/4/5, pywrap-all), #285 ; - [x] do `[s]` on seconds in sapt; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/364:279,plugin,plugin,279,https://psicode.org,https://github.com/psi4/psi4/pull/364,1,['plugin'],['plugin']
Modifiability,## Description. fixed up some plugin templates that escaped the wavefunction pass; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Make [asm]ointegrals plugin templates wavefunction-pass (and basis-building) compliant; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/309:30,plugin,plugin,30,https://psicode.org,https://github.com/psi4/psi4/pull/309,2,['plugin'],['plugin']
Modifiability,"## Description. housekeeping; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] enables plugins to access wfn python only (w/o `psi4.wavefunction()`), if they're not needing it c-side; - [x] removes pyparsing.py that was pcmsolver legacy and cleans up a few wrappers refs; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/377:127,plugin,plugins,127,https://psicode.org,https://github.com/psi4/psi4/pull/377,1,['plugin'],['plugins']
Modifiability,"## Description. plugins from conda binary work; ## Todos; - [x] plugin Makefile.template had turned into 3 files with little differences, so ditched them and moved the configuration in cmake; - [x] updated conda and plugin docs; - [x] updated and condensed capabilities table. some features were getting exhaustively included, others not at all. and references weren't clear wrt energy or grad. so shrunk table, while deferring details to the individual module pages. everyone should look over this.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/370:16,plugin,plugins,16,https://psicode.org,https://github.com/psi4/psi4/pull/370,4,"['config', 'plugin']","['configuration', 'plugin', 'plugins']"
Modifiability,## Description. psi4-config had PYTHON_INTERPRETER rather than PYTHON_EXECUTABLE. I need this for my v2rdm plugin to compile with @loriab 's fancy configure script.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/378:21,config,config,21,https://psicode.org,https://github.com/psi4/psi4/pull/378,3,"['config', 'plugin']","['config', 'configure', 'plugin']"
Modifiability,"## Description. smooth user interactions with mp2 & cepa so that minimal inputs have a chance of working (esp. w/grad) and the same call to different modules returns the same answer.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] `cepa(0)`/`ocepa(0)` in occ/dfocc called more specifically as `lccd`/`olccd`. psivars adjusted accordingly.; - [x] meanwhile, `cepa(0)` in fnocc called more specifically as `lccsd` (alias `cepa(0)`) or w/o singles as `lccd`. psivars and managed methods adjusted accordingly.; - [x] fixed defaulting of grad to findif of energies for managed methods. it had broken b/c just tested availability of analytic grad on `procedures['gradient']` and for managed methods that doesn't tell the full story. now probe the managed method in proc.py to see if gradient available.; - [x] alter default algorithms for scf for fnocc and dfocc. we've always said that the scf default for df post-HF methods was df, but only actually did algorithm switching for dfmp2 and sapt. now we really do it. in particular, so long as you don't set scf_type to the contrary, this will make a conv mp2 gradient run conv+conv and a df mp2 gradient run df+df.; ## Minor Todos; - [x] test cases build and run all the plugin templates; - [x] let ppl know how to access rohf mp3 & mp4 for toy problems; ## Questions; - [x] @edeprince3 should look over my changes to fnocc procedures in proc.py to make sure the scf algorithm flipping is sensible.; - [x] ditto, @bozkaya for occ/dfocc; ## Status; - [x] Ready to go, after @edeprince3 and @bozkaya sign off on it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/306:1257,plugin,plugin,1257,https://psicode.org,https://github.com/psi4/psi4/pull/306,1,['plugin'],['plugin']
Modifiability,"## Description; **What?** This PR creates the `IrrepedVector` class template. The `Vector` and `IntVector` classes now inherit from this, adding on methods that only make sense for that particular template instance. **Why?** During a refactor of the MOM code, I had to use `Vector` and `IntVector` features heavily and found this synchronization of the classes necessary to keep my sanity. **Who cares?** Obligatory pings to @hokru (who may want to create `FloatVector` for faster `dfocc` operations) and @lothian (who may want to create `ComplexVector` for magnetic spectroscopies). No reviews required. **How do I review this?** The changes to `export_mints.cc`, `vector.h`, `vector.cc`, `intvector.cc`, and `test_vector.py` are the heart of this PR. The rest are either compatibility changes or general code cleanup. Be warned that `iota` and the `sort` functions are needed for my upcoming MOM changes and are currently unused, and I've changed some functions to not use pointers. ## Todos; - [x] Created `IrrepedVector<T>`; - [x] `Vector` and `IntVector` inherit from `IrrepedVector<T>`; - [x] `Vector` and `IntVector` now have identical code logic; - [x] `iota` and `sort` methods are added; - [x] `IntVector` now has more functionality; - [x] Added bounds checking to several `IrrepedVector<T>` methods.; - [x] Increased test coverage of `Vector`; - [x] Added test coverage of `IntVector`; - [x] Silenced compiler warning about missing override; - [x] Removed several pointers from parameter types; - [x] Removed several pointers from return types; - [x] Changed convention from ""irreped"" to ""irrepped"". ## Checklist; - [x] Full ctest passed (before some trivial edits); - [x] `test_vector.py` passed . ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**; Jet approval **required** before merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2628:119,inherit,inherit,119,https://psicode.org,https://github.com/psi4/psi4/pull/2628,3,"['inherit', 'refactor']","['inherit', 'refactor']"
Modifiability,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1914:44,adapt,adapt,44,https://psicode.org,https://github.com/psi4/psi4/pull/1914,1,['adapt'],['adapt']
Modifiability,"## Description; - [x] fixes #1798 At least make all the def2 orbital and rifit basis sets parseable. These have been read through diff_gbs.py so I know all the elements parse now. Variety of errors found.; - [x] helps #1804 by redirecting def2-*-jkfit specifications toward the universal files. only took about four files to find a satisfactory and minimally disruptive place for a simple map-and-warn :-(; - [x] helps plugins like v2rdm_casscf that are adding internal pb11 by attaching the found Python headers location to the plugin target. This should be merged close to #1804 . This one only hits def2 orbital and RI, while that one hits JFIT and JKFIT, so I think the only conflict should be in the NOTES file. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1806:419,plugin,plugins,419,https://psicode.org,https://github.com/psi4/psi4/pull/1806,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; ... and another one!. This PR is a continuation of the IncFock standardization effort initially started in https://github.com/psi4/psi4/pull/2682, and continued in https://github.com/psi4/psi4/pull/2792 and https://github.com/psi4/psi4/pull/2808. This PR continues to standardize the Incremental Fock process across the current integral-direct JK algorithms present in Psi4. However, this PR stands somewhat in contrast to https://github.com/psi4/psi4/pull/2682 and https://github.com/psi4/psi4/pull/2792. In those PRs, their IncFock schemes were adapted to use that of DFJCOSK, without removing the bells and whistles of their IncFock implementations (e.g., recomputing the full Fock matrix every so often, disabling IncFock after a given convergence threshold). In contrast, DFJCOSK is the template IncFock upon which the two previous PRs were based; however, DFJCOSK does not have the IncFock bells and whistles that DirectJK and DFJLinK had. Unmitigated, the incremental Fock procedure can actually significantly increase the number of SCF iterations needed to converged; and the IncFock bells and whistles in DirectJK and DFJLinK notably mitigate the effect of IncFock on SCF convergence counts. Without these bells and whistles, DFJCOSK runs the significant risk of excessive SCF iterations needed to converge when IncFock is enabled, an issue I have run into in my own calculations. This PR seeks to rectify the aforementioned issue by implementing the IncFock bells and whistles of DirectJK and DFJLinK into DFJCOSK. With these extra features, DFJCOSK can now recompute the full Fock matrix every n iterations, or disable IncFock past a given convergence threshold, at the will of the end user. These features can notably reduce the amount of SCF iterations needed to converge. This PR is also the continued effort to standardize IncFock among all integral-direct SCF algorithms in Psi4. With this PR, DirectJK, DFJLinK, and DFJCOSK will have effectively the exact same increme",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816:563,adapt,adapted,563,https://psicode.org,https://github.com/psi4/psi4/pull/2816,1,['adapt'],['adapted']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. --> @andysim's suggestion worked! Overcomes the bad combination of Intel icpc, c++17 standard, and Libint2 (water energy off by 50 Eh). I've only run smoke tests so far but will fix that tomorrow. *EDIT* I removed some l2 headers among the export_* files that didn't seem to be necessary. And I reordered some l2 headers for consistency with the l2 convenience header. this'll need a little adaptation after #2388 merge, I expect. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2392:466,adapt,adaptation,466,https://psicode.org,https://github.com/psi4/psi4/pull/2392,1,['adapt'],['adaptation']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2391:112,config,config,112,https://psicode.org,https://github.com/psi4/psi4/pull/2391,2,"['config', 'inherit']","['config', 'inherit']"
Modifiability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #2210 revealed that an early test case had fallen prey to `phi_ao`'s Cartesian-only usefulness; - [x] mild enhancement to `diff_gbs` utility script so it can compare out-of-order basis sets; - [x] bump a few dep from-source-build versions. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2262:294,enhance,enhancement,294,https://psicode.org,https://github.com/psi4/psi4/pull/2262,1,['enhance'],['enhancement']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142:424,extend,extend,424,https://psicode.org,https://github.com/psi4/psi4/pull/2142,2,['extend'],['extend']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes the wfn plugin; - [x] Adds a libecpint test to smoke so the c-f build can track it. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2988:369,plugin,plugin,369,https://psicode.org,https://github.com/psi4/psi4/pull/2988,1,['plugin'],['plugin']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] It turns out one can build a psi4 with Fortran extensions (detected, not compiled) w/o a Fortran compiler by letting the CXX compiler handle the linking. This is very useful on Windows where we want a `clang-cl` C/CXX compiler, but the only cohesive Fortran-including stack is the ming (gcc/g++/gfortran) one. So this adds an option `psi4_SKIP_ENABLE_Fortran` to _not_ enable Fortran when the code otherwise would. It doesn't check that the circumstances are suitable (that is, all detected, none to-be-compiled). Works great on Windows (that's how the conda pkg has dkh); haven't tried it on Linux.; - [x] Increasingly, where the <project>Config.cmake files get installed to is configurable, esp. as there's no one place cmake looks for linux/mac/win. So adding that option `psi4_INSTALL_CMAKEDIR`. You won't see a change unless you were customizing `CMAKE_INSTALL_DATADIR`.; - [x] also fix a couple install locations that were obvious for windows install.; - [x] stop testing the extra cli qcf tests for qcf master since those are run on mac, and it hangs. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2946:995,Config,Config,995,https://psicode.org,https://github.com/psi4/psi4/pull/2946,2,"['Config', 'config']","['Config', 'configurable']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; - [x] Allow psi4 to be used with pydantic v1 or v2. ## Dev notes & details; - [x] still using pydantic v1 API but now tolerant of a v1 or v2 pydantic environment. qcel v0.26 and qcng v0.27 have recieved the same treatment. This is that part that's worthy of backport. It's already available on the c-f 1.8.1 build number `_2` conda packages, having been applied by patch.; - [x] bump qcel and qcng versions. for local build cases, switch from `python setup.py` to `pip install` from src. the latter is preferred as setup.py gets phased out, and, in any case, was necessary for qcel, which has transitioned from a setuptools to poetry build backend. this only handles the module, so if a module comes with an executable (e.g., `bin/qcengine` from qcng, that doesn't end up in the right place. ; - [x] fix docs GHA by constraining pb11 to 2.10 for the docs build spec. https://github.com/pybind/pybind11/pull/4679 seems to be the culprit. It's a good and standards-conforming change, but other tooling and/or typing stores on the internet to which sphinx refers all need time to adapt.; - [x] generalize a few cmake config dir locations for addons.; - [x] remove youtube links to F/I SAPT tutorials that have been taken private.; - [x] some build docs I had lying around. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3019:1192,adapt,adapt,1192,https://psicode.org,https://github.com/psi4/psi4/pull/3019,2,"['adapt', 'config']","['adapt', 'config']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `samples/` changes are autogenerated -- don't read them; - [x] update docs env to use psi4-path-advisor; - [x] the old versions of `variable`/`set_variable` fns on core and wfn have been warning-and-forwarding since v1.4 . we had a debugging case where that forward was the problem, so it's time to actually disable them. they'll still give upgrade advice but won't run; - [x] allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through `atin.extras[""extra_infiles""] = {""grid.dat"": <contents>}` and be sure to `atin.protocols.native_files = ""all""`, then one can retrieve through `atres.native_files[""grid_esp.dat""]` or `""grid_field.dat""` closes #2307 . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3095:643,variab,variable,643,https://psicode.org,https://github.com/psi4/psi4/pull/3095,1,['variab'],['variable']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. Refactor `electric_field()` to return ElectricFieldInt rather than OneBodyAOInt. Fixes #2793 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] ElectricFieldInt returned now by `IntegralFactory.electric_field()`; - [x] Equivalent changes in `libmintshelper` made to stop immediate `static cast`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] ElectricFieldInt returned now by `IntegralFactory.electric_field()`; - [x] Equivalent changes in `libmintshelper`. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2795:80,Refactor,Refactor,80,https://psicode.org,https://github.com/psi4/psi4/pull/2795,1,['Refactor'],['Refactor']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. closes #3040. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] print_variables prints array variables. (first and last element); - [x] Used this to test scf guesses in pytest.; - [x] Store new qc variable ""SCF TOTAL ENERGIES"" that is a list of all the SCF iteration energies. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3052:554,variab,variables,554,https://psicode.org,https://github.com/psi4/psi4/pull/3052,2,['variab'],"['variable', 'variables']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081:497,Adapt,Adapt,497,https://psicode.org,https://github.com/psi4/psi4/pull/2081,1,['Adapt'],['Adapt']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; After seeing some GCC warnings related to sprintf usage I decided to modernize SAPTDIIS label generation with the use of `std::string` and a new utility function to retain the output format of `%2d`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No user-visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New function: `to_str_width`: converts any type supported by `std::to_string` to an `std::string`, and prepends as many spaces as required to meet the specified minimum width.; - [x] `SAPTDIIS::get_vec_label` and `SAPTDIIS::get_err_label` are modernized to return an `std::string`, instead of a `char*` that the caller needs to deallocate.; - [x] Functions using these two functions have been adapted to the changes. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2804:1111,adapt,adapted,1111,https://psicode.org,https://github.com/psi4/psi4/pull/2804,1,['adapt'],['adapted']
Modifiability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there is a small error in the VMFC Hessian. The `sign` variable is changed for VMFC but it is not used to multiply the Hessian. Compare this with the gradient above and the energy in line 661. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389:146,variab,variable,146,https://psicode.org,https://github.com/psi4/psi4/pull/2389,1,['variab'],['variable']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Much like PR #2804, this PR is mostly about eliminating `sprintf`-related compiler warnings and modernizing C-style string handling to C++, this time in libmints' `BasisSet::print_detail_cfour`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Modernized `BasisSet::print_detail_cfour()`, highlights:; - [x] No longer uses `sprintf` and a fixed-size char array; - [x] Variables are made `const` wherever reasonable; - [x] Use of `std::find` on doubles is replaced by new functions (`none_of_equal` and `fpeq`) that implement a fuzzy compare with a default tolerance of 1E-14. Probably no behaviour change in practice (unless someone has basis fns which differ in exponent by >0 but <1E-14), but it is usually not recommended to use == on FP types, which is what `std::find` does.; - [x] The `slater.chemie.uni-mainz.de` URL has succumbed to link rot. Replaced with one that points to the latest version that is being preserved by the Internet Archive, both in the C++ and Python implementations.; - [x] Ran clang-format on `basisset.cc` and `basisset.h`. ## Questions; - [x] The new functions `none_of_equal` and `fpeq` are just living in `basisset.cc` and `basisset.h` right now. Would some other file be a better place to put them?. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] I do not have CFOUR, so I cannot really test if this breaks something. It should not, but the `std::find` change _is_ behaviour-altering, albeit only in a corner case. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2937:639,Variab,Variables,639,https://psicode.org,https://github.com/psi4/psi4/pull/2937,1,['Variab'],['Variables']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; My main goal is to provide an option for users to run FSAPT directly through the psiapi and not to have to create extra files and post-process the psi4 outputs. This is largely done by adding an fsapt analysis function to `./psi4/driver/driver.py`. I extended `fsapt.py` by moving its history to `psi4/driver/procrouting/sapt/fsapt.py` to enable users to either run the analysis directly after a `psi4.energy('fisapt0')` calculation through psi variables or through an `AtomicResults` as is demonstrated in `tests/pytests/test_fisapt.py`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Addition of `./psi4/driver/driver.py:fsapt_analysis()` to call fsapt analysis through the psi4 module. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] FSAPT is now available directly through psi4 instead of post-processing output files; - [ ] FISAPT results can be stored in `AtomicResults` permitting the storage of results in a QCArchive database. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3222:331,extend,extended,331,https://psicode.org,https://github.com/psi4/psi4/pull/3222,2,"['extend', 'variab']","['extended', 'variables']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Printf format specifiers are required to match the type of the variable being printed. Using an incorrect format specifier may be UB. This PR resolves instances where the format specifier was incorrect. At least some of these have been triggering GCC warnings, so Psi4 now compiles with a couple fewer warnings. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Likely no user-visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `cctransort/memcheck`: Replace 14 instances of `%1lu` being used for printing an `int`, with `%d`. Make argument `const`.; - [x] `detci/olsengraph.cc`: fix one instance of `%3d` being used for printing a `size_t` integer; - [x] `dlpno/mp2.cc`: fix 12 instances of %d being used for `size_t` integers; - [x] `fnocc/lowmemory_triples.cc`: fix `%i` being used to print a `long`; - [x] `libfock/DirectJK.cc`: fix %3d being used for `size_t` integer; - [x] `libfock/solver.cc`: fix %d being used for `size_t` integer; - [x] `libmints/cdsalclist.cc`: fix 5 instances of %d being used for `size_t` integers; - [x] `libmints/extern.cc`: fix 3 instances of %d being used for `size_t` integers. Make argument `const &`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2771:143,variab,variable,143,https://psicode.org,https://github.com/psi4/psi4/pull/2771,1,['variab'],['variable']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Refactored code in the WaveFunction class as per #2875. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] No changes to user experience. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Removed `nmo_` cache variable in favor of `nmopi_.sum()` to keep things in sync; - [ ] Refactored code to reflect removal of variable. ## Questions; - [ ] Best ways to test this change?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. #2875",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980:80,Refactor,Refactored,80,https://psicode.org,https://github.com/psi4/psi4/pull/2980,4,"['Refactor', 'variab']","['Refactored', 'variable']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Remove c++ optking. Add new python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:588,plugin,plugin,588,https://psicode.org,https://github.com/psi4/psi4/pull/2727,1,['plugin'],['plugin']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The version of ADCC that the Psi4 CMake system currently requires (and tries to build if not found) is incompatible with C++17, and thus always fails to build. See https://github.com/adc-connect/adcc/issues/131 for the error message. This error was also mentioned in issue #2572.; This has been resolved by the ADCC/libtensor devs since, so bumping the required/built ADCC version to the latest release should fix _this particular_ issue with the ADCC build process. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires ADCC version 0.15.13 or newer.; - [x] Fixed issue where building Psi4 from source with the ADCC plugin enabled-but-not-found resulted in a build failure with the error message `ISO C++17 does not allow dynamic exception specifications`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] CMake now looks for ADCC 0.15.13 or newer, if not found the 0.15.13 tarball is downloaded and built. ## Checklist; - [x] No new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785:834,plugin,plugin,834,https://psicode.org,https://github.com/psi4/psi4/pull/2785,1,['plugin'],['plugin']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR builds upon the functions added in #2711 and #2700 to provide more informative error messages if a `SYSTEM_READ`, `SYSTEM_WRITE` or `SYSTEM_LSEEK` fails, including the OS-provided error message, which may have clues for the cause of the error (disk is full, no permission, etc). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Error messages related to some IO errors are now more specific and detailed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New function: `psio_compose_err_msg`. This helps composing PSIO error messages without too much code duplication. It can optionally take an errno value and tack on the error message provided by the OS.; - [x] `psio_volseek` has been reworked to handle any errors internally by calling `psio_error`, instead of returning -1 on error. Appropriate error message generation and some `const` qualifiers were added.; - [x] `PSIO::rw` has been adapted to the changes to `psio_volseek` and error message generation was added after each read/write/seek.; - [x] Functions in `toclen.cc` are now also using `psio_compose_err_msg` to generate messages. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756:1293,adapt,adapted,1293,https://psicode.org,https://github.com/psi4/psi4/pull/2756,1,['adapt'],['adapted']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is the continuation of my previous MOInfo PR #3112, with the following general themes:. - Adding new docstrings and making existing ones machine readable for VS Code (and probably also Doxygen); - Rebalancing the class hierarchy by sinking things that get reused to the base class, and hoisting things up in the inheritance chain that only get used in one derived class; - Reducing visible and mutable state, as well as the contact surface of the classes. This is achieved by making data and functions as private as possible, providing access to data through getters returning `const&` when necessary, and making a few data members `const`. Having `const` members in classes is sometimes considered to be bad form, but AFAIK all of the downsides are already incurred on account of `MOInfoBase` having reference members. The git history on this branch is admittedly a bit messy, I changed my mind about a couple of things. LMK if that is a problem.; The next PR in this series will get to what I originally wanted to achieve and remove uses of the ugly ""cast Dimension object to pointer"" operators (see #2953) from `libmoinfo.`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No API changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolet",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:397,inherit,inheritance,397,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['inherit'],['inheritance']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; While testing PR https://github.com/psi4/psi4/pull/2756, I have discovered a regression introduced by an earlier PR (#2700) of mine.; Before `throw`ing, `psio_error()` tries to write some data to the scratch files. But if `psio_error()` is called due to a write error, and the scratch disk is completely full, then this write will also fail, leading to `psio_error()` getting called again, and an infinite recursion ensues. The source of the regression is that `psio_tocwrite()` ends up calling `wt_toclen()`, which has been enhanced in #2700 to use `psio_error()` if it fails.; This PR resolves the issue by not trying to write anything to scratch if `psio_error()` is called due to a write failure. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None? This regression was new enough that no release suffered from it. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Do not call `psio_tocwrite()` in `psio_error()` if `errval == PSIO_ERROR_WRITE`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2773:605,enhance,enhanced,605,https://psicode.org,https://github.com/psi4/psi4/pull/2773,1,['enhance'],['enhanced']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `DPD::buf4_sort(...)` has some problems, the main scope of the function is quite ~~polluted~~ cluttered and it is a behemoth of a function.; This PR attempts to improve that by moving the incore/out-of-core decision logic into a separate function and file. `DPD::buf4_sort_axpy(...)` had the same code duplicated. The new function uses `const` wherever possible, its integers are now `int64_t` (with the exception of irrep numbers - having >2 billion irreps seems unlikely) and the `incore` variable is now a `bool`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` are slightly easier to read and debug; - [x] Code duplication between `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` is reduced; - [x] Possible reduction in `int` overflow risk via `int64_t`. ## Checklist; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717:571,variab,variable,571,https://psicode.org,https://github.com/psi4/psi4/pull/2717,1,['variab'],['variable']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `DPD::buf4_sort(...)` is not exactly easy on the eyes. This PR attempts to improve that by reducing the scope pollution of the main scope of the function. Const is now used wherever appropriate. The `int` variables are suspect when it comes to overflowing, but this PR intends to be purely a cleanup that does not change any behavior, so all types are preserved as-is, modulo the addition of `const` qualifiers. Squash merge may be a good idea for this PR. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Make `DPD::buf4_sort(...)` slightly easier to read/debug. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Compiles with -Wshadow -Werror=shadow. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2716:285,variab,variables,285,https://psicode.org,https://github.com/psi4/psi4/pull/2716,1,['variab'],['variables']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #2939 . ## User API & Changelog headlines; - [x] fix bug where `optimize(..., engine=""geometric"", molecule=mol)` would not run; - [x] undo some hack fixes and make distributed driver runs through QCFractal ""next"" branch more reliable by making array qcvars shaped numpy arrays. Works with QCFractal >=v0.50beta10. Show examples of using `get_psi_results()` to prepare the results of distributed driver runs in ""normal"" psi4 way. ## Dev notes & details; - [x] In the early days (before ddd entered psi4), all array-like pieces of AtomicResults came back as flat lists, so we had to ""plump"" them into e.g., (nat, 3) for gradient. Then, by the time of v1.6 and QCFractal master v15.8, the AtomicResults preserved all that, so we stopped using the plumper. Now in qcfractal next, they're back to lists again _and_ qcvars have been mingled with other properties, so both separation and plumping are required.; - [x] promote `get_psi_results` as a drop-in replacement after running distributed. It sets up a dummy wfn and qcvariables, just like an internal run, so one doesn't have to deal with picking results off the AtomicResult QCSchema.; - [x] Added labels to tests (mostly findif) so that one can catch all ddd-using tests with `pytest -m ""findif and cbs and nbody""`; - [x] set up a mechanism where can parameterize both pytests and ctests with a snowflake with minimum clutter. ## Questions; - [x] This won't work with current qcf release. I'll ask @bennybp to mint a beta10, then this should work. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review (for review, the 4th commit has the material changes. 3rd are test changes. 1st & 2nd are labeling and syntax.); - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2929:1390,parameteriz,parameterize,1390,https://psicode.org,https://github.com/psi4/psi4/pull/2929,1,['parameteriz'],['parameterize']
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #3016 (supersedes); closes #3084 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] For users, replaces the `psi4-dev` conda package that brought psi4 build dependencies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:437,config,configure,437,https://psicode.org,https://github.com/psi4/psi4/pull/3021,2,['config'],"['configurable', 'configure']"
Modifiability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Note: this isn't going to pass until after #2946~. ## Dev notes & details; - [x] We had the odd situation where the install directories (GNUInstallDirs) were pretty flexible. But it wasn't quite flexible enough for the usual Windows install layout (see https://github.com/psi4/psi4/blob/master/conda/win/meta.yaml#L32-L41). And if you got those all in the right place, the paths computation in `run_psi4.py` (-> `bin/psi4`) and `psi4/__init__.py` wasn't quite as flexible as GNUInstallDirs allowed. So I modernized the lot with pathlib and hopefully systemitized it a bit, too.; - [x] There's a weird case on linux c-f where we're in a git repo, but it's not the psi git repo. Thus versioning is much confused. The versioner can now escape from that case and version as if tarball. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] works for lin, mac, win conda-builds. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2948:246,flexible,flexible,246,https://psicode.org,https://github.com/psi4/psi4/pull/2948,3,['flexible'],['flexible']
Modifiability,"## Description; @dgasmith and I had to do some preliminary work to get the Hessian code extended, and here's the result. Essentially, we've centralized the construction of the core Hamiltonian and its derivatives, which ensures that different codes will correctly obey any new one electron contributions (field perturbation, MM point charges, ECPs, *etc.*) and derivatives thereof. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] @psi-rking: your perturbed CC gradient request should be addressed by this fix.; - [x] Test cases for DFOCC and CCENERGY gradients, with dipole field.; * **User-Facing for Release Notes**; - [x] Improved support for ECPs and external fields, and their gradients, in correlated calculations. . ## Questions; - [x] How should we handle the new signature for mol's `nuclear_repulsion_energy()`? The current solution is to mandate that the field be specified C++-side, but py-side just provides a default zero field. Another option would be to overload with an arg-less function, and provide a deprecation warning for that version (to force the programmer to think about whether they really mean to compute the nuc. energy ignoring the field). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844:88,extend,extended,88,https://psicode.org,https://github.com/psi4/psi4/pull/844,1,['extend'],['extended']
Modifiability,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:491,config,configured,491,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['config'],['configured']
Modifiability,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1381:209,variab,variable,209,https://psicode.org,https://github.com/psi4/psi4/pull/1381,4,['variab'],['variable']
